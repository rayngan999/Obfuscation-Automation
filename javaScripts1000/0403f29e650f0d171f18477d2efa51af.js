/*! js-cookie v3.0.0-rc.0 | MIT */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,function(){var r=e.Cookies,n=e.Cookies=t();n.noConflict=function(){return e.Cookies=r,n}}())}(this,function(){"use strict";function e(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)e[n]=r[n]}return e}var t={read:function(e){return e.replace(/%3B/g,";")},write:function(e){return e.replace(/;/g,"%3B")}};return function r(n,i){function o(r,o,u){if("undefined"!=typeof document){"number"==typeof(u=e({},i,u)).expires&&(u.expires=new Date(Date.now()+864e5*u.expires)),u.expires&&(u.expires=u.expires.toUTCString()),r=t.write(r).replace(/=/g,"%3D"),o=n.write(String(o),r);var c="";for(var f in u)u[f]&&(c+="; "+f,!0!==u[f]&&(c+="="+u[f].split(";")[0]));return document.cookie=r+"="+o+c}}return Object.create({set:o,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var r=document.cookie?document.cookie.split("; "):[],i={},o=0;o<r.length;o++){var u=r[o].split("="),c=u.slice(1).join("="),f=t.read(u[0]).replace(/%3D/g,"=");if(i[f]=n.read(c,f),e===f)break}return e?i[e]:i}},remove:function(t,r){o(t,"",e({},r,{expires:-1}))},withAttributes:function(t){return r(this.converter,e({},this.attributes,t))},withConverter:function(t){return r(e({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(i)},converter:{value:Object.freeze(n)}})}(t,{path:"/"})});
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, cookies) {
  var isFunction = function isFunction(obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
  };

  var parseCookieValue = function parseCookieValue(value, parseJson) {
    if (value.indexOf('"') === 0) {
      value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
    }

    try {
      value = decodeURIComponent(value.replace(/\+/g, ' '));
      return parseJson ? JSON.parse(value) : value;
    } catch (e) {}
  };

  var reader = function reader(cookieValue, cookieName, converter, readUnsanitized, parseJson) {
    var value = readUnsanitized ? cookieValue : parseCookieValue(cookieValue, parseJson);

    if (converter !== undefined && isFunction(converter)) {
      return converter(value, cookieName);
    }

    return value;
  };

  $.cookie = function (key) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    key = key && !$.cookie.raw ? encodeURIComponent(key) : key;
    if (value !== undefined && !isFunction(value)) {
      var attributes = Object.assign({}, $.cookie.defaults, options);

      if (typeof attributes.expires === 'string' && attributes.expires !== '') {
        attributes.expires = new Date(attributes.expires);
      }

      var cookieSetter = cookies.withConverter({
        write: function write(cookieValue) {
          return encodeURIComponent(cookieValue);
        }
      });

      value = $.cookie.json && !$.cookie.raw ? JSON.stringify(value) : String(value);

      return cookieSetter.set(key, value, attributes);
    }

    var userProvidedConverter = value;
    var cookiesShim = cookies.withConverter({
      read: function read(cookieValue, cookieName) {
        return reader(cookieValue, cookieName, userProvidedConverter, $.cookie.raw, $.cookie.json);
      }
    });

    if (key !== undefined) {
      return cookiesShim.get(key);
    }

    var results = cookiesShim.get();
    Object.keys(results).forEach(function (resultKey) {
      if (results[resultKey] === undefined) {
        delete results[resultKey];
      }
    });

    return results;
  };

  $.cookie.defaults = Object.assign({ path: '' }, cookies.defaults);

  $.cookie.json = false;

  $.cookie.raw = false;

  $.removeCookie = function (key, options) {
    cookies.remove(key, Object.assign({}, $.cookie.defaults, options));
    return !cookies.get(key);
  };
})(jQuery, Drupal, window.Cookies);;
var okApp = okApp || {};

(function ($, cookies) {

  /**
   * Determines if logged in.
   *
   * @return     {boolean}  True if logged in, False otherwise.
   */
  okApp.isLoggedIn = function () {
    function isAuthenticated() {
      var sessionExpiresAt = decodeURI(cookies.get('sessionExpiresAt'));
      if (sessionExpiresAt === 'undefined') return;
      var expirationDate = sessionExpiresAt ? new Date(JSON.parse(sessionExpiresAt)).getTime() : new Date(sessionExpiresAt).getTime();
      var accessToken = cookies.get('accessToken');
      return !!accessToken && !!sessionExpiresAt && expirationDate > new Date().getTime();
    }
    if (cookies.get(drupalSettings.ok_user.cookie_login) || isAuthenticated()) return true;
    return false;
  };

  /**
   * Check if the user is a customer.
   *
   * @return     {boolean}  True if customer, False otherwise.
   */
  okApp.isCustomer = function () {
    if (cookies.get(drupalSettings.ok_user.cookie_offlog) || window.sessionStorage.getItem('isCustomer')) return true;
    return false;
  };

  /**
   * Check if the user is a T24.
   *
   * @return     {boolean}  True if customer, False otherwise.
   */
  okApp.isT24User = function () {
    return false;
  };

  /**
   * Delete / Hide  content CTA o Block that depends of  user type
   */
  okApp.userSegmentationCheck = function (elemScope) {
    $('[data-segment-id]', elemScope).each(function () {
      var content = '';
      var emptyContent;
      var userSegment = okApp.isCustomer() ? 'customer' : 'prospect';
      // Get segment id
      var segmentId = $(this).attr('data-segment-id');
      // data-user-segment-active: It is related with the value
      // from field_display_customer that indicates if user segmentation is
      // enabled
      var isActiveSegmentation = $(this).attr('data-user-segment-active');
      // Get Customer content
      try {
        // CTAs segmented from wysiwyg store customer's content encoded on base64.
        content = atob($(this).attr('data-customer-segment-content'));
        // Empty content validation is normal ''.
        emptyContent = '';
      }
      catch (err) {
        // CTAs segmented on other pages (e.g. '/fondo-inversion/F00000O2WK') store
        // customer's content on escaped HTML format wrapped by double quotes.
        // This content causes an exception in the atob function.
        if (segmentId !== 'no-customer-segment') {
          content = JSON.parse($(this).attr('data-customer-segment-content'));
        }
        // Empty content validation includes double quotes '""'.
        emptyContent = '""';
      }
      // Get Customer class
      var customerClass = $(this).attr('data-customer-segment-class');
      // Get Customer url
      var customerUrl = $(this).attr('data-customer-segment-url');
      // Get Customer target
      var customerTarget = $(this).attr('data-customer-segment-target');
      // Get Customer title
      var customerTitle = $(this).attr('data-customer-segment-title');
      // Get Customer hide property that indicates if customer cta is
      // shown or not
      var hideCustomerCta = $(this).attr('data-customer-segment-hide');
      if (userSegment === 'customer' && hideCustomerCta) {
        $(this).addClass('hide');
        return;
      }
      // Get Prospect hide property that indicates if prospect cta is
      // shown or not
      var hideProspectCta = $(this).attr('data-prospect-segment-hide');
      if (userSegment === 'prospect' && hideProspectCta) {
        $(this).addClass('hide');
      }
      // Check element without customer content. Sections only shown from Propect user
      if (userSegment === 'customer' && segmentId === 'no-customer-segment') {
        // Remove content when is customer view
        $(this).remove();
        return;
      }
      // If user segmentation check is disable doesn't change the content and keep
      // prospect content view
      if (userSegment === 'customer' && isActiveSegmentation === '0') {
        return;
      }
      // If segment is for customers then it change the data-user-segment attribute
      if (userSegment === 'customer') {
        $(this).attr('data-user-segment', 'customer');
      }
      // Check if there is customer content or is not empty and it is customer segment
      // to change content to customer info
      if (content && content.trim() !== emptyContent && userSegment === 'customer') {
        // Verify it has content from editor
        if ($(this).children('.text-formatted').length > 0) {
          // Create "dummy" element to check if has text formatted class from
          // wysiwyg
          var el = document.createElement('html');
          el.innerHTML = content;
          // If customer content on wysiwyg is empty the content from prospect is keeping
          if ($.trim($(el).find('.text-formatted').html()).length === 0) {
            return;
          }
        }
        // Replace cta href
        if (customerUrl) {
          $(this).attr('href', customerUrl);
        }
        // Replace cta target
        if (customerTarget) {
          $(this).attr('target', customerTarget);
        }
        // Replace cta title
        if (customerTitle) {
          $(this).attr('title', customerTitle);
        }
        // Replace cta class
        if (customerClass) {
          $(this).attr('class', customerClass);
        }
        // Replace content
        $(this).html(content);
        if (content.indexOf('data-user-segment') > 0) {
          okApp.userSegmentationCheck($(this));
        }
      }
    });
  };

})(jQuery, window.Cookies);
;
