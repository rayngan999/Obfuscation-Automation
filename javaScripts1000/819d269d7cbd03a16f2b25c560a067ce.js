(window.webpackJsonp = window.webpackJsonp || []).push([
    [44], {
        1: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.CURRENT = 0] = "CURRENT", e[e.FULL_TIME = 1] = "FULL_TIME", e[e.PART_1 = 2] = "PART_1", e[e.PART_1_EX = 3] = "PART_1_EX", e[e.PART_2 = 4] = "PART_2", e[e.PART_2_EX = 5] = "PART_2_EX", e[e.PART_3 = 6] = "PART_3", e[e.PART_3_EX = 7] = "PART_3_EX", e[e.PART_4 = 8] = "PART_4", e[e.PART_4_EX = 9] = "PART_4_EX", e[e.PART_5 = 10] = "PART_5", e[e.PART_5_EX = 11] = "PART_5_EX", e[e.PART_6 = 12] = "PART_6", e[e.PART_7 = 13] = "PART_7", e[e.PART_8 = 14] = "PART_8", e[e.PART_9 = 15] = "PART_9", e[e.PART_X = 16] = "PART_X", e[e.PART_P2 = 17] = "PART_P2", e[e.PART_PEN = 18] = "PART_PEN", e[e.PART_PESAPALLO_X1 = 19] = "PART_PESAPALLO_X1", e[e.PART_PESAPALLO_X2 = 20] = "PART_PESAPALLO_X2", e[e.PART_PESAPALLO_PEN = 21] = "PART_PESAPALLO_PEN", e[e.GAME = 22] = "GAME", e[e.GAMES_IN_LAST_SET = 23] = "GAMES_IN_LAST_SET", e[e.HITS = 24] = "HITS", e[e.ERRORS = 25] = "ERRORS", e[e.OUTS_WICKETS1 = 26] = "OUTS_WICKETS1", e[e.OVERS1 = 27] = "OVERS1", e[e.OUTS_WICKETS2 = 28] = "OUTS_WICKETS2", e[e.OVERS2 = 29] = "OVERS2", e[e.PESAPALLO_SECOND_HALF = 30] = "PESAPALLO_SECOND_HALF", e[e.PESAPALLO_PENALTIES = 31] = "PESAPALLO_PENALTIES", e[e.GOLF_FINAL = 32] = "GOLF_FINAL", e[e.MMA_FINAL_RESULT = 33] = "MMA_FINAL_RESULT", e[e.CRICKET_DECLARED_FIRST_INNING = 34] = "CRICKET_DECLARED_FIRST_INNING", e[e.CRICKET_DECLARED_SECOND_INNING = 35] = "CRICKET_DECLARED_SECOND_INNING", e[e.RACE_RESULTS_TIME = 36] = "RACE_RESULTS_TIME", e[e.RACE_RESULTS_GAP = 37] = "RACE_RESULTS_GAP", e[e.RACE_RESULTS_LAP_GAP = 38] = "RACE_RESULTS_LAP_GAP", e[e.RACE_RESULTS_DISTANCE = 39] = "RACE_RESULTS_DISTANCE", e[e.RACE_RESULTS_LAP_DISTANCE = 40] = "RACE_RESULTS_LAP_DISTANCE", e[e.RACE_SORT = 41] = "RACE_SORT", e[e.RACE_LAPS = 42] = "RACE_LAPS", e[e.RACE_STARTING_POSITION = 43] = "RACE_STARTING_POSITION", e[e.RACE_PITSTOPS = 44] = "RACE_PITSTOPS", e[e.STATS_RANK = 45] = "STATS_RANK", e[e.STATS_POINTS = 46] = "STATS_POINTS", e[e.STATS_JUMP_ROUND_1 = 47] = "STATS_JUMP_ROUND_1", e[e.STATS_JUMP_ROUND_2 = 48] = "STATS_JUMP_ROUND_2", e[e.STATS_TIME = 49] = "STATS_TIME", e[e.STATS_GAP = 50] = "STATS_GAP", e[e.STATS_EVENT_PARTICIPANT_SORT_KEY = 51] = "STATS_EVENT_PARTICIPANT_SORT_KEY", e[e.STATS_STOP_REASON = 52] = "STATS_STOP_REASON", e[e.STATS_PENALTY_LAP = 53] = "STATS_PENALTY_LAP", e[e.STATS_MISSED_SHOT = 54] = "STATS_MISSED_SHOT", e[e.STATS_STOP_EVENT_STAGE = 55] = "STATS_STOP_EVENT_STAGE", e[e.STATS_ON_TRACK = 56] = "STATS_ON_TRACK", e[e.STATS_STOP_REASON_TEXT = 57] = "STATS_STOP_REASON_TEXT", e[e.STATS_LAPS_DISTANCE = 58] = "STATS_LAPS_DISTANCE", e[e.STATS_JUMPS_COUNT = 59] = "STATS_JUMPS_COUNT", e[e.STATS_RIDES = 60] = "STATS_RIDES", e[e.STATS_LEG_RESULT = 61] = "STATS_LEG_RESULT", e[e.STATS_RESULT = 62] = "STATS_RESULT", e[e.STATS_IS_PLAYING = 63] = "STATS_IS_PLAYING", e[e.STATS_CURRENT_POINTS = 64] = "STATS_CURRENT_POINTS", e[e.STATS_CURRENT_LEG_RESULT = 65] = "STATS_CURRENT_LEG_RESULT", e[e.STATS_WINS = 66] = "STATS_WINS", e[e.RANK = 67] = "RANK", e[e.EVENT_PARTICIPANT_HOLE_INFO = 68] = "EVENT_PARTICIPANT_HOLE_INFO", e[e.EVENT_PARTICIPANT_RANK_TIED = 69] = "EVENT_PARTICIPANT_RANK_TIED", e[e.EVENT_PARTICIPANT_PAR_DIFF = 70] = "EVENT_PARTICIPANT_PAR_DIFF", e[e.EVENT_PARTICIPANT_STATUS = 71] = "EVENT_PARTICIPANT_STATUS", e[e.EVENT_PARTICIPANT_PAR_TODAY = 72] = "EVENT_PARTICIPANT_PAR_TODAY", e[e.UNDEFINED = 73] = "UNDEFINED"
                }(a || (a = {}))
        },
        10: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.SCHEDULED = 1] = "SCHEDULED", e[e.LIVE = 2] = "LIVE", e[e.FINISHED = 3] = "FINISHED", e[e.POSTPONED = 4] = "POSTPONED", e[e.CANCELED = 5] = "CANCELED", e[e.EXTRATIME = 6] = "EXTRATIME", e[e.PENALTY = 7] = "PENALTY", e[e.RETIRED = 8] = "RETIRED", e[e.WALKOVER = 9] = "WALKOVER", e[e.AFTER_ET = 10] = "AFTER_ET", e[e.AFTER_PEN = 11] = "AFTER_PEN", e[e.FIRST_HALF = 12] = "FIRST_HALF", e[e.SECOND_HALF = 13] = "SECOND_HALF", e[e.FIRST_PER = 14] = "FIRST_PER", e[e.SECOND_PER = 15] = "SECOND_PER", e[e.THIRD_PER = 16] = "THIRD_PER", e[e.FIRST_SET = 17] = "FIRST_SET", e[e.SECOND_SET = 18] = "SECOND_SET", e[e.THIRD_SET = 19] = "THIRD_SET", e[e.FOURTH_SET = 20] = "FOURTH_SET", e[e.FIFTH_SET = 21] = "FIFTH_SET", e[e.FIRST_QRT = 22] = "FIRST_QRT", e[e.SECOND_QRT = 23] = "SECOND_QRT", e[e.THIRD_QRT = 24] = "THIRD_QRT", e[e.FOURTH_QRT = 25] = "FOURTH_QRT", e[e.FIRST_INN = 26] = "FIRST_INN", e[e.SECOND_INN = 27] = "SECOND_INN", e[e.THIRD_INN = 28] = "THIRD_INN", e[e.FOURTH_INN = 29] = "FOURTH_INN", e[e.FIFTH_INN = 30] = "FIFTH_INN", e[e.SIXTH_INN = 31] = "SIXTH_INN", e[e.SEVENTH_INN = 32] = "SEVENTH_INN", e[e.EIGHTH_INN = 33] = "EIGHTH_INN", e[e.NINTH_INN = 34] = "NINTH_INN", e[e.EXTRA_INN = 35] = "EXTRA_INN", e[e.INTERUPTED = 36] = "INTERUPTED", e[e.ABANDONED = 37] = "ABANDONED", e[e.HALF_TIME = 38] = "HALF_TIME", e[e.TIME_OUT = 39] = "TIME_OUT", e[e.FIRST_ET = 40] = "FIRST_ET", e[e.SECOND_ET = 41] = "SECOND_ET", e[e.PENDING = 42] = "PENDING", e[e.DELAYED = 43] = "DELAYED", e[e.SUSPENDED = 44] = "SUSPENDED", e[e.TO_FINISH = 45] = "TO_FINISH", e[e.PAUSED = 46] = "PAUSED", e[e.FIRST_SET_TB = 47] = "FIRST_SET_TB", e[e.SECOND_SET_TB = 48] = "SECOND_SET_TB", e[e.THIRD_SET_TB = 49] = "THIRD_SET_TB", e[e.FOURTH_SET_TB = 50] = "FOURTH_SET_TB", e[e.FIFTH_SET_TB = 51] = "FIFTH_SET_TB", e[e.GAME = 52] = "GAME", e[e.SECOND_PLACE = 53] = "SECOND_PLACE", e[e.AWARDED = 54] = "AWARDED", e[e.SIXTH_SET = 55] = "SIXTH_SET", e[e.SEVENTH_SET = 56] = "SEVENTH_SET", e[e.AFTER_DAY1 = 57] = "AFTER_DAY1", e[e.AFTER_DAY2 = 58] = "AFTER_DAY2", e[e.AFTER_DAY3 = 59] = "AFTER_DAY3", e[e.AFTER_DAY4 = 60] = "AFTER_DAY4", e[e.AFTER_DAY5 = 61] = "AFTER_DAY5", e[e.AFTER_ROUND1 = 62] = "AFTER_ROUND1", e[e.AFTER_ROUND2 = 63] = "AFTER_ROUND2", e[e.AFTER_ROUND3 = 64] = "AFTER_ROUND3", e[e.FIRST_ROUND = 65] = "FIRST_ROUND", e[e.SECOND_ROUND = 66] = "SECOND_ROUND", e[e.THIRD_ROUND = 67] = "THIRD_ROUND", e[e.FOURTH_ROUND = 68] = "FOURTH_ROUND", e[e.AFTER_EI = 69] = "AFTER_EI", e[e.RACE = 73] = "RACE", e[e.OVERALL = 74] = "OVERALL", e[e.HEAT_6 = 124] = "HEAT_6", e[e.AFTER_STAGE_1 = 149] = "AFTER_STAGE_1", e[e.AFTER_STAGE_2 = 150] = "AFTER_STAGE_2", e[e.AFTER_STAGE_3 = 151] = "AFTER_STAGE_3", e[e.AFTER_STAGE_4 = 152] = "AFTER_STAGE_4", e[e.AFTER_STAGE_5 = 153] = "AFTER_STAGE_5", e[e.AFTER_STAGE_6 = 154] = "AFTER_STAGE_6", e[e.AFTER_STAGE_7 = 155] = "AFTER_STAGE_7", e[e.AFTER_STAGE_8 = 156] = "AFTER_STAGE_8", e[e.AFTER_STAGE_9 = 157] = "AFTER_STAGE_9", e[e.AFTER_STAGE_10 = 158] = "AFTER_STAGE_10", e[e.AFTER_STAGE_11 = 159] = "AFTER_STAGE_11", e[e.AFTER_STAGE_12 = 160] = "AFTER_STAGE_12", e[e.AFTER_STAGE_13 = 161] = "AFTER_STAGE_13", e[e.AFTER_STAGE_14 = 162] = "AFTER_STAGE_14", e[e.AFTER_STAGE_15 = 163] = "AFTER_STAGE_15", e[e.AFTER_STAGE_16 = 164] = "AFTER_STAGE_16", e[e.AFTER_STAGE_17 = 165] = "AFTER_STAGE_17", e[e.AFTER_STAGE_18 = 166] = "AFTER_STAGE_18", e[e.AFTER_STAGE_19 = 167] = "AFTER_STAGE_19", e[e.AFTER_STAGE_20 = 168] = "AFTER_STAGE_20", e[e.AFTER_STAGE_21 = 169] = "AFTER_STAGE_21", e[e.AFTER_STAGE_22 = 170] = "AFTER_STAGE_22", e[e.AFTER_STAGE_23 = 171] = "AFTER_STAGE_23", e[e.AFTER_STAGE_24 = 172] = "AFTER_STAGE_24", e[e.AFTER_STAGE_25 = 173] = "AFTER_STAGE_25", e[e.AFTER_STAGE_26 = 174] = "AFTER_STAGE_26", e[e.AFTER_STAGE_27 = 175] = "AFTER_STAGE_27", e[e.AFTER_STAGE_28 = 176] = "AFTER_STAGE_28", e[e.AFTER_STAGE_29 = 177] = "AFTER_STAGE_29", e[e.AFTER_STAGE_30 = 178] = "AFTER_STAGE_30", e[e.AFTER_SPECIAL_STAGE_1 = 287] = "AFTER_SPECIAL_STAGE_1", e[e.AFTER_SPECIAL_STAGE_2 = 288] = "AFTER_SPECIAL_STAGE_2", e[e.AFTER_SPECIAL_STAGE_3 = 289] = "AFTER_SPECIAL_STAGE_3", e[e.AFTER_SPECIAL_STAGE_4 = 290] = "AFTER_SPECIAL_STAGE_4", e[e.AFTER_SPECIAL_STAGE_5 = 291] = "AFTER_SPECIAL_STAGE_5", e[e.AFTER_SPECIAL_STAGE_6 = 292] = "AFTER_SPECIAL_STAGE_6", e[e.AFTER_SPECIAL_STAGE_7 = 293] = "AFTER_SPECIAL_STAGE_7", e[e.AFTER_SPECIAL_STAGE_8 = 294] = "AFTER_SPECIAL_STAGE_8", e[e.AFTER_SPECIAL_STAGE_9 = 295] = "AFTER_SPECIAL_STAGE_9", e[e.AFTER_SPECIAL_STAGE_10 = 296] = "AFTER_SPECIAL_STAGE_10", e[e.AFTER_SPECIAL_STAGE_11 = 297] = "AFTER_SPECIAL_STAGE_11", e[e.AFTER_SPECIAL_STAGE_12 = 298] = "AFTER_SPECIAL_STAGE_12", e[e.AFTER_SPECIAL_STAGE_13 = 299] = "AFTER_SPECIAL_STAGE_13", e[e.AFTER_SPECIAL_STAGE_14 = 300] = "AFTER_SPECIAL_STAGE_14", e[e.AFTER_SPECIAL_STAGE_15 = 301] = "AFTER_SPECIAL_STAGE_15", e[e.AFTER_SPECIAL_STAGE_16 = 302] = "AFTER_SPECIAL_STAGE_16", e[e.AFTER_SPECIAL_STAGE_17 = 303] = "AFTER_SPECIAL_STAGE_17", e[e.AFTER_SPECIAL_STAGE_18 = 304] = "AFTER_SPECIAL_STAGE_18", e[e.AFTER_SPECIAL_STAGE_19 = 305] = "AFTER_SPECIAL_STAGE_19", e[e.AFTER_SPECIAL_STAGE_20 = 306] = "AFTER_SPECIAL_STAGE_20", e[e.AFTER_SPECIAL_STAGE_21 = 307] = "AFTER_SPECIAL_STAGE_21", e[e.AFTER_SPECIAL_STAGE_22 = 308] = "AFTER_SPECIAL_STAGE_22", e[e.AFTER_SPECIAL_STAGE_23 = 309] = "AFTER_SPECIAL_STAGE_23", e[e.AFTER_SPECIAL_STAGE_24 = 310] = "AFTER_SPECIAL_STAGE_24", e[e.AFTER_SPECIAL_STAGE_25 = 311] = "AFTER_SPECIAL_STAGE_25", e[e.AFTER_SPECIAL_STAGE_26 = 312] = "AFTER_SPECIAL_STAGE_26", e[e.AFTER_SPECIAL_STAGE_1_B = 313] = "AFTER_SPECIAL_STAGE_1_B", e[e.LUNCH = 333] = "LUNCH", e[e.TEA = 334] = "TEA", e[e.MEDICAL_TIMEOUT = 335] = "MEDICAL_TIMEOUT"
                }(a || (a = {}))
        },
        101: function(e, t, n) {
            e.exports = {
                recomSkelCont: "recomSkelCont___Zz5KbHH",
                recomSkelHead: "recomSkelHead___3KuQQx8",
                animationSkelet: "animationSkelet___UM3JxN-",
                recomSkelImage: "recomSkelImage___1lQx0v0",
                recomSkelText: "recomSkelText___1imTep4"
            }
        },
        108: function(e, t, n) {
            e.exports = n.p + "symbols.47f1efb.svg"
        },
        109: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(53);
            class r {
                constructor(e, t, n, a, r) {
                    this.eventId = e, this.lang = t, this.projectTypeId = n, a && (this.tournamentId = a.tournament, this.tournamentStageId = a.tournamentStage), this.timezone = r
                }
                getGeoIpFeed() {
                    return "f_"
                }
                getSysFeed() {
                    return "sys_" + this.projectTypeId
                }
                getGameFeed() {
                    return `g_${this.projectTypeId}_${this.eventId}`
                }
                getSummaryTab() {
                    return `d_su_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getH2hTab() {
                    return `df_hh_${this.projectTypeId}_${this.eventId}`
                }
                getOddsTab() {
                    return `d_od_${this.eventId}_${this.lang}_${this.projectTypeId}_eu`
                }
                getOddsFeed() {
                    return `df_od_${this.projectTypeId}_${this.eventId}`
                }
                getLineupsTab() {
                    return `df_li_${this.projectTypeId}_${this.eventId}`
                }
                getPlayerStatsTab() {
                    return `d_ps_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getNewsTab() {
                    return `df_nf_${this.projectTypeId}_${this.eventId}`
                }
                getPhotoReportTab() {
                    return `d_pr_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getFallOfWicketsTab() {
                    return `d_fow_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getOversTab() {
                    return `d_ov_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getMatchHistoryFeed() {
                    return `df_mh_${this.projectTypeId}_${this.eventId}`
                }
                getCommentaryTab() {
                    return `d_ph_${this.eventId}_${this.lang}_${this.projectTypeId}`
                }
                getTournamentTableTab(e, t = []) {
                    return ["ss", this.projectTypeId, this.tournamentId, this.tournamentStageId, [e, a.a.createParams(t)].join("")].join("_")
                }
                getStandingsTabs() {
                    return `tx_${this.tournamentId}_${this.tournamentStageId}`
                }
                getCommonFeed() {
                    return `dc_${this.projectTypeId}_${this.eventId}`
                }
                getSummaryHorizontalFeed() {
                    return `df_sur_${this.projectTypeId}_${this.eventId}`
                }
                getSummaryVerticalFeed() {
                    return `df_sui_${this.projectTypeId}_${this.eventId}`
                }
                getPrematchOddsFeed(e = "") {
                    return `df_dos_${this.projectTypeId}_${this.eventId}_${e}`
                }
                getPrematchOddsLiveFeed(e) {
                    return `df_lod2_${e}_${this.eventId}`
                }
                getVideoHighlightFeed() {
                    return `df_hi_${this.projectTypeId}_${this.eventId}`
                }
                getStatisticsFeed() {
                    return `df_st_${this.projectTypeId}_${this.eventId}`
                }
                getScratchesFeed() {
                    return `df_scr_${this.projectTypeId}_${this.eventId}`
                }
                getPmxFeed(e) {
                    return `pmx_${this.projectTypeId}_${this.timezone.getHour()}_${e.join("_")}`
                }
            }
        },
        11: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            })), n.d(t, "c", (function() {
                return i
            })), n.d(t, "d", (function() {
                return s
            })), n.d(t, "b", (function() {
                return l
            }));
            var a = n(0);

            function r(e, t) {
                const [n] = o(e, t, []);
                return n
            }

            function i(e, t, n) {
                const [a] = o(e, n, t);
                return a
            }

            function s(e, t) {
                const [n] = o(e, t);
                return n
            }

            function l(e, t) {
                return o(e, t)
            }

            function o(e, t, n, r = c) {
                const [i, s] = Object(a.useState)(null != t ? t : null);
                return r(e, s, n), [i, s]
            }

            function c(e, t, n) {
                Object(a.useEffect)(() => {
                    let n = !0;
                    return e().then(e => {
                        n && t(e)
                    }), () => {
                        n = !1
                    }
                }, n)
            }
        },
        112: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return I
            }));
            var a = n(18);
            class r {
                constructor(e, t) {
                    this.odds = e, this.oddsSettings = t
                }
                getOdds() {
                    return this.odds
                }
                getOddsSettings() {
                    return this.oddsSettings
                }
            }
            class i {
                setOdds(e) {
                    return this.odds = e, this
                }
                setOddsSettings(e) {
                    return this.oddsSettings = e, this
                }
                build() {
                    return new r(this.odds, this.oddsSettings)
                }
            }
            var s = n(63);
            class l {
                constructor(e, t, n, a, r, i) {
                    this.name = e, this.title = t, this.rowCount = n, this.selected = a, this.url = r, this.tabIdentification = i
                }
                getName() {
                    return this.name
                }
                getTitle() {
                    return this.title
                }
                getRowCount() {
                    return this.rowCount
                }
                getSelected() {
                    return this.selected
                }
                getUrl() {
                    return this.url
                }
                getTabIdentification() {
                    return this.tabIdentification
                }
                getClassName() {
                    return "tabs__tab"
                }
            }
            class o extends l {
                getClassName() {
                    return "subTabs__tab"
                }
            }
            class c {
                constructor() {
                    this.name = "", this.title = "", this.tabIdentification = "", this.rowCount = 0, this.selected = !1, this.url = ""
                }
                setName(e) {
                    return this.name = e, this
                }
                setTitle(e) {
                    return this.title = e, this
                }
                setTabIdentification(e) {
                    return this.tabIdentification = e, this
                }
                setRowCount(e) {
                    return this.rowCount = e, this
                }
                incrementRowCount() {
                    return this.rowCount++, this
                }
                setSelected(e) {
                    return this.selected = e, this
                }
                setUrl(e) {
                    return this.url = e, this
                }
                build() {
                    return new l(this.name, this.title, this.rowCount, this.selected, this.url, this.tabIdentification)
                }
            }
            class g extends c {
                build() {
                    return new o(this.name, this.title, this.rowCount, this.selected, this.url, this.tabIdentification)
                }
            }
            class _ {
                constructor(e, t) {
                    this.header = e, this.rows = t
                }
                getHeader() {
                    return this.header
                }
                getRows() {
                    return this.rows
                }
            }
            class h {
                constructor() {
                    this.rows = []
                }
                setHeader(e) {
                    return this.header = e, this
                }
                addRow(e) {
                    return this.rows.push(e), this
                }
                build() {
                    return new _(this.header, this.rows)
                }
            }
            class E {
                constructor(e, t, n, a) {
                    this.handicap = e, this.label1 = t, this.label2 = n, this.label3 = a
                }
                getHandicap() {
                    return this.handicap
                }
                getLabel1() {
                    return this.label1
                }
                getLabel2() {
                    return this.label2
                }
                getLabel3() {
                    return this.label3
                }
            }
            class d {
                constructor() {
                    this.handicap = null, this.label1 = null, this.label2 = null, this.label3 = null
                }
                setHandicap(e) {
                    return this.handicap = e, this
                }
                setLabel1(e) {
                    return this.label1 = e, this
                }
                setLabel2(e) {
                    return this.label2 = e, this
                }
                setLabel3(e) {
                    return this.label3 = e, this
                }
                build() {
                    return new E(this.handicap, this.label1, this.label2, this.label3)
                }
            }
            class T {
                constructor(e, t, n, a, r, i, s, l, o, c, g, _) {
                    this.bookmakerId = e, this.bookmakerImageUrl = t, this.bookmakerName = n, this.bookmakerShowTextInsteadOfLogo = a, this.bookmakerIsPremium = r, this.hasLiveOdds = i, this.handicapValue = s, this.handicapTypeId = l, this.oddValue1 = o, this.oddValue2 = c, this.oddValue3 = g, this.oddsAvailable = _
                }
                getBookmakerId() {
                    return this.bookmakerId
                }
                getBookmakerImageUrl() {
                    return this.bookmakerImageUrl
                }
                getBookmakerName() {
                    return this.bookmakerName
                }
                getShowTextInsteadOfLogo() {
                    return this.bookmakerShowTextInsteadOfLogo
                }
                getBookmakerIsPremium() {
                    return this.bookmakerIsPremium
                }
                getHasLiveOdds() {
                    return this.hasLiveOdds
                }
                getHandicapValue() {
                    return this.handicapValue
                }
                getHandicapTypeId() {
                    return this.handicapTypeId
                }
                getOddValue1() {
                    return this.oddValue1
                }
                getOddValue2() {
                    return this.oddValue2
                }
                getOddValue3() {
                    return this.oddValue3
                }
                getOddsAvailable() {
                    return this.oddsAvailable
                }
            }
            class u {
                constructor() {
                    this.bookmakerId = -1, this.bookmakerImageUrl = "", this.bookmakerShowTextInsteadOfLogo = !1, this.bookmakerName = "", this.bookmakerIsPremium = !1, this.hasLiveOdds = !1, this.handicapValue = null, this.handicapTypeId = null, this.oddValue1 = null, this.oddValue2 = null, this.oddValue3 = null, this.oddsAvailable = !0
                }
                setBookmakerId(e) {
                    return this.bookmakerId = e, this
                }
                setBookmakerImageUrl(e) {
                    return this.bookmakerImageUrl = e, this
                }
                setShowTextInsteadOfLogo(e) {
                    return this.bookmakerShowTextInsteadOfLogo = e, this
                }
                setBookmakerName(e) {
                    return this.bookmakerName = e, this
                }
                setBookmakerIsPremium(e) {
                    return this.bookmakerIsPremium = e, this
                }
                setHasLiveOdds(e) {
                    return this.hasLiveOdds = e, this
                }
                setHandicapValue(e) {
                    return this.handicapValue = e, this
                }
                setHandicapTypeId(e) {
                    return this.handicapTypeId = e, this
                }
                setOddValue1(e) {
                    return this.oddValue1 = e, this
                }
                setOddValue2(e) {
                    return this.oddValue2 = e, this
                }
                setOddValue3(e) {
                    return this.oddValue3 = e, this
                }
                setOddsAvailable(e) {
                    return this.oddsAvailable = e, this
                }
                build() {
                    return new T(this.bookmakerId, this.bookmakerImageUrl, this.bookmakerName, this.bookmakerShowTextInsteadOfLogo, this.bookmakerIsPremium, this.hasLiveOdds, this.handicapValue, this.handicapTypeId, this.oddValue1, this.oddValue2, this.oddValue3, this.oddsAvailable)
                }
            }
            class S {
                constructor(e, t, n, a) {
                    this.allowHighlighting = e, this.showAllBookmakersInOddsComparison = t, this.showAllBookmakersInPrematch = n, this.showAllBookmakersInPrematchLive = a
                }
                getAllowHighlighting() {
                    return this.allowHighlighting
                }
                getShowAllBookmakersInOddsComparison() {
                    return this.showAllBookmakersInOddsComparison
                }
                getShowAllBookmakersInPrematch() {
                    return this.showAllBookmakersInPrematch
                }
                getShowAllBookmakersInPrematchLive() {
                    return this.showAllBookmakersInPrematchLive
                }
            }
            class m {
                constructor() {
                    this.allowHighlighting = !0, this.showAllBookmakersInOddsComparison = !0, this.showAllBookmakersInPrematch = !1, this.showAllBookmakersInPrematchLive = !1
                }
                setAllowHighlighting(e) {
                    return this.allowHighlighting = e, this
                }
                setShowAllBookmakersInOddsComparison(e) {
                    return this.showAllBookmakersInOddsComparison = e, this
                }
                setShowAllBookmakersInPrematch(e) {
                    return this.showAllBookmakersInPrematch = e, this
                }
                setShowAllBookmakersInPrematchLive(e) {
                    return this.showAllBookmakersInPrematchLive = e, this
                }
                build() {
                    return new S(this.allowHighlighting, this.showAllBookmakersInOddsComparison, this.showAllBookmakersInPrematch, this.showAllBookmakersInPrematchLive)
                }
            }
            var v = n(2),
                p = n(57);
            class I extends a.a {
                constructor() {
                    super(...arguments), this.tabBuilder = null, this.tabContent = null, this.subTabBuilder = null, this.subTabContent = null, this.table = null, this.tableHeader = null, this.tableRow = null, this.handicapValue = null, this.handicapTypeId = null, this.newRowStarted = !1
                }
                endLastTab() {
                    this.endLastSubTab(), this.tabBuilder && (this.tabsBuilder.addTab(this.tabBuilder.build()), this.tabBuilder = null), this.tabContent && (this.tabsBuilder.addSubTabOrContent(this.tabContent.build()), this.tabContent = null)
                }
                startNewTab() {
                    this.tabBuilder = new c, this.tabContent = new s.b
                }
                endLastSubTab() {
                    this.endLastTable(), this.tabContent && this.subTabContent && this.subTabBuilder && (this.tabContent.addSubTabOrContent(this.subTabContent).addTab(this.subTabBuilder.build()), this.subTabBuilder = null, this.subTabContent = null)
                }
                startNewSubTab() {
                    this.subTabBuilder = new g, this.subTabContent = []
                }
                endLastTable() {
                    this.endLastTableRow(), this.table && this.tableHeader && (this.table.setHeader(this.tableHeader.build()), this.tableHeader = null), this.subTabContent && this.table && (this.subTabContent.push(this.table.build()), this.table = null), this.handicapValue = null, this.handicapTypeId = null
                }
                startNewTable() {
                    this.table = new h, this.tableHeader = new d
                }
                endLastTableRow() {
                    this.table && this.tableRow && (this.table.addRow(this.tableRow.build()), this.tableRow = null)
                }
                startNewTableRow() {
                    this.subTabBuilder && this.subTabBuilder.incrementRowCount(), this.tableRow = (new u).setHandicapValue(this.handicapValue).setHandicapTypeId(this.handicapTypeId)
                }
                startFeed() {
                    this.tabsBuilder = new s.b, this.settingsBuilder = new m
                }
                startRow() {
                    this.newRowStarted = !0
                }
                parse(e, t) {
                    var n, a, r, i, s, l, o, c, g, _, h, E, d, T, u, S, m, p, I, A, N, R;
                    if (this.newRowStarted) {
                        switch (e) {
                            case v.a.ODDSINDEXES_BETTING_TYPE:
                            case v.a.ODDSINDEXES_BETTING_TYPE_URL:
                            case v.a.ODDSINDEXES_SELECTED_BETTING_TYPE:
                                this.endLastTab(), this.startNewTab();
                                break;
                            case v.a.ODDSINDEXES_ODDS_SCOPE:
                            case v.a.ODDSINDEXES_ODDS_SCOPE_URL:
                            case v.a.ODDSINDEXES_SELECTED_ODDS_SCOPE:
                                this.endLastSubTab(), this.startNewSubTab();
                                break;
                            case v.a.ODDSINDEXES_ODDS_GROUP_TITLE:
                            case v.a.ODDSINDEXES_ODDS_GROUP_VALUE:
                            case v.a.ODDSINDEXES_ODDS_LABEL_1:
                            case v.a.ODDSINDEXES_ODDS_LABEL_2:
                            case v.a.ODDSINDEXES_ODDS_LABEL_3:
                                this.endLastTable(), this.startNewTable();
                                break;
                            case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_ID:
                            case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IMAGE_URL:
                            case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_SHOW_TEXT_NOT_LOGO:
                            case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_NAME:
                            case v.a.ODDSINDEXES_ODDS_1:
                            case v.a.ODDSINDEXES_ODDS_0:
                            case v.a.ODDSINDEXES_ODDS_2:
                            case v.a.ODDSINDEXES_ODDS_AVAILABLE:
                                this.endLastTableRow(), this.startNewTableRow()
                        }
                        this.newRowStarted = !1
                    }
                    switch (e) {
                        case v.a.ODDSINDEXES_BETTING_TYPE:
                            null === (n = this.tabBuilder) || void 0 === n || n.setName(this.getString(t)), null === (a = this.tabBuilder) || void 0 === a || a.setTitle(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_SELECTED_BETTING_TYPE:
                            null === (r = this.tabBuilder) || void 0 === r || r.setSelected(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_BETTING_TYPE_URL:
                            null === (i = this.tabBuilder) || void 0 === i || i.setUrl(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_BETTING_TYPE_ID:
                            this.setTabTitleAndUrl(t);
                            break;
                        case v.a.ODDSINDEXES_ODDS_SCOPE:
                            null === (s = this.subTabBuilder) || void 0 === s || s.setName(this.getString(t)), null === (l = this.subTabBuilder) || void 0 === l || l.setTitle(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SCOPE_URL:
                            null === (o = this.subTabBuilder) || void 0 === o || o.setUrl(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SCOPE_ID:
                            this.setSubTabUrl(t);
                            break;
                        case v.a.ODDSINDEXES_SELECTED_ODDS_SCOPE:
                            null === (c = this.subTabBuilder) || void 0 === c || c.setSelected(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_GROUP_VALUE:
                            this.handicapValue = this.getString(t);
                            break;
                        case v.a.ODDSINDEXES_HANDICAP:
                            this.handicapTypeId = this.getNumberValueOf(t);
                            break;
                        case v.a.ODDSINDEXES_ODDS_GROUP_TITLE:
                            null === (g = this.tableHeader) || void 0 === g || g.setHandicap(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_LABEL_1:
                            null === (_ = this.tableHeader) || void 0 === _ || _.setLabel1(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_LABEL_2:
                            null === (h = this.tableHeader) || void 0 === h || h.setLabel2(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_LABEL_3:
                            null === (E = this.tableHeader) || void 0 === E || E.setLabel3(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_ID:
                            null === (d = this.tableRow) || void 0 === d || d.setBookmakerId(this.getNumberValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IMAGE_URL:
                            null === (T = this.tableRow) || void 0 === T || T.setBookmakerImageUrl(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_SHOW_TEXT_NOT_LOGO:
                            null === (u = this.tableRow) || void 0 === u || u.setShowTextInsteadOfLogo(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_NAME:
                            null === (S = this.tableRow) || void 0 === S || S.setBookmakerName(this.getString(t));
                            break;
                        case v.a.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IS_PREMIUM:
                            null === (m = this.tableRow) || void 0 === m || m.setBookmakerIsPremium(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_LIVE_ODDS_ACTIVE:
                            null === (p = this.tableRow) || void 0 === p || p.setHasLiveOdds(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_1:
                            null === (I = this.tableRow) || void 0 === I || I.setOddValue1(this.getArrowAndValue(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_0:
                            null === (A = this.tableRow) || void 0 === A || A.setOddValue2(this.getArrowAndValue(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_2:
                            null === (N = this.tableRow) || void 0 === N || N.setOddValue3(this.getArrowAndValue(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_AVAILABLE:
                            null === (R = this.tableRow) || void 0 === R || R.setOddsAvailable(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SETTINGS_ALLOW_ODD_HIGHLIGHTING:
                            this.settingsBuilder.setAllowHighlighting(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_COMPARISON:
                            this.settingsBuilder.setShowAllBookmakersInOddsComparison(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH:
                            this.settingsBuilder.setShowAllBookmakersInPrematch(this.getBooleanValueOf(t));
                            break;
                        case v.a.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH_LIVE:
                            this.settingsBuilder.setShowAllBookmakersInPrematchLive(this.getBooleanValueOf(t))
                    }
                }
                setTabTitleAndUrl(e) {}
                setSubTabUrl(e) {}
                getArrowAndValue(e) {
                    const t = /[u,d]/.exec(e),
                        n = t && t[0];
                    if (n) {
                        const [t, a] = e.split(/\[[u,d]\]/), r = this.getFloatValueOf(a), i = this.getFloatValueOf(t);
                        return new p.b(isNaN(r) ? a : r, isNaN(i) ? t : i, n)
                    } {
                        const t = this.getFloatValueOf(e);
                        return new p.b(isNaN(t) ? e : t, null, n)
                    }
                }
                endFeed() {
                    this.endLastTab()
                }
                getParsedModel() {
                    return (new i).setOdds(this.tabsBuilder.build()).setOddsSettings(this.settingsBuilder.build()).build()
                }
            }
        },
        12: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.HOME = 0] = "HOME", e[e.AWAY = 1] = "AWAY"
                }(a || (a = {}))
        },
        125: function(e, t, n) {
            e.exports = {
                "icon--star": "icon--star___3aytr8l",
                active: "active___2lo4bWg",
                "icon--calendar": "icon--calendar___2gwQwwx",
                "theme--dark": "theme--dark___b08v36d",
                "icon--redCard--first": "icon--redCard--first___14DmKHq",
                "icon--american-football": "icon--american-football___3tGp2Db",
                "icon--beach-volleyball": "icon--beach-volleyball___2yqks3N",
                "icon--pesapallo": "icon--pesapallo___MyROirw",
                "icon--table-tennis": "icon--table-tennis___25-F20A",
                "icon--tennis": "icon--tennis___1nMBaxx",
                "icon--volleyball": "icon--volleyball___3f50jv3",
                "icon--badminton": "icon--badminton___1A_4TbR",
                "icon--baseball": "icon--baseball___1MJM7J8",
                "icon--baseball-bat": "icon--baseball-bat___3uHIpmn",
                "icon--cricket": "icon--cricket___1vqeaik",
                "icon--cricket-bat": "icon--cricket-bat___2oIx1rE",
                "icon--darts": "icon--darts___3y_D2ZD",
                "icon--pesapallo-bat": "icon--pesapallo-bat___Dc2Iw-1",
                "icon--expander": "icon--expander___Iypq72a",
                expand: "expand___3CRY-pE",
                collapse: "collapse___3rOqxzn",
                "icon--live": "icon--live___3BuOHJG",
                "icon--preview": "icon--preview___3kn0h3t",
                "active-bet": "active-bet___2aXq1OU",
                liveBet: "liveBet___3PjtH-J",
                "icon--draw": "icon--draw___2phM_Xk",
                "icon--rating": "icon--rating___3saBWhU",
                "icon--arrow": "icon--arrow___1N3FEpX",
                odds__odd: "odds__odd___OvFxiqQ",
                ah_handicap: "ah_handicap___1r7u69K",
                ou_total: "ou_total___iM-FIzq",
                icon: "icon___S3gQIrM",
                up: "up___1LArsez",
                down: "down___2q3vwbF",
                "icon--flag": "icon--flag___2yFBpMO",
                "icon--cycling-jersey": "icon--cycling-jersey___XDqSFvw",
                "icon--cycling-jersey-white": "icon--cycling-jersey-white___9uD9zHW",
                "icon--cycling-jersey-silver": "icon--cycling-jersey-silver___1IUOgCc",
                "icon--cycling-jersey-black": "icon--cycling-jersey-black___3HF8g9s",
                "icon--cycling-jersey-yellow": "icon--cycling-jersey-yellow___3VlHF2N",
                "icon--cycling-jersey-gold": "icon--cycling-jersey-gold___3KmmlHC",
                "icon--cycling-jersey-ochre": "icon--cycling-jersey-ochre___1k36y7x",
                "icon--cycling-jersey-red": "icon--cycling-jersey-red___3iL7Tvz",
                "icon--cycling-jersey-pink": "icon--cycling-jersey-pink___UR94S1Q",
                "icon--cycling-jersey-turquoise": "icon--cycling-jersey-turquoise___2KVIVr5",
                "icon--cycling-jersey-blue": "icon--cycling-jersey-blue___2fpNDCh",
                "icon--cycling-jersey-green": "icon--cycling-jersey-green___1jFVjFQ",
                "icon--cycling-jersey-red-polka-dot": "icon--cycling-jersey-red-polka-dot___r4YDv-V",
                "icon--cycling-jersey-blue-polka-dot": "icon--cycling-jersey-blue-polka-dot___2xIPEmK",
                "icon--redCard": "icon--redCard___36epKxn",
                info: "info___1HirGw9",
                tv: "tv___1CXjB8j",
                shirt: "shirt___3pvDRWM",
                serve: "serve___3hrwGjT",
                sortArrowDown: "sortArrowDown___1K0kpB9",
                sortArrowUp: "sortArrowUp___15AUB0i",
                hover: "hover___2ZqCVPW"
            }
        },
        134: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(109),
                r = n(60);
            class i {
                createConfig() {
                    return cjs.Api.config
                }
                createCjsConfig() {
                    return cjs.cfg
                }
                createEnviroment() {
                    return cjs.dic.get("util_enviroment")
                }
                createTrans() {
                    return cjs.dic.get("util_trans")
                }
                createDate() {
                    return cjs.dic.get("util_date")
                }
                createUrl() {
                    return cjs.dic.get("util_url")
                }
                createSport() {
                    return cjs.dic.get("util_sport")
                }
                createUtilPage() {
                    return cjs.dic.get("util_page")
                }
                createClientStorage() {
                    return cjs.dic.get("ClientStorage")
                }
                createString() {
                    return cjs.dic.get("util_string")
                }
                createApplication() {
                    return cjs.dic.get("Application")
                }
                createNavigation() {
                    return cjs.dic.get("list_navigation")
                }
                createDicProxy() {
                    return cjs.dic.get("DicProxy")
                }
                createFeedFetcher() {
                    return new r.a(cjs.Api.config.get("app", "feed_sign"), window.cjs.dic.get("Fetch_Proxy").fetch(), "")
                }
                createFeedNameComposer() {
                    return new a.a("", cjs.Api.config.get("app", "lang", "web"), cjs.Api.config.get("app", "project_type", "id"), null, window.cjs.Api.timezone)
                }
            }
        },
        14: function(e, t, n) {
            "use strict";
            n.d(t, "J", (function() {
                return g
            })), n.d(t, "g", (function() {
                return _
            })), n.d(t, "h", (function() {
                return h
            })), n.d(t, "b", (function() {
                return E
            })), n.d(t, "f", (function() {
                return d
            })), n.d(t, "i", (function() {
                return T
            })), n.d(t, "l", (function() {
                return u
            })), n.d(t, "k", (function() {
                return S
            })), n.d(t, "E", (function() {
                return m
            })), n.d(t, "D", (function() {
                return v
            })), n.d(t, "m", (function() {
                return p
            })), n.d(t, "N", (function() {
                return I
            })), n.d(t, "P", (function() {
                return A
            })), n.d(t, "S", (function() {
                return N
            })), n.d(t, "F", (function() {
                return R
            })), n.d(t, "T", (function() {
                return O
            })), n.d(t, "u", (function() {
                return D
            })), n.d(t, "Q", (function() {
                return C
            })), n.d(t, "K", (function() {
                return y
            })), n.d(t, "v", (function() {
                return H
            })), n.d(t, "t", (function() {
                return L
            })), n.d(t, "B", (function() {
                return P
            })), n.d(t, "y", (function() {
                return M
            })), n.d(t, "z", (function() {
                return F
            })), n.d(t, "d", (function() {
                return w
            })), n.d(t, "c", (function() {
                return b
            })), n.d(t, "L", (function() {
                return f
            })), n.d(t, "M", (function() {
                return k
            })), n.d(t, "j", (function() {
                return G
            })), n.d(t, "w", (function() {
                return U
            })), n.d(t, "r", (function() {
                return B
            })), n.d(t, "s", (function() {
                return W
            })), n.d(t, "G", (function() {
                return x
            })), n.d(t, "U", (function() {
                return X
            })), n.d(t, "H", (function() {
                return Y
            })), n.d(t, "C", (function() {
                return K
            })), n.d(t, "R", (function() {
                return V
            })), n.d(t, "o", (function() {
                return j
            })), n.d(t, "p", (function() {
                return J
            })), n.d(t, "q", (function() {
                return $
            })), n.d(t, "a", (function() {
                return Q
            })), n.d(t, "e", (function() {
                return Z
            })), n.d(t, "O", (function() {
                return z
            })), n.d(t, "n", (function() {
                return q
            })), n.d(t, "x", (function() {
                return ee
            })), n.d(t, "I", (function() {
                return te
            })), n.d(t, "A", (function() {
                return ne
            }));
            var a = n(0),
                r = n.n(a),
                i = n(108),
                s = n.n(i),
                l = n(6),
                o = n.n(l);
            const c = ({
                id: e = "",
                title: t = "",
                iconClass: n = "",
                enabled: a,
                handlerOnClick: i,
                handlerOnMouseEnter: l,
                handlerOnMouseLeave: c,
                dataBookmakerId: g,
                extendClasses: _ = "",
                children: h
            }) => a ? r.a.createElement("svg", {
                className: `${n||o.a[e]} ${_}`,
                onClick: i,
                onMouseEnter: l,
                onMouseLeave: c,
            }, r.a.createElement("title", null, t), r.a.createElement("use", {
                xlinkHref: `${s.a}#${e}`
            }), h) : null;

            function g(e) {
                return r.a.createElement(c, Object.assign({
                    id: ""
                }, e))
            }

            function _(e) {
                return r.a.createElement(c, Object.assign({
                    id: "baseball-bat",
                    iconClass: o.a["baseball-bat"]
                }, e))
            }

            function h(e) {
                return r.a.createElement(c, Object.assign({
                    id: "baseball",
                    iconClass: o.a.baseball
                }, e))
            }

            function E(e) {
                return r.a.createElement(c, Object.assign({
                    id: "american-football",
                    iconClass: o.a["american-football"]
                }, e))
            }

            function d(e) {
                return r.a.createElement(c, Object.assign({
                    id: "badminton",
                    iconClass: o.a.badminton
                }, e))
            }

            function T(e) {
                return r.a.createElement(c, Object.assign({
                    id: "volleyball",
                    iconClass: o.a["beach-volleyball"]
                }, e))
            }

            function u(e) {
                return r.a.createElement(c, Object.assign({
                    id: "cricket",
                    iconClass: o.a.cricket
                }, e))
            }

            function S(e) {
                return r.a.createElement(c, Object.assign({
                    id: "cricket-bat",
                    iconClass: o.a["cricket-bat"]
                }, e))
            }

            function m(e) {
                return r.a.createElement(c, Object.assign({
                    id: "pesapallo",
                    iconClass: o.a.pesapallo
                }, e))
            }

            function v(e) {
                return r.a.createElement(c, Object.assign({
                    id: "pesapallo-bat",
                    iconClass: o.a["pesapallo-bat"]
                }, e))
            }

            function p(e) {
                return r.a.createElement(c, Object.assign({
                    id: "darts",
                    iconClass: o.a.darts
                }, e))
            }

            function I(e) {
                return r.a.createElement(c, Object.assign({
                    id: "table-tennis",
                    iconClass: o.a["table-tennis"]
                }, e))
            }

            function A(e) {
                return r.a.createElement(c, Object.assign({
                    id: "tennis",
                    iconClass: o.a.tennis
                }, e))
            }

            function N(e) {
                return r.a.createElement(c, Object.assign({
                    id: "volleyball",
                    iconClass: o.a.volleyball
                }, e))
            }

            function R(e) {
                return r.a.createElement(c, Object.assign({
                    id: "play"
                }, e))
            }

            function O(e) {
                return r.a.createElement(c, Object.assign({
                    id: "winner",
                    iconClass: o.a.winner
                }, e))
            }

            function D(e) {
                return r.a.createElement(c, Object.assign({
                    id: "info",
                    iconClass: o.a.info
                }, e))
            }

            function C(e) {
                return null;
            }

            function y(e) {
                return r.a.createElement(c, Object.assign({
                    id: "shirt",
                    iconClass: o.a.shirt
                }, e))
            }

            function H(e) {
                return r.a.createElement(c, Object.assign({
                    id: "jersey",
                    iconClass: o.a.jersey
                }, e))
            }

            function L(e) {
                return r.a.createElement(c, Object.assign({
                    id: "headphones",
                    iconClass: o.a.headphones
                }, e))
            }

            function P(e) {
                return r.a.createElement(c, Object.assign({
                    id: "pause",
                    iconClass: o.a.pause
                }, e))
            }

            function M(e) {
                return r.a.createElement(c, Object.assign({
                    id: "stream",
                    iconClass: o.a.stream
                }, e))
            }

            function F(e) {
                return r.a.createElement(c, Object.assign({
                    id: "stream-locked",
                    iconClass: o.a["stream-locked"]
                }, e))
            }

            function w(e) {
                return r.a.createElement(c, Object.assign({
                    id: "arrow",
                    iconClass: o.a.arrowUp
                }, e))
            }

            function b(e) {
                return r.a.createElement(c, Object.assign({
                    id: "arrow",
                    iconClass: o.a.arrowDown
                }, e))
            }

            function f(e) {
                return r.a.createElement(c, Object.assign({
                    id: "sortArrow",
                    iconClass: o.a.sortArrowDown
                }, e))
            }

            function k(e) {
                return r.a.createElement(c, Object.assign({
                    id: "sortArrow",
                    iconClass: o.a.sortArrowUp
                }, e))
            }

            function G(e) {
                return r.a.createElement(c, Object.assign({
                    id: "bet",
                    iconClass: o.a.bet
                }, e))
            }

            function U(e) {
                return r.a.createElement(c, Object.assign({
                    id: "liveBet",
                    iconClass: o.a.liveBet
                }, e))
            }

            function B(e) {
                return r.a.createElement(c, Object.assign({
                    id: "footballBall",
                    iconClass: o.a.footballGoal
                }, e))
            }

            function W(e) {
                return r.a.createElement(c, Object.assign({
                    id: "footballBall",
                    iconClass: o.a.footballOwnGoal
                }, e))
            }

            function x(e) {
                return r.a.createElement(c, Object.assign({
                    id: "card",
                    iconClass: o.a.card
                }, e))
            }

            function X(e) {
                return r.a.createElement(c, Object.assign({
                    id: "card",
                    iconClass: o.a.yellowCard
                }, e))
            }

            function Y(e) {
                return r.a.createElement(c, Object.assign({
                    id: "redYellowCard",
                    iconClass: o.a.redYellowCard
                }, e))
            }

            function K(e) {
                return r.a.createElement(c, Object.assign({
                    id: "penaltyMissed",
                    iconClass: o.a.penaltyMissed
                }, e))
            }

            function V(e) {
                return r.a.createElement(c, Object.assign({
                    id: "var",
                    iconClass: o.a.var
                }, e))
            }

            function j(e) {
                return r.a.createElement(c, Object.assign({
                    id: "floorballBall",
                    iconClass: o.a.floorballBall
                }, e))
            }

            function J(e) {
                return r.a.createElement(c, Object.assign({
                    id: "floorballBall",
                    iconClass: o.a.floorballOwnGoal
                }, e))
            }

            function $(e) {
                return r.a.createElement(c, Object.assign({
                    id: "floorballBall",
                    iconClass: o.a.floorballBall
                }, e))
            }

            function Q(e) {
                return r.a.createElement(c, Object.assign({
                    id: "americanFootballBall",
                    iconClass: o.a.americanFootballBall
                }, e))
            }

            function Z(e) {
                return r.a.createElement(c, Object.assign({
                    id: "assist",
                    iconClass: o.a.assist
                }, e))
            }

            function z(e) {
                return r.a.createElement(c, Object.assign({
                    id: "shield",
                    iconClass: o.a.teamLogoPlaceholder
                }, e))
            }

            function q(e) {
                return r.a.createElement(c, Object.assign({
                    id: "emptyTeamLogo",
                    iconClass: o.a.emptyTeamLogo
                }, e))
            }

            function ee(e) {
                return r.a.createElement(c, Object.assign({
                    id: "liveStreamLogo",
                    iconClass: o.a.liveStreamLogo
                }, e))
            }

            function te(e) {
                return r.a.createElement(c, Object.assign({
                    id: "rugbyBall",
                    iconClass: o.a.rugbyBall
                }, e))
            }

            function ne(e) {
                return null
            }
        },
        15: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.SCHEDULED = 1] = "SCHEDULED", e[e.LIVE = 2] = "LIVE", e[e.PAUSED = 3] = "PAUSED", e[e.FINISHED = 4] = "FINISHED", e[e.CANCELED = 5] = "CANCELED", e[e.UNAVAILABLE = 6] = "UNAVAILABLE"
                }(a || (a = {}))
        },
        154: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return o
            }));
            var a = n(0),
                r = n.n(a),
                i = n(125),
                s = n.n(i);
            const l = Object(a.forwardRef)(({
                id: e,
                iconClass: t,
                enabled: n,
                handlerOnClick: a,
                handlerOnMouseEnter: i,
                handlerOnMouseLeave: s,
                title: l,
                dataBookmakerId: o,
                extendClasses: c = ""
            }, g) => n ? r.a.createElement("div", {
                className: `${t} ${c}`.trim(),
                onClick: a,
                onMouseEnter: i,
                onMouseLeave: s,
                title: l,
                "data-bookmaker-id": o,
                ref: g
            }) : null);
            l.displayName = "Icon";
            const o = ((e, t) => {
                const n = Object(a.forwardRef)((e, n) => r.a.createElement(l, Object.assign({
                    iconClass: t
                }, e, {
                    ref: n
                })));
                return n.displayName = e, n
            })("LiveActiveBetIcon", `${s.a["icon--live"]} ${s.a["active-bet"]}`)
        },
        155: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            class a {
                constructor(e, t) {
                    this._title = e, this._color = t
                }
                getTitle() {
                    return this._title
                }
                getColor() {
                    return this._color
                }
            }
            let r = (() => {
                class e {
                    constructor(t, n) {
                        this._utilEnviroment = t, this._utilTrans = n, this._feedValue = "", this._translates = {}, this._colors = {}, this._translates[e.GENERAL_LEADER] = "TRANS_CYCLING_GENERAL_LEADER", this._translates[e.POINTS_LEADER] = "TRANS_CYCLING_POINTS_LEADER", this._translates[e.MOUNTAINS_LEADER] = "TRANS_CYCLING_MOUNTAINS_LEADER", this._translates[e.YOUTH_LEADER] = "TRANS_CYCLING_YOUTH_LEADER", this._translates[e.CURRENT_WORLD_CHAMPION] = "TRANS_CYCLING_CURRENT_WORLD_CHAMPION", this._translates[e.LAST_IN_RACE] = "TRANS_CYCLING_LAST_IN_RACE", this._colors[e.YELLOW_JERSEY] = "yellow", this._colors[e.GREEN_JERSEY] = "green", this._colors[e.RED_POLKA_DOT_JERSEY] = "red-polka-dot", this._colors[e.WHITE_JERSEY] = "white", this._colors[e.PINK_JERSEY] = "pink", this._colors[e.RED_JERSEY] = "red", this._colors[e.BLUE_POLKA_DOT_JERSEY] = "blue-polka-dot", this._colors[e.BLUE_JERSEY] = "blue", this._colors[e.BLACK_JERSEY] = "black", this._colors[e.OCHRE_JERSEY] = "ochre", this._colors[e.TURQUOISE_JERSEY] = "turquoise", this._colors[e.GOLD_JERSEY] = "gold", this._colors[e.SILVER_JERSEY] = "silver", this._colors[e.RAINBOW_JERSEY] = "rainbow"
                    }
                    setFeedValue(e) {
                        this._feedValue = e
                    }
                    getItems() {
                        if ("" == this._feedValue) return [];
                        const e = this._feedValue.split(";"),
                            t = [];
                        for (const n of e) {
                            const e = n.split(","),
                                r = parseInt(e[0] || ""),
                                i = parseInt(e[1] || "");
                            let s = "",
                                l = "";
                            r && (s = this._translates[r] || ""), i && (l = this._colors[i] || ""), s && l && t.push(new a(this._utilTrans.translate(s), l))
                        }
                        return t
                    }
                    getHandlerOnMouseEnter() {
                        return e => (this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                    }
                    getHandlerOnMouseLeave() {
                        return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                    }
                }
                return e.GENERAL_LEADER = 314, e.POINTS_LEADER = 315, e.MOUNTAINS_LEADER = 316, e.YOUTH_LEADER = 317, e.CURRENT_WORLD_CHAMPION = 318, e.LAST_IN_RACE = 319, e.YELLOW_JERSEY = 76, e.GREEN_JERSEY = 77, e.RED_POLKA_DOT_JERSEY = 78, e.WHITE_JERSEY = 79, e.PINK_JERSEY = 80, e.RED_JERSEY = 81, e.BLUE_POLKA_DOT_JERSEY = 82, e.BLUE_JERSEY = 83, e.BLACK_JERSEY = 84, e.OCHRE_JERSEY = 85, e.TURQUOISE_JERSEY = 86, e.GOLD_JERSEY = 87, e.SILVER_JERSEY = 88, e.RAINBOW_JERSEY = 89, e
            })()
        },
        156: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(112);
            class r {
                constructor(e) {
                    this._loaderHandler = e
                }
                getBookmakerSettings() {
                    return new Promise(e => {
                        this._loaderHandler.get("bookmakerSettings").call(e)
                    })
                }
                getBroadcast() {
                    return new Promise(e => {
                        this._loaderHandler.get("broadcast").call(e)
                    })
                }
                getSoundPlayer() {
                    return new Promise(e => {
                        this._loaderHandler.get("soundPlayer").call(e)
                    })
                }
                executeGamePlanLoader() {
                    this._loaderHandler.get("gamePlanInDOM").fulfill((function(e) {
                        e()
                    }))
                }
                scrollToLastPosition() {
                    this._loaderHandler.get("util/scroll").call(() => {})
                }
                getDetailOddsDataProvider(e, t, n, a) {
                    return new Promise(r => {
                        this._loaderHandler.get("detail/odds/DataProvider").call({
                            oddsSetup: e,
                            feedContent: t,
                            bookmakersWithLiveOffer: n,
                            eventStageTypeId: a
                        }, r)
                    })
                }
                getOddsComparisonFeedParser() {
                    return new a.a
                }
                getRecombee() {
                    return new Promise(e => {
                        this._loaderHandler.get("recombee").call(e)
                    })
                }
            }
        },
        16: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })), n.d(t, "b", (function() {
                    return r
                })),
                function(e) {
                    e[e.SCHEDULED = 1] = "SCHEDULED", e[e.LIVE = 2] = "LIVE", e[e.FINISHED = 3] = "FINISHED", e[e.POSTPONED = 4] = "POSTPONED", e[e.CANCELED = 5] = "CANCELED", e[e.EXTRA_TIME = 6] = "EXTRA_TIME", e[e.PENALTIES = 7] = "PENALTIES", e[e.RETIRED = 8] = "RETIRED", e[e.WALKOVER = 9] = "WALKOVER", e[e.AFTER_EXTRA_TIME = 10] = "AFTER_EXTRA_TIME", e[e.AFTER_PENALTIES = 11] = "AFTER_PENALTIES", e[e.FIRST_HALF = 12] = "FIRST_HALF", e[e.SECOND_HALF = 13] = "SECOND_HALF", e[e.FIRST_PERIOD = 14] = "FIRST_PERIOD", e[e.SECOND_PERIOD = 15] = "SECOND_PERIOD", e[e.THIRD_PERIOD = 16] = "THIRD_PERIOD", e[e.FIRST_SET = 17] = "FIRST_SET", e[e.SECOND_SET = 18] = "SECOND_SET", e[e.THIRD_SET = 19] = "THIRD_SET", e[e.FOURTH_SET = 20] = "FOURTH_SET", e[e.FIFTH_SET = 21] = "FIFTH_SET", e[e.FIRST_QUARTER = 22] = "FIRST_QUARTER", e[e.SECOND_QUARTER = 23] = "SECOND_QUARTER", e[e.THIRD_QUARTER = 24] = "THIRD_QUARTER", e[e.FOURTH_QUARTER = 25] = "FOURTH_QUARTER", e[e.FIRST_INNING = 26] = "FIRST_INNING", e[e.SECOND_INNING = 27] = "SECOND_INNING", e[e.THIRD_INNING = 28] = "THIRD_INNING", e[e.FOURTH_INNING = 29] = "FOURTH_INNING", e[e.FIFTH_INNING = 30] = "FIFTH_INNING", e[e.SIXTH_INNING = 31] = "SIXTH_INNING", e[e.SEVENTH_INNING = 32] = "SEVENTH_INNING", e[e.EIGHTH_INNING = 33] = "EIGHTH_INNING", e[e.NINTH_INNING = 34] = "NINTH_INNING", e[e.EXTRA_INNING = 35] = "EXTRA_INNING", e[e.INTERRUPTED = 36] = "INTERRUPTED", e[e.ABANDONED = 37] = "ABANDONED", e[e.HALF_TIME = 38] = "HALF_TIME", e[e.TIME_OUT = 39] = "TIME_OUT", e[e.FIRST_EXTRA_TIME = 40] = "FIRST_EXTRA_TIME", e[e.SECOND_EXTRA_TIME = 41] = "SECOND_EXTRA_TIME", e[e.PENDING = 42] = "PENDING", e[e.DELAYED = 43] = "DELAYED", e[e.SUSPENDED = 44] = "SUSPENDED", e[e.TO_FINISH = 45] = "TO_FINISH", e[e.PAUSE = 46] = "PAUSE", e[e.FIRST_SET_TIEBREAK = 47] = "FIRST_SET_TIEBREAK", e[e.SECOND_SET_TIEBREAK = 48] = "SECOND_SET_TIEBREAK", e[e.THIRD_SET_TIEBREAK = 49] = "THIRD_SET_TIEBREAK", e[e.FOURTH_SET_TIEBREAK = 50] = "FOURTH_SET_TIEBREAK", e[e.FIFTH_SET_TIEBREAK = 51] = "FIFTH_SET_TIEBREAK", e[e.GAME = 52] = "GAME", e[e.SECOND_PLACE = 53] = "SECOND_PLACE", e[e.AWARDED = 54] = "AWARDED", e[e.SIXTH_SET = 55] = "SIXTH_SET", e[e.SEVENTH_SET = 56] = "SEVENTH_SET", e[e.AFTER_DAY1 = 57] = "AFTER_DAY1", e[e.AFTER_DAY2 = 58] = "AFTER_DAY2", e[e.AFTER_DAY3 = 59] = "AFTER_DAY3", e[e.AFTER_DAY4 = 60] = "AFTER_DAY4", e[e.AFTER_DAY5 = 61] = "AFTER_DAY5", e[e.AFTER_DAY6 = 257] = "AFTER_DAY6", e[e.AFTER_DAY7 = 258] = "AFTER_DAY7", e[e.AFTER_DAY8 = 259] = "AFTER_DAY8", e[e.AFTER_DAY9 = 260] = "AFTER_DAY9", e[e.AFTER_DAY10 = 261] = "AFTER_DAY10", e[e.AFTER_ROUND1 = 62] = "AFTER_ROUND1", e[e.AFTER_ROUND2 = 63] = "AFTER_ROUND2", e[e.AFTER_ROUND3 = 64] = "AFTER_ROUND3", e[e.FIRST_ROUND = 65] = "FIRST_ROUND", e[e.SECOND_ROUND = 66] = "SECOND_ROUND", e[e.THIRD_ROUND = 67] = "THIRD_ROUND", e[e.FOURTH_ROUND = 68] = "FOURTH_ROUND", e[e.AFTER_EXTRA_INNING = 69] = "AFTER_EXTRA_INNING", e[e.PRACTICE = 70] = "PRACTICE", e[e.QUALIFICATION = 71] = "QUALIFICATION", e[e.WARM_UP = 72] = "WARM_UP", e[e.WARM_UP_2 = 234] = "WARM_UP_2", e[e.WARM_UP_1 = 235] = "WARM_UP_1", e[e.RACE = 73] = "RACE", e[e.MAIN = 74] = "MAIN", e[e.PLAY_OFFS = 75] = "PLAY_OFFS", e[e.PRACTICE_1 = 76] = "PRACTICE_1", e[e.PRACTICE_2 = 77] = "PRACTICE_2", e[e.PRACTICE_3 = 78] = "PRACTICE_3", e[e.PRACTICE_4 = 79] = "PRACTICE_4", e[e.PRACTICE_5 = 80] = "PRACTICE_5", e[e.PRACTICE_6 = 81] = "PRACTICE_6", e[e.PRACTICE_7 = 82] = "PRACTICE_7", e[e.PRACTICE_8 = 229] = "PRACTICE_8", e[e.PRACTICE_9 = 236] = "PRACTICE_9", e[e.QUALIFICATION_FIRST_STAGE = 83] = "QUALIFICATION_FIRST_STAGE", e[e.QUALIFICATION_SECOND_STAGE = 84] = "QUALIFICATION_SECOND_STAGE", e[e.QUALIFICATION_THIRD_STAGE = 85] = "QUALIFICATION_THIRD_STAGE", e[e.QUALIFICATION_1 = 86] = "QUALIFICATION_1", e[e.QUALIFICATION_2 = 87] = "QUALIFICATION_2", e[e.QUALIFICATION_3 = 88] = "QUALIFICATION_3", e[e.QUALIFICATION_4 = 243] = "QUALIFICATION_4", e[e.QUALIFICATION_5 = 244] = "QUALIFICATION_5", e[e.RACE_1 = 89] = "RACE_1", e[e.RACE_2 = 90] = "RACE_2", e[e.RACE_3 = 207] = "RACE_3", e[e.RACE_4 = 208] = "RACE_4", e[e.RACE_5 = 209] = "RACE_5", e[e.RACE_6 = 210] = "RACE_6", e[e.RACE_7 = 211] = "RACE_7", e[e.RACE_8 = 212] = "RACE_8", e[e.RACE_9 = 213] = "RACE_9", e[e.RACE_10 = 214] = "RACE_10", e[e.RACE_11 = 215] = "RACE_11", e[e.RACE_12 = 216] = "RACE_12", e[e.RACE_13 = 217] = "RACE_13", e[e.RACE_14 = 218] = "RACE_14", e[e.RACE_15 = 219] = "RACE_15", e[e.RACE_16 = 237] = "RACE_16", e[e.RACE_17 = 238] = "RACE_17", e[e.RACE_18 = 239] = "RACE_18", e[e.TESTING = 91] = "TESTING", e[e.SPECIAL_STAGE_1 = 92] = "SPECIAL_STAGE_1", e[e.SPECIAL_STAGE_2 = 93] = "SPECIAL_STAGE_2", e[e.SPECIAL_STAGE_3 = 94] = "SPECIAL_STAGE_3", e[e.SPECIAL_STAGE_4 = 95] = "SPECIAL_STAGE_4", e[e.SPECIAL_STAGE_5 = 96] = "SPECIAL_STAGE_5", e[e.SPECIAL_STAGE_6 = 97] = "SPECIAL_STAGE_6", e[e.SPECIAL_STAGE_7 = 99] = "SPECIAL_STAGE_7", e[e.SPECIAL_STAGE_8 = 100] = "SPECIAL_STAGE_8", e[e.SPECIAL_STAGE_9 = 101] = "SPECIAL_STAGE_9", e[e.SPECIAL_STAGE_10 = 102] = "SPECIAL_STAGE_10", e[e.SPECIAL_STAGE_11 = 103] = "SPECIAL_STAGE_11", e[e.SPECIAL_STAGE_12 = 104] = "SPECIAL_STAGE_12", e[e.SPECIAL_STAGE_13 = 105] = "SPECIAL_STAGE_13", e[e.SPECIAL_STAGE_14 = 106] = "SPECIAL_STAGE_14", e[e.SPECIAL_STAGE_15 = 107] = "SPECIAL_STAGE_15", e[e.SPECIAL_STAGE_16 = 108] = "SPECIAL_STAGE_16", e[e.SPECIAL_STAGE_17 = 109] = "SPECIAL_STAGE_17", e[e.SPECIAL_STAGE_18 = 110] = "SPECIAL_STAGE_18", e[e.SPECIAL_STAGE_19 = 111] = "SPECIAL_STAGE_19", e[e.SPECIAL_STAGE_20 = 112] = "SPECIAL_STAGE_20", e[e.SPECIAL_STAGE_21 = 113] = "SPECIAL_STAGE_21", e[e.SPECIAL_STAGE_22 = 114] = "SPECIAL_STAGE_22", e[e.SPECIAL_STAGE_23 = 115] = "SPECIAL_STAGE_23", e[e.SPECIAL_STAGE_24 = 116] = "SPECIAL_STAGE_24", e[e.SPECIAL_STAGE_25 = 117] = "SPECIAL_STAGE_25", e[e.SPECIAL_STAGE_26 = 118] = "SPECIAL_STAGE_26", e[e.HEAT_1 = 119] = "HEAT_1", e[e.HEAT_2 = 120] = "HEAT_2", e[e.HEAT_3 = 121] = "HEAT_3", e[e.HEAT_4 = 122] = "HEAT_4", e[e.HEAT_5 = 123] = "HEAT_5", e[e.HEAT_6 = 124] = "HEAT_6", e[e.HEAT_7 = 125] = "HEAT_7", e[e.HEAT_8 = 126] = "HEAT_8", e[e.HEAT_9 = 127] = "HEAT_9", e[e.HEAT_10 = 128] = "HEAT_10", e[e.HEAT_11 = 129] = "HEAT_11", e[e.HEAT_12 = 130] = "HEAT_12", e[e.HEAT_13 = 131] = "HEAT_13", e[e.HEAT_14 = 132] = "HEAT_14", e[e.HEAT_15 = 133] = "HEAT_15", e[e.HEAT_16 = 134] = "HEAT_16", e[e.HEAT_17 = 135] = "HEAT_17", e[e.HEAT_18 = 136] = "HEAT_18", e[e.HEAT_19 = 137] = "HEAT_19", e[e.HEAT_20 = 138] = "HEAT_20", e[e.HEAT_21 = 139] = "HEAT_21", e[e.HEAT_22 = 140] = "HEAT_22", e[e.HEAT_23 = 141] = "HEAT_23", e[e.HEAT_24 = 142] = "HEAT_24", e[e.HEAT_25 = 143] = "HEAT_25", e[e.TEST_DAY_1 = 144] = "TEST_DAY_1", e[e.TEST_DAY_2 = 145] = "TEST_DAY_2", e[e.TEST_DAY_3 = 146] = "TEST_DAY_3", e[e.TEST_DAY_4 = 147] = "TEST_DAY_4", e[e.TEST_DAY_5 = 148] = "TEST_DAY_5", e[e.AFTER_STAGE_1 = 149] = "AFTER_STAGE_1", e[e.AFTER_STAGE_2 = 150] = "AFTER_STAGE_2", e[e.AFTER_STAGE_3 = 151] = "AFTER_STAGE_3", e[e.AFTER_STAGE_4 = 152] = "AFTER_STAGE_4", e[e.AFTER_STAGE_5 = 153] = "AFTER_STAGE_5", e[e.AFTER_STAGE_6 = 154] = "AFTER_STAGE_6", e[e.AFTER_STAGE_7 = 155] = "AFTER_STAGE_7", e[e.AFTER_STAGE_8 = 156] = "AFTER_STAGE_8", e[e.AFTER_STAGE_9 = 157] = "AFTER_STAGE_9", e[e.AFTER_STAGE_10 = 158] = "AFTER_STAGE_10", e[e.AFTER_STAGE_11 = 159] = "AFTER_STAGE_11", e[e.AFTER_STAGE_12 = 160] = "AFTER_STAGE_12", e[e.AFTER_STAGE_13 = 161] = "AFTER_STAGE_13", e[e.AFTER_STAGE_14 = 162] = "AFTER_STAGE_14", e[e.AFTER_STAGE_15 = 163] = "AFTER_STAGE_15", e[e.AFTER_STAGE_16 = 164] = "AFTER_STAGE_16", e[e.AFTER_STAGE_17 = 165] = "AFTER_STAGE_17", e[e.AFTER_STAGE_18 = 166] = "AFTER_STAGE_18", e[e.AFTER_STAGE_19 = 167] = "AFTER_STAGE_19", e[e.AFTER_STAGE_20 = 168] = "AFTER_STAGE_20", e[e.AFTER_STAGE_21 = 169] = "AFTER_STAGE_21", e[e.AFTER_STAGE_22 = 170] = "AFTER_STAGE_22", e[e.AFTER_STAGE_23 = 171] = "AFTER_STAGE_23", e[e.AFTER_STAGE_24 = 172] = "AFTER_STAGE_24", e[e.AFTER_STAGE_25 = 173] = "AFTER_STAGE_25", e[e.AFTER_STAGE_26 = 174] = "AFTER_STAGE_26", e[e.AFTER_STAGE_27 = 175] = "AFTER_STAGE_27", e[e.AFTER_STAGE_28 = 176] = "AFTER_STAGE_28", e[e.AFTER_STAGE_29 = 177] = "AFTER_STAGE_29", e[e.AFTER_STAGE_30 = 178] = "AFTER_STAGE_30", e[e.STAGE_1 = 179] = "STAGE_1", e[e.STAGE_2 = 180] = "STAGE_2", e[e.STAGE_3 = 181] = "STAGE_3", e[e.STAGE_4 = 182] = "STAGE_4", e[e.STAGE_5 = 183] = "STAGE_5", e[e.STAGE_6 = 184] = "STAGE_6", e[e.STAGE_7 = 185] = "STAGE_7", e[e.STAGE_8 = 186] = "STAGE_8", e[e.STAGE_9 = 187] = "STAGE_9", e[e.STAGE_10 = 188] = "STAGE_10", e[e.STAGE_11 = 189] = "STAGE_11", e[e.STAGE_12 = 190] = "STAGE_12", e[e.STAGE_13 = 191] = "STAGE_13", e[e.STAGE_14 = 192] = "STAGE_14", e[e.STAGE_15 = 193] = "STAGE_15", e[e.STAGE_16 = 194] = "STAGE_16", e[e.STAGE_17 = 195] = "STAGE_17", e[e.STAGE_18 = 196] = "STAGE_18", e[e.STAGE_19 = 197] = "STAGE_19", e[e.STAGE_20 = 198] = "STAGE_20", e[e.STAGE_21 = 199] = "STAGE_21", e[e.STAGE_22 = 200] = "STAGE_22", e[e.STAGE_23 = 201] = "STAGE_23", e[e.STAGE_24 = 202] = "STAGE_24", e[e.STAGE_25 = 203] = "STAGE_25", e[e.SEMIFINAL = 251] = "SEMIFINAL", e[e.SEMIFINAL_1 = 204] = "SEMIFINAL_1", e[e.SEMIFINAL_2 = 205] = "SEMIFINAL_2", e[e.SEMIFINAL_3 = 253] = "SEMIFINAL_3", e[e.FINAL_ROUND = 206] = "FINAL_ROUND", e[e.FIFTH_ROUND = 220] = "FIFTH_ROUND", e[e.SIXTH_ROUND = 221] = "SIXTH_ROUND", e[e.SEVENTH_ROUND = 222] = "SEVENTH_ROUND", e[e.EIGHTH_ROUND = 223] = "EIGHTH_ROUND", e[e.NINTH_ROUND = 224] = "NINTH_ROUND", e[e.TENTH_ROUND = 225] = "TENTH_ROUND", e[e.ELEVENTH_ROUND = 226] = "ELEVENTH_ROUND", e[e.TWELFTH_ROUND = 227] = "TWELFTH_ROUND", e[e.AFTER_RACE_1 = 262] = "AFTER_RACE_1", e[e.AFTER_RACE_2 = 263] = "AFTER_RACE_2", e[e.AFTER_RACE_3 = 264] = "AFTER_RACE_3", e[e.AFTER_RACE_4 = 265] = "AFTER_RACE_4", e[e.CURRENT = 228] = "CURRENT", e[e.QUALIFICATION_1_FIRST_STAGE = 230] = "QUALIFICATION_1_FIRST_STAGE", e[e.QUALIFICATION_2_FIRST_STAGE = 231] = "QUALIFICATION_2_FIRST_STAGE", e[e.QUALIFICATION_1_SECOND_STAGE = 232] = "QUALIFICATION_1_SECOND_STAGE", e[e.QUALIFICATION_2_SECOND_STAGE = 233] = "QUALIFICATION_2_SECOND_STAGE", e[e.FULL_TIME = 242] = "FULL_TIME", e[e.QUARTER_FINAL_1 = 245] = "QUARTER_FINAL_1", e[e.QUARTER_FINAL_2 = 246] = "QUARTER_FINAL_2", e[e.QUARTER_FINAL_3 = 247] = "QUARTER_FINAL_3", e[e.QUARTER_FINAL_4 = 248] = "QUARTER_FINAL_4", e[e.QUARTER_FINAL_5 = 249] = "QUARTER_FINAL_5", e[e.QUARTER_FINAL_6 = 250] = "QUARTER_FINAL_6", e[e.QUARTER_FINAL = 252] = "QUARTER_FINAL", e[e.FINAL_B = 254] = "FINAL_B", e[e.SPECIAL_STAGE_1_B = 256] = "SPECIAL_STAGE_1_B", e[e.AFTER_QUALIFICATION = 255] = "AFTER_QUALIFICATION", e[e.AFTER_QUALIFICATION_1 = 266] = "AFTER_QUALIFICATION_1", e[e.AFTER_QUALIFICATION_2 = 267] = "AFTER_QUALIFICATION_2", e[e.AFTER_QUALIFICATION_3 = 268] = "AFTER_QUALIFICATION_3", e[e.AFTER_QUALIFICATION_4 = 269] = "AFTER_QUALIFICATION_4", e[e.AFTER_QUALIFICATION_5 = 270] = "AFTER_QUALIFICATION_5", e[e.AFTER_QUALIFICATION_FIRST_STAGE = 271] = "AFTER_QUALIFICATION_FIRST_STAGE", e[e.AFTER_QUALIFICATION_SECOND_STAGE = 272] = "AFTER_QUALIFICATION_SECOND_STAGE", e[e.AFTER_QUALIFICATION_THIRD_STAGE = 273] = "AFTER_QUALIFICATION_THIRD_STAGE", e[e.AFTER_QUALIFICATION_1_FIRST_STAGE = 274] = "AFTER_QUALIFICATION_1_FIRST_STAGE", e[e.AFTER_QUALIFICATION_1_SECOND_STAGE = 275] = "AFTER_QUALIFICATION_1_SECOND_STAGE", e[e.AFTER_QUALIFICATION_2_FIRST_STAGE = 276] = "AFTER_QUALIFICATION_2_FIRST_STAGE", e[e.AFTER_QUALIFICATION_2_SECOND_STAGE = 277] = "AFTER_QUALIFICATION_2_SECOND_STAGE", e[e.AFTER_PRACTICE_1 = 278] = "AFTER_PRACTICE_1", e[e.AFTER_PRACTICE_2 = 279] = "AFTER_PRACTICE_2", e[e.AFTER_PRACTICE_3 = 280] = "AFTER_PRACTICE_3", e[e.AFTER_PRACTICE_4 = 281] = "AFTER_PRACTICE_4", e[e.AFTER_PRACTICE_5 = 282] = "AFTER_PRACTICE_5", e[e.AFTER_PRACTICE_6 = 283] = "AFTER_PRACTICE_6", e[e.AFTER_PRACTICE_7 = 284] = "AFTER_PRACTICE_7", e[e.AFTER_PRACTICE_8 = 285] = "AFTER_PRACTICE_8", e[e.AFTER_PRACTICE_9 = 286] = "AFTER_PRACTICE_9", e[e.AFTER_SPECIAL_STAGE_1 = 287] = "AFTER_SPECIAL_STAGE_1", e[e.AFTER_SPECIAL_STAGE_2 = 288] = "AFTER_SPECIAL_STAGE_2", e[e.AFTER_SPECIAL_STAGE_3 = 289] = "AFTER_SPECIAL_STAGE_3", e[e.AFTER_SPECIAL_STAGE_4 = 290] = "AFTER_SPECIAL_STAGE_4", e[e.AFTER_SPECIAL_STAGE_5 = 291] = "AFTER_SPECIAL_STAGE_5", e[e.AFTER_SPECIAL_STAGE_6 = 292] = "AFTER_SPECIAL_STAGE_6", e[e.AFTER_SPECIAL_STAGE_7 = 293] = "AFTER_SPECIAL_STAGE_7", e[e.AFTER_SPECIAL_STAGE_8 = 294] = "AFTER_SPECIAL_STAGE_8", e[e.AFTER_SPECIAL_STAGE_9 = 295] = "AFTER_SPECIAL_STAGE_9", e[e.AFTER_SPECIAL_STAGE_10 = 296] = "AFTER_SPECIAL_STAGE_10", e[e.AFTER_SPECIAL_STAGE_11 = 297] = "AFTER_SPECIAL_STAGE_11", e[e.AFTER_SPECIAL_STAGE_12 = 298] = "AFTER_SPECIAL_STAGE_12", e[e.AFTER_SPECIAL_STAGE_13 = 299] = "AFTER_SPECIAL_STAGE_13", e[e.AFTER_SPECIAL_STAGE_14 = 300] = "AFTER_SPECIAL_STAGE_14", e[e.AFTER_SPECIAL_STAGE_15 = 301] = "AFTER_SPECIAL_STAGE_15", e[e.AFTER_SPECIAL_STAGE_16 = 302] = "AFTER_SPECIAL_STAGE_16", e[e.AFTER_SPECIAL_STAGE_17 = 303] = "AFTER_SPECIAL_STAGE_17", e[e.AFTER_SPECIAL_STAGE_18 = 304] = "AFTER_SPECIAL_STAGE_18", e[e.AFTER_SPECIAL_STAGE_19 = 305] = "AFTER_SPECIAL_STAGE_19", e[e.AFTER_SPECIAL_STAGE_20 = 306] = "AFTER_SPECIAL_STAGE_20", e[e.AFTER_SPECIAL_STAGE_21 = 307] = "AFTER_SPECIAL_STAGE_21", e[e.AFTER_SPECIAL_STAGE_22 = 308] = "AFTER_SPECIAL_STAGE_22", e[e.AFTER_SPECIAL_STAGE_23 = 309] = "AFTER_SPECIAL_STAGE_23", e[e.AFTER_SPECIAL_STAGE_24 = 310] = "AFTER_SPECIAL_STAGE_24", e[e.AFTER_SPECIAL_STAGE_25 = 311] = "AFTER_SPECIAL_STAGE_25", e[e.AFTER_SPECIAL_STAGE_26 = 312] = "AFTER_SPECIAL_STAGE_26", e[e.AFTER_SPECIAL_STAGE_1_B = 313] = "AFTER_SPECIAL_STAGE_1_B", e[e.AFTER_WARM_UP = 314] = "AFTER_WARM_UP", e[e.AFTER_WARM_UP_1 = 315] = "AFTER_WARM_UP_1", e[e.AFTER_WARM_UP_2 = 316] = "AFTER_WARM_UP_2", e[e.AFTER_HEAT_1 = 317] = "AFTER_HEAT_1", e[e.AFTER_HEAT_2 = 318] = "AFTER_HEAT_2", e[e.AFTER_HEAT_3 = 319] = "AFTER_HEAT_3", e[e.AFTER_HEAT_4 = 320] = "AFTER_HEAT_4", e[e.AFTER_HEAT_5 = 321] = "AFTER_HEAT_5", e[e.EIGHTH_SET = 324] = "EIGHTH_SET", e[e.NINTH_SET = 325] = "NINTH_SET", e[e.TENTH_SET = 326] = "TENTH_SET", e[e.ELEVENTH_SET = 327] = "ELEVENTH_SET", e[e.TWELFTH_SET = 328] = "TWELFTH_SET", e[e.THIRTEENTH_SET = 329] = "THIRTEENTH_SET", e[e.LUNCH = 333] = "LUNCH", e[e.TEA = 334] = "TEA", e[e.MEDICAL_TIMEOUT = 335] = "MEDICAL_TIMEOUT", e[e.FIRST_AND_SECOND_HALF = 9999] = "FIRST_AND_SECOND_HALF", e[e.OVERALL = 74] = "OVERALL"
                }(a || (a = {}));
            const r = [a.SCHEDULED, a.POSTPONED, a.CANCELED, a.RETIRED, a.WALKOVER, a.INTERRUPTED, a.ABANDONED, a.AFTER_DAY1, a.AFTER_DAY2, a.AFTER_DAY3, a.AFTER_DAY4, a.AFTER_DAY5, a.AFTER_DAY6, a.AFTER_DAY7, a.AFTER_DAY8, a.AFTER_DAY9, a.AFTER_DAY10]
        },
        164: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return D
            }));
            var a = n(0),
                r = n.n(a);
            const i = r.a.createContext(null);

            function s() {
                const e = Object(a.useContext)(i);
                if (null === e) throw new Error("Environment context was not initialized.");
                return e
            }

            function l() {
                return s().getConfig()
            }
            var o = n(23),
                c = n(18);
            class g {
                constructor(e, t, n, a, r) {
                    this.id = e, this.logo = t, this.name = n, this.url = a, this.sportId = r
                }
                getId() {
                    return this.id
                }
                getName() {
                    return this.name
                }
                getLogo() {
                    return this.logo
                }
                getUrl() {
                    return this.url
                }
                getSportId() {
                    return this.sportId
                }
            }
            class _ {
                constructor() {
                    this.id = "", this.name = "", this.logo = "", this.url = "", this.sportId = 0
                }
                setId(e) {
                    return this.id = e, this
                }
                setName(e) {
                    return this.name = e, this
                }
                setLogo(e) {
                    return this.logo = e, this
                }
                setUrl(e) {
                    return this.url = e, this
                }
                setSportId(e) {
                    return this.sportId = e, this
                }
                build() {
                    return new g(this.id, this.logo, this.name, this.url, this.sportId)
                }
            }
            class h {
                constructor(e) {
                    this.participants = e
                }
                findParticipant(e) {
                    var t;
                    return null !== (t = this.participants.filter(t => t.getId() === e)[0]) && void 0 !== t ? t : null
                }
                getParticipants() {
                    return this.participants
                }
            }
            var E = n(2);
            class d extends c.a {
                constructor() {
                    super(...arguments), this.participants = []
                }
                startFeed() {
                    this.participants = []
                }
                parse(e, t) {
                    switch (e) {
                        case E.a.DCAPIPARTICIPANTINDEXES_TEAM_INFO: {
                            const e = this.getStringArray(t);
                            this.participants.push((new _).setId(e[0]).setName(e[1]).setLogo(e[3]).setSportId(this.getNumberValueOf(e[4])).setUrl(e[6]).build());
                            break
                        }
                    }
                }
                getParsedModel() {
                    return new h(this.participants)
                }
            }
            var T = n(35),
                u = n.n(T),
                S = n(101),
                m = n.n(S);
            const v = () => a.createElement("div", {
                    className: u.a.recomCont
                }, a.createElement("div", {
                    className: m.a.recomSkelHead
                }), a.createElement("div", {
                    className: u.a.recomArea
                }, a.createElement(p, null), a.createElement(p, null), a.createElement(p, null), a.createElement(p, null), a.createElement(p, null), a.createElement(p, null), a.createElement(p, null))),
                p = () => a.createElement("div", {
                    className: u.a.recomHref
                }, a.createElement("div", {
                    className: m.a.recomSkelImage
                }), a.createElement("div", {
                    className: m.a.recomSkelText
                }));
            class I {
                constructor(e, t, n, a, r, i, s, l) {
                    this.trans = e, this.config = t, this.utilEnvironment = n, this.moduleLoader = a, this.feedNameComposer = r, this.feedFetcher = i, this.sport = s, this.url = l
                }
                getConfig() {
                    return this.config
                }
                getTrans() {
                    return this.trans
                }
                getUtilEnvironment() {
                    return this.utilEnvironment
                }
                getModuleLoader() {
                    return this.moduleLoader
                }
                getFeedFetcher() {
                    return this.feedFetcher
                }
                getFeedNameComposer() {
                    return this.feedNameComposer
                }
                getSport() {
                    return this.sport
                }
                getUrl() {
                    return this.url
                }
            }
            class A {
                constructor(e) {
                    this.utilFactory = e
                }
                setModuleLoader(e) {
                    return this.moduleLoader = e, this
                }
                build() {
                    return new I(this.utilFactory.createTrans(), this.utilFactory.createConfig(), this.utilFactory.createEnviroment(), this.moduleLoader, this.utilFactory.createFeedNameComposer(), this.utilFactory.createFeedFetcher(), this.utilFactory.createSport(), this.utilFactory.createUrl())
                }
            }
            var N = function(e, t, n, a) {
                return new(n || (n = Promise))((function(r, i) {
                    function s(e) {
                        try {
                            o(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function l(e) {
                        try {
                            o(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function o(e) {
                        var t;
                        e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                            e(t)
                        }))).then(s, l)
                    }
                    o((a = a.apply(e, t || [])).next())
                }))
            };
            let R, O = [];

            function D(e, t, n) {
                return r.a.createElement(i.Provider, {
                    value: new A(e).setModuleLoader(t).build()
                }, r.a.createElement(C, {
                    itemId: n
                }))
            }

            function C(e) {
                const t = s().getTrans(),
                    n = s().getModuleLoader(),
                    i = s().getFeedNameComposer(),
                    c = s().getFeedFetcher(),
                    g = l().get("app", "recombee", "enabled"),
                    _ = l().get("app", "recombee", "scenario"),
                    [h, E] = Object(a.useState)(O),
                    [T, S] = Object(a.useState)(!1);
                if (Object(a.useEffect)(() => {
                        g && !h.length && n.getRecombee().then(t => N(this, void 0, void 0, (function*() {
                            if (R || (R = (yield t.getScenarioRecommendationsToItem(e.itemId, _)).map(e => e.id)), R.length) {
                                const e = i.getPmxFeed(R),
                                    t = new o.a(e, c, new d),
                                    n = yield t.fetch();
                                O = n.getParticipants(), O.length ? E(O) : S(!0)
                            } else S(!0)
                        })))
                    }, []), !g || T) return null;
                if (!h.length) return r.a.createElement(v, null);
                const m = h.map(e => r.a.createElement(y, {
                    key: "participantBox--" + e.getId(),
                    participant: e
                }));
                return r.a.createElement("div", {
                    id: "recomBox",
                    className: u.a.recomCont
                }, r.a.createElement("div", {
                    className: u.a.recomHeading
                }, t.translate("TRANS_SEARCH_MOST_POPULAR_SEARCHES"), ":"), r.a.createElement("div", {
                    className: u.a.recomArea
                }, m))
            }

            function y({
                participant: e
            }) {
                const t = s().getUtilEnvironment(),
                    n = t.getEventTrackingObject(),
                    a = s().getSport(),
                    i = s().getUrl();
                return r.a.createElement("a", {
                    className: u.a.recomHref,
                    href: e.getUrl(),
                    onClick: () => {
                        null == n || n.track_click("click_recommending_box", e.getId(), void 0, void 0, void 0, a.getOriginalNameFromId(e.getSportId()))
                    }
                }, r.a.createElement("div", {
                    className: u.a.recomImage
                }, r.a.createElement("img", {
                    alt: e.getName(),
                    src: (l = e.getLogo(), ["women", "men", "team"].includes(l) ? i.getEmptyLogoByType(l) : t.getBaseImageDataUrl() + l)
                })), r.a.createElement("div", {
                    className: u.a.recomName
                }, e.getName()));
                var l
            }
        },
        170: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(22),
                r = n(90);
            class i {
                constructor(e) {
                    this.data = e
                }
                get() {
                    const e = this.getChannel(this.data.channel),
                        t = [];
                    return this.data.eventChannels.forEach(e => {
                        const n = this.getChannel(e);
                        t.push(n)
                    }), (new r.a).setChannel(e).setDefaultBundleUuid(this.data.defaultBundleUuid).setEventChannels(t).build()
                }
                getChannel(e) {
                    return (new a.a).setId(e.id).setName(e.name).setBundleUuid(e.bundleUuid).setBundleName(e.bundleName).setIsFree(e.isFree).setPriceCurrencyCode(e.priceCurrencyCode).setPriceCurrencyValue(e.priceCurrencyValue).setIsPaid(e.isPaid).setExpirationDate(e.expirationDate).setExpirationPeriod(e.expirationPeriod).setEncodedImageFilename(e.encodedImageFilename).setStreamTypeId(e.streamTypeId).setIsPurchasable(e.isPurchasable).setIsActive(e.isActive).build()
                }
            }
            class s {
                constructor(e, t, n, a, r) {
                    this.eventId = e.getId();
                    const s = e.getEventChannelsInfo();
                    this.eventChannelsInfo = s ? new i(s).get() : null, this.usersBundles = r.getBundles() || [], this.utilEnvironment = t, this.utilConfig = n, this.utilTrans = a
                }
                isEnabled() {
                    var e;
                    if (!this.eventChannelsInfo) return !1;
                    const t = this.eventChannelsInfo.getChannel(),
                        n = s.getValidBundles(this.eventChannelsInfo),
                        a = null === (e = this.utilEnvironment.getLoginClientObject()) || void 0 === e ? void 0 : e.loggedIn();
                    if (t.isFinished()) return !!a && this.usersBundles.filter(e => n.includes(e.uuid)).length > 0;
                    const r = this.usersBundles.filter(e => e.uuid === t.getBundleUuid()).length > 0;
                    return !!(t.getIsPurchasable() || r && a) && n.length > 0
                }
                isUnlocked() {
                    var e, t;
                    const n = !!(null === (e = this.utilEnvironment.getLoginClientObject()) || void 0 === e ? void 0 : e.loggedIn()) && !!(null === (t = this.eventChannelsInfo) || void 0 === t ? void 0 : t.getChannel().getIsFree());
                    return this.hasSubscribedBundle() || n
                }
                getTitle() {
                    return this.utilTrans.translate("TRANS_LSTV_WATCH_BROADCAST")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        e.stopPropagation();
                        const n = this.hasSubscribedBundle() ? this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_VIDEO_HIGHLIGHTS") : "";
                        return this.utilEnvironment.detailOpen(this.eventId, n), null === (t = this.utilEnvironment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "stream"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this.utilEnvironment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this.utilEnvironment.getTooltipObject().hide(e.target), !0)
                }
                static getValidBundles(e) {
                    return e.getEventChannels().map(e => e.getBundleUuid())
                }
                hasSubscribedBundle() {
                    if (!this.eventChannelsInfo) return !1;
                    const e = this.usersBundles.map(e => e.uuid),
                        t = s.getValidBundles(this.eventChannelsInfo);
                    return e.reduce((e, n) => e || t.includes(n), !1)
                }
            }
        },
        175: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = function(e, t) {
                var n = {};
                for (var a in e) Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (n[a] = e[a]);
                if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                    var r = 0;
                    for (a = Object.getOwnPropertySymbols(e); r < a.length; r++) t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[r]) && (n[a[r]] = e[a[r]])
                }
                return n
            };
            class r {
                constructor() {
                    this._callsCounter = {}
                }
                increment(e) {
                    this._callsCounter = Object.assign(Object.assign({}, this._callsCounter), {
                        [e]: ++this._callsCounter[e] || 1
                    })
                }
                decrement(e) {
                    if (void 0 !== this._callsCounter[e])
                        if (1 === this._callsCounter[e]) {
                            const t = this._callsCounter,
                                n = e,
                                r = (t[n], a(t, ["symbol" == typeof n ? n : n + ""]));
                            this._callsCounter = r
                        } else this._callsCounter = Object.assign(Object.assign({}, this._callsCounter), {
                            [e]: --this._callsCounter[e]
                        })
                }
                getState() {
                    return this._callsCounter
                }
                reset() {
                    this._callsCounter = {}
                }
            }
            class i {
                constructor() {
                    this._callsCounter = new r
                }
                showLoading(e) {
                    this._callsCounter.increment(e)
                }
                hideLoading(e) {
                    this._callsCounter.decrement(e)
                }
                shouldDisplayLoading() {
                    const e = this._callsCounter.getState();
                    return Object.keys(e).map(t => e[t]).reduce((e, t) => e + t, 0) > 0
                }
                reset() {
                    this._callsCounter.reset()
                }
            }
        },
        18: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(26);
            class r {
                constructor() {
                    this.properties = null, this.isArray = e => Array.isArray(e), this.isString = e => "string" == typeof e, this.isBoolean = e => "boolean" == typeof e, this.isNumber = e => "number" == typeof e, this.allowEmptyArrayOrCheckElements = (e, t) => {
                        const n = this.isArray(e);
                        return n && 0 === e.length || n && e.length > 0 && e.every(t)
                    }, this.isStringArray = e => this.allowEmptyArrayOrCheckElements(e, this.isString), this.isBooleanArray = e => this.allowEmptyArrayOrCheckElements(e, this.isBoolean), this.isNumberArray = e => this.allowEmptyArrayOrCheckElements(e, this.isNumber), this.getString = e => {
                        if (this.isString(e)) return e;
                        throw new Error(`GetString cannot parse ${e} of type ${typeof e}.`)
                    }, this.getStringArray = e => {
                        if (this.isStringArray(e)) return e;
                        if (this.isString(e)) return e.includes(a.a.DELIMITER_ARRAY) ? e.split(a.a.DELIMITER_ARRAY) : [e];
                        throw new Error(`GetStringArray cannot parse ${e} of type ${typeof e}.`)
                    }, this.getNumberValueOf = e => this.parseNumber(e, parseInt), this.getFloatValueOf = e => this.parseNumber(e, parseFloat), this.parseNumber = (e, t) => {
                        if (this.isNumber(e)) return e;
                        if (this.isString(e)) return t(this.getString(e));
                        throw new Error(`GetNumberValueOf cannot parse ${e} of type ${typeof e}.`)
                    }, this.getNumberValuesOf = e => {
                        if (this.isNumberArray(e)) return e;
                        if (this.isNumber(e)) return [e];
                        if (this.isStringArray(e)) return e.map(this.getNumberValueOf);
                        if (this.isString(e)) return this.getStringArray(e).map(this.getNumberValueOf);
                        throw new Error(`GetNumberValuesOf cannot parse ${e} of type ${typeof e}.`)
                    }, this.getBooleanValueOf = e => {
                        if (this.isBoolean(e)) return e;
                        if (this.isNumber(e)) return !!e;
                        if (this.isString(e)) return "true" === e || "1" === e;
                        throw new Error(`GetBooleanValueOf cannot parse ${e} of type ${typeof e}.`)
                    }, this.getBooleanValuesOf = e => {
                        if (this.isBooleanArray(e)) return e;
                        if (this.isNumberArray(e)) return e.map(this.getBooleanValueOf);
                        if (this.isStringArray(e)) return e.map(this.getBooleanValueOf);
                        if (this.isString(e)) return this.getStringArray(e).map(this.getBooleanValueOf);
                        throw new Error(`GetBooleanValuesOf cannot parse ${e} of type ${typeof e}.`)
                    }, this.getJsonValueOf = e => JSON.parse(this.getString(e))
                }
                setProperties(e) {
                    this.properties = e
                }
                startFeed() {}
                endFeed() {}
                startRow() {}
                endRow() {}
                parse(e, t) {}
            }
        },
        2: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            let a = (() => {
                class e {}
                return e.ADVERTINDEXES_WRAPPER = "\t\tvar banners;\n\t\tcjs.Api.loader.get('cjs').call(function(_cjs) {\n\t\t\t%s\n\t\t});\n", e.APPLINKSINDEXES_INDEX_EVENT_ID = "SAE", e.APPLINKSINDEXES_INDEX_SPORT_ID = "SAI", e.APPLINKSINDEXES_INDEX_TOURNAMENT_ID = "SAU", e.APPLINKSINDEXES_INDEX_TOURNAMENT_TEMPLATE_ID = "SAT", e.APPLINKSINDEXES_INDEX_VALID = "VVV", e.BALLBYBALLINDEXES_BALL_TYPE = "BBF", e.BALLBYBALLINDEXES_BALL_VALUE = "BBG", e.BALLBYBALLINDEXES_BOWLER_TO_BATSMAN_INFO = "BBE", e.BALLBYBALLINDEXES_NUMBER = "BBB", e.BALLBYBALLINDEXES_RUNS = "BBC", e.BALLBYBALLINDEXES_SCORE = "BBD", e.BALLBYBALLINDEXES_TAB_NAME = "BBA", e.COMMONINDEXES_ACTIVE_LIVE_ODDS = "CO", e.COMMONINDEXES_ACTIVE_LIVE_ODDS_BOOKMAKERS = "CQ", e.COMMONINDEXES_AVAILABLE_TABS = "DU", e.COMMONINDEXES_AVAILABLE_TABS_NEW = "DX", e.COMMONINDEXES_AWAY_3CHAR_NAME = "IZ", e.COMMONINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING = "EN", e.COMMONINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING = "EP", e.COMMONINDEXES_AWAY_CRICKET_FIRST_INNING = "EY", e.COMMONINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING = "FB", e.COMMONINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING = "EZ", e.COMMONINDEXES_AWAY_CRICKET_SECOND_INNING = "EV", e.COMMONINDEXES_AWAY_FIRST_OUTS = "ER", e.COMMONINDEXES_AWAY_FT_SCORE = "DH", e.COMMONINDEXES_AWAY_GAME_SCORE = "DQ", e.COMMONINDEXES_AWAY_LOGO = "ED", e.COMMONINDEXES_AWAY_NAME = "EB", e.COMMONINDEXES_AWAY_PARTICIPANT_RANK = "EL", e.COMMONINDEXES_AWAY_RUN_RATE = "ARR", e.COMMONINDEXES_AWAY_SCORE = "DF", e.COMMONINDEXES_AWAY_SECOND_OUTS = "EQ", e.COMMONINDEXES_AWAY_SET_SCORE = "DO", e.COMMONINDEXES_BETTING_TYPE = "DL", e.COMMONINDEXES_COL = "CO", e.COMMONINDEXES_COMMENT = "CO", e.COMMONINDEXES_CRICKET_SENTENCE = "FD", e.COMMONINDEXES_CURRENT_SERVICE_SIDE = "DR", e.COMMONINDEXES_EVENT_END_TIME = "DS", e.COMMONINDEXES_EVENT_GAME_TIME = "DI", e.COMMONINDEXES_EVENT_IMAGE = "DEI", e.COMMONINDEXES_EVENT_INFO = "DM", e.COMMONINDEXES_EVENT_STAGE_ID = "DB", e.COMMONINDEXES_EVENT_STAGE_START_TIME = "DD", e.COMMONINDEXES_EVENT_STAGE_TYPE_ID = "DA", e.COMMONINDEXES_EVENT_START_TIME = "DC", e.COMMONINDEXES_FLAG_ID = "EG", e.COMMONINDEXES_FT_WINNER = "AZ", e.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED = "EJ", e.COMMONINDEXES_GROUP = "GR", e.COMMONINDEXES_HASHTAG = "DY", e.COMMONINDEXES_HEADER = "HD", e.COMMONINDEXES_HIGHLIGHTS_RESTRICTIONS = "HR", e.COMMONINDEXES_HOME_3CHAR_NAME = "IY", e.COMMONINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING = "EM", e.COMMONINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING = "EO", e.COMMONINDEXES_HOME_CRICKET_FIRST_INNING = "EW", e.COMMONINDEXES_HOME_CRICKET_OVERS_FIRST_INNING = "FA", e.COMMONINDEXES_HOME_CRICKET_OVERS_SECOND_INNING = "FC", e.COMMONINDEXES_HOME_CRICKET_SECOND_INNING = "ET", e.COMMONINDEXES_HOME_FIRST_OUTS = "EX", e.COMMONINDEXES_HOME_FT_SCORE = "DG", e.COMMONINDEXES_HOME_GAME_SCORE = "DP", e.COMMONINDEXES_HOME_LOGO = "EC", e.COMMONINDEXES_HOME_NAME = "EA", e.COMMONINDEXES_HOME_PARTICIPANT_RANK = "EK", e.COMMONINDEXES_HOME_RUN_RATE = "HRR", e.COMMONINDEXES_HOME_SCORE = "DE", e.COMMONINDEXES_HOME_SECOND_OUTS = "EU", e.COMMONINDEXES_HOME_SET_SCORE = "DN", e.COMMONINDEXES_IS_7_RUGBY = "EI", e.COMMONINDEXES_LAST_SCORE_UPDATE = "DK", e.COMMONINDEXES_MENU = "ME", e.COMMONINDEXES_RESULT_TYPE = "DT", e.COMMONINDEXES_ROOT = "RO", e.COMMONINDEXES_ROW = "RW", e.COMMONINDEXES_ROW_CURRENT = "RWC", e.COMMONINDEXES_ROW_NEWS_EVENT = "RNE", e.COMMONINDEXES_ROW_NEWS_ITEM = "RNI", e.COMMONINDEXES_ROW_NEWS_MORE = "RNM", e.COMMONINDEXES_ROW_POINTS = "RWP", e.COMMONINDEXES_ROW_SCORE = "RWS", e.COMMONINDEXES_SCORE = "SC", e.COMMONINDEXES_SPORT_ID = "DV", e.COMMONINDEXES_TAB = "TAB", e.COMMONINDEXES_TABLE = "TA", e.COMMONINDEXES_TAB_ID = "TI", e.COMMONINDEXES_TEXT = "TE", e.COMMONINDEXES_TEXT_SPEC = "TXS", e.COMMONINDEXES_TOURNAMENT_FULL_NAME = "EE", e.COMMONINDEXES_TOURNAMENT_STAGE_ID = "DW", e.COMMONINDEXES_TOURNAMENT_TEMPLATE_NAME = "EF", e.COMMONINDEXES_TOURNAMENT_TEMPLATE_URL = "EH", e.COMMONINDEXES_UNKNOWN = "", e.COMMONINDEXES_UNKNOWN_PROPERTY = "", e.COMMONINDEXES_VALUE = "VA", e.COMMONINDEXES_WINNER = "DJ", e.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_BIRTH_DATE = "PD", e.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_COUNTRY_ID = "CY", e.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_COUNTRY_NAME = "PC", e.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_RANKING = "PE", e.DCAPIPARTICIPANTINDEXES_TEAM_INFO = "PR", e.DCAPIPARTICIPANTINDEXES_TEAM_INFO_DELETED = "PRD", e.DETAILCOMMONTABSINDEXES_BROADCASTING = "TV", e.DETAILCOMMONTABSINDEXES_CURRENT_GAME_SUMMARY = "MHS", e.DETAILCOMMONTABSINDEXES_CURRENT_GAME_SUMMARY_NEW = "MHSN", e.DETAILCOMMONTABSINDEXES_DRAW = "DR", e.DETAILCOMMONTABSINDEXES_FALL_OF_WICKETS = "FOW", e.DETAILCOMMONTABSINDEXES_HEAD_TO_HEAD = "HH", e.DETAILCOMMONTABSINDEXES_HIGHLIGHTS = "HI", e.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_ANY_AVAILABLE = "HIN", e.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_OFFICIAL_AVAILABLE = "HIO", e.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_TOP_AVAILABLE = "HIT", e.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_TOP_OFFICIAL_AVAILABLE = "HITO", e.DETAILCOMMONTABSINDEXES_LINEUPS = "LI", e.DETAILCOMMONTABSINDEXES_LIVE_COMMENTS = "LC", e.DETAILCOMMONTABSINDEXES_LIVE_COMMENTS_NEW = "LCN", e.DETAILCOMMONTABSINDEXES_LIVE_TABLE = "LT", e.DETAILCOMMONTABSINDEXES_MATCH_COMMENTS = "MC", e.DETAILCOMMONTABSINDEXES_MATCH_HISTORY = "MH", e.DETAILCOMMONTABSINDEXES_MATCH_HISTORY_NEW = "MHN", e.DETAILCOMMONTABSINDEXES_NEWS_FEED = "NF", e.DETAILCOMMONTABSINDEXES_ODDS = "OD", e.DETAILCOMMONTABSINDEXES_OVERS = "OV", e.DETAILCOMMONTABSINDEXES_PHOTO_REPORT = "PR", e.DETAILCOMMONTABSINDEXES_PITCHERS = "PI", e.DETAILCOMMONTABSINDEXES_PLAYER_STATISTICS = "PS", e.DETAILCOMMONTABSINDEXES_PLAYER_STATISTICS_NEW = "PSN", e.DETAILCOMMONTABSINDEXES_SCRATCHES = "SCR", e.DETAILCOMMONTABSINDEXES_STANDINGS = "TA", e.DETAILCOMMONTABSINDEXES_STATISTICS = "ST", e.DETAILCOMMONTABSINDEXES_STATISTICS_NEW = "STN", e.DETAILCOMMONTABSINDEXES_TOP_SCORERS = "TS", e.DETAILHASHINDEXES_ALL_RESULTS_HASH = "CD", e.DETAILHASHINDEXES_COMMON_HASH = "CA", e.DETAILHASHINDEXES_DRAW_HASH = "CM", e.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH = "FOW", e.DETAILHASHINDEXES_INCIDENT_STATISTICS_HASH = "CE", e.DETAILHASHINDEXES_LINEUP_HASH = "CG", e.DETAILHASHINDEXES_LIVE_ODDS_HASH = "CN", e.DETAILHASHINDEXES_MATCH_COMMENT_HASH = "CV", e.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH = "CL", e.DETAILHASHINDEXES_MATCH_HISTORY_HASH = "CJ", e.DETAILHASHINDEXES_MISSING_PLAYERS_HASH = "MP", e.DETAILHASHINDEXES_NEWSFEED_HASH = "NF", e.DETAILHASHINDEXES_NEW_COMMENT_HASH = "CU", e.DETAILHASHINDEXES_OVERS_HASH = "OV", e.DETAILHASHINDEXES_PITCHER_STATISTICS_HASH = "PI", e.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH = "CZ", e.DETAILHASHINDEXES_PROPERTIES_HASH = "CH", e.DETAILHASHINDEXES_SETTINGS_HASH = "CS", e.DETAILHASHINDEXES_STANDINGS_HASH = "CI", e.DETAILHASHINDEXES_STATIC_COMMENT_HASH = "CF", e.DETAILHASHINDEXES_STATS_MATCH_HISTORY_HASH = "CJS", e.DETAILHASHINDEXES_STATS_STATISTICS_HASH = "CES", e.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH = "CEP", e.DETAILHASHINDEXES_TV_STREAM_HASH = "TVS", e.FALLOFWICKETSINDEXES_BALLS_AND_OVERS = "FOF", e.FALLOFWICKETSINDEXES_BATSMAN_COUNTRY_ID = "FOC", e.FALLOFWICKETSINDEXES_BATSMAN_NAME = "FOB", e.FALLOFWICKETSINDEXES_SCORE = "FOE", e.FALLOFWICKETSINDEXES_STATUS = "FOD", e.FALLOFWICKETSINDEXES_TAB_TITLE = "FOA", e.FEEDSEPARATORSINDEXES_CELL = "Â¬", e.FEEDSEPARATORSINDEXES_INDEX = "Ã·", e.FEEDSEPARATORSINDEXES_INNER_FEED_CELL = "â", e.FEEDSEPARATORSINDEXES_INNER_FEED_INDEX = "â", e.FEEDSEPARATORSINDEXES_INNER_FEED_ROW = "â¾", e.FEEDSEPARATORSINDEXES_ROW = "~", e.FSCORE_CODEBOOKINDEXES_CRICKET_SENTENCES_STR = "SH", e.FSCORE_CODEBOOKINDEXES_CRICKET_SENTENCE_PARTS_STR = "SI", e.FSCORE_DRAWINDEXES_AWAY_PARTICIPANT_ID = "EA", e.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_ID = "AP", e.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_INFO = "AI", e.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_RESULT = "RT", e.FSCORE_DRAWINDEXES_HOME_PARTICIPANT_ID = "EH", e.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_ID = "HP", e.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_INFO = "HI", e.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_RESULT = "RE", e.FSCORE_DRAWINDEXES_IMAGE_PARTICIPANT_ID = "IPI", e.FSCORE_DRAWINDEXES_IMAGE_PARTICIPANT_URL = "IPU", e.FSCORE_DRAWINDEXES_IMAGE_URL = "DI", e.FSCORE_DRAWINDEXES_PARTICIPANTS = "PA", e.FSCORE_DRAWINDEXES_PARTICIPANTS_IDS = "PID", e.FSCORE_DRAWINDEXES_PARTICIPANTS_SHORT_NAMES = "PS", e.FSCORE_DRAWINDEXES_ROUNDS = "RN", e.FSCORE_DRAWINDEXES_ROUND_ADVANCING_PARTICIPANT = "AE", e.FSCORE_DRAWINDEXES_ROUND_EVENT_INFO = "RQ", e.FSCORE_DRAWINDEXES_ROUND_ID = "RI", e.FSCORE_DRAWINDEXES_ROUND_PAIR_MATCHES = "RK", e.FSCORE_DRAWINDEXES_ROUND_PARENT_ID = "RP", e.FSCORE_DRAWINDEXES_UPCOMING_DRAW_START_TIME = "US", e.FSCORE_GOLFPARTINDEXES_IS_GOLF_PLAY_OFF = "GP", e.FSCORE_GOLFPARTINDEXES_IS_GOLF_STABLEFORD = "ZT", e.FSCORE_GOLFPARTINDEXES_PAR = "ZQ", e.FSCORE_GOLFPARTINDEXES_PRIZE_MONEY = "ZP", e.FSCORE_HORSERACINGINDEXES_STAGE_START_TIME = "ZVR", e.FSCORE_HORSERACINGINDEXES_STAGE_TABS = "ZV", e.FSCORE_MEETINGINDEXES_MEETING_END = "MTE", e.FSCORE_MEETINGINDEXES_MEETING_ID = "MID", e.FSCORE_MEETINGINDEXES_MEETING_NAME = "MNM", e.FSCORE_MEETINGINDEXES_MEETING_START = "MTS", e.FSCORE_NODUELINDEXES_IS_DUEL = "ZW", e.FSCORE_NODUELINDEXES_NO_DUEL_EVENT_ID = "ZZ", e.FSCORE_NODUELINDEXES_STAGE_INFO = "ZN", e.FSCORE_NODUELSTAGEINDEXES_STAGE_IS_MAIN = "ZSM", e.FSCORE_NODUELSTAGEINDEXES_STAGE_STATUS_ID = "ZSS", e.FSCORE_NODUELSTAGEINDEXES_STAGE_STATUS_TYPE_ID = "ZST", e.FSCORE_ONCOURSETRACKINDEXES_EVENT_STAGE_ID = "OAA", e.FSCORE_ONCOURSETRACKINDEXES_VALUE = "OAB", e.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TOURNAMENT_ID = "TRB", e.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TOURNAMENT_STAGE_ID = "TRC", e.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TYPE = "TRA", e.FSCORE_PARTICIPANTINFOINDEXES_AVAILABLE_TABS = "TAB", e.FSCORE_PARTICIPANTINFOINDEXES_BIRTHDAY_TIME = "PAI", e.FSCORE_PARTICIPANTINFOINDEXES_COUNTRY_ID = "PAD", e.FSCORE_PARTICIPANTINFOINDEXES_COUNTRY_NAME = "PAM", e.FSCORE_PARTICIPANTINFOINDEXES_DEATH_TIME = "DEA", e.FSCORE_PARTICIPANTINFOINDEXES_GENDER_ID = "PAC", e.FSCORE_PARTICIPANTINFOINDEXES_ID = "PAA", e.FSCORE_PARTICIPANTINFOINDEXES_IMAGE_MOBILE_PATH = "PAF", e.FSCORE_PARTICIPANTINFOINDEXES_IMAGE_TABLE_PATH = "PAG", e.FSCORE_PARTICIPANTINFOINDEXES_LAYOUT = "PAL", e.FSCORE_PARTICIPANTINFOINDEXES_NAME = "PAH", e.FSCORE_PARTICIPANTINFOINDEXES_PARENT_NAME = "PAK", e.FSCORE_PARTICIPANTINFOINDEXES_PARTICIPANT_TYPE_ID = "PAJ", e.FSCORE_PARTICIPANTINFOINDEXES_PARTICIPANT_TYPE_NAME = "PAO", e.FSCORE_PARTICIPANTINFOINDEXES_RANK_TEXT = "PAN", e.FSCORE_PARTICIPANTINFOINDEXES_SHORT_NAME = "PAB", e.FSCORE_PARTICIPANTINFOINDEXES_SPORT_ID = "PAE", e.FSCORE_PARTICIPANTINFOINDEXES_TEAM_ID = "TID", e.FSCORE_PARTICIPANTINFOINDEXES_TEAM_IMAGE = "TIM", e.FSCORE_PARTICIPANTINFOINDEXES_TEAM_NAME = "TIN", e.FSCORE_PARTICIPANTINFOINDEXES_TEAM_PARTICIPANT_TYPE = "TPT", e.FSCORE_PITCHERINDEXES_PITCHER_LOSSES = "PIL", e.FSCORE_PITCHERINDEXES_PITCHER_NAME = "PIN", e.FSCORE_PITCHERINDEXES_PITCHER_TYPE = "PIT", e.FSCORE_PITCHERINDEXES_PITCHER_WINS = "PIW", e.FSCORE_STAGEINDEXES_BROADCASTS = "TA", e.FSCORE_TABLEDATAINDEXES_NODE_END = "TE", e.FSCORE_TABLEDATAINDEXES_NODE_ID = "ID", e.FSCORE_TABLEDATAINDEXES_NODE_START = "TS", e.FSCORE_TABLEDATAINDEXES_OPTIONAL_TYPE = "OPT", e.FSCORE_TABLEDATAINDEXES_PROPERTY_TYPE = "PT", e.FSCORE_TABLEDATAINDEXES_PROPERTY_VALUE = "PV", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_ACTIVE_DRAW_LEVEL = "OAK", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_COUNTRY_ID = "OAD", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_COUNTRY_NAME = "OAE", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_IMAGE_URL = "OAJ", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_LEAGUE_NAME = "OAF", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_SEASON_ID = "OAG", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_STANDINGS_TYPE = "OAC", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_TEMPLATE_ID = "OAH", e.FSCORE_TOURNAMENTSTAGEINFOINDEXES_TOURNAMENT_ID = "OAI", e.FULLFEEDINDEXES_AGE = "NN", e.FULLFEEDINDEXES_ANDROID_VERSION_STR = "VA", e.FULLFEEDINDEXES_APP_STORE_VERSION = "VJ", e.FULLFEEDINDEXES_AWAY_3CHAR_NAME = "WN", e.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING = "FE", e.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING = "FF", e.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING = "DP", e.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING = "DR", e.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_FIRST_INNING = "DL", e.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_SECOND_INNING = "DN", e.FULLFEEDINDEXES_AWAY_EVENT_PARTICIPANT_ID = "JB", e.FULLFEEDINDEXES_AWAY_PARTICIPANT_COUNTRY_ID = "CB", e.FULLFEEDINDEXES_AWAY_PARTICIPANT_IDS = "PY", e.FULLFEEDINDEXES_AWAY_PARTICIPANT_NAME = "AF", e.FULLFEEDINDEXES_AWAY_PARTICIPANT_NAME_URL = "WV", e.FULLFEEDINDEXES_AWAY_PARTICIPANT_TYPE = "APT", e.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_1 = "DB", e.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_2 = "DD", e.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3 = "DF", e.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4 = "DH", e.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_5 = "DJ", e.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_FIRST_HALF = "BT", e.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_PENALTIES = "FB", e.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_SECOND_HALF = "BV", e.FULLFEEDINDEXES_AWAY_TEAM_LOGO = "OB", e.FULLFEEDINDEXES_AWAY_TENNIS_GAME = "WB", e.FULLFEEDINDEXES_BANNED_LEAGUES_STR = "VK", e.FULLFEEDINDEXES_BEST_OF_FRAMES = "WD", e.FULLFEEDINDEXES_BOOKMAKER_LIST_LIVE_IN_OFFER = "MW", e.FULLFEEDINDEXES_CATEGORY_CAPTION = "ZAF", e.FULLFEEDINDEXES_CRICKET_VISIBLE_RUN_RATE = "RW", e.FULLFEEDINDEXES_DATACORE_TRANSLATES = "DT", e.FULLFEEDINDEXES_EVENT_LIST_LAYOUT_TYPE = "ELT", e.FULLFEEDINDEXES_EVENT_STAGE_TIME = "CK", e.FULLFEEDINDEXES_EVENT_START_UTIME = "ADE", e.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START = "QB", e.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START_AND_END_TIME = "QC", e.FULLFEEDINDEXES_HAS_LIVE_BETTING = "AN", e.FULLFEEDINDEXES_HAS_MATCH_COMMENTS = "HMC", e.FULLFEEDINDEXES_HOME_3CHAR_NAME = "WM", e.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING = "FC", e.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING = "FD", e.FULLFEEDINDEXES_HOME_CRICKET_OVERS_FIRST_INNING = "DO", e.FULLFEEDINDEXES_HOME_CRICKET_OVERS_SECOND_INNING = "DQ", e.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_FIRST_INNING = "DK", e.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_SECOND_INNING = "DM", e.FULLFEEDINDEXES_HOME_EVENT_PARTICIPANT_ID = "JA", e.FULLFEEDINDEXES_HOME_PARTICIPANT_COUNTRY_ID = "CA", e.FULLFEEDINDEXES_HOME_PARTICIPANT_IDS = "PX", e.FULLFEEDINDEXES_HOME_PARTICIPANT_NAME = "AE", e.FULLFEEDINDEXES_HOME_PARTICIPANT_NAME_URL = "WU", e.FULLFEEDINDEXES_HOME_PARTICIPANT_TYPE = "HPT", e.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_1 = "DA", e.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_2 = "DC", e.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3 = "DE", e.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4 = "DG", e.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_5 = "DI", e.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_FIRST_HALF = "BS", e.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_PENALTIES = "FA", e.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_SECOND_HALF = "BU", e.FULLFEEDINDEXES_HOME_TEAM_LOGO = "OA", e.FULLFEEDINDEXES_HOME_TENNIS_GAME = "WA", e.FULLFEEDINDEXES_IOS_VERSION_STR = "VI", e.FULLFEEDINDEXES_IS_NATIONAL_EVENT = "GN", e.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_1 = "ZAA", e.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_2 = "ZAB", e.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_STAGE_NAME = "ZAE", e.FULLFEEDINDEXES_MOVED_EVENTS_ID = "QA", e.FULLFEEDINDEXES_NO_DUEL_REMOVED_PARTICIPANT = "QD", e.FULLFEEDINDEXES_ODDS_WINNING_OUTCOMES = "CS", e.FULLFEEDINDEXES_PARTICIPANT_COUNTRY = "CC", e.FULLFEEDINDEXES_PARTICIPANT_COUNTRY_IDS = "CY", e.FULLFEEDINDEXES_PAST_FUTURE_GAMES = "FG", e.FULLFEEDINDEXES_PAST_FUTURE_GAMES_NEW_PORTABLE = "FGN", e.FULLFEEDINDEXES_PLAYING_ON_SETS = "WL", e.FULLFEEDINDEXES_RANKING_LINK_ID = "ZRA", e.FULLFEEDINDEXES_RANKING_LINK_NAME = "ZRB", e.FULLFEEDINDEXES_SHOW_IN_MY_TEAMS_ON_PORTABLE = "ES", e.FULLFEEDINDEXES_SORT_PARTICIPANT = "CX", e.FULLFEEDINDEXES_STAGE_EVENT_STAGE_ID = "ZAD", e.FULLFEEDINDEXES_STAGE_SORT_KEY = "SX", e.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS = "WE", e.FULLFEEDINDEXES_TEAM_3CHAR_NAME = "NB", e.FULLFEEDINDEXES_TEAM_NAME = "NA", e.FULLFEEDINDEXES_TOP_LEAGUES_STR = "SG", e.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ACRONYM = "ZAC", e.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ID = "ZEE", e.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_LOGO = "ZKL", e.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_NAME = "ZK", e.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_RAW_URL = "ZKU", e.FULLFEEDINDEXES_WINNER = "AS", e.GEORESTRICTIONSINDEXES_MESSAGE = "II", e.H2HINDEXES_AWAY_NAME = "KK", e.H2HINDEXES_COUNTRY_NAME = "KH", e.H2HINDEXES_CURRENT_RESULT = "KL", e.H2HINDEXES_DATA = "KO", e.H2HINDEXES_DATE = "KC", e.H2HINDEXES_ENCODED_ID = "KP", e.H2HINDEXES_EVENT_ACRONYM = "KI", e.H2HINDEXES_EVENT_NAME = "KF", e.H2HINDEXES_FLAG_ID = "KG", e.H2HINDEXES_FULLTIME_RESULT = "KM", e.H2HINDEXES_HEADER_NAME = "KB", e.H2HINDEXES_HOME_NAME = "KJ", e.H2HINDEXES_INCIDENT_RESULT = "KR", e.H2HINDEXES_SIDE_HIGHLIGHTED = "KS", e.H2HINDEXES_SURFACE_CODE = "KD", e.H2HINDEXES_SURFACE_NAME = "KE", e.H2HINDEXES_TAB_NAME = "KA", e.H2HINDEXES_WIN_OR_LOSE = "KN", e.HIGHLIGHTINDEXES_HIGHLIGHT_ENABLE_INTERVAL = "HEI", e.HIGHLIGHTINDEXES_HIGHLIGHT_FORCE_IFRAME = "HFI", e.HIGHLIGHTINDEXES_HIGHLIGHT_INCIDENT_TITLE = "HIN", e.HIGHLIGHTINDEXES_HIGHLIGHT_INCIDENT_TYPE = "HIT", e.HIGHLIGHTINDEXES_HIGHLIGHT_OPEN_IN_POPUP = "HPP", e.HIGHLIGHTINDEXES_HIGHLIGHT_RESTRICTION = "HRE", e.HIGHLIGHTINDEXES_HIGHLIGHT_RESULT = "HTR", e.HIGHLIGHTINDEXES_HIGHLIGHT_SUBTITLE1 = "HS1", e.HIGHLIGHTINDEXES_HIGHLIGHT_SUBTITLE2 = "HS2", e.HIGHLIGHTINDEXES_HIGHLIGHT_TIME = "HTM", e.HIGHLIGHTINDEXES_HIGHLIGHT_TITLE = "HTI", e.HIGHLIGHTINDEXES_HIGHLIGHT_URL = "HUR", e.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_ID = "HPI", e.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_INDEX = "HP", e.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_NAME = "HPN", e.LEAGUEINDEXES_CAPTION_SEASON_STAGE_ID = "ZU", e.LEAGUEINDEXES_COUNTRY_ID = "ZB", e.LEAGUEINDEXES_COUNTRY_NAME = "ZY", e.LEAGUEINDEXES_IS_SEVEN_RUGBY = "ZR", e.LEAGUEINDEXES_MEETING_ID = "QM", e.LEAGUEINDEXES_MEETING_NAME = "QMN", e.LEAGUEINDEXES_MEETING_TIME_END = "QME", e.LEAGUEINDEXES_MEETING_TIME_START = "QMS", e.LEAGUEINDEXES_RACE_TYPE = "ZM", e.LEAGUEINDEXES_SEASON_URL = "ZS", e.LEAGUEINDEXES_SORT_KEY = "ZX", e.LEAGUEINDEXES_SOURCE_TYPE = "ZF", e.LEAGUEINDEXES_STAGES_COUNT = "ZCC", e.LEAGUEINDEXES_STATS_TYPE = "ZG", e.LEAGUEINDEXES_SUPER_TEMPLATE_ID = "ZHS", e.LEAGUEINDEXES_TOURNAMENT_CATEGORY_ID = "TCI", e.LEAGUEINDEXES_TOURNAMENT_ID = "ZE", e.LEAGUEINDEXES_TOURNAMENT_ID_EVERYTIME = "ZEF", e.LEAGUEINDEXES_TOURNAMENT_STAGE_TYPE = "ZJ", e.LEAGUEINDEXES_TOURNAMENT_TEMPLATE_KEY = "ZH", e.LEAGUEINDEXES_TOURNAMENT_TEMPLATE_URL = "ZL", e.LEAGUEINDEXES_TOURNAMENT_TYPE = "ZD", e.LINEUPSINDEXES_FORMATION_LABEL = "LA", e.LINEUPSINDEXES_LINEUP_FORMATION = "LD", e.LINEUPSINDEXES_LINEUP_GROUP = "LB", e.LINEUPSINDEXES_LINEUP_GROUP_TYPE = "LGT", e.LINEUPSINDEXES_LINEUP_INCIDENT = "LII", e.LINEUPSINDEXES_LINEUP_INCIDENT_TOOLTIP = "LIT", e.LINEUPSINDEXES_LINEUP_INCIDENT_TYPE_NAME = "LIN", e.LINEUPSINDEXES_LINEUP_LINE = "LM", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_COUNTRY_ID = "LO", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_COUNTRY_NAME = "LQ", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_ID = "LP", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_NAME = "LI", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_NUMBER = "LJ", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_SPECIAL_POSITION_NAME = "LR", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_SPECIAL_POSITION_NAME_TOOLTIP = "LS", e.LINEUPSINDEXES_LINEUP_PARTICIPANT_SURNAME = "LN", e.LINEUPSINDEXES_LINEUP_PLAYER_TYPE = "LG", e.LINEUPSINDEXES_LINEUP_POSITION_ID = "LK", e.LINEUPSINDEXES_LINEUP_POSITION_KEY = "LL", e.LINEUPSINDEXES_LINEUP_ROW_INDEX = "LH", e.LINEUPSINDEXES_LINEUP_SIDE = "LC", e.LIVECOMMENTSINDEXES_HIGHLIGHT_IMAGE_RESOLUTION = "MG", e.LIVECOMMENTSINDEXES_HIGHLIGHT_IMAGE_URL = "MH", e.LIVECOMMENTSINDEXES_HIGHLIGHT_PROVIDER_NOTE = "MJ", e.LIVECOMMENTSINDEXES_HTML_CLASS = "MC", e.LIVECOMMENTSINDEXES_IS_BOLD = "ME", e.LIVECOMMENTSINDEXES_IS_IMPORTANT_BY_HTML_CLASS = "MF", e.LIVECOMMENTSINDEXES_TAB_NAME = "MA", e.LIVECOMMENTSINDEXES_TEXT = "MD", e.LIVECOMMENTSINDEXES_TIME = "MB", e.LOCALIZEKEYINDEXES_BOOKMAKER = "BI", e.LOCALIZEKEYINDEXES_BOOKMAKER_BETTING_TYPE_FOR_SPORT = "TS", e.LOCALIZEKEYINDEXES_BOOKMAKER_ID = "ID", e.LOCALIZEKEYINDEXES_BOOKMAKER_NAME = "NA", e.LOCALIZEKEYINDEXES_EVENT = "EL", e.LOCALIZEKEYINDEXES_EVENT_BROADCAST = "EB", e.LOCALIZEKEYINDEXES_EVENT_HIGHLIGTS = "EH", e.LOCALIZEKEYINDEXES_EVENT_MEETING_NAME = "MNA", e.LOCALIZEKEYINDEXES_EVENT_PARTICIPANT_SORT = "PS", e.LOCALIZEKEYINDEXES_EVENT_SORT_KEY = "ES", e.LOCALIZEKEYINDEXES_EVENT_SWAPPED_PARTICIPANTS = "EW", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_COUNTRY_NAME = "TP", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_NAME = "TN", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION = "TC", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION_PART_1 = "TK", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION_PART_2 = "TL", e.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_URL = "TU", e.LOCALIZEKEYINDEXES_ODDS = "ODQ", e.LOCALIZEKEYINDEXES_ODDS_PART = "OP", e.LOCALIZEKEYINDEXES_ODDS_PART_ODDS = "OD", e.LOCALIZEKEYINDEXES_ODDS_PART_ODDS_BOOKMAKER_INFO = "ODI", e.LOCALIZEKEYINDEXES_PARTICIPANT = "PD", e.LOCALIZEKEYINDEXES_PARTICIPANT_EVENTS_CLASS_LOCALIZED_VAR = "LV", e.LOCALIZEKEYINDEXES_PARTICIPANT_NAME = "FN", e.LOCALIZEKEYINDEXES_PARTICIPANT_NAME_URL = "NU", e.LOCALIZEKEYINDEXES_PARTICIPANT_NAME_WITHOUT_COUNTRY = "FNWC", e.LOCALIZEKEYINDEXES_PARTICIPANT_PARENT_NAME = "PN", e.LOCALIZEKEYINDEXES_PARTICIPANT_PARENT_THREE_CHAR_NAME = "PSN", e.LOCALIZEKEYINDEXES_PARTICIPANT_SHORT_NAME = "SN", e.LOCALIZEKEYINDEXES_PARTICIPANT_SURNAME = "SUN", e.LOCALIZEKEYINDEXES_STAGE_EVENT = "SL", e.LOCALIZEKEYINDEXES_TV_ID = "TVI", e.MATCHCOUNTINDEXES_IS_MAJORITY_SPORT = "SM", e.MATCHCOUNTINDEXES_LIVE_MATCH_COUNT = "LC", e.MATCHCOUNTINDEXES_MATCH_COUNT = "EC", e.MATCHCOUNTINDEXES_SPORT_ID_FOR_EXTENDED_INFO = "SAA", e.MATCHCOUNTINDEXES_SPORT_SORT = "SAS", e.MATCHHISTORYINDEXES_AWAY_AHEAD = "HJ", e.MATCHHISTORYINDEXES_AWAY_SCORE = "HE", e.MATCHHISTORYINDEXES_AWAY_TIEBREAK_SCORE = "HF", e.MATCHHISTORYINDEXES_FIFTEENS_CONTENT = "HL", e.MATCHHISTORYINDEXES_FIFTEENS_CONTENT_CURRENT_GAME = "HO", e.MATCHHISTORYINDEXES_HEADER_NAME = "HB", e.MATCHHISTORYINDEXES_HOME_AHEAD = "HI", e.MATCHHISTORYINDEXES_HOME_SCORE = "HC", e.MATCHHISTORYINDEXES_HOME_TIEBREAK_SCORE = "HD", e.MATCHHISTORYINDEXES_LOST_SERVE = "HH", e.MATCHHISTORYINDEXES_SERVING = "HG", e.MATCHHISTORYINDEXES_SERVING_CURRENT_GAME = "HN", e.MATCHHISTORYINDEXES_TAB_NAME = "HA", e.MATCHHISTORYINDEXES_TIEBREAK_BALL_TYPE_ID_FOR_PLAYER = "HM", e.MATCHHISTORYINDEXES_WINNER = "HK", e.MATCHINFO_INDEXES_ATTENDANCE = "ATT", e.MATCHINFO_INDEXES_REFEREE_COUNTRY = "RCO", e.MATCHINFO_INDEXES_REFEREE_COUNTRY_CODE = "RCC", e.MATCHINFO_INDEXES_REFEREE_NAME = "REF", e.MATCHINFO_INDEXES_VENUE = "VEN", e.MENUINDEXES_COUNTRY_ID = "MC", e.MENUINDEXES_COUNTRY_URL = "ML", e.MENUINDEXES_TOURNAMENT_TEMPLATE_LEAGUE_KEY = "MT", e.MENUINDEXES_TOURNAMENT_TEMPLATE_NAME = "MN", e.MENUINDEXES_TOURNAMENT_TEMPLATE_SHORT_URL = "MV", e.MENUINDEXES_TOURNAMENT_TEMPLATE_URL = "MU", e.MYTEAMSEVENTSINDEXES_PARTICIPANT_ENCODED_ID = "PI", e.NEWSFEEDINDEXES_CATEGORY = "CAT", e.NEWSFEEDINDEXES_CATEGORY_ID = "CI", e.NEWSFEEDINDEXES_COLUMN_PARTICIPANT = "PLA", e.NEWSFEEDINDEXES_IMAGE_URL = "IU", e.NEWSFEEDINDEXES_LINK = "LI", e.NEWSFEEDINDEXES_NAME = "NA", e.NEWSFEEDINDEXES_PARTICIPANT_ID = "PID", e.NEWSFEEDINDEXES_PARTICIPANT_IMAGE = "PI", e.NEWSFEEDINDEXES_PARTICIPANT_IS_WINNER = "PW", e.NEWSFEEDINDEXES_PARTICIPANT_NAME = "PN", e.NEWSFEEDINDEXES_PARTICIPANT_SHORTNAME = "PSN", e.NEWSFEEDINDEXES_PARTICIPANT_SIDE = "PS", e.NEWSFEEDINDEXES_PARTICIPANT_TYPE = "PT", e.NEWSFEEDINDEXES_PEREX = "PE", e.NEWSFEEDINDEXES_PUBLISHED = "PU", e.NEWSFEEDINDEXES_TITLE = "TL", e.NEWSFEEDPORTABLEINDEXES_AWAY_SCORE = "AS", e.NEWSFEEDPORTABLEINDEXES_CATEGORY = "CAT", e.NEWSFEEDPORTABLEINDEXES_EVENT_STAGE_ID = "ESI", e.NEWSFEEDPORTABLEINDEXES_EVENT_START = "ES", e.NEWSFEEDPORTABLEINDEXES_FEED_TYPE_ID = "FTI", e.NEWSFEEDPORTABLEINDEXES_FINAL_SCORE = "FS", e.NEWSFEEDPORTABLEINDEXES_HOME_SCORE = "HS", e.NEWSFEEDPORTABLEINDEXES_ID = "ID", e.NEWSFEEDPORTABLEINDEXES_IMAGE_VARIANT_ID = "IVI", e.NEWSFEEDPORTABLEINDEXES_IMAGE_VARIANT_URL = "IVU", e.NEWSFEEDPORTABLEINDEXES_LINK = "LINK", e.NEWSFEEDPORTABLEINDEXES_PROVIDER_NAME = "PNAME", e.NEWSFEEDPORTABLEINDEXES_PUBLISHED = "PUB", e.NEWSFEEDPORTABLEINDEXES_TITLE = "TITLE", e.ODDSINDEXES_BETTING_TYPE = "OA", e.ODDSINDEXES_BETTING_TYPE_ID = "OAI", e.ODDSINDEXES_BETTING_TYPE_URL = "OAU", e.ODDSINDEXES_BONUS_TEXTS_LONG = "MY", e.ODDSINDEXES_BONUS_TEXTS_SHORT = "MZ", e.ODDSINDEXES_BOOKMAKER_ID = "ODA", e.ODDSINDEXES_DETAIL_BETTING_TYPE = "SB", e.ODDSINDEXES_DETAIL_BONUS = "MO", e.ODDSINDEXES_DETAIL_BONUS_LIMIT = "OO", e.ODDSINDEXES_DETAIL_BOOKMAKER_ID = "SC", e.ODDSINDEXES_DETAIL_BOOKMAKER_NAME = "SD", e.ODDSINDEXES_DETAIL_BROADCASTS = "AL", e.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_ID = "OE", e.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IMAGE_URL = "OPI", e.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IS_PREMIUM = "BIP", e.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_NAME = "OD", e.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_SHOW_TEXT_NOT_LOGO = "OPN", e.ODDSINDEXES_EACH_WAY_HANDICAP = "XI", e.ODDSINDEXES_HANDICAP = "XH", e.ODDSINDEXES_HAS_ODDS_COMPARISON = "AY", e.ODDSINDEXES_INACTIVE_ODDS = "XX", e.ODDSINDEXES_INFO_BOOKMAKER_BETTING_TYPE = "AAB", e.ODDSINDEXES_INFO_BOOKMAKER_ID = "AAA", e.ODDSINDEXES_INFO_BOOKMAKER_NAME = "AAD", e.ODDSINDEXES_LIVE_BETTING_STRIP_TEXT = "OH", e.ODDSINDEXES_LIVE_BETTING_STRIP_URL = "OG", e.ODDSINDEXES_LIVE_HANDICAP_TYPE = "OHT", e.ODDSINDEXES_LIVE_HANDICAP_VALUE = "OHV", e.ODDSINDEXES_LIVE_IN_OFFER_BOOKMAKER_ID = "ODE", e.ODDSINDEXES_LIVE_IN_OFFER_STATUS = "ODF", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_BONUS_ID = "OOB", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_ID = "OQ", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_IMAGE_URL = "OPI", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LINK_HTML = "ON", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LIVE_IN_OFFER_ACTIVE = "OOA", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LIVE_IN_OFFER_NAME = "OON", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_SHOW_TEXT_NOT_LOGO = "ONN", e.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_URL = "OP", e.ODDSINDEXES_LIVE_ODDS_ACTIVE = "OK", e.ODDSINDEXES_LIVE_ODDS_BETSLIP = "OR", e.ODDSINDEXES_LIVE_ODDS_MOVEMENTS = "OL", e.ODDSINDEXES_LIVE_ODDS_PREVIOUS_VALUES = "OJ", e.ODDSINDEXES_LIVE_ODDS_VALUES = "OI", e.ODDSINDEXES_LIVE_ODDS_WRAPPER_CLASSES = "OM", e.ODDSINDEXES_MAIN_BOOKMAKER_ID = "MX", e.ODDSINDEXES_ODDS_0 = "XB", e.ODDSINDEXES_ODDS_02 = "XE", e.ODDSINDEXES_ODDS_02_PREVIOUS = "YE", e.ODDSINDEXES_ODDS_0_PREVIOUS = "YB", e.ODDSINDEXES_ODDS_1 = "XA", e.ODDSINDEXES_ODDS_10 = "XD", e.ODDSINDEXES_ODDS_10_PREVIOUS = "YD", e.ODDSINDEXES_ODDS_1_PREVIOUS = "YA", e.ODDSINDEXES_ODDS_2 = "XC", e.ODDSINDEXES_ODDS_2_PREVIOUS = "YC", e.ODDSINDEXES_ODDS_AH1 = "XF", e.ODDSINDEXES_ODDS_AH1_PREVIOUS = "YF", e.ODDSINDEXES_ODDS_AH2 = "XG", e.ODDSINDEXES_ODDS_AH2_PREVIOUS = "YG", e.ODDSINDEXES_ODDS_AVAILABLE = "OG", e.ODDSINDEXES_ODDS_EACH_WAY = "XB", e.ODDSINDEXES_ODDS_EACH_WAY_PREVIOUS = "YB", e.ODDSINDEXES_ODDS_GROUP_TITLE = "OCT", e.ODDSINDEXES_ODDS_GROUP_VALUE = "OC", e.ODDSINDEXES_ODDS_LABEL_1 = "LX", e.ODDSINDEXES_ODDS_LABEL_2 = "LY", e.ODDSINDEXES_ODDS_LABEL_3 = "LZ", e.ODDSINDEXES_ODDS_ML1 = "XL", e.ODDSINDEXES_ODDS_ML1_PREVIOUS = "YL", e.ODDSINDEXES_ODDS_ML2 = "XM", e.ODDSINDEXES_ODDS_ML2_PREVIOUS = "YM", e.ODDSINDEXES_ODDS_OU1 = "XI", e.ODDSINDEXES_ODDS_OU1_PREVIOUS = "YI", e.ODDSINDEXES_ODDS_OU2 = "XJ", e.ODDSINDEXES_ODDS_OU2_PREVIOUS = "YJ", e.ODDSINDEXES_ODDS_SCOPE = "OB", e.ODDSINDEXES_ODDS_SCOPE_ID = "OBI", e.ODDSINDEXES_ODDS_SCOPE_URL = "OBU", e.ODDSINDEXES_ODDS_SETTINGS_ALLOW_ODD_HIGHLIGHTING = "AOH", e.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_COMPARISON = "SAC", e.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH = "SAP", e.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH_LIVE = "SAL", e.ODDSINDEXES_ODDS_TOP_10 = "XC", e.ODDSINDEXES_ODDS_TOP_10_PREVIOUS = "YC", e.ODDSINDEXES_ODDS_TOP_20 = "XN", e.ODDSINDEXES_ODDS_TOP_20_PREVIOUS = "YN", e.ODDSINDEXES_ODDS_TOP_3 = "XO", e.ODDSINDEXES_ODDS_TOP_3_PREVIOUS = "YO", e.ODDSINDEXES_ODDS_TOP_5 = "XB", e.ODDSINDEXES_ODDS_TOP_5_PREVIOUS = "YB", e.ODDSINDEXES_ODDS_TOP_6 = "XP", e.ODDSINDEXES_ODDS_TOP_6_PREVIOUS = "YP", e.ODDSINDEXES_ODDS_TO_WIN = "XA", e.ODDSINDEXES_ODDS_TO_WIN_PREVIOUS = "YA", e.ODDSINDEXES_ODDS_WINNER = "XA", e.ODDSINDEXES_ODDS_WINNER_PREVIOUS = "YA", e.ODDSINDEXES_OUTCOME_CHANGE = "ODD", e.ODDSINDEXES_OUTCOME_IS_AVAILABLE = "ODC", e.ODDSINDEXES_OUTCOME_VALUE = "ODB", e.ODDSINDEXES_OVER_UNDER_HANDICAP = "XK", e.ODDSINDEXES_PREMATCH_HANDICAP_TYPE = "MHT", e.ODDSINDEXES_PREMATCH_HANDICAP_VALUE = "MHV", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_BONUS_ID = "MOB", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_IMAGE_URL = "MPI", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LINK_HTML = "MN", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LIVE_IN_OFFER_ACTIVE = "MOA", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LIVE_IN_OFFER_NAME = "MON", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_SHOW_TEXT_NOT_LOGO = "MNN", e.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_URL = "MP", e.ODDSINDEXES_PREMATCH_ODDS_ACTIVE = "MK", e.ODDSINDEXES_PREMATCH_ODDS_BETSLIP = "MG", e.ODDSINDEXES_PREMATCH_ODDS_MOVEMENTS = "ML", e.ODDSINDEXES_PREMATCH_ODDS_PREVIOUS_VALUES = "MJ", e.ODDSINDEXES_PREMATCH_ODDS_VALUES = "MI", e.ODDSINDEXES_PREMATCH_ODDS_WRAPPER_CLASSES = "MM", e.ODDSINDEXES_SELECTED_BETTING_TYPE = "SOA", e.ODDSINDEXES_SELECTED_ODDS_SCOPE = "SOB", e.ODDSINDEXES_TEXT_BEHIND_ODDS = "OF", e.ONCOURSETRACKINDEXES_EVENT_STAGE_ID = "OAA", e.ONCOURSETRACKINDEXES_VALUE = "OAB", e.PARTICIPANTEVENTLISTINDEXES_END_TIME = "YY", e.PARTICIPANTEVENTLISTINDEXES_MYTEAMS_ID = "YW", e.PARTICIPANTEVENTLISTINDEXES_STAGE_ID = "YZ", e.PARTICIPANTEVENTLISTINDEXES_START_TIME = "YX", e.PLAYERPROFILEINDEXES_EVENT_ID = "EID", e.PLAYERPROFILEINDEXES_EVENT_START_TIME = "ES", e.PLAYERPROFILEINDEXES_IMAGE_ID = "IH", e.PLAYERPROFILEINDEXES_SCORE = "SH", e.PLAYERPROFILEINDEXES_SCORE_FT = "SFH", e.PLAYERPROFILEINDEXES_SEASON_LABEL = "PAC", e.PLAYERPROFILEINDEXES_TAB_ID = "PAA", e.PLAYERPROFILEINDEXES_TAB_LABEL = "PAB", e.PLAYERPROFILEINDEXES_TAB_TYPE = "PAP", e.PLAYERPROFILEINDEXES_TEAM_ID = "PAQ", e.PLAYERPROFILEINDEXES_TEAM_ID_AWAY = "PAO", e.PLAYERPROFILEINDEXES_TEAM_ID_HOME = "PAN", e.PLAYERPROFILEINDEXES_TEAM_IMAGE_URL = "PAE", e.PLAYERPROFILEINDEXES_TEAM_NAME = "PAD", e.PLAYERPROFILEINDEXES_TEAM_TRANSFER_FROM_ID = "PAL", e.PLAYERPROFILEINDEXES_TEAM_TRANSFER_TO_ID = "PAM", e.PLAYERPROFILEINDEXES_TOURNAMENT_FLAG_ID = "PAG", e.PLAYERPROFILEINDEXES_TOURNAMENT_NAME = "PAF", e.PLAYERPROFILEINDEXES_TRANSFER_REASON = "PAJ", e.PLAYERPROFILEINDEXES_TRANSFER_YEAR = "PAK", e.PLAYERPROFILEINDEXES_VALUE = "PAI", e.PLAYERPROFILEINDEXES_VALUE_TYPE = "PAH", e.PLAYERPROFILEINDEXES_WINNER = "WIN", e.PLAYERPROFILEINDEXES_WINNER_FT = "WF", e.PLAYERPROFILEINDEXES_WINNER_ICON_SUFFIX = "WIS", e.PLAYERSTATSINDEXES_HEADER_ROW = "PB", e.PLAYERSTATSINDEXES_ROW = "PC", e.PLAYERSTATSINDEXES_ROW_FORMAT = "PD", e.PLAYERSTATSINDEXES_ROW_ICON = "PE", e.PLAYERSTATSINDEXES_ROW_STATUS = "PS", e.PLAYERSTATSINDEXES_TAB_LABEL = "PA", e.PORTABLECONFIGINDEXES_DATA_FOR_FEED = "CD", e.PORTABLECONFIGINDEXES_MAX_SDK_VERSION = "CSA", e.PORTABLECONFIGINDEXES_MAX_VERSION = "CA", e.PORTABLECONFIGINDEXES_MIN_SDK_VERSION = "CSI", e.PORTABLECONFIGINDEXES_MIN_VERSION = "CI", e.PORTABLECONFIGINDEXES_PACKAGE = "CP", e.PORTABLECONFIGINDEXES_TYPE = "CT", e.RANKINGINDEXES_RANKING_NAME = "RAN", e.RANKINGINDEXES_RANKING_STATS_TABLE = "RST", e.RANKINGSFEEDINDEXES_DATE = "RRC", e.RANKINGSFEEDINDEXES_NAME = "RRN", e.RANKINGSFEEDINDEXES_PARTICIPANT_ID = "RPI", e.RANKINGSFEEDINDEXES_PARTICIPANT_IMAGE = "RRI", e.RANKINGSFEEDINDEXES_PARTICIPANT_NAME = "RRP", e.RANKINGSFEEDINDEXES_PARTICIPANT_TYPE_ID = "RPT", e.RANKINGSFEEDINDEXES_RANK = "RRR", e.RANKINGSFEEDINDEXES_RESULT = "RRL", e.RANKINGSFEEDINDEXES_RESULT_LABEL = "RRB", e.RANKINGSFEEDINDEXES_TITLE = "RRT", e.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID = "RAC", e.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID_END = "RAD", e.RESULTSINDEXES_ROW_VALUE = "RAB", e.RESULTSINDEXES_ROW_VALUE_TYPE_ID = "RAA", e.RESULTSINDEXES_ROW_VALUE_UPDATED = "RAU", e.SEASONLISTINDEXES_NAME = "THN", e.SEASONLISTINDEXES_STATS_TYPE = "THT", e.SEASONLISTINDEXES_TOURNAMENT_ID = "THI", e.SEASONLISTINDEXES_TOURNAMENT_STAGE_ID = "THS", e.SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID = "DZ", e.SHAREDINDEXES_AUDIO_COMMENTS = "QQ", e.SHAREDINDEXES_AWAY_CRICKET_RUN_RATE = "RV", e.SHAREDINDEXES_AWAY_CURRENT_RESULT = "AH", e.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER = "BZ", e.SHAREDINDEXES_AWAY_ERRORS = "WI", e.SHAREDINDEXES_AWAY_FULL_TIME_RESULT = "AU", e.SHAREDINDEXES_AWAY_GOAL_UNDER_REVIEW = "GRB", e.SHAREDINDEXES_AWAY_HITS = "WG", e.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED = "IB", e.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND = "ID", e.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_SUB = "IF", e.SHAREDINDEXES_AWAY_PITCHER = "WP", e.SHAREDINDEXES_AWAY_RED_CARD_COUNT = "AK", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_1 = "BB", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_2 = "BD", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_3 = "BF", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_4 = "BH", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_5 = "BJ", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_6 = "BL", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_7 = "BN", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_8 = "BP", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_9 = "BR", e.SHAREDINDEXES_AWAY_RESULT_PERIOD_X = "BT", e.SHAREDINDEXES_BLOCKED_GEOIP_STREAMING = "BGS", e.SHAREDINDEXES_CRICKET_BATSMAN = "WJ", e.SHAREDINDEXES_CRICKET_BOWLER = "WK", e.SHAREDINDEXES_CRICKET_LIVE_SENTENCE = "LS", e.SHAREDINDEXES_CRICKET_RECENT_OVERS = "WQ", e.SHAREDINDEXES_CRICKET_SENTENCE = "AQ", e.SHAREDINDEXES_CRICKET_TYPE = "WX", e.SHAREDINDEXES_CURRENT_DISTANCE = "NJ", e.SHAREDINDEXES_CURRENT_LAP = "NJL", e.SHAREDINDEXES_DISTANCE = "NK", e.SHAREDINDEXES_EVENT_ID = "AA", e.SHAREDINDEXES_EVENT_ROUND_NAME = "ER", e.SHAREDINDEXES_EVENT_ROUND_NUMBER = "ERN", e.SHAREDINDEXES_EVENT_STAGE_ID = "AC", e.SHAREDINDEXES_EVENT_STAGE_TYPE_FROM_EVENT_STAGE_ID = "CR", e.SHAREDINDEXES_EVENT_STAGE_TYPE_ID = "AB", e.SHAREDINDEXES_FEED_SIGNATURE = "A1", e.SHAREDINDEXES_FINAL_SCORE = "DX", e.SHAREDINDEXES_GAME_TIME = "BX", e.SHAREDINDEXES_GAP = "NG", e.SHAREDINDEXES_GOLF_FINAL_RESULT = "GR", e.SHAREDINDEXES_GOLF_HOLE_RESULT = "GH", e.SHAREDINDEXES_GOLF_PAR_TODAY = "GI", e.SHAREDINDEXES_GOLF_TOTAL_HOLES_PLAYED = "GS", e.SHAREDINDEXES_GRID = "NE", e.SHAREDINDEXES_HAS_LINEUPS = "AX", e.SHAREDINDEXES_HAS_LIVE_CENTRE = "AW", e.SHAREDINDEXES_HIGHLIGHTS = "AV", e.SHAREDINDEXES_HOME_CRICKET_RUN_RATE = "RU", e.SHAREDINDEXES_HOME_CURRENT_RESULT = "AG", e.SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER = "BY", e.SHAREDINDEXES_HOME_ERRORS = "WH", e.SHAREDINDEXES_HOME_FULL_TIME_RESULT = "AT", e.SHAREDINDEXES_HOME_GOAL_UNDER_REVIEW = "GRA", e.SHAREDINDEXES_HOME_HITS = "WF", e.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED = "IA", e.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND = "IC", e.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_SUB = "IE", e.SHAREDINDEXES_HOME_PITCHER = "WO", e.SHAREDINDEXES_HOME_RED_CARD_COUNT = "AJ", e.SHAREDINDEXES_HOME_RESULT_PERIOD_1 = "BA", e.SHAREDINDEXES_HOME_RESULT_PERIOD_2 = "BC", e.SHAREDINDEXES_HOME_RESULT_PERIOD_3 = "BE", e.SHAREDINDEXES_HOME_RESULT_PERIOD_4 = "BG", e.SHAREDINDEXES_HOME_RESULT_PERIOD_5 = "BI", e.SHAREDINDEXES_HOME_RESULT_PERIOD_6 = "BK", e.SHAREDINDEXES_HOME_RESULT_PERIOD_7 = "BM", e.SHAREDINDEXES_HOME_RESULT_PERIOD_8 = "BO", e.SHAREDINDEXES_HOME_RESULT_PERIOD_9 = "BQ", e.SHAREDINDEXES_HOME_RESULT_PERIOD_X = "BS", e.SHAREDINDEXES_LAPS = "NC", e.SHAREDINDEXES_LAPS_DISTANCE = "NH", e.SHAREDINDEXES_LIVE = "AI", e.SHAREDINDEXES_MATCH_END_UTIME = "AP", e.SHAREDINDEXES_MATCH_START_UTIME = "AD", e.SHAREDINDEXES_ON_TRACK = "WZ", e.SHAREDINDEXES_PARTICIPANT_CYCLING_JERSEY = "WY", e.SHAREDINDEXES_PARTICIPANT_STATUS = "WT", e.SHAREDINDEXES_PARTICIPANT_STATUS_SUBTYPE = "VX", e.SHAREDINDEXES_PERIOD_START_UTIME = "AO", e.SHAREDINDEXES_PITSTOPS = "NF", e.SHAREDINDEXES_RANK = "WS", e.SHAREDINDEXES_RANK_TIED = "WW", e.SHAREDINDEXES_REFRESH_UTIME = "A2", e.SHAREDINDEXES_SERVICE = "WC", e.SHAREDINDEXES_SOURCE_TYPE_OF_GAME = "BW", e.SHAREDINDEXES_SPORT_ID = "SA", e.SHAREDINDEXES_STARTING_PRICE = "NM", e.SHAREDINDEXES_STATS_SORT_KEY = "NI", e.SHAREDINDEXES_TIME = "ND", e.SHAREDINDEXES_TOTAL_RESULT = "BI", e.SHAREDINDEXES_TOURNAMENT_NAME = "ZA", e.SHAREDINDEXES_TOURNAMENT_STAGE_ID = "ZC", e.SHAREDINDEXES_UPCOMING_DRAW_ID = "UD", e.SHAREDINDEXES_UPDATE_LOCAL_FEED_UPDATED_TIME = "UL", e.SHAREDINDEXES_WEIGHT = "NL", e.STANDINGSINDEXES_AGAINST_PERCENTAGE = "TAP", e.STANDINGSINDEXES_COUNTRY = "TC", e.STANDINGSINDEXES_COUNTRY_ID = "TB", e.STANDINGSINDEXES_COUNTRY_TYPE = "TT", e.STANDINGSINDEXES_COUNTRY_TYPE_ID = "TA", e.STANDINGSINDEXES_CRICKET_LIVE_TABLE_NET_RUN_RATE = "LG", e.STANDINGSINDEXES_CRICKET_LIVE_TABLE_WINS_WITH_ABANDONED = "LM", e.STANDINGSINDEXES_CRICKET_NET_RUN_RATE = "TG", e.STANDINGSINDEXES_CRICKET_RUNS = "TGR", e.STANDINGSINDEXES_CRICKET_WINS_WITH_ABANDONED = "TM", e.STANDINGSINDEXES_DRAWS = "TDR", e.STANDINGSINDEXES_DYNAMIC_COLUMNS_DATA = "DCD", e.STANDINGSINDEXES_DYNAMIC_COLUMNS_DATA_LIVE = "DCDL", e.STANDINGSINDEXES_DYNAMIC_COLUMNS_LEGEND = "DCL", e.STANDINGSINDEXES_DYNAMIC_COLUMNS_SIZES = "DCS", e.STANDINGSINDEXES_EXTENDED_TYPE = "ETN", e.STANDINGSINDEXES_EXTENDED_TYPE_ID = "ETI", e.STANDINGSINDEXES_EXTRA_INFO_RANK_LEGEND = "TV", e.STANDINGSINDEXES_EXTRA_INFO_TEXT = "TQ", e.STANDINGSINDEXES_GOALS = "TG", e.STANDINGSINDEXES_GOALS_PER_MATCH = "TGM", e.STANDINGSINDEXES_HAS_SPACE_AFTER_EXTRA_INFO = "TX", e.STANDINGSINDEXES_HTFT_DRAW_DRAW = "HDD", e.STANDINGSINDEXES_HTFT_DRAW_LOSS = "HDL", e.STANDINGSINDEXES_HTFT_DRAW_WIN = "HDW", e.STANDINGSINDEXES_HTFT_LOSS_DRAW = "HLD", e.STANDINGSINDEXES_HTFT_LOSS_LOSS = "HLL", e.STANDINGSINDEXES_HTFT_LOSS_WIN = "HLW", e.STANDINGSINDEXES_HTFT_WIN_DRAW = "HWD", e.STANDINGSINDEXES_HTFT_WIN_LOSS = "HWL", e.STANDINGSINDEXES_HTFT_WIN_WIN = "HWW", e.STANDINGSINDEXES_INFO_TEXT = "TIT", e.STANDINGSINDEXES_LAST_MATCH_AWAY_PARTICIPANT_ID_ENCODED = "LMA", e.STANDINGSINDEXES_LAST_MATCH_AWAY_URL = "LMB", e.STANDINGSINDEXES_LAST_MATCH_EVENT_ID_ENCODED = "LME", e.STANDINGSINDEXES_LAST_MATCH_HOME_PARTICIPANT_ID_ENCODED = "LMH", e.STANDINGSINDEXES_LAST_MATCH_HOME_URL = "LMI", e.STANDINGSINDEXES_LAST_MATCH_LINK = "LML", e.STANDINGSINDEXES_LAST_MATCH_SYMBOL = "LMS", e.STANDINGSINDEXES_LAST_MATCH_TITLE = "LMT", e.STANDINGSINDEXES_LAST_MATCH_TYPE = "LMU", e.STANDINGSINDEXES_LIVE_TABLE_GOALS = "LG", e.STANDINGSINDEXES_LIVE_TABLE_LIVE_EVENT_ID = "LE", e.STANDINGSINDEXES_LIVE_TABLE_MATCHES = "LM", e.STANDINGSINDEXES_LIVE_TABLE_PCT_OR_POINTS = "LC", e.STANDINGSINDEXES_LIVE_TABLE_POSITION_CHANGE = "LK", e.STANDINGSINDEXES_LIVE_TABLE_SCORE = "LS", e.STANDINGSINDEXES_LOSSES = "TL", e.STANDINGSINDEXES_LOSSES_IN_OVERTIME = "TLO", e.STANDINGSINDEXES_LOSSES_REGULAR = "TLR", e.STANDINGSINDEXES_MAIN_MENU_TRANS = "TZ", e.STANDINGSINDEXES_MATCHES = "TM", e.STANDINGSINDEXES_NO_RESULT_MATCHES = "NRM", e.STANDINGSINDEXES_OVERALL_LEGEND = "TO", e.STANDINGSINDEXES_OVERALL_LEGEND_STATIC = "TOS", e.STANDINGSINDEXES_OVER_UNDER_OVER = "OUO", e.STANDINGSINDEXES_OVER_UNDER_UNDER = "OUU", e.STANDINGSINDEXES_PARTICIPANTS_IMAGE_MAP_URL = "TZI", e.STANDINGSINDEXES_PARTICIPANTS_IMAGE_OFFSET = "IM", e.STANDINGSINDEXES_PARTICIPANT_IDS = "TI", e.STANDINGSINDEXES_PARTICIPANT_NAMES = "TN", e.STANDINGSINDEXES_PCT = "PC", e.STANDINGSINDEXES_PESAPALLO_0_POINT_MATCHES = "TPD", e.STANDINGSINDEXES_PESAPALLO_1_POINT_MATCHES = "TPC", e.STANDINGSINDEXES_PESAPALLO_2_POINT_MATCHES = "TPB", e.STANDINGSINDEXES_PESAPALLO_3_POINT_MATCHES = "TPA", e.STANDINGSINDEXES_PESAPALLO_GOALS_FOR_AGAINST_DIFF = "TPF", e.STANDINGSINDEXES_PESAPALLO_POINTS_PER_EVENT = "TPP", e.STANDINGSINDEXES_POINTS = "TP", e.STANDINGSINDEXES_RANK = "TR", e.STANDINGSINDEXES_RANK_CLASS = "TU", e.STANDINGSINDEXES_RANK_COLOR = "TUC", e.STANDINGSINDEXES_ROUND_TYPE = "TE", e.STANDINGSINDEXES_ROUND_TYPE_ID = "TD", e.STANDINGSINDEXES_SELECTED_PARTICIPANT = "TS", e.STANDINGSINDEXES_SUB_MENU_TRANS = "TZS", e.STANDINGSINDEXES_WINS = "TW", e.STANDINGSINDEXES_WINS_IN_OVERTIME = "TWO", e.STANDINGSINDEXES_WINS_REGULAR = "TWR", e.STANDINGSLISTINDEXES_CATEGORY_ID = "TF", e.STANDINGSLISTINDEXES_COUNTRY = "TB", e.STANDINGSLISTINDEXES_COUNTRY_ID = "TC", e.STANDINGSLISTINDEXES_SEASON_ID = "TT", e.STANDINGSLISTINDEXES_STAGE = "TS", e.STANDINGSLISTINDEXES_TOP_LEAGUE_KEY = "TG", e.STANDINGSLISTINDEXES_TOURNAMENT_ID = "TD", e.STANDINGSLISTINDEXES_TOURNAMENT_NAME = "TA", e.STANDINGSLISTINDEXES_TOURNAMENT_TEMPLATE_ID = "TE", e.STANDINGSSIGNSINDEXES_AWAY_TABLE_HASH = "STA", e.STANDINGSSIGNSINDEXES_DRAW_HASH = "SD", e.STANDINGSSIGNSINDEXES_FORM_TABLE_HASH = "STF", e.STANDINGSSIGNSINDEXES_HOME_TABLE_HASH = "STH", e.STANDINGSSIGNSINDEXES_LIVE_TABLE_HASH = "SL", e.STANDINGSSIGNSINDEXES_TABLE_HASH = "ST", e.STANDINGSSIGNSINDEXES_TABS = "TB", e.STANDINGSSIGNSINDEXES_TOP_SCORERS_HASH = "SS", e.STANDINGSTABSINDEXES_ADVANCED_HASH = "SD", e.STANDINGSTABSINDEXES_AVAILABLE_TABLES = "TB", e.STANDINGSTABSINDEXES_AWAY_FORM_HASH = "SI", e.STANDINGSTABSINDEXES_AWAY_HALF_TIME_FULL_TIME_HASH = "SO", e.STANDINGSTABSINDEXES_AWAY_HASH = "SC", e.STANDINGSTABSINDEXES_AWAY_OVER_UNDER_HASH = "SL", e.STANDINGSTABSINDEXES_HOME_FORM_HASH = "SH", e.STANDINGSTABSINDEXES_HOME_HALF_TIME_FULL_TIME_HASH = "SN", e.STANDINGSTABSINDEXES_HOME_HASH = "SB", e.STANDINGSTABSINDEXES_HOME_OVER_UNDER_HASH = "SK", e.STANDINGSTABSINDEXES_OVERALL_FORM_HASH = "SE", e.STANDINGSTABSINDEXES_OVERALL_HALF_TIME_FULL_TIME_HASH = "SM", e.STANDINGSTABSINDEXES_OVERALL_HASH = "SA", e.STANDINGSTABSINDEXES_OVERALL_LIVE_HASH = "ST", e.STANDINGSTABSINDEXES_OVERALL_OVER_UNDER_HASH = "SF", e.STANDINGSTABSINDEXES_STREAKS_HASH = "SG", e.STANDINGSTABSINDEXES_TOP_SCORERS_HASH = "SJ", e.STATISTICSINDEXES_AWAY_VALUE = "SI", e.STATISTICSINDEXES_GROUP_LABEL = "SF", e.STATISTICSINDEXES_HOME_VALUE = "SH", e.STATISTICSINDEXES_NAME = "SG", e.STATISTICSINDEXES_TAB_LABEL = "SE", e.STATSINDEXES_ASSISTS = "AS", e.STATSINDEXES_BALL_NUMBER = "BN", e.STATSINDEXES_BALL_TYPE = "BT", e.STATSINDEXES_BALL_VALUE = "BV", e.STATSINDEXES_IS_ADDITIONAL = "AL", e.STATSINDEXES_IS_CHANGED = "CH", e.STATSINDEXES_OVER_SENTENCE = "OS", e.STATSINDEXES_PARTICIPANT_TYPE = "PT", e.STATSINDEXES_POINTS = "PT", e.STATSINDEXES_SCORE = "SC", e.STATSINDEXES_SERVICE_LOST_PARTICIPANT_TYPE = "SLPT", e.STATSINDEXES_SERVICE_PARTICIPANT_TYPE = "SPT", e.SUMMARYINDEXES_AWAY_RESULT = "IH", e.SUMMARYINDEXES_BATSMAN = "SIA", e.SUMMARYINDEXES_BEST_OF_FRAMES = "DY", e.SUMMARYINDEXES_BOWLER = "SIB", e.SUMMARYINDEXES_BROADCASTS = "TA", e.SUMMARYINDEXES_BROADCASTS_BOOKMAKERS = "TVB", e.SUMMARYINDEXES_BROADCASTS_TV = "TVT", e.SUMMARYINDEXES_EVENT_STAGE_STATUS_TYPE_ID = "STT", e.SUMMARYINDEXES_FIFTH_SET = "RG", e.SUMMARYINDEXES_FIRST_SET = "RC", e.SUMMARYINDEXES_FOURTH_SET = "RF", e.SUMMARYINDEXES_HOME_RESULT = "IG", e.SUMMARYINDEXES_INCIDENT_ADDED_TIME = "ID", e.SUMMARYINDEXES_INCIDENT_ADDED_TIME_NEW = "IDX", e.SUMMARYINDEXES_INCIDENT_ID = "III", e.SUMMARYINDEXES_INCIDENT_ID_NEW = "IIIX", e.SUMMARYINDEXES_INCIDENT_PLAYER_ID = "IM", e.SUMMARYINDEXES_INCIDENT_PLAYER_ID_NEW = "IMX", e.SUMMARYINDEXES_INCIDENT_PLAYER_NAME = "IF", e.SUMMARYINDEXES_INCIDENT_PLAYER_NAME_NEW = "IFX", e.SUMMARYINDEXES_INCIDENT_SIDE = "IA", e.SUMMARYINDEXES_INCIDENT_SIDE_NEW = "IAX", e.SUMMARYINDEXES_INCIDENT_SUBTYPE = "IJ", e.SUMMARYINDEXES_INCIDENT_SUBTYPE_NAME = "IL", e.SUMMARYINDEXES_INCIDENT_SUBTYPE_NAME_NEW = "ILX", e.SUMMARYINDEXES_INCIDENT_SUBTYPE_NEW = "IJX", e.SUMMARYINDEXES_INCIDENT_TIME = "IB", e.SUMMARYINDEXES_INCIDENT_TIME_NEW = "IBX", e.SUMMARYINDEXES_INCIDENT_TIME_SEC = "IC", e.SUMMARYINDEXES_INCIDENT_TIME_SEC_NEW = "ICX", e.SUMMARYINDEXES_INCIDENT_TYPE = "IE", e.SUMMARYINDEXES_INCIDENT_TYPE_NAME = "IK", e.SUMMARYINDEXES_INCIDENT_TYPE_NAME_NEW = "IKX", e.SUMMARYINDEXES_INCIDENT_TYPE_NEW = "IEX", e.SUMMARYINDEXES_IS_MAIN_STAGE = "RM", e.SUMMARYINDEXES_MATCH_INFO_TYPE = "MIT", e.SUMMARYINDEXES_MATCH_INFO_VALUE = "MIV", e.SUMMARYINDEXES_MATCH_OVERALL_TIME = "RB", e.SUMMARYINDEXES_RECENT_OVERS = "SIC", e.SUMMARYINDEXES_SCRATCH_CATEGORY = "SPC", e.SUMMARYINDEXES_SCRATCH_LABEL = "SPE", e.SUMMARYINDEXES_SCRATCH_PLAYER_COUNTRY_ID = "SPF", e.SUMMARYINDEXES_SCRATCH_PLAYER_COUNTRY_NAME = "SPG", e.SUMMARYINDEXES_SCRATCH_PLAYER_ID = "SPI", e.SUMMARYINDEXES_SCRATCH_PLAYER_IS_UNSURE = "SPU", e.SUMMARYINDEXES_SCRATCH_PLAYER_NAME = "SPN", e.SUMMARYINDEXES_SCRATCH_PLAYER_TEAM = "SPT", e.SUMMARYINDEXES_SCRATCH_PLAYER_UNSURE_LABEL = "SPD", e.SUMMARYINDEXES_SECOND_SET = "RD", e.SUMMARYINDEXES_STAGE_IS_CANCELLED = "RX", e.SUMMARYINDEXES_STAGE_TEXT = "RN", e.SUMMARYINDEXES_TEAM_MEMBER_COUNTRY_ID = "TMC", e.SUMMARYINDEXES_TEAM_MEMBER_ID = "TMI", e.SUMMARYINDEXES_TEAM_MEMBER_NAME = "TMN", e.SUMMARYINDEXES_TEAM_MEMBER_SIDE = "TMS", e.SUMMARYINDEXES_THIRD_SET = "RE", e.SUMMARYPARTICIPANTINDEXES_CYCLING_JERSEY_TRANSLATE = "RK", e.SUMMARYPARTICIPANTINDEXES_CYCLING_JERSEY_TYPE = "RJ", e.SUMMARYPARTICIPANTINDEXES_GOLF_AWAY_RESULT = "RA", e.SUMMARYPARTICIPANTINDEXES_GOLF_HOLE_DATA = "RR", e.SUMMARYPARTICIPANTINDEXES_GOLF_HOME_RESULT = "RH", e.SUMMARYPARTICIPANTINDEXES_GOLF_ROUND_NAME = "RL", e.SUMMARYPARTICIPANTINDEXES_RACING_GAP = "RO", e.SUMMARYPARTICIPANTINDEXES_RACING_IS_LIVE = "RI", e.SUMMARYPARTICIPANTINDEXES_RACING_RANK = "RP", e.SUMMARYPARTICIPANTINDEXES_RACING_STATUS_SHORT_NAME = "RS", e.SUMMARYPARTICIPANTINDEXES_RACING_TIME = "RT", e.SUMMARYPARTICIPANTINDEXES_STAGE_ID = "RY", e.TEAMSQUADINDEXES_FLAG_ID = "FI", e.TEAMSQUADINDEXES_GROUP_NAME = "GN", e.TEAMSQUADINDEXES_GROUP_PLAYER_TYPE = "GT", e.TEAMSQUADINDEXES_PLAYER_COUNTRY_ID = "PC", e.TEAMSQUADINDEXES_PLAYER_ID = "PI", e.TEAMSQUADINDEXES_PLAYER_JERSEY_NUM = "PJ", e.TEAMSQUADINDEXES_PLAYER_NAME = "PN", e.TEAMSQUADINDEXES_PLAYER_TYPE_ID = "TI", e.TOPSCORERSINDEXES_ACTIVE_PLAYER = "UB", e.TOPSCORERSINDEXES_ASISTS_SECOND = "UL", e.TOPSCORERSINDEXES_ASSISTS = "UK", e.TOPSCORERSINDEXES_GOALS = "UJ", e.TOPSCORERSINDEXES_LEGEND = "UM", e.TOPSCORERSINDEXES_MENU_TRANS = "TZ", e.TOPSCORERSINDEXES_PLAYER_COUNTRY_ID = "UC", e.TOPSCORERSINDEXES_PLAYER_ID = "UP", e.TOPSCORERSINDEXES_PLAYER_NAME = "UF", e.TOPSCORERSINDEXES_PLAYER_POSITION_NAME = "UPN", e.TOPSCORERSINDEXES_PLAYER_POSITION_ORDER = "UPO", e.TOPSCORERSINDEXES_PLAYER_TEAM_ID = "UT", e.TOPSCORERSINDEXES_PLAYER_TYPE_ID = "UH", e.TOPSCORERSINDEXES_POINTS = "UI", e.TOPSCORERSINDEXES_RANK = "UA", e.TOPSCORERSINDEXES_TEAM_NAME = "UU", e.TOURNAMENTSTAGEEVENTSINDEXES_NUMBER_OF_PAGES = "PW", e.TRANSFERSINDEXES_AFFECTED_TEAM = "TEAT", e.TRANSFERSINDEXES_COUNTRY_NAME = "CRNA", e.TRANSFERSINDEXES_DATE = "DATE", e.TRANSFERSINDEXES_PARTICIPANT_ICON = "PI", e.TRANSFERSINDEXES_PLAYER_URL = "PURL", e.TRANSFERSINDEXES_PROPERTY_ID = "PID", e.TRANSFERSINDEXES_TEAM_URL = "TURL", e.TRANSFERSINDEXES_TRANSFER_DIRECTION = "TD", e.TRANSFERSINDEXES_TRANSFER_TYPE = "TT", e.TVINDEXES_BUNDLE_APPLE_PRODUCT_ID = "TAP", e.TVINDEXES_BUNDLE_EXPIRATION_PERIOD = "TBD", e.TVINDEXES_BUNDLE_FOR_FREE = "TFB", e.TVINDEXES_BUNDLE_IS_ACTIVE = "TIA", e.TVINDEXES_BUNDLE_IS_PURCHASABLE = "TIP", e.TVINDEXES_BUNDLE_NAME = "TBN", e.TVINDEXES_BUNDLE_PRICE_CURRENCY_CODE = "TCC", e.TVINDEXES_BUNDLE_PRICE_CURRENCY_VALUE = "TCV", e.TVINDEXES_BUNDLE_UUID = "TUI", e.TVINDEXES_CHANNELS_STREAM_TYPE_ID = "CST", e.TVINDEXES_CHANNEL_ID = "CIT", e.TVINDEXES_CHANNEL_IMAGE_BIG = "CIB", e.TVINDEXES_CHANNEL_IMAGE_SMALL = "CIS", e.TVINDEXES_CHANNEL_NAME = "CNT", e.TVINDEXES_END_POINTER = "TIE", e.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_IS_FINAL = "UF", e.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_LEVEL = "UL", e.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_ROUND_NAME = "UN", e.UPDATEINDEXES_AWAY_GOAL_DISALLOWED = "GDB", e.UPDATEINDEXES_AWAY_GOLF_PAR_DIFF = "PG", e.UPDATEINDEXES_AWAY_PENALTY_MISSED = "ED", e.UPDATEINDEXES_AWAY_PENALTY_SHOT = "EB", e.UPDATEINDEXES_AWAY_SCORES_CHANGED = "SCB", e.UPDATEINDEXES_HAS_LIVE_TABLE = "ZO", e.UPDATEINDEXES_HOME_GOAL_DISALLOWED = "GDA", e.UPDATEINDEXES_HOME_GOLF_PAR_DIFF = "PF", e.UPDATEINDEXES_HOME_PENALTY_MISSED = "EC", e.UPDATEINDEXES_HOME_PENALTY_SHOT = "EA", e.UPDATEINDEXES_HOME_SCORES_CHANGED = "SCA", e.UPDATEINDEXES_IS_IN_TIEBREAK_TO_10 = "ZI", e.UPDATEINDEXES_PERIOD_UPDATE_UTIME = "AR", e.UPDATELOCALINDEXES_EVENT_ID = "AA", e.UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING = "AL", e.UPDATELOCALINDEXES_INFO_NOTICE = "AM", e.UPDATELOCALINDEXES_SPORT_ID = "SA", e
            })()
        },
        22: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(15);
            class r {
                constructor(e, t, n, a, r, i, s, l, o, c, g, _, h, E) {
                    this.id = e, this.name = t, this.bundleUuid = n, this.bundleName = a, this.isFree = r, this.priceCurrencyCode = i, this.priceCurrencyValue = s, this.isPaid = l, this.expirationDate = o, this.expirationPeriod = c, this.encodedImageFilename = g, this.streamTypeId = _, this.isPurchasable = h, this.isActive = E
                }
                getId() {
                    return this.id
                }
                getName() {
                    return this.name
                }
                getBundleUuid() {
                    return this.bundleUuid
                }
                getBundleName() {
                    return this.bundleName
                }
                getIsFree() {
                    return this.isFree
                }
                getExpirationDate() {
                    return this.expirationDate
                }
                getExpirationPeriod() {
                    return this.expirationPeriod
                }
                getPriceCurrencyCode() {
                    return this.priceCurrencyCode
                }
                getPriceCurrencyValue() {
                    return this.priceCurrencyValue
                }
                getPrice() {
                    return "%s %s".replace(/%s/, this.getPriceCurrencyValue()).replace(/%s/, this.getPriceCurrencyCode()).trim()
                }
                getIsPaid() {
                    return this.isPaid
                }
                getEncodedImageFilename() {
                    return this.encodedImageFilename
                }
                getSteamTypeId() {
                    return this.streamTypeId
                }
                getIsPurchasable() {
                    return this.isPurchasable
                }
                getIsActive() {
                    return this.isActive
                }
                isScheduled() {
                    return this.getSteamTypeId() == a.a.SCHEDULED
                }
                isLive() {
                    return this.getSteamTypeId() == a.a.LIVE
                }
                isPaused() {
                    return this.getSteamTypeId() == a.a.PAUSED
                }
                isFinished() {
                    return this.getSteamTypeId() == a.a.FINISHED
                }
                isCanceled() {
                    return this.getSteamTypeId() == a.a.CANCELED
                }
                isUnavailable() {
                    return this.getSteamTypeId() == a.a.UNAVAILABLE
                }
            }
            class i {
                constructor(e = null) {
                    this.id = 0, this.name = "", this.bundleUuid = "", this.bundleName = "", this.isFree = !1, this.priceCurrencyCode = "", this.priceCurrencyValue = "", this.isPaid = !1, this.expirationDate = "", this.expirationPeriod = "", this.encodedImageFilename = "", this.streamTypeId = 0, this.isPurchasable = !1, this.isActive = !1, e && this.setId(e.getId()).setName(e.getName()).setBundleUuid(e.getBundleUuid()).setBundleName(e.getBundleName()).setIsFree(e.getIsFree()).setPriceCurrencyCode(e.getPriceCurrencyCode()).setPriceCurrencyValue(e.getPriceCurrencyValue()).setIsPaid(e.getIsPaid()).setExpirationDate(e.getExpirationDate()).setExpirationPeriod(e.getExpirationPeriod()).setEncodedImageFilename(e.getEncodedImageFilename()).setStreamTypeId(e.getSteamTypeId()).setIsPurchasable(e.getIsPurchasable()).setIsActive(e.getIsActive())
                }
                setId(e) {
                    return this.id = e, this
                }
                setName(e) {
                    return this.name = e, this
                }
                setBundleUuid(e) {
                    return this.bundleUuid = e, this
                }
                setBundleName(e) {
                    return this.bundleName = e, this
                }
                setIsFree(e) {
                    return this.isFree = e, this
                }
                setPriceCurrencyCode(e) {
                    return this.priceCurrencyCode = e, this
                }
                setPriceCurrencyValue(e) {
                    return this.priceCurrencyValue = e, this
                }
                setIsPaid(e) {
                    return this.isPaid = e, this
                }
                setExpirationDate(e) {
                    return this.expirationDate = e, this
                }
                setExpirationPeriod(e) {
                    return this.expirationPeriod = e, this
                }
                setEncodedImageFilename(e) {
                    return this.encodedImageFilename = e, this
                }
                setStreamTypeId(e) {
                    return this.streamTypeId = e, this
                }
                setIsPurchasable(e) {
                    return this.isPurchasable = e, this
                }
                setIsActive(e) {
                    return this.isActive = e, this
                }
                build() {
                    return new r(this.id, this.name, this.bundleUuid, this.bundleName, this.isFree, this.priceCurrencyCode, this.priceCurrencyValue, this.isPaid, this.expirationDate, this.expirationPeriod, this.encodedImageFilename, this.streamTypeId, this.isPurchasable, this.isActive)
                }
            }
        },
        229: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.DRAW = 0] = "DRAW", e[e.HOME = 1] = "HOME", e[e.AWAY = 2] = "AWAY"
                }(a || (a = {}))
        },
        23: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(26);
            class r {
                constructor(e, t, n) {
                    this.parseData = e => new Promise(t => {
                        a.a.parse(this.parser, e.getBody(), e.getProperties()), t(this.parser.getParsedModel())
                    }), this.feed = e, this.fetcher = t, this.parser = n
                }
                fetch(e) {
                    return this.fetcher.fetch(this.feed, e).then(this.parseData)
                }
            }
        },
        236: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n.n(a);

            function i() {
                return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                    className: "shifterSkeleton"
                }), r.a.createElement("div", {
                    className: "drawSkeleton"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__round"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__header"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__brackets"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }))), r.a.createElement("div", {
                    className: "drawSkeleton__round"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__header"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__brackets"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }))), r.a.createElement("div", {
                    className: "drawSkeleton__round"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__header"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__brackets"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                }))), r.a.createElement("div", {
                    className: "drawSkeleton__round"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__header"
                }), r.a.createElement("div", {
                    className: "drawSkeleton__brackets"
                }, r.a.createElement("div", {
                    className: "drawSkeleton__bracket"
                })))))
            }
        },
        237: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(67);
            class r {
                constructor(e, t, n, a, r, i, s) {
                    this.name = e, this.side = t, this.winner = n, this.swappedParticipants = a, this.swappedParticipantsTrans = r, this.logo = i, this.eventId = s
                }
                getName() {
                    return Object(a.a)(this.name)
                }
                getLogo() {
                    return Object(a.a)(this.logo)
                }
                getSide() {
                    return this.side
                }
                isWinner() {
                    return this.winner
                }
                isSwappedParticipants() {
                    return this.swappedParticipants
                }
                getSwapParticipantsTrans() {
                    return this.swappedParticipantsTrans
                }
                getEventId() {
                    return this.eventId
                }
            }
        },
        253: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            })), n.d(t, "b", (function() {
                return s
            }));
            var a = n(0),
                r = n.n(a);

            function i({
                headerTexts: e,
                className: t
            }) {
                return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                    className: t + "score",
                    title: e.getRunsTitle()
                }, e.getRunsShortText()), r.a.createElement("div", {
                    className: t + "part--1",
                    title: e.get1InningTitle()
                }, "1"), r.a.createElement("div", {
                    className: t + "part--2",
                    title: e.get2InningTitle()
                }, "2"), r.a.createElement("div", {
                    className: t + "part--3",
                    title: e.get3InningTitle()
                }, "3"), r.a.createElement("div", {
                    className: t + "part--4",
                    title: e.get4InningTitle()
                }, "4"), r.a.createElement("div", {
                    className: t + "part--5",
                    title: e.get5InningTitle()
                }, "5"), r.a.createElement("div", {
                    className: t + "part--6",
                    title: e.get6InningTitle()
                }, "6"), r.a.createElement("div", {
                    className: t + "part--7",
                    title: e.get7InningTitle()
                }, "7"), r.a.createElement("div", {
                    className: t + "part--8",
                    title: e.get8InningTitle()
                }, "8"), r.a.createElement("div", {
                    className: t + "part--9",
                    title: e.get9InningTitle()
                }, "9"), r.a.createElement("div", {
                    className: t + "part--10",
                    title: e.getExtraInningTitle()
                }, e.getExtraInningShortText()), r.a.createElement("div", {
                    className: t + "part--11",
                    title: e.getHitsTitle()
                }, e.getHitsShortText()), r.a.createElement("div", {
                    className: t + "part--12",
                    title: e.getErrorsTitle()
                }, e.getErrorsShortText()))
            }

            function s(e) {
                return r.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--duel"
                }, r.a.createElement(i, {
                    headerTexts: e.headerTexts,
                    className: "event__"
                }))
            }
        },
        254: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return i
            })), n.d(t, "a", (function() {
                return s
            }));
            var a = n(0),
                r = n.n(a);

            function i(e) {
                return r.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--duel"
                }, r.a.createElement(s, {
                    headerTexts: e.headerTexts,
                    className: "event__"
                }))
            }

            function s({
                className: e,
                headerTexts: t
            }) {
                return r.a.createElement(r.a.Fragment, null, r.a.createElement("div", {
                    className: e + "part--1",
                    title: t.get1InningTitle()
                }, "1"), r.a.createElement("div", {
                    className: e + "part--2",
                    title: t.get2InningTitle()
                }, "2"), r.a.createElement("div", {
                    className: e + "part--3",
                    title: t.get3InningTitle()
                }, "3"), r.a.createElement("div", {
                    className: e + "part--4",
                    title: t.get4InningTitle()
                }, "4"), r.a.createElement("div", {
                    className: e + "part--5",
                    title: t.get1HfTitle()
                }, t.get1HfShortText()), r.a.createElement("div", {
                    className: e + "part--6",
                    title: t.get5InningTitle()
                }, "5"), r.a.createElement("div", {
                    className: e + "part--7",
                    title: t.get6InningTitle()
                }, "6"), r.a.createElement("div", {
                    className: e + "part--8",
                    title: t.get7InningTitle()
                }, "7"), r.a.createElement("div", {
                    className: e + "part--9",
                    title: t.get8InningTitle()
                }, "8"), r.a.createElement("div", {
                    className: e + "part--10",
                    title: t.get2HfTitle()
                }, t.get2HfShortText()), r.a.createElement("div", {
                    className: e + "part--11",
                    title: t.getExtraInningTitle()
                }, t.getExtraInningShortText()), r.a.createElement("div", {
                    className: e + "part--12",
                    title: t.getPenaltyTitle()
                }, t.getPenaltyShortText()))
            }
        },
        255: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            class a {
                constructor(e) {
                    this._utilTrans = e
                }
                get1InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_1INN")
                }
                get2InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_2INN")
                }
                get3InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_3INN")
                }
                get4InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_4INN")
                }
                get5InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_5INN")
                }
                get6InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_6INN")
                }
                get7InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_7INN")
                }
                get8InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_8INN")
                }
                get9InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_9INN")
                }
                getExtraInningShortText() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_SHORT_EINN")
                }
                getExtraInningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_EINN")
                }
                getErrorsShortText() {
                    return this._utilTrans.translate("TRANS_BASEBALL_SHORT_ERRORS")
                }
                getErrorsTitle() {
                    return this._utilTrans.translate("TRANS_BASEBALL_ERRORS")
                }
                getHitsShortText() {
                    return this._utilTrans.translate("TRANS_BASEBALL_SHORT_HITS")
                }
                getHitsTitle() {
                    return this._utilTrans.translate("TRANS_BASEBALL_HITS")
                }
                getRunsShortText() {
                    return this._utilTrans.translate("TRANS_BASEBALL_SHORT_RUNS")
                }
                getRunsTitle() {
                    return this._utilTrans.translate("TRANS_BASEBALL_RUNS")
                }
            }
        },
        256: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            class a {
                constructor(e) {
                    this._utilTrans = e
                }
                get1InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_1INN")
                }
                get2InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_2INN")
                }
                get3InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_3INN")
                }
                get4InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_4INN")
                }
                get5InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_5INN")
                }
                get6InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_6INN")
                }
                get7InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_7INN")
                }
                get8InningTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_8INN")
                }
                getExtraInningShortText() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_SHORT_EINN")
                }
                getExtraInningTitle() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_MATCH_STATUS_EINN")
                }
                get1HfShortText() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_SHORT_1HF")
                }
                get1HfTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_1HF")
                }
                get2HfShortText() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_SHORT_2HF")
                }
                get2HfTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_2HF")
                }
                getPenaltyShortText() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_SHORT_PEN")
                }
                getPenaltyTitle() {
                    return this._utilTrans.translate("TRANS_PESAPALLO_MATCH_STATUS_PEN")
                }
            }
        },
        26: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            let a = (() => {
                class e {
                    static parse(e, t, n) {
                        n && e.setProperties(n), e.startFeed(), t.split(this.DELIMITER_ROW).filter(this.filterEmptyStrings).forEach(t => this.parseRow(e, t)), e.endFeed()
                    }
                    static parseRow(e, t) {
                        e.startRow(), t.split(this.DELIMITER_CELL).filter(this.filterEmptyStrings).forEach(t => this.parseCell(e, t)), e.endRow()
                    }
                    static parseCell(e, t) {
                        const [n, a] = t.split(this.DELIMITER_VALUE);
                        e.parse(n, this.parseValue(a))
                    }
                    static parseValue(e) {
                        return void 0 === e ? "" : e.includes(this.DELIMITER_ARRAY) ? e.split(this.DELIMITER_ARRAY) : e
                    }
                    static filterEmptyStrings(e) {
                        return !!e
                    }
                }
                return e.DELIMITER_ROW = "~", e.DELIMITER_CELL = "Â¬", e.DELIMITER_VALUE = "Ã·", e.DELIMITER_ARRAY = "|", e
            })()
        },
        266: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            class a {
                constructor(e, t, n, a, r, i, s, l) {
                    this._eventId = e, this._startTime = t, this._homeParticipantName = n, this._awayParticipantName = a, this._homeImagePath = r, this._awayImagePath = i, this._bookmakersOdds = s, this._bookmakerLogos = l
                }
                getAwayImagePath() {
                    return this._awayImagePath
                }
                getAwayParticipantName() {
                    return this._awayParticipantName
                }
                getEventId() {
                    return this._eventId
                }
                getHomeImagePath() {
                    return this._homeImagePath
                }
                getHomeParticipantName() {
                    return this._homeParticipantName
                }
                getStartTime() {
                    return this._startTime
                }
                getBookmakersOdds() {
                    return this._bookmakersOdds
                }
                getBookmakerLogos() {
                    return this._bookmakerLogos
                }
            }
            class r {
                constructor() {
                    this._eventId = "", this._startTime = 0, this._homeParticipantName = "", this._awayParticipantName = "", this._homeImagePath = "", this._awayImagePath = "", this._bookmakerLogos = {
                        urls: {}
                    }
                }
                setEventId(e) {
                    return this._eventId = e, this
                }
                setStartTime(e) {
                    return this._startTime = e, this
                }
                setHomeParticipantName(e) {
                    return this._homeParticipantName = e, this
                }
                setAwayParticipantName(e) {
                    return this._awayParticipantName = e, this
                }
                setHomeImagePath(e) {
                    return this._homeImagePath = e, this
                }
                setAwayImagePath(e) {
                    return this._awayImagePath = e, this
                }
                setBookmakersOdds(e) {
                    return this._bookmakersOdds = e, this
                }
                setBookmakerLogos(e) {
                    return this._bookmakerLogos = e, this
                }
                build() {
                    return new a(this._eventId, this._startTime, this._homeParticipantName, this._awayParticipantName, this._homeImagePath, this._awayImagePath, this._bookmakersOdds, this._bookmakerLogos)
                }
            }
        },
        3: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n(12);
            class i {
                static render(e) {
                    let t = null;
                    const n = e.participant.getSwapParticipantsTrans();
                    return e.participant.getSide() == r.a.AWAY && e.participant.isSwappedParticipants() && n && (t = a.createElement("span", {
                        className: "swap-team-at",
                        title: n
                    }, "@", "Â ")), a.createElement(a.Fragment, null, t, e.participant.getName())
                }
            }
        },
        35: function(e, t, n) {
            e.exports = {
                recomCont: "recomCont___1C5rsoZ",
                recomHeading: "recomHeading___3MRrGkP",
                recomArea: "recomArea___MaK6E-l",
                recomHref: "recomHref___3JhPU-j",
                recomImage: "recomImage___16tt1L3",
                recomName: "recomName___7otrFie"
            }
        },
        38: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            class a {
                constructor(e) {
                    this.LS_PRIVATE_DATA_KEY = "lsid_privateData", this.LS_SECURITY_HASH_KEY = "lsid_hash", this.LS_ID = "lsid_id", this.LS_EMAIL = "lsid_email", this.LS_PAYMENT_STATUS_CODE = "payment_status_code", this.LS_PURCHASED_EVENT = "purchased_event", this.LS_APPLE = "apple", this.LS_TRANSACTIONS = "transactions", this.storage = e
                }
                getPrivateData() {
                    const e = this.storage.getItem(this.LS_PRIVATE_DATA_KEY);
                    return e ? JSON.parse(e) : null
                }
                getBundles() {
                    var e;
                    const t = this.getPrivateData();
                    return (null === (e = null == t ? void 0 : t.lstv) || void 0 === e ? void 0 : e.bundles) ? t.lstv.bundles.filter(e => new Date <= new Date(e.expirationDate)) : null
                }
                getUsersCard() {
                    var e;
                    const t = this.getPrivateData();
                    return (null === (e = null == t ? void 0 : t.lstv) || void 0 === e ? void 0 : e.card) ? t.lstv.card : null
                }
                getSecurityHash() {
                    return this.storage.getItem(this.LS_SECURITY_HASH_KEY)
                }
                getCustomerId() {
                    return this.storage.getItem(this.LS_ID)
                }
                getCustomerEmail() {
                    return this.storage.getItem(this.LS_EMAIL)
                }
                getPaymentStatusCode() {
                    return this.storage.getItem(this.LS_PAYMENT_STATUS_CODE)
                }
                getPurchasedEvent() {
                    return this.storage.getItem(this.LS_PURCHASED_EVENT)
                }
                getAppleResponseData() {
                    return this.storage.getItem(this.LS_APPLE)
                }
                removePaymentStatusCode() {
                    this.storage.removeItem(this.LS_PAYMENT_STATUS_CODE)
                }
                removePurchasedEvent() {
                    this.storage.removeItem(this.LS_PURCHASED_EVENT)
                }
                removeAppleResponseData() {
                    this.storage.removeItem(this.LS_APPLE)
                }
                storePurchasedEvent(e) {
                    this.storage.setItem(this.LS_PURCHASED_EVENT, e)
                }
                storePaymentStatusCode(e) {
                    this.storage.setItem(this.LS_PAYMENT_STATUS_CODE, e)
                }
                getTransactionId(e) {
                    var t;
                    const n = this.storage.getItem(this.LS_TRANSACTIONS);
                    if (!n) return null;
                    const a = JSON.parse(n).find(t => t.eventId === e);
                    return null !== (t = null == a ? void 0 : a.transactionId) && void 0 !== t ? t : null
                }
                storeTransactionId(e, t, n) {
                    if (this.getTransactionId(e)) return;
                    const a = this.storage.getItem(this.LS_TRANSACTIONS),
                        r = JSON.parse(null != a ? a : "[]");
                    r.push({
                        eventId: e,
                        transactionId: t,
                        expiration: n
                    }), this.storage.setItem(this.LS_TRANSACTIONS, JSON.stringify(r))
                }
                removeTransactionId(e) {
                    const t = this.storage.getItem(this.LS_TRANSACTIONS);
                    if (!t) return;
                    const n = JSON.parse(t);
                    this.storage.setItem(this.LS_TRANSACTIONS, JSON.stringify(n.filter(t => t.eventId !== e)))
                }
                removeExpiredTransactions() {
                    const e = this.storage.getItem(this.LS_TRANSACTIONS);
                    if (!e) return;
                    const t = JSON.parse(e),
                        n = (new Date).getTime(),
                        a = t.filter(e => e.expiration > n);
                    this.storage.setItem(this.LS_TRANSACTIONS, JSON.stringify(a))
                }
                deleteCard() {
                    var e;
                    const t = this.getPrivateData();
                    return !!(null === (e = null == t ? void 0 : t.lstv) || void 0 === e ? void 0 : e.card) && (delete t.lstv.card, this.storage.setItem(this.LS_PRIVATE_DATA_KEY, JSON.stringify(t)), !0)
                }
            }
        },
        44: function(e, t, n) {
            "use strict";
            n.d(t, "b", (function() {
                return a
            })), n.d(t, "a", (function() {
                return r
            }));
            class a {
                getProperties() {}
            }
            class r {
                constructor(e, t, n) {
                    this.domain = location.origin, this.pathPrefix = "/x/feed/", this.feedSignature = e, this.fetchFunction = t, this.urlPrefix = n
                }
                getUrl(e) {
                    return this.domain + this.urlPrefix + this.pathPrefix + e
                }
                fetch(e, t) {
                    const n = {
                        "x-fsign": this.feedSignature
                    };
                    return this.fetchFunction.then(a => a(this.getUrl(e), Object.assign(Object.assign({}, t), {
                        headers: Object.assign(Object.assign({}, t && t.headers || {}), n)
                    })).then(e => this.resolveFetchedData(e)))
                }
            }
        },
        451: function(e, t, n) {
            "use strict";
            n.r(t);
            var a, r = n(0),
                i = n.n(r),
                s = n(30);
            class l extends r.Component {
                constructor(e, t) {
                    super(e, t), this.state = {
                        activeTabIndex: null != e.defaultActiveTabIndex ? e.defaultActiveTabIndex : 0
                    }, this.handleTabClick = this.handleTabClick.bind(this)
                }
                handleTabClick(e) {
                    this.setState({
                        activeTabIndex: e
                    }), null != this.props.onClickCallback && this.props.onClickCallback(e)
                }
                renderChildrenWithTabsApiAsProps() {
                    return r.Children.map(this.props.children, (e, t) => r.cloneElement(e, {
                        tabIndex: t,
                        isActive: t === this.state.activeTabIndex,
                        subTab: this.props.subTab,
                        handlerOnClick: n => {
                            this.handleTabClick(t), e.props.handlerOnClick(n)
                        }
                    }))
                }
                renderActiveTabContent() {
                    const {
                        children: e
                    } = this.props, {
                        activeTabIndex: t
                    } = this.state;
                    if (e[t]) return e[t].props.children
                }
                render() {
                    if (0 == this.props.children.length) return !1;
                    if (1 == this.props.children.length && !this.props.renderSingleTab) return this.renderActiveTabContent();
                    if (!0 === this.props.subTab) return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "subTabs" + (null != this.props.className ? " " + this.props.className : "")
                    }, this.props.before ? r.createElement("div", {
                        className: "subTabs__label"
                    }, this.props.before) : "", this.renderChildrenWithTabsApiAsProps()), this.renderActiveTabContent());
                    const e = this.props.notifications || this.props.sound;
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "tabs" + (null != this.props.className ? " " + this.props.className : "")
                    }, this.props.before, r.createElement("div", {
                        className: "tabs__group"
                    }, this.renderChildrenWithTabsApiAsProps(), e && r.createElement("div", {
                        className: "tabs__setting"
                    }, this.props.notifications, this.props.sound)), this.props.notifications, this.props.calendar), this.renderActiveTabContent())
                }
            }
            class o extends r.PureComponent {
                constructor() {
                    super(...arguments), this.handlerOnClick = e => {
                        e.preventDefault(), this.props.handlerOnClick(e)
                    }, this.isEnabled = () => {
                        var e;
                        return null === (e = this.props.isEnabled) || void 0 === e || e
                    }
                }
                tabTypeClassName() {
                    return this.props.subTab ? "subTabs" : "tabs"
                }
                render() {
                    return null
                }
            }

            function c(e, t) {
                const n = e.currentTarget.parentElement.querySelector(".mg_dropdown_selected");
                if (n) {
                    const e = parseInt(n.innerText);
                    t.myGamesGroupKey = isNaN(e) ? 0 : e
                }
                return t
            }! function(e) {
                e[e.DESKTOP = 1] = "DESKTOP", e[e.MOBILE = 2] = "MOBILE"
            }(a || (a = {}));
            class g {
                updateSubscription() {
                    window.push_update_subscription()
                }
            }
            var _ = n(9);
            class h {
                constructor(e, t, n, a, r) {
                    this._myGames = e, this._reactCalls = t, this._loginClientGetter = n, this._pushManager = a, this._myGamesGroups = r
                }
                toggle(e) {
                    if (!this._myGames.isGameFromTournament(e.eventId)) {
                        if (this._myGamesGroups && void 0 !== e.myGamesGroupKey) {
                            const t = Object.keys(this._myGamesGroups.getGroupsForEvents([e.eventId]));
                            this._myGamesGroups.removeEventFromGroup(e.eventId, e.myGamesGroupKey);
                            const n = Object.keys(this._myGamesGroups.getGroupsForEvents([e.eventId]));
                            if (t.length - n.length > 0) return void this._reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES)
                        }
                        this._myGames.toggle(e.eventId), this._reactCalls.reloadMyGamesTabCounter(), this._reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES), e.eventIsStatic || this._reactCalls.reloadEvent(e.eventId), this._reactCalls.reloadLeague(e.leagueId), this._reactCalls.reloadStaticContent(), this._pushManager.updateSubscription()
                    }
                }
                toggleLeague(e) {
                    let t = null;
                    const n = !e.isChecked && e.isNoDuelTournament || e.isChecked && this._myGames.isAddedWholeTournament(e.leagueId);
                    if (this._myGamesGroups && void 0 !== e.myGamesGroupKey) {
                        let a, r;
                        if (n) a = Object.keys(this._myGames.getLabelGroups(e.leagueId)), this._myGames.removeLabelFromGroup(e.leagueId, e.myGamesGroupKey), r = Object.keys(this._myGames.getLabelGroups(e.leagueId));
                        else {
                            t = this._myGamesGroups.getEventIdsByLeagueAndGroup(e.leagueId, e.myGamesGroupKey), a = Object.keys(this._myGamesGroups.getGroupsForEvents(t));
                            for (const n of t) {
                                const t = Object.keys(this._myGamesGroups.getGroupsForEvents([n]));
                                this._myGamesGroups.removeEventFromGroup(n, e.myGamesGroupKey);
                                const a = Object.keys(this._myGamesGroups.getGroupsForEvents([n]));
                                t.length - a.length == 0 && this._myGames.toggle(n)
                            }
                            r = Object.keys(this._myGamesGroups.getGroupsForEvents(t))
                        }
                        if (a.length - r.length > 0) return void this._reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES)
                    }
                    e.beforeToggle(), n ? this.handleNoDuelTournament(e) : this.handleDuelTournament(e, t || e.eventIds), e.afterToggle(), this._reactCalls.reloadMyGamesTabCounter(), this._reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES), this._reactCalls.reloadTabContent(_.a.TAB_ID_MYTEAMS), this._reactCalls.reloadLeague(e.leagueId), this._pushManager.updateSubscription()
                }
                toggleParticipant(e) {
                    this.handleParticipant(e), this._reactCalls.reloadMyGamesTabCounter(), this._reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES), this._pushManager.updateSubscription()
                }
                handleNoDuelTournament(e) {
                    if (e.isChecked ? this._myGames.removeAllEvents(e.leagueId) : this._myGames.addNoduelTournament(e.leagueId), !e.eventsAreStatic)
                        for (const t in e.eventIds) this._reactCalls.reloadEvent(e.eventIds[t]);
                    this._reactCalls.reloadStaticContent()
                }
                handleDuelTournament(e, t) {
                    for (const n of t) this._myGames.canBeGameAdded(n) && (e.isChecked ? this._myGames.remove(n) : this._myGames.add(n), e.eventsAreStatic || this._reactCalls.reloadEvent(n));
                    this._reactCalls.reloadStaticContent()
                }
                handleParticipant(e) {
                    for (const t in e.eventIds) e.isChecked ? this._myGames.remove(e.eventIds[t]) : this._myGames.add(e.eventIds[t]), this._reactCalls.reloadEvent(e.eventIds[t])
                }
                addChangeCallback(e) {
                    this._myGames.addChangeCallback(e), this._myGames.registerLocalStorageSyncCB(e);
                    const t = this._loginClientGetter();
                    t && t.registerCallback("dataSyncChange/mygames", e)
                }
            }
            class E {
                setMyGamesGroups(e) {
                    return this._myGamesGroups = e, this
                }
                build() {
                    return new h(cjs.mygames, window.cjs.reactCalls, () => window.ls.loginClient, new g, this._myGamesGroups)
                }
            }

            function d(e) {
                return class {
                    static getCheckBoxClassName(e) {
                        return e.checked ? " checked" : ""
                    }
                    static render(e) {
                        return null
                    }
                }.render({
                    checked: e.event.getMyGameIcon().isChecked(),
                    enabled: e.event.getMyGameIcon().isEnabled(),
                    eventId: e.event.getEventId(),
                    leagueId: e.event.getLeagueId(),
                    handlerOnClick: e.event.getMyGameIcon().getHandlerOnClick(),
                    handlerOnMouseEnter: e.event.getMyGameIcon().getHandlerOnMouseEnter(),
                    handlerOnMouseLeave: e.event.getMyGameIcon().getHandlerOnMouseLeave(),
                    eventIsStatic: e.event.getIsStatic(),
                    myGamesController: (new E).setMyGamesGroups(e.myGamesGroups).build()
                })
            }
            var T = n(3),
                u = n(96),
                S = n(12);
            class m {
                static getScore(e) {
                    return e ? r.createElement(r.Fragment, null, e) : null
                }
                static displayScore(e, t) {
                    const n = this.getScore(e.homeScore),
                        a = this.getScore(e.awayScore),
                        i = e.style ? e.style : void 0;
                    if (t == S.a.HOME) {
                        const t = "event__score event__score--home" + (e.classes ? " " + e.classes : ""),
                            a = e.homeScoreTitle ? e.homeScoreTitle : void 0;
                        return n ? r.createElement("div", {
                            className: t + (e.homeHighlighted ? " highlighted" : ""),
                            title: a,
                            style: i
                        }, n) : r.createElement("div", {
                            className: t,
                            style: i
                        }, "-")
                    } {
                        const t = "event__score event__score--away" + (e.classes ? " " + e.classes : ""),
                            n = e.awayScoreTitle ? e.awayScoreTitle : void 0;
                        return a ? r.createElement("div", {
                            className: t + (e.awayHighlighted ? " highlighted" : ""),
                            title: n,
                            style: i
                        }, a) : r.createElement("div", {
                            className: t,
                            style: i
                        }, "-")
                    }
                }
                static render(e) {
                    return e.previewIcon && e.previewIcon.isEnabled() ? u.a.render({
                        enabled: e.previewIcon.isEnabled(),
                        handlerOnClick: e.previewIcon.getHandlerOnClick(),
                        handlerOnMouseEnter: e.previewIcon.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.previewIcon.getHandlerOnMouseLeave()
                    }) : r.createElement(r.Fragment, null, this.displayScore(e, S.a.HOME), this.displayScore(e, S.a.AWAY))
                }
            }
            var v = n(1);
            class p {
                static displayExScore(e) {
                    return e ? r.createElement("sup", {
                        className: "event__part--ex"
                    }, e) : null
                }
                static displayScore(e, t) {
                    const n = e.style ? e.style : void 0;
                    if (t == S.a.HOME) {
                        if (!e.homeScore) return null;
                        const t = "event__part event__part--home" + (e.homeHighlighted ? " highlighted" : "") + (e.classes ? " " + e.classes : ""),
                            a = e.homeScoreTitle ? e.homeScoreTitle : void 0;
                        return r.createElement("div", {
                            className: t,
                            title: a,
                            style: n
                        }, e.homeScore, this.displayExScore(e.homeScoreEx))
                    } {
                        if (!e.awayScore) return null;
                        const t = "event__part event__part--away" + (e.awayHighlighted ? " highlighted" : "") + (e.classes ? " " + e.classes : ""),
                            a = e.awayScoreTitle ? e.awayScoreTitle : void 0;
                        return r.createElement("div", {
                            className: t,
                            title: a,
                            style: n
                        }, e.awayScore, this.displayExScore(e.awayScoreEx))
                    }
                }
                static render(e) {
                    if (e.enableOneSideScore) {
                        if (!e.homeScore && !e.awayScore) return null
                    } else if (!e.homeScore || !e.awayScore) return null;
                    return r.createElement(r.Fragment, null, this.displayScore(e, S.a.HOME), this.displayScore(e, S.a.AWAY))
                }
            }
            var I = n(11),
                A = n(14);
            const N = ({
                iconName: e,
                tvIcon: t,
                isSlim: n
            }) => {
                if (!Object(I.d)(() => t.isEnabled(), !1)) return null;
                const a = "icon--" + e + (n ? " event__icon--slim" : "");
                return r.createElement(A.Q, {
                    enabled: !0,
                    handlerOnClick: e => t.getHandlerOnClick()(e),
                    handlerOnMouseEnter: e => t.getHandlerOnMouseEnter()(e),
                    handlerOnMouseLeave: e => t.getHandlerOnMouseLeave()(e),
                    extendClasses: a,
                    title: ""
                })
            };
            var R = n(61),
                O = n(97),
                D = n(8),
                C = n(10);
            class y {
                static shouldShowTime(e, t, n) {
                    const a = [C.a.DELAYED, C.a.TO_FINISH, C.a.SECOND_PLACE].includes(t);
                    return e == D.a.SCHEDULED && !a || n
                }
                static render(e) {
                    return this.shouldShowTime(e.eventStageType, e.eventStage, e.showDateWithTime) ? R.a.render({
                        startTime: e.startTime,
                        startDate: e.startDate,
                        stageTime: e.shortStageTime || e.stageTime,
                        eventStage: e.eventStage,
                        finalResultOnlyIcon: e.finalResultOnlyIcon,
                        usTimeFormat: e.usTimeFormat,
                        highlighted: e.highlighted,
                        dateFormat: e.dateFormat,
                        showDateWithTime: e.showDateWithTime,
                        showStatus: e.showStatusUnderTime
                    }) : O.a.render({
                        stageTime: e.stageTime,
                        eventStage: e.eventStage,
                        eventStageType: e.eventStageType,
                        usTimeFormat: e.usTimeFormat,
                        highlighted: e.highlighted
                    })
                }
            }
            var H = n(154);

            function L(e) {
                return null;
            }
            class P {
                static render(e) {
                    return e.enabled ? r.createElement("span", {
                        className: "wld " + e.class,
                        onClick: e.handlerOnClick,
                        onMouseEnter: e.handlerOnMouseEnter,
                        onMouseLeave: e.handlerOnMouseLeave
                    }, e.shortTranslate) : null
                }
            }
            const M = r.createContext(a.DESKTOP);
            class F {
                static renderOddsItem(e, t, n = "") {
                    return t.device == a.MOBILE ? r.createElement("div", {
                        className: "odds__odd " + (t.isDuel ? "" : " icon icon--arrow ") + n + " " + e.getClass() + " " + e.getNotPublishedClass(),
                        "data-bookmaker-id": t.event.getMainBookmakerId(),
                        dangerouslySetInnerHTML: {
                            __html: e.getHtml()
                        }
                    }) : r.createElement("div", {
                        className: "odds__odd icon icon--arrow " + e.getClass() + " " + e.getNotPublishedClass() + " " + e.getNotClickableClass() + " " + e.getPrematchBetslipClass(),
                        "data-bookmaker-id": t.event.getMainBookmakerId(),
                        onMouseEnter: e.getHandlerOnMouseEnter().bind(this),
                        onMouseLeave: e.getHandlerOnMouseLeave().bind(this),
                        onClick: e.getHandlerOnClick().bind(this),
                        style: t.style,
                        dangerouslySetInnerHTML: {
                            __html: e.getHtml()
                        }
                    })
                }
            }

            function w(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("1", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("0", "team"), [e.event]),
                    a = Object(I.c)(() => e.event.getOddsItem("2", "team"), [e.event]);
                return t && n && a ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e), F.renderOddsItem(n, e), F.renderOddsItem(a, e)) : null
            }

            function b(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("1", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("2", "team"), [e.event]);
                return t && n ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e), F.renderOddsItem(n, e)) : null
            }

            function f(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("AH", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("AH1", "team"), [e.event]),
                    a = Object(I.c)(() => e.event.getOddsItem("AH2", "team"), [e.event]);
                return t && n && a ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e), F.renderOddsItem(n, e), F.renderOddsItem(a, e)) : null
            }

            function k(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("each_way", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("winner", "team"), [e.event]);
                return t && n ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e, "odds__odd--1"), F.renderOddsItem(n, e, "odds__odd--2")) : null
            }

            function G(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("winner", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("top_5", "team"), [e.event]),
                    a = Object(I.c)(() => e.event.getOddsItem("top_10", "team"), [e.event]),
                    i = Object(I.c)(() => e.event.getOddsItem("top_20", "team"), [e.event]);
                return t && n && a && i ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e, "odds__odd--1"), !e.oneColumn && r.createElement(r.Fragment, null, F.renderOddsItem(n, e, "odds__odd--2"), F.renderOddsItem(a, e, "odds__odd--3"), F.renderOddsItem(i, e, "odds__odd--4"))) : null
            }

            function U(e) {
                const t = Object(I.c)(() => e.event.getOddsItem("winner", "team"), [e.event]),
                    n = Object(I.c)(() => e.event.getOddsItem("top_3", "team"), [e.event]),
                    a = Object(I.c)(() => e.event.getOddsItem("top_6", "team"), [e.event]),
                    i = Object(I.c)(() => e.event.getOddsItem("top_10", "team"), [e.event]);
                return t && n && a && i ? r.createElement(r.Fragment, null, F.renderOddsItem(t, e, "odds__odd--1"), !e.oneColumn && r.createElement(r.Fragment, null, F.renderOddsItem(n, e, "odds__odd--2"), F.renderOddsItem(a, e, "odds__odd--3"), F.renderOddsItem(i, e, "odds__odd--4"))) : null
            }

            function B(e) {
                const t = S.a[e.team == S.a.AWAY ? S.a.AWAY : S.a.HOME].toLocaleLowerCase(),
                    n = Object(I.c)(() => e.event.getOddsItem("AH", t), [e.event]),
                    i = Object(I.c)(() => e.event.getOddsItem(e.team == S.a.AWAY ? "AH2" : "AH1", t), [e.event]),
                    s = Object(I.c)(() => e.event.getOddsItem(e.team == S.a.AWAY ? "ML2" : "ML1", t), [e.event]),
                    l = Object(I.c)(() => e.event.getOddsItem("OU", t), [e.event]),
                    o = Object(I.c)(() => e.event.getOddsItem(e.team == S.a.AWAY ? "OU2" : "OU1", t), [e.event]);
                return n && i && s && l && o ? e.device == a.MOBILE ? r.createElement(r.Fragment, null, r.createElement("span", {
                    className: "odds__odd odds__odd__spread1--" + t + " " + n.getClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: n.getHtml()
                    }
                }), r.createElement("span", {
                    className: "odds__odd odds__odd__spread2--" + t + " " + i.getClass() + " " + i.getNotPublishedClass() + " " + i.getNotClickableClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: i.getHtml()
                    }
                })) : r.createElement(r.Fragment, null, r.createElement("div", {
                    className: "odds__odd odds__odd__spread1--" + t + " icon icon--arrow " + n.getClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: n.getHtml()
                    }
                }), r.createElement("div", {
                    className: "odds__odd odds__odd__spread2--" + t + " icon icon--arrow " + i.getClass() + " " + i.getNotPublishedClass() + " " + i.getNotClickableClass() + " " + i.getPrematchBetslipClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    onMouseEnter: i.getHandlerOnMouseEnter(),
                    onMouseLeave: i.getHandlerOnMouseLeave(),
                    onClick: i.getHandlerOnClick(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: i.getHtml()
                    }
                }), r.createElement("div", {
                    className: "odds__odd odds__odd__moneyline--" + t + " icon icon--arrow " + s.getClass() + " " + s.getNotPublishedClass() + " " + s.getNotClickableClass() + " " + s.getPrematchBetslipClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    onMouseEnter: s.getHandlerOnMouseEnter(),
                    onMouseLeave: s.getHandlerOnMouseLeave(),
                    onClick: s.getHandlerOnClick(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: s.getHtml()
                    }
                }), r.createElement("div", {
                    className: "odds__odd icon odds__odd__total1--" + t + " icon--arrow " + l.getClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: l.getHtml()
                    }
                }), r.createElement("div", {
                    className: "odds__odd icon odds__odd__total2--" + t + " icon--arrow " + o.getClass() + " " + o.getNotPublishedClass() + " " + o.getNotClickableClass() + " " + o.getPrematchBetslipClass(),
                    "data-bookmaker-id": e.event.getMainBookmakerId(),
                    onMouseEnter: o.getHandlerOnMouseEnter(),
                    onMouseLeave: o.getHandlerOnMouseLeave(),
                    onClick: o.getHandlerOnClick(),
                    style: e.style,
                    dangerouslySetInnerHTML: {
                        __html: o.getHtml()
                    }
                })) : null
            }
            var W;

            function x(e) {
                let t = null,
                    n = !1;
                return e.oddsContent === W.TYPE_1X2 ? t = r.createElement(w, Object.assign({}, e)) : e.oddsContent === W.TYPE_12 ? t = r.createElement(b, Object.assign({}, e)) : e.oddsContent === W.TYPE_AH ? t = r.createElement(f, Object.assign({}, e)) : e.oddsContent === W.TYPE_EACH_WAY ? t = r.createElement(k, Object.assign({}, e)) : e.oddsContent === W.TYPE_TW ? t = r.createElement(G, Object.assign({}, e)) : e.oddsContent === W.TYPE_TW_3_6_10 ? t = r.createElement(U, Object.assign({}, e)) : e.oddsContent === W.TYPE_US_LAYOUT && (t = r.createElement(r.Fragment, null, r.createElement(B, Object.assign({}, e, {
                    team: S.a.HOME
                })), r.createElement(B, Object.assign({}, e, {
                    team: S.a.AWAY
                }))), n = !0), e.device == a.MOBILE ? r.createElement("div", {
                    className: "event__odds" + (n ? " event__odds--USlayout" : "")
                }, t) : t
            }! function(e) {
                e.TYPE_1X2 = "1X2", e.TYPE_12 = "12", e.TYPE_AH = "AH", e.TYPE_US_LAYOUT = "Us_Layout", e.TYPE_TW = "To_Win", e.TYPE_TW_3_6_10 = "To_Win_3_6_10", e.TYPE_EACH_WAY = "Each_Way"
            }(W || (W = {}));
            const X = ({
                    isUnlocked: e,
                    isEnabled: t,
                    handlerOnClick: n,
                    handlerOnMouseEnter: a,
                    handlerOnMouseLeave: i
                }) => e ? r.createElement(A.y, {
                    enabled: t,
                    handlerOnClick: n,
                    handlerOnMouseEnter: a,
                    handlerOnMouseLeave: i,
                    extendClasses: "icon--stream",
                    title: ""
                }) : r.createElement(A.z, {
                    enabled: t,
                    handlerOnClick: n,
                    handlerOnMouseEnter: a,
                    handlerOnMouseLeave: i,
                    extendClasses: "icon--stream-no",
                    title: ""
                }),
                Y = ({
                    isEnabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a
                }) => r.createElement(A.T, {
                    enabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a,
                    extendClasses: "icon--winner",
                    title: ""
                }),
                K = ({
                    isEnabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a
                }) => r.createElement(A.u, {
                    enabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a,
                    extendClasses: "icon--info",
                    title: ""
                }),
                V = ({
                    isEnabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a
                }) => r.createElement(A.K, {
                    enabled: e,
                    handlerOnClick: t,
                    handlerOnMouseEnter: n,
                    handlerOnMouseLeave: a,
                    extendClasses: "icon--standing",
                    title: ""
                });
            const j = r.createContext(new class {
                get(...e) {}
                initConfig(e) {}
            });
            class J {
                static render(e) {
                    const t = [];
                    if (e.participant.getLogo()) {
                        const n = e.participant.getLogo().split(";"),
                            a = "event__logo event__logo--" + (0 === e.participant.getSide() ? "home" : "away");
                        let i = 0;
                        n.forEach(n => {
                            let s = n;
                            switch (s) {
                                case "men":
                                    s = "rHkUp5Wg-Qmtm30D7.png";
                                case "women":
                                    s = "KEUqwJAr-Qmtm30D7.png";
                                case "team":
                                    t.push(r.createElement(A.n, {
                                        enabled: !0,
                                        extendClasses: a,
                                        key: "emptyTeamLogo" + n
                                    }));
                                    break;
                                default:
                                    t.push(r.createElement("img", {
                                        className: a,
                                        loading: "lazy",
                                        key: `participant-image-${e.participant.getEventId()}-${e.participant.getSide()}-${i++}`,
                                        src: "/res/image/data/" + s
                                    }))
                            }
                        })
                    }
                    return r.createElement(j.Consumer, null, e => e.get("app", "team_logo", "iframe") && t)
                }
            }
            class Q {
                static render(e) {
                    var t;
                    return (null === (t = e.goalUnderReviewIcon) || void 0 === t ? void 0 : t.isEnabled()) ? r.createElement(A.R, {
                        enabled: !0,
                        handlerOnClick: e.goalUnderReviewIcon.getHandlerOnClick(),
                        handlerOnMouseEnter: e.goalUnderReviewIcon.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.goalUnderReviewIcon.getHandlerOnMouseLeave(),
                        extendClasses: "icon--var",
                        title: ""
                    }) : e.message.length > 0 ? r.createElement("div", {
                        className: "highlightMsg fontBold",
                        dangerouslySetInnerHTML: {
                            __html: e.message
                        }
                    }) : null
                }
            }
            const Z = e => i.a.createElement("text", {
                fill: "#FFFFFF",
                x: "50%",
                y: "56%",
                alignmentBaseline: "middle",
                textAnchor: "middle",
                fontSize: "8",
                fontFamily: "Verdana"
            }, e.label);
            class z {
                static displayRedCards(e, t) {
                    let n = "";
                    if (t == a.MOBILE) return n = "icon--redCard", e.redCardCount > 1 ? r.createElement(A.G, {
                        enabled: !0,
                        title: "",
                        extendClasses: n
                    }, r.createElement(Z, {
                        label: e.redCardCount
                    })) : r.createElement(A.G, {
                        enabled: !0,
                        title: "",
                        extendClasses: n
                    }); {
                        const t = [];
                        for (let a = 0; a < e.redCardCount; a++) n = "icon--redCard", 0 === a && (n += " icon--redCard-first"), a === e.redCardCount - 1 && (n += " icon--redCard-last"), t.push(r.createElement(A.G, {
                            enabled: !0,
                            title: "",
                            extendClasses: n,
                            key: a
                        })), n = "";
                        return t
                    }
                }
                static render(e) {
                    return 0 == e.redCardCount ? null : r.createElement(M.Consumer, null, t => this.displayRedCards(e, t))
                }
            }
            class q {
                static render(e) {
                    if (e.enableOneSideScore) {
                        if (!e.homeScore && !e.awayScore) return null
                    } else if (!e.homeScore || !e.awayScore) return null;
                    const t = e.delimiter || "-";
                    return r.createElement("div", {
                        className: "event__part"
                    }, "(", e.homeScore, "Â ", t, "Â ", e.awayScore, ")")
                }
            }
            class ee {
                static render(e) {
                    if (e.previewIcon && e.previewIcon.isEnabled()) return u.a.render({
                        enabled: e.previewIcon.isEnabled(),
                        handlerOnClick: e.previewIcon.getHandlerOnClick(),
                        handlerOnMouseEnter: e.previewIcon.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.previewIcon.getHandlerOnMouseLeave()
                    }); {
                        const t = e.homeScore ? e.homeScore : null,
                            n = e.awayScore ? e.awayScore : null,
                            a = e.homeScoreTitle ? e.homeScoreTitle : void 0,
                            i = e.awayScoreTitle ? e.awayScoreTitle : void 0,
                            s = e.delimiter || "-";
                        return !t || !n || e.isEventWithoutScoreAndNotRetired || "-" == t && "-" == n ? "-" : r.createElement(r.Fragment, null, r.createElement("span", {
                            title: a
                        }, t), "Â ", s, "Â ", r.createElement("span", {
                            title: i
                        }, n))
                    }
                }
            }
            const te = ({
                isEnabled: e,
                handlerOnClick: t,
                handlerOnMouseEnter: n,
                handlerOnMouseLeave: a
            }) => r.createElement(A.t, {
                enabled: e,
                handlerOnClick: t,
                handlerOnMouseEnter: n,
                handlerOnMouseLeave: a,
                extendClasses: "icon--audio",
                title: ""
            });
            class ne extends r.Component {
                constructor(e) {
                    super(e), this._mouseEnter = e => {
                        this.props.serviceIcon.getHandlerOnMouseEnter()(e), this.setState({
                            mouseOver: !0
                        })
                    }, this._mouseLeave = e => {
                        this.props.serviceIcon.getHandlerOnMouseLeave()(e), this.setState({
                            mouseOver: !1
                        })
                    }, this.state = {
                        mouseOver: !1
                    }
                }
                componentWillUnmount() {
                    this.state.mouseOver && this.props.serviceIcon.getTooltipObject && this.props.serviceIcon.getTooltipObject().hide()
                }
                render() {
                    const {
                        serviceIcon: e,
                        team: t
                    } = this.props;
                    return r.createElement(A.J, {
                        id: e.getIconText(),
                        enabled: !0,
                        handlerOnClick: () => {},
                        handlerOnMouseEnter: this._mouseEnter,
                        handlerOnMouseLeave: this._mouseLeave,
                        extendClasses: "icon--" + (t === S.a.HOME ? "serveHome" : "serveAway"),
                        title: ""
                    })
                }
            }
            const ae = ({
                homeServiceIcon: e,
                awayServiceIcon: t
            }) => {
                const n = (e, t) => e && e.isEnabled() ? r.createElement(ne, {
                    serviceIcon: e,
                    team: t
                }) : null;
                return r.createElement(r.Fragment, null, n(e, S.a.HOME), n(t, S.a.AWAY))
            };
            class re extends r.Component {
                render() {
                    return this.props.sentence ? r.createElement("div", {
                        className: "event__pitchers"
                    }, this.props.sentence) : null
                }
            }
            class ie extends r.PureComponent {
                static _renderPart(e) {
                    if (!e.isValid()) return null;
                    const t = e.getCssClass().trim(),
                        n = e.getRuns(),
                        a = e.getWickets(),
                        i = null !== a ? "/" + a : "",
                        s = e.getDeclared(),
                        l = e.getOversAndBalls();
                    return r.createElement("span", {
                        className: t || void 0
                    }, n, i, s, l ? " (" + l + ")" : "")
                }
                static render(e) {
                    const t = this._renderPart(e.cricketScore.getFirstPart()),
                        n = this._renderPart(e.cricketScore.getSecondPart());
                    return r.createElement(r.Fragment, null, t, n ? r.createElement("span", null, "Â &Â ") : "", n)
                }
            }
            class se {
                static _renderSentence(e) {
                    return e ? r.createElement("div", {
                        className: "extraInfo__text extraInfo__sentence"
                    }, e) : null
                }
                static _renderBatsmanAndBowler(e) {
                    return e ? r.createElement("div", {
                        className: "extraInfo__text extraInfo__batsmanAndBowler"
                    }, e) : null
                }
                static _renderOvers(e) {
                    return e ? r.createElement("div", {
                        className: "extraInfo__text extraInfo__overs"
                    }, e) : null
                }
                static _renderRightPart(e) {
                    return e ? r.createElement(r.Fragment, null, se._renderBatsmanAndBowler(e)) : null
                }
                static render(e) {
                    const t = se._renderSentence(e.sentence),
                        n = se._renderRightPart(e.batsmanAndBowler);
                    return t || n ? r.createElement("div", {
                        className: "extraInfo"
                    }, t, n, e.overs && se._renderOvers(e.overs)) : null
                }
            }
            class le {
                static render(e) {
                    return e.result ? r.createElement("div", {
                        className: "event__rounds" + (e.classes ? " " + e.classes : "")
                    }, e.result ? r.createElement("div", {
                        className: "event__rounds event__rounds--result"
                    }, e.result) : null, e.subResult ? r.createElement("div", {
                        className: "event__rounds event__rounds--subResult"
                    }, "(" + e.subResult + ")") : null) : r.createElement("div", {
                        className: "event__rounds"
                    }, "-")
                }
            }
            class oe extends r.Component {
                handlerOnClick(e) {
                    this.props.bestOfFrames && this.props.bestOfFrames.getHandlerOnClick()(e)
                }
                handlerOnMouseEnter(e) {
                    this.props.bestOfFrames && this.props.bestOfFrames.getHandlerOnMouseEnter()(e)
                }
                handlerOnMouseLeave(e) {
                    this.props.bestOfFrames && this.props.bestOfFrames.getHandlerOnMouseLeave()(e)
                }
                render() {
                    return r.createElement("div", {
                        className: "event__frames",
                        onClick: e => this.handlerOnClick(e)
                    }, r.createElement("div", {
                        className: "event__frames--inner",
                        onMouseEnter: e => this.handlerOnMouseEnter(e),
                        onMouseLeave: e => this.handlerOnMouseLeave(e)
                    }, this.props.bestOfFrames ? this.props.bestOfFrames.getText() : ""))
                }
            }
            var ce, ge = n(7);

            function _e(e) {
                let t = "";
                null != e.sets && (t += e.sets.isStarted() ? " bold" : "", t += e.sets.isPlaying() ? " playing" : "");
                const n = null != e.sets ? e.sets.getHomeContent() : "",
                    a = null != e.sets ? e.sets.getAwayContent() : "";
                let i = "";
                null != e.legs && (i += e.legs.isStarted() ? " bold" : "", i += e.legs.isPlaying() ? " playing" : "");
                const s = null != e.legs ? e.legs.getHomeContent() : "",
                    l = null != e.legs ? e.legs.getAwayContent() : "",
                    o = null != e.currentPoints ? e.currentPoints.getHomeContent() : "",
                    c = null != e.currentPoints ? e.currentPoints.getAwayContent() : "";
                return r.createElement(r.Fragment, null, n ? r.createElement("div", {
                    className: "event__sets event__sets--home " + t + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.RESULT, !0) ? " highlighted" : "")
                }, n) : null, a ? r.createElement("div", {
                    className: "event__sets event__sets--away " + t + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.RESULT, !1) ? " highlighted" : "")
                }, a) : null, s ? r.createElement("div", {
                    className: "event__legs event__legs--home" + i + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.CURRENT_LEG_RESULT, !0) ? " highlighted" : "")
                }, s) : null, l ? r.createElement("div", {
                    className: "event__legs event__legs--away" + i + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.CURRENT_LEG_RESULT, !1) ? " highlighted" : "")
                }, l) : null, o ? r.createElement("div", {
                    className: "event__part event__currentPoints--home" + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.CURRENT_POINTS, !0) ? " highlighted" : "")
                }, o) : null, c ? r.createElement("div", {
                    className: "event__part event__currentPoints--away" + (e.highlighter && e.highlighter.isResultHighlighted(ge.a.CURRENT_POINTS, !1) ? " highlighted" : "")
                }, c) : null)
            }
            class he {
                static isSoccer(e) {
                    return 1 === e.getSportId()
                }
                static isTennis(e) {
                    return 2 === e.getSportId()
                }
                static isBasketball(e) {
                    return 3 === e.getSportId()
                }
                static isHockey(e) {
                    return 4 === e.getSportId()
                }
                static isAmericanFootball(e) {
                    return 5 === e.getSportId()
                }
                static isBaseball(e) {
                    return 6 === e.getSportId()
                }
                static isHandball(e) {
                    return 7 === e.getSportId()
                }
                static isRugbyUnion(e) {
                    return 8 === e.getSportId()
                }
                static isFloorball(e) {
                    return 9 === e.getSportId()
                }
                static isBandy(e) {
                    return 10 === e.getSportId()
                }
                static isFutsal(e) {
                    return 11 === e.getSportId()
                }
                static isVolleyball(e) {
                    return 12 === e.getSportId()
                }
                static isCricket(e) {
                    return 13 === e.getSportId()
                }
                static isDarts(e) {
                    return 14 === e.getSportId()
                }
                static isSnooker(e) {
                    return 15 === e.getSportId()
                }
                static isBoxing(e) {
                    return 16 === e.getSportId()
                }
                static isBeachVolleyball(e) {
                    return 17 === e.getSportId()
                }
                static isAussieRules(e) {
                    return 18 === e.getSportId()
                }
                static isRugbyLeague(e) {
                    return 19 === e.getSportId()
                }
                static isBadminton(e) {
                    return 21 === e.getSportId()
                }
                static isWaterPolo(e) {
                    return 22 === e.getSportId()
                }
                static isGolf(e) {
                    return 23 === e.getSportId()
                }
                static isFieldHockey(e) {
                    return 24 === e.getSportId()
                }
                static isTableTennis(e) {
                    return 25 === e.getSportId()
                }
                static isBeachSoccer(e) {
                    return 26 === e.getSportId()
                }
                static isMma(e) {
                    return 28 === e.getSportId()
                }
                static isNetball(e) {
                    return 29 === e.getSportId()
                }
                static isPesapallo(e) {
                    return 30 === e.getSportId()
                }
                static isMotorsport(e) {
                    return 31 === e.getSportId()
                }
                static isMotorsportAutoRacing(e) {
                    return 32 === e.getSportId()
                }
                static isMotorsportMotoRacing(e) {
                    return 33 === e.getSportId()
                }
                static isCycling(e) {
                    return 34 === e.getSportId()
                }
                static isHorseRacing(e) {
                    return 35 === e.getSportId()
                }
                static isEsports(e) {
                    return 36 === e.getSportId()
                }
                static isWinterSports(e) {
                    return 37 === e.getSportId()
                }
                static isWinterSportsSkiJumping(e) {
                    return 38 === e.getSportId()
                }
                static isWinterSportsAlpineSkiing(e) {
                    return 39 === e.getSportId()
                }
                static isWinterSportsCrossCountry(e) {
                    return 40 === e.getSportId()
                }
                static isWinterSportsBiathlon(e) {
                    return 41 === e.getSportId()
                }
                static isKabaddi(e) {
                    return 42 === e.getSportId()
                }
            }

            function Ee(e) {
                const t = () => r.createElement("div", {
                    className: "event__rating"
                });
                if (!e.rank) return t();
                const n = e.rank.getParticipantStatus(),
                    a = e.rank.getContent(e.isMyTeams || !1);
                if (n) return r.createElement("div", {
                    className: "event__rating participant-status" + (e.rank.isCutOff() ? " player_cut_off" : "") + (e.highlighted ? " highlighted" : ""),
                    title: e.rank.getTitle(),
                    onMouseEnter: t => e.rank.getHandlerOnMouseEnter()(t),
                    onMouseLeave: t => e.rank.getHandlerOnMouseLeave()(t)
                }, n);
                if (a) {
                    const t = e.rank.getShift();
                    let n = "";
                    return t > 0 ? n = "position-up" : t < 0 && (n = "position-down"), r.createElement("div", {
                        className: "event__rating rank" + (e.highlighted ? " highlighted" : "") + (e.highlightedShift ? " highlighted-shift" : "") + (e.highlighted || e.highlightedShift ? " " + n : "")
                    }, a)
                }
                return t()
            }
            class de {
                static render(e) {
                    return e.countryId ? r.createElement("span", {
                        className: "flag fl_" + e.countryId,
                        title: e.countryName
                    }) : null
                }
            }
            class Te extends r.Component {
                handlerOnMouseEnter(e) {
                    this.props.handlerOnMouseEnter && this.props.handlerOnMouseEnter(e)
                }
                handlerOnMouseLeave(e) {
                    this.props.handlerOnMouseLeave && this.props.handlerOnMouseLeave(e)
                }
                render() {
                    return r.createElement("div", {
                        className: "event__result" + (this.props.classes ? " " + this.props.classes : "") + (this.props.highlighted ? " highlighted" : ""),
                        style: this.props.style ? this.props.style : void 0,
                        title: this.props.title,
                        onMouseEnter: this.handlerOnMouseEnter.bind(this),
                        onMouseLeave: this.handlerOnMouseLeave.bind(this),
                        dangerouslySetInnerHTML: {
                            __html: this.props.value
                        }
                    })
                }
            }
            class ue {
                static render(e) {
                    return r.createElement(Te, {
                        value: e.lapTime ? e.lapTime.getContent() : "",
                        classes: e.lapTime ? e.lapTime.getClasses() : void 0,
                        highlighted: e.highlighter ? e.highlighter.isResultHighlighted(ge.a.LAPS_DISTANCE) || e.highlighter.isResultHighlighted(ge.a.GAP) : void 0,
                        style: e.style
                    })
                }
            }
            class Se {
                static _displayJerseys(e) {
                    const t = [];
                    for (const n of e.cyclingJerseys) t.push(r.createElement("div", {
                        className: "icon icon--cycling-jersey icon--cycling-jersey-" + n.getColor(),
                        title: n.getTitle(),
                        onMouseEnter: t => e.handlerOnMouseEnter(t),
                        onMouseLeave: t => e.handlerOnMouseLeave(t),
                        key: n.getColor() + "/" + n.getTitle()
                    }));
                    return t
                }
                static render(e) {
                    return !!e.cyclingJerseys && r.createElement(r.Fragment, null, this._displayJerseys(e))
                }
            }
            class me {
                static _renderEmpty() {
                    return r.createElement("div", {
                        className: "event__stageName"
                    })
                }
                static render(e) {
                    return e.stage ? r.createElement("div", {
                        className: "event__stageName"
                    }, r.createElement("div", null, e.isRace ? e.stage.getContentRace() : e.stage.getContentName(), e.stage.getContentAfterStage(), e.stage.getContentAfterDay(), e.stage.getContentAfterRound()), r.createElement("div", null, e.stage.getContentCanceled(), e.stage.getContentDelayed())) : me._renderEmpty()
                }
            }
            class ve {
                static render(e) {
                    var t, n, a;
                    return r.createElement(r.Fragment, null, r.createElement(Te, {
                        value: e.time,
                        classes: e.isPlaying ? "playing" : void 0,
                        highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.TIME),
                        style: e.style
                    }), void 0 !== e.gap && r.createElement(Te, {
                        value: e.gap ? e.gap.getContent() : "",
                        classes: "event__result--gap " + (e.gap ? e.gap.getClasses() : ""),
                        highlighted: (null === (n = e.highlighter) || void 0 === n ? void 0 : n.isResultHighlighted(ge.a.LAPS_DISTANCE)) || (null === (a = e.highlighter) || void 0 === a ? void 0 : a.isResultHighlighted(ge.a.GAP)),
                        style: e.style
                    }))
                }
            }
            class pe {
                static render(e) {
                    var t, n, a, i, s;
                    return r.createElement(r.Fragment, null, r.createElement(Te, {
                        value: e.jumpRound1,
                        classes: "event__result--jump1",
                        highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.JUMP_ROUND_1),
                        style: e.style
                    }), void 0 !== e.pointsRound1 && r.createElement(Te, {
                        value: e.pointsRound1,
                        highlighted: null === (n = e.highlighter) || void 0 === n ? void 0 : n.isResultHighlighted(ge.a.POINTS_ROUND_1),
                        style: e.style
                    }), r.createElement(Te, {
                        value: e.jumpRound2,
                        classes: "event__result--jump2",
                        highlighted: null === (a = e.highlighter) || void 0 === a ? void 0 : a.isResultHighlighted(ge.a.JUMP_ROUND_2),
                        style: e.style
                    }), void 0 !== e.pointsRound2 && r.createElement(Te, {
                        value: e.pointsRound2,
                        highlighted: null === (i = e.highlighter) || void 0 === i ? void 0 : i.isResultHighlighted(ge.a.POINTS_ROUND_2),
                        style: e.style
                    }), r.createElement(Te, {
                        value: e.points,
                        classes: e.isPlaying ? "playing" : void 0,
                        highlighted: null === (s = e.highlighter) || void 0 === s ? void 0 : s.isResultHighlighted(ge.a.POINTS),
                        style: e.style
                    }))
                }
            }
            class Ie {
                static render(e) {
                    var t;
                    return r.createElement(r.Fragment, null, r.createElement(Te, {
                        value: e.shooting,
                        classes: "event__result--shooting" + (e.isPlaying ? " playing" : ""),
                        highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.SHOOTING),
                        style: e.style
                    }), ve.render(e))
                }
            }! function(e) {
                e.PAGE_TYPE_CATEGORY = "category_page", e.PAGE_TYPE_COMMON = "common_page", e.PAGE_TYPE_MIXED = "mixed_page", e.PAGE_TYPE_PLAYER = "player_page", e.PAGE_TYPE_RANKING = "ranking_page", e.PAGE_TYPE_SERIES = "series_page", e.PAGE_TYPE_SPORT = "sport_page", e.PAGE_TYPE_TEAM = "team_page", e.PAGE_TYPE_TOURNAMENT = "tournament_page", e.PAGE_TYPE_DRAW = "draw_page"
            }(ce || (ce = {}));
            class Ae {
                static render({
                    pageType: e,
                    event: t
                }) {
                    const n = e === ce.PAGE_TYPE_TOURNAMENT && !t.isInteruptedOrLiveOrAfterDay(),
                        a = t.getShowDateWithTime(e) || n;
                    return y.render({
                        startTime: t.getStartTime(),
                        startDate: t.getStartDate(),
                        stageTime: t.getStageTime(),
                        dateFormat: t.getDateFormat(),
                        eventStage: t.getEventStage(),
                        eventStageType: t.getEventStageType(),
                        finalResultOnlyIcon: t.getFinalResultOnlyIcon(),
                        usTimeFormat: t.hasUsTimeFormat(),
                        highlighted: t.getHighlighter().isStatusHighlighted(),
                        showDateWithTime: a
                    })
                }
            }
            class Ne {
                static render(e) {
                    return r.createElement(r.Fragment, null, r.createElement(Te, {
                        value: e.rides,
                        classes: "event__result--rides" + (e.isPlaying ? " playing" : ""),
                        highlighted: e.highlighter ? e.highlighter.isResultHighlighted(ge.a.RIDES) : void 0,
                        style: e.style
                    }), r.createElement(Te, {
                        value: e.wins,
                        classes: "event__result--wins" + (e.isPlaying ? " playing" : ""),
                        highlighted: e.highlighter ? e.highlighter.isResultHighlighted(ge.a.WINS) : void 0,
                        style: e.style
                    }), r.createElement(Te, {
                        value: e.points,
                        classes: "event__result--points" + (e.isPlaying ? " playing" : ""),
                        highlighted: e.highlighter ? e.highlighter.isResultHighlighted(ge.a.POINTS) : void 0,
                        style: e.style
                    }))
                }
            }
            class Re {
                static render(e) {
                    var t, n;
                    return r.createElement(r.Fragment, null, r.createElement(Te, {
                        value: e.timeRound1,
                        highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.TIME_ROUND_1),
                        style: e.style
                    }), r.createElement(Te, {
                        value: e.timeRound2,
                        highlighted: null === (n = e.highlighter) || void 0 === n ? void 0 : n.isResultHighlighted(ge.a.TIME_ROUND_2),
                        style: e.style
                    }), ve.render(e))
                }
            }
            class Oe {
                static render(e) {
                    const t = e.event;
                    return he.isSoccer(t) ? t.showOdds(e.pageType) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeRedCardCount(),
                                a = t.getAwayRedCardCount(),
                                i = e.event.isDuel(),
                                s = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), z.render({
                                redCardCount: n
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: a
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), r.createElement("div", {
                                className: "event__scores" + (s ? " fontBold" : "")
                            }, ee.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                isEventWithoutScoreAndNotRetired: e.event.getIsEventWithoutScoreAndNotRetired()
                            }), q.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.FULL_TIME),
                                awayScore: e.event.getAwayScore().getResult(v.a.FULL_TIME)
                            })), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeRedCardCount(),
                                a = t.getAwayRedCardCount(),
                                i = t.getHomeGoalUnderReviewIcon(),
                                s = t.getAwayGoalUnderReviewIcon(),
                                l = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, Q.render({
                                message: e.event.getHighlighter().getHomeMessage(),
                                goalUnderReviewIcon: i
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), z.render({
                                redCardCount: n
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__scores" + (l ? " fontBold" : "")
                            }, ee.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                isEventWithoutScoreAndNotRetired: e.event.getIsEventWithoutScoreAndNotRetired()
                            }), q.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.FULL_TIME),
                                awayScore: e.event.getAwayScore().getResult(v.a.FULL_TIME)
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, Q.render({
                                message: e.event.getHighlighter().getAwayMessage(),
                                goalUnderReviewIcon: s
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: a
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), q.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1)
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), !e.event.getTvStreamIcon().isEnabled() && r.createElement(te, {
                                isEnabled: e.event.getAudioCommentsIcon().isEnabled(),
                                handlerOnClick: e.event.getAudioCommentsIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAudioCommentsIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAudioCommentsIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isTennis(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon(),
                                i = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                previewIcon: e.event.getPreviewIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                homeScoreEx: e.event.getHomeScore().getResult(v.a.PART_1_EX),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                awayScoreEx: e.event.getAwayScore().getResult(v.a.PART_1_EX),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1, v.a.PART_1_EX),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1, v.a.PART_1_EX),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                homeScoreEx: e.event.getHomeScore().getResult(v.a.PART_2_EX),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                awayScoreEx: e.event.getAwayScore().getResult(v.a.PART_2_EX),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2, v.a.PART_2_EX),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2, v.a.PART_2_EX),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                homeScoreEx: e.event.getHomeScore().getResult(v.a.PART_3_EX),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                awayScoreEx: e.event.getAwayScore().getResult(v.a.PART_3_EX),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3, v.a.PART_3_EX),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3, v.a.PART_3_EX),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                homeScoreEx: e.event.getHomeScore().getResult(v.a.PART_4_EX),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                awayScoreEx: e.event.getAwayScore().getResult(v.a.PART_4_EX),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4, v.a.PART_4_EX),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4, v.a.PART_4_EX),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                homeScoreEx: e.event.getHomeScore().getResult(v.a.PART_5_EX),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                awayScoreEx: e.event.getAwayScore().getResult(v.a.PART_5_EX),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5, v.a.PART_5_EX),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5, v.a.PART_5_EX),
                                classes: "event__part--5"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.GAME),
                                awayScore: e.event.getAwayScore().getResult(v.a.GAME),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.GAME),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.GAME),
                                classes: "event__part--6"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBasketball(t) ? class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isHockey(t) ? class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isAmericanFootball(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBaseball(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon(),
                                i = t.hasShortResult(),
                                s = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), !i && r.createElement(r.Fragment, null, p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_6),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_6),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_6),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_6),
                                classes: "event__part--6"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_7),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_7),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_7),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_7),
                                classes: "event__part--7"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_8),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_8),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_8),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_8),
                                classes: "event__part--8"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_9),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_9),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_9),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_9),
                                classes: "event__part--9"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_X),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_X),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_X),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_X),
                                classes: "event__part--10"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--home"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--away"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.HITS),
                                awayScore: e.event.getAwayScore().getResult(v.a.HITS),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.HITS),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.HITS),
                                classes: "event__part--11"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.ERRORS),
                                awayScore: e.event.getAwayScore().getResult(v.a.ERRORS),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.ERRORS),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.ERRORS),
                                classes: "event__part--12"
                            })), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: s,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }), r.createElement(re, {
                                sentence: e.event.getSportSpecific().getSentence()
                            }))
                        }
                    }.render(e) : he.isHandball(t) ? class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isRugbyUnion(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                previewIcon: e.event.getPreviewIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isFloorball(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBandy(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon(),
                                isSlim: !0
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isFutsal(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeRedCardCount(),
                                a = t.getAwayRedCardCount(),
                                i = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            }), z.render({
                                redCardCount: n
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__scores" + (i ? " fontBold" : "")
                            }, ee.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                previewIcon: e.event.getPreviewIcon(),
                                isEventWithoutScoreAndNotRetired: e.event.getIsEventWithoutScoreAndNotRetired()
                            }), q.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.FULL_TIME),
                                awayScore: e.event.getAwayScore().getResult(v.a.FULL_TIME)
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: a
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), q.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1)
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isVolleyball(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon(),
                                i = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isCricket(t) ? class {
                        static homeScore(e) {
                            return ie.render({
                                cricketScore: e.event.getSportSpecific().getCricketScore(S.a.HOME)
                            })
                        }
                        static awayScore(e) {
                            return ie.render({
                                cricketScore: e.event.getSportSpecific().getCricketScore(S.a.AWAY)
                            })
                        }
                        static extraRow(e) {
                            return se.render({
                                sentence: e.event.getSportSpecific().getSentence(),
                                batsmanAndBowler: e.event.getSportSpecific().getBatsmanAndBowler(),
                                overs: e.event.getSportSpecific().getOvers()
                            })
                        }
                        static runRate(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeRunRate(),
                                a = t.getAwayRunRate(),
                                i = t.getRunRateTitle();
                            return r.createElement(r.Fragment, null, n ? r.createElement("div", {
                                className: "event__runRate event__runRate--home",
                                title: i
                            }, n) : null, a ? r.createElement("div", {
                                className: "event__runRate event__runRate--away",
                                title: i
                            }, a) : null)
                        }
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon(),
                                i = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                previewIcon: e.event.getPreviewIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), m.render({
                                homeScore: this.homeScore(e),
                                awayScore: this.awayScore(e),
                                homeHighlighted: e.event.getHighlighter().isCricketHomeScoreHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isCricketAwayScoreHighlighted()
                            }), this.runRate(e), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }), this.extraRow(e))
                        }
                    }.render(e) : he.isDarts(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getLegs(),
                                a = t.getSets(),
                                i = t.getCurrentPoints(),
                                s = t.getBestOfFrames(),
                                l = t.getHomeServiceIcon(),
                                o = t.getAwayServiceIcon(),
                                c = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: l,
                                awayServiceIcon: o
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), _e({
                                currentPoints: i,
                                legs: n,
                                sets: a,
                                highlighter: e.event.getHighlighter()
                            }), r.createElement(oe, {
                                bestOfFrames: s
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: c,
                                device: t,
                                oddsContent: e.oddsContent
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isSnooker(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific().getBestOfFrames();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), r.createElement(oe, {
                                bestOfFrames: t
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon(),
                                isSlim: !0
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBoxing(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getResult(),
                                a = t.getSubResult();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), le.render({
                                result: n,
                                subResult: a
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBeachVolleyball(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isAussieRules(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                previewIcon: e.event.getPreviewIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isRugbyLeague(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                previewIcon: e.event.getPreviewIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBadminton(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isWaterPolo(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_6),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_6),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_6),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_6),
                                classes: "event__part--6"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isGolf(t) ? t.isDuel() ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getFinalResult(),
                                a = t.isNational(),
                                i = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ae.render(e), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), r.createElement(Te, {
                                value: !a && n ? n.getValue() : "",
                                title: !a && n ? n.getTitle() : void 0,
                                classes: "fontBold",
                                highlighted: !1,
                                handlerOnMouseEnter: !a && n ? n.getHandlerOnMouseEnter() : void 0,
                                handlerOnMouseLeave: !a && n ? n.getHandlerOnMouseLeave() : void 0
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: W.TYPE_12
                            })), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: W.TYPE_12,
                                oneColumn: !0
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getScore(),
                                l = t.getHole(),
                                o = t.getToday(),
                                c = t.isStableford(),
                                g = t.isPlaying(),
                                _ = t.isStartTime(),
                                h = t.isCutOff(),
                                E = t.isScheduled();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift(),
                                isMyTeams: e.isMyTeams
                            }), r.createElement("div", {
                                className: "event__participant" + (h ? " player_cut_off" : "")
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isHomeHighlighted(),
                                classes: "event__result--lg" + (E ? "" : " fontBold") + (g ? " playing" : "") + (h ? " player_cut_off" : ""),
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.EVENT_PARTICIPANT_HOLE_INFO),
                                classes: _ ? "hole_start_time" : g ? "playing" : void 0,
                                style: {
                                    width: "56px"
                                }
                            }), !c && r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.EVENT_PARTICIPANT_PAR_TODAY),
                                classes: g ? "playing" : void 0,
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_1),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_2),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_3),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_4),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_5),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getScore(),
                                l = t.getHole(),
                                o = t.getToday(),
                                c = t.isStableford(),
                                g = t.isPlaying(),
                                _ = t.isStartTime(),
                                h = t.isCutOff(),
                                E = t.isScheduled(),
                                u = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant" + (h ? " player_cut_off" : "")
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isHomeHighlighted(),
                                classes: "event__result--lg" + (E ? "" : " fontBold") + (g ? " playing" : "") + (h ? " player_cut_off" : ""),
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.EVENT_PARTICIPANT_HOLE_INFO),
                                classes: _ ? "hole_start_time" : g ? "playing" : void 0,
                                style: {
                                    width: "56px"
                                }
                            }), !c && r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.EVENT_PARTICIPANT_PAR_TODAY),
                                classes: g ? "playing" : void 0,
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_1),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_2),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_3),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_4),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), r.createElement(Te, {
                                value: e.event.getHomeScore().getResult(v.a.PART_5),
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                classes: "colorAd",
                                style: {
                                    width: "41px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: u,
                                device: t,
                                oddsContent: W.TYPE_TW,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : he.isFieldHockey(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isTableTennis(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_6),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_6),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_6),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_6),
                                classes: "event__part--6"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_7),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_7),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_7),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_7),
                                classes: "event__part--7"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isBeachSoccer(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isMma(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getResult(),
                                a = t.getSubResult();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), le.render({
                                result: n,
                                subResult: a
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isNetball(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--5"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isPesapallo(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_4),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_4),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_4),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_4),
                                classes: "event__part--4"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_PESAPALLO_X1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_PESAPALLO_X1),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_PESAPALLO_X1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_PESAPALLO_X1),
                                classes: "event__part--5 event__part fontBold"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_5),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_5),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_5),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_5),
                                classes: "event__part--6"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_6),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_6),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_6),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_6),
                                classes: "event__part--7"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_7),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_7),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_7),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_7),
                                classes: "event__part--8"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_8),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_8),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_8),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_8),
                                classes: "event__part--9"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_PESAPALLO_X2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_PESAPALLO_X2),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_PESAPALLO_X2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_PESAPALLO_X2),
                                classes: "event__part--10 event__part fontBold"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_9),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_9),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_9),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_9),
                                classes: "event__part--11"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_PESAPALLO_PEN),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_PESAPALLO_PEN),
                                enableOneSideScore: !0,
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_PESAPALLO_PEN),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_PESAPALLO_PEN),
                                classes: "event__part--12"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--home event__spacer--1"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--away event__spacer--1"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--home event__spacer--2"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--away event__spacer--2"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--home event__spacer--3"
                            }), r.createElement("div", {
                                className: "event__spacer event__spacer--away event__spacer--3"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isMotorsport(t) ? null : he.isMotorsportAutoRacing(t) ? t.getSportSpecific().isRallye() ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: i ? i.getContent() : "",
                                classes: i ? i.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getLapTime(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getTeam(),
                                o = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant"
                            }, l), r.createElement(Te, {
                                value: a ? a.getContent() : "",
                                classes: a ? a.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: o,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime(),
                                s = t.getLaps(),
                                l = t.getGrid(),
                                o = t.getPitstops();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: i ? i.getContent() : "",
                                classes: i ? i.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.GRID),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.PITSTOPS),
                                style: {
                                    width: "50px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getLapTime(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getTeam(),
                                o = t.getLaps(),
                                c = t.getGrid(),
                                g = t.getPitstops(),
                                _ = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant"
                            }, l), r.createElement(Te, {
                                value: a ? a.getContent() : "",
                                classes: a ? a.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: c,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.GRID),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: g,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.PITSTOPS),
                                style: {
                                    width: "50px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: _,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : he.isMotorsportMotoRacing(t) ? t.isDuel() ? class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ae.render(e), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: W.TYPE_12
                            })), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : t.getSportSpecific().isSpeedway() ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getRides(),
                                s = t.getWins(),
                                l = t.getPoints(),
                                o = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: i,
                                classes: o ? "playing" : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.RIDES),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: s,
                                classes: o ? "playing" : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.WINS),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                classes: o ? "playing" : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS),
                                style: {
                                    width: "50px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTeam(),
                                l = t.getRides(),
                                o = t.getWins(),
                                c = t.getPoints(),
                                g = t.isPlaying(),
                                _ = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant"
                            }, s), Ne.render({
                                rides: l,
                                wins: o,
                                points: c,
                                isPlaying: g,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "50px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: _,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime(),
                                s = t.getLaps(),
                                l = t.getGrid();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: i ? i.getContent() : "",
                                classes: i ? i.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.GRID),
                                style: {
                                    width: "50px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getLapTime(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getTeam(),
                                o = t.getLaps(),
                                c = t.getGrid(),
                                g = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant"
                            }, l), r.createElement(Te, {
                                value: a ? a.getContent() : "",
                                classes: a ? a.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: c,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.GRID),
                                style: {
                                    width: "50px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: g,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : he.isCycling(t) ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: i ? i.getContent() : "",
                                classes: i ? i.getClasses() : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.LAPS_DISTANCE) || e.event.getHighlighter().isResultHighlighted(ge.a.GAP),
                                style: {
                                    width: "100px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getTeam(),
                                a = t.getRank(),
                                i = t.getLapTime(),
                                s = t.getCountryId(),
                                l = t.getCountryName(),
                                o = t.getCyclingJerseys();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: a,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: s,
                                countryName: l
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), o && Se.render({
                                cyclingJerseys: o.getItems(),
                                handlerOnMouseEnter: o.getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: o.getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, n), ue.render({
                                lapTime: i,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "100px"
                                }
                            }))
                        }
                    }.render(e) : he.isHorseRacing(t) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTeam(),
                                l = t.getAge(),
                                o = t.getWeight(),
                                c = t.getDistance(),
                                g = t.getStartingPrice(),
                                _ = t.getStartingPriceLink(),
                                h = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant"
                            }, s), r.createElement(Te, {
                                value: l,
                                classes: "age",
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                classes: "weight",
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: c,
                                style: {
                                    width: "50px"
                                }
                            }), !e.event.showOdds(e.pageType) && class {
                                static render(e) {
                                    return r.createElement("div", {
                                        className: "event__result" + (e.highlighted ? " highlighted" : ""),
                                        style: e.style ? e.style : void 0
                                    }, e.link ? r.createElement("a", {
                                        href: e.link,
                                        target: "_blank"
                                    }, r.createElement("span", null, e.value)) : e.value)
                                }
                            }.render({
                                value: g,
                                link: _,
                                style: {
                                    width: "50px"
                                }
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: h,
                                device: t,
                                oddsContent: W.TYPE_EACH_WAY,
                                oneColumn: !0
                            })))
                        }
                    }.render(e) : he.isEsports(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : he.isWinterSports(t) ? null : he.isWinterSportsSkiJumping(t) ? t.getSportSpecific().isTeam() ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getPointsRound1(),
                                s = t.getPointsRound2(),
                                l = t.getPoints(),
                                o = t.getJumpCount(),
                                c = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.JUMP_COUNT),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: i,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS_ROUND_1),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS_ROUND_2),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                classes: c ? "playing" : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getPointsRound1(),
                                l = t.getPointsRound2(),
                                o = t.getPoints(),
                                c = t.getJumpCount(),
                                g = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement(Te, {
                                value: c,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.JUMP_COUNT),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: s,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS_ROUND_1),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: l,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS_ROUND_2),
                                style: {
                                    width: "70px"
                                }
                            }), r.createElement(Te, {
                                value: o,
                                classes: g ? "playing" : void 0,
                                highlighted: e.event.getHighlighter().isResultHighlighted(ge.a.POINTS),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getJumpRound1(),
                                s = t.getPointsRound1(),
                                l = t.getJumpRound2(),
                                o = t.getPointsRound2(),
                                c = t.getPoints(),
                                g = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), pe.render({
                                jumpRound1: i,
                                pointsRound1: s,
                                jumpRound2: l,
                                pointsRound2: o,
                                points: c,
                                isPlaying: g,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getJumpRound1(),
                                l = t.getPointsRound1(),
                                o = t.getJumpRound2(),
                                c = t.getPointsRound2(),
                                g = t.getPoints(),
                                _ = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), pe.render({
                                jumpRound1: s,
                                pointsRound1: l,
                                jumpRound2: o,
                                pointsRound2: c,
                                points: g,
                                isPlaying: _,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : he.isWinterSportsAlpineSkiing(t) ? t.getSportSpecific().hasRounds() ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getTime(),
                                s = t.getTimeRound1(),
                                l = t.getTimeRound2(),
                                o = t.getGap(),
                                c = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), Re.render({
                                gap: o,
                                time: i,
                                isPlaying: c,
                                timeRound1: s,
                                timeRound2: l,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTime(),
                                l = t.getTimeRound1(),
                                o = t.getTimeRound2(),
                                c = t.getGap(),
                                g = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), Re.render({
                                gap: c,
                                time: s,
                                isPlaying: g,
                                timeRound1: l,
                                timeRound2: o,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getTime(),
                                s = t.getGap(),
                                l = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), ve.render({
                                gap: s,
                                time: i,
                                isPlaying: l,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTime(),
                                l = t.getGap(),
                                o = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), ve.render({
                                gap: l,
                                time: s,
                                isPlaying: o,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : he.isWinterSportsCrossCountry(t) ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getTime(),
                                s = t.getGap(),
                                l = t.isOnTrack();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), ve.render({
                                gap: s,
                                time: i,
                                isPlaying: l,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTime(),
                                l = t.getGap(),
                                o = t.isOnTrack();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), ve.render({
                                gap: l,
                                time: s,
                                isPlaying: o,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : he.isWinterSportsBiathlon(t) ? e.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getShooting(),
                                s = t.getTime(),
                                l = t.getGap(),
                                o = t.isOnTrack();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: n ? n.getClasses() + " event__result--rank" : "event__result--rank",
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                style: {
                                    width: "50px"
                                }
                            }), Ie.render({
                                shooting: i,
                                gap: l,
                                time: s,
                                isPlaying: o,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getShooting(),
                                l = t.getTime(),
                                o = t.getGap(),
                                c = t.isOnTrack();
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), Ie.render({
                                shooting: s,
                                gap: o,
                                time: l,
                                isPlaying: c,
                                highlighter: e.event.getHighlighter(),
                                style: {
                                    width: "70px"
                                }
                            }))
                        }
                    }.render(e) : he.isKabaddi(t) ? class {
                        static render(e) {
                            return r.createElement(r.Fragment, null, d(e), e.myGamesGroups ? e.myGamesGroups.renderDropDown({
                                event: e.event
                            }, e.selectedMyGamesGroupKey) : null, y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                shortStageTime: e.event.getShortStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getHomeParticipant()
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, J.render({
                                participant: e.event.getAwayParticipant()
                            }), T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                homeHighlighted: e.event.getHighlighter().isHomeHighlighted(),
                                awayHighlighted: e.event.getHighlighter().isAwayHighlighted(),
                                previewIcon: e.event.getPreviewIcon()
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_1),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_1),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_1),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_1),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_2),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_2),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_2),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_2),
                                classes: "event__part--2"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.PART_3),
                                awayScore: e.event.getAwayScore().getResult(v.a.PART_3),
                                homeHighlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.PART_3),
                                awayHighlighted: e.event.getHighlighter().isAwayScoreHighlighted(v.a.PART_3),
                                classes: "event__part--3"
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(K, {
                                isEnabled: e.event.getInfoIcon().isEnabled(),
                                handlerOnClick: e.event.getInfoIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getInfoIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getInfoIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIcon()
                            }), r.createElement(V, {
                                isEnabled: e.event.getLineupIcon().isEnabled(),
                                handlerOnClick: e.event.getLineupIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLineupIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLineupIcon().getHandlerOnMouseLeave()
                            }), r.createElement(L, {
                                enabled: e.event.getLiveBettingIcon().isEnabled(),
                                class: e.event.getLiveBettingIcon().getClass(),
                                dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                                handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave()
                            }), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(e) : null
                }
            }
            var De = n(76);
            class Ce {
                static render(e) {
                    return e.isEnabled() ? r.createElement("div", {
                        className: "event__stage"
                    }, De.a.render({
                        enabled: e.isEnabled(),
                        title: e.getTitle(),
                        text: e.getText(),
                        handlerOnClick: e.getHandlerOnClick(),
                        handlerOnMouseEnter: e.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.getHandlerOnMouseLeave()
                    })) : null
                }
            }
            class ye {
                static render(e) {
                    if (e.eventStage != C.a.FINISHED) return O.a.render(e)
                }
            }
            class He {
                static render(e) {
                    if ("" === e.startDate) return null;
                    const t = [e.startDate, e.displayTime && e.startTime].filter(e => e).join(" ");
                    return r.createElement("div", {
                        className: "event__time" + (R.a.isLineThrough(e.eventStage) ? " lineThrough" : "")
                    }, t)
                }
            }
            var Le, Pe = function(e, t) {
                var n = {};
                for (var a in e) Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (n[a] = e[a]);
                if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                    var r = 0;
                    for (a = Object.getOwnPropertySymbols(e); r < a.length; r++) t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[r]) && (n[a[r]] = e[a[r]])
                }
                return n
            };

            function Me(e) {
                var t = Pe(e, []);
                return t.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                    startTime: t.event.getStartTime(),
                    startDate: t.event.getStartDate(t.blockType),
                    dateFormat: t.event.getDateFormat(t.blockType),
                    stageTime: t.event.getStageTime(),
                    eventStage: t.event.getEventStage(),
                    eventStageType: t.event.getEventStageType(),
                    usTimeFormat: t.event.hasUsTimeFormat(),
                    previewIcon: t.event.getPreviewIcon(),
                    showDateWithTime: t.showEventDate || t.event.getShowDateWithTime()
                }) : r.createElement(r.Fragment, null, ye.render({
                    stageTime: t.event.getStageTime(),
                    eventStage: t.event.getEventStage(),
                    usTimeFormat: t.event.hasUsTimeFormat()
                }), "hockey" === t.event.getSportName() || "floorball" === t.event.getSportName() || "field-hockey" === t.event.getSportName() ? null : p.render({
                    homeScore: t.event.getHomeScore().getResult(v.a.FULL_TIME),
                    awayScore: t.event.getAwayScore().getResult(v.a.FULL_TIME),
                    classes: "event__part--regulation",
                    style: "basketball" === t.event.getSportName() ? {
                        width: "34px"
                    } : {
                        width: "26px"
                    }
                }), m.render({
                    homeScore: t.event.getHomeScore().getResult(v.a.CURRENT),
                    awayScore: t.event.getAwayScore().getResult(v.a.CURRENT),
                    previewIcon: t.event.getPreviewIcon()
                }), (n = t.event.getStartDate(), a = t.event.getEventStage(), i = t.event.getStartTime(), t.showEventDate ? He.render({
                    displayTime: !1,
                    startDate: n,
                    eventStage: a,
                    startTime: i
                }) : null));
                var n, a, i
            }
            class Fe {
                static render(e) {
                    return r.createElement(L, {
                        enabled: e.event.getLiveBettingIcon().isEnabled(),
                        class: e.event.getLiveBettingIcon().getClass(),
                        dataBookmakerId: e.event.getLiveBettingIcon().getMainBookmakerId(),
                        handlerOnClick: e.event.getLiveBettingIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getLiveBettingIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getLiveBettingIcon().getHandlerOnMouseLeave(),
                        isMobileType: !0
                    })
                }
            }
            class we {
                static render(e) {
                    return r.createElement(Y, {
                        isEnabled: e.side.isEnabled(),
                        handlerOnClick: e.side.getHandlerOnClick(),
                        handlerOnMouseEnter: e.side.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.side.getHandlerOnMouseLeave()
                    })
                }
            }

            function be(e) {
                return r.createElement("div", {
                    className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " event__participant--highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                }, e.children)
            }

            function fe(e) {
                return r.createElement("div", {
                    className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " event__participant--highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                }, e.children)
            }
            class ke {
                static _showTimeOnTournamentPage(e) {
                    const t = y.shouldShowTime(e.event.getEventStageType(), e.event.getEventStage(), e.event.getShowDateWithTime() || e.showEventDate);
                    return e.showEventDate && t ? He.render({
                        startDate: e.event.getStartDate(),
                        eventStage: e.event.getEventStage(),
                        startTime: e.event.getStartTime(),
                        displayTime: e.event.getEventStageType() !== D.a.FINISHED
                    }) : null
                }
                static _displayTimeOrScore(e) {
                    return e.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(e.blockType),
                        dateFormat: e.event.getDateFormat(e.blockType),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                    }) : r.createElement(r.Fragment, null, m.render({
                        homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                        awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                        previewIcon: e.event.getPreviewIcon()
                    }), this._showTimeOnTournamentPage(e))
                }
                static _displayServe(e) {
                    const t = e.event.getSportSpecific(),
                        n = t.getHomeServiceIcon(),
                        a = t.getAwayServiceIcon();
                    return ae({
                        homeServiceIcon: n,
                        awayServiceIcon: a
                    })
                }
                static render(e) {
                    const t = e.event.isDuel();
                    return r.createElement(r.Fragment, null, d(e), J.render({
                        participant: e.event.getHomeParticipant()
                    }), r.createElement(be, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getHomeParticipant()
                    }), we.render({
                        side: e.event.getHomeWinnerIcon()
                    })), J.render({
                        participant: e.event.getAwayParticipant()
                    }), r.createElement(fe, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getAwayParticipant()
                    }), we.render({
                        side: e.event.getAwayWinnerIcon()
                    })), ye.render({
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        usTimeFormat: e.event.hasUsTimeFormat()
                    }), Ce.render(e.event.getFinalResultOnlyIcon()), this._displayServe(e), this._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                        event: e.event,
                        isDuel: t,
                        device: n,
                        oddsContent: e.oddsContent
                    })), r.createElement(N, {
                        iconName: "tv",
                        tvIcon: e.event.getTvIconMobile()
                    }), r.createElement(X, {
                        isEnabled: e.event.getTvStreamIcon().isEnabled(),
                        isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                        handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                    }), Fe.render(e), P.render({
                        enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                        class: e.event.getWinLoseIcon().getClass(),
                        shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                        handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                    }), he.isBaseball(e.event) && r.createElement(re, {
                        sentence: e.event.getSportSpecific().getSentence()
                    }))
                }
            }! function(e) {
                e.BLOCK_TYPE_SUMMARY_FIXTURES = "summary-fixtures", e.BLOCK_TYPE_SUMMARY_RESULTS = "summary-results", e.BLOCK_TYPE_SUMMARY = "summary", e.BLOCK_TYPE_RESULTS = "results", e.BLOCK_TYPE_FIXTURES = "fixtures", e.BLOCK_TYPE_SQUAD = "squad", e.BLOCK_TYPE_TRANSFERS = "transfers", e.BLOCK_TYPE_NEWS = "news", e.BLOCK_TYPE_DRAW = "draw", e.BLOCK_TYPE_STANDINGS_TABLE = "standings_table", e.BLOCK_TYPE_PARTICIPANT_TEAMS = "participants_teams", e.BLOCK_TYPE_ARCHIVE = "archive", e.BLOCK_TYPE_STANDINGS_DRAW = "standings_draw", e.BLOCK_TYPE_PARTICIPANT_PLAYERS = "participants_players", e.BLOCK_TYPE_DEFAULT = ""
            }(Le || (Le = {}));
            var Ge = n(62);
            class Ue extends r.Component {
                static _displayResult(e) {
                    if (e.event.getEventStageType() != D.a.FINISHED) return;
                    const t = e.event.getSportSpecific().getResult();
                    return le.render({
                        result: t,
                        subResult: null
                    })
                }
                static render(e) {
                    return r.createElement(r.Fragment, null, d(e), r.createElement(be, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getHomeParticipant()
                    }), we.render({
                        side: e.event.getHomeWinnerIcon()
                    })), r.createElement(fe, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getAwayParticipant()
                    }), we.render({
                        side: e.event.getAwayWinnerIcon()
                    })), function(e, t, n) {
                        const a = {
                            startTime: e.getStartTime(),
                            startDate: e.getStartDate(),
                            eventStage: e.getEventStage(),
                            usTimeFormat: e.hasUsTimeFormat()
                        };
                        if (t == ce.PAGE_TYPE_SPORT) return e.getEventStageType() == D.a.FINISHED ? null : R.a.render(Object.assign(Object.assign({}, a), {
                            dateFormat: e.getDateFormat()
                        }));
                        if (e.getEventStageType() == D.a.FINISHED) return n == Le.BLOCK_TYPE_SUMMARY ? null : R.a.render(Object.assign(Object.assign({}, a), {
                            dateFormat: Ge.a.DATE
                        }));
                        let r = !0;
                        return e.isMatchToday() && n == Le.BLOCK_TYPE_SUMMARY && (r = !1), R.a.render(Object.assign(Object.assign({}, a), {
                            dateFormat: Ge.a.TIME,
                            showDateWithTime: r
                        }))
                    }(e.event, e.pageType, e.blockType), Ce.render(e.event.getFinalResultOnlyIcon()), this._displayResult(e), ye.render({
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        usTimeFormat: e.event.hasUsTimeFormat()
                    }), r.createElement(N, {
                        iconName: "tv",
                        tvIcon: e.event.getTvIconMobile()
                    }), r.createElement(X, {
                        isEnabled: e.event.getTvStreamIcon().isEnabled(),
                        isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                        handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                    }), Fe.render(e), P.render({
                        enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                        class: e.event.getWinLoseIcon().getClass(),
                        shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                        handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                    }))
                }
            }
            class Be extends r.Component {
                static _displayTimeOrScore(e) {
                    return e.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(e.blockType),
                        dateFormat: e.event.getDateFormat(e.blockType),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                    }) : r.createElement(r.Fragment, null, e.event.getEventStageType() === D.a.LIVE && p.render({
                        homeScore: e.event.getHomeScore().getResult(v.a.GAMES_IN_LAST_SET),
                        awayScore: e.event.getAwayScore().getResult(v.a.GAMES_IN_LAST_SET),
                        classes: "event__part--1"
                    }), m.render({
                        homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                        awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                        previewIcon: e.event.getPreviewIcon()
                    }), ke._showTimeOnTournamentPage(e))
                }
                static _displayServe(e) {
                    const t = e.event.getSportSpecific(),
                        n = t.getHomeServiceIcon(),
                        a = t.getAwayServiceIcon();
                    return ae({
                        homeServiceIcon: n,
                        awayServiceIcon: a
                    })
                }
                static render(e) {
                    const t = e.event.isDuel();
                    return r.createElement(r.Fragment, null, d(e), r.createElement(be, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getHomeParticipant()
                    }), we.render({
                        side: e.event.getHomeWinnerIcon()
                    })), r.createElement(fe, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getAwayParticipant()
                    }), we.render({
                        side: e.event.getAwayWinnerIcon()
                    })), Ce.render(e.event.getFinalResultOnlyIcon()), this._displayServe(e), this._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                        event: e.event,
                        isDuel: t,
                        device: n,
                        oddsContent: e.oddsContent
                    })), r.createElement(N, {
                        iconName: "tv",
                        tvIcon: e.event.getTvIconMobile()
                    }), r.createElement(X, {
                        isEnabled: e.event.getTvStreamIcon().isEnabled(),
                        isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                        handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                    }), Fe.render(e), P.render({
                        enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                        class: e.event.getWinLoseIcon().getClass(),
                        shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                        handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                    }))
                }
            }
            class We {
                static _displayTimeOrScore(e) {
                    const t = e.event.getSportSpecific(),
                        n = t.getFinalResult(),
                        a = t.isNational();
                    return e.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.event.getShowDateWithTime()
                    }) : r.createElement(r.Fragment, null, e.event.getEventStageType() === D.a.LIVE ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.event.getShowDateWithTime(),
                        dateFormat: e.event.getDateFormat()
                    }) : null, e.event.getEventStageType() === D.a.LIVE || a ? m.render({
                        homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                        awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                        previewIcon: e.event.getPreviewIcon()
                    }) : r.createElement(Te, {
                        value: !a && n ? n.getValue() : "",
                        title: !a && n ? n.getTitle() : void 0,
                        classes: "fontBold",
                        highlighted: !1,
                        handlerOnMouseEnter: !a && n ? n.getHandlerOnMouseEnter() : void 0,
                        handlerOnMouseLeave: !a && n ? n.getHandlerOnMouseLeave() : void 0
                    }), e.showEventDate && He.render({
                        startDate: e.event.getStartDate(),
                        eventStage: e.event.getEventStage(),
                        startTime: e.event.getStartTime(),
                        displayTime: e.event.getEventStageType() !== D.a.FINISHED
                    }))
                }
                static render(e) {
                    const t = e.event.isDuel();
                    return r.createElement(r.Fragment, null, d(e), r.createElement(be, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getHomeParticipant()
                    }), we.render({
                        side: e.event.getHomeWinnerIcon()
                    })), r.createElement(fe, {
                        event: e.event
                    }, T.a.render({
                        participant: e.event.getAwayParticipant()
                    }), we.render({
                        side: e.event.getAwayWinnerIcon()
                    })), Ce.render(e.event.getFinalResultOnlyIcon()), We._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                        event: e.event,
                        isDuel: t,
                        device: n,
                        oddsContent: e.oddsContent
                    })), r.createElement(N, {
                        iconName: "tv",
                        tvIcon: e.event.getTvIconMobile()
                    }), r.createElement(X, {
                        isEnabled: e.event.getTvStreamIcon().isEnabled(),
                        isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                        handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                    }), Fe.render(e), P.render({
                        enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                        class: e.event.getWinLoseIcon().getClass(),
                        shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                        handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                    }))
                }
            }
            class xe {
                static _displayTimeOrScore(e) {
                    return e.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(e.blockType),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.showEventDate || e.event.getShowDateWithTime(),
                        dateFormat: e.event.getDateFormat(e.blockType)
                    }) : r.createElement(r.Fragment, null, e.event.getEventStageType() === D.a.LIVE ? y.render({
                        startTime: e.event.getStartTime(),
                        startDate: e.event.getStartDate(e.blockType),
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        eventStageType: e.event.getEventStageType(),
                        usTimeFormat: e.event.hasUsTimeFormat(),
                        showDateWithTime: e.event.getShowDateWithTime()
                    }) : null, m.render({
                        homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                        awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                        previewIcon: e.event.getPreviewIcon()
                    }), e.showEventDate && He.render({
                        startDate: e.event.getStartDate(e.blockType),
                        eventStage: e.event.getEventStage(),
                        startTime: e.event.getStartTime(),
                        displayTime: e.event.getEventStageType() !== D.a.FINISHED
                    }))
                }
                static render(e) {
                    const t = e.event.isDuel();
                    return r.createElement(r.Fragment, null, d(e), r.createElement("div", {
                        className: "event__participant event__participant--home" + (e.event.getHighlighter().isHomeHighlighted() ? " event__participant--highlighted" : "") + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                    }, T.a.render({
                        participant: e.event.getHomeParticipant()
                    }), we.render({
                        side: e.event.getHomeWinnerIcon()
                    })), r.createElement("div", {
                        className: "event__participant event__participant--away" + (e.event.getHighlighter().isAwayHighlighted() ? " event__participant--highlighted" : "") + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                    }, T.a.render({
                        participant: e.event.getAwayParticipant()
                    }), we.render({
                        side: e.event.getAwayWinnerIcon()
                    })), ye.render({
                        stageTime: e.event.getStageTime(),
                        eventStage: e.event.getEventStage(),
                        usTimeFormat: e.event.hasUsTimeFormat()
                    }), Ce.render(e.event.getFinalResultOnlyIcon()), xe._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                        event: e.event,
                        isDuel: t,
                        device: n,
                        oddsContent: W.TYPE_12
                    })), r.createElement(N, {
                        iconName: "tv",
                        tvIcon: e.event.getTvIconMobile()
                    }), r.createElement(X, {
                        isEnabled: e.event.getTvStreamIcon().isEnabled(),
                        isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                        handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                    }), Fe.render(e), P.render({
                        enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                        class: e.event.getWinLoseIcon().getClass(),
                        shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                        handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                        handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                    }))
                }
            }
            class Xe {
                static render(e) {
                    let t = "",
                        n = "",
                        a = "",
                        i = "",
                        s = "",
                        l = "",
                        o = null,
                        c = !1;
                    if (he.isWinterSportsSkiJumping(e.event)) {
                        const s = e.event.getSportSpecific();
                        return t = s.getPoints(), n = s.getJumpCount(), a = s.getJumpRound1(), i = s.getJumpRound2(), c = s.isPlaying(), e.event.getSportSpecific().isTeam() ? class {
                            static render(e) {
                                var t, n, a, i;
                                return r.createElement(r.Fragment, null, r.createElement(Te, {
                                    value: e.jumpCount,
                                    highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.JUMP_COUNT),
                                    style: e.style
                                }), void 0 !== e.pointsRound1 && r.createElement(Te, {
                                    value: e.pointsRound1,
                                    highlighted: null === (n = e.highlighter) || void 0 === n ? void 0 : n.isResultHighlighted(ge.a.POINTS_ROUND_1),
                                    style: e.style
                                }), void 0 !== e.pointsRound2 && r.createElement(Te, {
                                    value: e.pointsRound2,
                                    highlighted: null === (a = e.highlighter) || void 0 === a ? void 0 : a.isResultHighlighted(ge.a.POINTS_ROUND_2),
                                    style: e.style
                                }), r.createElement(Te, {
                                    value: e.points,
                                    classes: "event__result--points" + (e.isPlaying ? " playing" : ""),
                                    highlighted: null === (i = e.highlighter) || void 0 === i ? void 0 : i.isResultHighlighted(ge.a.POINTS),
                                    style: e.style
                                }))
                            }
                        }.render({
                            jumpCount: n,
                            points: t,
                            isPlaying: c
                        }) : pe.render({
                            jumpRound1: a,
                            jumpRound2: i,
                            points: t,
                            isPlaying: c
                        })
                    }
                    if (he.isWinterSportsAlpineSkiing(e.event)) {
                        const t = e.event.getSportSpecific();
                        return l = t.getTime(), o = t.getGap(), c = t.isPlaying(), ve.render({
                            gap: o,
                            time: l,
                            isPlaying: c
                        })
                    }
                    if (he.isWinterSportsCrossCountry(e.event)) {
                        const t = e.event.getSportSpecific();
                        return l = t.getTime(), o = t.getGap(), c = t.isOnTrack(), ve.render({
                            gap: o,
                            time: l,
                            isPlaying: c
                        })
                    }
                    if (he.isWinterSportsBiathlon(e.event)) {
                        const t = e.event.getSportSpecific();
                        return s = t.getShooting(), l = t.getTime(), c = t.isOnTrack(), o = t.getGap(), class {
                            static render(e) {
                                var t;
                                return r.createElement(r.Fragment, null, r.createElement(Te, {
                                    value: e.shooting,
                                    classes: "event__result--shooting" + (e.isPlaying ? " playing" : ""),
                                    highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.SHOOTING),
                                    style: e.style
                                }), class {
                                    static render(e) {
                                        var t, n, a;
                                        const i = e.gap && "" == e.gap.getContent();
                                        return r.createElement(r.Fragment, null, i ? r.createElement(Te, {
                                            value: e.time,
                                            classes: e.isPlaying ? "playing" : void 0,
                                            highlighted: null === (t = e.highlighter) || void 0 === t ? void 0 : t.isResultHighlighted(ge.a.TIME),
                                            style: e.style
                                        }) : r.createElement(Te, {
                                            value: e.gap ? e.gap.getContent() : "",
                                            classes: e.gap ? e.gap.getClasses() : "",
                                            highlighted: (null === (n = e.highlighter) || void 0 === n ? void 0 : n.isResultHighlighted(ge.a.LAPS_DISTANCE)) || (null === (a = e.highlighter) || void 0 === a ? void 0 : a.isResultHighlighted(ge.a.GAP)),
                                            style: e.style
                                        }))
                                    }
                                }.render(e))
                            }
                        }.render({
                            shooting: s,
                            time: l,
                            gap: o,
                            isPlaying: c,
                            highlighter: e.event.getHighlighter()
                        })
                    }
                    return null
                }
            }
            class Ye {
                static getShowEventDate(e, t, n) {
                    if (n === Le.BLOCK_TYPE_SUMMARY) return !1;
                    if (n === Le.BLOCK_TYPE_FIXTURES && !y.shouldShowTime(e.getEventStageType(), e.getEventStage(), e.getShowDateWithTime())) return !1;
                    const a = [ce.PAGE_TYPE_TEAM, ce.PAGE_TYPE_PLAYER, ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_SERIES].includes(t),
                        r = t === ce.PAGE_TYPE_CATEGORY,
                        i = n === Le.BLOCK_TYPE_RESULTS,
                        s = e.isMatchToday() || e.getIsLive();
                    return a && (!s || i) || r && !e.getIsLive()
                }
                static render({
                    event: e,
                    pageType: t,
                    blockType: n,
                    isMyTeams: a,
                    oddsContent: i
                }) {
                    const s = {
                        showEventDate: this.getShowEventDate(e, t, n),
                        pageType: t,
                        blockType: n,
                        event: e,
                        isMyTeams: a,
                        oddsContent: i
                    };
                    return he.isSoccer(s.event) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeRedCardCount(),
                                a = t.getAwayRedCardCount(),
                                i = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(be, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), z.render({
                                redCardCount: n
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage(),
                                goalUnderReviewIcon: t.getHomeGoalUnderReviewIcon()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(fe, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: a
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage(),
                                goalUnderReviewIcon: t.getAwayGoalUnderReviewIcon()
                            })), Ce.render(e.event.getFinalResultOnlyIcon()), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), !e.event.getTvStreamIcon().isEnabled() && r.createElement(te, {
                                isEnabled: e.event.getAudioCommentsIcon().isEnabled(),
                                handlerOnClick: e.event.getAudioCommentsIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAudioCommentsIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAudioCommentsIcon().getHandlerOnMouseLeave()
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), Me(Object.assign({}, e)), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), Fe.render(e), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(s) : he.isTennis(s.event) ? class {
                        static _displayTimeOrScore(e) {
                            if (e.event.getEventStageType() === D.a.SCHEDULED) return y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                stageTime: e.event.getStageTime(),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                showDateWithTime: e.event.getShowDateWithTime(),
                                previewIcon: e.event.getPreviewIcon()
                            });
                            const t = y.shouldShowTime(e.event.getEventStageType(), e.event.getEventStage(), e.event.getShowDateWithTime());
                            return r.createElement(r.Fragment, null, e.event.getEventStageType() === D.a.LIVE && r.createElement(r.Fragment, null, p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.GAME),
                                awayScore: e.event.getAwayScore().getResult(v.a.GAME),
                                classes: "event__part--1"
                            }), p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.GAMES_IN_LAST_SET),
                                awayScore: e.event.getAwayScore().getResult(v.a.GAMES_IN_LAST_SET),
                                classes: "event__part--2"
                            })), ye.render({
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                usTimeFormat: e.event.hasUsTimeFormat()
                            }), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                previewIcon: e.event.getPreviewIcon()
                            }), e.showEventDate && t && He.render({
                                startDate: e.event.getStartDate(),
                                eventStage: e.event.getEventStage(),
                                startTime: e.event.getStartTime(),
                                displayTime: e.event.getEventStageType() !== D.a.FINISHED
                            }))
                        }
                        static _displayServe(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            })
                        }
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), r.createElement(be, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement(fe, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), this._displayServe(e), this._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), Fe.render(e), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(s) : he.isBadminton(s.event) || he.isBeachVolleyball(s.event) || he.isTableTennis(s.event) || he.isVolleyball(s.event) ? Be.render(s) : he.isAmericanFootball(s.event) || he.isBaseball(s.event) || he.isPesapallo(s.event) ? ke.render(s) : he.isDarts(s.event) ? class {
                        static _showTimeOnTournamentPage(e) {
                            const t = y.shouldShowTime(e.event.getEventStageType(), e.event.getEventStage(), e.event.getShowDateWithTime() || e.showEventDate);
                            return e.showEventDate && t ? He.render({
                                startDate: e.event.getStartDate(),
                                eventStage: e.event.getEventStage(),
                                startTime: e.event.getStartTime(),
                                displayTime: e.event.getEventStageType() !== D.a.FINISHED
                            }) : null
                        }
                        static _displayTimeOrScore(e) {
                            if (e.event.getEventStageType() === D.a.SCHEDULED) return y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(e.blockType),
                                dateFormat: e.event.getDateFormat(e.blockType),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                showDateWithTime: e.event.getShowDateWithTime(e.pageType)
                            });
                            if (e.event.getEventStageType() === D.a.LIVE) {
                                const t = e.event.getSportSpecific(),
                                    n = t.getLegs(),
                                    a = t.getSets();
                                return _e({
                                    currentPoints: t.getCurrentPoints(),
                                    legs: n,
                                    sets: a
                                })
                            }
                            return r.createElement(r.Fragment, null, m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                previewIcon: e.event.getPreviewIcon()
                            }), this._showTimeOnTournamentPage(e))
                        }
                        static _displayServe(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon();
                            return ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            })
                        }
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), r.createElement(be, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            })), r.createElement(fe, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            })), ye.render({
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                usTimeFormat: e.event.hasUsTimeFormat()
                            }), Ce.render(e.event.getFinalResultOnlyIcon()), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), this._displayServe(e), this._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), Fe.render(e), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(s) : he.isCricket(s.event) ? class {
                        static _homeScore(e) {
                            return ie.render({
                                cricketScore: e.event.getSportSpecific().getCricketScore(S.a.HOME)
                            })
                        }
                        static _awayScore(e) {
                            return ie.render({
                                cricketScore: e.event.getSportSpecific().getCricketScore(S.a.AWAY)
                            })
                        }
                        static _extraRow(e) {
                            return se.render({
                                sentence: e.event.getSportSpecific().getSentence()
                            })
                        }
                        static _displayTimeOrScore(e) {
                            if (e.event.getEventStageType() === D.a.SCHEDULED) {
                                const t = e.pageType === ce.PAGE_TYPE_CATEGORY;
                                return y.render({
                                    startTime: e.event.getStartTime(),
                                    startDate: e.event.getStartDate(e.blockType),
                                    stageTime: e.event.getStageTime(),
                                    eventStage: e.event.getEventStage(),
                                    eventStageType: e.event.getEventStageType(),
                                    finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                    usTimeFormat: e.event.hasUsTimeFormat(),
                                    previewIcon: e.event.getPreviewIcon(),
                                    showDateWithTime: e.event.getShowDateWithTime() || t,
                                    dateFormat: e.event.getDateFormat(e.blockType),
                                    showStatusUnderTime: !1
                                })
                            }
                            return r.createElement(r.Fragment, null, m.render({
                                homeScore: this._homeScore(e),
                                awayScore: this._awayScore(e),
                                previewIcon: e.event.getPreviewIcon()
                            }), e.showEventDate && He.render({
                                startDate: e.event.getStartDate(),
                                eventStage: e.event.getEventStage(),
                                startTime: e.event.getStartTime(),
                                displayTime: e.event.getEventStageType() !== D.a.FINISHED
                            }))
                        }
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getHomeServiceIcon(),
                                a = t.getAwayServiceIcon(),
                                i = e.event.isDuel(),
                                s = [Le.BLOCK_TYPE_RESULTS, Le.BLOCK_TYPE_SUMMARY_RESULTS].includes(e.blockType);
                            return r.createElement(r.Fragment, null, d(e), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(be, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(fe, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), !s && ae({
                                homeServiceIcon: n,
                                awayServiceIcon: a
                            }), ye.render({
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                usTimeFormat: e.event.hasUsTimeFormat()
                            }), this._displayTimeOrScore(e), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: t,
                                oddsContent: e.oddsContent
                            })), !s && Fe.render(e), this._extraRow(e))
                        }
                    }.render(Object.assign(Object.assign({}, s), {
                        blockType: n
                    })) : he.isMma(s.event) || he.isBoxing(s.event) ? Ue.render(s) : he.isCycling(s.event) ? s.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: "event__result--noLive event__result--rank " + (n ? n.getClasses() : null),
                                highlighted: e.event.getHighlighter().isRankHighlighted()
                            }), ue.render({
                                lapTime: i
                            }))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getTeam(),
                                a = t.getRank(),
                                i = t.getLapTime(),
                                s = t.getCountryId(),
                                l = t.getCountryName(),
                                o = t.getCyclingJerseys();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: a,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: s,
                                countryName: l
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), o && Se.render({
                                cyclingJerseys: o.getItems(),
                                handlerOnMouseEnter: o.getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: o.getHandlerOnMouseLeave()
                            })), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, n), ue.render({
                                lapTime: i
                            }))
                        }
                    }.render(s) : he.isGolf(s.event) ? s.event.isDuel() ? We.render(s) : s.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getScore(),
                                l = t.getHole(),
                                o = t.isPlaying(),
                                c = t.isStartTime(),
                                g = t.isCutOff(),
                                _ = t.isScheduled();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant" + (g ? " player_cut_off" : "")
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement(Te, {
                                value: s,
                                classes: "event__result--points" + (_ ? "" : " fontBold") + (o ? " playing" : "") + (g ? " player_cut_off" : "")
                            }), r.createElement(Te, {
                                value: l,
                                classes: c ? "hole_start_time" : o ? "playing" : void 0
                            }))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getScore(),
                                l = t.getHole(),
                                o = (t.getToday(), t.isStableford(), t.isPlaying()),
                                c = t.isStartTime(),
                                g = t.isCutOff(),
                                _ = t.isScheduled(),
                                h = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant" + (g ? " player_cut_off" : "")
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement(Te, {
                                value: s,
                                classes: "event__result--points" + (_ ? "" : " fontBold") + (o ? " playing" : "") + (g ? " player_cut_off" : "")
                            }), r.createElement(Te, {
                                value: l,
                                classes: c ? "hole_start_time" : o ? "playing" : void 0
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: h,
                                device: t,
                                oddsContent: W.TYPE_TW,
                                oneColumn: !0
                            })))
                        }
                    }.render(s) : he.isMotorsport(s.event) ? null : he.isMotorsportAutoRacing(s.event) || he.isMotorsportMotoRacing(s.event) ? he.isMotorsportMotoRacing(s.event) && s.event.isDuel() ? xe.render(s) : he.isMotorsportMotoRacing(s.event) && s.event.getSportSpecific().isSpeedway() ? s.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getRides(),
                                s = t.getWins(),
                                l = t.getPoints(),
                                o = t.isPlaying();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: "event__result--noLive event__result--rank " + (n ? n.getClasses() : null),
                                highlighted: e.event.getHighlighter().isRankHighlighted()
                            }), Ne.render({
                                rides: i,
                                wins: s,
                                points: l,
                                isPlaying: o
                            }))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getRides(),
                                l = t.getWins(),
                                o = t.getPoints(),
                                c = t.isPlaying(),
                                g = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), Ne.render({
                                rides: s,
                                wins: l,
                                points: o,
                                isPlaying: c
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: g,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(s) : s.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage(),
                                i = t.getLapTime();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: "event__result--noLive event__result--rank " + (n ? n.getClasses() : null),
                                highlighted: e.event.getHighlighter().isRankHighlighted()
                            }), ue.render({
                                lapTime: i
                            }))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getLapTime(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getTeam(),
                                o = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, l), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), ue.render({
                                lapTime: a
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: o,
                                device: t,
                                oddsContent: W.TYPE_TW_3_6_10,
                                oneColumn: !0
                            })))
                        }
                    }.render(s) : he.isWinterSportsAlpineSkiing(s.event) || he.isWinterSportsBiathlon(s.event) || he.isWinterSportsCrossCountry(s.event) || he.isWinterSportsSkiJumping(s.event) ? s.isMyTeams ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRankNoLive(),
                                a = t.getStage();
                            return r.createElement(r.Fragment, null, d(e), me.render({
                                stage: a,
                                isRace: !0
                            }), r.createElement(Te, {
                                value: n ? n.getContent() : "",
                                classes: "event__result--noLive event__result--rank " + (n ? n.getClasses() : null),
                                highlighted: e.event.getHighlighter().isRankHighlighted()
                            }), Xe.render({
                                event: e.event
                            }))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), Xe.render({
                                event: e.event
                            }))
                        }
                    }.render(s) : he.isHorseRacing(s.event) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTeam(),
                                l = t.getAge(),
                                o = t.getWeight(),
                                c = t.getDistance(),
                                g = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), "Â (", r.createElement(Te, {
                                value: l
                            }), ",Â ", r.createElement(Te, {
                                value: o
                            }), ")"), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, s), r.createElement(Te, {
                                value: c
                            }), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, t => r.createElement(x, {
                                event: e.event,
                                isDuel: g,
                                device: t,
                                oddsContent: W.TYPE_EACH_WAY,
                                oneColumn: !0
                            })))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), J.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(be, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), J.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(fe, {
                                event: e.event
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), Ce.render(e.event.getFinalResultOnlyIcon()), Me(Object.assign({}, e)), e.event.showOdds(e.pageType) && r.createElement(M.Consumer, null, n => r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: n,
                                oddsContent: e.oddsContent
                            })), r.createElement(N, {
                                iconName: "tv",
                                tvIcon: e.event.getTvIconMobile()
                            }), r.createElement(X, {
                                isEnabled: e.event.getTvStreamIcon().isEnabled(),
                                isUnlocked: e.event.getTvStreamIcon().isUnlocked(),
                                handlerOnClick: e.event.getTvStreamIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getTvStreamIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getTvStreamIcon().getHandlerOnMouseLeave()
                            }), Fe.render(e), P.render({
                                enabled: e.event.getWinLoseIcon().isEnabledByBlockType(e.blockType),
                                class: e.event.getWinLoseIcon().getClass(),
                                shortTranslate: e.event.getWinLoseIcon().getShortTranslate(),
                                handlerOnClick: e.event.getWinLoseIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getWinLoseIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getWinLoseIcon().getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(s)
                }
            }

            function Ke(e) {
                let t = "",
                    n = "";
                if (he.isMma(e.event) || he.isBoxing(e.event)) {
                    const a = e.event.getSportSpecific();
                    return t = a.getResult(), n = a.getSubResult(), le.render({
                        result: t,
                        subResult: n
                    })
                }
                if (he.isCricket(e.event)) return null;
                if ("Us_Layout" == e.oddsContent && !he.isSoccer(e.event)) return m.render({
                    homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                    homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                    awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                    awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                    previewIcon: e.event.getPreviewIcon(),
                    homeHighlighted: !1,
                    awayHighlighted: !1
                });
                const a = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                return r.createElement("div", {
                    className: "event__scores" + (a ? " fontBold" : "")
                }, ee.render({
                    homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                    homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                    awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                    awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                    previewIcon: e.event.getPreviewIcon(),
                    isEventWithoutScoreAndNotRetired: e.event.getIsEventWithoutScoreAndNotRetired(),
                    delimiter: "-"
                }), q.render({
                    homeScore: e.event.getHomeScore().getResult(v.a.FULL_TIME),
                    awayScore: e.event.getAwayScore().getResult(v.a.FULL_TIME),
                    delimiter: "-"
                }))
            }
            class Ve {
                static _getMatchClass(e, t, n, r) {
                    if (!e.isDuel()) return "event__match--noDuel";
                    if (!t) {
                        if ((he.isSoccer(e) || he.isFutsal(e)) && r == a.DESKTOP) return "event__match--oneLine";
                        let t = "";
                        if (he.isBaseball(e)) {
                            e.getSportSpecific().hasShortResult() && (t = " event__match--shortResult")
                        }
                        return "event__match--twoLine" + t
                    }
                    return r == a.MOBILE || n ? "event__match--twoLine" : "event__match--oneLine"
                }
                static getEventClasses(e, t, n, r, i, s, l) {
                    const o = [];
                    return e.getEventStageType() == D.a.SCHEDULED && o.push("event__match--scheduled"), e.getEventStageType() == D.a.LIVE && o.push("event__match--live"), t && o.push("event__match--last"), class {
                        static isRowHighlightEnabled(e, t) {
                            return t == a.DESKTOP ? !(!he.isSoccer(e) && !he.isFutsal(e)) : t == a.MOBILE && (!he.isBasketball(e) && !he.isHandball(e))
                        }
                    }.isRowHighlightEnabled(e, l) && e.getHighlighter().isEventHighlighted() && o.push("highlighted"), he.isHorseRacing(e) && e.getSportSpecific().getRank().getParticipantStatus() && o.push("event__match--nonRunner"), o.push(this._getMatchClass(e, n, "Us_Layout" == i, l)), e.hasDisabledDetail() && o.push("event__match--disabledDetail"), (r || e.getIsParticipantPage()) && he.isWinterSportsSkiJumping(e) && e.getSportSpecific().isTeam() && o.push(e.getSportName() + "--team"), he.isGolf(e) && e.getSportSpecific().isNational() && o.push(e.getSportName() + "--national"), o.join(" ")
                }
            }
            class je {
                static render(e) {
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title1",
                        title: e.titleEachWayFull,
                        style: e.device == a.DESKTOP ? {
                            width: "53px"
                        } : void 0
                    }, e.titleEachWayShort), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title2 last",
                        title: e.titleWinnerFull,
                        style: e.device == a.DESKTOP ? {
                            width: "53px"
                        } : void 0
                    }, e.titleWinnerShort))
                }
            }

            function Je(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle());
                if (null === t) return null;
                const n = r.createElement(k, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                });
                return e.device == a.MOBILE ? r.createElement("div", {
                    className: "event__odds"
                }, je.render({
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort(),
                    titleEachWayFull: t.getEachWayFull(e.event.getEachWayHandicapValue()),
                    titleEachWayShort: t.getEachWayShort(),
                    device: e.device
                }), n) : n
            }
            class $e {
                static render(e) {
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title1",
                        title: e.titleWinnerFull,
                        style: e.device == a.DESKTOP ? {
                            width: "67px"
                        } : void 0
                    }, e.titleWinnerShort), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title2",
                        title: e.titleTop5Full,
                        style: e.device == a.DESKTOP ? {
                            width: "67px"
                        } : void 0
                    }, e.titleTop5Short), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title3",
                        title: e.titleTop10Full,
                        style: e.device == a.DESKTOP ? {
                            width: "67px"
                        } : void 0
                    }, e.titleTop10Short), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title4 last",
                        title: e.titleTop20Full,
                        style: e.device == a.DESKTOP ? {
                            width: "67px"
                        } : void 0
                    }, e.titleTop20Short))
                }
            }

            function Qe(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle());
                return null === t ? null : e.device == a.MOBILE ? r.createElement("div", {
                    className: "event__odds"
                }, $e.render({
                    titleTop5Full: t.getTop5Full(),
                    titleTop5Short: t.getTop5Short(),
                    titleTop10Full: t.getTop10Full(),
                    titleTop10Short: t.getTop10Short(),
                    titleTop20Full: t.getTop20Full(),
                    titleTop20Short: t.getTop20Short(),
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort(),
                    device: e.device
                }), r.createElement(G, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })) : r.createElement(G, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })
            }
            class Ze {
                static render(e) {
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title1",
                        title: e.titleWinnerFull
                    }, e.titleWinnerShort), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title2",
                        title: e.titleTop3Full
                    }, e.titleTop3Short), r.createElement("div", {
                        className: "odds__odd no-odds odds__odd--Title3",
                        title: e.titleTop6Full
                    }, e.titleTop6Short), r.createElement("div", {
                        className: "odds__odd no-odds last odds__odd--Title4",
                        title: e.titleTop10Full
                    }, e.titleTop10Short))
                }
            }

            function ze(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle());
                return null === t ? null : e.device == a.MOBILE ? r.createElement("div", {
                    className: "event__odds"
                }, Ze.render({
                    titleTop10Full: t.getTop10Full(),
                    titleTop10Short: t.getTop10Short(),
                    titleTop3Full: t.getTop3Full(),
                    titleTop3Short: t.getTop3Short(),
                    titleTop6Full: t.getTop6Full(),
                    titleTop6Short: t.getTop6Short(),
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort()
                }), r.createElement(U, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })) : r.createElement(U, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })
            }

            function qe(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle());
                return null === t ? null : e.device == a.MOBILE ? r.createElement("div", {
                    className: "event__odds"
                }, Ze.render({
                    titleTop10Full: t.getTop10Full(),
                    titleTop10Short: t.getTop10Short(),
                    titleTop3Full: t.getTop3Full(),
                    titleTop3Short: t.getTop3Short(),
                    titleTop6Full: t.getTop6Full(),
                    titleTop6Short: t.getTop6Short(),
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort()
                }), r.createElement(U, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })) : r.createElement(U, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })
            }

            function et(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle());
                if (null === t) return null;
                if (e.device == a.MOBILE) {
                    const n = e.event.getSportSpecific().getLapTime();
                    return r.createElement(r.Fragment, null, ue.render({
                        lapTime: n,
                        highlighter: e.event.getHighlighter()
                    }), r.createElement("div", {
                        className: "event__odds"
                    }, Ze.render({
                        titleTop10Full: t.getTop10Full(),
                        titleTop10Short: t.getTop10Short(),
                        titleTop3Full: t.getTop3Full(),
                        titleTop3Short: t.getTop3Short(),
                        titleTop6Full: t.getTop6Full(),
                        titleTop6Short: t.getTop6Short(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort()
                    }), r.createElement(U, {
                        event: e.event,
                        device: e.device,
                        isDuel: !1
                    })))
                }
                return r.createElement(U, {
                    event: e.event,
                    device: e.device,
                    isDuel: !1
                })
            }
            class tt extends r.Component {
                render() {
                    const e = this.props.event;
                    return he.isHorseRacing(e) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTeam(),
                                l = t.getDistance();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, s), r.createElement("div", {
                                className: "event__result odds__odd no-odds"
                            }, l), r.createElement(Je, Object.assign({}, e)))
                        }
                    }.render(this.props) : he.isGolf(e) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getScore(),
                                o = t.isPlaying(),
                                c = t.isCutOff(),
                                g = t.isScheduled(),
                                _ = t.getHole(),
                                h = t.isStartTime();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant" + (c ? " player_cut_off" : "")
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), r.createElement(Te, {
                                value: l,
                                classes: "event__result--points event__result--lg" + (g ? "" : " fontBold") + (o ? " playing" : "") + (c ? " player_cut_off" : ""),
                                style: e.device == a.DESKTOP ? {
                                    width: "41px"
                                } : void 0
                            }), e.device == a.MOBILE && r.createElement(Te, {
                                value: _,
                                highlighted: e.event.getHighlighter().isHomeScoreHighlighted(v.a.EVENT_PARTICIPANT_HOLE_INFO),
                                classes: h ? "hole_start_time" : o ? "playing" : void 0
                            }), r.createElement(Qe, Object.assign({}, e)))
                        }
                    }.render(this.props) : he.isCycling(e) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getTeam(),
                                a = t.getRank(),
                                i = t.getCountryId(),
                                s = t.getCountryName(),
                                l = t.getCyclingJerseys();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: a,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: i,
                                countryName: s
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), l && Se.render({
                                cyclingJerseys: l.getItems(),
                                handlerOnMouseEnter: l.getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: l.getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, n), r.createElement(et, Object.assign({}, e)))
                        }
                    }.render(this.props) : he.isWinterSportsAlpineSkiing(e) || he.isWinterSportsBiathlon(e) || he.isWinterSportsCrossCountry(e) || he.isWinterSportsSkiJumping(e) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), this._renderResult(e), r.createElement(ze, Object.assign({}, e)))
                        }
                        static _renderResult(e) {
                            if (e.device != a.DESKTOP) return Xe.render({
                                event: e.event
                            })
                        }
                    }.render(this.props) : he.isMotorsportAutoRacing(e) || he.isMotorsportMotoRacing(e) ? class {
                        static displayTeam(e, t) {
                            const n = he.isMotorsportMotoRacing(e) && e.getSportSpecific().isSpeedway();
                            return e.isDuel() || n ? null : r.createElement("div", {
                                className: "event__participant event__participant--team"
                            }, t)
                        }
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getRank(),
                                a = t.getCountryId(),
                                i = t.getCountryName(),
                                s = t.getTeam();
                            return r.createElement(r.Fragment, null, d(e), Ee({
                                rank: n,
                                highlighted: e.event.getHighlighter().isRankHighlighted(),
                                highlightedShift: e.event.getHighlighter().isRankHighlightedShift()
                            }), r.createElement("div", {
                                className: "event__participant"
                            }, de.render({
                                countryId: a,
                                countryName: i
                            }), T.a.render({
                                participant: e.event.getHomeParticipant()
                            })), this.displayTeam(e.event, s), this._renderResult(e), r.createElement(qe, Object.assign({}, e)))
                        }
                        static _renderResult(e) {
                            if (e.device == a.DESKTOP) return;
                            const t = e.event.getSportSpecific().getLapTime();
                            if (he.isMotorsportMotoRacing(e.event) && e.event.getSportSpecific().isSpeedway()) {
                                const t = e.event.getSportSpecific(),
                                    n = t.getRides(),
                                    a = t.getWins(),
                                    r = t.getPoints(),
                                    i = t.isPlaying();
                                return Ne.render({
                                    rides: n,
                                    wins: a,
                                    points: r,
                                    isPlaying: i,
                                    highlighter: e.event.getHighlighter()
                                })
                            }
                            return ue.render({
                                lapTime: t,
                                highlighter: e.event.getHighlighter()
                            })
                        }
                    }.render(this.props) : null
                }
            }

            function nt(e) {
                const t = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                return "Us_Layout" == e.oddsContent ? m.render({
                    homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                    homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                    awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                    awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                    previewIcon: e.event.getPreviewIcon(),
                    classes: t ? "fontBold" : void 0,
                    homeHighlighted: !1,
                    awayHighlighted: !1
                }) : r.createElement("div", {
                    className: "event__scores" + (t ? " fontBold" : "")
                }, ee.render({
                    homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                    homeScoreTitle: e.event.getHomeScore().getResultTitle(v.a.CURRENT),
                    awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                    awayScoreTitle: e.event.getAwayScore().getResultTitle(v.a.CURRENT),
                    previewIcon: e.event.getPreviewIcon(),
                    isEventWithoutScoreAndNotRetired: e.event.getIsEventWithoutScoreAndNotRetired(),
                    delimiter: "-"
                }))
            }
            class at extends r.PureComponent {
                constructor(e) {
                    super(e), this.state = {
                        event: null,
                        oddsContent: null
                    }
                }
                displayOddsLayout(e, t, n, i) {
                    const s = {
                        event: e,
                        device: n,
                        pageType: i,
                        blockType: Le.BLOCK_TYPE_DEFAULT,
                        oddsContent: t
                    };
                    return this.props.isDuel ? he.isGolf(e) ? class {
                        static render(e) {
                            const t = e.event.getSportSpecific(),
                                n = t.getFinalResult(),
                                a = t.isNational(),
                                i = e.event.isDuel(),
                                s = e.event.getEventStageType() != D.a.SCHEDULED || e.event.getEventStage() == C.a.TO_FINISH;
                            return r.createElement(r.Fragment, null, d(e), this._displayStatus(e), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement(Te, {
                                value: !a && n ? n.getValue() : "",
                                title: !a && n ? n.getTitle() : void 0,
                                classes: s ? "fontBold" : void 0,
                                handlerOnMouseEnter: !a && n ? n.getHandlerOnMouseEnter() : void 0,
                                handlerOnMouseLeave: !a && n ? n.getHandlerOnMouseLeave() : void 0
                            }), r.createElement(x, {
                                event: e.event,
                                isDuel: i,
                                device: e.device,
                                oddsContent: e.oddsContent
                            }))
                        }
                        static _displayStatus(e) {
                            return e.device == a.MOBILE ? Ce.render(e.event.getFinalResultOnlyIcon()) : y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            })
                        }
                    }.render(s) : he.isMotorsportMotoRacing(e) ? class {
                        static render(e) {
                            const t = e.event.isDuel();
                            return r.createElement(r.Fragment, null, d(e), this._displayStatus(e), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            })), e.device !== a.MOBILE ? r.createElement(nt, Object.assign({}, e)) : null, r.createElement(x, {
                                event: e.event,
                                isDuel: t,
                                device: e.device,
                                oddsContent: e.oddsContent
                            }))
                        }
                        static _displayStatus(e) {
                            return e.device == a.MOBILE ? r.createElement(r.Fragment, null, Ce.render(e.event.getFinalResultOnlyIcon()), Me(Object.assign(Object.assign({}, e), {
                                showEventDate: !1
                            }))) : y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            })
                        }
                        static showOnStatusLive(e) {
                            return y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            })
                        }
                    }.render(s) : n == a.MOBILE ? class {
                        static displayTimeOrScore(e) {
                            return e.event.getEventStageType() === D.a.SCHEDULED ? y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            }) : r.createElement(r.Fragment, null, e.event.getEventStageType() === D.a.LIVE ? y.render({
                                startTime: e.event.getStartTime(),
                                startDate: e.event.getStartDate(),
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            }) : null, this._displayScore(e))
                        }
                        static _displayScore(e) {
                            let t = "";
                            if (he.isMma(e.event) || he.isBoxing(e.event)) {
                                return t = e.event.getSportSpecific().getResult(), le.render({
                                    result: t,
                                    subResult: null
                                })
                            }
                            return he.isCricket(e.event) ? null : r.createElement(r.Fragment, null, p.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.FULL_TIME),
                                awayScore: e.event.getAwayScore().getResult(v.a.FULL_TIME),
                                classes: "event__part--regulation",
                                style: "basketball" === e.event.getSportName() ? {
                                    width: "34px"
                                } : {
                                    width: "26px"
                                }
                            }), m.render({
                                homeScore: e.event.getHomeScore().getResult(v.a.CURRENT),
                                awayScore: e.event.getAwayScore().getResult(v.a.CURRENT),
                                previewIcon: e.event.getPreviewIcon()
                            }))
                        }
                        static render(e) {
                            let t = 0,
                                n = 0;
                            const a = e.event.isDuel();
                            if (he.isSoccer(e.event)) {
                                const a = e.event.getSportSpecific();
                                t = a.getHomeRedCardCount(), n = a.getAwayRedCardCount()
                            }
                            return r.createElement(r.Fragment, null, d(e), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), z.render({
                                redCardCount: t
                            }), we.render({
                                side: e.event.getHomeWinnerIcon()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: n
                            }), we.render({
                                side: e.event.getAwayWinnerIcon()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), ye.render({
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                usTimeFormat: e.event.hasUsTimeFormat()
                            }), Ce.render(e.event.getFinalResultOnlyIcon()), this.displayTimeOrScore(e), r.createElement(x, {
                                event: e.event,
                                isDuel: a,
                                device: e.device,
                                oddsContent: e.oddsContent
                            }), Fe.render(e))
                        }
                    }.render(s) : class {
                        static render(e) {
                            const t = e.event.getLiveBettingIcon(),
                                n = e.event.isDuel();
                            let a = 0,
                                i = 0;
                            if (he.isSoccer(e.event)) {
                                const t = e.event.getSportSpecific();
                                a = t.getHomeRedCardCount(), i = t.getAwayRedCardCount()
                            }
                            return r.createElement(r.Fragment, null, d(e), y.render({
                                startTime: e.event.getStartTime(),
                                startDate: "",
                                stageTime: e.event.getStageTime(),
                                eventStage: e.event.getEventStage(),
                                eventStageType: e.event.getEventStageType(),
                                finalResultOnlyIcon: e.event.getFinalResultOnlyIcon(),
                                usTimeFormat: e.event.hasUsTimeFormat(),
                                highlighted: e.event.getHighlighter().isStatusHighlighted(),
                                showDateWithTime: e.event.getShowDateWithTime()
                            }), r.createElement("div", {
                                className: "event__participant event__participant--home" + (e.event.getHomeParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getHomeParticipant()
                            }), z.render({
                                redCardCount: a
                            }), r.createElement(Y, {
                                isEnabled: e.event.getHomeWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getHomeWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getHomeWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getHomeWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getHomeMessage()
                            })), r.createElement("div", {
                                className: "event__participant event__participant--away" + (e.event.getAwayParticipant().isWinner() ? " fontBold" : "")
                            }, T.a.render({
                                participant: e.event.getAwayParticipant()
                            }), z.render({
                                redCardCount: i
                            }), r.createElement(Y, {
                                isEnabled: e.event.getAwayWinnerIcon().isEnabled(),
                                handlerOnClick: e.event.getAwayWinnerIcon().getHandlerOnClick(),
                                handlerOnMouseEnter: e.event.getAwayWinnerIcon().getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: e.event.getAwayWinnerIcon().getHandlerOnMouseLeave()
                            }), Q.render({
                                message: e.event.getHighlighter().getAwayMessage()
                            })), r.createElement(Ke, Object.assign({}, e)), r.createElement(x, {
                                event: e.event,
                                isDuel: n,
                                device: e.device,
                                oddsContent: e.oddsContent
                            }), r.createElement(L, {
                                enabled: t.isEnabled(),
                                class: t.getClass(),
                                dataBookmakerId: t.getMainBookmakerId(),
                                handlerOnClick: t.getHandlerOnClick(),
                                handlerOnMouseEnter: t.getHandlerOnMouseEnter(),
                                handlerOnMouseLeave: t.getHandlerOnMouseLeave()
                            }))
                        }
                    }.render(s) : r.createElement(tt, Object.assign({}, s))
                }
                renderEvent(e, t, n) {
                    return this.props.isOdds ? this.displayOddsLayout(e, t, n, this.props.pageType) : n == a.MOBILE ? Ye.render({
                        event: e,
                        isMyTeams: this.props.isMyTeams,
                        pageType: this.props.pageType,
                        blockType: this.props.blockType,
                        oddsContent: t
                    }) : Oe.render({
                        event: e,
                        isMyTeams: this.props.isMyTeams,
                        myGamesGroups: this.props.myGamesGroups,
                        selectedMyGamesGroupKey: this.props.selectedMyGamesGroupKey,
                        pageType: this.props.pageType,
                        blockType: Le.BLOCK_TYPE_DEFAULT,
                        oddsContent: t
                    })
                }
                componentDidMount() {
                    this.subscription = this.props.eventProvider.subscribe(this.props.eventId, e => {
                        this.props.isOdds || e.showOdds(this.props.pageType) ? e.getOddsLayout().then(t => this.setState({
                            event: e,
                            oddsContent: t
                        })) : this.setState({
                            event: e,
                            oddsContent: ""
                        })
                    })
                }
                componentWillUnmount() {
                    this.subscription.unsubscribe()
                }
                render() {
                    return r.createElement(M.Consumer, null, e => this.state.event && null !== this.state.oddsContent ? r.createElement("div", {
                        id: this.props.eventId,
                        title: this.state.event.getTitle(),
                        className: "event__match " + Ve.getEventClasses(this.state.event, this.props.isLast, this.props.isOdds || !1, this.props.isMyTeams || !1, this.state.oddsContent, this.props.pageType, e)
                    }, this.renderEvent(this.state.event, this.state.oddsContent, e)) : null)
                }
            }
            const rt = r.createContext({
                isSingleSport: !1
            });
            class it extends r.PureComponent {
                render() {
                    const e = this.props.participant.getMyTeamIcon(),
                        t = this.props.participant.getAddParticipantToMyGamesIcon(),
                        n = t.isEnabled();
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__header" + (n ? "" : " event__header--no-my-games") + " event__header--noExpand"
                    }, class {
                        static getCheckBoxClassName(e) {
                            return e.checked ? " checked" : ""
                        }
                        static render(e) {
                            return null
                        }
                    }.render({
                        checked: t.isChecked(),
                        enabled: n,
                        participantKey: this.props.participant.getKey(),
                        eventIds: this.props.participant.getEventIds(),
                        handlerOnClick: e => t.getHandlerOnClick()(e),
                        handlerOnMouseEnter: e => t.getHandlerOnMouseEnter()(e),
                        handlerOnMouseLeave: e => t.getHandlerOnMouseLeave()(e)
                    }), r.createElement("div", {
                        className: "icon--flag event__title fl_" + this.props.participant.getCountryId()
                    }, r.createElement("div", {
                        className: "event__titleBox"
                    }, r.createElement("span", {
                        className: "event__title--type"
                    }, this.props.participant.getCountryName()), r.createElement("span", {
                        className: "event__title--name"
                    })), e.isEnabled() && r.createElement("span", {
                        className: e.getClass()
                    })), r.createElement(rt.Consumer, null, ({
                        isSingleSport: e
                    }) => e ? null : r.createElement("div", {
                        className: "event__startTime"
                    }, this.props.participant.getSportTranslatedName()))))
                }
            }
            var st = n(253);

            function lt(e) {
                return i.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                }, i.a.createElement("div", {
                    className: "event__rating",
                    title: e.headerTexts.getRankTitle()
                }, "#"), i.a.createElement("div", {
                    className: "event__participant",
                    title: e.headerTexts.getParticipantTitle()
                }, e.headerTexts.getParticipantText()), i.a.createElement("div", {
                    className: "event__participant event__participant--team",
                    title: e.headerTexts.getTeamTitle()
                }, e.headerTexts.getTeamText()), i.a.createElement("div", {
                    className: "event__result",
                    style: e.device == a.DESKTOP ? {
                        width: "100px"
                    } : void 0,
                    title: e.headerTexts.getTimeTitle()
                }, e.headerTexts.getTimeText()))
            }

            function ot(e) {
                return i.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--duel"
                }, i.a.createElement("div", {
                    className: "event__sets",
                    title: e.headerTexts.getSetsTitle()
                }, e.headerTexts.getSetsShortText()), i.a.createElement("div", {
                    className: "event__legs",
                    title: e.headerTexts.getLegsTitle()
                }, e.headerTexts.getLegsShortText()), i.a.createElement("div", {
                    className: "event__currentPoints",
                    title: e.headerTexts.getCurrentPointsTitle()
                }, e.headerTexts.getCurrentPointsShortText()))
            }

            function ct({
                event: e,
                device: t
            }) {
                const n = Object(I.a)(() => e.getOddsHeaderTitle());
                return null === n ? null : r.createElement(r.Fragment, null, je.render({
                    titleEachWayFull: n.getEachWayFull(e.getEachWayHandicapValue()),
                    titleEachWayShort: n.getEachWayShort(),
                    titleWinnerFull: n.getWinnerFull(),
                    titleWinnerShort: n.getWinnerShort(),
                    device: t
                }))
            }
            class gt {
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                    }, r.createElement("div", {
                        className: "event__rating",
                        title: e.headerTexts.getRankTitle()
                    }, "#"), gt._renderByDevice(e))
                }
                static _renderOdds(e) {
                    return r.createElement(ct, {
                        event: e.event,
                        device: e.device
                    })
                }
                static _renderByDevice(e) {
                    return e.device == a.MOBILE ? r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__participant",
                        title: e.headerTexts.getHorseTitle()
                    }, e.headerTexts.getHorseText(), "Â (", r.createElement("span", {
                        className: "event__result",
                        title: e.headerTexts.getAgeTitle()
                    }, e.headerTexts.getAgeText()), ",Â ", r.createElement("span", {
                        className: "event__result",
                        title: e.headerTexts.getWeightTitle()
                    }, e.headerTexts.getWeightText()), ")"), r.createElement("div", {
                        className: "event__participant event__participant--team",
                        title: e.headerTexts.getTeamTitle()
                    }, e.headerTexts.getTeamText()), r.createElement("div", {
                        className: "event__result",
                        title: e.headerTexts.getDistanceTitle()
                    }, e.headerTexts.getDistanceText()), e.showOdds && this._renderOdds(e)) : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__participant",
                        title: e.headerTexts.getHorseTitle()
                    }, e.headerTexts.getHorseText()), r.createElement("div", {
                        className: "event__participant",
                        title: e.headerTexts.getTeamTitle()
                    }, e.headerTexts.getTeamText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getAgeTitle()
                    }, e.headerTexts.getAgeText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getWeightTitle()
                    }, e.headerTexts.getWeightText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getDistanceTitle()
                    }, e.headerTexts.getDistanceText()), !e.showOdds && r.createElement("div", {
                        className: "event__odds",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getStartingPriceTitle()
                    }, e.headerTexts.getStartingPriceText()), e.showOdds && this._renderOdds(e))
                }
            }
            var _t, ht = n(254);

            function Et(e) {
                return i.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                }, i.a.createElement("div", {
                    className: "event__rating",
                    title: e.headerTexts.getRankTitle()
                }, "#"), i.a.createElement("div", {
                    className: "event__participant",
                    title: e.headerTexts.getPlayerTitle()
                }, e.headerTexts.getPlayerText()), i.a.createElement("div", {
                    className: "event__result event__result--points",
                    style: e.device == a.DESKTOP ? {
                        width: "41px"
                    } : void 0,
                    title: e.headerTexts.getParTitle()
                }, e.headerTexts.getParText()), i.a.createElement("div", {
                    className: "event__result",
                    style: e.device == a.DESKTOP ? {
                        width: "56px"
                    } : void 0,
                    title: e.headerTexts.getHoleTitle()
                }, e.headerTexts.getHoleText()), function(e) {
                    return e.device == a.MOBILE ? null : i.a.createElement(i.a.Fragment, null, i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getTodayTitle()
                    }, e.headerTexts.getTodayText()), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getFirstRoundTitle()
                    }, "1"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getSecondRoundTitle()
                    }, "2"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getThirdRoundTitle()
                    }, "3"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getFourthRoundTitle()
                    }, "4"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getTotalTitle()
                    }, e.headerTexts.getTotalText()))
                }(e), e.showOdds && i.a.createElement("div", {
                    className: "event__odds",
                    style: e.device == a.DESKTOP ? {
                        width: "70px"
                    } : void 0,
                    title: e.headerTexts.getWinnerTitle()
                }, e.headerTexts.getWinnerText()))
            }

            function dt(e) {
                return i.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                }, i.a.createElement("div", {
                    className: "event__rating",
                    title: e.headerTexts.getRankTitle()
                }, "#"), i.a.createElement("div", {
                    className: "event__participant",
                    title: e.headerTexts.getPlayerTitle()
                }, e.headerTexts.getPlayerText()), i.a.createElement("div", {
                    className: "event__result event__result--points",
                    style: e.device == a.DESKTOP ? {
                        width: "41px"
                    } : void 0,
                    title: e.headerTexts.getPointsTitle()
                }, e.headerTexts.getPointsText()), i.a.createElement("div", {
                    className: "event__result",
                    style: e.device == a.DESKTOP ? {
                        width: "56px"
                    } : void 0,
                    title: e.headerTexts.getHoleTitle()
                }, e.headerTexts.getHoleText()), function(e) {
                    return e.device == a.MOBILE ? null : i.a.createElement(i.a.Fragment, null, i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getFirstRoundTitle()
                    }, "1"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getSecondRoundTitle()
                    }, "2"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getThirdRoundTitle()
                    }, "3"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getFourthRoundTitle()
                    }, "4"), i.a.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "41px"
                        },
                        title: e.headerTexts.getTotalTitle()
                    }, e.headerTexts.getTotalText()))
                }(e), e.showOdds && i.a.createElement("div", {
                    className: "event__result",
                    style: {
                        width: "70px"
                    },
                    title: e.headerTexts.getWinnerTitle()
                }, e.headerTexts.getWinnerText()))
            }
            class Tt {
                static _renderDesktop(e) {
                    return e.device == a.MOBILE ? null : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getLapsTitle()
                    }, e.headerTexts.getLapsText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getGridTitle()
                    }, e.headerTexts.getGridText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getPitStopsTitle()
                    }, e.headerTexts.getPitStopsText()))
                }
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                    }, r.createElement("div", {
                        className: "event__rating",
                        title: e.headerTexts.getRankTitle()
                    }, "#"), r.createElement("div", {
                        className: "event__participant",
                        title: e.headerTexts.getPlayerTitle()
                    }, e.headerTexts.getPlayerText()), r.createElement("div", {
                        className: "event__participant event__participant--team",
                        title: e.headerTexts.getTeamTitle()
                    }, e.headerTexts.getTeamText()), r.createElement("div", {
                        className: "event__result",
                        style: e.device == a.DESKTOP ? {
                            width: "100px"
                        } : void 0,
                        title: e.headerTexts.getTimeTitle()
                    }, e.headerTexts.getTimeText()), Tt._renderDesktop(e), e.showOdds && r.createElement("div", {
                        className: "event__odds",
                        style: e.device == a.DESKTOP ? {
                            width: "70px"
                        } : void 0,
                        title: e.headerTexts.getWinnerTitle()
                    }, e.headerTexts.getWinnerText()))
                }
            }
            class ut {
                static _renderDesktop(e) {
                    return e.device == a.MOBILE ? null : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getLapsTitle()
                    }, e.headerTexts.getLapsText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getGridTitle()
                    }, e.headerTexts.getGridText()))
                }
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                    }, r.createElement("div", {
                        className: "event__rating",
                        title: e.headerTexts.getRankTitle()
                    }, "#"), r.createElement("div", {
                        className: "event__participant",
                        title: e.headerTexts.getPlayerTitle()
                    }, e.headerTexts.getPlayerText()), r.createElement("div", {
                        className: "event__participant event__participant--team",
                        title: e.headerTexts.getTeamTitle()
                    }, e.headerTexts.getTeamText()), r.createElement("div", {
                        className: "event__result",
                        style: e.device == a.DESKTOP ? {
                            width: "100px"
                        } : void 0,
                        title: e.headerTexts.getTimeTitle()
                    }, e.headerTexts.getTimeText()), ut._renderDesktop(e), e.showOdds && r.createElement("div", {
                        className: "event__odds",
                        style: e.device == a.DESKTOP ? {
                            width: "70px"
                        } : void 0,
                        title: e.headerTexts.getWinnerTitle()
                    }, e.headerTexts.getWinnerText()))
                }
            }

            function St(e) {
                return i.a.createElement("div", {
                    className: "event__match event__match__header event__match__header--noDuel"
                }, i.a.createElement("div", {
                    className: "event__stageName"
                }, e.headerTexts.getStageText()), i.a.createElement("div", {
                    className: "event__result--noLive",
                    style: e.device == a.DESKTOP ? {
                        width: "50px"
                    } : void 0,
                    title: e.headerTexts.getRankTitle()
                }, "#"), i.a.createElement("div", {
                    className: "event__result",
                    style: e.device == a.DESKTOP ? {
                        width: "100px"
                    } : void 0,
                    title: e.headerTexts.getTimeTitle()
                }, e.headerTexts.getTimeText()))
            }
            class mt {
                static _renderDesktop(e) {
                    return e.device == a.MOBILE ? null : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getLapsTitle()
                    }, e.headerTexts.getLapsText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getGridTitle()
                    }, e.headerTexts.getGridText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getPitStopsTitle()
                    }, e.headerTexts.getPitStopsText()))
                }
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel"
                    }, r.createElement("div", {
                        className: "event__stageName"
                    }, e.headerTexts.getStageText()), r.createElement("div", {
                        className: "event__result--noLive",
                        style: e.device == a.DESKTOP ? {
                            width: "50px"
                        } : void 0,
                        title: e.headerTexts.getRankTitle()
                    }, "#"), r.createElement("div", {
                        className: "event__result",
                        style: e.device == a.DESKTOP ? {
                            width: "100px"
                        } : void 0,
                        title: e.headerTexts.getTimeTitle()
                    }, e.headerTexts.getTimeText()), mt._renderDesktop(e))
                }
            }
            class vt {
                static _renderDesktop(e) {
                    return e.device == a.MOBILE ? null : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getLapsTitle()
                    }, e.headerTexts.getLapsText()), r.createElement("div", {
                        className: "event__result",
                        style: {
                            width: "50px"
                        },
                        title: e.headerTexts.getGridTitle()
                    }, e.headerTexts.getGridText()))
                }
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel"
                    }, r.createElement("div", {
                        className: "event__stageName"
                    }, e.headerTexts.getStageText()), r.createElement("div", {
                        className: "event__result--noLive",
                        style: e.device == a.DESKTOP ? {
                            width: "50px"
                        } : void 0,
                        title: e.headerTexts.getRankTitle()
                    }, "#"), r.createElement("div", {
                        className: "event__result",
                        style: e.device == a.DESKTOP ? {
                            width: "100px"
                        } : void 0,
                        title: e.headerTexts.getTimeTitle()
                    }, e.headerTexts.getTimeText()), vt._renderDesktop(e))
                }
            }
            class pt {
                static getComponent(e, t, n, i = !1, s) {
                    if (he.isCycling(e)) return i ? r.createElement(St, {
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    }) : r.createElement(lt, {
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    });
                    if (he.isMotorsportAutoRacing(e)) return e.getSportSpecific().isRallye() ? i ? class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__stageName"
                            }, e.headerTexts.getStageText()), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "100px"
                                } : void 0,
                                title: e.headerTexts.getTimeTitle()
                            }, e.headerTexts.getTimeText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getRallyeHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    }) : class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getPlayerTitle()
                            }, e.headerTexts.getPlayerText()), r.createElement("div", {
                                className: "event__participant event__participant--team",
                                title: e.headerTexts.getTeamTitle()
                            }, e.headerTexts.getTeamText()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "100px"
                                } : void 0,
                                title: e.headerTexts.getTimeTitle()
                            }, e.headerTexts.getTimeText()), e.showOdds && r.createElement("div", {
                                className: "event__result event__odds",
                                style: {
                                    width: "70px"
                                },
                                title: e.headerTexts.getWinnerTitle()
                            }, e.headerTexts.getWinnerText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getRallyeHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    }) : i ? mt.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    }) : Tt.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    });
                    if (he.isMotorsportMotoRacing(e) && !e.isDuel()) return e.getSportSpecific().isSpeedway() ? i ? class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__stageName"
                            }, e.headerTexts.getStageText()), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__result event__result--rides",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRidesTitle()
                            }, e.headerTexts.getRidesText()), r.createElement("div", {
                                className: "event__result event__result--wins",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getWinsTitle()
                            }, e.headerTexts.getWinsText()), r.createElement("div", {
                                className: "event__result event__result--points",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getPointsTitle()
                            }, e.headerTexts.getPointsText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getSpeedwayHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    }) : class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getPlayerTitle()
                            }, e.headerTexts.getPlayerText()), r.createElement("div", {
                                className: "event__result event__result--rides",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRidesTitle()
                            }, e.headerTexts.getRidesText()), r.createElement("div", {
                                className: "event__result event__result--wins",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getWinsTitle()
                            }, e.headerTexts.getWinsText()), r.createElement("div", {
                                className: "event__result event__result--points",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getPointsTitle()
                            }, e.headerTexts.getPointsText()), e.showOdds && r.createElement("div", {
                                className: "event__odds",
                                style: {
                                    width: "70px"
                                },
                                title: e.headerTexts.getWinnerTitle()
                            }, e.headerTexts.getWinnerText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getSpeedwayHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    }) : i ? vt.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n
                    }) : ut.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    });
                    if (he.isWinterSportsAlpineSkiing(e)) return e.getSportSpecific().hasRounds() && t != a.MOBILE ? class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getRun1Title()
                            }, e.headerTexts.getRun1Text()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getRun2Title()
                            }, e.headerTexts.getRun2Text()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getTotalTitle()
                            }, e.headerTexts.getTotalText()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getDifferenceTitle()
                            }, e.headerTexts.getDifferenceText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getRoundsHeaderText(),
                        device: t,
                        isMyTeams: i,
                        hasMyGamesDropDown: n
                    }) : class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getTotalTitle()
                            }, e.headerTexts.getTotalText()), r.createElement("div", {
                                className: "event__result event__result--gap",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getDifferenceTitle()
                            }, e.headerTexts.getDifferenceText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        isMyTeams: i,
                        hasMyGamesDropDown: n
                    });
                    if (he.isWinterSportsCrossCountry(e)) return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getTimeTitle()
                            }, e.headerTexts.getTimeText()), r.createElement("div", {
                                className: "event__result event__result--gap",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getDifferenceTitle()
                            }, e.headerTexts.getDifferenceText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        isMyTeams: i,
                        hasMyGamesDropDown: n
                    });
                    if (he.isWinterSportsSkiJumping(e)) return e.getSportSpecific().isTeam() ? class {
                        static render(e) {
                            const t = e.isMyTeams || e.isParticipantPage ? " winter-sports-ski-jumping--team" : "";
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "") + t
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getJumpCountTitle()
                            }, e.headerTexts.getJumpCountText()), e.device == a.DESKTOP && r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPoints1Title()
                            }, e.headerTexts.getPoints1Text()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPoints2Title()
                            }, e.headerTexts.getPoints2Text())), r.createElement("div", {
                                className: "event__result event__result--points",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPointsTotalTitle()
                            }, e.headerTexts.getPointsTotalText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getTeamsHeaderText(),
                        device: t,
                        isMyTeams: i,
                        isParticipantPage: e.getIsParticipantPage(),
                        hasMyGamesDropDown: n
                    }) : class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result event__result--jump1",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getJump1LengthTitle()
                            }, e.headerTexts.getJump1LengthText()), e.device == a.DESKTOP && r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPoints1Title()
                            }, e.headerTexts.getPoints1Text()), r.createElement("div", {
                                className: "event__result event__result--jump2",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getJump2LengthTitle()
                            }, e.headerTexts.getJump2LengthText()), e.device == a.DESKTOP && r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPoints2Title()
                            }, e.headerTexts.getPoints2Text()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getPointsTotalTitle()
                            }, e.headerTexts.getPointsTotalText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        isMyTeams: i,
                        hasMyGamesDropDown: n
                    });
                    if (he.isWinterSportsBiathlon(e)) return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel" + (e.hasMyGamesDropDown ? " event__match__header--mgDropdown" : "")
                            }, e.isMyTeams ? r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__stageName"
                            }), r.createElement("div", {
                                className: "event__result--noLive",
                                style: e.device == a.DESKTOP ? {
                                    width: "50px"
                                } : void 0,
                                title: e.headerTexts.getRankTitle()
                            }, "#")) : r.createElement(r.Fragment, null, r.createElement("div", {
                                className: "event__rating",
                                title: e.headerTexts.getRankTitle()
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.headerTexts.getParticipantTitle()
                            }, e.headerTexts.getParticipantText())), r.createElement("div", {
                                className: "event__result event__result--shooting",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getShootingTitle()
                            }, e.headerTexts.getShootingText()), r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getTimeTitle()
                            }, e.headerTexts.getTimeText()), e.device == a.DESKTOP && r.createElement("div", {
                                className: "event__result",
                                style: e.device == a.DESKTOP ? {
                                    width: "70px"
                                } : void 0,
                                title: e.headerTexts.getDifferenceTitle()
                            }, e.headerTexts.getDifferenceText()))
                        }
                    }.render({
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        isMyTeams: i,
                        hasMyGamesDropDown: n
                    });
                    if (he.isGolf(e) && !e.isDuel()) return e.getSportSpecific().isStableford() ? r.createElement(dt, {
                        headerTexts: e.getSportSpecific().getStablefordHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    }) : r.createElement(Et, {
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    });
                    if (he.isHorseRacing(e)) return gt.render({
                        event: e,
                        headerTexts: e.getSportSpecific().getHeaderText(),
                        device: t,
                        hasMyGamesDropDown: n,
                        showOdds: e.showOdds(s)
                    });
                    if (t === a.MOBILE) return null;
                    if (he.isBaseball(e)) {
                        if (!e.getSportSpecific().hasShortResult()) return r.createElement(st.b, {
                            headerTexts: e.getSportSpecific().getHeaderText()
                        })
                    } else {
                        if (he.isPesapallo(e)) return r.createElement(ht.b, {
                            headerTexts: e.getSportSpecific().getHeaderText()
                        });
                        if (he.isDarts(e)) return r.createElement(ot, {
                            headerTexts: e.getSportSpecific().getHeaderText()
                        })
                    }
                    return null
                }
            }
            class It extends r.Component {
                displayHeader(e, t, n) {
                    return r.createElement(it, {
                        participant: e,
                        firstEvent: t,
                        device: this.props.device,
                        key: e.getKey()
                    })
                }
                _getEventHeaderKey(e) {
                    const t = [];
                    return t.push(e.getSportId().toString()), he.isWinterSportsSkiJumping(e) ? t.push(e.getSportSpecific().isTeam() ? "1" : "0") : he.isWinterSportsAlpineSkiing(e) ? t.push(e.getSportSpecific().hasRounds() ? "1" : "0") : (he.isMotorsportAutoRacing(e) || he.isMotorsportMotoRacing(e)) && t.push(e.getTournamentTemplateKey()), t.join("_")
                }
                render() {
                    const e = this.props.participant.getEvents(),
                        t = e.length,
                        n = t - 1,
                        a = e[0] || null,
                        i = [];
                    let s = "";
                    for (const t in e) {
                        const a = e[t],
                            l = Number(t) == n;
                        let o = null;
                        const c = this._getEventHeaderKey(a);
                        s != c && (o = pt.getComponent(a, this.props.device, !1, !0), s = c);
                        const g = a.getEventId() + (this.props.forceRedrawSwitcher ? "_1" : "_0");
                        i.push(r.createElement(r.Fragment, {
                            key: g
                        }, o, r.createElement(at, {
                            eventId: a.getEventId(),
                            dateFormat: Ge.a.DATE,
                            eventProvider: this.props.fsLiveTable.getEventProvider(),
                            isLast: l,
                            isDuel: a.isDuel(),
                            isMyTeams: !0,
                            pageType: this.props.pageType,
                            blockType: Le.BLOCK_TYPE_DEFAULT,
                            key: g
                        })))
                    }
                    let l = "";
                    return a && he.isMotorsportMotoRacing(a) && a.getSportSpecific().isSpeedway() && !a.isDuel() && (l = " " + this.props.participant.getSportName() + "--speedway"), r.createElement(At, {
                        key: this.props.participant.getKey()
                    }, r.createElement("div", {
                        className: "sportName " + this.props.participant.getSportName() + l
                    }, this.displayHeader(this.props.participant, a, t), t ? i : r.createElement("div", {
                        className: "no-match"
                    }, this.props.participant.getTranslateNoMatch())))
                }
            }
            class At extends r.Component {
                render() {
                    return this.props.children
                }
            }
            class Nt extends r.PureComponent {
                render() {
                    return r.createElement("div", {
                        dangerouslySetInnerHTML: {
                            __html: this.props.nmfHTML
                        }
                    })
                }
            }
            class Rt extends r.PureComponent {
                constructor(e) {
                    super(e), this._reloadNoMatch = this._reloadNoMatch.bind(this), this.props.reloadNoMatch.noMatch = this._reloadNoMatch
                }
                _reloadNoMatch() {
                    this.forceUpdate()
                }
                componentDidMount() {
                    window.gamePlanLoader(this.props.sportDetails.sportId, this.props.fsLiveTable.getGamePlanSettings(), this.props.tabId, this.props.fsLiveTable.getFullFeedTrigger())
                }
                render() {
                    let e = 0;
                    if (e = this.props.tabId == _.a.TAB_ID_MYTEAMS ? this.props.fsLiveTable.getMyTeamsParticipants().length : this.props.fsLiveTable.getLeaguesByTabId(this.props.tabId).length, 0 == e) {
                        const e = window.no_match_found(this.props.tabId, this.props.sportDetails.name);
                        return this.props.fsLiveTable.getModuleLoader().executeGamePlanLoader(), r.createElement(Nt, {
                            nmfHTML: e,
                            key: "not-found"
                        })
                    }
                    return null
                }
            }
            class Ot extends r.Component {
                constructor(e) {
                    super(e), this._participants = [], this.lastSportName = "", this._wrappedParticipants = [], this.state = {
                        forceRedrawSwitcher: !1,
                        afterFirstRender: !1,
                        enableDoubleRendering: !0,
                        showAllEventsForParticipant: e.showAllEventsForParticipant
                    }, this._reloadTabContent = this._reloadTabContent.bind(this), this._forceRedrawTabContent = this._forceRedrawTabContent.bind(this), this._onShowAllEventsChange = this._onShowAllEventsChange.bind(this)
                }
                _forceRedrawTabContent(e = !1) {
                    this._initializeParticipants(), this.setState(t => ({
                        forceRedrawSwitcher: !t.forceRedrawSwitcher,
                        enableDoubleRendering: e
                    })), this.props.redrawMyTeamsTitle()
                }
                _reloadTabContent() {
                    this._initializeParticipants(), this.setState({
                        enableDoubleRendering: !1
                    })
                }
                _onShowAllEventsChange(e, t) {
                    this._initializeParticipants(), this.props.onShowAllEventsChange(e, t), this.setState(n => ({
                        showAllEventsForParticipant: Object.assign(Object.assign({}, n.showAllEventsForParticipant), {
                            [e]: t
                        }),
                        enableDoubleRendering: !1
                    }))
                }
                _initializeParticipants() {
                    this.lastSportName = "", this._wrappedParticipants = []
                }
                displayParticipants(e) {
                    if (this._participants = this.props.fsLiveTable.getMyTeamsParticipants(), 0 == this._participants.length) return r.createElement(Rt, {
                        sportDetails: this.props.sportDetails,
                        fsLiveTable: this.props.fsLiveTable,
                        reloadNoMatch: this.props.reloadNoMatch,
                        tabId: this.props.realTabId,
                        key: "noMatch",
                        pageType: this.props.pageType
                    });
                    if (this.state.afterFirstRender && 0 == this._participants.length) return this._wrappedParticipants;
                    this._wrappedParticipants = [];
                    for (const t of this._participants) {
                        const n = t.getKey(),
                            a = n in this.state.showAllEventsForParticipant ? this.state.showAllEventsForParticipant[n] : t.getVisibleEventsCount();
                        this._wrappedParticipants.push(r.createElement(It, {
                            fsLiveTable: this.props.fsLiveTable,
                            reloadNoMatchCall: this.props.reloadNoMatchCall,
                            reactCalls: this.props.reactCalls,
                            participant: t,
                            visibleEventsCount: a,
                            device: e,
                            onShowAllEventsChange: this._onShowAllEventsChange,
                            forceRedrawSwitcher: this.state.forceRedrawSwitcher,
                            pageType: this.props.pageType,
                            key: n
                        }))
                    }
                    return this._wrappedParticipants
                }
                componentDidMount() {
                    this.props.reloadTabContent[this.props.realTabId] = this._reloadTabContent, this.props.forceRedrawTabContent[this.props.realTabId] = this._forceRedrawTabContent, this.setState({
                        afterFirstRender: !0
                    })
                }
                componentWillUnmount() {
                    this.props.reloadTabContent[this.props.realTabId] = () => {}, this.props.forceRedrawTabContent[this.props.realTabId] = () => {}
                }
                render() {
                    return r.createElement("div", {
                        className: "event--myTeams event" + (this.props.devices == a.MOBILE ? " mobile" : "")
                    }, r.createElement(M.Consumer, null, e => this.state.afterFirstRender ? this.displayParticipants(e) : null))
                }
            }
            class Dt extends r.Component {
                render() {
                    return r.createElement("div", {
                        className: "sk sk--special"
                    }, r.createElement("div", {
                        className: "sk__r sk__r--a"
                    }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)))
                }
            }
            class Ct extends r.Component {
                constructor(e) {
                    super(e), this.state = {
                        title: this.props.fsLiveTable.getMyTeamsTitle()
                    }, this._setTitle = this._setTitle.bind(this)
                }
                _setTitle() {
                    this.setState({
                        title: this.props.fsLiveTable.getMyTeamsTitle()
                    })
                }
                render() {
                    return "";
                }
            }! function(e) {
                e.Move = "move", e.Copy = "copy"
            }(_t || (_t = {}));
            class yt extends r.Component {
                constructor(e) {
                    super(e), this.state = {
                        showDropDownList: !1,
                        selectedGroupKey: this.props.groupKey
                    }, this._myGames = this.props.utilEnviroment.getMyGamesObject(), this._handleShowDropDownList = this._handleShowDropDownList.bind(this), this._handleShowTitle = this._handleShowTitle.bind(this), this._handleHideTitle = this._handleHideTitle.bind(this), this._handleClickOnItem = this._handleClickOnItem.bind(this)
                }
                _handleShowDropDownList(e) {
                    e.stopPropagation(), this.setState({
                        showDropDownList: !this.state.showDropDownList
                    }, () => this._closeLastOpenedDropDown()), this._handleHideTitle(e)
                }
                _closeLastOpenedDropDown() {
                    if (this.state.showDropDownList) {
                        const e = this.props.getCurrentOpenedDropDown();
                        e && e.setState({
                            showDropDownList: !1
                        }), this.props.setCurrentOpenedDropDown(this)
                    } else this.props.setCurrentOpenedDropDown(null)
                }
                _handleShowTitle(e) {
                    e.currentTarget.title = this.props.utilTrans.translate("TRANS_MY_GAMES_SELECT_GROUP"), this.props.utilEnviroment.getTooltipObject().show(e.currentTarget, e, null, "live-table")
                }
                _handleHideTitle(e) {
                    this.props.utilEnviroment.getTooltipObject().hide(e.currentTarget)
                }
                _handleClickOnItem(e, t, n) {
                    this.props.groupKey != n && (this.props.league ? this._moveOrCopyLeague(this.props.league, t, n, this.props.groupKey) : this.props.event && this._moveOrCopyEvents([this.props.event.getEventId()], t, n, this.props.groupKey), this.props.reactCalls.reloadTabContent(_.a.TAB_ID_MYGAMES))
                }
                _renderList() {
                    if (!this.state.showDropDownList) return null;
                    const e = Array.from(Array(10).keys()).map(e => {
                        const t = yt._groupKeyToValue(e);
                        return r.createElement("li", {
                            key: e,
                            "data-key": e
                        }, r.createElement("div", {
                            className: "move",
                            onClick: t => {
                                this._handleClickOnItem(t, _t.Move, e)
                            }
                        }, r.createElement("span", null, t)), r.createElement("div", {
                            className: "copy",
                            onClick: t => {
                                this._handleClickOnItem(t, _t.Copy, e)
                            }
                        }, r.createElement("span", null, t)))
                    });
                    return r.createElement("ul", {
                        className: "mg_dropdown_list",
                        id: "mg_dropdown_list"
                    }, r.createElement("li", null, r.createElement("div", {
                        className: "move"
                    }, r.createElement("span", null, this.props.utilTrans.translate("TRANS_MY_GAMES_MOVE_TO"))), r.createElement("div", {
                        className: "copy"
                    }, r.createElement("span", null, this.props.utilTrans.translate("TRANS_MY_GAMES_COPY_TO")))), e)
                }
                render() {
                    const e = yt._groupKeyToValue(this.state.selectedGroupKey);
                    return r.createElement("div", {
                        className: "event__mgDropdown mg_dropdown",
                        onClick: this._handleShowDropDownList
                    }, r.createElement("div", {
                        className: "mg_dropdown_wrapper",
                        onMouseEnter: this._handleShowTitle,
                        onMouseLeave: this._handleHideTitle
                    }, r.createElement("span", {
                        className: "mg_dropdown_selected"
                    }, e), r.createElement("span", {
                        className: "down_arrow"
                    })), this._renderList())
                }
                componentWillUnmount() {
                    this.props.setCurrentOpenedDropDown(null)
                }
                static _groupKeyToValue(e) {
                    return e ? "" + e : "-"
                }
                _moveOrCopyLeague(e, t, n, a) {
                    const r = e.getLeagueId();
                    this._myGames.isAddedWholeTournament(r) ? t == _t.Move ? (this._myGames.addLabelToGroup(r, n, !0), this._myGames.removeLabelFromGroup(r, a)) : this._myGames.addLabelToGroup(r, n) : this._moveOrCopyEvents(e.getEventIds(), t, n, a)
                }
                _moveOrCopyEvents(e, t, n, a) {
                    t == _t.Move ? (this._myGames.addGamesToGroup(e, n, !0), this._myGames.removeGamesFromGroup(e, a)) : this._myGames.addGamesToGroup(e, n)
                }
            }
            class Ht {
                static getEvents(e, t = []) {
                    let n = e.reduce((e, t) => e.concat(t.getEvents()), []);
                    for (const e of t) n = n.filter(e);
                    return n
                }
            }
            class Lt {
                constructor(e, t) {
                    this._currentOpenedDropDown = null, this._utilConfig = e.createConfig(), this._cjsCfg = e.createCjsConfig(), this._utilTrans = e.createTrans(), this._utilEnviroment = e.createEnviroment(), this._myGamesObject = this._utilEnviroment.getMyGamesObject(), this._reactCalls = t
                }
                isActive() {
                    return this._utilConfig.get("app", "mygames", "groups", "enable") && this._cjsCfg.mygamesGroups && !this._utilEnviroment.isResponsive()
                }
                getGroupsForEvents(e) {
                    return this._myGamesObject.getGamesGroups(e)
                }
                getGroupsForLeagues(e) {
                    const t = Ht.getEvents(e).map(e => e.getEventId());
                    return this.getGroupsForEvents(t)
                }
                getGroupTitle(e) {
                    return this._utilTrans.translate("TRANS_MY_GAMES_GROUP").replace("%s", "" + e)
                }
                getFilteredEventsByGroup(e, t) {
                    return this.isActive() ? e.filter(e => this.isEventInGroup(e.getEventId(), t)) : e
                }
                isEventInGroup(e, t) {
                    const n = this._myGamesObject.getGameGroup(e).toString();
                    return !!n && n.split(",").includes("" + t)
                }
                removeEventFromGroup(e, t) {
                    return !!this.isEventInGroup(e, t) && (this._myGamesObject.removeGamesFromGroup([e], t), !0)
                }
                getEventIdsByLeagueAndGroup(e, t) {
                    const n = [],
                        a = this._myGamesObject.getContainer();
                    for (const r in a) a[r].labl_id == e && this.isEventInGroup(r, t) && n.push(r);
                    return n
                }
                canDisplayDropDown(e) {
                    return !!this.isActive() && (!e.hasOwnProperty("event") || !this._myGamesObject.isAddedWholeTournament(e.event.getLeagueId()))
                }
                renderDropDown(e, t = 0) {
                    return this.canDisplayDropDown(e) ? r.createElement(yt, Object.assign({
                        utilTrans: this._utilTrans,
                        utilEnviroment: this._utilEnviroment,
                        setCurrentOpenedDropDown: e => this._currentOpenedDropDown = e,
                        getCurrentOpenedDropDown: () => this._currentOpenedDropDown,
                        groupKey: t,
                        reactCalls: this._reactCalls
                    }, e)) : null
                }
                displayMgGroupsInfoTextForMobile() {
                    return this._utilConfig.get("app", "mygames", "groups", "enable") && this._cjsCfg.mygamesGroups && this._utilEnviroment.isResponsive() ? this._utilTrans.translate("TRANS_MY_GAMES_GROUPS_MOBILE_INFO_TEXT") : ""
                }
            }
            class Pt extends r.Component {
                constructor(e) {
                    super(e), this.STORAGE_KEY = "mg_infobox", this.TTL = 7776e3;
                    const t = this.props.utilFactory.createEnviroment();
                    this._utilTrans = this.props.utilFactory.createTrans(), this._utilConfig = this.props.utilFactory.createConfig(), this._cjsCfg = this.props.utilFactory.createCjsConfig(), this._livescoreSettings = t.getLivescoreSettings(), this._clientStorage = this.props.utilFactory.createClientStorage(), this._myGames = t.getMyGamesObject(), this.state = {
                        shouldBeDisplayed: this._shouldBeDisplayed()
                    }, this._closeInfoBox = this._closeInfoBox.bind(this)
                }
                _closeInfoBox(e) {
                    e.preventDefault(), this._clientStorage.store(this.STORAGE_KEY, "1", this.TTL), this.setState({
                        shouldBeDisplayed: this._shouldBeDisplayed()
                    })
                }
                _shouldBeDisplayed() {
                    return !!this._utilConfig.get("app", "mygames", "groups", "enable") && (!this._cjsCfg.mygamesGroups && (this.props.device != a.MOBILE && (0 != this._myGames.getCount() && "1" !== this._clientStorage.get(this.STORAGE_KEY))))
                }
                update() {
                    this.setState({
                        shouldBeDisplayed: this._shouldBeDisplayed()
                    })
                }
                render() {
                    return this.state.shouldBeDisplayed ? r.createElement("div", {
                        className: "mg_group_info_box"
                    }, r.createElement("div", {
                        className: "mg_group_info_box_content"
                    }, this._utilTrans.translate("TRANS_MY_GAMES_GROUP_INFO_PART1"), r.createElement("br", null), r.createElement("a", {
                        href: "#",
                        onClick: () => this._livescoreSettings.show()
                    }, this._utilTrans.translate("TRANS_MY_GAMES_GROUP_INFO_PART2"))), r.createElement("a", {
                        className: "mg_group_info_close",
                        href: "#",
                        onClick: this._closeInfoBox
                    })) : null
                }
            }
            class Mt {
                static run() {
                    window.expand_collapse_league_load()
                }
            }

            function Ft(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle()),
                    n = Object(I.a)(() => e.event.getOddsLayout());
                return null === t || null === n ? null : n == W.TYPE_1X2 ? class {
                    static render(e) {
                        return r.createElement(r.Fragment, null, r.createElement("div", {
                            className: "odds__odd no-odds fontBold"
                        }, "1"), r.createElement("div", {
                            className: "odds__odd no-odds fontBold"
                        }, e.titleX), r.createElement("div", {
                            className: "odds__odd no-odds fontBold last"
                        }, "2"))
                    }
                }.render({
                    titleX: t.getX()
                }) : n == W.TYPE_12 ? class {
                    static render() {
                        return r.createElement(r.Fragment, null, r.createElement("div", {
                            className: "odds__odd no-odds fontBold"
                        }, "1"), r.createElement("div", {
                            className: "odds__odd no-odds fontBold last"
                        }, "2"))
                    }
                }.render() : n == W.TYPE_AH ? class {
                    static render(e) {
                        return r.createElement(r.Fragment, null, r.createElement("div", {
                            className: "odds__odd no-odds"
                        }, r.createElement("span", {
                            className: "help",
                            title: e.titleFull
                        }, e.titleShort)), r.createElement("div", {
                            className: "odds__odd no-odds"
                        }, "1"), r.createElement("div", {
                            className: "odds__odd no-odds last"
                        }, "2"))
                    }
                }.render({
                    titleFull: t.getSpreadFull(),
                    titleShort: t.getSpreadShort()
                }) : n == W.TYPE_EACH_WAY ? je.render({
                    titleEachWayFull: t.getEachWayFull(e.event.getEachWayHandicapValue()),
                    titleEachWayShort: t.getEachWayShort(),
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort(),
                    device: a.DESKTOP
                }) : n == W.TYPE_TW ? $e.render({
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort(),
                    titleTop5Full: t.getTop5Full(),
                    titleTop5Short: t.getTop5Short(),
                    titleTop10Full: t.getTop10Full(),
                    titleTop10Short: t.getTop10Short(),
                    titleTop20Full: t.getTop20Full(),
                    titleTop20Short: t.getTop20Short(),
                    device: a.DESKTOP
                }) : n == W.TYPE_TW_3_6_10 ? Ze.render({
                    titleWinnerFull: t.getWinnerFull(),
                    titleWinnerShort: t.getWinnerShort(),
                    titleTop3Full: t.getTop3Full(),
                    titleTop3Short: t.getTop3Short(),
                    titleTop6Full: t.getTop6Full(),
                    titleTop6Short: t.getTop6Short(),
                    titleTop10Full: t.getTop10Full(),
                    titleTop10Short: t.getTop10Short()
                }) : n == W.TYPE_US_LAYOUT ? class {
                    static render(e) {
                        return r.createElement(r.Fragment, null, r.createElement("div", {
                            className: "odds__odd no-odds odds__odd--spread fontBold"
                        }, r.createElement("span", {
                            className: "help",
                            title: e.titleSpreadFull
                        }, e.titleSpreadShort)), r.createElement("div", {
                            className: "odds__odd no-odds odds__odd--moneyline fontBold"
                        }, e.titleMoneyLine), r.createElement("div", {
                            className: "odds__odd no-odds odds__odd--total fontBold last"
                        }, e.titleOverUnder))
                    }
                }.render({
                    titleSpreadFull: t.getSpreadFull(),
                    titleSpreadShort: t.getSpreadShort(),
                    titleMoneyLine: t.getMoneyLine(),
                    titleOverUnder: t.getOverUnder()
                }) : null
            }
            class wt {
                static render(e) {
                    return r.createElement("div", {
                        className: "event__match event__match__header event__match__header--noDuel"
                    }, r.createElement("div", {
                        className: "event__rating",
                        title: e.rankTitle
                    }, "#"), r.createElement("div", {
                        className: "event__participant",
                        title: e.titlePlayerFull
                    }, e.titlePlayerShort), r.createElement("div", {
                        className: "event__participant",
                        title: e.titleTeamFull
                    }, e.titleTeamShort), Ze.render({
                        titleWinnerFull: e.titleWinnerFull,
                        titleWinnerShort: e.titleWinnerShort,
                        titleTop3Full: e.titleTop3Full,
                        titleTop3Short: e.titleTop3Short,
                        titleTop6Full: e.titleTop6Full,
                        titleTop6Short: e.titleTop6Short,
                        titleTop10Full: e.titleTop10Full,
                        titleTop10Short: e.titleTop10Short
                    }))
                }
            }

            function bt(e) {
                const t = Object(I.a)(() => e.event.getOddsHeaderTitle()),
                    n = e.event;
                if (null === t) return null;
                if (he.isGolf(n) && !n.isDuel()) {
                    const i = n.getSportSpecific().getHeaderText();
                    return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.rankTitle
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.titlePlayerFull
                            }, e.titlePlayerShort), r.createElement("div", {
                                className: "odds__odd no-odds",
                                style: e.device == a.DESKTOP ? {
                                    width: "41px"
                                } : void 0,
                                title: e.titleParFull
                            }, e.titleParShort), $e.render({
                                titleWinnerFull: e.titleWinnerFull,
                                titleWinnerShort: e.titleWinnerShort,
                                titleTop5Full: e.titleTop5Full,
                                titleTop5Short: e.titleTop5Short,
                                titleTop10Full: e.titleTop10Full,
                                titleTop10Short: e.titleTop10Short,
                                titleTop20Full: e.titleTop20Full,
                                titleTop20Short: e.titleTop20Short,
                                device: e.device
                            }))
                        }
                    }.render({
                        rankTitle: i.getRankTitle(),
                        titlePlayerFull: i.getPlayerTitle(),
                        titlePlayerShort: i.getPlayerText(),
                        titleParFull: i.getParTitle(),
                        titleParShort: i.getParText(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort(),
                        titleTop5Full: t.getTop5Full(),
                        titleTop5Short: t.getTop5Short(),
                        titleTop10Full: t.getTop10Full(),
                        titleTop10Short: t.getTop10Short(),
                        titleTop20Full: t.getTop20Full(),
                        titleTop20Short: t.getTop20Short(),
                        device: e.device
                    })
                }
                if (he.isCycling(n)) {
                    const e = n.getSportSpecific().getHeaderText();
                    return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.rankTitle
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.titleNameFull
                            }, e.titleNameShort), r.createElement("div", {
                                className: "event__participant",
                                title: e.titleTeamFull
                            }, e.titleTeamShort), Ze.render({
                                titleWinnerFull: e.titleWinnerFull,
                                titleWinnerShort: e.titleWinnerShort,
                                titleTop3Full: e.titleTop3Full,
                                titleTop3Short: e.titleTop3Short,
                                titleTop6Full: e.titleTop6Full,
                                titleTop6Short: e.titleTop6Short,
                                titleTop10Full: e.titleTop10Full,
                                titleTop10Short: e.titleTop10Short
                            }))
                        }
                    }.render({
                        rankTitle: e.getRankTitle(),
                        titleNameFull: e.getParticipantTitle(),
                        titleNameShort: e.getParticipantText(),
                        titleTeamFull: e.getTeamTitle(),
                        titleTeamShort: e.getTeamText(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort(),
                        titleTop3Full: t.getTop3Full(),
                        titleTop3Short: t.getTop3Short(),
                        titleTop6Full: t.getTop6Full(),
                        titleTop6Short: t.getTop6Short(),
                        titleTop10Full: t.getTop10Full(),
                        titleTop10Short: t.getTop10Short()
                    })
                }
                if (he.isHorseRacing(n)) {
                    const i = n.getSportSpecific().getHeaderText();
                    return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.rankTitle
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.horseTitle
                            }, e.horseText), r.createElement("div", {
                                className: "event__participant event__participant--team",
                                title: e.teamTitle
                            }, e.teamText), r.createElement("div", {
                                className: "odds__odd no-odds",
                                style: e.device == a.DESKTOP ? {
                                    width: "53px"
                                } : void 0,
                                title: e.distanceTitle
                            }, e.distanceText), je.render({
                                titleWinnerFull: e.titleWinnerFull,
                                titleWinnerShort: e.titleWinnerShort,
                                titleEachWayFull: e.titleEachWayFull,
                                titleEachWayShort: e.titleEachWayShort,
                                device: e.device
                            }))
                        }
                    }.render({
                        rankTitle: i.getRankTitle(),
                        horseText: i.getHorseText(),
                        horseTitle: i.getHorseTitle(),
                        teamText: i.getTeamText(),
                        teamTitle: i.getTeamTitle(),
                        distanceText: i.getDistanceText(),
                        distanceTitle: i.getDistanceTitle(),
                        titleEachWayFull: t.getEachWayFull(n.getEachWayHandicapValue()),
                        titleEachWayShort: t.getEachWayShort(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort(),
                        device: e.device
                    })
                }
                if (he.isWinterSportsAlpineSkiing(n) || he.isWinterSportsBiathlon(n) || he.isWinterSportsCrossCountry(n) || he.isWinterSportsSkiJumping(n)) {
                    const e = n.getSportSpecific().getHeaderText();
                    return class {
                        static render(e) {
                            return r.createElement("div", {
                                className: "event__match event__match__header event__match__header--noDuel"
                            }, r.createElement("div", {
                                className: "event__rating",
                                title: e.rankTitle
                            }, "#"), r.createElement("div", {
                                className: "event__participant",
                                title: e.titleNameFull
                            }, e.titleNameShort), Ze.render({
                                titleWinnerFull: e.titleWinnerFull,
                                titleWinnerShort: e.titleWinnerShort,
                                titleTop3Full: e.titleTop3Full,
                                titleTop3Short: e.titleTop3Short,
                                titleTop6Full: e.titleTop6Full,
                                titleTop6Short: e.titleTop6Short,
                                titleTop10Full: e.titleTop10Full,
                                titleTop10Short: e.titleTop10Short
                            }))
                        }
                    }.render({
                        rankTitle: e.getRankTitle(),
                        titleNameFull: e.getParticipantTitle(),
                        titleNameShort: e.getParticipantText(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort(),
                        titleTop3Full: t.getTop3Full(),
                        titleTop3Short: t.getTop3Short(),
                        titleTop6Full: t.getTop6Full(),
                        titleTop6Short: t.getTop6Short(),
                        titleTop10Full: t.getTop10Full(),
                        titleTop10Short: t.getTop10Short()
                    })
                }
                if (he.isMotorsportAutoRacing(n)) {
                    const e = n.getSportSpecific().getHeaderText();
                    return wt.render({
                        rankTitle: e.getRankTitle(),
                        titlePlayerFull: e.getPlayerTitle(),
                        titlePlayerShort: e.getPlayerText(),
                        titleTeamFull: e.getTeamTitle(),
                        titleTeamShort: e.getTeamText(),
                        titleWinnerFull: t.getWinnerFull(),
                        titleWinnerShort: t.getWinnerShort(),
                        titleTop3Full: t.getTop3Full(),
                        titleTop3Short: t.getTop3Short(),
                        titleTop6Full: t.getTop6Full(),
                        titleTop6Short: t.getTop6Short(),
                        titleTop10Full: t.getTop10Full(),
                        titleTop10Short: t.getTop10Short()
                    })
                }
                if (he.isMotorsportMotoRacing(n) && !n.isDuel()) {
                    if (n.getSportSpecific().isSpeedway()) {
                        const e = n.getSportSpecific().getSpeedwayHeaderText();
                        return class {
                            static render(e) {
                                return r.createElement("div", {
                                    className: "event__match event__match__header event__match__header--noDuel"
                                }, r.createElement("div", {
                                    className: "event__rating",
                                    title: e.rankTitle
                                }, "#"), r.createElement("div", {
                                    className: "event__participant",
                                    title: e.titlePlayerFull
                                }, e.titlePlayerShort), Ze.render({
                                    titleWinnerFull: e.titleWinnerFull,
                                    titleWinnerShort: e.titleWinnerShort,
                                    titleTop3Full: e.titleTop3Full,
                                    titleTop3Short: e.titleTop3Short,
                                    titleTop6Full: e.titleTop6Full,
                                    titleTop6Short: e.titleTop6Short,
                                    titleTop10Full: e.titleTop10Full,
                                    titleTop10Short: e.titleTop10Short
                                }))
                            }
                        }.render({
                            rankTitle: e.getRankTitle(),
                            titlePlayerFull: e.getPlayerTitle(),
                            titlePlayerShort: e.getPlayerText(),
                            titleWinnerFull: t.getWinnerFull(),
                            titleWinnerShort: t.getWinnerShort(),
                            titleTop3Full: t.getTop3Full(),
                            titleTop3Short: t.getTop3Short(),
                            titleTop6Full: t.getTop6Full(),
                            titleTop6Short: t.getTop6Short(),
                            titleTop10Full: t.getTop10Full(),
                            titleTop10Short: t.getTop10Short()
                        })
                    } {
                        const e = n.getSportSpecific().getHeaderText();
                        return wt.render({
                            rankTitle: e.getRankTitle(),
                            titlePlayerFull: e.getPlayerTitle(),
                            titlePlayerShort: e.getPlayerText(),
                            titleTeamFull: e.getTeamTitle(),
                            titleTeamShort: e.getTeamText(),
                            titleWinnerFull: t.getWinnerFull(),
                            titleWinnerShort: t.getWinnerShort(),
                            titleTop3Full: t.getTop3Full(),
                            titleTop3Short: t.getTop3Short(),
                            titleTop6Full: t.getTop6Full(),
                            titleTop6Short: t.getTop6Short(),
                            titleTop10Full: t.getTop10Full(),
                            titleTop10Short: t.getTop10Short()
                        })
                    }
                }
                return null
            }

            function ft(e) {
                const t = e.league.getRaceInfoTexts(e.pageType);
                if (null === t) return null;
                const n = function(e) {
                    const t = [];
                    let n = 0;
                    for (const a of e) t.push(r.createElement("span", {
                        key: n++,
                        title: a.title || void 0
                    }, a.text));
                    return t
                }(t);
                return 0 === n.length ? null : r.createElement("div", {
                    className: "event__header event__header--info"
                }, n)
            }
            class kt extends r.PureComponent {
                constructor(e, t, n) {
                    super(e, t), this.subscription = n, this.isLeagueOpen = this.isLeagueOpen.bind(this), this.state = {
                        visibility: this.isLeagueOpen(),
                        league: null
                    }
                }
                isLeagueOpen() {
                    const e = [ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_PLAYER, ce.PAGE_TYPE_TEAM].includes(this.props.pageType);
                    return this.props.league.isOpen() || e
                }
                handler(e) {
                    this.props.handlerHideTooltip(e), this.props.handlerVisibility && this.props.handlerVisibility(this.props.league, !this.isLeagueOpen())
                }
                displayInfo(e) {
                    return null;
                }
                displayExpander(e) {
                    if (e) return null;
                    const t = this.props.league.getHeaderCommonTexts();
                    return r.createElement("div", {
                        className: "event__expander icon--expander" + (this.isLeagueOpen() ? " collapse" : " expand"),
                        title: this.isLeagueOpen() ? t.getCollapseLeagueIframeText() : t.getExpandLeagueIframeText(),
                        onClick: e => this.handler(e),
                        onMouseEnter: e => this.props.league.getHandlerExpanderOnMouseEnter()(e),
                        onMouseLeave: e => this.props.league.getHandlerExpanderOnMouseLeave()(e)
                    })
                }
                displayEventHeader(e) {
                    if (this.props.hideEventHeader) return null;
                    if (this.props.isOdds && e == a.DESKTOP) return r.createElement(bt, {
                        event: this.props.firstEvent,
                        device: e
                    }); {
                        const t = !(!this.props.myGamesGroups || !this.props.myGamesGroups.canDisplayDropDown({
                            event: this.props.firstEvent
                        }));
                        this.props.fsLiveTable.scopeBeginByBlockType(this.props.blockType);
                        const n = pt.getComponent(this.props.firstEvent, e, t, !1, this.props.pageType);
                        return this.props.fsLiveTable.scopeEnd(), n
                    }
                }
                displayMyGamesGroupsHeader() {
                    return null
                }
                componentDidMount() {
                    const e = this.props.fsLiveTable.getLeagueProvider(this.props.blockType);
                    this.subscription = e.subscribe(this.props.league.getLeagueId(), e => this.setState({
                        league: e
                    }))
                }
                componentWillUnmount() {
                    this.subscription.unsubscribe()
                }
                displaySportHeader() {
                    const e = this.props.league.getSportId(),
                        t = this.props.league.getParentSports()[e] || 0,
                        n = this.props.league.getSportName() == this.props.lastSportName,
                        a = this.props.league.getSportCategoryId() == this.props.lastSportCategoryId,
                        i = this.props.league.isParentPage(),
                        s = this.props.league.isMixedPage(),
                        l = [_.a.TAB_ID_MYGAMES, _.a.TAB_ID_MYGAMES_GROUPS].includes(this.props.tabId);
                    if ([ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_CATEGORY, ce.PAGE_TYPE_TEAM, ce.PAGE_TYPE_PLAYER].includes(this.props.pageType) || (!t || a && (!i || n)) && (!l && !s || n)) return null;
                    const o = this.props.league.getCompleteSportTranslations(),
                        c = this.props.league.isMotorSport() ? this.props.league.getTitle().split(":")[0] : o[this.props.league.getSportName()].name || "",
                        g = this.props.league.getSportListById();
                    let h = g[e] || "";
                    return this.props.league.isMotorSport() && (h = (g[t] || "") + " " + h), r.createElement("div", {
                        className: "sportHeader " + h
                    }, r.createElement("div", {
                        className: "sportIcon sportIcon--" + g[e]
                    }), c)
                }
                render() {
                    if (!this.state.league) return null;
                    const e = () => this.props.blockType && this.props.fsLiveTable.scopeBeginByBlockType(this.props.blockType),
                        t = () => this.props.blockType && this.props.fsLiveTable.scopeEnd();
                    e();
                    const n = this.props.league.getMyLeaguesIcon(),
                        a = this.props.league.getAddLeagueToMyGamesIcon(),
                        i = this.props.league.isNoDuelTournament(),
                        s = (i || "golf" == this.props.league.getSportName()) && this.isLeagueOpen(),
                        l = this.props.firstEvent,
                        o = (!this.props.league.isCollapsible() || this.isLeagueOpen()) && a.isEnabled(),
                        g = he.isGolf(l) && l.isDuel(),
                        _ = he.isMotorsportMotoRacing(l) && l.isDuel(),
                        h = this.props.league.isSortByTime() || this.props.league.isMygamesGroups() || g || _ || this.props.expandCollapseLeagueDisabled,
                        d = !he.isHorseRacing(l),
                        T = r.createElement(r.Fragment, null, this.displayMyGamesGroupsHeader(), r.createElement(rt.Consumer, null, ({
                            isSingleSport: e
                        }) => e ? null : this.displaySportHeader()), r.createElement("div", {
                            className: "event__header" + (o ? "" : " event__header--no-my-games") + (h ? " event__header--noExpand" : "") + (this.props.myGamesGroups && this.props.myGamesGroups.isActive() ? " event__header--mgDropdown" : "")
                        }, class {
                            static getCheckBoxClassName(e) {
                                return e.checked ? " checked" : ""
                            }
                            static render(e) {
                                return null
                            }
                        }.render({
                            checked: a.isChecked(),
                            enabled: o,
                            leagueId: this.props.league.getLeagueId(),
                            eventIds: this.props.league.getEventIds(),
                            isNoDuelTournament: i,
                            eventsAreStatic: l.getIsStatic(),
                            handlerOnClick: e => a.getHandlerOnClick()(e),
                            handlerOnMouseEnter: e => a.getHandlerOnMouseEnter()(e),
                            handlerOnMouseLeave: e => a.getHandlerOnMouseLeave()(e),
                            beforeToggle: e,
                            afterToggle: t,
                            myGamesController: (new E).setMyGamesGroups(this.props.myGamesGroups).build()
                        }), this.props.myGamesGroups ? this.props.myGamesGroups.renderDropDown({
                            league: this.props.league
                        }, this.props.myGamesGroupKey) : null, r.createElement("div", {
                            className: "icon--flag event__title fl_" + this.props.league.getCountryId(),
                            title: this.props.league.getCountryName()
                        }, r.createElement("div", {
                            className: "event__titleBox"
                        }, d && r.createElement("span", {
                            className: "event__title--type"
                        }, this.props.league.getTitleCountryName()), r.createElement("span", {
                            className: "event__title--name",
                            title: this.props.league.getTitleTournamentName()
                        }, this.props.league.getTitleTournamentName())), n.isEnabled() ? r.createElement("span", {
                            className: n.getClass(),
                            onClick: e => n.getHandlerOnClick()(e),
                            onMouseEnter: e => n.getHandlerOnMouseEnter()(e),
                            onMouseLeave: e => n.getHandlerOnMouseLeave()(e)
                        }) : null), i ? r.createElement("div", {
                            className: "event__startTime"
                        }, this.props.league.getTitleStageStartTime()) : r.createElement(M.Consumer, null, e => this.displayInfo(e))), s ? r.createElement(ft, {
                            league: this.props.league,
                            pageType: this.props.pageType
                        }) : null, this.isLeagueOpen() && r.createElement(M.Consumer, null, e => this.displayEventHeader(e)));
                    return t(), T
                }
            }
            class Gt extends r.Component {
                constructor(e) {
                    super(e), this.handler = this.handler.bind(this)
                }
                handler(e, t) {
                    e.setIsOpen(t), this._storeVisibility(e), this.forceUpdate()
                }
                _storeVisibility(e) {
                    const t = e.getClientStorage(),
                        n = {},
                        a = t.get("fsdc_expand_collapse_league"),
                        r = e.isOpen(),
                        i = e.isClosedByAdmin(),
                        s = e.getLeagueId(),
                        l = [];
                    let o = "";
                    if (null != a && a.length > 0) {
                        const e = a.split(".");
                        for (const t in e) n[e[t]] = e[t]
                    }
                    r && i || !r && !i ? n[s] = s : delete n[s];
                    for (const e in n) l.push(e);
                    l.length > 0 && (o = l.join(".")), t.store("fsdc_expand_collapse_league", o, 31536e3)
                }
                _showMore(e) {
                    return r.createElement("div", {
                        className: "event__more",
                        onClick: t => {
                            this.props.reactCalls.loadingState("liveTableLeagueShowMore", !0);
                            const n = () => {
                                    this.props.onShowAllEventsChange(this.props.leagueId, e.getEventCount()), this.props.reactCalls.loadingState("liveTableLeagueShowMore", !1)
                                },
                                a = t => {
                                    this.props.reactCalls.loadingState("liveTableLeagueShowMore", !1), e.getHandlerOnClick()(t)
                                };
                            this.props.tabId == _.a.TAB_ID_MYGAMES ? window.fs_update.loadFeedForNoduelMygames(e.getLeagueId(), n) : this.props.tabId == _.a.TAB_ID_COUNTRY_ALL && e.isGolf() ? a(t) : n()
                        }
                    }, e.getHeaderCommonTexts().getShowMoreText())
                }
                displayHeader(e, t, n) {
                    return r.createElement(kt, {
                        handlerVisibility: this.handler,
                        handlerHideTooltip: e.getHandlerHideTooltip(),
                        league: e,
                        firstEvent: t,
                        eventsLength: n,
                        isOdds: this.props.isOdds,
                        fsLiveTable: this.props.fsLiveTable,
                        reloadNoMatchCall: this.props.reloadNoMatchCall,
                        lastSportName: this.props.lastSportName,
                        lastSportCategoryId: this.props.lastSportCategoryId,
                        tabId: this.props.tabId,
                        myGamesGroups: this.props.myGamesGroups,
                        myGamesGroupKey: this.props.myGamesGroupKey,
                        myGamesGroupsFirstLeague: this.props.myGamesGroupsFirstLeague,
                        expandCollapseLeagueDisabled: this.props.expandCollapseLeagueDisabled,
                        pageType: this.props.pageType,
                        blockType: this.props.blockType,
                        key: this.props.leagueId
                    })
                }
                render() {
                    const e = this.props.league;
                    if (!e) return null;
                    let t = e.getEvents();
                    const n = [_.a.TAB_ID_MYGAMES, _.a.TAB_ID_MYGAMES_GROUPS].includes(this.props.tabId);
                    n && this.props.myGamesGroups && (t = this.props.myGamesGroups.getFilteredEventsByGroup(t, this.props.myGamesGroupKey));
                    let a = t.length;
                    if (0 == a) return null;
                    const i = [],
                        s = a - 1,
                        l = e.isSortByTime() || e.isMygamesGroups(),
                        o = [ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_PLAYER, ce.PAGE_TYPE_TEAM].includes(this.props.pageType),
                        c = e.isOpen() || l || o,
                        g = t[0];
                    if (!c) return r.createElement(Ut, {
                        key: e.getLeagueId()
                    }, this.displayHeader(e, g, a));
                    for (const n in t) {
                        const a = t[n],
                            l = Number(n) == s;
                        i.push(r.createElement(at, {
                            eventId: a.getEventId(),
                            eventProvider: this.props.fsLiveTable.getEventProvider(),
                            isLast: l,
                            isDuel: !e.isNoDuelTournament(),
                            isOdds: this.props.isOdds,
                            myGamesGroups: this.props.myGamesGroups,
                            selectedMyGamesGroupKey: this.props.myGamesGroupKey,
                            pageType: this.props.pageType,
                            blockType: this.props.blockType,
                            key: a.getEventId()
                        }))
                    }
                    if (e.isNoDuelTournament()) {
                        a = e.getEventCount();
                        let t = "",
                            s = "";
                        he.isGolf(g) && this.props.pageType !== ce.PAGE_TYPE_PLAYER && (t = g.getSportSpecific().getScheduledInfo()), he.isWinterSportsSkiJumping(g) && g.getSportSpecific().isTeam() && (s = " " + e.getSportName() + "--team"), he.isMotorsportMotoRacing(g) && g.getSportSpecific().isSpeedway() && (s = " " + e.getSportName() + "--speedway");
                        let l = !0;
                        return n && this.props.myGames && (l = this.props.myGames.isAddedWholeTournament(e.getLeagueId())), r.createElement("div", {
                            className: "sportName " + e.getSportName() + s,
                            key: e.getLeagueId()
                        }, this.displayHeader(e, g, a), l ? i.slice(0, this.props.visibleEventsCount) : i, this.props.showMoreGamesLink && this.props.showMoreGamesLink(), l && a > this.props.visibleEventsCount ? this._showMore(e) : null, t && a <= this.props.visibleEventsCount ? r.createElement("div", {
                            className: "extraInfo__text extraInfo__text--center"
                        }, t) : null)
                    }
                    return r.createElement(Ut, {
                        key: e.getLeagueId()
                    }, this.displayHeader(e, g, a), i, this.props.showMoreGamesLink && this.props.showMoreGamesLink())
                }
            }
            class Ut extends r.Component {
                render() {
                    return this.props.children
                }
            }
            class Bt extends r.Component {
                constructor() {
                    super(...arguments), this.state = {
                        league: this.props.league
                    }
                }
                componentDidMount() {
                    this.subscription = this.props.fsLiveTable.getLeagueProvider().subscribe(this.props.leagueId, () => {
                        this.setState({
                            league: this.props.fsLiveTable.getLeague(this.props.leagueId, this.props.tabId)
                        })
                    })
                }
                componentWillUnmount() {
                    this.subscription && this.subscription.unsubscribe()
                }
                render() {
                    return r.createElement(Gt, Object.assign({}, this.props, {
                        league: this.state.league
                    }))
                }
            }
            class Wt {
                constructor(e, t, n) {
                    this._sportName = e, this._league = t, this._myGamesGroup = n
                }
                getLeague() {
                    return this._league
                }
                getMyGamesGroup() {
                    return this._myGamesGroup
                }
                getSportName() {
                    return this._sportName
                }
            }
            class xt {
                constructor(e) {
                    this._sportName = "", this._myGamesGroup = 0, this._league = e
                }
                setSportName(e) {
                    return this._sportName = e, this
                }
                setMyGamesGroup(e) {
                    return this._myGamesGroup = e, this
                }
                build() {
                    return new Wt(this._sportName, this._league, this._myGamesGroup)
                }
            }
            class Xt {
                constructor() {
                    this._data = {}, this._groups = []
                }
                clean() {
                    this._data = {}, this._groups = []
                }
                addSection(e) {}
                addItem(e) {
                    const t = e.getMyGamesGroup(),
                        n = e.getSportName();
                    this._data[t] || (this._data[t] = {}, this._groups.push(t)), this._data[t][n] || (this._data[t][n] = []), this._data[t][n].push(e.getLeague())
                }
                getLeagues() {
                    const e = [];
                    return this._groups.forEach(t => {
                        if (this._data[t])
                            for (const n in this._data[t]) e.push(r.createElement(r.Fragment, {
                                key: t + "-" + n
                            }, r.createElement("div", {
                                className: "sportName " + n
                            }, this._data[t][n])))
                    }), e
                }
            }
            class Yt extends r.Component {
                constructor(e) {
                    super(e), this.leaguesByTabId = [], this.leagueKeys = {}, this.lastSportName = "", this.lastSportCategoryId = 0, this._leaguesWrapper = new Xt, this.state = {
                        forceRedrawSwitcher: !1,
                        enableDoubleRendering: !0,
                        showAllEventsForLeague: e.showAllEventsForLeague
                    }, this._onShowAllEventsChange = this._onShowAllEventsChange.bind(this)
                }
                forceRedrawTabContent(e = !1) {
                    this._initializeLeagues(), this.setState(t => ({
                        forceRedrawSwitcher: !t.forceRedrawSwitcher,
                        enableDoubleRendering: e
                    }))
                }
                reloadTabContent() {
                    this._initializeLeagues(), this.setState({
                        enableDoubleRendering: !1
                    }), this.props.pushManager.updateSubscription()
                }
                _onShowAllEventsChange(e, t) {
                    this._initializeLeagues(), this.props.onShowAllEventsChange(e, t), this.setState(n => ({
                        showAllEventsForLeague: Object.assign(Object.assign({}, n.showAllEventsForLeague), {
                            [e]: t
                        }),
                        enableDoubleRendering: !1
                    }))
                }
                _initializeLeagues() {
                    this.lastSportName = "", this.leagueKeys = {}, this._leaguesWrapper.clean()
                }
                displayLeagues() {
                    if (!this.props.myGamesGroups.isActive() && this.props.tabID == _.a.TAB_ID_MYGAMES_GROUPS) return null;
                    if (this.leaguesByTabId = this.props.fsLiveTable.getLeaguesByTabId(this.props.tabID), 0 == this.leaguesByTabId.length) return this.props.tabID == _.a.TAB_ID_MYGAMES_GROUPS ? null : r.createElement(Rt, {
                        sportDetails: this.props.sportDetails,
                        fsLiveTable: this.props.fsLiveTable,
                        reloadNoMatch: this.props.reloadNoMatch,
                        tabId: this.props.tabID,
                        key: "noMatch",
                        pageType: this.props.pageType
                    });
                    this._leaguesWrapper.clean();
                    const e = this._createMyGamesGroupsFromLeagues(this.leaguesByTabId);
                    let t = 0;
                    for (const n of e) {
                        this.lastSportName = "", this.leagueKeys = {};
                        for (const e of this.leaguesByTabId) {
                            const a = e.getLeagueId();
                            if (this.leagueKeys[a] = a in this.leagueKeys ? this.leagueKeys[a] + 1 : 0, !(this.props.myGamesGroups.getFilteredEventsByGroup(e.getEvents(), n).length > 0)) continue;
                            const i = a + "_" + this.leagueKeys[a] + (this.state.forceRedrawSwitcher ? "_1" : "_0"),
                                s = a in this.state.showAllEventsForLeague ? this.state.showAllEventsForLeague[a] : e.getVisibleEventsCount(),
                                l = e.getSportName(),
                                o = {
                                    league: e,
                                    fsLiveTable: this.props.fsLiveTable,
                                    tabId: this.props.tabID,
                                    isOdds: this.props.isOdds,
                                    reloadNoMatchCall: this.props.reloadNoMatchCall,
                                    reactCalls: this.props.reactCalls,
                                    leagueId: e.getLeagueId(),
                                    visibleEventsCount: s,
                                    lastSportName: this.lastSportName,
                                    lastSportCategoryId: this.lastSportCategoryId,
                                    onShowAllEventsChange: this._onShowAllEventsChange,
                                    myGamesGroups: this.props.myGamesGroups,
                                    myGames: this.props.myGames,
                                    myGamesGroupKey: n,
                                    myGamesGroupsFirstLeague: t !== n,
                                    pageType: this.props.pageType,
                                    blockType: Le.BLOCK_TYPE_DEFAULT,
                                    expandCollapseLeagueDisabled: !1
                                },
                                c = e.isNoDuelTournament() ? Bt : Gt;
                            this._leaguesWrapper.addItem(new xt(r.createElement(c, Object.assign({}, o, {
                                key: i
                            }))).setMyGamesGroup(n).setSportName(l).build()), this.lastSportName = l, this.lastSportCategoryId = e.getSportCategoryId(), t = n
                        }
                    }
                    return this._leaguesWrapper.getLeagues()
                }
                _createMyGamesGroupsFromLeagues(e) {
                    if (this.props.myGamesGroups.isActive() && this.props.tabID == _.a.TAB_ID_MYGAMES_GROUPS) {
                        const t = this.props.myGamesGroups.getGroupsForLeagues(e);
                        return Object.keys(t).map(e => parseInt(e)).filter(e => e > 0)
                    }
                    return [0]
                }
                componentDidMount() {
                    Mt.run()
                }
                render() {
                    return this.displayLeagues()
                }
            }
            class Kt extends r.Component {
                constructor(e) {
                    super(e), this.switchToNonResponsive = () => {
                        this.props.fsLiveTable.getViewportSwitcher().switchOnClickAction()
                    }, this.state = {
                        loaded: !1
                    }, this._infoBox = r.createRef(), this._leaguesMyGames = r.createRef(), this.reloadTabContent = this.reloadTabContent.bind(this), this.forceRedrawTabContent = this.forceRedrawTabContent.bind(this)
                }
                _updateState() {
                    this.setState({
                        loaded: !0
                    }), this._infoBox.current && this._infoBox.current.update()
                }
                reloadTabContent() {
                    this._updateState(), this._leaguesMyGames.current && this._leaguesMyGames.current.reloadTabContent()
                }
                forceRedrawTabContent(e = !1) {
                    this._updateState(), this._leaguesMyGames.current && this._leaguesMyGames.current.forceRedrawTabContent(e)
                }
                render() {
                    return this.props.myGamesGroups.isActive() ? r.createElement(r.Fragment, null, r.createElement(Yt, {
                        ref: this._leaguesMyGames,
                        fsLiveTable: this.props.fsLiveTable,
                        reloadNoMatchCall: this.props.reactCalls.reloadNoMatch,
                        reloadNoMatch: this.props.reloadNoMatch,
                        reactCalls: this.props.reactCalls,
                        tabID: this.props.tabID,
                        isOdds: !1,
                        onShowAllEventsChange: this.props.onShowAllEventsChange,
                        showAllEventsForLeague: this.props.showAllEventsForLeague,
                        myGamesGroups: this.props.myGamesGroups,
                        myGames: this.props.myGames,
                        key: this.props.tabID + "-" + Date.now(),
                        pageType: this.props.pageType,
                        sportDetails: this.props.sportDetails,
                        pushManager: new g
                    })) : this.props.myGames.getCount() > 0 && this.props.myGamesGroups.displayMgGroupsInfoTextForMobile() ? r.createElement("a", {
                        className: "event--myGamesInfo",
                        onClick: this.switchToNonResponsive.bind(this)
                    }, this.props.myGamesGroups.displayMgGroupsInfoTextForMobile()) : r.createElement(Pt, {
                        ref: this._infoBox,
                        utilFactory: this.props.utilFactory,
                        device: this.props.device
                    })
                }
            }
            class Vt extends r.Component {
                constructor(e) {
                    super(e), this.state = {
                        loaded: !1
                    }, this._leaguesMyGames = r.createRef(), this._leaguesMyGamesGroups = r.createRef(), this._reloadTabContent = this._reloadTabContent.bind(this), this._forceRedrawTabContent = this._forceRedrawTabContent.bind(this)
                }
                _reloadTabContent() {
                    this.setState({
                        loaded: !0
                    }), [this._leaguesMyGames, this._leaguesMyGamesGroups].forEach(e => {
                        e.current && e.current.reloadTabContent()
                    })
                }
                _forceRedrawTabContent(e = !1) {
                    this.setState({
                        loaded: !0
                    }), [this._leaguesMyGames, this._leaguesMyGamesGroups].forEach(t => {
                        t.current && t.current.forceRedrawTabContent(e)
                    })
                }
                componentDidMount() {
                    this.props.reloadTabContent[this.props.tabID] = this._reloadTabContent, this.props.forceRedrawTabContent[this.props.tabID] = this._forceRedrawTabContent
                }
                componentWillUnmount() {
                    this.props.reloadTabContent[this.props.tabID] = () => {}, this.props.forceRedrawTabContent[this.props.tabID] = () => {}, window.fs_counter = {}
                }
                displayMyTeams() {
                    return 115 != this.props.utilFactory.createConfig().get("app", "project", "id") ? r.createElement(Ct, {
                        fsLiveTable: this.props.fsLiveTable,
                        sportDetails: this.props.sportDetails,
                        reloadTabContent: this.props.reloadTabContent,
                        reactCalls: this.props.reactCalls,
                        forceRedrawTabContent: this.props.forceRedrawTabContent,
                        devices: this.props.devices,
                        reloadNoMatch: this.props.reloadNoMatch,
                        tabID: _.a.TAB_ID_MYGAMES,
                        onShowAllEventsChange: this.props.onShowAllEventsChange,
                        pageType: this.props.pageType,
                        showAllEventsForParticipant: this.props.showAllEventsForLeague
                    }) : r.createElement(r.Fragment, null)
                }
                render() {
                    const e = "event event--myGames" + (this.props.devices == a.MOBILE ? " mobile" : ""),
                        t = {
                            fsLiveTable: this.props.fsLiveTable,
                            reloadNoMatchCall: this.props.reactCalls.reloadNoMatch,
                            reloadNoMatch: this.props.reloadNoMatch,
                            reactCalls: this.props.reactCalls,
                            tabID: this.props.tabID,
                            isOdds: !1,
                            onShowAllEventsChange: this.props.onShowAllEventsChange,
                            showAllEventsForLeague: this.props.showAllEventsForLeague,
                            myGamesGroups: new Lt(this.props.utilFactory, this.props.reactCalls),
                            myGames: this.props.utilFactory.createEnviroment().getMyGamesObject(),
                            pageType: this.props.pageType,
                            sportDetails: this.props.sportDetails,
                            pushManager: new g
                        };
                    return r.createElement(r.Fragment, null, r.createElement("div", {
                        className: e
                    }, r.createElement(Yt, Object.assign({
                        ref: this._leaguesMyGames
                    }, t, {
                        key: this.props.tabID + "-" + Date.now()
                    })), r.createElement(Dt, null)), r.createElement("div", {
                        className: e
                    }, r.createElement(Kt, Object.assign({
                        ref: this._leaguesMyGamesGroups
                    }, t, {
                        device: this.props.devices,
                        tabID: _.a.TAB_ID_MYGAMES_GROUPS,
                        utilFactory: this.props.utilFactory
                    }))), this.displayMyTeams())
                }
            }
            class jt extends r.Component {
                constructor(e) {
                    super(e), this._daysData = {}, this._minIndex = 0, this._maxIndex = 0, this.state = {
                        currentDay: 0,
                        visibility: !1
                    }, this._initializeDays(), this.props.daySetterCallback((e, t, n) => this._changeCurrentDateByDate(e, t, n)), this.props.dayChangeCallback(() => this._dayChange())
                }
                _initializeDays() {
                    this._daysData = this.props.calendar.getDaysData();
                    let e = 0;
                    for (const t in this._daysData) e++;
                    this._maxIndex = Math.floor(e / 2), this._minIndex = -1 * this._maxIndex
                }
                _changeCurrentDateByNav(e) {
                    this._changeCurrentDateByDate(this.state.currentDay + e)
                }
                _changeCurrentDateByDate(e, t = !1, n = !1) {
                    t || this.props.calendar.setCalendarDay(e, n), this.setState({
                        currentDay: e
                    })
                }
                _dayChange() {
                    0 === this.state.currentDay && (this._initializeDays(), this.forceUpdate())
                }
                _changeVisibility() {
                    this.setState({
                        visibility: !this.state.visibility
                    })
                }
                _displayDaysInterval() {
                    if (!this.state.visibility) return !1;
                    const e = this.props.calendar.getCalendarDay(),
                        t = [];
                    for (let n = this._minIndex; n <= this._maxIndex; n++) {
                        const a = this._daysData[n],
                            i = "day" + (n == e ? " active" : 0 == n ? " today" : "");
                        t.push(r.createElement("div", {
                            className: i,
                            onClick: () => this._changeCurrentDateByDate(n),
                            key: n
                        }, 0 == n ? this.props.calendar.getTitleToday() : this.props.calendar.getFormatDate(a)))
                    }
                    return r.createElement("div", {
                        className: "calendar__datepicker--dates"
                    }, t)
                }
                _displayNavigationPrevious() {
                    return this.props.calendar.getCalendarDay() != this._minIndex && r.createElement("div", {
                        className: "calendar__nav",
                        title: this.props.calendar.getTitlePrevious()
                    }, r.createElement("div", {
                        className: "calendar__direction calendar__direction--yesterday",
                        onClick: e => this._handlerOnClickPrevious(e)
                    }))
                }
                _displayNavigationNext() {
                    return this.props.calendar.getCalendarDay() != this._maxIndex && r.createElement("div", {
                        className: "calendar__nav",
                        title: this.props.calendar.getTitleNext()
                    }, r.createElement("div", {
                        className: "calendar__direction calendar__direction--tomorrow",
                        onClick: e => this._handlerOnClickNext(e)
                    }))
                }
                _handlerOnClick(e) {
                    this.props.calendar.getHandlerOnClick()(e), this._changeVisibility()
                }
                _handlerOnClickPrevious(e) {
                    this.props.calendar.getHandlerOnClickPrevious()(e), this._changeCurrentDateByNav(-1)
                }
                _handlerOnClickNext(e) {
                    this.props.calendar.getHandlerOnClickNext()(e), this._changeCurrentDateByNav(1)
                }
                shouldComponentUpdate(e, t, n) {
                    return this.props.enabled != e.enabled || this.state.visibility != t.visibility || this.state.currentDay != t.currentDay
                }
                render() {
                    return !!this.props.enabled && r.createElement("div", {
                        className: "calendar"
                    }, this._displayNavigationPrevious(), r.createElement("div", {
                        className: "calendar__datepicker" + (this.state.visibility ? " active" : ""),
                        onClick: e => this._handlerOnClick(e)
                    }, r.createElement("div", {
                        className: "icon icon--calendar"
                    }), this.props.calendar.getFormatDate(this._daysData[this.state.currentDay]), this._displayDaysInterval()), this._displayNavigationNext())
                }
            }
            const Jt = ({
                    tabTitle: e,
                    tabShortTitle: t,
                    myGamesCount: n,
                    children: a,
                    subTab: i,
                    elementsCustomClass: s
                }) => {
                    const l = i ? "subTabs__text" : "tabs__text",
                        o = e => e.filter(Boolean).join(" ");
                    return t && e != t ? r.createElement(r.Fragment, null, r.createElement("div", {
                        className: o([l, l + "--long", null != s ? s : ""])
                    }, e), r.createElement("div", {
                        className: o([l, l + "--short", null != s ? s : ""])
                    }, t), n, a) : r.createElement(r.Fragment, null, r.createElement("div", {
                        className: o([l, l + "--default", null != s ? s : ""])
                    }, e, a), n)
                },
                $t = ({
                    tab: e
                }) => r.createElement(Jt, {
                    tabTitle: e.getTitle(),
                    tabShortTitle: e.getShortTitle(),
                    subTab: !1,
                    elementsCustomClass: e.getElementsCustomClass()
                });

            function Qt(e) {
                const t = Object.assign(Object.assign({}, e), {
                        reloadNoMatchCall: e.reactCalls.reloadNoMatch,
                        isOdds: !0
                    }),
                    n = ["event", "odds"];
                return e.fsLiveTable.isMixedPage() && n.push("event--topScores"), r.createElement(r.Fragment, null, r.createElement("div", {
                    className: n.join(" ")
                }, e.listingTemplateResolver.resolve(t)))
            }

            function Zt(e) {
                const t = e.fsLiveTable.getLeaguesByTabId(e.category);
                return e.fsLiveTable.isOddsFormatSwitcherEnabled() && 0 !== t.length ? r.createElement(zt, Object.assign({}, e)) : Qt(e)
            }

            function zt(e) {
                const t = Object(I.a)(() => e.fsLiveTable.getSwitchOddsFormatData());
                if (null === t) return null;
                const n = t.formats.getIndexOfFormat(t.actualFormat);
                return r.createElement("div", {
                    className: "event odds"
                }, r.createElement(l, {
                    before: t.translation,
                    defaultActiveTabIndex: -1 !== n ? n : 0,
                    subTab: !0,
                    className: "subTabs subTabs--odds"
                }, function(e, t, n) {
                    const a = [],
                        i = e.getFormats();
                    for (const e in i) {
                        const s = i[e];
                        a.push(r.createElement(o, {
                            tabTitle: r.createElement(Jt, {
                                tabTitle: s.getName(),
                                subTab: !0
                            }),
                            tabIndex: s.getIndex(),
                            title: s.getTitle(),
                            handlerOnClick: e => (setTimeout(() => t(s.getFormat()), 0), !0),
                            key: s.getIndex()
                        }, Qt(n)))
                    }
                    return a
                }(t.formats, t.switcherGetter, e)))
            }
            class qt {
                static render(e) {
                     return null
                }
            }
            class en {
                static _renderEvent(e, t) {
                    return t == a.MOBILE ? Ye.render(e) : Oe.render(e)
                }
                static render(e) {
                    const t = {
                        event: e.event,
                        pageType: e.pageType,
                        blockType: e.blockType,
                        oddsContent: ""
                    };
                    return r.createElement("div", {
                        id: e.event.getEventId(),
                        key: e.event.getEventId(),
                        title: e.event.getTitle(),
                        className: "event__match event__match--static " + Ve.getEventClasses(e.event, e.isLast, !1, !1, "", e.pageType, e.device)
                    }, this._renderEvent(t, e.device))
                }
            }
            class tn extends r.Component {
                render() {
                    return r.createElement("a", {
                        className: "event__more event__more--static",
                        onClick: this.props.handlerOnClick,
                        href: this.props.url
                    }, this.props.title)
                }
            }
            class nn extends r.Component {
                constructor(e) {
                    super(e);
                    const t = this.props.league.getEvents()[0],
                        n = t && he.isHorseRacing(t);
                    this.state = {
                        showAllEvents: !e.league.isNoDuelTournament() || n
                    }
                }
                _displayHeader(e, t, n, a) {
                    this.props.fsLiveTable.scopeBeginByBlockType(this.props.blockType);
                    const i = t.isDuel();
                    return this.props.fsLiveTable.scopeEnd(), r.createElement(kt, {
                        handlerHideTooltip: e.getHandlerHideTooltip(),
                        league: e,
                        firstEvent: t,
                        eventsLength: n,
                        fsLiveTable: this.props.fsLiveTable,
                        isOdds: !1,
                        lastSportName: "",
                        lastSportCategoryId: 0,
                        tabId: _.a.TAB_NONE,
                        expandCollapseLeagueDisabled: !0,
                        pageType: this.props.pageType,
                        blockType: this.props.blockType,
                        hideEventHeader: i && a,
                        key: this.props.league.getLeagueId()
                    })
                }
                _displayRound(e, t, n) {
                    this.props.fsLiveTable.scopeBeginByBlockType(this.props.blockType);
                    const a = pt.getComponent(n, this.props.device, !1);
                    return this.props.fsLiveTable.scopeEnd(), r.createElement(r.Fragment, {
                        key: t
                    }, r.createElement("div", {
                        className: "event__round event__round--static"
                    }, e), a)
                }
                static getFilterForLiveEventsAndGivenBlockType(e) {
                    return t => !(e === Le.BLOCK_TYPE_FIXTURES && t.getIsLive())
                }
                render() {
                    const e = nn.getFilterForLiveEventsAndGivenBlockType(this.props.blockType),
                        t = this.props.league.getEvents().filter(e),
                        n = t.length;
                    if (0 == t.length) return null;
                    const a = [];
                    let i = "",
                        s = !0,
                        l = !1;
                    const o = n - 1,
                        c = t[0];
                    for (const e in t) {
                        const n = t[e],
                            g = n.getRound(),
                            _ = Number(e) == o;
                        if (!_) {
                            s = g !== t[Number(e) + 1].getRound()
                        }
                        i != g && (a.push(this._displayRound(g, `${n.getEventId()}-${g}`, c)), l = !0), this.props.fsLiveTable.scopeBeginByBlockType(this.props.blockType), a.push(en.render({
                            event: n,
                            isLast: _ || s,
                            isDuel: this.props.league.isDuel(),
                            device: this.props.device,
                            pageType: this.props.pageType,
                            blockType: this.props.blockType,
                            executeInScope: this.props.fsLiveTable.executeInScope.bind(this.props.fsLiveTable)
                        })), this.props.fsLiveTable.scopeEnd(), s = !1, i = g;
                        const h = this.props.league.getVisibleEventsCount(this.props.pageType);
                        if (!this.state.showAllEvents && parseInt(e) + 1 >= h && t.length > h) {
                            const e = e => {
                                e.preventDefault(), this.setState({
                                    showAllEvents: !0
                                })
                            };
                            a.push(r.createElement(tn, {
                                key: this.props.league.getLeagueId() + "_loadMore",
                                handlerOnClick: e,
                                title: this.props.fsLiveTable.getStaticBlockShowMore().getShowAllGamesTitle(),
                                url: "#"
                            }));
                            break
                        }
                    }
                    return r.createElement(an, {
                        key: this.props.leagueKey
                    }, a.length > 0 && this._displayHeader(this.props.league, c, n, l), a)
                }
            }
            class an extends r.Component {
                render() {
                    return this.props.children
                }
            }

            function rn({
                upcomingDraw: e,
                formatter: t,
                sportDetails: n
            }) {
                return r.createElement("div", {
                    className: "upcomingDraw__row"
                }, e.isFinal() && r.createElement("div", {
                    className: "upcomingDraw__icon"
                }), r.createElement("div", {
                    className: "upcomingDraw__name"
                }, e.getRoundName()), "Â -Â ", r.createElement("div", {
                    className: "upcomingDraw__term"
                }, t.format(n.sportId, e.getEventsStartTime(), !1)))
            }

            function sn({
                league: e,
                formatter: t,
                sportDetails: n
            }) {
                const a = e.getUpcomingDraws();
                return a ? r.createElement("span", {
                    id: "ud_" + n.sportId + "_" + e.getTournamentStageId()
                }, r.createElement("div", {
                    className: "upcomingDraw"
                }, a.map(e => r.createElement(rn, {
                    key: e.getEventsStartTime().join("-"),
                    upcomingDraw: e,
                    formatter: t,
                    sportDetails: n
                })))) : null
            }

            function ln(e) {
                const t = Object(I.a)(e.fsLiveTable.getUpcomingDrawStartTimeFormatter, e.formatter);
                return !t || e.blockType !== Le.BLOCK_TYPE_FIXTURES && e.blockType !== Le.BLOCK_TYPE_SUMMARY_FIXTURES ? null : r.createElement(r.Fragment, null, e.leagues.map((n, a) => r.createElement(sn, {
                    key: n.getLeagueId() + "_" + a,
                    league: n,
                    formatter: t,
                    sportDetails: e.sportDetails
                })))
            }
            class on {
                constructor() {
                    this._leagues = {}, this._sports = []
                }
                clean() {
                    this._leagues = {}, this._section = null, this._sports = []
                }
                addItem(e) {
                    const t = e.getSportName();
                    this._leagues[t] || (this._leagues[t] = [], this._sports.push(t)), this._leagues[t].push(e.getLeague())
                }
                addSection(e) {
                    this._section = e
                }
                getLeagues() {
                    const e = [];
                    return this._section && e.push(this._section), this._sports.forEach(t => {
                        this._leagues[t] && e.push(r.createElement("div", {
                            className: "sportName " + t,
                            key: t
                        }, this._leagues[t]))
                    }), e
                }
            }
            let cn = (() => {
                class e {
                    static _displayLeagues(e, t, n) {
                        this._leaguesWrapper.clean();
                        const a = {};
                        let i = 0;
                        for (const s of n) {
                            const n = s.getLeagueId();
                            a[n] = n in a ? a[n] + 1 : 0;
                            const l = n + "_" + a[n] + "_" + t.blockType,
                                o = {
                                    fsLiveTable: t.fsLiveTable,
                                    league: s,
                                    blockType: t.blockType,
                                    device: e,
                                    leagueKey: l,
                                    pageType: t.pageType
                                };
                            this._leaguesWrapper.addItem(new xt(r.createElement(nn, Object.assign({}, o, {
                                key: l
                            }))).setSportName(t.sportDetails.name).build()), i += s.getEvents().length
                        }
                        const s = t.fsLiveTable.getStaticBlockShowMore(),
                            l = s.getUrl(t.blockType);
                        return l && 0 !== this._leaguesWrapper.getLeagues().length && i >= t.fsLiveTable.getStaticEventInitialCount() && this._leaguesWrapper.addItem(new xt(r.createElement(tn, {
                            url: l,
                            title: s.getTitle(),
                            key: t.blockType + "_showMore",
                            handlerOnClick: s.getHandlerOnClick(t.blockType)
                        })).setSportName(t.sportDetails.name).build()), this._leaguesWrapper.getLeagues()
                    }
                    static render(e) {
                        const t = e.leagues || e.fsLiveTable.getLeaguesByBlockType(e.blockType),
                            n = e.blockType ? e.blockType : "";
                        return r.createElement("div", {
                            className: "leagues--static event--leagues " + n
                        }, r.createElement(M.Consumer, null, n => this._displayLeagues(n, e, t)), r.createElement(ln, {
                            fsLiveTable: e.fsLiveTable,
                            leagues: t,
                            sportDetails: e.sportDetails,
                            blockType: e.blockType
                        }))
                    }
                }
                return e._leaguesWrapper = new on, e
            })();
            class gn {
                static render(e) {
                    return e.sportDetails.name && e.title ? r.createElement("div", {
                        id: "no-match-found",
                        className: "no-match-found nmf"
                    }, r.createElement("div", {
                        className: "sportIcon sportIcon--" + e.sportDetails.name
                    }), r.createElement("div", {
                        className: "nmf__title"
                    }, e.title)) : null
                }
            }
            var _n = n(5);
            let hn = (() => {
                class e {
                    constructor(t, n) {
                        this._sportId = t, this._utilPage = n, this._suffix = e.TENNIS_SINGLES
                    }
                    isSuffixAllowed(e) {
                        const t = [Le.BLOCK_TYPE_SUMMARY_RESULTS, Le.BLOCK_TYPE_RESULTS],
                            n = this._utilPage.isParticipantPage() && !this._utilPage.isTeamPage(),
                            a = -1 != t.indexOf(e),
                            r = _n.a.TENNIS === this._sportId;
                        return n && a && r
                    }
                    getSuffix() {
                        return this._suffix
                    }
                    setSuffix(e) {
                        this._suffix = e
                    }
                    isSuffixValid(t) {
                        return -1 != [e.TENNIS_SINGLES, e.TENNIS_DOUBLES, e.TENNIS_MIX].indexOf(t)
                    }
                }
                return e.TENNIS_SINGLES = "_s", e.TENNIS_DOUBLES = "_d", e.TENNIS_MIX = "_m", e
            })();
            class En {
                constructor(e, t) {
                    this._translator = e, this._tennisDataBlockId = t
                }
                _checkIfExists(e) {
                    const t = document.getElementById(this._tennisDataBlockId + e);
                    return !(!t || "" === t.innerHTML)
                }
                getTabs() {
                    const e = [];
                    return this._checkIfExists(hn.TENNIS_SINGLES) && e.push(new dn(0, this._translator.translate("TRANS_TENNIS_SINGLES"), hn.TENNIS_SINGLES)), this._checkIfExists(hn.TENNIS_DOUBLES) && e.push(new dn(1, this._translator.translate("TRANS_TENNIS_DOUBLES"), hn.TENNIS_DOUBLES)), this._checkIfExists(hn.TENNIS_MIX) && e.push(new dn(2, this._translator.translate("TRANS_TENNIS_MIXED_DOUBLES"), hn.TENNIS_MIX)), e
                }
            }
            class dn {
                constructor(e, t, n) {
                    this._id = e, this._title = t, this._suffix = n
                }
                getId() {
                    return this._id
                }
                getTitle() {
                    return this._title
                }
                getSuffix() {
                    return this._suffix
                }
            }
            var Tn, un = n(67);

            function Sn(e) {
                const t = e.newsItem.getImageUrl();
                let n = null;
                return t && (n = r.createElement("div", {
                    className: "matchBox__image",
                    style: {
                        backgroundImage: "url(" + t + ")"
                    }
                })), r.createElement("a", {
                    href: e.newsItem.getLink(),
                    className: "matchBox__item",
                    target: "_blank"
                }, r.createElement("div", {
                    className: "matchBox__imageWrap"
                }, n), r.createElement("div", {
                    className: "matchBox__title"
                }, Object(un.a)(e.newsItem.getTitle())), r.createElement("div", {
                    className: "matchBox__description"
                }, e.dateHandler.timestamp2date(e.dateFormat, e.newsItem.getPublished(), e.dateHandler.gmtOffsetGetter()), ", ", e.newsItem.getProviderName()))
            }
            class mn extends r.PureComponent {
                constructor() {
                    super(...arguments), this.state = {
                        newsItems: []
                    }
                }
                componentDidMount() {
                    this.props.teamPageProvider.getNewsFeed(e => {
                        e = e.filter(e => !e.isEventItem()), this.setState({
                            newsItems: e.slice(0, 3)
                        })
                    })
                }
                render() {
                    if (0 == this.state.newsItems.length) return null;
                    const e = this.props.teamPageProvider.getDateHandler(),
                        t = this.props.teamPageProvider.getFullDateFormatWithTime(),
                        n = this.props.teamPageProvider.getTranslator(),
                        a = this.props.teamPageProvider.getNewsFeedShowMoreUrl();
                    return r.createElement("div", {
                        className: "event event--newsfeed" + this.props.deviceClass + this.props.blockTypeClass
                    }, qt.render({
                        pageType: this.props.pageType,
                        title: this.props.sectionTitle
                    }), r.createElement("div", {
                        className: "matchBox matchBox--lite"
                    }, r.createElement("div", {
                        className: "matchBox__content"
                    }, this.state.newsItems.map((n, a) => r.createElement(Sn, {
                        newsItem: n,
                        key: a,
                        dateHandler: e,
                        dateFormat: t
                    }))), r.createElement("a", {
                        href: a,
                        className: "matchBox__showMore"
                    }, n.translate("TRANS_TEAM_MORE_NEWS"))))
                }
            }

            function vn(e) {
                return r.createElement("div", {
                    className: "profileTable__row--wrapper"
                }, r.createElement("div", {
                    className: "profileTable__row profileTable__row--transferDesktop"
                }, r.createElement("div", {
                    className: "playerTable__transferSeason"
                }, e.transfer.getFormattedDate()), r.createElement("div", {
                    className: "playerTable__transferCountry"
                }, r.createElement("span", {
                    className: "flag " + e.transfer.getPlayerImage(),
                    title: e.transfer.getPlayerImageTitle()
                }), r.createElement("div", {
                    className: "playerTable__transferCountry--name"
                }, r.createElement("a", {
                    href: e.transfer.getPlayerUrl(),
                    className: "playerTable__transferTeam--text"
                }, e.transfer.getPlayerName()))), r.createElement("div", {
                    className: "playerTable__transferType"
                }, r.createElement("div", {
                    className: "playerTable__transferIcon playerTable__transferIcon--" + e.transfer.getDirection()
                }), r.createElement("div", {
                    className: "playerTable__transferType--text"
                }, e.transfer.getType())), r.createElement("div", {
                    className: "playerTable__transferTeam"
                }, e.transfer.getAffectedTeamImage() && e.transfer.getAffectedTeamName() && r.createElement(r.Fragment, null, r.createElement("div", {
                    className: "playerTable__transferTeam--logo",
                    style: {
                        backgroundImage: "url(" + e.transfer.getAffectedTeamImage() + ")"
                    }
                }), r.createElement("div", {
                    className: "playerTable__transferTeam--text"
                }, r.createElement("a", {
                    href: e.transfer.getAffectedTeamUrl(),
                    className: "playerTable__transferTeam--text"
                }, e.transfer.getAffectedTeamName()))))), r.createElement("div", {
                    className: "profileTable__row--transfer profileTable__row--transferMobile"
                }, r.createElement("div", {
                    className: "playerTable__transferTeams"
                }, r.createElement("div", {
                    className: "playerTable__transferTeams--team"
                }, r.createElement("span", {
                    className: "flag " + e.transfer.getPlayerImage(),
                    title: e.transfer.getPlayerImageTitle()
                }), r.createElement("div", {
                    className: "playerTable__transferTeams--teamName playerTable__transferCountry--highlighted"
                }, r.createElement("a", {
                    href: e.transfer.getPlayerUrl(),
                    className: "playerTable__transferTeam--text"
                }, e.transfer.getPlayerName()))), r.createElement("div", {
                    className: "playerTable__transferIcon playerTable__transferIcon--" + e.transfer.getDirection()
                }), r.createElement("div", {
                    className: "playerTable__transferTeams--team"
                }, e.transfer.getAffectedTeamImage() && e.transfer.getAffectedTeamName() && r.createElement(r.Fragment, null, r.createElement("div", {
                    className: "playerTable__transferTeam--logo",
                    style: {
                        backgroundImage: "url(" + e.transfer.getAffectedTeamImage() + ")"
                    }
                }), r.createElement("div", {
                    className: "playerTable__transferTeams--teamName"
                }, r.createElement("a", {
                    href: e.transfer.getAffectedTeamUrl(),
                    className: "playerTable__transferTeam--text"
                }, e.transfer.getAffectedTeamName()))))), r.createElement("div", {
                    className: "playerTable__transferInfo"
                }, r.createElement("div", {
                    className: "playerTable__transferInfo--type"
                }, e.transfer.getType(), "Â "), r.createElement("div", {
                    className: "playerTable__transferInfo--date"
                }, "(", e.transfer.getFormattedDate(), ")"))))
            }

            function pn(e) {
                const t = e.teamPageProvider.getTranslator();
                return r.createElement("div", {
                    className: "base-table transfer-team-table profileTable playerTable"
                }, r.createElement("div", {
                    className: "profileTable__row profileTable__row--main profileTable__row--transferDesktop"
                }, r.createElement("div", {
                    className: "playerTable__transferSeason",
                    title: t.translate("TRANS_PLAYER_CAREER_DATE")
                }, t.translate("TRANS_PLAYER_CAREER_DATE")), r.createElement("div", {
                    className: "playerTable__transferCountry playerTable__transferCountry--highlighted",
                    title: t.translate("TRANS_PLAYER")
                }, t.translate("TRANS_PLAYER")), r.createElement("div", {
                    className: "playerTable__transferType",
                    title: t.translate("TRANS_PLAYER_CAREER_TYPE")
                }, t.translate("TRANS_PLAYER_CAREER_TYPE")), r.createElement("div", {
                    className: "playerTable__transferTeam",
                    title: t.translate("TRANS_PLAYER_CAREER_FROM") + " / " + t.translate("TRANS_PLAYER_CAREER_TO")
                }, t.translate("TRANS_PLAYER_CAREER_FROM"), " /", " ", t.translate("TRANS_PLAYER_CAREER_TO"))), e.transfers.map((e, t) => r.createElement(vn, {
                    transfer: e,
                    key: t
                })), e.showMoreBlock && r.createElement("div", {
                    className: "profileTable__row profileTable__row--last"
                }, e.showMoreBlock))
            }

            function In(e) {
                const t = e.teamPageProvider.getTranslator(),
                    n = e.transfers.length >= 5 ? r.createElement("a", {
                        href: e.teamPageProvider.getTransfersShowMoreUrl()
                    }, t.translate("TRANS_SHOW_MORE")) : null;
                return r.createElement(pn, {
                    teamPageProvider: e.teamPageProvider,
                    showMoreBlock: n,
                    transfers: e.transfers.slice(0, 5)
                })
            }
            class An {
                constructor(e, t) {
                    this._id = e, this._name = t
                }
                getId() {
                    return this._id
                }
                getName() {
                    return this._name
                }
            }! function(e) {
                e.FILTER_ALL = 1, e.FILTER_IN = 2, e.FILTER_OUT = 3
            }(Tn || (Tn = {}));
            class Nn {
                constructor(e) {
                    this._utilTrans = e, this._allowedFilters = this._createFilters()
                }
                _createFilters() {
                    const e = [];
                    return e.push(new An(Tn.FILTER_ALL, this._utilTrans.translate("TRANS_TEAM_TRANSFERS_ALL")), new An(Tn.FILTER_IN, this._utilTrans.translate("TRANS_TEAM_TRANSFERS_IN")), new An(Tn.FILTER_OUT, this._utilTrans.translate("TRANS_TEAM_TRANSFERS_OUT"))), e
                }
                getAllowedFilters() {
                    return this._allowedFilters
                }
                isAllowed(e) {
                    return -1 !== this.getAllowedFilters().map(e => e.getId()).indexOf(e)
                }
            }
            class Rn extends r.PureComponent {
                constructor() {
                    super(...arguments), this.pageNumber = 1, this.filter = Tn.FILTER_ALL, this.state = {
                        transfers: []
                    }
                }
                componentDidMount() {
                    this.props.teamPageProvider.getTransfers(this.pageNumber, this.filter, e => {
                        this.setState({
                            transfers: e
                        })
                    })
                }
                render() {
                    return 0 == this.state.transfers.length ? null : r.createElement("div", {
                        className: "event event--static" + this.props.deviceClass + this.props.blockTypeClass
                    }, qt.render({
                        pageType: this.props.pageType,
                        title: this.props.sectionTitle
                    }), r.createElement(In, {
                        teamPageProvider: this.props.teamPageProvider,
                        transfers: this.state.transfers
                    }))
                }
            }
            var On = n(164);
            class Dn extends r.PureComponent {
                constructor(e) {
                    super(e), this._reloadStaticContent = this._reloadStaticContent.bind(this), this.props.reloadStaticContent.static = this._reloadStaticContent, this._activeTab = 0;
                    const t = window.location.hash.substr(1),
                        n = this.props.fsLiveTable.getSuffixProvider().isSuffixValid("_" + t) ? "_" + t : hn.TENNIS_SINGLES;
                    this.props.fsLiveTable.getSuffixProvider().setSuffix(n)
                }
                _renderTennisTabs(e) {
                    if (!this.props.fsLiveTable.getSuffixProvider().isSuffixAllowed(e)) return;
                    const t = this._getTennisTabs(e);
                    return r.createElement(l, {
                        defaultActiveTabIndex: this._activeTab,
                        renderSingleTab: !0,
                        subTab: !0,
                        className: "subTabs--participantPage"
                    }, t)
                }
                _getTennisTabs(e) {
                    const t = "participant-page-data-" + e,
                        n = new En(this.props.fsLiveTable.getTranslator(), t).getTabs(),
                        a = [];
                    return n.map((e, t) => {
                        e.getSuffix() === this.props.fsLiveTable.getSuffixProvider().getSuffix() && (this._activeTab = e.getId()), 1 === n.length && (this._activeTab = e.getId()), a.push(r.createElement(o, {
                            tabTitle: r.createElement(Jt, {
                                tabTitle: e.getTitle(),
                                subTab: !0
                            }),
                            tabIndex: e.getId(),
                            handlerOnClick: t => (this.props.fsLiveTable.getSuffixProvider().setSuffix(e.getSuffix()), this._reloadStaticContent(), !0),
                            key: t
                        }))
                    }), a
                }
                _reloadStaticContent() {
                    this.forceUpdate()
                }
                _showTeamNewsBlock(e) {
                    return e.get("app", "team_news", "enabled") && this.props.isFullFeedLoaded && (this.props.pageType === ce.PAGE_TYPE_TEAM || this.props.pageType === ce.PAGE_TYPE_PLAYER && !this.props.utilFactory.createConfig().get("app", "sports_with_player_profile").includes(this.props.sportDetails.sportId))
                }
                _showRecomBox() {
                    return (this.props.isFullFeedLoaded || !this.props.sportDetails.isDuel) && (this.props.pageType === ce.PAGE_TYPE_TEAM || this.props.pageType === ce.PAGE_TYPE_PLAYER && !this.props.utilFactory.createConfig().get("app", "sports_with_player_profile").includes(this.props.sportDetails.sportId))
                }
                _renderNoMatchBlock(e, t, n, a) {
                    return this.props.isFullFeedLoaded && 0 === t && 0 === n.length && 0 === a.length ? r.createElement(r.Fragment, null, gn.render({
                        sportDetails: this.props.sportDetails,
                        title: e.getNoMatchesName(this.props.sportDetails.sportId)
                    })) : null
                }
                render() {
                    if (!this.props.fsLiveTable.isReactEnabledForRenderingLeagues()) return null;
                    const e = this.props.fsLiveTable.getLeaguesByTabId(this.props.tabId),
                        t = this.props.fsLiveTable.getSectionTitle(),
                        n = this.props.devices == a.MOBILE ? " mobile" : "",
                        i = this.props.pageTab ? " event--" + this.props.pageTab : "",
                        s = [ce.PAGE_TYPE_TEAM, ce.PAGE_TYPE_PLAYER].includes(this.props.pageType),
                        l = this.props.sportDetails.isDuel || s;
                    if (this.props.pageTab === Le.BLOCK_TYPE_SUMMARY) {
                        const a = Ht.getEvents(e).length,
                            o = this.props.fsLiveTable.getLeaguesByBlockType(Le.BLOCK_TYPE_SUMMARY_RESULTS),
                            c = this.props.fsLiveTable.getLeaguesByBlockType(Le.BLOCK_TYPE_SUMMARY_FIXTURES);
                        return r.createElement(r.Fragment, null, this._renderNoMatchBlock(t, a, o, c), r.createElement(j.Consumer, null, e => this._showTeamNewsBlock(e) ? r.createElement(mn, {
                            teamPageProvider: this.props.teamPageProvider,
                            pageType: this.props.pageType,
                            deviceClass: n,
                            blockTypeClass: i,
                            sectionTitle: t.getNewsfeedName()
                        }) : null), o.length > 0 && r.createElement("div", {
                            className: "event" + n + i
                        }, qt.render({
                            pageType: this.props.pageType,
                            title: t.getResultsName(this.props.sportDetails.sportId, this.props.sportDetails.isDuel)
                        }), this._renderTennisTabs(Le.BLOCK_TYPE_SUMMARY_RESULTS), cn.render({
                            fsLiveTable: this.props.fsLiveTable,
                            blockType: Le.BLOCK_TYPE_SUMMARY_RESULTS,
                            pageType: this.props.pageType,
                            sportDetails: this.props.sportDetails
                        })), this._showRecomBox() && s && Object(On.a)(this.props.utilFactory, this.props.fsLiveTable.getModuleLoader(), this.props.teamPageProvider.getParticipantId()), l && c.length > 0 && r.createElement("div", {
                            className: "event" + n + i
                        }, qt.render({
                            pageType: this.props.pageType,
                            title: t.getFixturesName()
                        }), cn.render({
                            fsLiveTable: this.props.fsLiveTable,
                            blockType: Le.BLOCK_TYPE_SUMMARY_FIXTURES,
                            pageType: this.props.pageType,
                            sportDetails: this.props.sportDetails
                        })), 0 === c.length && r.createElement(ln, {
                            fsLiveTable: this.props.fsLiveTable,
                            leagues: o,
                            sportDetails: this.props.sportDetails,
                            blockType: Le.BLOCK_TYPE_SUMMARY_FIXTURES
                        }), r.createElement(j.Consumer, null, e => this.props.pageType === ce.PAGE_TYPE_TEAM && e && -1 !== e.get("app", "team_transfers", "sports").indexOf(this.props.teamPageProvider.getSportId()) ? r.createElement(Rn, {
                            teamPageProvider: this.props.teamPageProvider,
                            pageType: this.props.pageType,
                            deviceClass: n,
                            blockTypeClass: i,
                            sectionTitle: t.getTransfersName()
                        }) : null))
                    } {
                        const e = this.props.fsLiveTable.getLeaguesByBlockType(this.props.pageTab),
                            a = nn.getFilterForLiveEventsAndGivenBlockType(this.props.pageTab);
                        if (0 == Ht.getEvents(e, [a]).length) return gn.render({
                            sportDetails: this.props.sportDetails,
                            title: t.getNoMatchesName(this.props.sportDetails.sportId)
                        });
                        let s;
                        return this.props.pageTab === Le.BLOCK_TYPE_RESULTS && (s = this._renderTennisTabs(Le.BLOCK_TYPE_RESULTS)), r.createElement("div", {
                            className: "event" + n + i
                        }, s, cn.render({
                            fsLiveTable: this.props.fsLiveTable,
                            blockType: this.props.pageTab,
                            pageType: this.props.pageType,
                            sportDetails: this.props.sportDetails,
                            leagues: e
                        }))
                    }
                }
            }

            function Cn(e) {
                return r.createElement(l, {
                    defaultActiveTabIndex: Tn.FILTER_ALL - 1,
                    renderSingleTab: !0,
                    subTab: !0,
                    className: "subTabs--participantPage"
                }, e.children)
            }
            class yn extends r.Component {
                constructor(e) {
                    super(e), this.selectFilter = e => {
                        this.setState({
                            pageNumber: 1,
                            filter: this._transferFilters.isAllowed(e) ? e : Tn.FILTER_ALL
                        }), this._getTransfersByType(1, e)
                    }, this.loadMore = () => {
                        const e = this.state.pageNumber + 1;
                        this.setState({
                            pageNumber: e
                        }, () => {
                            this._getTransfersByType(e, this.state.filter)
                        })
                    }, this.state = {
                        transfers: [],
                        pageNumber: 1,
                        filter: Tn.FILTER_ALL,
                        showMore: !0,
                        firstDataLoaded: !1
                    }, this._transferFilters = new Nn(this.props.teamPageProvider.getTranslator())
                }
                componentDidMount() {
                    this._getTransfersByType(this.state.pageNumber, this.state.filter)
                }
                _getTransfersByType(e, t) {
                    this.props.teamPageProvider.setTeamPageLoadingState(!0), this.props.teamPageProvider.getTransfers(e, t, t => {
                        this.setState(n => ({
                            transfers: e > 1 ? n.transfers.concat(t) : t,
                            showMore: t.length >= 15,
                            firstDataLoaded: !0
                        })), this.props.teamPageProvider.setTeamPageLoadingState(!1)
                    })
                }
                _prepareFiltersTabs() {
                    const e = [];
                    return this._transferFilters.getAllowedFilters().map((t, n) => {
                        e.push(r.createElement(o, {
                            tabTitle: r.createElement(Jt, {
                                tabTitle: t.getName(),
                                subTab: !0
                            }),
                            tabIndex: t.getId() - 1,
                            handlerOnClick: e => (this.selectFilter(t.getId()), !0),
                            key: n
                        }))
                    }), e
                }
                render() {
                    if (!this.state.firstDataLoaded) return null;
                    const e = r.createElement(Cn, null, this._prepareFiltersTabs());
                    let t;
                    if (0 != this.state.transfers.length) {
                        const e = this.props.teamPageProvider.getTranslator();
                        t = r.createElement(pn, {
                            teamPageProvider: this.props.teamPageProvider,
                            transfers: this.state.transfers,
                            showMoreBlock: this.state.showMore ? r.createElement("a", {
                                onClick: this.loadMore.bind(this)
                            }, e.translate("TRANS_SHOW_MORE")) : void 0
                        })
                    } else t = r.createElement("div", {
                        className: "profileTable__row profileTable__row--transferText"
                    }, this.props.teamPageProvider.getTranslator().translate("TRANS_PLAYER_PROFILE_NO_DATA"));
                    return r.createElement("div", {
                        className: "transferTeamTable"
                    }, e, t)
                }
            }
            class Hn extends r.PureComponent {
                componentDidMount() {
                    this.props.teamPageProvider.myTeamsInit()
                }
                render() {
                    return this.props.teamPageProvider.getPageTab() != Le.BLOCK_TYPE_TRANSFERS ? null : r.createElement(yn, {
                        teamPageProvider: this.props.teamPageProvider
                    })
                }
            }
            class Ln {
                constructor(e, t, n, a) {
                    this._utilEnviroment = e, this._myLeagues = t, this._myTeams = n, this._$ = a
                }
                run() {
                    this._myLeagues && this._myLeagues.delegateTooltips(), this._myTeams && this._myTeams.delegateTooltips(), this._$("body").delegate("#tooltip-1", "mouseenter", e => {
                        this._$("#tooltip-1").attr("isDelay", "2")
                    }), this._$("body").delegate("#tooltip-1", "mouseleave", e => {
                        this._$("#tooltip-1").attr("isDelay", "0"), this._utilEnviroment.getTooltipObject().hide(this._$(e).get(0))
                    })
                }
            }
            const Mn = e => {
                const t = e.item.getCategory(),
                    n = t ? r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "teamNews__resource"
                    }, t.toUpperCase()), r.createElement("div", {
                        className: "teamNews__divider"
                    }, "|")) : "",
                    a = "" === e.item.getImageUrl() ? "teamNews__imageWrap--empty" : "";
                let i;
                "" === a && (i = r.createElement("img", {
                    className: "rssBoxImages__photo teamNews__image",
                    src: e.item.getImageUrl()
                }));
                const s = e.dateHandler.timestamp2date(e.dateFormat, e.item.getPublished(), e.dateHandler.gmtOffsetGetter());
                return r.createElement("div", {
                    id: "tab-match-newsfeed",
                    className: "profileTable__row teamNews"
                }, r.createElement("div", {
                    id: "newsfeed-content"
                }, r.createElement("div", {
                    className: "rss"
                }, r.createElement("div", {
                    className: "rssCategory"
                }, r.createElement("a", {
                    href: e.item.getLink(),
                    className: "rssBox teamNews__container",
                    target: "_blank"
                }, r.createElement("div", {
                    className: "rssBoxImages teamNews__imageWrap " + a
                }, i), r.createElement("div", {
                    className: "rssBoxTexts teamNews__article"
                }, r.createElement("div", {
                    className: "rssBoxTexts__title teamNews__heading"
                }, Object(un.a)(e.item.getTitle())), r.createElement("div", {
                    className: "rssBoxTexts__perex teamNews__text"
                }, Object(un.a)(e.item.getPerex())), r.createElement("div", {
                    className: "rssBoxTexts__description teamNews__source"
                }, n, r.createElement("div", null, s, ", ", e.item.getProviderName()))))))))
            };
            var Fn, wn, bn = n(55);
            ! function(e) {
                e[e.Default = -1] = "Default", e[e.Pre_Match = 1] = "Pre_Match", e[e.Report = 2] = "Report", e[e.Reaction = 3] = "Reaction"
            }(Fn || (Fn = {}));
            ! function(e) {
                e.SIDE_HOME = "H", e.SIDE_AWAY = "A"
            }(wn || (wn = {}));
            const fn = ({
                    participant: e
                }) => r.createElement("div", {
                    className: "matchBox__logoWrap"
                }, r.createElement("img", {
                    className: "matchBox__logo",
                    src: "res/image/data/" + e.getImageUrl(),
                    alt: e.getName(),
                    title: e.getName()
                })),
                kn = ({
                    participant: e
                }) => r.createElement("div", {
                    className: "matchBox__participant " + (e.isWinner() ? "matchBox__participant--winner" : "")
                }, e.getName()),
                Gn = ({
                    event: e
                }) => {
                    const t = e.getFinalScore().split("\\n").map((e, t) => r.createElement("div", {
                        className: "matchBox__scoreText",
                        key: "scoreTextLines" + t
                    }, e));
                    return r.createElement("div", {
                        className: "matchBox__score"
                    }, t)
                },
                Un = ({
                    participants: e
                }) => r.createElement("div", {
                    className: "matchBox__participantWrap matchBox__participantWrap" + (e[0].getSide() === wn.SIDE_HOME ? "--home" : "--away")
                }, Object(bn.a)(e.map(e => r.createElement(kn, {
                    participant: e,
                    key: e.getName()
                })), (e, t) => r.createElement("div", {
                    className: "matchBox__divider",
                    key: t + "separator"
                }, "Â /Â ")), e.map(e => r.createElement(fn, {
                    participant: e,
                    key: e.getImageUrl()
                }))),
                Bn = ({
                    children: e
                }) => r.createElement("div", {
                    className: "matchBox__header"
                }, e),
                Wn = ({
                    event: e
                }) => {
                    const t = e.getParticipants();
                    return 4 === t.length ? r.createElement(Bn, null, r.createElement(Un, {
                        participants: [t[0], t[1]]
                    }), r.createElement(Gn, {
                        event: e
                    }), r.createElement(Un, {
                        participants: [t[3], t[2]]
                    })) : r.createElement(Bn, null, r.createElement(Un, {
                        participants: [t[0]]
                    }), r.createElement(Gn, {
                        event: e
                    }), r.createElement(Un, {
                        participants: [t[1]]
                    }))
                },
                xn = ({
                    event: e,
                    dateFormat: t,
                    dateHandler: n,
                    trans: a,
                    detailOpener: i
                }) => {
                    const s = () => {
                        var t;
                        return i((null === (t = e.getMoreEventItem()) || void 0 === t ? void 0 : t.getId()) || "")
                    };
                    return r.createElement("div", {
                        className: "matchBox matchBox--heavy"
                    }, r.createElement(Wn, {
                        event: e
                    }), r.createElement("div", {
                        className: "matchBox__content"
                    }, e.getItems().map((e, a) => r.createElement(Sn, {
                        newsItem: e,
                        key: a,
                        dateHandler: n,
                        dateFormat: t
                    }))), r.createElement("span", {
                        onClick: s,
                        onKeyPress: s,
                        className: "matchBox__showMore",
                        role: "button",
                        tabIndex: 0
                    }, a.translate("TRANS_CLICK_FOR_MATCH_DETAIL")))
                };
            class Xn extends r.PureComponent {
                constructor() {
                    super(...arguments), this.state = {
                        news: [],
                        firstDataLoaded: !1,
                        matchId: ""
                    }
                }
                componentDidMount() {
                    this.props.teamPageProvider.myTeamsInit(), this.props.teamPageProvider.setTeamPageLoadingState(!0), this.props.teamPageProvider.getNewsFeed(e => {
                        this.setState({
                            news: e,
                            firstDataLoaded: !0
                        }), this.props.teamPageProvider.setTeamPageLoadingState(!1)
                    })
                }
                render() {
                    if (!this.state.firstDataLoaded) return null;
                    if (0 === this.state.news.length) return r.createElement("div", {
                        className: "profileTable__row teamNews__noNews"
                    }, this.props.teamPageProvider.getTranslator().translate("TRANS_NEWSFEED_NO_NEWS"));
                    const e = this.props.teamPageProvider.getDateHandler(),
                        t = this.props.teamPageProvider.getFullDateFormatWithTime();
                    return r.createElement("div", null, this.state.news.map((n, a) => {
                        let i = null;
                        return i = n.isEventItem() ? r.createElement(xn, {
                            event: n,
                            key: a,
                            dateHandler: e,
                            dateFormat: t,
                            trans: this.props.teamPageProvider.getTranslator(),
                            detailOpener: this.props.teamPageProvider.getDetailOpener()
                        }) : r.createElement(Mn, {
                            item: n,
                            key: a,
                            dateHandler: e,
                            dateFormat: t
                        }), i
                    }))
                }
            }
            class Yn extends r.PureComponent {
                componentDidMount() {
                    this.props.onMyGamesCountChangeCallback(() => this.forceUpdate())
                }
                componentWillUnmount() {
                    this.props.onMyGamesCountChangeCallback(() => {})
                }
                getMyGamesCountElement() {
                    return r.createElement("span", {
                        className: "tabs__mgCounter"
                    }, this.props.tab.getMyGamesCount())
                }
                render() {
                    return r.createElement(Jt, {
                        tabTitle: this.props.tab.getTitle(),
                        myGamesCount: this.getMyGamesCountElement(),
                        tabShortTitle: this.props.tab.getShortTitle()
                    })
                }
            }
            let Kn = (() => {
                class e extends r.Component {
                    constructor(e) {
                        super(e), this.leaguesByTabId = [], this._getContestClass = () => [ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_CATEGORY].includes(this.props.pageType) ? "contest--leagues" : "", this._getLeagues();
                        const t = this.leaguesByTabId.reduce((e, t) => this.props.fsLiveTable.shouldShowAllEvents(t) ? Object.assign(Object.assign({}, e), {
                            [t.getLeagueId()]: t.getEvents().length
                        }) : e, e.showAllEventsForLeague);
                        this.state = {
                            visibleLeagues: 0,
                            forceRedrawSwitcher: !1,
                            afterFirstRender: !1,
                            enableDoubleRendering: !0,
                            showAllEventsForLeague: t
                        }, this._reloadTabContent = this._reloadTabContent.bind(this), this._forceRedrawTabContent = this._forceRedrawTabContent.bind(this), this._onShowAllEventsChange = this._onShowAllEventsChange.bind(this)
                    }
                    _forceRedrawTabContent(e = !1) {
                        this._initializeLeagues(), this.setState(t => ({
                            visibleLeagues: e ? 0 : t.visibleLeagues,
                            forceRedrawSwitcher: !t.forceRedrawSwitcher,
                            enableDoubleRendering: e
                        }))
                    }
                    _reloadTabContent() {
                        this._initializeLeagues(), this.setState({
                            visibleLeagues: this.leaguesByTabId.length,
                            enableDoubleRendering: !1
                        })
                    }
                    _onShowAllEventsChange(e, t) {
                        this._initializeLeagues(), this.props.onShowAllEventsChange(e, t), this.setState(n => ({
                            showAllEventsForLeague: Object.assign(Object.assign({}, n.showAllEventsForLeague), {
                                [e]: t
                            }),
                            enableDoubleRendering: !1
                        }))
                    }
                    _initializeLeagues() {
                        this._getLeagues()
                    }
                    _displaySection() {
                        const e = this.props.fsLiveTable.getSectionTitle().getTodaysMatchesName(this.props.sportDetails.sportId, this.props.sportDetails.isDuel);
                        return qt.render({
                            pageType: this.props.pageType,
                            title: e,
                            isLive: !0
                        })
                    }
                    _getLeagues() {
                        if (this.leaguesByTabId = this.props.fsLiveTable.getLeaguesByTabId(this.props.category), this.props.stageId) {
                            const e = [];
                            for (const t of this.leaguesByTabId) t.getStageId() == this.props.stageId && e.push(t);
                            this.leaguesByTabId = e
                        }
                    }
                    _displayLeagues() {
                        let t = "",
                            n = 0,
                            a = 0;
                        const i = this.props.pageType === ce.PAGE_TYPE_TOURNAMENT,
                            s = this.props.pageType === ce.PAGE_TYPE_SERIES,
                            l = new on;
                        if (0 !== this.leaguesByTabId.length && this.props.pageTab === Le.BLOCK_TYPE_SUMMARY && "horse-racing" !== this.props.sportDetails.name && l.addSection(this._displaySection()), 0 === this.leaguesByTabId.length) return i || s ? null : r.createElement(Rt, {
                            sportDetails: this.props.sportDetails,
                            fsLiveTable: this.props.fsLiveTable,
                            reloadNoMatch: this.props.reloadNoMatch,
                            tabId: this.props.category,
                            key: "noMatch",
                            pageType: this.props.pageType
                        });
                        const o = {};
                        for (const i of this.leaguesByTabId) {
                            const s = i.getLeagueId();
                            o[s] = s in o ? o[s] + 1 : 0;
                            const c = s + "_" + o[s] + (this.state.forceRedrawSwitcher ? "_1" : "_0"),
                                g = s in this.state.showAllEventsForLeague ? this.state.showAllEventsForLeague[s] : i.getVisibleEventsCount(this.props.pageType),
                                _ = i.getSportName(),
                                h = {
                                    league: i,
                                    fsLiveTable: this.props.fsLiveTable,
                                    tabId: this.props.category,
                                    isOdds: this.props.isOdds,
                                    reloadNoMatchCall: this.props.reloadNoMatchCall,
                                    reactCalls: this.props.reactCalls,
                                    leagueId: i.getLeagueId(),
                                    visibleEventsCount: g,
                                    lastSportName: t,
                                    lastSportCategoryId: n,
                                    onShowAllEventsChange: this._onShowAllEventsChange,
                                    myGamesGroupKey: 0,
                                    pageType: this.props.pageType,
                                    blockType: this.props.pageTab,
                                    expandCollapseLeagueDisabled: this.props.expandCollapseLeagueDisabled || !1
                                },
                                E = i.isNoDuelTournament() ? Bt : Gt;
                            if (l.addItem(new xt(r.createElement(E, Object.assign({}, h, {
                                    key: c
                                }))).setSportName(_).build()), t = _, n = i.getSportCategoryId(), a < e.numberOfVisibleEventOnFirstRender && this.state.enableDoubleRendering && (a += i.getVisibleEventsCount(this.props.pageType), a >= e.numberOfVisibleEventOnFirstRender && 0 === this.state.visibleLeagues)) break
                        }
                        return l.getLeagues()
                    }
                    componentDidUpdate() {
                        this.state.enableDoubleRendering && this.leaguesByTabId.length > this.state.visibleLeagues && setTimeout(() => this.setState({
                            visibleLeagues: this.leaguesByTabId.length
                        }), 0)
                    }
                    componentDidMount() {
                        Mt.run(), this.props.reloadTabContent[this.props.tabIndex] = this._reloadTabContent, this.props.forceRedrawTabContent[this.props.tabIndex] = this._forceRedrawTabContent, this.setState({
                            afterFirstRender: !0
                        })
                    }
                    render() {
                        return r.createElement("div", {
                            className: "leagues--live " + this._getContestClass()
                        }, this.state.afterFirstRender ? this._displayLeagues() : null)
                    }
                }
                return e.numberOfVisibleEventOnFirstRender = 40, e
            })();

            function Vn(e) {
                return e.showOptions ? r.createElement("div", {
                    className: "dropDown__list",
                    onMouseEnter: e.onMouseEnterHandler,
                    onMouseLeave: e.onMouseLeaveHandler
                }, r.Children.map(e.children, t => r.cloneElement(t, {
                    onClick: () => e.onSelect(t.props.value),
                    selected: t.props.value === e.selectedValue
                }))) : null
            }

            function jn({
                rotate: e
            }) {
                const t = ["dropDown__arrow", e ? "dropDown__arrow--rotate" : ""];
                return r.createElement("div", {
                    className: t.join(" ")
                })
            }

            function Jn({
                onClick: e,
                onBlur: t,
                children: n,
                showOptions: a
            }) {
                return r.createElement("div", {
                    className: "dropDown__selectedValue",
                    onClick: e,
                    tabIndex: 0,
                    onBlur: t
                }, n, r.createElement(jn, {
                    rotate: a
                }))
            }
            class $n extends r.Component {
                constructor(e) {
                    super(e), this.closeDenied = !1, this.toggleShowOptions = () => {
                        this.setState(({
                            showOptions: e
                        }) => ({
                            showOptions: !e
                        }))
                    }, this.closeOptions = () => {
                        this.closeDenied || this.setState(({
                            showOptions: e
                        }) => ({
                            showOptions: !1
                        }))
                    }, this.onSelect = e => {
                        this.props.onChange(e), this.setState({
                            selectedValue: e,
                            showOptions: !1
                        }), this.closeDenied = !1
                    }, this.findSelectedOption = () => {
                        const {
                            children: e
                        } = this.props, {
                            selectedValue: t
                        } = this.state;
                        return r.Children.toArray(e).filter(e => e.props.value === t)[0]
                    }, this.state = {
                        selectedValue: e.initialValue,
                        showOptions: !1
                    }
                }
                static getDerivedStateFromProps(e, t) {
                    return void 0 !== e.value ? Object.assign(Object.assign({}, t), {
                        selectedValue: e.value
                    }) : null
                }
                render() {
                    const {
                        children: e,
                        closeOnBlur: t
                    } = this.props, {
                        showOptions: n,
                        selectedValue: a
                    } = this.state, i = this.findSelectedOption();
                    return r.createElement("div", {
                        className: "dropDown dropDown--filter"
                    }, r.createElement(Jn, {
                        onClick: this.toggleShowOptions,
                        showOptions: n,
                        onBlur: t ? this.closeOptions : void 0
                    }, i.props.children), r.createElement(Vn, {
                        onSelect: this.onSelect,
                        selectedValue: a,
                        showOptions: n,
                        onMouseEnterHandler: () => {
                            this.closeDenied = !0
                        },
                        onMouseLeaveHandler: () => {
                            this.closeDenied = !1
                        }
                    }, e))
                }
            }
            var Qn = function(e, t) {
                var n = {};
                for (var a in e) Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (n[a] = e[a]);
                if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                    var r = 0;
                    for (a = Object.getOwnPropertySymbols(e); r < a.length; r++) t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[r]) && (n[a[r]] = e[a[r]])
                }
                return n
            };

            function Zn(e) {
                var {
                    selected: t = !1
                } = e, n = Qn(e, ["selected"]);
                const a = ["dropDown__option", t ? "dropDown__option--selected" : ""];
                return r.createElement("div", Object.assign({
                    className: a.join(" ")
                }, n))
            }
            var zn = n(77),
                qn = n(56),
                ea = n(78),
                ta = n(79),
                na = n(50);
            class aa extends r.Component {
                constructor(e) {
                    super(e), this._getCountryTitle = e => r.createElement(r.Fragment, null, de.render({
                        countryId: e.getCountryId(),
                        countryName: e.getCountryName()
                    }), String(e.getCountryName() + ": " + e.getMeetingName()).toUpperCase()), this._getEventDateTitle = e => e.getEvents()[0].getStartFullDate(), this._createDropDownOption = (e, t) => r.createElement(Zn, {
                        key: "drop-down-option-" + t,
                        value: t
                    }, e), this._createTab = (e, t) => r.createElement(qn.a, {
                        className: "subTabs__tab",
                        key: "tab-" + t
                    }, e), this._renderDropdownTabSelector = e => r.createElement(na.a.Consumer, null, ({
                        selected: t,
                        setSelected: n
                    }) => r.createElement($n, {
                        initialValue: t.index,
                        value: t.index,
                        onChange: e => n({
                            index: e,
                            key: null
                        })
                    }, e.map(this._createDropDownOption))), this._renderTabList = e => r.createElement(ta.a, {
                        className: "subTabs"
                    }, e.map(this._createTab)), this._reloadTabContent = this._reloadTabContent.bind(this)
                }
                _reloadTabContent() {
                    this.forceUpdate()
                }
                componentDidMount() {
                    this.props.reloadTabContent[this.props.tabIndex] = this._reloadTabContent
                }
                getLeagues(e) {
                    return r.createElement(Kn, {
                        fsLiveTable: this.props.fsLiveTable,
                        sportDetails: this.props.sportDetails,
                        reloadTabContent: {},
                        forceRedrawTabContent: this.props.forceRedrawTabContent,
                        reloadNoMatchCall: this.props.reloadNoMatchCall,
                        reloadNoMatch: this.props.reloadNoMatch,
                        reactCalls: this.props.reactCalls,
                        tabIndex: this.props.tabIndex,
                        category: this.props.category,
                        isOdds: this.props.isOdds,
                        onShowAllEventsChange: this.props.onShowAllEventsChange,
                        showAllEventsForLeague: this.props.showAllEventsForLeague,
                        stageId: e || void 0,
                        pageType: this.props.pageType,
                        pageTab: this.props.pageTab,
                        key: this.props.category + "-" + Date.now() + "-" + Math.random()
                    })
                }
                _getTabsAndContent(e) {
                    return e.reduce((e, t) => (e[0].push(t.getTitle()), e[1].push(this.getLeagues(t.getStageId())), e), [
                        [],
                        []
                    ])
                }
                render() {
                    const e = this.props.pageTab ? this.props.fsLiveTable.getMeetingLeaguesByTabIdSortByDate(this.props.category) : this.props.fsLiveTable.getMeetingLeaguesByTabIdSortByMeetingId(this.props.category),
                        t = [];
                    let n = 0;
                    t.push(qt.render({
                        pageType: this.props.pageType,
                        title: this.props.fsLiveTable.getSectionTitle().getTodaysMatchesName(this.props.sportDetails.sportId, !1),
                        isLive: !0
                    }));
                    for (const i in e) {
                        n++;
                        const s = e[i][0],
                            [l, o] = this.props.fsLiveTable.getStageTabs(s.getLeagueId()).getTabs(),
                            [c, g] = this._getTabsAndContent(l);
                        t.push(r.createElement(M.Consumer, {
                            key: "meeting-" + i
                        }, e => r.createElement("div", {
                            className: "event"
                        }, r.createElement(zn.a, {
                            initiallySelected: -1 !== o ? o : 0
                        }, l.length > 0 && r.createElement("div", {
                            className: "subTabs subTabs--label"
                        }, this.props.pageTab ? this._getEventDateTitle(s) : this._getCountryTitle(s), e === a.MOBILE && this._renderDropdownTabSelector(c)), e === a.DESKTOP && this._renderTabList(c), r.createElement(ea.a, null, g)))))
                    }
                    return 0 == n ? this.getLeagues() : t
                }
            }
            class ra extends r.Component {
                constructor(e) {
                    super(e), this.leaguesByTabId = [], this.state = {
                        forceRedrawSwitcher: !1,
                        enableDoubleRendering: !0,
                        showAllEventsForLeague: e.showAllEventsForLeague
                    }, this._reloadTabContent = this._reloadTabContent.bind(this), this._forceRedrawTabContent = this._forceRedrawTabContent.bind(this), this._onShowAllEventsChange = this._onShowAllEventsChange.bind(this)
                }
                _forceRedrawTabContent(e = !1) {
                    this.setState(t => ({
                        forceRedrawSwitcher: !t.forceRedrawSwitcher,
                        enableDoubleRendering: e
                    }))
                }
                _reloadTabContent() {
                    this.setState({
                        enableDoubleRendering: !1
                    })
                }
                _onShowAllEventsChange(e, t) {
                    this.props.onShowAllEventsChange(e, t), this.setState(n => ({
                        showAllEventsForLeague: Object.assign(Object.assign({}, n.showAllEventsForLeague), {
                            [e]: t
                        }),
                        enableDoubleRendering: !1
                    }))
                }
                _createCountOfLeaguesAndEventsPerSport(e) {
                    const t = {
                        events: {},
                        leagues: {}
                    };
                    for (const n of e) {
                        const e = n.getSportName();
                        void 0 === t.events[e] && (t.events[e] = 0), void 0 === t.leagues[e] && (t.leagues[e] = 0), t.events[e] += n.getEventCount(), t.leagues[e]++
                    }
                    return t
                }
                _createShowMoreGamesLink(e, t) {
                    return () => {
                        const n = this.props.utilFactory.createEnviroment();
                        if (!this.props.utilFactory.createConfig().get("app", "mixed_feed", "link_to_more_games") || !this.props.utilFactory.createDate().isToday()) return null;
                        const a = n.getSportsCountObject();
                        if (!a.data || !a.data[e] || t >= a.data[e].events) return null;
                        const i = a.data[e].events,
                            s = this.props.utilFactory.createSport(),
                            l = this.props.utilFactory.createTrans(),
                            o = (this.props.utilFactory.createUrl(), s.getTranslatedName(e)),
                            c = "/" + s.getTranslatedUrlName(e) + "/",
                            g = l.translate("TRANS_CLICK_FOR_MORE_SPORT_GAMES").replace("[sport]", o.toUpperCase());
                        return r.createElement("a", {
                            className: "event__more event__more--noArrow",
                            href: c
                        }, g, " (", i, ")")
                    }
                }
                componentDidMount() {
                    Mt.run(), this.props.reloadTabContent[this.props.tabIndex] = this._reloadTabContent, this.props.forceRedrawTabContent[this.props.tabIndex] = this._forceRedrawTabContent
                }
                render() {
                    if (this.leaguesByTabId = this.props.fsLiveTable.getLeaguesByTabId(this.props.category), 0 === this.leaguesByTabId.length) return r.createElement(Rt, {
                        sportDetails: this.props.sportDetails,
                        fsLiveTable: this.props.fsLiveTable,
                        reloadNoMatch: this.props.reloadNoMatch,
                        tabId: this.props.category,
                        key: "noMatch",
                        pageType: this.props.pageType
                    });
                    const e = this._createCountOfLeaguesAndEventsPerSport(this.leaguesByTabId),
                        t = new on;
                    let n = "",
                        a = 0;
                    for (const i of this.leaguesByTabId) {
                        const s = i.getLeagueId(),
                            l = s + "_" + (this.state.forceRedrawSwitcher ? "_1" : "_0"),
                            o = s in this.state.showAllEventsForLeague ? this.state.showAllEventsForLeague[s] : i.getVisibleEventsCount(this.props.pageType),
                            c = i.getSportName();
                        e.leagues[c]--;
                        const g = 0 == e.leagues[c] && !this.props.isOdds && this.props.category == _.a.TAB_ID_ALL,
                            h = e.events[c],
                            E = {
                                league: i,
                                fsLiveTable: this.props.fsLiveTable,
                                tabId: this.props.category,
                                isOdds: this.props.isOdds,
                                reloadNoMatchCall: this.props.reloadNoMatchCall,
                                reactCalls: this.props.reactCalls,
                                leagueId: i.getLeagueId(),
                                visibleEventsCount: o,
                                lastSportName: n,
                                lastSportCategoryId: a,
                                onShowAllEventsChange: this._onShowAllEventsChange,
                                myGamesGroupKey: 0,
                                pageType: this.props.pageType,
                                blockType: this.props.pageTab,
                                expandCollapseLeagueDisabled: this.props.expandCollapseLeagueDisabled || !1,
                                showMoreGamesLink: g ? this._createShowMoreGamesLink(i.getSportId(), h) : void 0
                            },
                            d = i.isNoDuelTournament() ? Bt : Gt;
                        t.addItem(new xt(r.createElement(d, Object.assign({}, E, {
                            key: l
                        }))).setSportName(c).build()), n = c, a = i.getSportCategoryId()
                    }
                    return t.getLeagues()
                }
            }
            class ia {
                constructor(e) {
                    this._utilFactory = e
                }
                resolve(e) {
                    return "horse-racing" == e.sportDetails.name ? r.createElement(aa, Object.assign({}, e, {
                        key: e.tabIndex + "-" + Date.now()
                    })) : e.fsLiveTable.isMixedPage() ? r.createElement(ra, Object.assign({}, e, {
                        utilFactory: this._utilFactory,
                        key: e.tabIndex + "-" + Date.now()
                    })) : r.createElement(Kn, Object.assign({}, e, {
                        key: e.tabIndex + "-" + Date.now()
                    }))
                }
            }
            class sa {
                static render(e) {
                    return !!e.enabled && r.createElement("div", {
                        id: "notifications-settings",
                        className: "notifications",
                        onClick: t => e.handlerOnClick(t),
                        onMouseEnter: t => e.handlerOnMouseEnter(t),
                        onMouseLeave: t => e.handlerOnMouseLeave(t)
                    }, r.createElement("div", {
                        className: "notifications__icon"
                    }), r.createElement("div", {
                        className: "notifications__text"
                    }, e.title))
                }
            }
            class la {
                constructor(e, t, n, a) {
                    this._name = e, this._flag = t, this._date = n, this._isTeam = a
                }
                getName() {
                    return this._name
                }
                getFlagId() {
                    return this._flag
                }
                getDate() {
                    return this._date
                }
                isTeam() {
                    return this._isTeam
                }
            }
            class oa {
                constructor(e, t, n, a, r, i, s) {
                    this.id = e, this.name = t, this.teamId = n, this.teamName = a, this.url = r, this.countryId = i, this.countryName = s
                }
                getId() {
                    return this.id
                }
                getName() {
                    return this.name
                }
                getTeamId() {
                    return this.teamId
                }
                getTeamName() {
                    return this.teamName
                }
                getUrl() {
                    return this.url
                }
                getCountryId() {
                    return this.countryId
                }
                getCountryName() {
                    return this.countryName
                }
            }
            class ca {
                constructor(e, t, n, a, r, i, s, l, o, c, g, _, h, E, d) {
                    this.id = e, this.participants = t, this.rank = n, this.previousRank = a, this.points = r, this.averagePoints = i, this.tournPlayed = s, this.pointsNextRound = l, this.pointsWinner = o, this.currentTournamentName = c, this.currentTournamentUrl = g, this.currentTournamentActive = _, this.currentTournamentWinner = h, this.prizeMoney = E, this.team = d
                }
                getId() {
                    return this.id
                }
                getParticipants() {
                    return this.participants
                }
                getRank() {
                    return this.rank
                }
                getPreviousRank() {
                    return this.previousRank
                }
                getPoints() {
                    return this.points
                }
                getAveragePoints() {
                    return this.averagePoints
                }
                getTournPlayed() {
                    return this.tournPlayed
                }
                getPointsNextRound() {
                    return this.pointsNextRound
                }
                getPointsWinner() {
                    return this.pointsWinner
                }
                getCurrentTournamentName() {
                    return this.currentTournamentName
                }
                getCurrentTournamentUrl() {
                    return this.currentTournamentUrl
                }
                isCurrentTournamentActive() {
                    return this.currentTournamentActive
                }
                isCurrentTournamentWinner() {
                    return this.currentTournamentWinner
                }
                getPrizeMoney() {
                    return this.prizeMoney
                }
                isTeam() {
                    return this.team
                }
            }
            class ga {
                constructor() {
                    this.id = "", this.participantIds = [], this.participantNames = [], this.participantTeamIds = [], this.participantTeamNames = [], this.participantUrls = [], this.countryIds = [], this.countryNames = [], this.rank = "", this.previousRank = "", this.points = "", this.averagePoints = "", this.tournPlayed = "", this.pointsNextRound = "", this.pointsWinner = "", this.currentTournamentName = "", this.currentTournamentUrl = "", this.currentTournamentActive = !1, this.currentTournamentWinner = !1, this.prizeMoney = "", this.isTeam = !1
                }
                setId(e) {
                    return this.id = e, this
                }
                setParticipantIds(e) {
                    return this.participantIds = e, this
                }
                setParticipantNames(e) {
                    return this.participantNames = e, this
                }
                setParticipantTeamIds(e) {
                    return this.participantTeamIds = e, this
                }
                setParticipantTeamNames(e) {
                    return this.participantTeamNames = e, this
                }
                setParticipantUrls(e) {
                    return this.participantUrls = e, this
                }
                setCountryIds(e) {
                    return this.countryIds = e, this
                }
                setCountryNames(e) {
                    return this.countryNames = e, this
                }
                setRank(e) {
                    return this.rank = e, this
                }
                setPreviousRank(e) {
                    return this.previousRank = e, this
                }
                setPoints(e) {
                    return this.points = e, this
                }
                setAveragePoints(e) {
                    return this.averagePoints = e, this
                }
                setTournPlayed(e) {
                    return this.tournPlayed = e, this
                }
                setPointsNextRound(e) {
                    return this.pointsNextRound = e, this
                }
                setPointsWinner(e) {
                    return this.pointsWinner = e, this
                }
                setCurrentTournamentName(e) {
                    return this.currentTournamentName = e, this
                }
                setCurrentTournamentUrl(e) {
                    return this.currentTournamentUrl = e, this
                }
                setCurrentTournamentActive(e) {
                    return this.currentTournamentActive = e, this
                }
                setCurrentTournamentWinner(e) {
                    return this.currentTournamentWinner = e, this
                }
                setPrizeMoney(e) {
                    return this.prizeMoney = e, this
                }
                setIsTeam(e) {
                    return this.isTeam = e, this
                }
                build() {
                    const e = [];
                    return this.participantIds.forEach((t, n) => {
                        const a = new oa(t, this.participantNames[n], this.participantTeamIds[n], this.participantTeamNames[n], this.participantUrls[n], this.countryIds[n], this.countryNames[n]);
                        e.push(a)
                    }), new ca(this.id, e, this.rank, this.previousRank, this.points, this.averagePoints, this.tournPlayed, this.pointsNextRound, this.pointsWinner, this.currentTournamentName, this.currentTournamentUrl, this.currentTournamentActive, this.currentTournamentWinner, this.prizeMoney, this.isTeam)
                }
            }
            class _a {
                constructor() {
                    this._tabs = [], this._headers = [], this._rows = [], this._filters = []
                }
                addTab(e) {
                    return this._tabs.push(e), this
                }
                getTabs() {
                    return this._tabs
                }
                addHeader(e) {
                    return this._headers.push(e), this
                }
                getHeaders() {
                    return this._headers
                }
                addRow(e) {
                    return this.addRows([e]), this
                }
                addRows(e) {
                    const t = e.map(e => e.getId());
                    return this._rows = [...this._rows.filter(e => -1 == t.indexOf(e.getId())), ...e], this
                }
                getRows() {
                    return this._rows
                }
                getFilteredRows() {
                    let e = [...this._rows];
                    return this._filters.forEach(t => {
                        e = t.filter(e)
                    }), e
                }
                addRowFilter(e) {
                    this._filters.push(e)
                }
                resetFilters() {
                    this._filters = []
                }
            }
            class ha {
                constructor(e, t, n, a) {
                    this._id = e, this._name = t, this._url = n, this._selected = a
                }
                getId() {
                    return this._id
                }
                getName() {
                    return this._name
                }
                getUrl() {
                    return this._url
                }
                isSelected() {
                    return this._selected
                }
            }
            class Ea {
                constructor() {
                    this.ID = "ID", this.TEXT = "TE", this.PARTICIPANT_ID = "PI", this.PARTICIPANT_NAME = "PN", this.PARTICIPANT_URL = "PU", this.PARTICIPANT_TEAM_ID = "TI", this.PARTICIPANT_TEAM_NAME = "TN", this.COUNTRY_ID = "CI", this.COUNTRY_NAME = "CN", this.RANK = "RA", this.PREVIOUS_RANK = "RAP", this.POINTS = "PO", this.AVERAGE_POINTS = "POA", this.POINTS_NEXT_ROUND = "PON", this.POINTS_WINNER = "POW", this.CURRENT_TOURNAMENT_NAME = "CTN", this.CURRENT_TOURNAMENT_URL = "CTU", this.CURRENT_TOURNAMENT_ACTIVE = "CTA", this.CURRENT_TOURNAMENT_WINNER = "CTW", this.TOURN_PLAYED = "TP", this.PRIZE_MONEY = "PM", this.DATE = "DA", this.SEPARATOR = "|"
                }
                build(e) {
                    return this._container = new _a, e.getChildren().forEach((e, t) => {
                        0 == t ? this._parseTabs(e) : this._parseRows(e)
                    }), this._container
                }
                _parseTabs(e) {
                    e.getChildren().forEach(e => {
                        const [t, n, a, r] = e.getProperty("VA", !0).split(this.SEPARATOR);
                        this._container.addTab(new ha(e.getId(), t, n, "1" == a))
                    })
                }
                _parseRows(e) {
                    e.getChildren().forEach((e, t) => {
                        e.getChildren().forEach((e, n) => {
                            if (0 == n) return void this._container.addHeader(new la(e.getProperty(this.TEXT, !0), parseInt(e.getProperty(this.COUNTRY_ID, !0)), e.getProperty(this.DATE, !1), 1 == t));
                            const a = new ga,
                                r = e.getProperties();
                            for (const e in r) {
                                const t = r[e];
                                switch (e) {
                                    case this.ID:
                                        a.setId(t);
                                        break;
                                    case this.PARTICIPANT_ID:
                                        a.setParticipantIds(t.split(this.SEPARATOR));
                                        break;
                                    case this.PARTICIPANT_NAME:
                                        a.setParticipantNames(t.split(this.SEPARATOR));
                                        break;
                                    case this.PARTICIPANT_TEAM_ID:
                                        a.setParticipantTeamIds(t.split(this.SEPARATOR));
                                        break;
                                    case this.PARTICIPANT_TEAM_NAME:
                                        a.setParticipantTeamNames(t.split(this.SEPARATOR));
                                        break;
                                    case this.PARTICIPANT_URL:
                                        a.setParticipantUrls(t.split(this.SEPARATOR));
                                        break;
                                    case this.COUNTRY_ID:
                                        a.setCountryIds(t.split(this.SEPARATOR).map(e => parseInt(e)));
                                        break;
                                    case this.COUNTRY_NAME:
                                        a.setCountryNames(t.split(this.SEPARATOR));
                                        break;
                                    case this.RANK:
                                        a.setRank(t);
                                        break;
                                    case this.PREVIOUS_RANK:
                                        a.setPreviousRank(t);
                                        break;
                                    case this.POINTS:
                                        a.setPoints(t);
                                        break;
                                    case this.AVERAGE_POINTS:
                                        a.setAveragePoints(t);
                                        break;
                                    case this.POINTS_NEXT_ROUND:
                                        a.setPointsNextRound(t);
                                        break;
                                    case this.POINTS_WINNER:
                                        a.setPointsWinner(t);
                                        break;
                                    case this.CURRENT_TOURNAMENT_NAME:
                                        a.setCurrentTournamentName(t);
                                        break;
                                    case this.CURRENT_TOURNAMENT_URL:
                                        a.setCurrentTournamentUrl(t);
                                        break;
                                    case this.CURRENT_TOURNAMENT_ACTIVE:
                                        a.setCurrentTournamentActive("1" == t);
                                        break;
                                    case this.CURRENT_TOURNAMENT_WINNER:
                                        a.setCurrentTournamentWinner("1" == t);
                                        break;
                                    case this.TOURN_PLAYED:
                                        a.setTournPlayed(t);
                                        break;
                                    case this.PRIZE_MONEY:
                                        a.setPrizeMoney(t)
                                }
                            }
                            a.setIsTeam(1 == t), this._container.addRow(a.build())
                        })
                    })
                }
            }
            var da, Ta = n(189),
                ua = function(e, t, n, a) {
                    return new(n || (n = Promise))((function(r, i) {
                        function s(e) {
                            try {
                                o(a.next(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function l(e) {
                            try {
                                o(a.throw(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function o(e) {
                            var t;
                            e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                                e(t)
                            }))).then(s, l)
                        }
                        o((a = a.apply(e, t || [])).next())
                    }))
                };
            class Sa {
                constructor(e, t, n) {
                    this._fsLiveTable = e, this._utilFactory = t, this._helperFactory = n
                }
            }
            class ma extends Sa {
                constructor(e, t, n, a) {
                    super(t, n, a), this._rankingId = e, this.getRows = this.getRows.bind(this)
                }
                getRows(e, t, n) {
                    return ua(this, void 0, void 0, (function*() {
                        const a = e ? "ranking-live" : "ranking",
                            r = yield this._fsLiveTable.fetchFeed(a, {
                                rankingId: this._rankingId,
                                pageNumber: t
                            }), i = this._helperFactory.createFeedTableContainerBuilder().setSpecificParser(new Ea).build(r.getContent());
                        n(i)
                    }))
                }
            }
            class va extends Sa {
                constructor(e, t, n, a, r) {
                    super(e, t, n), this.getRounds = this.getRounds.bind(this), this.participantEncodedId = a, this.swappedParticipants = r
                }
                getRounds(e, t, n, a) {
                    return ua(this, void 0, void 0, (function*() {
                        const r = yield this._fsLiveTable.fetchFeed("draw", {
                            tournamentId: e,
                            tournamentStageId: t,
                            eventId: n
                        }), i = (new Ta.DrawModelParser).parse(r.getContent());
                        a(i)
                    }))
                }
                getParticipantEncodedId() {
                    return this.participantEncodedId
                }
                isSwappedParticipants() {
                    return this.swappedParticipants
                }
            }
            class pa {
                static isRanking(e) {
                    return e.getPageType() == ce.PAGE_TYPE_RANKING
                }
                static isDraw(e) {
                    return e.getPageType() == ce.PAGE_TYPE_DRAW || e.getHasDraw()
                }
            }

            function Ia({
                soundIcon: e
            }) {
                const [t, n] = Object(I.b)(() => e.isSwitchedOn());
                return r.createElement("div", {
                    id: "sound-switch",
                    className: "ifmenu-sound-link soundTab" + (t ? "" : " sound-off"),
                    onClick: t => {
                        e.getHandlerOnClick()(t, a => {
                            n(a), e.getHandlerOnMouseEnter()(t)
                        })
                    },
                    onMouseEnter: t => e.getHandlerOnMouseEnter()(t),
                    onMouseLeave: t => e.getHandlerOnMouseLeave()(t)
                }, r.createElement("div", {
                    className: "ifmenu-sound-link-icon soundTab__icon"
                }))
            }

            function Aa(e) {
                return i.a.createElement(l, {
                    defaultActiveTabIndex: e.activeTabIndex,
                    renderSingleTab: !0,
                    subTab: !0,
                    className: "subTabs--participantPage"
                }, e.children)
            }

            function Na(e) {
                return i.a.createElement("div", {
                    className: "rankingFilter"
                }, i.a.createElement("div", {
                    className: "rankingInputs"
                }, i.a.createElement("input", {
                    className: "rankingInputs__input rankingInputs__input--text",
                    type: "text",
                    onChange: t => {
                        e.handlerOnChangeInputName(t.target.value)
                    },
                    value: e.inputName,
                    placeholder: e.utilTrans.translate("TRANS_RANKINGS_NAME_SEARCH")
                }), i.a.createElement("div", {
                    className: "rankingInputs__input rankingInputs__input--select",
                    onClick: e.handlerOnClickInputCountry
                }, i.a.createElement($n, {
                    initialValue: e.inputCountry,
                    value: e.inputCountry,
                    onChange: t => {
                        e.handlerOnChangeInputCountry(parseInt(t.toString()))
                    },
                    closeOnBlur: !0
                }, e.inputCountries.map((e, t) => i.a.createElement(Zn, {
                    key: "drop-down-option-" + e.id,
                    value: e.id
                }, i.a.createElement(i.a.Fragment, null, i.a.createElement("span", {
                    className: e.id ? "flag fl_" + e.id : ""
                }), i.a.createElement("span", {
                    className: "dropDown__text"
                }, e.name)))))), e.inputTeams.length > 1 && i.a.createElement("div", {
                    className: "rankingInputs__input rankingInputs__input--select",
                    onClick: e.handlerOnClickInputTeam
                }, i.a.createElement($n, {
                    initialValue: e.inputTeam,
                    value: e.inputTeam,
                    onChange: t => {
                        e.handlerOnChangeInputTeam(t.toString())
                    }
                }, e.inputTeams.map((e, t) => i.a.createElement(Zn, {
                    key: "drop-down-option-" + e.id,
                    value: e.id
                }, i.a.createElement("div", null, i.a.createElement("span", null, e.name))))))), e.showInputLive && i.a.createElement(i.a.Fragment, null, i.a.createElement("div", {
                    className: "rankingSwitcher"
                }, i.a.createElement("div", {
                    className: "rankingSwitcher__text"
                }, e.utilTrans.translate("TRANS_RANKINGS_LIVE_SEARCH")), i.a.createElement("input", {
                    type: "checkbox",
                    defaultChecked: e.inputLive,
                    className: "rankingSwitcher__button toggleButton" + (e.inputLive ? " rankingSwitcher__button--live" : ""),
                    onClick: () => {
                        e.handlerOnClickLive(!e.inputLive)
                    }
                }))))
            }
            class Ra {
                constructor(e, t) {
                    this._input = e, this._utilString = t, this._inputUpper = this._utilString.toUpper(e)
                }
                filter(e) {
                    return "" == this._inputUpper ? e : e.filter(e => -1 != e.getParticipants().map(e => -1 != this._utilString.toUpper(e.getName()).search(this._inputUpper)).indexOf(!0))
                }
            }
            class Oa {
                constructor(e) {
                    this._countryId = e
                }
                filter(e) {
                    return 0 == this._countryId ? e : e.filter(e => -1 != e.getParticipants().map(e => e.getCountryId()).indexOf(this._countryId))
                }
            }
            class Da {
                constructor(e) {
                    this._teamId = e
                }
                filter(e) {
                    return "" == this._teamId ? e : e.filter(e => -1 != e.getParticipants().map(e => e.getTeamId()).indexOf(this._teamId) || -1 != e.getParticipants().map(e => e.getId()).indexOf(this._teamId))
                }
            }
            class Ca {
                constructor(e) {
                    this._isTeam = e
                }
                filter(e) {
                    return e.filter(e => e.isTeam() == this._isTeam)
                }
            }

            function ya(e) {
                if ("" == e.value || "" == e.previousValue) return null;
                const t = parseInt(e.previousValue) - parseInt(e.value);
                return 0 == t ? null : r.createElement("div", {
                    className: "rankingTable__shiftValue rankingTable__shiftValue--" + (t > 0 ? "up" : "down")
                }, (t > 0 ? "+" : "") + t)
            }

            function Ha(e) {
                return r.createElement(r.Fragment, null, e.participants.map(e => r.createElement("div", {
                    key: e.getId(),
                    className: "rankingTable__player"
                }, de.render({
                    countryId: e.getCountryId(),
                    countryName: e.getCountryName()
                }), e.getUrl() ? r.createElement("a", {
                    href: e.getUrl()
                }, e.getName()) : e.getName())))
            }

            function La(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPointsNextRound()), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPointsWinner()), r.createElement("div", {
                    className: "rank-column-tournaments" + (e.row.isCurrentTournamentWinner() ? " winner" : e.row.isCurrentTournamentActive() ? "" : " cut_off")
                }, e.row.getCurrentTournamentUrl() ? r.createElement("a", {
                    href: e.row.getCurrentTournamentUrl()
                }, e.row.getCurrentTournamentName()) : e.row.getCurrentTournamentName()))
            }

            function Pa(e) {
                return r.createElement(r.Fragment, null, e.participants.map(e => r.createElement("div", {
                    key: e.getId(),
                    className: "rankingTable__nationality"
                }, e.getCountryName())))
            }

            function Ma(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()), r.createElement("div", {
                    className: "rank-column-tournaments"
                }, e.row.getTournPlayed()))
            }

            function Fa(e) {
                const t = e.headers.filter(t => t.isTeam() == Boolean(e.isTeam)).map(t => r.createElement("div", {
                    className: "rankingTable__league rankingTable__mainRow",
                    key: [t.getName(), t.isTeam()].join(",")
                }, t.getFlagId() > 0 && r.createElement("span", {
                    className: "flag fl_" + t.getFlagId()
                }), t.getName(), " (", e.live ? "Live" : t.getDate(), ")"));
                return r.createElement(r.Fragment, null, t)
            }

            function wa(e) {
                return r.createElement("div", {
                    className: "profileTable__row profileTable__row--transferText"
                }, e.utilTrans.translate("TRANS_SEARCH_NO_RESULTS"))
            }

            function ba(e) {
                return r.createElement("div", null, r.createElement("div", {
                    className: "rankingTable__table"
                }, r.createElement("div", {
                    className: "rankingTable__submainRow"
                }, e.head), e.body.length ? e.body : r.createElement(wa, {
                    utilTrans: e.utilTrans
                })))
            }

            function fa(e) {
                return r.createElement(r.Fragment, null, r.createElement("div", {
                    className: "rank-column-rank",
                    title: e.translate("TRANS_RANK")
                }, "#"), r.createElement("div", {
                    className: "rank-column-player",
                    title: e.translate("TRANS_RANKINGS_COLUMN_NAME")
                }, e.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                    className: "rank-column-nationality",
                    title: e.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                }, e.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                    className: "rank-column-points",
                    title: e.translate("TRANS_RANKINGS_COLUMN_POINTS")
                }, e.translate("TRANS_RANKINGS_COLUMN_POINTS")), r.createElement("div", {
                    className: "rank-column-tournaments",
                    title: e.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")
                }, e.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")))
            }

            function ka(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers,
                    live: e.live
                }), r.createElement(ba, {
                    head: e.live ? (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_TOTAL_POINTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_SHORT_TOTAL_POINTS")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS_NEXT_ROUND")
                    }, t.translate("TRANS_RANKINGS_COLUMN_SHORT_POINTS_NEXT_ROUND")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS_WINNER")
                    }, t.translate("TRANS_RANKINGS_COLUMN_SHORT_POINTS_WINNER")), r.createElement("div", {
                        className: "rank-column-tournaments",
                        title: t.translate("TRANS_RANKINGS_COLUMN_CURRENT_TOURNAMENT_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_CURRENT_TOURNAMENT_NAME")))) : fa(e.utilTrans),
                    body: e.live ? e.rows.map(e => r.createElement(La, {
                        row: e,
                        key: e.getId()
                    })) : e.rows.map(e => r.createElement(Ma, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function Ga(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()), r.createElement("div", {
                    className: "rank-column-tournaments"
                }, e.row.getTournPlayed()))
            }

            function Ua(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_POINTS")), r.createElement("div", {
                        className: "rank-column-tournaments",
                        title: t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")))),
                    body: e.rows.map(e => r.createElement(Ga, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function Ba(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                })), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPrizeMoney()))
            }

            function Wa(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_PRICE_MONEY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_PRICE_MONEY")))),
                    body: e.rows.map(e => r.createElement(Ba, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function xa(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()))
            }

            function Xa(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_POINTS")))),
                    body: e.rows.map(e => r.createElement(xa, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function Ya(e) {
                return r.createElement(r.Fragment, null, e.participants.map(e => r.createElement("div", {
                    key: e.getId(),
                    className: "rankingTable__player"
                }, e.getTeamName())))
            }

            function Ka(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-team"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ya, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()))
            }

            function Va(e) {
                return r.createElement(r.Fragment, null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_MOTORSPORT_AUTO_RACING_PLAYER")
                    }, t.translate("TRANS_MOTORSPORT_AUTO_RACING_PLAYER")), r.createElement("div", {
                        className: "rank-column-team",
                        title: t.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")
                    }, t.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_POINTS")))),
                    body: new Ca(!1).filter(e.rows).map(e => r.createElement(Ka, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function ja(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()), r.createElement("div", {
                    className: "rank-column-tournaments"
                }, e.row.getTournPlayed()))
            }

            function Ja(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_POINTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_POINTS")), r.createElement("div", {
                        className: "rank-column-tournaments",
                        title: t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")))),
                    body: e.rows.map(e => r.createElement(ja, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function $a(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPrizeMoney()), r.createElement("div", {
                    className: "rank-column-tournaments"
                }, e.row.getTournPlayed()))
            }

            function Qa(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_PRICE_MONEY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_PRICE_MONEY")), r.createElement("div", {
                        className: "rank-column-tournaments",
                        title: t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")))),
                    body: e.rows.map(e => r.createElement($a, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function Za(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-nationality"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Pa, {
                    participants: e.row.getParticipants()
                }))), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getAveragePoints()), r.createElement("div", {
                    className: "rank-column-tournaments"
                }, e.row.getTournPlayed()))
            }

            function za(e) {
                return r.createElement("div", null, r.createElement(Fa, {
                    headers: e.headers
                }), r.createElement(ba, {
                    head: (t = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: t.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NAME")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NAME")), r.createElement("div", {
                        className: "rank-column-nationality",
                        title: t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")
                    }, t.translate("TRANS_RANKINGS_COLUMN_NATIONALITY")), r.createElement("div", {
                        className: "rank-column-points",
                        title: t.translate("TRANS_RANKINGS_COLUMN_AVG")
                    }, t.translate("TRANS_RANKINGS_COLUMN_AVG")), r.createElement("div", {
                        className: "rank-column-tournaments",
                        title: t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")
                    }, t.translate("TRANS_RANKINGS_COLUMN_TOURNAMENTS")))),
                    body: e.rows.map(e => r.createElement(Za, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var t
            }

            function qa(e) {
                return r.createElement("div", {
                    className: "rankingTable__row"
                }, r.createElement("div", {
                    className: "rank-column-rank"
                }, e.row.getRank(), "."), r.createElement("div", {
                    className: "rank-column-player"
                }, r.createElement("div", {
                    className: "rankingTable__playerContainer"
                }, r.createElement(Ha, {
                    participants: e.row.getParticipants()
                })), r.createElement(ya, {
                    value: e.row.getRank(),
                    previousValue: e.row.getPreviousRank()
                })), r.createElement("div", {
                    className: "rank-column-points"
                }, e.row.getPoints()))
            }

            function er(e) {
                const t = e.headers.filter(e => e.isTeam());
                return 0 == t.length ? null : r.createElement(r.Fragment, null, r.createElement(Fa, {
                    headers: t,
                    isTeam: !0
                }), r.createElement(ba, {
                    head: (n = e.utilTrans, r.createElement(r.Fragment, null, r.createElement("div", {
                        className: "rank-column-rank",
                        title: n.translate("TRANS_RANK")
                    }, "#"), r.createElement("div", {
                        className: "rank-column-player",
                        title: n.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")
                    }, n.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")), r.createElement("div", {
                        className: "rank-column-points",
                        title: n.translate("TRANS_RANKINGS_COLUMN_POINTS")
                    }, n.translate("TRANS_RANKINGS_COLUMN_POINTS")))),
                    body: new Ca(!0).filter(e.rows).map(e => r.createElement(qa, {
                        row: e,
                        key: e.getId()
                    })),
                    utilTrans: e.utilTrans
                }));
                var n
            }
            class tr extends r.Component {
                render() {
                    const e = this.props.page.getSportId(),
                        t = {
                            utilTrans: this.props.utilTrans,
                            headers: this.props.headers,
                            rows: this.props.rows
                        };
                    if (e == _n.a.TENNIS) return r.createElement(ka, Object.assign({
                        live: this.props.live
                    }, t));
                    if (e == _n.a.BADMINTON) return r.createElement(Ua, Object.assign({}, t));
                    if (e == _n.a.GOLF) {
                        const e = this.props.rows[0];
                        if (e) {
                            if (e.getAveragePoints()) return r.createElement(za, Object.assign({}, t));
                            if (e.getPrizeMoney()) return r.createElement(Qa, Object.assign({}, t))
                        }
                        return r.createElement(Ja, Object.assign({}, t))
                    }
                    return e == _n.a.SNOOKER || e == _n.a.DARTS ? r.createElement(Wa, Object.assign({}, t)) : e == _n.a.WINTER_SPORTS ? r.createElement(Xa, Object.assign({}, t)) : e == _n.a.MOTORSPORT ? r.createElement("div", null, r.createElement(Va, Object.assign({}, t)), r.createElement(er, Object.assign({}, t))) : null
                }
            }
            class nr extends r.Component {
                constructor(e) {
                    super(e), this.STORAGE_KEY_LIVE = "ranking-live", this.TTL = 7776e3, this.PAGE_NUMBER_ALL = 0, this.PAGE_NUMBER_FIRST = 1, this.PAGE_NUMBER_OTHER = 2, this.RANK_ITEMS_PER_PAGE = 100, this._handlerOnClickLive = e => {
                        var t;
                        this._clientStorage.store(this.STORAGE_KEY_LIVE, e ? "1" : "0", this.TTL), this.setState({
                            inputName: ""
                        }), this._getRows(e, !1), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "ranking-live-" + (e ? "on" : "off"))
                    }, this._handlerOnChangeInputName = e => {
                        this.setState({
                            inputName: e
                        }), this._getRows(this.state.inputLive, !0)
                    }, this._handlerOnChangeInputCountry = e => {
                        this.setState({
                            inputCountry: e,
                            showAll: !!e
                        })
                    }, this._handlerOnClickInputCountry = () => {
                        this._getRows(this.state.inputLive, !0)
                    }, this._handlerOnChangeInputTeam = e => {
                        this.setState({
                            inputTeam: e,
                            showAll: !!e
                        })
                    }, this._handlerOnClickInputTeam = () => {
                        this._getRows(this.state.inputLive, !0)
                    }, this._handlerOnClickShowMore = () => {
                        this.setState(e => ({
                            showAll: !0
                        })), this._getRows(this.state.inputLive, !0, !0)
                    }, this._utilTrans = this.props.utilFactory.createTrans(), this._utilString = this.props.utilFactory.createString(), this._clientStorage = this.props.utilFactory.createClientStorage(), this._config = this.props.utilFactory.createConfig(), this._utilEnviroment = this.props.utilFactory.createEnviroment(), this.state = {
                        headers: [],
                        rows: [],
                        inputLive: "1" == this._clientStorage.get(this.STORAGE_KEY_LIVE) && this.props.page.getSportId() == _n.a.TENNIS,
                        inputName: "",
                        inputCountry: 0,
                        inputTeam: "",
                        showAll: !1,
                        loadingAll: !1,
                        loadedFirst: !1,
                        loadedAll: !1
                    }
                }
                componentDidMount() {
                    this._getRows(this.state.inputLive, !1)
                }
                _setLoadingState(e) {
                    this.props.reactCalls.loadingState("ranking", e)
                }
                _getRows(e, t, n = !1) {
                    t && (this.state.loadingAll || this.state.loadedAll) || (this.setState({
                        loadingAll: t
                    }), this.props.utilFactory.createDicProxy().onReady(() => {
                        const n = this.props.page.getPageTypeSpecific();
                        let a = t ? this.PAGE_NUMBER_OTHER : this.PAGE_NUMBER_FIRST;
                        this.state.inputCountry && (a = this.PAGE_NUMBER_ALL), this._setLoadingState(!0), n.getRows(e, a, t => {
                            a == this.PAGE_NUMBER_FIRST || a == this.PAGE_NUMBER_ALL ? this._container = t : this._container.addRows(t.getRows());
                            const n = this._container.getRows();
                            this.setState(t => ({
                                headers: this._container.getHeaders(),
                                rows: n.filter(e => e.getParticipants().length > 0),
                                inputLive: e,
                                loadedFirst: !0,
                                loadedAll: a == this.PAGE_NUMBER_OTHER || a == this.PAGE_NUMBER_ALL
                            })), this._setLoadingState(!1)
                        })
                    }))
                }
                getFilteredRows(e, t, n) {
                    return this._container.resetFilters(), this._container.addRowFilter(new Ra(e, this._utilString)), this._container.addRowFilter(new Oa(t)), this._container.addRowFilter(new Da(n)), this._container.getFilteredRows()
                }
                _getTabIndex() {
                    return this._container.getTabs().findIndex(e => e.isSelected())
                }
                _getTabs() {
                    return this._container.getTabs().map((e, t) => r.createElement(o, {
                        tabTitle: r.createElement(Jt, {
                            tabTitle: e.getName()
                        }),
                        tabIndex: t,
                        handlerOnClick: t => (this._setLoadingState(!0), location.href = e.getUrl(), !0),
                        href: e.getUrl(),
                        isActive: e.isSelected(),
                        key: e.getId()
                    }))
                }
                _getCountries() {
                    const e = [];
                    e.push({
                        id: 0,
                        name: "- " + this._utilTrans.translate("TRANS_RANKINGS_NATIONALITY_SEARCH") + " -"
                    });
                    const t = {};
                    this._container.getRows().forEach(e => {
                        e.getParticipants().forEach(e => {
                            t[e.getCountryId()] = e.getCountryName()
                        })
                    });
                    for (const n in t) e.push({
                        id: parseInt(n),
                        name: t[n]
                    });
                    return e.sort((e, t) => this._utilString.compare(e.name, t.name)), e
                }
                _getTeams() {
                    const e = [];
                    e.push({
                        id: "",
                        name: "- " + this._utilTrans.translate("TRANS_MOTORSPORT_RANKINGS_TEAM") + " -"
                    });
                    const t = {};
                    this._container.getRows().forEach(e => {
                        e.getParticipants().forEach(e => {
                            e.getTeamId() && (t[e.getTeamId()] = e.getTeamName())
                        })
                    });
                    for (const n in t) e.push({
                        id: n,
                        name: t[n]
                    });
                    return e.sort((e, t) => this._utilString.compare(e.name, t.name)), e
                }
                render() {
                    if (!this.state.loadedFirst) return null;
                    const e = this.getFilteredRows(this.state.inputName, this.state.inputCountry, this.state.inputTeam),
                        t = !(this.state.showAll && this.state.loadedAll) && e.length >= this.RANK_ITEMS_PER_PAGE;
                    return r.createElement("div", {
                        className: "rankingTable"
                    }, r.createElement(Aa, {
                        activeTabIndex: this._getTabIndex()
                    }, this._getTabs()), r.createElement(Na, {
                        utilTrans: this._utilTrans,
                        showInputLive: this.props.page.getSportId() == _n.a.TENNIS,
                        inputCountries: this._getCountries(),
                        inputTeams: this._getTeams(),
                        handlerOnClickLive: this._handlerOnClickLive,
                        handlerOnChangeInputName: this._handlerOnChangeInputName,
                        handlerOnClickInputCountry: this._handlerOnClickInputCountry,
                        handlerOnChangeInputCountry: this._handlerOnChangeInputCountry,
                        handlerOnClickInputTeam: this._handlerOnClickInputTeam,
                        handlerOnChangeInputTeam: this._handlerOnChangeInputTeam,
                        inputName: this.state.inputName,
                        inputCountry: this.state.inputCountry,
                        inputTeam: this.state.inputTeam,
                        inputLive: this.state.inputLive
                    }), r.createElement(tr, {
                        utilTrans: this._utilTrans,
                        page: this.props.page,
                        live: this.state.inputLive,
                        headers: this.state.headers,
                        rows: this.state.showAll ? e : e.slice(0, this.RANK_ITEMS_PER_PAGE)
                    }), t && r.createElement("div", {
                        className: "rankingTable__row rankingTable__row--more"
                    }, r.createElement("a", {
                        onClick: this._handlerOnClickShowMore
                    }, this._utilTrans.translate("TRANS_SHOW_MORE"))))
                }
            }! function(e) {
                e.FS = "_fs", e.ASS = "_ass", e.IN = "_in", e.SCOREBOARD = "_scoreboard", e.SS = "_ss", e.PORTABLE = "_portable", e.MOBI = "_mobi", e.SPORTIGO = "_fsport"
            }(da || (da = {}));
            class ar extends r.Component {
                constructor(e) {
                    super(e), this.dayChange = () => {}, this.reloadMyGamesTab = () => {}, this.activeTab = 0, this.showAllEventsForLeague = {}, this._onShowAllEventsChange = this._onShowAllEventsChange.bind(this), this._listingTemplateResolver = new ia(e.utilFactory);
                    const t = this.props.fsLiveTable.getTabFactory();
                    this.allTabHandler = t.getTabAll().getHandlerOnClick(), this.liveTabHandler = t.getTabLive().getHandlerOnClick(), this.finishedTabHandler = t.getTabFinished().getHandlerOnClick(), this.scheduledTabHandler = t.getTabScheduled().getHandlerOnClick(), this.myGamesTabHandler = t.getTabMyGames().getHandlerOnClick(), this.oddsTabHandler = t.getTabOdds().getHandlerOnClick(), this.tvTabHandler = t.getTabTv().getHandlerOnClick(), this.allCountryTabHandler = t.getTabCountryAll().getHandlerOnClick(), this.scheduledCountryTabHandler = t.getTabCountryScheduled().getHandlerOnClick()
                }
                _onShowAllEventsChange(e, t) {
                    this.showAllEventsForLeague = Object.assign(Object.assign({}, this.showAllEventsForLeague), {
                        [e]: t
                    })
                }
                displayTabOdds() {
                    return this.props.fsLiveTable.getTabFactory().getTabOdds().isEnabled() ? r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabOdds()
                        }),
                        tabIndex: 3,
                        handlerOnClick: e => (this.props.fsLiveTable.resetHighlighter(), this.oddsTabHandler(e))
                    }, r.createElement(Zt, {
                        fsLiveTable: this.props.fsLiveTable,
                        sportDetails: this.props.sportDetails,
                        reloadTabContent: this.props.reloadTabContent,
                        reactCalls: this.props.reactCalls,
                        forceRedrawTabContent: this.props.forceRedrawTabContent,
                        reloadNoMatch: this.props.reloadNoMatch,
                        onShowAllEventsChange: this._onShowAllEventsChange,
                        showAllEventsForLeague: this.showAllEventsForLeague,
                        pageType: this.props.pageType,
                        pageTab: this.props.pageTab,
                        tabIndex: 0,
                        category: _.a.TAB_ID_ALL,
                        listingTemplateResolver: this._listingTemplateResolver
                    })) : r.createElement(r.Fragment, null)
                }
                displayStaticTabs(e) {
                    const t = {
                        pageType: this.props.pageType,
                        pageTab: this.props.pageTab,
                        fsLiveTable: this.props.fsLiveTable,
                        sportDetails: this.props.sportDetails,
                        reloadStaticContent: this.props.reloadStaticContent,
                        devices: this.props.devices,
                        tabId: e,
                        teamPageProvider: this.props.teamPageProvider,
                        isFullFeedLoaded: this.props.isFullFeedLoaded,
                        utilFactory: this.props.utilFactory
                    };
                    return r.createElement(Dn, Object.assign({}, t, {
                        key: e + "-" + Date.now()
                    }))
                }
                getLeaguesForTab(e, t = !0, n) {
                    if (e != window.category) return null;
                    const i = [ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_SERIES, ce.PAGE_TYPE_TEAM, ce.PAGE_TYPE_PLAYER],
                        s = {
                            fsLiveTable: this.props.fsLiveTable,
                            sportDetails: this.props.sportDetails,
                            reloadTabContent: this.props.reloadTabContent,
                            forceRedrawTabContent: this.props.forceRedrawTabContent,
                            reloadNoMatchCall: this.props.reactCalls.reloadNoMatch,
                            reloadNoMatch: this.props.reloadNoMatch,
                            reactCalls: this.props.reactCalls,
                            onShowAllEventsChange: this._onShowAllEventsChange,
                            showAllEventsForLeague: this.showAllEventsForLeague,
                            tabIndex: e,
                            category: n || e,
                            expandCollapseLeagueDisabled: i.includes(this.props.pageType),
                            pageType: this.props.pageType,
                            pageTab: this.props.pageTab
                        },
                        l = ["event"];
                    return this.props.fsLiveTable.isMixedPage() && l.push("event--topScores"), t || l.push("event--live"), this.props.devices == a.MOBILE && l.push("mobile"), this.props.pageTab && l.push("event--" + this.props.pageTab), r.createElement("div", {
                        className: l.join(" ")
                    }, this._listingTemplateResolver.resolve(s))
                }
                onClickHandler(e) {
                    this.activeTab = e, this.props.setActiveTab(e)
                }
                componentDidMount() {
                    this.props.reactCalls.setCalendarDate = e => {
                        this.daySetter(e)
                    }, this.props.reactCalls.reloadDay = e => {
                        this.daySetter(e, !1, !0)
                    }, this.props.reactCalls.reloadOnDayChange = () => {
                        this.dayChange()
                    }, this.props.reactCalls.reloadMyGamesTabCounter = () => {
                        this.reloadMyGamesTab()
                    };
                    const e = this.props.utilFactory.createEnviroment(),
                        t = e.getMyLeaguesObject(),
                        n = e.getMyTeamsObject(),
                        a = e.getJquery();
                    new Ln(e, t, n, a).run()
                }
                _getCategoryPageTabs() {
                    if (!this.props.isFullFeedLoaded) return [];
                    const e = this.props.fsLiveTable.isCountryPage(),
                        t = [];
                    return t.push(r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabCountryAll()
                        }),
                        tabIndex: 0,
                        key: _.a.TAB_ID_COUNTRY_ALL,
                        handlerOnClick: t => !e || this.allCountryTabHandler(t)
                    }, this.getLeaguesForTab(0, !0, 6))), e && t.push(r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabCountryScheduled()
                        }),
                        tabIndex: 1,
                        key: _.a.TAB_ID_COUNTRY_SCHEDULED,
                        handlerOnClick: e => this.scheduledCountryTabHandler(e)
                    }, this.getLeaguesForTab(1, !0, 7))), t
                }
                render() {
                    const e = this.props.pageType === ce.PAGE_TYPE_TOURNAMENT,
                        t = this.props.utilFactory.createUtilPage().isParticipantPage(),
                        n = (e || t) && this.props.pageTab === Le.BLOCK_TYPE_SUMMARY;
                    if (this.props.pageType == ce.PAGE_TYPE_TEAM && this.props.teamPageProvider.getPageTab() == Le.BLOCK_TYPE_TRANSFERS) return r.createElement(Hn, {
                        teamPageProvider: this.props.teamPageProvider
                    });
                    if (t && this.props.teamPageProvider.getPageTab() == Le.BLOCK_TYPE_NEWS) return r.createElement(Xn, {
                        teamPageProvider: this.props.teamPageProvider
                    });
                    const a = _.a.TAB_ID_ALL;
                    if (pa.isRanking(this.props.page)) return r.createElement(nr, {
                        reactCalls: this.props.reactCalls,
                        utilFactory: this.props.utilFactory,
                        page: this.props.page
                    });
                    if (e || t) {
                        const e = !(this.props.pageType === ce.PAGE_TYPE_PLAYER && !this.props.sportDetails.isDuel) || this.props.sportDetails.sportId === _n.a.GOLF;
                        return r.createElement(r.Fragment, null, this.props.isFullFeedLoaded && n && e ? this.getLeaguesForTab(a, !1) : null, this.displayStaticTabs(a))
                    }
                    if (this.props.pageType == ce.PAGE_TYPE_CATEGORY) return r.createElement(l, {
                        onClickCallback: this.onClickHandler.bind(this),
                        renderSingleTab: !0
                    }, this._getCategoryPageTabs());
                    if (this.props.pageType == ce.PAGE_TYPE_SERIES) {
                        const e = this.props.pageTab === Le.BLOCK_TYPE_SUMMARY;
                        return r.createElement(r.Fragment, null, this.props.isFullFeedLoaded && e ? this.getLeaguesForTab(a, !1) : null, this.displayStaticTabs(a))
                    }
                    if (!this.props.isFullFeedLoaded) return !1;
                    const i = this.props.calendarDisabledTabIndexes.includes(this.activeTab);
                    return r.createElement(l, {
                        onClickCallback: this.onClickHandler.bind(this),
                        calendar: r.createElement(jt, {
                            calendar: this.props.fsLiveTable.getCalendar(),
                            enabled: !this.props.calendarDisabledTabIndexes.includes(this.activeTab),
                            daySetterCallback: e => this.daySetter = e,
                            dayChangeCallback: e => this.dayChange = e
                        }),
                        sound: i ? r.createElement(Ia, {
                            soundIcon: this.props.fsLiveTable.getSound()
                        }) : void 0,
                        notifications: sa.render({
                            title: this.props.notificationsProvider.getTabTitle(),
                            handlerOnClick: this.props.notificationsProvider.getHandlerOnClick(),
                            handlerOnMouseEnter: () => !1,
                            handlerOnMouseLeave: () => !1,
                            enabled: this.props.notificationsProvider.isEnabled(this.props.devices) && this.props.notificationsSettingsTabIndexes.includes(this.activeTab)
                        })
                    }, r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabAll()
                        }),
                        tabIndex: 0,
                        handlerOnClick: e => this.allTabHandler(e)
                    }, this.getLeaguesForTab(_.a.TAB_ID_ALL)), r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabLive()
                        }),
                        tabIndex: 1,
                        handlerOnClick: e => (this.daySetter(0), this.liveTabHandler(e))
                    }, this.getLeaguesForTab(_.a.TAB_ID_LIVE)), r.createElement(o, {
                        tabTitle: r.createElement(Yn, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabMyGames(),
                            onMyGamesCountChangeCallback: e => this.reloadMyGamesTab = e
                        }),
                        tabIndex: 2,
                        handlerOnClick: e => (this.daySetter(0, !0), this.props.fsLiveTable.resetHighlighter(), this.myGamesTabHandler(e))
                    }, r.createElement(rt.Provider, {
                        value: {
                            isSingleSport: this.props.utilFactory.createConfig().get("app", "project_type", "name") == da.ASS
                        }
                    }, r.createElement(Vt, {
                        fsLiveTable: this.props.fsLiveTable,
                        reloadTabContent: this.props.reloadTabContent,
                        devices: this.props.devices,
                        reactCalls: this.props.reactCalls,
                        forceRedrawTabContent: this.props.forceRedrawTabContent,
                        reloadNoMatch: this.props.reloadNoMatch,
                        tabID: _.a.TAB_ID_MYGAMES,
                        onShowAllEventsChange: this._onShowAllEventsChange,
                        showAllEventsForLeague: this.showAllEventsForLeague,
                        utilFactory: this.props.utilFactory,
                        sportDetails: this.props.sportDetails,
                        pageType: this.props.pageType
                    }))), this.displayTabOdds(), r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabFinished()
                        }),
                        tabIndex: 4,
                        handlerOnClick: e => this.finishedTabHandler(e)
                    }, this.getLeaguesForTab(_.a.TAB_ID_FINISHED, !0, 2)), r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabScheduled()
                        }),
                        tabIndex: 5,
                        handlerOnClick: e => this.scheduledTabHandler(e)
                    }, this.getLeaguesForTab(_.a.TAB_ID_SCHEDULED, !0, 3)), r.createElement(o, {
                        tabTitle: r.createElement($t, {
                            tab: this.props.fsLiveTable.getTabFactory().getTabTv()
                        }),
                        tabIndex: 6,
                        isEnabled: this.props.fsLiveTable.getTabFactory().getTabTv().isEnabled(),
                        handlerOnClick: e => this.tvTabHandler(e)
                    }, this.getLeaguesForTab(_.a.TAB_ID_TV)))
                }
            }
            class rr {
                run() {
                    window.display_banners()
                }
            }
            class ir {
                run() {
                    window.push_init()
                }
            }
            class sr {
                constructor() {
                    this._callbacks = []
                }
                addCallback(e) {
                    return this._callbacks.push(e), this
                }
                build() {
                    return new lr(this._callbacks)
                }
            }
            class lr {
                constructor(e) {
                    this._callbacks = [], this._callbacks = e
                }
                run() {
                    this._callbacks.forEach(e => {
                        e.run()
                    })
                }
                isEmpty() {
                    return 0 == this._callbacks.length
                }
            }
            class or extends r.Component {
                constructor(e) {
                    super(e), this.state = {
                        displayLoading: e.loadingController.shouldDisplayLoading()
                    }
                }
                componentDidMount() {
                    this.setState({
                        displayLoading: this.props.loadingController.shouldDisplayLoading()
                    })
                }
                render() {
                    return document.body.classList.toggle("loading", this.props.loadingController.shouldDisplayLoading()), r.createElement("span", {
                        className: "loadingOverlay"
                    }, r.createElement("div", {
                        className: "loadingAnimation"
                    }, r.createElement("div", {
                        className: "loadingAnimation__text"
                    }, "Loading...")))
                }
            }
            const cr = e => r.createElement("div", {
                    className: "sk"
                }, r.createElement("div", {
                    className: "sk__h"
                }), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__h"
                }), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__h"
                }), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__b"
                }, r.createElement("div", {
                    className: "sk__h"
                }), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__h"
                }), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)), r.createElement("div", {
                    className: "sk__r sk__r--a"
                }, r.createElement("div", null), r.createElement("div", null), r.createElement("div", null), r.createElement("div", null)))),
                gr = i.a.lazy(() => n.e(60).then(n.bind(null, 562)));
            class _r extends i.a.Component {
                render() {
                    const e = [];
                    for (const t of this.props.events) e.push(i.a.createElement(gr, {
                        fsLiveTable: this.props.fsLiveTable,
                        utilFactory: this.props.utilFactory,
                        event: t,
                        key: t.getEventId()
                    }));
                    return i.a.createElement(r.Fragment, null, i.a.createElement("div", {
                        className: "oddsZone__group"
                    }, i.a.createElement(r.Suspense, {
                        fallback: i.a.createElement("div", {
                            className: "menu_loading"
                        })
                    }, e)))
                }
            }
            var hr = n(266);
            class Er {
                constructor(e, t) {
                    this._fsLiveTable = e, this._utilFactory = t
                }
                run() {
                    const e = document.getElementById("right-zone-bookmakers");
                    if (e) {
                        const t = this._getEventsFromElement(e);
                        s.render(r.createElement(_r, {
                            fsLiveTable: this._fsLiveTable,
                            utilFactory: this._utilFactory,
                            events: t
                        }), e)
                    }
                }
                _getEventsFromElement(e) {
                    const t = [];
                    return Array.from(e.children).forEach(e => {
                        t.push((new hr.a).setEventId(e.getAttribute("data-event-id")).setStartTime(parseInt(e.getAttribute("data-start-time"))).setHomeParticipantName(e.getAttribute("data-home-name")).setAwayParticipantName(e.getAttribute("data-away-name")).setHomeImagePath(e.getAttribute("data-home-img")).setAwayImagePath(e.getAttribute("data-away-img")).build())
                    }), t
                }
            }

            function dr({
                title: e,
                handlerOnClose: t
            }) {
                return r.createElement("div", {
                    className: "notificationsDialog__title"
                }, r.createElement("div", {
                    className: "notificationsDialog__titleHeading"
                }, e), r.createElement("div", {
                    className: "notificationsDialog__titleIcon",
                    onClick: e => t(e)
                }))
            }
            class Tr extends r.Component {
                constructor(e) {
                    super(e), this.toggleEnabled = e => {
                        this.props.onEnabledChangeHandler(e), this.props.isEnabledHandler().then(e => {
                            this.setState({
                                isEnabled: e
                            })
                        })
                    }, this.state = {
                        isEnabled: !1
                    }, this.props.isEnabledHandler().then(e => {
                        this.setState({
                            isEnabled: e
                        })
                    })
                }
                render() {
                    const {
                        onTitle: e,
                        offTitle: t,
                        onEnabledChangeHandler: n
                    } = this.props, {
                        isEnabled: a
                    } = this.state, i = ["alert", "alert--notificationsStatus"];
                    let s = e;
                    return a || (s = t, i.push("alert--notificationsStatus--off")), r.createElement("div", {
                        className: i.join(" ")
                    }, r.createElement("div", {
                        className: "alert__icon"
                    }), r.createElement("div", {
                        className: "alert__text"
                    }, s), r.createElement("input", {
                        className: "alert__checkBox toggleButton",
                        type: "checkbox",
                        onChange: e => this.toggleEnabled(e),
                        checked: a
                    }))
                }
            }

            function ur({
                id: e,
                optionId: t,
                sportId: n,
                title: a,
                isChecked: i,
                onChangeHandler: s
            }) {
                return r.createElement("label", {
                    htmlFor: e,
                    className: "notificationsDialog__option"
                }, a, r.createElement("input", {
                    className: "toggleButton",
                    type: "checkbox",
                    name: t,
                    id: t,
                    defaultChecked: i,
                    onChange: t => s(e, n, t)
                }))
            }

            function Sr({
                sportId: e,
                options: t,
                currentSettings: n,
                onChangeHandler: a,
                trans: i
            }) {
                const s = [];
                for (const i of t) {
                    const t = "" + i.notificationType,
                        l = `sport_${e};${i.notificationType}`,
                        o = !!n.find(e => e == l);
                    s.push(r.createElement(ur, {
                        key: l,
                        id: t,
                        optionId: l,
                        sportId: e,
                        isChecked: o,
                        title: i.translation,
                        onChangeHandler: a
                    }))
                }
                return r.createElement("div", {
                    className: "notificationsDialog__options"
                }, s)
            }
            class mr extends r.Component {
                constructor(e) {
                    super(e), this._defaultState = {
                        isExpanded: !1
                    }, this.toggleExpanded = () => {
                        this.setState(e => ({
                            isExpanded: !e.isExpanded
                        }))
                    }, this.state = this._defaultState
                }
                render() {
                    const {
                        sportId: e,
                        title: t,
                        icon: n,
                        options: a,
                        currentSettings: i,
                        onChangeHandler: s,
                        trans: l
                    } = this.props, {
                        isExpanded: o
                    } = this.state, c = ["notificationsDialog__sport"];
                    o && c.push("isExpanded");
                    const g = ["sportIcon", "sportIcon--" + n];
                    return r.createElement("div", {
                        className: c.join(" ")
                    }, r.createElement("div", {
                        className: "notificationsDialog__header",
                        onClick: this.toggleExpanded
                    }, r.createElement("div", {
                        className: g.join(" ")
                    }), r.createElement("div", {
                        className: "notificationsDialog__sportName"
                    }, t), r.createElement("div", {
                        className: "notificationsDialog__arrow"
                    })), r.createElement(Sr, {
                        options: a,
                        sportId: e,
                        currentSettings: i,
                        onChangeHandler: s,
                        trans: l
                    }))
                }
            }
            class vr extends r.Component {
                constructor(e) {
                    super(e), this._defaultState = {
                        showDialog: !1,
                        sports: [],
                        currentSettings: []
                    }, this.hideDialog = () => {
                        this.setState(this._defaultState)
                    }, this.state = this._defaultState, this.props.window.addEventListener("ShowNotificationSettingsDialog", () => {
                        this.props.window.scrollTo({
                            top: 0,
                            behavior: "smooth"
                        }), this.props.notifications.getCurrentSettings().then(e => {
                            this.setState({
                                showDialog: !0,
                                sports: this.props.notifications.getSports(),
                                currentSettings: e
                            })
                        })
                    }), this.props.window.addEventListener("HideNotificationSettingsDialog", () => {
                        this.props.window.scrollTo({
                            top: 0,
                            behavior: "smooth"
                        }), this.props.notifications.getCurrentSettings().then(e => {
                            this.setState({
                                showDialog: !1
                            })
                        })
                    })
                }
                _getSportsComponents(e, t) {
                    const n = [],
                        a = [],
                        i = [],
                        s = [];
                    let l = [];
                    const {
                        notifications: o
                    } = this.props;
                    for (let i = 0; i < e.length; i++) e[i].majorMenuItem ? n.push(r.createElement(mr, {
                        key: e[i].id,
                        sportId: e[i].id,
                        title: e[i].title,
                        icon: e[i].icon,
                        options: e[i].options,
                        currentSettings: t,
                        onChangeHandler: (e, t, n) => this.props.notifications.onChangeHandler(e, t, n),
                        trans: o.getTurnOnAllNotificationsTitle()
                    })) : a.push(r.createElement(mr, {
                        key: e[i].id,
                        sportId: e[i].id,
                        title: e[i].title,
                        icon: e[i].icon,
                        options: e[i].options,
                        currentSettings: t,
                        onChangeHandler: (e, t, n) => this.props.notifications.onChangeHandler(e, t, n),
                        trans: o.getTurnOnAllNotificationsTitle()
                    }));
                    return i.push(r.createElement("div", {
                        className: "notificationsSports"
                    }, n)), s.push(r.createElement("div", {
                        className: "notificationsSports"
                    }, a)), l = i.concat(s), l
                }
                render() {
                    const {
                        notifications: e
                    } = this.props, {
                        showDialog: t,
                        sports: n,
                        currentSettings: a
                    } = this.state, i = ["notificationsDialog", t ? "isVisible" : ""], s = [];
                    let l = [];
                    return t && (s.push(r.createElement(dr, {
                        key: "title",
                        title: e.getTitle(),
                        handlerOnClose: e.getHandlerOnClose()
                    })), s.push(r.createElement(Tr, {
                        key: "switcher",
                        isEnabledHandler: e.getIsTokenEnabledHandler(),
                        onEnabledChangeHandler: e => this.props.notifications.onEnabledChangeHandler(e),
                        onTitle: e.getSwitcherOnTitle(),
                        offTitle: e.getSwitcherOffTitle()
                    })), l = this._getSportsComponents(n, a)), r.createElement("div", {
                        className: i.join(" ")
                    }, r.createElement("span", {
                        className: "notificationContainer"
                    }, r.createElement("div", {
                        className: "notificationsDialog__container"
                    }, s), r.createElement("div", {
                        className: "notificationsDialog__sportContainer"
                    }, l)))
                }
            }
            var pr = n(236);
            const Ir = r.lazy(() => n.e(88).then(n.bind(null, 552)));
            class Ar extends r.Component {
                constructor(e) {
                    super(e), this._reloadDraw = (e, t, n) => {
                        const a = this.props.page.getPageTypeSpecific();
                        this.props.utilFactory.createDicProxy().onReady(() => {
                            a.getRounds(e, t, n, e => {
                                this.setState(t => ({
                                    firstDataLoaded: !0,
                                    draw: e
                                })), this.forceUpdate()
                            })
                        })
                    }, this.state = {
                        firstDataLoaded: !1,
                        draw: new Ta.DrawModelImpl([], [], [], [], [], [], "", "", "")
                    }
                }
                componentDidMount() {
                    this.props.reloadDraw.draw = this._reloadDraw
                }
                componentWillUnmount() {
                    this.props.reloadDraw.draw = () => {}
                }
                render() {
                    if (!pa.isDraw(this.props.page)) return null;
                    if (!this.state.firstDataLoaded) return r.createElement(pr.a, null);
                    const e = this.props.utilFactory.createTrans();
                    return r.createElement(r.Suspense, {
                        fallback: r.createElement(pr.a, null)
                    }, r.createElement(Ir, {
                        sportDetails: this.props.sportDetails,
                        getUpcomingDrawStartTimeFormatter: this.props.fsLiveTable.getUpcomingDrawStartTimeFormatter,
                        draw: this.state.draw,
                        detailOpenerWithEventId: (e, t) => this.props.utilFactory.createEnviroment().detailOpenWithEventId(e, t),
                        participantEncodedId: this.props.page.getPageTypeSpecific().getParticipantEncodedId(),
                        transClickForListOfMatches: e.translate("TRANS_CLICK_FOR_LIST_OF_MATCHES") || "",
                        transClickForMatchDetail: e.translate("TRANS_CLICK_FOR_MATCH_DETAIL") || "",
                        isSwappedParticipants: this.props.page.getPageTypeSpecific().isSwappedParticipants(),
                        transSwapTeam: e.translate("TRANS_SWAP_TEAM_AT_IFRAME") || "",
                        transStagePrevious: e.translate("TRANS_STAGE_PREVIOUS") || "",
                        transStageNext: e.translate("TRANS_STAGE_NEXT") || "",
                        device: this.props.device
                    }))
                }
            }
            class Nr {
                constructor(e, t, n, a, r, i, s) {
                    this._fsLiveTable = e, this._utilFactory = t, this._page = n, this._sportDetails = a, this._reactCalls = r, this._reloadDraw = i, this._device = s
                }
                run() {
                    const e = document.getElementById("glib-stats-data");
                    e && pa.isDraw(this._page) && s.render(r.createElement(Ar, {
                        reactCalls: this._reactCalls,
                        utilFactory: this._utilFactory,
                        page: this._page,
                        sportDetails: this._sportDetails,
                        reloadDraw: this._reloadDraw,
                        fsLiveTable: this._fsLiveTable,
                        device: this._device
                    }), e)
                }
            }
            class Rr extends r.Component {
                constructor(e) {
                    super(e), this._reloadTabContent = {}, this._forceRedrawTabContent = {}, this._reloadNoMatch = {}, this._reloadStaticContent = {}, this._reloadDraw = {}, this.state = {
                        device: this.deviceResolver(),
                        firstFullLoaded: !1,
                        activeTab: 0
                    }, this._loadingComponent = r.createRef(), this._projectId = e.utilFactory.createConfig().get("app", "project", "id"), this._cssSerial = e.utilFactory.createConfig().get("css_serial"), this._tvEnabled = e.utilFactory.createConfig().get("app", "tv", "enabled"), e.reactCalls.fullFeedLoaded = () => {
                        this.props.loadingController.hideLoading("fullFeed"), this.setState({
                            firstFullLoaded: !0
                        }), this.props.fsLiveTable.resetHighlighter()
                    }, e.reactCalls.loadingState = (e, t) => {
                        t ? this.props.loadingController.showLoading(e) : this.props.loadingController.hideLoading(e), this._loadingComponent.current && this._loadingComponent.current.setState({
                            displayLoading: t
                        })
                    }, e.reactCalls.loadingStateReset = () => {
                        this.props.loadingController.reset()
                    }, e.reactCalls.reloadTabContent = e => {
                        void 0 !== this._reloadTabContent[e] && this._reloadTabContent[e]()
                    }, e.reactCalls.forceRedrawTabContent = (e, t) => {
                        void 0 !== this._forceRedrawTabContent[e] && this._forceRedrawTabContent[e](t)
                    }, e.reactCalls.reloadLeague = t => {
                        e.fsLiveTable.reloadLeague(t, this.props.pageTab)
                    }, e.reactCalls.reloadEvent = t => {
                        e.fsLiveTable.reloadEvent(t, this.props.pageTab)
                    }, e.reactCalls.reloadNoMatch = () => {
                        void 0 !== this._reloadNoMatch.noMatch && this._reloadNoMatch.noMatch()
                    }, e.reactCalls.reloadDraw = (e, t, n) => {
                        void 0 !== this._reloadDraw.draw && this._reloadDraw.draw(e, t, n)
                    }, e.reactCalls.reloadStaticContent = () => {
                        void 0 !== this._reloadStaticContent.static && this._reloadStaticContent.static()
                    }, this.updateDimension = this.updateDimension.bind(this), this.setActiveTab = this.setActiveTab.bind(this), this._firstFullLoadedCallback = (new sr).addCallback(new ir).addCallback(new rr).build();
                    const t = new sr;
                    this.state.device == a.DESKTOP && t.addCallback(new Er(this.props.fsLiveTable, this.props.utilFactory)), t.addCallback(new Nr(this.props.fsLiveTable, this.props.utilFactory, this.props.page, this.props.sportDetails, this.props.reactCalls, this._reloadDraw, this.state.device)), this._onReadyCallback = t.build()
                }
                deviceResolver() {
                    return this.props.utilFactory.createEnviroment().isResponsive() ? a.MOBILE : a.DESKTOP
                }
                updateDimension() {
                    const e = this.deviceResolver();
                    this.state.device !== e && this.setState({
                        device: e
                    })
                }
                setActiveTab(e) {
                    this.state.activeTab != e && this.setState({
                        activeTab: e
                    })
                }
                componentDidMount() {
                    window.addEventListener("resize", () => {
                        window.clearTimeout(this._resizeTimer), this._resizeTimer = window.setTimeout(() => {
                            this.updateDimension()
                        }, 50)
                    }), this._onReadyCallback.isEmpty() || this.props.utilFactory.createDicProxy().onReady(() => {
                        this._onReadyCallback.run()
                    })
                }
                componentWillUnmount() {
                    window.removeEventListener("resize", this.updateDimension)
                }
                shouldComponentUpdate(e, t) {
                    return !this.state.firstFullLoaded && t.firstFullLoaded && this._firstFullLoadedCallback.run(), !0
                }
                showLoading() {
                    return this.props.page.getPageType() === ce.PAGE_TYPE_DRAW && !this.props.page.getHasDraw() ? null : r.createElement(r.Fragment, null, r.createElement(or, {
                        ref: this._loadingComponent,
                        loadingController: this.props.loadingController
                    }), r.createElement(cr, {
                        tvEnabled: this._tvEnabled && this.props.sportDetails.isDuel
                    }))
                }
                render() {
                    return r.createElement(j.Provider, {
                        value: this.props.utilFactory.createConfig()
                    }, r.createElement(M.Provider, {
                        value: this.state.device
                    }, r.createElement(ar, {
                        fsLiveTable: this.props.fsLiveTable,
                        sportDetails: this.props.sportDetails,
                        isFullFeedLoaded: this.state.firstFullLoaded,
                        devices: this.state.device,
                        setActiveTab: this.setActiveTab,
                        reactCalls: this.props.reactCalls,
                        reloadTabContent: this._reloadTabContent,
                        calendarDisabledTabIndexes: [1, 2],
                        notificationsSettingsTabIndexes: [2],
                        forceRedrawTabContent: this._forceRedrawTabContent,
                        reloadNoMatch: this._reloadNoMatch,
                        utilFactory: this.props.utilFactory,
                        reloadStaticContent: this._reloadStaticContent,
                        pageType: this.props.pageType,
                        pageTab: this.props.pageTab,
                        teamPageProvider: this.props.teamPageProvider,
                        notificationsProvider: this.props.notificationsProvider,
                        page: this.props.page
                    }), r.createElement(vr, {
                        window: window,
                        notifications: this.props.notificationsProvider
                    }), this.showLoading()))
                }
            }
            class Or {
                constructor(e) {
                    this._utilTrans = e
                }
                getShowMoreText() {
                    return this._utilTrans.translate("TRANS_SHOW_MORE")
                }
                getCollapseLeagueIframeText() {
                    return this._utilTrans.translate("TRANS_COLLAPSE_LEAGUE_IFRAME")
                }
                getExpandLeagueIframeText() {
                    return this._utilTrans.translate("TRANS_EXPAND_LEAGUE_IFRAME")
                }
                getExpandLeagueLinkIframeText() {
                    return this._utilTrans.translate("TRANS_EXPAND_LEAGUE_LINK_IFRAME")
                }
                getStatsTitle(e, t, n) {
                    let a = "";
                    return e ? a = "TRANS_STANDINGS_LIVE_TABLE" : t ? a = "TRANS_STANDINGS_TABLE" : n && (a = "TRANS_STANDINGS_DRAW"), this._utilTrans.translate(a)
                }
            }
            class Dr {
                constructor(e, t, n, a) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._myLeagues = a, this._key = this._myLeagues.getToggleIconKey(this._data.getId())
                }
                isEnabled() {
                    return this._myLeagues.isEditable()
                }
                getClass() {
                    return this._myLeagues.getToggleIconClass(this._data.getId(), this._key)
                }
                getTitle() {
                    return this._myLeagues.getToggleIconTitle(this._data.getId())
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), this._utilEnviroment.getTooltipObject().hide_all(), this._myLeagues.toggleTop(this._key, e, !0), !0)
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class Cr {
                constructor(e, t, n, a, r, i) {
                    this._eventIds = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a, this._myGames = r, this._isNoDuelTournament = i
                }
                isEnabled() {
                    for (const e in this._eventIds)
                        if (this._myGames.canBeGameAdded(this._eventIds[e])) return !0;
                    return !1
                }
                isChecked() {
                    for (const e in this._eventIds) {
                        const t = this._eventIds[e];
                        if (this._myGames.check(t) || this._myGames.isGameFromTournament(t)) return !0
                    }
                    return !1
                }
                getTitle() {
                    let e = "";
                    const t = Object.keys(this._myGames.getGamesGroups(this._eventIds)).filter(e => "0" !== e).length;
                    return e = this._isNoDuelTournament ? this.isChecked() ? t ? "TRANS_MY_GAMES_REMOVE_FROM_GROUP" : "TRANS_MY_GAMES_REMOVE_EVENT" : "TRANS_MY_GAMES_ADD_EVENT" : this.isChecked() ? t ? "TRANS_MY_GAMES_REMOVE_FROM_GROUP" : "TRANS_MY_GAMES_REMOVE_ALL" : "TRANS_MY_GAMES_ADD_ALL", this._utilTrans.translate(e)
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return e.stopPropagation(), this._utilEnviroment.getTooltipObject().hide_all(), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "my-games-league"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            var yr;
            ! function(e) {
                e.APP = "app", e.NODUEL_EVENTS = "noduel_events", e.MAIN = "main", e.TOURNAMENT_PAGE = "tournament_page", e.CATHEGORIES = "categories", e.DEFAULT = "default"
            }(yr || (yr = {}));
            class Hr {
                constructor(e, t, n, a, r, i, s) {
                    this._data = e, this._events = t, this._utilConfig = n.createConfig(), this._cjsConfig = n.createCjsConfig(), this._utilEnvironment = n.createEnviroment(), this._utilTrans = n.createTrans(), this._utilSport = n.createSport(), this._utilPage = n.createUtilPage(), this._clientStorage = n.createClientStorage(), this._headerCommonTexts = new Or(this._utilTrans), this._myLeagues = a.createMyLeagues(), this._myGames = r.createMyGames(), this.stageHeader = i, this.tournamentInfoText = s
                }
                getLeagueId() {
                    return this._data.getId()
                }
                getTitle() {
                    return this._data.getTitle()
                }
                _getTitlePart(e, t = this._data.getTitle()) {
                    const n = t,
                        a = n.indexOf(": "),
                        r = e ? n.substring(0, a) : n.substr(a + ": ".length);
                    return Object(un.a)(r)
                }
                getTitleCountryName() {
                    return this._getTitlePart(!0)
                }
                getTitleTournamentName() {
                    return this._getTitlePart(!1)
                }
                getTitleTournamentPartName() {
                    return this._getTitlePart(!0, this.getTitleTournamentName())
                }
                getTitleStageStartTime() {
                    return this.stageHeader.get()
                }
                getCountryId() {
                    return this._data.getCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getEvents() {
                    return this._events
                }
                getEventIds() {
                    return this._events.map(e => e.getEventId())
                }
                getEventCount() {
                    return this._data.getEventCount()
                }
                hasLiveTable() {
                    return this._data.hasLiveTable()
                }
                hasTable() {
                    return this._data.hasTable()
                }
                hasDraw() {
                    return this._data.hasDraw()
                }
                getStatsTitle() {
                    return this._headerCommonTexts.getStatsTitle(this.hasLiveTable(), this.hasTable(), this.hasDraw())
                }
                getStatsType() {
                    return this._data.getStatsType()
                }
                isRacingSport() {
                    return this._utilSport.isRacingSport(this._data.getSportId())
                }
                isMotorSport() {
                    return this._utilSport.isMotorSport(this._data.getSportId())
                }
                isStageSport() {
                    return this._utilSport.isStageSport(this._data.getSportId())
                }
                getRaceInfoTexts(e) {
                    return this.tournamentInfoText.getInfoTextItems({
                        pageType: e,
                        isNoDuelTournament: this._utilEnvironment.isNoDuelTournamentByLeagueId(this._data.getId() || ""),
                        sportId: this._data.getSportId() || 0,
                        categoryId: this._data.getCategoryId() || 0,
                        tournamentInfoText: this._data.getRaceInfoText() || "",
                        par: this._data.getPar() || "",
                        prizeMoney: this._data.getPrizeMoney() || "",
                        leagueId: this._data.getId() || "",
                        events: this._events
                    })
                }
                getHandlerOnClick() {
                    return () => (location.href = this._data.getUrl(), !0)
                }
                getHandlerHideTooltip() {
                    return e => (this._utilEnvironment.getTooltipObject().hide(e.target), !0)
                }
                getHandlerStatsOnClick() {
                    return e => {
                        var t;
                        return e.preventDefault(), this._utilEnvironment.statsOpen(this._data.getTournamentId(), this._data.getTournamentStageId(), this._data.getSportId(), this._data.getStatsType()), null === (t = this._utilEnvironment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "stats"), !0
                    }
                }
                getHandlerExpanderOnMouseEnter() {
                    return e => (this._utilEnvironment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                getHandlerExpanderOnMouseLeave() {
                    return e => (this._utilEnvironment.getTooltipObject().hide(e.target), !0)
                }
                handlerEventInfoLinkOnMouseEnter() {
                    return e => (this._utilEnvironment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                handlerEventInfoLinkOnMouseLeave() {
                    return e => (this._utilEnvironment.getTooltipObject().hide(e.target), !0)
                }
                getMyLeaguesIcon() {
                    return new Dr(this._data, this._utilConfig, this._utilEnvironment, this._myLeagues)
                }
                getAddLeagueToMyGamesIcon() {
                    return new Cr(this.getEventIds(), this._utilConfig, this._utilEnvironment, this._utilTrans, this._myGames, this.isNoDuelTournament())
                }
                getSportName() {
                    return this._data.getSportName()
                }
                getTranslatedSportName() {
                    return this._utilSport.getTranslatedName(this._data.getSportId())
                }
                getSportId() {
                    return this._data.getSportId()
                }
                isTop() {
                    return this._utilEnvironment.getMyLeaguesObject().isTop(this._data.getId())
                }
                isOpen() {
                    return this._data.isOpen()
                }
                setIsOpen(e) {
                    this._data.setValue("display", e)
                }
                isClosedByAdmin() {
                    return this._data.isClosed()
                }
                isDuel() {
                    return !this._utilEnvironment.isNoDuelSport(this._data.getSportId())
                }
                isNoDuelTournament() {
                    return this._utilEnvironment.isNoDuelTournament()(this._data.getId())
                }
                getClientStorage() {
                    return this._clientStorage
                }
                getHeaderCommonTexts() {
                    return this._headerCommonTexts
                }
                isSortByTime() {
                    return this._cjsConfig.sortByTime
                }
                isMygamesGroups() {
                    return this._cjsConfig.mygamesGroups
                }
                isCollapsible() {
                    return !this.isSortByTime() && !this.isMygamesGroups()
                }
                getVisibleEventsCount(e) {
                    return this.isCollapsible() && !this.isOpen() ? 0 : Math.min(this.getInitialVisibleEventsCount(e), this._events.length)
                }
                _getEventCountConfig(e) {
                    return this._utilConfig.get(yr.APP, yr.NODUEL_EVENTS, e)
                }
                getInitialVisibleEventsCount(e) {
                    let t = 40;
                    if (e === ce.PAGE_TYPE_TOURNAMENT && !this.isStageSport()) return this._events.length;
                    if (this.isNoDuelTournament()) {
                        if (this._utilEnvironment.getCategory() == _.a.TAB_ID_MYGAMES) return this._utilConfig.get("app", "noduel_events", "mygames");
                        const n = Object.assign(Object.assign({}, this._getEventCountConfig(yr.MAIN)), e === ce.PAGE_TYPE_TOURNAMENT ? this._getEventCountConfig(yr.TOURNAMENT_PAGE) : {}),
                            a = this._utilConfig.get(yr.APP, yr.NODUEL_EVENTS, yr.CATHEGORIES),
                            r = this.getSportName(),
                            i = this._data.getSuperTemplateId();
                        n[yr.DEFAULT] && (t = n[yr.DEFAULT]), n[r] && (t = n[r]), a[i] && (t = a[i])
                    }
                    return t
                }
                getSportCategoryId() {
                    return this._utilSport.getSportCategoryId(this._data)
                }
                getParentSports() {
                    return this._utilEnvironment.getParentSports()
                }
                getSportListById() {
                    return this._utilEnvironment.getSportListById()
                }
                getCompleteSportTranslations() {
                    return this._utilEnvironment.getCompleteSportTranslations()
                }
                getShortSportTranslations() {
                    return this._utilEnvironment.getShortSportTranslations()
                }
                isParentPage() {
                    return this._utilPage.isParent()
                }
                isMixedPage() {
                    return this._utilPage.isMixed()
                }
                getMeetingId() {
                    return this._data.getMeetingId()
                }
                getMeetingName() {
                    return this._data.getMeetingName()
                }
                getStageId() {
                    return this._data.getStageId()
                }
                getUpcomingDraws() {
                    return this._data.getUpcomingDraw()
                }
                getTournamentStageId() {
                    return this._data.getTournamentId()
                }
                isGolf() {
                    return this._utilSport.isGolf(this._data.getSportId())
                }
            }
            class Lr {
                constructor(e, t, n) {
                    this.MIN_TO_SEC_MULTIPLIER = 60, this.SECOND_TO_MILISECOND_MULTIPLIER = 1e3, this._transDayShort = ["TRANS_DAY_SHORT_SUN", "TRANS_DAY_SHORT_MON", "TRANS_DAY_SHORT_TUE", "TRANS_DAY_SHORT_WED", "TRANS_DAY_SHORT_THU", "TRANS_DAY_SHORT_FRI", "TRANS_DAY_SHORT_SAT"], this._utilConfig = e.createConfig(), this._utilEnviroment = e.createEnviroment(), this._utilTrans = e.createTrans(), this._utilDate = e.createDate(), this._gmtOffsetDiffGetter = n
                }
                getTitleToday() {
                    return this._utilTrans.translate("TRANS_DAY_TODAY")
                }
                getTitlePrevious() {
                    return this._utilTrans.translate("TRANS_DAY_PREVIOUS")
                }
                getTitleNext() {
                    return this._utilTrans.translate("TRANS_DAY_NEXT")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-bookmark-click", "calendar"), !0
                    }
                }
                getHandlerOnClickPrevious() {
                    return e => {
                        var t;
                        return null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-bookmark-click", "calendar-arrow-previous"), !0
                    }
                }
                getHandlerOnClickNext() {
                    return e => {
                        var t;
                        return null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-bookmark-click", "calendar-arrow-next"), !0
                    }
                }
                getCalendarDay() {
                    return this._utilEnviroment.getSudate()
                }
                setCalendarDay(e, t = !1) {
                    this._utilEnviroment.getSetCalendarDate()(e, t)
                }
                getDaysData() {
                    const e = {},
                        t = parseInt(this._utilConfig.get("app", "calendar_range")) || 0,
                        n = new Date,
                        a = this._utilDate.getTimestamp() - n.getTimezoneOffset() * this.MIN_TO_SEC_MULTIPLIER - this._gmtOffsetDiffGetter();
                    n.setTime(a * this.SECOND_TO_MILISECOND_MULTIPLIER), n.setDate(n.getDate() - t);
                    for (let a = -t; a <= t; a++) e[a] = new Date(n), n.setDate(n.getDate() + 1);
                    return e
                }
                getFormatDate(e) {
                    const t = this._utilConfig.get("app", "US_time_format") ? "M d," : "d/m";
                    return this._utilDate.timestamp2date(t, Math.round(e.getTime() / this.SECOND_TO_MILISECOND_MULTIPLIER), 0) + " " + this._utilTrans.translate(this._transDayShort[e.getUTCDay()])
                }
            }
            class Pr {
                constructor(e) {
                    this.eventGetter = e
                }
                filter(e, t) {
                    return e.getEventId() == t
                }
                getter(e) {
                    return this.eventGetter.getEvent(e)
                }
            }
            class Mr {
                constructor(e, t, n, a) {
                    this._dataEventHolderProxy = e, this._specificEventFactory = t, this._scopeHandler = n, this._scope = a
                }
                getEvent(e) {
                    this._scopeHandler.scopeBegin(this._scope);
                    const t = this._dataEventHolderProxy.getEventHolder().getItem(e);
                    return this._scopeHandler.scopeEnd(), this._specificEventFactory.create(t)
                }
            }
            var Fr = n(16),
                wr = n(80);
            class br {
                constructor(e, t, n, a) {
                    this.leagueId = e, this.sportId = t, this.eventData = a, this.utilEnvironment = n.createEnviroment(), this.utilTrans = n.createTrans(), this.utilSport = n.createSport(), this.utilDates = n.createDate()
                }
                stageHeaderNotAvailable(e) {
                    return !(this.utilSport.isStageSport(this.sportId) || this.isNonDuelGolfTournament(e))
                }
                isNonDuelGolfTournament(e) {
                    return this.sportId == _n.a.GOLF && this.utilEnvironment.isNoDuelTournamentByLeagueId(e)
                }
                inAfterStage() {
                    var e, t;
                    const n = null !== (t = null === (e = this.eventData) || void 0 === e ? void 0 : e.getEventStage()) && void 0 !== t ? t : 0;
                    return Fr.a.AFTER_STAGE_1 <= n && n <= Fr.a.AFTER_STAGE_30
                }
                getHeaderAfterStage() {
                    var e, t;
                    const n = "" + ((null !== (t = null === (e = this.eventData) || void 0 === e ? void 0 : e.getEventStage()) && void 0 !== t ? t : 0) - Fr.a.AFTER_STAGE_1 + 1);
                    return this.utilSport.inGroup(this.sportId, _n.a.MOTORSPORT) ? this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_AFTER_SS", [n]) : this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_AFTER_STAGE", [n])
                }
                inAfterSpecialStage() {
                    var e, t;
                    const n = null !== (t = null === (e = this.eventData) || void 0 === e ? void 0 : e.getEventStage()) && void 0 !== t ? t : 0;
                    return Fr.a.AFTER_SPECIAL_STAGE_1 <= n && n <= Fr.a.AFTER_SPECIAL_STAGE_1_B
                }
                getHeaderAfterSpecialStage() {
                    var e, t;
                    const n = null !== (t = null === (e = this.eventData) || void 0 === e ? void 0 : e.getEventStage()) && void 0 !== t ? t : 0;
                    let a = "" + (n - Fr.a.AFTER_SPECIAL_STAGE_1 + 1);
                    return n == Fr.a.AFTER_SPECIAL_STAGE_1_B && (a = "1 B"), this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_AFTER_SS", [a])
                }
                inScheduledStageType() {
                    var e, t;
                    return (null !== (t = null === (e = this.eventData) || void 0 === e ? void 0 : e.getEventStageType()) && void 0 !== t ? t : 0) == wr.a.SCHEDULED
                }
                get() {
                    if (this.stageHeaderNotAvailable(this.leagueId) || !this.eventData) return "";
                    if (this.inAfterStage()) return this.getHeaderAfterStage();
                    if (this.inAfterSpecialStage()) return this.getHeaderAfterSpecialStage();
                    if (this.inScheduledStageType()) return `${this.utilTrans.translate("TRANS_START_TIME")}: ${this.utilDates.timestamp2date(this.utilEnvironment.dateTimeFormat(),this.eventData.getStartTime(),this.utilEnvironment.getGmtOffset()())}`;
                    const e = Fr.a[this.eventData.getEventStage()] ? "TRANS_DEFAULT_MATCH_STATUS_" + Fr.a[this.eventData.getEventStage()] : "",
                        t = this.utilTrans.translate(e);
                    return t !== e ? t : ""
                }
            }
            class fr {
                constructor(e, t, n, a, r) {
                    this._tournamentInfoTextParsed = e, this._pageType = t, this._utilTrans = n, this._utilDate = a, this._timezone = r
                }
                _getInfoTextsByPageType(e) {
                    if (this._pageType !== ce.PAGE_TYPE_PLAYER) return e;
                    const t = e.shift();
                    return t ? [{
                        text: t.text.split(", ", 1).toString(),
                        title: t.title
                    }] : []
                }
                _getDate(e, t) {
                    const n = this._timezone.getGmtOffset();
                    if (!e) return "";
                    if (!t) return this._utilDate.timestamp2date("d.m.Y H:i", e, n);
                    const a = this._utilDate.timestamp2date("d.m.", e, n);
                    return a === this._utilDate.timestamp2date("d.m.", t, n) ? this._utilDate.timestamp2date("d.m.Y H:i", e, n) : `${a}-${this._utilDate.timestamp2date("d.m.Y",t,n)}`
                }
            }
            class kr extends fr {
                constructor(e, t, n, a, r, i, s, l, o, c) {
                    super(e, t, n, a, r), this._isNoDuelTournament = i, this._par = s, this._prizeMoney = l, this._leagueId = o, this._events = c
                }
                getInfoTextItems() {
                    const e = [];
                    let t = 0,
                        n = 0;
                    if (this._events.forEach(e => {
                            if (this._leagueId === e.getLeagueId()) return t = e.getStartUTime(), void(n = e.getEndUTime())
                        }), n || this._isNoDuelTournament) {
                        const a = this._getDate(t, n);
                        a && e.push({
                            text: `${this._utilTrans.translate("TRANS_GOLF_INFO_DATE")}: ${a}`,
                            title: ""
                        })
                    }
                    return this._pageType !== ce.PAGE_TYPE_PLAYER && (this._par && e.push({
                        text: `${this._utilTrans.translate("TRANS_GOLF_INFO_PAR")}: ${this._par}`,
                        title: ""
                    }), this._prizeMoney && e.push({
                        text: `${this._utilTrans.translate("TRANS_GOLF_INFO_PRIZE_MONEY")}: ${this._prizeMoney}`,
                        title: ""
                    })), this._getInfoTextsByPageType(e)
                }
            }
            class Gr extends fr {
                getInfoTextItems() {
                    const e = this._getStageInfoText(),
                        t = this._getDate(this._tournamentInfoTextParsed.getStartUTime(), this._tournamentInfoTextParsed.getEndUTime()),
                        n = this._tournamentInfoTextParsed.getStageName();
                    let a = "";
                    return t && (a += t), n && (a += ", " + n), e && (a += ` (${e})`), "" === a ? [] : this._getInfoTextsByPageType([{
                        text: a,
                        title: ""
                    }])
                }
                _getStageInfoText() {
                    const e = [],
                        t = this._tournamentInfoTextParsed.getStageLength(),
                        n = this._tournamentInfoTextParsed.getFirstAdditionalPart(),
                        a = this._tournamentInfoTextParsed.getSecondAdditionalPart();
                    return t && e.push(t), n && e.push(n), a && e.push(a), e.join(", ")
                }
            }
            class Ur extends fr {
                getInfoTextItems() {
                    const e = [],
                        t = this._getDistanceInfoText(),
                        n = this._getDate(this._tournamentInfoTextParsed.getStartUTime(), this._tournamentInfoTextParsed.getEndUTime()),
                        a = this._tournamentInfoTextParsed.getStageName(),
                        r = this._tournamentInfoTextParsed.getStageLength();
                    return n && e.push(n), a && e.push(a), r && e.push(r), t && e.push(t), 0 === e.length ? [] : this._getInfoTextsByPageType([{
                        text: e.join(", "),
                        title: ""
                    }])
                }
                _getDistanceInfoText() {
                    const e = this._tournamentInfoTextParsed.getFirstAdditionalPart(),
                        t = this._tournamentInfoTextParsed.getSecondAdditionalPart();
                    let n = "";
                    return e && (n += e), t && (n += n ? ` (${t})` : t), n
                }
            }
            class Br extends fr {
                constructor(e, t, n, a, r, i) {
                    super(e, t, n, a, r), this._sportId = i
                }
                getInfoTextItems() {
                    const e = [],
                        t = this._getDate(this._tournamentInfoTextParsed.getStartUTime(), this._tournamentInfoTextParsed.getEndUTime()),
                        n = this._tournamentInfoTextParsed.getStageName();
                    return t && e.push({
                        text: t,
                        title: ""
                    }), n && (this._sportId === _n.a.WINTER_SPORTS_SKI_JUMPING ? e.push({
                        text: `${this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_HILL_SIZE")}${n}`,
                        title: ""
                    }) : e.push({
                        text: `${this._utilTrans.translate("TRANS_WINTER_SPORTS_DISTANCE")}: ${n}`,
                        title: ""
                    })), this._getInfoTextsByPageType(e)
                }
            }
            class Wr extends fr {
                getInfoTextItems() {
                    const e = [],
                        t = this._tournamentInfoTextParsed.getHorseAge(),
                        n = this._tournamentInfoTextParsed.getStageName(),
                        a = this._tournamentInfoTextParsed.getFirstAdditionalPart(),
                        r = this._tournamentInfoTextParsed.getSecondAdditionalPart(),
                        i = this._tournamentInfoTextParsed.getThirdAdditionalPart();
                    return t && e.push({
                        text: t,
                        title: ""
                    }), n && e.push({
                        text: n,
                        title: this._tournamentInfoTextParsed.getStageLength() || ""
                    }), a && e.push({
                        text: `${this._utilTrans.translate("TRANS_HORSE_RACING_CLASS")}: ${a}`,
                        title: ""
                    }), r && e.push({
                        text: `${this._utilTrans.translate("TRANS_HORSE_RACING_WINNER")}: ${r}`,
                        title: ""
                    }), i && e.push({
                        text: `${this._utilTrans.translate("TRANS_HORSE_RACING_GOING")}: ${i}`,
                        title: ""
                    }), this._getInfoTextsByPageType(e)
                }
            }
            class xr extends fr {
                getInfoTextItems() {
                    return []
                }
            }
            var Xr;
            ! function(e) {
                e[e.WRC = 6576] = "WRC", e[e.SPEEDWAY = 6578] = "SPEEDWAY", e[e.DAKAR = 7771] = "DAKAR"
            }(Xr || (Xr = {}));
            class Yr {
                constructor(e, t, n, a, r, i) {
                    this._tournamentInfoTextConfig = e, this._tournamentInfoTextParsed = t, this._utilDate = n, this._utilTrans = a, this._utilSport = r, this._timezone = i
                }
                create(e) {
                    return e === _n.a.GOLF ? new kr(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone, this._tournamentInfoTextConfig.isNoDuelTournament, this._tournamentInfoTextConfig.par, this._tournamentInfoTextConfig.prizeMoney, this._tournamentInfoTextConfig.leagueId, this._tournamentInfoTextConfig.events) : e === _n.a.CYCLING || [Xr.WRC, Xr.DAKAR].includes(this._tournamentInfoTextConfig.categoryId) ? new Gr(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone) : this._utilSport.inGroup(e, _n.a.MOTORSPORT) ? new Ur(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone) : this._utilSport.inGroup(e, _n.a.WINTER_SPORTS) ? new Br(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone, e) : e === _n.a.HORSE_RACING ? new Wr(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone) : new xr(this._tournamentInfoTextParsed, this._tournamentInfoTextConfig.pageType, this._utilTrans, this._utilDate, this._timezone)
                }
            }
            class Kr {
                constructor(e, t, n, a, r) {
                    this._utilDate = e, this._utilTrans = t, this._utilSport = n, this._timezone = a, this._parser = r
                }
                getInfoTextItems(e) {
                    return new Yr(e, this._parser.parse(e.tournamentInfoText), this._utilDate, this._utilTrans, this._utilSport, this._timezone).create(e.sportId).getInfoTextItems()
                }
            }
            class Vr {
                constructor(e, t, n, a, r, i, s, l) {
                    this._startUTime = e, this._endUTime = t, this._stageName = n, this._stageLength = a, this._firstAdditionalPart = r, this._secondAdditionalPart = i, this._thirdAdditionalPart = s, this._horseAge = l
                }
                getStartUTime() {
                    return this._startUTime
                }
                getEndUTime() {
                    return this._endUTime
                }
                getStageName() {
                    return this._stageName
                }
                getStageLength() {
                    return this._stageLength
                }
                getFirstAdditionalPart() {
                    return this._firstAdditionalPart
                }
                getSecondAdditionalPart() {
                    return this._secondAdditionalPart
                }
                getThirdAdditionalPart() {
                    return this._thirdAdditionalPart
                }
                getHorseAge() {
                    return this._horseAge
                }
            }
            class jr {
                parse(e) {
                    const t = e.split("|");
                    return new Vr(parseInt(t[0]) || 0, parseInt(t[1]) || 0, t[2] || "", t[3] || "", t[4] || "", t[5] || "", t[6] || "", t[7] || "")
                }
            }
            class Jr {
                constructor(e) {
                    this.leagueGetter = e
                }
                filter(e, t) {
                    return e.getLeagueId() == t
                }
                getter(e, t) {
                    return this.leagueGetter.getLeague(e, t)
                }
            }
            class $r {
                constructor(e, t, n, a, r, i) {
                    this._dataLeagueHolderProxy = e, this._utilFactory = t, this._myLeaguesFactory = n, this._myGamesFactory = a, this._scopeHandler = r, this._scope = i
                }
                getLeague(e) {
                    this._scopeHandler.scopeBegin(this._scope);
                    const t = this._dataLeagueHolderProxy.getHolder().getOrCreateNewLeague(e);
                    return this._scopeHandler.scopeEnd(), new Hr(t, [], this._utilFactory, this._myLeaguesFactory, this._myGamesFactory, new br(t.getId(), t.getSportId(), this._utilFactory), new Kr(this._utilFactory.createDate(), this._utilFactory.createTrans(), this._utilFactory.createSport(), window.cjs.Api.timezone, new jr))
                }
            }
            var Qr = n(291),
                Zr = n(292);
            class zr {
                constructor(e) {
                    this.subject = new Qr.Subject, this.entityProvider = e
                }
                subscribe(e, t, n, a) {
                    const r = this.subject.pipe(Object(Zr.filter)(t => this.entityProvider.filter(t, e))).subscribe(t, n, a);
                    return t && t(this.entityProvider.getter(e)), r
                }
                update(e) {
                    this.subject.next(this.entityProvider.getter(e))
                }
            }
            class qr {
                constructor(e, t, n) {
                    this._categoryIsFinished = !1, this._categoryIsScheduled = !1, this._isTournamentPage = !1, this._gmtOffset = 0, this._leagueItem = e, this._eventHandler = t, this._utilDate = n
                }
                setCategoryIsFinished(e) {
                    return this._categoryIsFinished = e, this
                }
                setCategoryIsScheduled(e) {
                    return this._categoryIsScheduled = e, this
                }
                setIsTournamentPage(e) {
                    return this._isTournamentPage = e, this
                }
                setGmtOffset(e) {
                    return this._gmtOffset = e, this
                }
                build() {
                    return new ei(this._leagueItem, this._eventHandler, this._utilDate, this._categoryIsFinished, this._categoryIsScheduled, this._isTournamentPage, this._gmtOffset)
                }
            }
            class ei {
                constructor(e, t, n, a, r, i, s) {
                    this._leagueItem = e, this._eventHandler = t, this._utilDate = n, this._categoryIsFinished = a, this._categoryIsScheduled = r, this._isTournamentPage = i, this._gmtOffset = s
                }
                getTabs() {
                    const e = [];
                    let t = -1,
                        n = 0;
                    for (const a of this._getStages()) this._tabCanBeSelectedByStartTime(a.stageStartUtime) && (t = n), e.push(new ti(n++, a.stageId, this._utilDate.timestamp2date("H:i", a.stageStartUtime, this._gmtOffset)));
                    return [e, t]
                }
                _tabCanBeSelectedByStartTime(e) {
                    if (this._isTournamentPage || !this._utilDate.isToday()) return !1;
                    const t = this._utilDate.getTimestamp() - e,
                        n = t > 0,
                        a = Math.abs(t) <= 900;
                    return n || a
                }
                _eventIsOkByCategory(e) {
                    return !this._categoryIsFinished && !this._categoryIsScheduled || this._categoryIsFinished && e.isFinished() || this._categoryIsScheduled && e.isScheduled()
                }
                _eventIsOkByMeetingId(e) {
                    return this._leagueItem.getMeetingId() === e.getLeague().getMeetingId()
                }
                _eventIsOkByDate(e, t) {
                    return this._utilDate.timestamp2date("d.m.Y", t, this._gmtOffset) === this._utilDate.timestamp2date("d.m.Y", Math.floor(e.getStartUTime()), this._gmtOffset)
                }
                _getStages() {
                    const e = parseInt(this._leagueItem.getRaceInfoText() || "".split("|")[0]);
                    if (!(this._leagueItem.getStageTabs() || []).length || !e) return [];
                    const t = [];
                    return this._eventHandler.getIds().forEach(n => {
                        const a = this._eventHandler.getItem(n);
                        if (this._eventIsOkByCategory(a) && this._eventIsOkByMeetingId(a) && this._eventIsOkByDate(a, e)) {
                            const e = {
                                stageStartUtime: Math.floor(a.getStartUTime()),
                                stageId: a.getLeague().getStageId()
                            };
                            t.some(t => t.stageId === e.stageId && t.stageStartUtime === e.stageStartUtime) || t.push(e)
                        }
                    }), t.sort((e, t) => e.stageStartUtime >= t.stageStartUtime && e.stageId >= t.stageId ? 1 : -1)
                }
            }
            class ti {
                constructor(e, t, n) {
                    this._id = e, this._stageId = t, this._title = n
                }
                getId() {
                    return this._id
                }
                getStageId() {
                    return this._stageId
                }
                getTitle() {
                    return this._title
                }
            }
            class ni {
                constructor(e, t, n) {
                    this._participantKey = e, this._utilConfig = t, this._myTeams = n
                }
                isEnabled() {
                    return Boolean(this._utilConfig.get("app", "user_functions", "enable"))
                }
                getClass() {
                    return this._myTeams.getToggleIconClass(this._participantKey)
                }
            }
            class ai {
                constructor(e) {
                    this._myTeams = e
                }
                appendToggle(e, t) {
                    const n = document.getElementById("tomyteams");
                    n && (n.innerHTML += this._myTeams.getToggleIcon(e + "_" + t))
                }
            }
            class ri {
                constructor(e, t, n, a, r, i) {
                    this._eventIds = e, this._participantKey = t, this._utilConfig = n, this._utilEnviroment = a, this._utilTrans = r, this._myGames = i
                }
                isEnabled() {
                    for (const e in this._eventIds)
                        if (this._myGames.canBeGameAdded(this._eventIds[e])) return !0;
                    return !1
                }
                isChecked() {
                    for (const e in this._eventIds)
                        if (this._myGames.check(this._eventIds[e])) return !0;
                    return !1
                }
                getTitle() {
                    let e = "";
                    return e = this.isChecked() ? "TRANS_MY_GAMES_REMOVE_DEFAULT" : "TRANS_MY_GAMES_ADD_DEFAULT", this._utilTrans.translate(e)
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), this._utilEnviroment.getTooltipObject().hide_all(), !0)
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class ii {
                setKey(e) {
                    return this._key = e, this
                }
                setTitle(e) {
                    return this._title = e, this
                }
                setName(e) {
                    return this._name = e, this
                }
                setSportId(e) {
                    return this._sportId = e, this
                }
                setSportName(e) {
                    return this._sportName = e, this
                }
                setSportTranslatedName(e) {
                    return this._sportTranslatedName = e, this
                }
                setCountryId(e) {
                    return this._countryId = e, this
                }
                setCountryName(e) {
                    return this._countryName = e, this
                }
                setUrl(e) {
                    return this._url = e, this
                }
                setEvents(e) {
                    return this._events = e, this
                }
                setTranslateNoMatch(e) {
                    return this._translateNoMatch = e, this
                }
                setUtilFactory(e) {
                    return this._utilFactory = e, this
                }
                setMyGames(e) {
                    return this._myGames = e, this
                }
                setMyTeams(e) {
                    return this._myTeams = e, this
                }
                build() {
                    return new si(this._key, this._title, this._name, this._sportId, this._sportName, this._sportTranslatedName, this._countryId, this._countryName, this._url, this._events, this._translateNoMatch, this._utilFactory, this._myGames, this._myTeams)
                }
            }
            class si {
                constructor(e, t, n, a, r, i, s, l, o, c, g, _, h, E) {
                    this._key = e, this._title = t, this._name = n, this._sportId = a, this._sportName = r, this._sportTranslatedName = i, this._countryId = s, this._countryName = l, this._url = o, this._events = c, this._translateNoMatch = g, this._myGames = h, this._myTeams = E, this._utilString = _.createString(), this._utilConfig = _.createConfig(), this._utilEnviroment = _.createEnviroment(), this._utilTrans = _.createTrans(), this._sort()
                }
                _sort() {
                    this._events.sort((e, t) => {
                        const n = e.getMyTeamsSortKey(),
                            a = t.getMyTeamsSortKey();
                        return this._utilString.compare(n, a)
                    })
                }
                getKey() {
                    return this._key
                }
                getTitle() {
                    return this._title
                }
                getName() {
                    return this._name
                }
                getSportId() {
                    return this._sportId
                }
                getSportName() {
                    return this._sportName
                }
                getSportTranslatedName() {
                    return this._sportTranslatedName
                }
                getCountryId() {
                    return this._countryId
                }
                getCountryName() {
                    return this._countryName
                }
                getUrl() {
                    return this._url
                }
                getEvents() {
                    return this._events
                }
                getEventIds() {
                    const e = [];
                    for (const t of this._events) e.push(t.getEventId());
                    return e
                }
                getVisibleEventsCount() {
                    return this._events.length
                }
                getTranslateNoMatch() {
                    return this._translateNoMatch
                }
                getMyTeamIcon() {
                    return new ni(this._key, this._utilConfig, this._myTeams)
                }
                getAddParticipantToMyGamesIcon() {
                    return new ri(this.getEventIds(), this._key, this._utilConfig, this._utilEnviroment, this._utilTrans, this._myGames)
                }
            }
            class li {
                constructor(e) {
                    this._items = [], this._utilString = e
                }
                addItem(e) {
                    this._items.push(e)
                }
                getItems() {
                    return this._sort(), this._items
                }
                _sort() {
                    this._items.sort((e, t) => {
                        const n = e.getTitle() + " " + e.getSportTranslatedName(),
                            a = t.getTitle() + " " + t.getSportTranslatedName();
                        return this._utilString.compare(n, a)
                    })
                }
            }
            var oi, ci;
            ! function(e) {
                e.TOURNAMENT_RESULTS = "tournament-results", e.PARTICIPANT_RESULTS = "participant-results", e.TOURNAMENT_FIXTURES = "tournament-fixtures", e.PARTICIPANT_FIXTURES = "participant-fixtures", e.ODDS = "odds", e.COUNTRY = "country"
            }(oi || (oi = {}));
            class gi {
                constructor(e, t, n, a) {
                    this._reactCalls = n, this._suffixProvider = a, this._utilEnvironment = e.createEnviroment(), this._utilTrans = e.createTrans(), this._utilPage = e.createUtilPage(), this._tournamentDataProvider = t
                }
                getTitle() {
                    return this._utilEnvironment.getSportId() == _n.a.GOLF ? this._utilTrans.translate("TRANS_SHOW_MORE") : this._utilTrans.translate("TRANS_TOURNAMENT_PAGE_SHOW_MORE_MATCHES")
                }
                getShowAllGamesTitle() {
                    return this._utilTrans.translate("TRANS_SHOW_MORE")
                }
                getUrl(e) {
                    return this._tournamentDataProvider.getShowMoreUrl(e)
                }
                isSummaryPage(e) {
                    return e.search(Le.BLOCK_TYPE_SUMMARY) >= 0
                }
                isResultsPage(e) {
                    return e.search(Le.BLOCK_TYPE_RESULTS) >= 0
                }
                getUpdateAction(e) {
                    const t = this.isResultsPage(e);
                    if (this._utilPage.isParticipantPage()) {
                        const n = this._suffixProvider.isSuffixAllowed(e) ? this._suffixProvider.getSuffix() : "";
                        return t ? oi.PARTICIPANT_RESULTS + n : oi.PARTICIPANT_FIXTURES + n
                    }
                    return t ? oi.TOURNAMENT_RESULTS : oi.TOURNAMENT_FIXTURES
                }
                loadMore(e) {
                    this._reactCalls.loadingState("loadMore", !0);
                    const t = this._utilEnvironment.getUpdater();
                    t && t.doc_update(this.getUpdateAction(e), !1, this._utilEnvironment.getSportId(), null, null, this._tournamentDataProvider.getLoadMoreCallback(e))
                }
                getHandlerOnClick(e) {
                    if (this.isSummaryPage(e)) {
                        const t = this._utilEnvironment.getSportId(),
                            n = [_n.a.CYCLING, _n.a.WINTER_SPORTS_ALPINE_SKIING, _n.a.WINTER_SPORTS_BIATHLON, _n.a.WINTER_SPORTS_CROSS_COUNTRY, _n.a.WINTER_SPORTS_SKI_JUMPING, _n.a.MOTORSPORT_AUTO_RACING, _n.a.MOTORSPORT_MOTO_RACING];
                        return this._utilPage.isParticipantPageSummary() && -1 !== n.indexOf(t) ? t => {
                            t.preventDefault(), this._tournamentDataProvider.loadMoreStaticParticipant(e)
                        } : e => {}
                    }
                    return t => {
                        t.preventDefault(), this.loadMore(e)
                    }
                }
            }! function(e) {
                e.SCOPE_DEFAULT = "default", e.SCOPE_ARCHIVE = "archive", e.SCOPE_TEMPORARY = "temporary", e.SCOPE_MY_GAMES = "mygames"
            }(ci || (ci = {}));
            class _i {
                constructor(e, t, n) {
                    this._utilTrans = e, this._utilPage = t, this._scheduledTitleBySport = n
                }
                getResultsName(e, t) {
                    if (t) return this._utilTrans.translate("TRANS_BOOKMARK_LATEST_SCORES");
                    return e === _n.a.GOLF && this._utilPage.isParticipantPage() ? this._utilTrans.translate("TRANS_BOOKMARK_LATEST_TOURNAMENTS") : this._utilTrans.translate("TRANS_TOURNAMENT_PAGE_RESULTS")
                }
                getFixturesName() {
                    return this._scheduledTitleBySport
                }
                getTodaysMatchesName(e, t) {
                    return e === _n.a.GOLF && this._utilPage.isParticipantPage() ? this._utilTrans.translate("TRANS_DAY_TODAY") : t ? this._utilTrans.translate("TRANS_TOURNAMENT_PAGE_TODAYS_MATCHES") : this._utilTrans.translate("TRANS_TOURNAMENT_PAGE_RESULTS")
                }
                getNoMatchesName(e) {
                    return e == _n.a.GOLF ? this._utilTrans.translate("TRANS_TOURNAMENT_LIST_NOT_FOUND") : this._utilTrans.translate("TRANS_MATCH_LIST_NOT_FOUND")
                }
                getTransfersName() {
                    return this._utilTrans.translate("TRANS_TEAM_TRANSFERS")
                }
                getNewsfeedName() {
                    return this._utilTrans.translate("TRANS_TEAM_LATEST_NEWS")
                }
            }
            class hi {
                constructor(e, t) {
                    this._scopeHistory = [], this._dataHolderProxy = e, this._utilNavigation = t
                }
                getScope() {
                    return this._dataHolderProxy.getScope()
                }
                _getScopeForCurrentTab(e) {
                    return this._utilNavigation.isMyGames() ? ci.SCOPE_MY_GAMES : e
                }
                scopeBegin(e) {
                    this._scopeHistory.push(this.getScope());
                    const t = this._getScopeForCurrentTab(e);
                    this._dataHolderProxy.setScope(t)
                }
                scopeEnd() {
                    const e = this._scopeHistory.pop();
                    if (!e) throw new Error("You should call scopeBegin() first!");
                    if (this._scopeHistory.length) this._dataHolderProxy.setScope(e);
                    else {
                        const e = this._getScopeForCurrentTab(ci.SCOPE_DEFAULT);
                        this._dataHolderProxy.setScope(e)
                    }
                }
                scopeReset(e) {
                    this.scopeBegin(e), this._dataHolderProxy.getHolder().reinit(), this._dataHolderProxy.getHandler().resetIds(), this.scopeEnd()
                }
            }
            class Ei {
                constructor(e, t, n, a) {
                    this._utilConfig = e, this._utilEnvironment = t, this._utilPage = n, this._utilSport = a
                }
                get(e, t) {
                    const n = this._utilConfig.get("app", "noduel_events", "main", "default");
                    if (t === _.a.TAB_ID_MYGAMES) return this._utilConfig.get("app", "noduel_events", "mygames");
                    const a = this._utilPage.getCountryId();
                    if (a) {
                        const t = this._utilConfig.get("app", "noduel_events", "categories");
                        if (t.hasOwnProperty(a)) return t[a];
                        const r = this._utilSport.getOriginalNameFromId(e);
                        return this._utilPage.isTournamentPage() ? this._getMaxCountForTournamentPageBySport(r) || n : this._getMaxCountForSport(r) || n
                    }
                    return n
                }
                _getMaxCountForSport(e) {
                    return this._utilConfig.get("app", "noduel_events", "main")[e] || 0
                }
                _getMaxCountForTournamentPageBySport(e) {
                    return this._utilConfig.get("app", "noduel_events", "tournament_page")[e] || 0
                }
            }
            class di {
                constructor(e, t, n, a, r, i, s, l, o, c, g, _) {
                    this._dataSequenceCount = 0, this._previousEventCount = 0, this._isParticipantPage = !1, this.PARTICIPANT_PAGE_MAX_EVENT_COUNT = 100, this.PARTICIPANT_NODUEL_PAGE_MAX_EVENT_COUNT = 1e4, this.initialLimit = 10, this.BLOCK_EVENT_LIMIT = 10, this.GOLF_BLOCK_EVENT_LIMIT = 5, this._dataEventHolderProxy = e, this._dataLeagueHolderProxy = t, this._utilEnviroment = r, this._utilSport = i, this._utilConfig = s, this._utilDate = l, this._utilPage = o, this._pageType = c, this._reactCalls = g, this._isParticipantPage = this._utilPage.isParticipantPage(), this._mainPageType = this._isParticipantPage ? "participant-page" : "tournament-page", this._suffixProvider = _, this._eventScopeHandler = n, this._leagueScopeHandler = a, this._eventScopeHandler.scopeBegin(ci.SCOPE_ARCHIVE), this._dataEventArchiveHolder = this._dataEventHolderProxy.getHolder(), this._eventScopeHandler.scopeEnd(), this._eventScopeHandler.scopeBegin(ci.SCOPE_TEMPORARY), this._dataEventHolderProxy.getHolder().reinit(), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeBegin(ci.SCOPE_ARCHIVE), this._dataLeagueArchiveHolder = this._dataLeagueHolderProxy.getHolder(), this._leagueScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeBegin(ci.SCOPE_TEMPORARY), this._dataLeagueHolderProxy.getHolder().reinit(), this._leagueScopeHandler.scopeEnd();
                    const h = this._utilEnviroment.getSportId();
                    this.initialLimit = this._utilSport.isGolf(h) && this._isParticipantPage ? this.GOLF_BLOCK_EVENT_LIMIT : this.BLOCK_EVENT_LIMIT
                }
                _getElementContent(e) {
                    const t = document.getElementById(e);
                    return t ? t.innerHTML : ""
                }
                _getData(e) {
                    const t = this._suffixProvider.isSuffixAllowed(e) ? this._suffixProvider.getSuffix() : "";
                    return this._getElementContent(this._mainPageType + "-data-" + e + t)
                }
                _getTotalEventCount(e) {
                    return parseInt(this._getElementContent(this._mainPageType + "-allmatchcount-" + e))
                }
                _copyDataToArchiveHolders(e, t) {
                    const n = e.getId(),
                        a = t.getId();
                    if (this._dataEventArchiveHolder.getOrCreateNewEvent(n).reinit(e.getData()), !this._dataLeagueArchiveHolder.hasLeague(a)) {
                        this._dataLeagueArchiveHolder.getOrCreateNewLeague(a).reinit(t.getData())
                    }
                }
                _getMaxEventCount() {
                    const e = this._utilEnviroment.getCategory(),
                        t = this._utilEnviroment.getSportId();
                    if (this._isParticipantPage) return this.PARTICIPANT_PAGE_MAX_EVENT_COUNT;
                    let n = this._utilConfig.get("app", "tournament_pages", "data_part_match_limit");
                    return this._utilSport.isRacingSport(t) && (n = new Ei(this._utilConfig, this._utilEnviroment, this._utilPage, this._utilSport).get(t, e)), n
                }
                _filterData(e, t) {
                    this._eventScopeHandler.scopeBegin(t), this._leagueScopeHandler.scopeBegin(t);
                    const n = this._dataEventHolderProxy.getHandler(),
                        a = this.initialLimit,
                        r = this._utilDate.getMidnight(),
                        i = r + 86400,
                        s = this._getMaxEventCount();
                    let l = 0,
                        o = 0,
                        c = 0,
                        g = "";
                    const _ = this._utilEnviroment.isNoDuelSport(this._utilEnviroment.getSportId());
                    n.filter((t, h) => {
                        const E = n.getItem(h),
                            d = E.getLeague(),
                            T = E.getStartUTime(),
                            u = e === Le.BLOCK_TYPE_RESULTS,
                            S = e === Le.BLOCK_TYPE_FIXTURES,
                            m = e === Le.BLOCK_TYPE_SUMMARY_RESULTS,
                            v = e === Le.BLOCK_TYPE_SUMMARY_FIXTURES;
                        if (!_ || this._isParticipantPage) {
                            if (E.isPostponed() && T < r) return !1;
                            if ((u || S) && 0 === this._dataSequenceCount) {
                                if (l >= s - 1) {
                                    const e = new Date(1e3 * T),
                                        t = new Date(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate(), 0, 0, 0);
                                    let n = 0;
                                    e.getUTCHours() + this._utilEnviroment.getTimezone() >= 24 ? n = 1 : e.getUTCHours() + this._utilEnviroment.getTimezone() < 0 && (n = -1);
                                    const a = this._utilEnviroment.getGmtOffsetDiff();
                                    o = t.getTime() / 1e3 + 24 * n * 60 * 60 + a, c = o + 86400
                                }
                                if (o && (u && T < o || S && T >= c)) return !1
                            } else if (m || v) {
                                const e = this._utilEnviroment.getGmtOffset()();
                                if (l >= a && g != this._utilDate.timestamp2date(this._utilEnviroment.dateFormat(), T, e)) return !1;
                                if (m && T >= r || v && T < i) {
                                    const e = T >= r && T < i;
                                    return !(this._pageType != ce.PAGE_TYPE_PLAYER || !e) && (!(v || m && E.isFinished()) && (l++, !0))
                                }
                                if (this._isParticipantPage && m && l >= a) return !1;
                                g = this._utilDate.timestamp2date(this._utilEnviroment.dateFormat(), T, e)
                            }
                        }
                        return this._copyDataToArchiveHolders(E, d), l++, !0
                    }), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeEnd()
                }
                _parseData(e, t) {
                    this._eventScopeHandler.scopeBegin(t), this._leagueScopeHandler.scopeBegin(t), this._utilEnviroment.parse(this._getData(e), !1, !1), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeEnd()
                }
                _reinitCurrentScope(e, t) {
                    const n = this._suffixProvider.isSuffixAllowed(e) && e == Le.BLOCK_TYPE_RESULTS;
                    (e == Le.BLOCK_TYPE_SUMMARY_RESULTS || n) && (this._eventScopeHandler.scopeBegin(t), this._dataEventHolderProxy.getHolder().reinit(), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeBegin(t), this._dataLeagueHolderProxy.getHolder().reinit(), this._leagueScopeHandler.scopeEnd())
                }
                _setSortDirection(e) {
                    const t = [Le.BLOCK_TYPE_SUMMARY_RESULTS, Le.BLOCK_TYPE_RESULTS],
                        n = this._utilEnviroment.getUpdater();
                    n && (n.country_tournament_order_fin = -1 !== t.indexOf(e))
                }
                _sortData(e, t) {
                    let n = !1;
                    const a = this._utilEnviroment.getUpdater();
                    a && (n = a.country_tournament_order_fin), this._setSortDirection(e), this._eventScopeHandler.scopeBegin(t), this._leagueScopeHandler.scopeBegin(t), this._dataLeagueHolderProxy.getHandler().resetIds();
                    const r = this._dataEventHolderProxy.getHandler();
                    r.resetIds(), r.sort(), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeEnd(), a && (a.country_tournament_order_fin = n)
                }
                getDataScope(e) {
                    return -1 !== [Le.BLOCK_TYPE_SUMMARY_FIXTURES, Le.BLOCK_TYPE_SUMMARY_RESULTS].indexOf(e) ? ci.SCOPE_TEMPORARY : ci.SCOPE_DEFAULT
                }
                setData(e) {
                    const t = this.getDataScope(e);
                    this._reinitCurrentScope(e, t), this._eventScopeHandler.scopeBegin(t), this._dataEventHolderProxy.getHandler().resetIds(), this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeBegin(t), this._dataLeagueHolderProxy.getHandler().resetIds(), this._leagueScopeHandler.scopeEnd(), this._parseData(e, t), this._sortData(e, t), this._filterData(e, t)
                }
                getLoadMoreCallback(e) {
                    return (t, n, a, r) => {
                        const i = this._suffixProvider.isSuffixAllowed(e) ? this._suffixProvider.getSuffix() : "",
                            s = document.getElementById(`${this._mainPageType}-data-${e}${i}`);
                        s && (s.innerHTML = s.innerHTML + a, this._dataSequenceCount++, this._previousEventCount = this._dataEventArchiveHolder.getAllContainerIds().length, this.setData(e), this._reactCalls.reloadStaticContent()), this._reactCalls.loadingState("loadMore", !1)
                    }
                }
                loadMoreStaticParticipant(e) {
                    this._previousEventCount = this.PARTICIPANT_NODUEL_PAGE_MAX_EVENT_COUNT, this.initialLimit = this.PARTICIPANT_NODUEL_PAGE_MAX_EVENT_COUNT, this.setData(e), this._reactCalls.reloadStaticContent()
                }
                getShowMoreUrl(e) {
                    const t = this._dataEventHolderProxy.getScope();
                    this._dataEventHolderProxy.setScope(this.getDataScope(e));
                    const n = this._dataEventHolderProxy.getHandler().count();
                    this._dataEventHolderProxy.setScope(t);
                    const a = e === Le.BLOCK_TYPE_RESULTS || e === Le.BLOCK_TYPE_FIXTURES || e === Le.BLOCK_TYPE_SUMMARY_RESULTS || e === Le.BLOCK_TYPE_SUMMARY_FIXTURES,
                        r = this._getTotalEventCount(e) <= n,
                        i = n - this._previousEventCount < 1;
                    if (a && (r || i) && !this._suffixProvider.isSuffixAllowed(e)) return ""; {
                        const t = this._suffixProvider.isSuffixAllowed(e) ? this._suffixProvider.getSuffix() : "",
                            n = document.getElementById(`${this._mainPageType}-${e}${t}-more`),
                            a = n && n.querySelector("a");
                        return a && a.getAttribute("href") || ""
                    }
                }
                getEventInitialCount() {
                    return this.initialLimit
                }
            }
            class Ti {
                constructor(e, t, n, a, r) {
                    this._content = n, this._headers = t, this._status = e, this._trigger = a, this._customHeaders = r
                }
                getContent() {
                    return this._content
                }
                getCustomHeaders() {
                    return this._customHeaders
                }
                getHeaders() {
                    return this._headers
                }
                getStatus() {
                    return this._status
                }
                getTrigger() {
                    return this._trigger
                }
            }
            var ui = n(237);
            class Si {
                constructor(e, t, n) {
                    this._data = e, this._utilEnviroment = t, this._utilTrans = n
                }
                isEnabled() {
                    return this._data.isScheduled() && this._data.hasFinalResultOnly()
                }
                getTitle() {
                    return this._utilTrans.translate("TRANS_FINAL_RESULT_ONLY")
                }
                getText() {
                    return this._utilTrans.translate("TRANS_FINAL_RESULT_ONLY_SHORT")
                }
                getHandlerOnClick() {
                    return e => !0
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class mi {
                constructor(e, t, n, a, r, i) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a, this._myGames = r, this._utilSport = i
                }
                isEnabled() {
                    const e = this._data.getId();
                    return this._myGames.canBeGameAdded(e)
                }
                isChecked() {
                    const e = this._data.getId();
                    return this._myGames.check(e) || this._myGames.isGameFromTournament(e)
                }
                getTitle() {
                    const e = !this._data.getLeague().isDuel(),
                        t = Object.keys(this._myGames.getGamesGroups([this._data.getId()])).filter(e => "0" !== e).length;
                    let n = "";
                    return n = e ? this.isChecked() ? this._myGames.isGameFromTournament(this._data.getId()) ? "TRANS_MY_GAMES_CANNOT_REMOVE" : t ? "TRANS_MY_GAMES_REMOVE_FROM_GROUP" : "TRANS_MY_GAMES_REMOVE_DEFAULT" : "TRANS_MY_GAMES_ADD_DEFAULT" : this.isChecked() ? t ? "TRANS_MY_GAMES_REMOVE_FROM_GROUP" : "TRANS_MY_GAMES_REMOVE" : "TRANS_MY_GAMES_ADD", this._utilTrans.translate(n)
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return e.stopPropagation(), this._utilEnviroment.getTooltipObject().hide_all(), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "my-games-match"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    const e = this.getTitle();
                    return t => (t.target.title = e, this._utilEnviroment.getTooltipObject().show(t.target, t, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class vi {
                constructor(e, t, n, a) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a
                }
                isEnabled() {
                    return this._data.isScheduled() && this._data.hasPreview()
                }
                getTitle() {
                    return this._utilTrans.translate("TRANS_MATCH_PREVIEW_TITLE")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return e.stopPropagation(), this._utilEnviroment.detailOpen(this._data.getId()), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "match-comments"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class pi {
                constructor(e, t, n, a) {
                    this._side = e, this._data = t, this._utilEnviroment = n, this._utilTrans = a
                }
                _isDrawAdvancing() {
                    return this._side == S.a.HOME ? 1 == this._data.getHomeDrawWinner() : 1 == this._data.getAwayDrawWinner()
                }
                _isDrawWinner() {
                    return this._side == S.a.HOME ? 2 == this._data.getHomeDrawWinner() : 2 == this._data.getAwayDrawWinner()
                }
                _isGolfWinner() {
                    return this._data.isGolf() && (this._side == S.a.HOME ? this._data.isHomeWinner() : this._data.isAwayWinner())
                }
                isEnabled() {
                    return this._isDrawAdvancing() || this._isDrawWinner() || this._isGolfWinner()
                }
                getTitle() {
                    let e = "";
                    return this._isDrawWinner() || this._isGolfWinner() ? e = "TRANS_WINNER" : this._isDrawAdvancing() && (e = "TRANS_WINNER_TOOLTIP"), this._utilTrans.translate(e)
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), !0)
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class Ii {
                constructor(e, t, n, a) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a
                }
                _isUnverifiedSource() {
                    return this._data.isUnverifiedSource() && this._data.isLive()
                }
                isEnabled() {
                    return !(!this._utilConfig.get("app", "icon_list", "info") || "" == this._data.getInfoNotice() && !this._isUnverifiedSource())
                }
                getTitle() {
                    let e = "";
                    return this._isUnverifiedSource() && (e = this._utilTrans.translate("TRANS_UNVERIFIED_SOURCE_INFO_NOTE")), e += (e ? "[br]" : "") + this._data.getInfoNotice(), e
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), !0)
                }
                getHandlerOnMouseEnter() {
                    const e = this.getTitle();
                    return t => {
                        var n;
                        return t.target.title = e, this._utilEnviroment.getTooltipObject().show(t.target, t, null, "live-table"), null === (n = this._utilEnviroment.getEventTrackingObject()) || void 0 === n || n.track_over("iframe-icon-mouseover", "info"), !0
                    }
                }
                getHandlerOnMouseLeave() {
                    return e => {
                        var t;
                        return this._utilEnviroment.getTooltipObject().hide(e.target), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_out(), !0
                    }
                }
            }
            var Ai = function(e, t, n, a) {
                return new(n || (n = Promise))((function(r, i) {
                    function s(e) {
                        try {
                            o(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function l(e) {
                        try {
                            o(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function o(e) {
                        var t;
                        e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                            e(t)
                        }))).then(s, l)
                    }
                    o((a = a.apply(e, t || [])).next())
                }))
            };
            class Ni {
                constructor(e, t, n, a, r) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a, this._moduleLoader = r
                }
                _getAvailableBroadcastIds(e) {
                    let t = {};
                    const n = this._utilEnviroment.getGlobalGeoIp() || "",
                        a = this._utilEnviroment.getGeoIpIsoSubdivisionCode0() || "";
                    try {
                        const e = this._data.getDisabledBroadcastsData();
                        t = JSON.parse(e)
                    } catch (e) {}
                    return e.getAvailableBookmakerIdsByGeoIp(n, a, t)
                }
                isEnabled() {
                    return Ai(this, void 0, void 0, (function*() {
                        const e = yield this._moduleLoader.getBookmakerSettings();
                        return !(!this._utilConfig.get("app", "icon_list", "tv") || this._data.isFinished() || !this._data.hasBroadcast(this._getAvailableBroadcastIds(e), this._utilEnviroment.getAllowedTvs()))
                    }))
                }
                getTitle() {
                    return Ai(this, void 0, void 0, (function*() {
                        const e = yield this._moduleLoader.getBookmakerSettings(), t = yield this._moduleLoader.getBroadcast(), n = this._data.getTvLiveStreaming();
                        let a = {};
                        try {
                            a = JSON.parse(n)
                        } catch (e) {}
                        return t.getFormattedData(a, this._getAvailableBroadcastIds(e), this._utilEnviroment.getAllowedTvs(), this._data)
                    }))
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return e.stopPropagation(), this._utilEnviroment.detailOpen(this._data.getId(), this._utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_TV")), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "tv"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => Ai(this, void 0, void 0, (function*() {
                        var t;
                        e.persist();
                        const n = e.target;
                        return n.title = yield this.getTitle(), this._utilEnviroment.getTooltipObject().show(n, e, null, "live-table"), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_over("iframe-icon-mouseover", "tv"), !0
                    }))
                }
                getHandlerOnMouseLeave() {
                    return e => {
                        var t;
                        const n = $("#tooltip-1"),
                            a = this._utilEnviroment.getTooltipObject();
                        return "block" == n.css("display") && (n.attr("isDelay", "1"), this._utilEnviroment.getCoreUpdate()._tvTooltipTimeout = setTimeout((function() {
                            const t = $("#tooltip-1");
                            "2" != t.attr("isDelay") && a.hide(e), t.attr("isDelay", "0")
                        }), 600)), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_out(), !0
                    }
                }
            }
            class Ri {
                constructor(e, t, n, a) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a
                }
                isEnabled() {
                    if (this._utilConfig.get("app", "icon_list", "shirt")) {
                        const e = [_n.a.SOCCER, _n.a.HANDBALL, _n.a.HOCKEY, _n.a.BASKETBALL, _n.a.CRICKET, _n.a.AUSSIE_RULES, _n.a.RUGBY_UNION, _n.a.RUGBY_LEAGUE, _n.a.BASEBALL, _n.a.VOLLEYBALL, _n.a.KABADDI, _n.a.FUTSAL, _n.a.FLOORBALL, _n.a.AMERICAN_FOOTBALL],
                            t = this._data.isAfterDay() || this._data.isInterrupted(),
                            n = this._data.isScheduled() || this._data.isLive() || t;
                        return e.indexOf(this._data.getSportId()) > -1 && n && !!this._data.hasLineps()
                    }
                    return !1
                }
                getTitle() {
                    return this._utilTrans.translate("TRANS_CLICK_TO_SEE_LINEUPS")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return e.stopPropagation(), this._utilEnviroment.detailOpen(this._data.getId(), this._utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_LINEUPS")), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "shirt"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class Oi {
                constructor(e, t, n, a, r, i) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a, this._utilUrl = r, this._application = i
                }
                getMainBookmakerId() {
                    const e = this._application.getMainBookmakerIds();
                    for (const t of e)
                        if (this._data.hasLiveBettingByBookmaker(t)) return t;
                    return 0
                }
                isEnabled() {
                    if (this._utilConfig.get("app", "odds", "enable")) {
                        const e = this.getMainBookmakerId();
                        if (!this._data.isFinished() && 0 != e && this._data.hasLiveBettingByBookmaker(e)) return !0
                    }
                    return !1
                }
                getClass() {
                    let e = "";
                    if (this._data.isLive()) {
                        e = "active";
                        const t = this._utilConfig.get("app", "odds", "odds_disabled_countries").indexOf(this._utilEnviroment.getGlobalGeoIp()) > -1;
                        if (this._utilConfig.get("app", "odds", "hide_live_bet_icon") || t) return e;
                        this._utilConfig.get("app", "odds", "betting_light_version") || (e += " active-bet")
                    }
                    return e
                }
                getTitle() {
                    const e = this._data.isLive() ? "TRANS_LIVE_BETTING_ICON_TITLE_LIVE" : "TRANS_LIVE_BETTING_ICON_TITLE_SCHEDULED",
                        t = this._utilTrans.translate(e);
                    return this._utilConfig.get("app", "odds", "betting_light_version") || this._utilConfig.get("app", "odds", "light_live_bet_icon") ? t : "[bl]" + t
                }
                getUrlParams() {
                    let e = "live";
                    this._data.isLive() && (e += "-live-match");
                    const t = {
                        from: e,
                        sport: this._data.getSportId().toString(),
                        tournament: this._data.getLeague().getTournamentStageId(),
                        match: this._data.getOriginalId(),
                        day: this._utilEnviroment.getSudate().toString()
                    };
                    return this._application.isExternalProject() && (t.externalProjectId = this._application.getExternalProjectId().toString()), t
                }
                getHandlerOnClick() {
                    const e = this.getUrlParams();
                    return t => {
                        if (t.stopPropagation(), this._utilConfig.get("app", "odds", "light_live_bet_icon")) return this._utilEnviroment.detailOpen(this._data.getId()), !0;
                        const n = this._utilUrl.createBookmakerLink(e, this.getMainBookmakerId());
                        return this._utilEnviroment.open(n), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            var Di = n(229);
            class Ci {
                constructor(e, t, n, a) {
                    this.ENABLED_BLOCK_TYPES = [Le.BLOCK_TYPE_SUMMARY_RESULTS, Le.BLOCK_TYPE_RESULTS], this._helperWinLose = e, this._data = t, this._utilEnviroment = n, this._utilPage = a, this._participant = a.getParticipantEncodedId()
                }
                isEnabled() {
                    return !0
                }
                isEnabledByBlockType(e) {
                    const t = -1 !== this.ENABLED_BLOCK_TYPES.indexOf(e),
                        n = !R.a.isLineThrough(this._data.getStage());
                    return this._utilPage.isParticipantPage() && t && n
                }
                getTitle() {
                    return this._helperWinLose.getFormTitle(this._data, this._participant)
                }
                getClass() {
                    return this._helperWinLose.getFormClass(this._data, this._participant)
                }
                getShortTranslate() {
                    return this._helperWinLose.getShortTranslate(this._data, this._participant)
                }
                getHandlerOnClick() {
                    return e => !1
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            var yi = n(170);
            class Hi {
                constructor(e, t, n, a) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a
                }
                isEnabled() {
                    if (!this._utilConfig.get("app", "audio_comments", "enabled")) return !1;
                    return !(!this._data.isScheduled() && !this._data.isLive()) && null != this._data.getAudioComments()
                }
                getTitle() {
                    return this._utilTrans.translate("TRANS_CLICK_TO_AUDIO_COMMENTS")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        return null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-icon-click", "audio-comments"), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    const e = this.getTitle();
                    return t => {
                        var n;
                        return t.target.title = e, this._utilEnviroment.getTooltipObject().show(t.target, t, null, "live-table"), null === (n = this._utilEnviroment.getEventTrackingObject()) || void 0 === n || n.track_over("iframe-icon-mouseover", "audio-comments"), !0
                    }
                }
                getHandlerOnMouseLeave() {
                    return e => {
                        var t;
                        return this._utilEnviroment.getTooltipObject().hide(e.target), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_out(), !0
                    }
                }
            }
            var Li = n(38),
                Pi = function(e, t, n, a) {
                    return new(n || (n = Promise))((function(r, i) {
                        function s(e) {
                            try {
                                o(a.next(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function l(e) {
                            try {
                                o(a.throw(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function o(e) {
                            var t;
                            e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                                e(t)
                            }))).then(s, l)
                        }
                        o((a = a.apply(e, t || [])).next())
                    }))
                };
            class Mi {
                constructor(e, t) {
                    this._data = e, this._utilConfig = t
                }
                isEnabled() {
                    return Pi(this, void 0, void 0, (function*() {
                        return this._utilConfig.get("app", "icon_list", "tv") && !this._data.isFinished() ? Promise.resolve(this._data.hasHighlightProviderLiveStream()) : Promise.resolve(!1)
                    }))
                }
                getTitle() {
                    return Promise.resolve("")
                }
                getHandlerOnClick() {
                    return () => !1
                }
                getHandlerOnMouseEnter() {
                    return () => Promise.resolve(!1)
                }
                getHandlerOnMouseLeave() {
                    return () => !1
                }
            }
            var Fi, wi = function(e, t, n, a) {
                return new(n || (n = Promise))((function(r, i) {
                    function s(e) {
                        try {
                            o(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function l(e) {
                        try {
                            o(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function o(e) {
                        var t;
                        e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                            e(t)
                        }))).then(s, l)
                    }
                    o((a = a.apply(e, t || [])).next())
                }))
            };
            class bi {
                constructor(e, t, n, a, r, i, s, l, o, c) {
                    this._data = e, this._isStatic = c, this._highlighter = t, this._utilConfig = r.createConfig(), this._utilEnviroment = r.createEnviroment(), this._utilTrans = r.createTrans(), this._utilDate = r.createDate(), this._utilUrl = r.createUrl(), this._utilSport = r.createSport(), this._utilString = r.createString(), this._helperClickableBookmaker = i.createClickableBookmaker(), this._moduleLoader = s, this._helperWinLose = i.createWinLose();
                    const g = this._utilTrans.translate("TRANS_SWAP_TEAM_AT_IFRAME");
                    this._homeParticipant = new ui.a(e.getHomeName(), S.a.HOME, this.getFullTimeWinner() == Di.a.HOME, e.isSwappedParticipants(), g, e.getHomeLogo(), e.getOriginalId()), this._awayParticipant = new ui.a(e.getAwayName(), S.a.AWAY, this.getFullTimeWinner() == Di.a.AWAY, e.isSwappedParticipants(), g, e.getAwayLogo(), e.getOriginalId()), this._myGames = l.createMyGames(), this._myTeams = o.createMyTeams(), this._application = r.createApplication(), this._utilPage = r.createUtilPage(), this._homeScore = n, this._awayScore = a
                }
                setSportSpecific(e) {
                    this._sportSpecific = e
                }
                getSportSpecific() {
                    return this._sportSpecific
                }
                getHighlighter() {
                    return this._highlighter
                }
                getSportId() {
                    return this._data.getSportId()
                }
                getSportName() {
                    return this._data.getSportName()
                }
                isDuel() {
                    return this._data.getLeague().isDuel()
                }
                getEventId() {
                    return this._data.getId()
                }
                getLeagueId() {
                    return this._data.getLeagueId()
                }
                getTournamentTemplateKey() {
                    return this._data.getLeague().getTournamentTemplateKey() || ""
                }
                getStartTime() {
                    return this._utilDate.timestamp2date(this._utilEnviroment.hourFormat(), this._data.getStartUTime(), this._utilEnviroment.getGmtOffset()())
                }
                getStartDate(e) {
                    let t = this._utilEnviroment.dateFormat();
                    const n = this._utilPage.isParticipantPage() && e !== Le.BLOCK_TYPE_FIXTURES && !this._currentYearDate(this._data.getStartUTime()),
                        a = this._isCategoryPage() && !this._currentYearDate(this._data.getStartUTime());
                    return (n || a) && (t = this._utilEnviroment.fullDateShortFormat()), this._utilDate.timestamp2date(t, this._data.getStartUTime(), this._utilEnviroment.getGmtOffset()())
                }
                getStartFullDate() {
                    return this._utilDate.timestamp2date(this._utilEnviroment.fullDateShortFormat(), this._data.getStartUTime(), this._utilEnviroment.getGmtOffset()())
                }
                isMatchToday() {
                    return this.getStartFullDate() === this._utilDate.timestamp2date(this._utilEnviroment.fullDateShortFormat(), Math.floor(Date.now() / 1e3), this._utilEnviroment.getGmtOffset()())
                }
                _getCounter(e) {
                    const t = this.getEventId();
                    return this._utilEnviroment.getSetCounterTime(t), e(t, !0, !0, !1, !0)
                }
                getStageTime() {
                    return this._getCounter(this._utilEnviroment.getCounterFormat)
                }
                getShortStageTime() {
                    return this._getCounter(this._utilEnviroment.getShortCounterFormat)
                }
                getDateFormat(e) {
                    const t = this._data.getStartUTime(),
                        n = t < this._utilDate.getLastMidnight() || t >= this._utilDate.getNextMidnight(),
                        a = this._utilEnviroment.getCategory() == _.a.TAB_ID_MYGAMES,
                        r = this._utilPage.isParticipantPage() && e !== Le.BLOCK_TYPE_FIXTURES && !this._currentYearDate(this._data.getStartUTime()),
                        i = this._isCategoryPage() && !this._currentYearDate(this._data.getStartUTime());
                    return n && a || r || i ? Ge.a.DATE : Ge.a.TIME
                }
                getEventStage() {
                    return this._data.getStage()
                }
                getEventStageType() {
                    return this._data.getStageType()
                }
                hasUsTimeFormat() {
                    return this._utilConfig.get("app", "US_time_format")
                }
                getHomeParticipant() {
                    return this._homeParticipant
                }
                setHomeScore(e) {
                    this._homeScore = e
                }
                getHomeScore() {
                    return this._homeScore
                }
                getAwayParticipant() {
                    return this._awayParticipant
                }
                setAwayScore(e) {
                    this._awayScore = e
                }
                getAwayScore() {
                    return this._awayScore
                }
                getWinner() {
                    return this._data.getWinner()
                }
                getFullTimeWinner() {
                    return this._data.getFtWinner()
                }
                hasPreview() {
                    return this._data.hasPreview()
                }
                hasFinalResultOnly() {
                    return this._data.hasFinalResultOnly()
                }
                getFinalResultOnlyIcon() {
                    return new Si(this._data, this._utilEnviroment, this._utilTrans)
                }
                getMyGameIcon() {
                    return new mi(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans, this._myGames, this._utilSport)
                }
                getPreviewIcon() {
                    return new vi(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans)
                }
                getWinLoseIcon() {
                    return new Ci(this._helperWinLose, this._data, this._utilEnviroment, this._utilPage)
                }
                getHomeWinnerIcon() {
                    return new pi(S.a.HOME, this._data, this._utilEnviroment, this._utilTrans)
                }
                getAwayWinnerIcon() {
                    return new pi(S.a.AWAY, this._data, this._utilEnviroment, this._utilTrans)
                }
                getInfoIcon() {
                    return new Ii(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans)
                }
                getAudioCommentsIcon() {
                    return new Hi(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans)
                }
                getTvIcon() {
                    return new Ni(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans, this._moduleLoader)
                }
                getTvIconMobile() {
                    return new Mi(this._data, this._utilConfig)
                }
                getLineupIcon() {
                    return new Ri(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans)
                }
                getLiveBettingIcon() {
                    return new Oi(this._data, this._utilConfig, this._utilEnviroment, this._utilTrans, this._utilUrl, this._application)
                }
                getHandlerOnClick() {
                    return () => {
                        var e;
                        return this._utilSport.hasDisabledDetail(this._data.getSportId()) || (this._utilEnviroment.detailOpen(this._data.getId()), null === (e = this._utilEnviroment.getEventTrackingObject()) || void 0 === e || e.track_click("iframe-click", "detail")), !0
                    }
                }
                getTitle() {
                    if (this.hasDisabledDetail()) return "";
                    let e = "";
                    return e = this._utilSport.isRacingSport(this._data.getSportId()) ? "TRANS_CLICK_FOR_DETAIL" : this.isDuel() ? "TRANS_CLICK_FOR_MATCH_DETAIL" : "TRANS_CLICK_FOR_PLAYER_CARD", this._utilTrans.translate(e)
                }
                getOddsManagerAsync() {
                    return new Promise(e => cjs.Api.loader.get("oddsManager").call(e))
                }
                getOddsItem(e, t) {
                    return new Promise(n => wi(this, void 0, void 0, (function*() {
                        const a = yield this.getOddsManagerAsync();
                        n(a.getContent(e, this._data, t))
                    })))
                }
                showOdds(e) {
                    const t = this._utilConfig.get("app", "project_type", "name") == da.ASS,
                        n = e === ce.PAGE_TYPE_SPORT;
                    return t && n
                }
                getOddsHeaderTitle() {
                    return new Promise(e => wi(this, void 0, void 0, (function*() {
                        const t = yield this.getOddsManagerAsync();
                        e(t.getOddsHeaderTitle())
                    })))
                }
                getOddsLayout() {
                    return wi(this, void 0, void 0, (function*() {
                        return this._getOddsLayoutByOddsType(yield this.getOddsManagerAsync())
                    }))
                }
                getMainBookmakerId() {
                    return this._data.getMainBookmakerId()
                }
                getIsLive() {
                    return this._data.isLive()
                }
                getIsMarkedAsLive() {
                    return this._data.isMarkedAsLive()
                }
                getIsFinished() {
                    return this._data.isFinished()
                }
                getIsScheduled() {
                    return this._data.isScheduled()
                }
                hasTvStream() {
                    return this.getTvStreamIcon().isEnabled()
                }
                getTeam3CharName() {
                    return this._data.getTeam3CharName()
                }
                getIsEventWithoutScoreAndNotRetired() {
                    return this._data.isEventWithoutScoreAndNotRetired()
                }
                isAllowedByTabId(e) {
                    switch (e) {
                        case _.a.TAB_ID_LIVE:
                            if (!this.getIsLive() && !this.getIsMarkedAsLive()) return !1;
                            break;
                        case _.a.TAB_ID_FINISHED:
                            if (!this.getIsFinished()) return !1;
                            break;
                        case _.a.TAB_ID_SCHEDULED:
                            if (!this.getIsScheduled()) return !1;
                            break;
                        case _.a.TAB_ID_TV:
                            if (!this.hasTvStream()) return !1;
                            break;
                        case _.a.TAB_ID_MYGAMES:
                        case _.a.TAB_ID_MYGAMES_GROUPS:
                            if (!this._myGames.check(this.getEventId()) && !this._myGames.isAddedWholeTournament(this.getLeagueId())) return !1
                    }
                    return !0
                }
                getEachWayHandicapValue() {
                    const e = this._data.getEachWayHandicap();
                    let t = "";
                    return e && (t = e.split("|")[0] || ""), t
                }
                hasDisabledDetail() {
                    return this._utilSport.hasDisabledDetail(this._data.getSportId())
                }
                getMyTeamsSortKey() {
                    return this._data.getStageSortKey(), this._data.getStartUTime().toString()
                }
                getRound() {
                    return this._data.getRound()
                }
                getIsStatic() {
                    return this._isStatic
                }
                isInteruptedOrLiveOrAfterDay() {
                    return this._data.isAfterDay() || this._data.isInterrupted() || this._data.isLive()
                }
                getShowDateWithTime(e) {
                    const t = e === ce.PAGE_TYPE_CATEGORY;
                    return (this._isStatic || t) && !this.isInteruptedOrLiveOrAfterDay()
                }
                getIsParticipantPage() {
                    return this._utilPage.isParticipantPage()
                }
                _currentYearDate(e) {
                    return (new Date).getFullYear() === new Date(1e3 * e).getFullYear()
                }
                _isCategoryPage() {
                    return this._utilPage.isCountryPage() && this._utilSport.hasCategoryPage(this._data.getSportId())
                }
                _getOddsLayoutByOddsType(e) {
                    return "us" == this._utilConfig.get("app", "odds", "layout") ? W.TYPE_US_LAYOUT : e.isAhOverrideActive(this.getSportId()) ? W.TYPE_AH : "1x2" == e.getOddsTypeBySport(this.getSportId()) ? W.TYPE_1X2 : W.TYPE_12
                }
                getTvStreamIcon() {
                    return new yi.a(this._data, this._utilEnviroment, this._utilConfig, this._utilTrans, new Li.a(this._utilEnviroment.getLocalStorage()))
                }
                getStartUTime() {
                    return this._data.getStartUTime()
                }
                getEndUTime() {
                    return this._data.getEndUTime()
                }
            }
            class fi {
                constructor(e, t) {
                    this._data = e, this._side = t
                }
                getResultTitle(e) {
                    return ""
                }
                getResult(e) {
                    const t = {};
                    t[v.a.PART_1] = 1, t[v.a.PART_2] = 2, t[v.a.PART_3] = 3, t[v.a.PART_4] = 4, t[v.a.PART_5] = 5, t[v.a.PART_6] = 6, t[v.a.PART_7] = 7, t[v.a.PART_8] = 8, t[v.a.PART_9] = 9;
                    const n = {};
                    n[v.a.PART_1_EX] = 1, n[v.a.PART_2_EX] = 2, n[v.a.PART_3_EX] = 3, n[v.a.PART_4_EX] = 4, n[v.a.PART_5_EX] = 5;
                    let a = "";
                    if (void 0 !== t[e]) {
                        const n = t[e];
                        a = this._side == S.a.HOME ? this._data.getHomeScorePart(n) : this._data.getAwayScorePart(n)
                    } else if (void 0 !== n[e]) {
                        const t = n[e];
                        a = this._side == S.a.HOME ? this._data.getHomeTiebreakPart(t) : this._data.getAwayTiebreakPart(t)
                    } else switch (e) {
                        case v.a.CURRENT:
                            a = this._getCurrentResult();
                            break;
                        case v.a.FULL_TIME:
                            a = this._side == S.a.HOME ? this._data.getHomeFullTimeScore() : this._data.getAwayFullTimeScore();
                            break;
                        case v.a.PART_X:
                            a = this._side == S.a.HOME ? this._data.getHomeExtraScore() : this._data.getAwayExtraScore();
                            break;
                        case v.a.GAME:
                            a = "", this._data.isFinished() && !this._data.isInterrupted() || (a = this._side == S.a.HOME ? this._data.getHomeGameScore() : this._data.getAwayGameScore());
                            break;
                        case v.a.GAMES_IN_LAST_SET:
                            a = this._side == S.a.HOME ? this._data.getHomeGamesInLastSet() : this._data.getAwayGamesInLastSet();
                            break;
                        case v.a.HITS:
                            a = this._side == S.a.HOME ? this._data.getHomeHitsScore() : this._data.getAwayHitsScore();
                            break;
                        case v.a.ERRORS:
                            a = this._side == S.a.HOME ? this._data.getHomeErrorsScore() : this._data.getAwayErrorsScore();
                            break;
                        case v.a.PART_PESAPALLO_X1:
                            a = this._side == S.a.HOME ? this._data.getHomePesapalloFirstHalfScore() : this._data.getAwayPesapalloFirstHalfScore();
                            break;
                        case v.a.PART_PESAPALLO_X2:
                            a = this._side == S.a.HOME ? this._data.getHomePesapalloSecondHalfScore() : this._data.getAwayPesapalloSecondHalfScore();
                            break;
                        case v.a.PART_PESAPALLO_PEN:
                            a = this._side == S.a.HOME ? this._data.getHomePesapalloPenaltiesScore() : this._data.getAwayPesapalloPenaltiesScore()
                    }
                    return null !== a ? a.toString() : ""
                }
                _getCurrentResult() {
                    return this._data.isResultEnabled() ? this._side == S.a.HOME ? this._data.getHomeScore() : this._data.getAwayScore() : ""
                }
            }
            class ki extends fi {
                constructor(e, t, n) {
                    super(e, t), this._resultHelper = n
                }
                getResultTitle(e) {
                    const t = super.getResult(e);
                    return this._resultHelper.formatScoreTooltip(t)
                }
                getResult(e) {
                    const t = super.getResult(e);
                    return e == v.a.CURRENT ? this._resultHelper.formatScore(t) : this._resultHelper.formatScorePart(t)
                }
            }
            class Gi {
                constructor(e) {
                    this._eventItem = e
                }
                getHomeContent() {
                    return this._getContent(this._eventItem.getStatsResultsCurrentLegsHome(), this._eventItem.getStatsResultsResultHome())
                }
                getAwayContent() {
                    return this._getContent(this._eventItem.getStatsResultsCurrentLegsAway(), this._eventItem.getStatsResultsResultAway())
                }
                _getContent(e, t) {
                    let n = "";
                    if (this._eventItem.isResultEnabled()) {
                        let a = null;
                        this._eventItem.isDelayed() || (a = this._eventItem.isPlayingOnSets() ? e : t), null != a && (n = a)
                    }
                    return n
                }
                isStarted() {
                    return !(this._eventItem.isPlayingOnSets() || !this._eventItem.isLive() && !this._eventItem.isFinished())
                }
                isPlaying() {
                    return !(this._eventItem.isPlayingOnSets() || !this._eventItem.isLive() && !this._eventItem.isPending())
                }
            }
            class Ui {
                constructor(e) {
                    this._eventItem = e
                }
                getHomeContent() {
                    return this._getContent(this._eventItem.getStatsResultsResultHome())
                }
                getAwayContent() {
                    return this._getContent(this._eventItem.getStatsResultsResultAway())
                }
                _getContent(e) {
                    let t = "";
                    return this._eventItem.isResultEnabled() && this._eventItem.isPlayingOnSets() && !this._eventItem.isDelayed() && null != e && (t = e), t
                }
                isStarted() {
                    return !(!this._eventItem.isPlayingOnSets() || !this._eventItem.isLive() && !this._eventItem.isFinished())
                }
                isPlaying() {
                    return !(!this._eventItem.isPlayingOnSets() || !this._eventItem.isLive() && !this._eventItem.isPending())
                }
            }
            class Bi {
                constructor(e) {
                    this._eventItem = e
                }
                getHomeContent() {
                    return this._getContent(this._eventItem.getStatsResultsCurrentPointsHome())
                }
                getAwayContent() {
                    return this._getContent(this._eventItem.getStatsResultsCurrentPointsAway())
                }
                _getContent(e) {
                    return null != e && this._eventItem.isResultEnabled() && !this._eventItem.isDelayed() ? e : ""
                }
            }
            class Wi {
                constructor(e, t, n, a, r, i) {
                    this._data = e, this._utilConfig = t, this._utilEnviroment = n, this._utilTrans = a, this._serviceText = r, this._iconText = i
                }
                isEnabled() {
                    return !0
                }
                getTitle() {
                    return this._utilTrans.translate(this._serviceText)
                }
                getHandlerOnClick() {
                    return e => !0
                }
                getHandlerOnMouseEnter() {
                    return e => {
                        var t;
                        return e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_over("iframe-icon-mouseover", "service"), !0
                    }
                }
                getHandlerOnMouseLeave() {
                    return e => {
                        var t;
                        return this._utilEnviroment.getTooltipObject().hide(e.target), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_out(), !0
                    }
                }
                getIconText() {
                    return this._iconText
                }
                getTooltipObject() {
                    return this._utilEnviroment.getTooltipObject()
                }
            }
            class xi {
                constructor(e, t, n) {
                    this._text = e, this._title = t, this._utilEnviroment = n
                }
                isEnabled() {
                    return !0
                }
                getTitle() {
                    return this._title
                }
                getText() {
                    return this._text
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), !0)
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }! function(e) {
                e[e.NONE = -1] = "NONE", e[e.RANK = 1] = "RANK", e[e.POINTS = 2] = "POINTS", e[e.JUMP_ROUND_1 = 3] = "JUMP_ROUND_1", e[e.JUMP_ROUND_2 = 4] = "JUMP_ROUND_2", e[e.TIME = 5] = "TIME", e[e.GAP = 6] = "GAP", e[e.EVENT_PARTICIPANT_SORT_KEY = 7] = "EVENT_PARTICIPANT_SORT_KEY", e[e.STOP_REASON = 8] = "STOP_REASON", e[e.PENALTY_LAP = 9] = "PENALTY_LAP", e[e.MISSED_SHOT = 10] = "MISSED_SHOT", e[e.STOP_EVENT_STAGE = 11] = "STOP_EVENT_STAGE", e[e.POINTS_ROUND_1 = 12] = "POINTS_ROUND_1", e[e.POINTS_ROUND_2 = 13] = "POINTS_ROUND_2", e[e.TIME_ROUND_1 = 14] = "TIME_ROUND_1", e[e.TIME_ROUND_2 = 15] = "TIME_ROUND_2", e[e.STOP_REASON_ROUND_1 = 16] = "STOP_REASON_ROUND_1", e[e.STOP_REASON_ROUND_2 = 17] = "STOP_REASON_ROUND_2", e[e.ON_TRACK = 18] = "ON_TRACK", e[e.STOP_REASON_TEXT = 19] = "STOP_REASON_TEXT", e[e.LAPS_DISTANCE = 20] = "LAPS_DISTANCE", e[e.JUMP_COUNT = 21] = "JUMP_COUNT", e[e.RIDES = 22] = "RIDES", e[e.WINS = 23] = "WINS", e[e.ROUND_1 = 24] = "ROUND_1", e[e.ROUND_2 = 25] = "ROUND_2", e[e.ROUND_3 = 26] = "ROUND_3", e[e.ROUND_4 = 27] = "ROUND_4", e[e.ROUND_5 = 28] = "ROUND_5", e[e.ROUND_6 = 29] = "ROUND_6", e[e.ROUND_7 = 30] = "ROUND_7", e[e.ROUND_8 = 31] = "ROUND_8", e[e.ROUND_9 = 32] = "ROUND_9", e[e.ROUND_10 = 33] = "ROUND_10", e[e.ROUND_11 = 34] = "ROUND_11", e[e.ROUND_12 = 35] = "ROUND_12", e[e.ROUND_13 = 36] = "ROUND_13", e[e.ROUND_14 = 37] = "ROUND_14", e[e.ROUND_15 = 38] = "ROUND_15", e[e.ROUND_16 = 39] = "ROUND_16", e[e.ROUND_17 = 40] = "ROUND_17", e[e.ROUND_18 = 41] = "ROUND_18", e[e.ROUND_19 = 42] = "ROUND_19", e[e.ROUND_20 = 43] = "ROUND_20", e[e.SEMIFINAL_1 = 44] = "SEMIFINAL_1", e[e.SEMIFINAL_2 = 45] = "SEMIFINAL_2", e[e.FINAL_ROUND = 46] = "FINAL_ROUND", e[e.LAPS = 47] = "LAPS", e[e.GRID = 48] = "GRID", e[e.PITSTOPS = 49] = "PITSTOPS", e[e.DARTS_180S = 50] = "DARTS_180S", e[e.DARTS_140_PLUS = 51] = "DARTS_140_PLUS", e[e.DARTS_100_PLUS = 52] = "DARTS_100_PLUS", e[e.DARTS_CHECKOUTS = 53] = "DARTS_CHECKOUTS", e[e.DARTS_CHECKOUTS_MAX = 54] = "DARTS_CHECKOUTS_MAX", e[e.DARTS_AVERAGES = 55] = "DARTS_AVERAGES", e[e.DARTS_LEG_WON = 56] = "DARTS_LEG_WON", e[e.LEG = 57] = "LEG", e[e.ROUND = 58] = "ROUND", e[e.PREV_POINTS = 59] = "PREV_POINTS", e[e.CURRENT_POINTS = 60] = "CURRENT_POINTS", e[e.OPPONENT_POINTS = 61] = "OPPONENT_POINTS", e[e.RESULT = 62] = "RESULT", e[e.LEG_RESULT = 63] = "LEG_RESULT", e[e.IS_PLAYING = 64] = "IS_PLAYING", e[e.CURRENT_LEG_RESULT = 65] = "CURRENT_LEG_RESULT", e[e.RUN_RATE = 66] = "RUN_RATE"
            }(Fi || (Fi = {}));
            class Xi {
                constructor(e, t, n, a) {
                    this._eventItem = e, this._historyItem = t, this._utilEnviroment = n.createEnviroment(), this._utilTrans = n.createTrans(), this._helperStatsResult = a.createStatsResults()
                }
                getContent(e) {
                    return this._helperStatsResult.getRank(this._eventItem, e)
                }
                getTitle() {
                    return this._helperStatsResult.getParticipantStatusTrans(this._getParticipantStatusId(), !1)
                }
                getParticipantStatus() {
                    return this._helperStatsResult.getParticipantStatusTrans(this._getParticipantStatusId(), !0)
                }
                getShift() {
                    const e = this._getCurrentRank(),
                        t = this._getHistoryRank();
                    return !this.isCutOff() && null != e && null != t && this._getDisplayPosition() ? e - t : 0
                }
                isCutOff() {
                    return Boolean(this._eventItem.getParticipantStatus())
                }
                getHandlerOnMouseEnter() {
                    return e => (this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
                _getCurrentRank() {
                    const e = this._eventItem.getRank();
                    return e ? parseInt(e) : null
                }
                _getHistoryRank() {
                    const e = this._utilEnviroment.getFeedIndexes(),
                        t = this._historyItem.getValue(e.SHAREDINDEXES_RANK);
                    return null != t ? parseInt(t) : null
                }
                _getDisplayPosition() {
                    return this._eventItem.isParticipantLive() || this._eventItem.wasParticipantLive()
                }
                _getParticipantStatusId() {
                    return (this._eventItem.isStatsResults() ? this._eventItem.getStatsResultsStopReason() : this._eventItem.getParticipantStatus()) || 0
                }
            }
            class Yi extends Xi {
                _getCurrentRank() {
                    let e = this._eventItem.getStatsResultsRank();
                    if (!parseInt(this._historyItem.getStatsResults(Fi.RANK))) {
                        const t = this._eventItem.getStatsResultsSortKey();
                        e = null != t ? parseInt(t) : null
                    }
                    return e
                }
                _getHistoryRank() {
                    let e = parseInt(this._historyItem.getStatsResults(Fi.RANK));
                    if (!e) {
                        const t = this._historyItem.getStatsResults(Fi.EVENT_PARTICIPANT_SORT_KEY);
                        e = null != t ? parseInt(t) : null
                    }
                    return e
                }
                _getDisplayPosition() {
                    const e = this._utilEnviroment.getFeedIndexes(),
                        t = this._historyItem.getValue(e.SHAREDINDEXES_EVENT_STAGE_TYPE_ID) == Fr.a.LIVE;
                    return this._eventItem.isLive() || t
                }
                isCutOff() {
                    return Boolean(this._eventItem.getStatsResultsStopReason())
                }
            }
            var Ki, Vi, ji = n(255),
                Ji = n(256);
            class $i {
                constructor(e) {
                    this._utilTrans = e
                }
                getCurrentPointsShortText() {
                    return this._utilTrans.translate("TRANS_DARTS_SHORT_CURRENT_POINTS")
                }
                getCurrentPointsTitle() {
                    return this._utilTrans.translate("TRANS_DARTS_CURRENT_POINTS")
                }
                getLegsShortText() {
                    return this._utilTrans.translate("TRANS_DARTS_SHORT_LEGS")
                }
                getLegsTitle() {
                    return this._utilTrans.translate("TRANS_DARTS_LEGS")
                }
                getSetsShortText() {
                    return this._utilTrans.translate("TRANS_DARTS_SHORT_SETS")
                }
                getSetsTitle() {
                    return this._utilTrans.translate("TRANS_DARTS_SETS")
                }
            }
            class Qi {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_RANK")
                }
                getHoleText() {
                    return this._utilTrans.translate("TRANS_GOLF_HOLE_COL")
                }
                getHoleTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_HOLES_PLAYED").replace(": %s", "")
                }
                getParText() {
                    return this._utilTrans.translate("TRANS_GOLF_SHORT_PAR")
                }
                getParTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_PAR")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_PLAYER")
                }
                getTodayText() {
                    return this._utilTrans.translate("TRANS_GOLF_TODAY")
                }
                getTodayTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_TODAY")
                }
                getTotalText() {
                    return this._utilTrans.translate("TRANS_GOLF_SHORT_TOTAL")
                }
                getTotalTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_TOTAL")
                }
                getFirstRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_FIRST_ROUND")
                }
                getSecondRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_SECOND_ROUND")
                }
                getThirdRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_THIRD_ROUND")
                }
                getFourthRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_FOURTH_ROUND")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
            }
            class Zi {
                constructor(e) {
                    this._utilTrans = e
                }
                getAgeText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_AGE")
                }
                getAgeTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_AGE_OF_HORSE")
                }
                getDistanceText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_DIST")
                }
                getDistanceTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD")
                }
                getHorseText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_HORSE")
                }
                getHorseTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_HORSE")
                }
                getStartingPriceText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_SP")
                }
                getStartingPriceTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_STARTING_PRICE")
                }
                getTeamText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_JOCKEY") + "/" + this._utilTrans.translate("TRANS_HORSE_RACING_TRAINER")
                }
                getTeamTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_JOCKEY") + "/" + this._utilTrans.translate("TRANS_HORSE_RACING_TRAINER")
                }
                getWeightText() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_WEIGHT")
                }
                getWeightTitle() {
                    return this._utilTrans.translate("TRANS_HORSE_RACING_WEIGHT_CARRYING_IN_STONES_AND_LBS")
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
            }
            class zi {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_RANK")
                }
                getGridText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_GRID")
                }
                getGridTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_GRID")
                }
                getLapsText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_LAPS")
                }
                getLapsTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_LAPS")
                }
                getPitStopsText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_PITSTOPS")
                }
                getPitStopsTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_PITSTOPS")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_PLAYER")
                }
                getTeamText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM")
                }
                getTeamTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_TIME")
                }
                getStageText() {
                    return this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            class qi {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_RANK")
                }
                getGridText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_GRID")
                }
                getGridTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_GRID")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
                getLapsText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_LAPS")
                }
                getLapsTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_LAPS")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_PLAYER")
                }
                getTeamText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_TEAM")
                }
                getTeamTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_TEAM")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_TIME")
                }
                getStageText() {
                    return this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            class es {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getDifferenceText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF")
                }
                getDifferenceTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getTotalText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL")
                }
                getTotalTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL")
                }
            }
            class ts {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getDifferenceText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFF")
                }
                getDifferenceTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFFERENCE")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME")
                }
            }
            class ns {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getDifferenceText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_DIFF")
                }
                getDifferenceTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_DIFFERENCE")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getShootingText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_SHOOTING")
                }
                getShootingTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_SHOOTING")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_BIATHLON_TIME")
                }
            }
            class as {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getJump1LengthText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1")
                }
                getJump1LengthTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1")
                }
                getJump2LengthText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2")
                }
                getJump2LengthTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getPoints1Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1")
                }
                getPoints1Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1")
                }
                getPoints2Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2")
                }
                getPoints2Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2")
                }
                getPointsTotalText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL")
                }
                getPointsTotalTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL")
                }
            }
            class rs {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t.createTrans(), this._utilSport = t.createSport()
                }
                getContent() {
                    const e = this._getParticipantStatus();
                    if (e) return e;
                    const t = this._getCurrentDistance();
                    if (t) return t;
                    let n = "";
                    const a = this._eventItem.getLapsDistance();
                    if (null != a && a > 0 && this._eventItem.getLeague().isRaceTypeRace()) {
                        n += "+" + a;
                        const e = this._utilSport.getRacingSportShortLapsLabel(this._eventItem.getSportId());
                        e && (n += " " + e)
                    } else {
                        const e = this._eventItem.getLapTime(),
                            t = this._eventItem.getGap(),
                            a = this._eventItem.getStatsSortKey();
                        null != e && 1 == a ? n += e : null != t && "" != t && 1 != a ? n += t : null != e && (n += e)
                    }
                    return n
                }
                getClasses() {
                    const e = [],
                        t = this._eventItem.getStatsSortKey();
                    this._eventItem.isParticipantLive() && e.push("playing");
                    const n = this._eventItem.getLapTime();
                    return 1 != t || null != n && "" != n || e.push("leader"), e.join(" ")
                }
                _getCurrentDistance() {
                    return ""
                }
                _getParticipantStatus() {
                    if (this._eventItem.getParticipantStatus()) {
                        const e = this._eventItem.getParticipantStatusSubType();
                        if (e) return this._utilTrans.translate("TRANS_DC_INCIDENT_SUBTYPE_" + e);
                        let t = "";
                        switch (this._eventItem.getParticipantStatus()) {
                            case 280:
                                t = "TRANS_DC_SHORT_CUT_OFF";
                                break;
                            case 281:
                                t = "TRANS_DC_SHORT_DISQUALIFIED";
                                break;
                            case 282:
                                t = "TRANS_DC_SHORT_DID_NOT_START";
                                break;
                            case 283:
                                t = "TRANS_DC_SHORT_DID_NOT_FINISH";
                                break;
                            case 284:
                                t = "TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH";
                                break;
                            case 285:
                                t = "TRANS_DC_SHORT_WITHDRAWN";
                                break;
                            case 291:
                                t = "TRANS_DC_SHORT_RETIRED";
                                break;
                            case 294:
                                t = "TRANS_DC_SHORT_DID_NOT_CLASSIFIED";
                                break;
                            case 300:
                                t = "TRANS_DC_SHORT_NOT_QUALIFIED";
                                break;
                            case 301:
                                t = "TRANS_DC_SHORT_OWNER_POINTS"
                        }
                        return this._utilTrans.translate(t)
                    }
                    return ""
                }
            }
            class is extends rs {
                getClasses() {
                    const e = [],
                        t = this._eventItem.getStatsSortKey();
                    this._eventItem.isParticipantLive() && e.push("playing");
                    const n = this._eventItem.getCurrentDistance();
                    return this._eventItem.isLive() && n && 1 == t && e.push("current-distance"), e.join(" ")
                }
                _getCurrentDistance() {
                    if (this._eventItem.isLive()) {
                        const e = this._eventItem.getCurrentDistance();
                        if (e && 1 == this._eventItem.getStatsSortKey()) return e + " " + this._utilTrans.translate("TRANS_CYCLING_KM")
                    }
                    return ""
                }
            }
            class ss {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_RANK")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_PLAYER")
                }
                getRidesText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_RIDES")
                }
                getRidesTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_RIDES")
                }
                getWinsText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_WINS")
                }
                getWinsTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_WINS")
                }
                getPointsText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_POINTS")
                }
                getPointsTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_MOTO_RACING_POINTS")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
                getStageText() {
                    return this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            class ls {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_RANK")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_PLAYER")
                }
                getTeamText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM")
                }
                getTeamTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_TEAM")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_MOTORSPORT_AUTO_RACING_TIME")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
                getStageText() {
                    return this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            class os {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getDifferenceText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF")
                }
                getDifferenceTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getRun1Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1")
                }
                getRun1Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1")
                }
                getRun2Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2")
                }
                getRun2Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2")
                }
                getTotalText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL")
                }
                getTotalTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL")
                }
            }
            class cs {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_RANK")
                }
                getJumpCountText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT")
                }
                getJumpCountTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getPoints1Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1")
                }
                getPoints1Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1")
                }
                getPoints2Text() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2")
                }
                getPoints2Title() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2")
                }
                getPointsTotalText() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL")
                }
                getPointsTotalTitle() {
                    return this._utilTrans.translate("TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL")
                }
            }
            class gs {
                constructor(e, t, n, a) {
                    this._eventItem = e, this._historyItem = t, this._utilEnviroment = n.createEnviroment(), this._helperStatsResults = a.createStatsResults(), this._statsResultsIndexGenerator = a.createStatsResultsIndexGenerator()
                }
                getContent() {
                    return this._helperStatsResults.getGap(this._eventItem)
                }
                getClasses() {
                    const e = [];
                    this._eventItem.getSportId() == _n.a.WINTER_SPORTS_ALPINE_SKIING ? this._eventItem.isLive() && !this._eventItem.isStatsResultsCutOff() && e.push("playing") : this._eventItem.getStatsResultsOnTrack() && e.push("playing");
                    const t = this._eventItem.getStatsResultsRank(),
                        n = this._eventItem.getCurrentDistance();
                    this._eventItem.isLive() && n && 1 == t && e.push("current-distance");
                    const a = this._historyItem.getValue("lastUpdate") || {},
                        r = a[this._utilEnviroment.getFeedIndexes().SHAREDINDEXES_CURRENT_DISTANCE] || 0,
                        i = this._statsResultsIndexGenerator.get(Fi.GAP) || 0,
                        s = a[this._statsResultsIndexGenerator.get(Fi.LAPS_DISTANCE) || 0] || a[i] || 0;
                    return (!n && 1 == t || r && !s && 1 != t) && e.push("no-highlight"), e.join(" ")
                }
            }
            class _s {
                constructor(e, t, n) {
                    this._data = e, this._utilEnviroment = t, this._utilTrans = n
                }
                getValue() {
                    let e = this._data.getGolfFinalResult();
                    if (!e) return "";
                    const t = this._data.getGolfHolesPlayed();
                    return t && (e += " (" + t + ")"), e
                }
                getTitle() {
                    const e = this._data.getGolfHolesPlayed() || "";
                    return e && this._data.isFinished() ? this._utilTrans.translate("TRANS_GOLF_HOLES_PLAYED").replace("%s", e) : ""
                }
                getHandlerOnClick() {
                    return e => (e.stopPropagation(), !0)
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this._utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            class hs {
                constructor(e) {
                    this._utilTrans = e
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_RANK")
                }
                getHoleText() {
                    return this._utilTrans.translate("TRANS_GOLF_HOLE_COL")
                }
                getHoleTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_HOLES_PLAYED").replace(": %s", "")
                }
                getPointsText() {
                    return this._utilTrans.translate("TRANS_POINTS")
                }
                getPointsTitle() {
                    return this._utilTrans.translate("TRANS_POINTS")
                }
                getPlayerText() {
                    return this._utilTrans.translate("TRANS_PLAYER")
                }
                getPlayerTitle() {
                    return this._utilTrans.translate("TRANS_PLAYER")
                }
                getTotalText() {
                    return this._utilTrans.translate("TRANS_GOLF_SHORT_TOTAL")
                }
                getTotalTitle() {
                    return this._utilTrans.translate("TRANS_GOLF_TOTAL")
                }
                getFirstRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_FIRST_ROUND")
                }
                getSecondRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_SECOND_ROUND")
                }
                getThirdRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_THIRD_ROUND")
                }
                getFourthRoundTitle() {
                    return this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_FOURTH_ROUND")
                }
                getWinnerText() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER_SHORT")
                }
                getWinnerTitle() {
                    return this._utilTrans.translate("TRANS_ODDS_COMPARISON_WINNER")
                }
            }! function(e) {
                e[e.TST_QUALIFICATION = 1] = "TST_QUALIFICATION", e[e.TST_MAIN = 2] = "TST_MAIN"
            }(Ki || (Ki = {}));
            class Es {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t.createTrans()
                }
                getContentAfterDay() {
                    return this._getTemplateAfterText("AFTER_DAY")
                }
                getContentAfterRound() {
                    return this._getTemplateAfterText("AFTER_ROUND")
                }
                getContentAfterStage() {
                    const e = this._eventItem.getStage();
                    if (e >= Fr.a.AFTER_STAGE_1 && e <= Fr.a.AFTER_STAGE_30) {
                        const t = (e - Fr.a.AFTER_STAGE_1 + 1).toString(),
                            n = this._eventItem.isMotorSport() ? "TRANS_DEFAULT_MATCH_STATUS_AFTER_SS" : "TRANS_DEFAULT_MATCH_STATUS_AFTER_STAGE";
                        return " - " + this._utilTrans.translate(n, [t])
                    }
                    if (e >= Fr.a.AFTER_SPECIAL_STAGE_1 && e <= Fr.a.AFTER_SPECIAL_STAGE_1_B) {
                        const t = e == Fr.a.AFTER_SPECIAL_STAGE_1_B ? "1 B" : (e - Fr.a.AFTER_SPECIAL_STAGE_1 + 1).toString(),
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_SS";
                        return " - " + this._utilTrans.translate(n, [t])
                    }
                    return ""
                }
                getContentCanceled() {
                    return this._eventItem.isCanceled() ? "(" + this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_CANCELED") + ")" : ""
                }
                getContentName() {
                    return this._eventItem.getLeague().getStageName()
                }
                getContentDelayed() {
                    return this._eventItem.isDelayed() ? "(" + this._utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_DELAYED") + ")" : ""
                }
                _getTemplateAfterText(e) {
                    const t = this._eventItem.getStage();
                    let n = "";
                    if ("AFTER_DAY" === e) switch (t) {
                        case Fr.a.AFTER_DAY1:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY1";
                            break;
                        case Fr.a.AFTER_DAY2:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY2";
                            break;
                        case Fr.a.AFTER_DAY3:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY3";
                            break;
                        case Fr.a.AFTER_DAY4:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY4";
                            break;
                        case Fr.a.AFTER_DAY5:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY5";
                            break;
                        case Fr.a.AFTER_DAY6:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY6";
                            break;
                        case Fr.a.AFTER_DAY7:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY7";
                            break;
                        case Fr.a.AFTER_DAY8:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY8";
                            break;
                        case Fr.a.AFTER_DAY9:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY9";
                            break;
                        case Fr.a.AFTER_DAY10:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY10"
                    } else if ("AFTER_ROUND" === e) switch (t) {
                        case Fr.a.AFTER_ROUND1:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND1";
                            break;
                        case Fr.a.AFTER_ROUND2:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND2";
                            break;
                        case Fr.a.AFTER_ROUND3:
                            n = "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND3"
                    }
                    const a = this._utilTrans.translate(n);
                    return a ? " - " + a : ""
                }
                getContentRace() {
                    const e = this._eventItem.getLeague().getMeetingName();
                    return (e ? e + ": " : "") + this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            class ds {
                constructor(e, t) {
                    this._eventItem = e, this._helperStatsResult = t.createStatsResults()
                }
                getContent() {
                    return this._helperStatsResult.getRankNoLive(this._eventItem)
                }
                getClasses() {
                    const e = [];
                    return this._eventItem.getParticipantStatus() && e.push("player_cut_off"), this._eventItem.isLive() ? this._eventItem.isStatsResultsCutOff() ? e.push("finished") : e.push("playing") : this._eventItem.isFinished() ? e.push("finished") : e.push("scheduled"), e.join(" ")
                }
            }! function(e) {
                e[e.TEST = 5149866] = "TEST", e[e.ODI = 5149867] = "ODI", e[e.T20 = 5149868] = "T20"
            }(Vi || (Vi = {}));
            let Ts = (() => {
                class e {
                    getName() {
                        return e.NAME
                    }
                    render(e) {
                        const t = this._renderPart(e.getFirstPart()),
                            n = this._renderPart(e.getSecondPart());
                        let a = t;
                        return n && (a += " & " + n), a
                    }
                    _renderPart(e) {
                        let t = "";
                        if (e.isValid()) {
                            const n = e.getCssClass(),
                                a = e.getRuns(),
                                r = e.getWickets(),
                                i = null !== r ? "/" + r : "",
                                s = e.getDeclared(),
                                l = e.getOversAndBalls();
                            t += `<span class="${n.trim()}">${a}${i}${s}`, t += l ? ` (${l})` : "", t += "</span>"
                        }
                        return t
                    }
                }
                return e.NAME = "html", e
            })();
            (() => {
                class e {
                    getName() {
                        return e.NAME
                    }
                    render(e) {
                        const t = this._renderPart(e.getFirstPart()),
                            n = this._renderPart(e.getSecondPart()),
                            a = !t && !n;
                        let r;
                        return r = e.isEventStageFinished() || a ? '<span class="scoreboard-divider">-</span>' : n || t, r
                    }
                    _renderPart(e) {
                        let t = "";
                        if (e.isValid()) {
                            const n = e.getCssClass(),
                                a = e.getRuns(),
                                r = e.getWickets(),
                                i = null !== r ? "/" + r : "",
                                s = e.getDeclared(),
                                l = e.getOversAndBallsWithOv();
                            t += `<span class="scoreboard ${n.trim()}">${a}${i}${s}</span>`, t += "<br />", t += `<span class="scoreboard-overs ${n.trim()}">${l?`(${l})`:""}</span>`
                        }
                        return t
                    }
                }
                e.NAME = "htmlDetailHeader"
            })();
            class us {
                constructor(e, t, n) {
                    this.value = e, this.utilEnviroment = t, this.utilTrans = n
                }
                isEnabled() {
                    return this.value > 0
                }
                getTitle() {
                    return this.utilTrans.translate("TRANS_GOAL_UNDER_REVIEW")
                }
                getHandlerOnClick() {
                    return e => !0
                }
                getHandlerOnMouseEnter() {
                    return e => (e.target.title = this.getTitle(), this.utilEnviroment.getTooltipObject().show(e.target, e, !0, "live-table"), !0)
                }
                getHandlerOnMouseLeave() {
                    return e => (this.utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
            }
            var Ss;
            ! function(e) {
                e[e.FLASHSCORE_CO_KR = 34] = "FLASHSCORE_CO_KR", e[e.FLASHSCORE_CO_JP = 39] = "FLASHSCORE_CO_JP"
            }(Ss || (Ss = {}));
            class ms {
                constructor(e, t, n) {
                    this._data = e, this._utilFactory = t, this._helperFactory = n
                }
                _hasAlreadyStarted() {
                    return this._data.isLive() || this._data.isInterrupted() || !this._data.isTotallyFinished()
                }
                _getHistoryItem() {
                    const e = this._utilFactory.createEnviroment().getFsUpdate(),
                        t = this._data.getId(),
                        n = cjs.dic.getNewInstance("dataItem"),
                        a = e.getDataHistoryReact(t);
                    return a && n.reinit(a), n
                }
            }
            class vs extends ms {
                getHomeRedCardCount() {
                    return this._data.getHomeRedCardCount()
                }
                getAwayRedCardCount() {
                    return this._data.getAwayRedCardCount()
                }
                getHomeGoalUnderReviewIcon() {
                    return new us(this._data.getHomeGoalUnderReview(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans())
                }
                getAwayGoalUnderReviewIcon() {
                    return new us(this._data.getAwayGoalUnderReview(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans())
                }
            }
            class ps extends ms {
                hasHomeService() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_TENNIS_SERVING_PLAYER", "tennis")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class Is extends ms {}
            class As extends ms {}
            class Ns extends ms {
                hasHomeService() {
                    return !!this._hasAlreadyStarted() && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !!this._hasAlreadyStarted() && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_AMERICAN_FOOTBALL_TEAM_ON_BALL", "american-football")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class Rs extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._headerBaseballTexts = new ji.a(this._utilFactory.createTrans())
                }
                getSentence() {
                    const e = this._helperFactory.createBaseballExtraRowDataImplBuilder().setUsStyleWinLossMark(this._utilFactory.createEnviroment().usStyleWinLossMark()).setEventItemData(this._data).build();
                    return this._helperFactory.createBaseballExtraRow().getSentence(e)
                }
                getBattingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_BASEBALL_BATTING_TEAM", "baseball-bat")
                }
                getPitchingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_BASEBALL_PITCHING_TEAM", "baseball")
                }
                isHomePitching() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasHomeService()
                }
                isAwayPitching() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasAwayService()
                }
                getAwayServiceIcon() {
                    return this.isHomePitching() ? this.getBattingIcon() : this.isAwayPitching() ? this.getPitchingIcon() : null
                }
                getHomeServiceIcon() {
                    return this.isHomePitching() ? this.getPitchingIcon() : this.isAwayPitching() ? this.getBattingIcon() : null
                }
                hasShortResult() {
                    const e = this._utilFactory.createConfig().get("app", "project", "id");
                    return [Ss.FLASHSCORE_CO_KR, Ss.FLASHSCORE_CO_JP].includes(e)
                }
                getHeaderText() {
                    return this._headerBaseballTexts
                }
            }
            class Os extends ms {}
            class Ds extends ms {}
            class Cs extends ms {}
            class ys extends ms {}
            class Hs extends ms {
                getHomeRedCardCount() {
                    return this._data.getHomeRedCardCount()
                }
                getAwayRedCardCount() {
                    return this._data.getAwayRedCardCount()
                }
            }
            class Ls extends ms {
                hasHomeService() {
                    return !!this._hasAlreadyStarted() && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !!this._hasAlreadyStarted() && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_VOLLEYBALL_SERVING_TEAM", "volleyball")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class Ps extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._helperCricketExtraRow = n.createCricketExtraRowBuilder().build()
                }
                _setExtraRowData() {
                    this._cricketExtraRowData = this._helperFactory.createCricketExtraRowInputBoundary().setCricketSentenceData(this._data.getData(), Object(un.a)(this._data.getHomeName()), Object(un.a)(this._data.getAwayName())).setCricketExtraRowRightData(this._data).getDataInputCricketExtraRow()
                }
                _isEventStageNotFinished() {
                    return this._data.getStageType() != Fr.a.FINISHED
                }
                isHomeBowling() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasHomeService()
                }
                isAwayBowling() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasAwayService()
                }
                getBattingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_CRICKET_BATTING_TEAM", "cricket-bat")
                }
                getBowlingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_CRICKET_BOWLING_TEAM", "cricket")
                }
                getAwayServiceIcon() {
                    return this.isHomeBowling() ? this.getBattingIcon() : this.isAwayBowling() ? this.getBowlingIcon() : null
                }
                getHomeServiceIcon() {
                    return this.isHomeBowling() ? this.getBowlingIcon() : this.isAwayBowling() ? this.getBattingIcon() : null
                }
                getCricketScore(e) {
                    const t = this._helperFactory.createCricketScoreBuilder().build();
                    t.setRenderer(Ts.NAME);
                    const n = this._helperFactory.createCricketScoreInputBoundaryForEventItem().setData(this._data).getDataInputCricketScore();
                    return t.getScore(n, e == S.a.AWAY)
                }
                getSentence() {
                    this._setExtraRowData();
                    let e = this._helperCricketExtraRow.renderCricketSentence(this._cricketExtraRowData);
                    return e || (e = this._helperCricketExtraRow.renderLiveSentence(this._cricketExtraRowData)), e
                }
                getBatsmanAndBowler() {
                    this._setExtraRowData();
                    let e = "";
                    return this._isEventStageNotFinished() && (e += this._helperCricketExtraRow.renderBatsman(this._cricketExtraRowData), e += e && this._cricketExtraRowData.getBowler() ? " | " : "", e += this._helperCricketExtraRow.renderBowler(this._cricketExtraRowData)), e
                }
                getOvers() {
                    this._setExtraRowData();
                    let e = "";
                    return this._isEventStageNotFinished() && (e = this._helperCricketExtraRow.renderRecentOvers(this._cricketExtraRowData)), e
                }
                getHomeRunRate() {
                    let e = "";
                    return this._data.getVisibleRunRate() && this._data.getHomeOversFirstInning() && (e = this._data.getHomeRunRate() || "", e = e ? "RR " + e : ""), e
                }
                getAwayRunRate() {
                    let e = "";
                    return this._data.getVisibleRunRate() && this._data.getAwayOversFirstinning() && (e = this._data.getAwayRunRate() || "", e = e ? "RR " + e : ""), e
                }
                getRunRateTitle() {
                    return this._utilFactory.createTrans().translate("TRANS_CRICKET_RUN_RATE_TITLE")
                }
            }
            class Ms extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._headerDartsTexts = new $i(this._utilFactory.createTrans())
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), this._data.isScheduled() ? "TRANS_DARTS_BEGINNING_PLAYER" : "TRANS_DARTS_PLAYING_PLAYER", "darts")
                }
                hasHomeService() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.homeIsPlaying()
                }
                hasAwayService() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.awayIsPlaying()
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
                getSets() {
                    return new Ui(this._data)
                }
                getLegs() {
                    return new Gi(this._data)
                }
                getCurrentPoints() {
                    return new Bi(this._data)
                }
                getBestOfFrames() {
                    const e = this._helperFactory.createDarts(),
                        t = this._data.isPlayingOnSets(),
                        n = this._data.getBestOfFrames(),
                        a = e.getBestOf(t, n, !0),
                        r = e.getBestOf(t, n, !1);
                    return a ? new xi(a, r, this._utilFactory.createEnviroment()) : null
                }
                getHeaderText() {
                    return this._headerDartsTexts
                }
            }
            class Fs extends ms {
                getBestOfFrames() {
                    const e = this._utilFactory.createTrans(),
                        t = this._data.getBestOfFrames();
                    return t ? new xi(e.translate("TRANS_SNOOKER_BEST_OF_FRAMES_IFRAME").replace("%s", t), e.translate("TRANS_SNOOKER_BEST_OF_FRAMES").replace("%s", t), this._utilFactory.createEnviroment()) : null
                }
            }
            class ws extends ms {
                getResult() {
                    return this._data.isResultEnabled() ? this._data.isOddsHomeWinner() ? this._helperFactory.createBoxing().getResult(this._data.getHomeMartialArtsFinished(), this._data.getHomeMartialArtsFinishedRound()) : this._data.isOddsAwayWinner() ? this._helperFactory.createBoxing().getResult(this._data.getAwayMartialArtsFinished(), this._data.getAwayMartialArtsFinishedRound()) : this._helperFactory.createBoxing().getTransDraw() : ""
                }
                getSubResult() {
                    return this._data.isOddsHomeWinner() ? this._helperFactory.createBoxing().getSubResult(this._data.getHomeMartialArtsFinishedSub()) : this._data.isOddsAwayWinner() ? this._helperFactory.createBoxing().getSubResult(this._data.getAwayMartialArtsFinishedSub()) : ""
                }
            }
            class bs extends ms {
                hasHomeService() {
                    return !!this._hasAlreadyStarted() && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !!this._hasAlreadyStarted() && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_BEACH_VOLLEYBALL_SERVING_TEAM", "beach-volleyball")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class fs extends ms {}
            class ks extends ms {}
            class Gs extends ms {
                hasHomeService() {
                    return !!this._hasAlreadyStarted() && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !!this._hasAlreadyStarted() && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_BADMINTON_SERVING_PLAYER", "badminton")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class Us extends ms {}
            class Bs extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Xi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getFinalResult() {
                    return new _s(this._data, this._utilFactory.createEnviroment(), this._utilFactory.createTrans())
                }
                isNational() {
                    return this._data.isGolfNational()
                }
                getScore() {
                    const e = this._data.getPar();
                    return null == e ? "" : this._data.isParticipantLive() || this._data.wasParticipantLive() ? e : "-"
                }
                getHole() {
                    let e = this._data.getParticipantHoleInfo();
                    if (null != e && /^[0-9]{3,}$/i.test(e)) {
                        const t = this._utilFactory.createDate(),
                            n = this._utilFactory.createEnviroment();
                        e = t.timestamp2date(n.hourFormat(), parseInt(e), n.getGmtOffset()())
                    }
                    return e || ""
                }
                getToday() {
                    const e = this._data.getParToday();
                    return null == e ? "" : parseInt(e) > 0 ? "+" + e : e
                }
                isStableford() {
                    return this._data.getLeague().isStableford()
                }
                isPlaying() {
                    return (this._data.isLive() || this._data.isPending()) && "F" != this._data.getParticipantHoleInfo() && !this.isStartTime()
                }
                isStartTime() {
                    return /^[0-9]{3,}$/i.test(this._data.getParticipantHoleInfo() || "")
                }
                isCutOff() {
                    return Boolean(this._data.getParticipantStatus())
                }
                isScheduled() {
                    return this._data.isScheduled()
                }
                getScheduledInfo() {
                    return this._data.isScheduled() && this._data.getLeague().getTournamentStageType() == Ki.TST_MAIN ? this._utilFactory.createTrans().translate("TRANS_GOLF_NODUEL_SCHEDULED_INFO") : ""
                }
                getHeaderText() {
                    return new Qi(this._utilFactory.createTrans())
                }
                getStablefordHeaderText() {
                    return new hs(this._utilFactory.createTrans())
                }
            }
            class Ws extends ms {}
            class xs extends ms {
                hasHomeService() {
                    return !!this._hasAlreadyStarted() && this._data.hasHomeService()
                }
                hasAwayService() {
                    return !!this._hasAlreadyStarted() && this._data.hasAwayService()
                }
                getServiceIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_TABLE_TENNIS_SERVING_PLAYER", "table-tennis")
                }
                getAwayServiceIcon() {
                    return this.hasAwayService() ? this.getServiceIcon() : null
                }
                getHomeServiceIcon() {
                    return this.hasHomeService() ? this.getServiceIcon() : null
                }
            }
            class Xs extends ms {}
            class Ys extends ms {
                getResult() {
                    return this._data.isResultEnabled() ? this._data.isOddsHomeWinner() ? this._helperFactory.createMma().getResult(this._data.getHomeMartialArtsFinished(), this._data.getHomeMartialArtsFinishedRound()) : this._data.isOddsAwayWinner() ? this._helperFactory.createMma().getResult(this._data.getAwayMartialArtsFinished(), this._data.getAwayMartialArtsFinishedRound()) : this._helperFactory.createMma().getTransDraw() : ""
                }
                getSubResult() {
                    return this._data.isOddsHomeWinner() ? this._helperFactory.createMma().getSubResult(this._data.getHomeMartialArtsFinishedSub()) : this._data.isOddsAwayWinner() ? this._helperFactory.createMma().getSubResult(this._data.getAwayMartialArtsFinishedSub()) : ""
                }
            }
            class Ks extends ms {}
            class Vs extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._headerPesapalloTexts = new Ji.a(this._utilFactory.createTrans())
                }
                getBattingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_PESAPALLO_BATTING_TEAM", "pesapallo-bat")
                }
                getPitchingIcon() {
                    return new Wi(this._data, this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), "TRANS_PESAPALLO_PITCHING_TEAM", "pesapallo")
                }
                isAwayPitching() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasAwayService()
                }
                isHomePitching() {
                    return !(!this._data.isScheduled() && !this._hasAlreadyStarted()) && this._data.hasHomeService()
                }
                getAwayServiceIcon() {
                    return this.isHomePitching() ? this.getBattingIcon() : this.isAwayPitching() ? this.getPitchingIcon() : null
                }
                getHomeServiceIcon() {
                    return this.isHomePitching() ? this.getPitchingIcon() : this.isAwayPitching() ? this.getBattingIcon() : null
                }
                getHeaderText() {
                    return this._headerPesapalloTexts
                }
            }
            class js extends ms {}
            class Js extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Xi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getTeam() {
                    return this._data.getTeamName()
                }
                getLapTime() {
                    return new rs(this._data, this._utilFactory)
                }
                getLaps() {
                    return this._data.getLaps() || ""
                }
                getGrid() {
                    return this._data.getGrid() || ""
                }
                getPitstops() {
                    return this._data.getPitstops() || ""
                }
                isRallye() {
                    return -1 != [Xr.WRC, Xr.DAKAR].indexOf(this._data.getLeague().getSuperTemplateId())
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new zi(this._data, this._utilFactory.createTrans())
                }
                getRallyeHeaderText() {
                    return new ls(this._data, this._utilFactory.createTrans())
                }
            }
            class $s extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Xi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getTeam() {
                    return this._data.getTeamName()
                }
                getLapTime() {
                    return new rs(this._data, this._utilFactory)
                }
                getLaps() {
                    return this._data.getLaps()
                }
                getGrid() {
                    return this._data.getGrid()
                }
                getRides() {
                    return this._data.getStatsResultsRides()
                }
                getWins() {
                    return this._data.getStatsResultsWins()
                }
                getPoints() {
                    return this._data.getStatsResultsPoints()
                }
                isSpeedway() {
                    return this._data.getLeague().getSuperTemplateId() == Xr.SPEEDWAY
                }
                isPlaying() {
                    return this._data.isLive() && !this._data.isStatsResultsCutOff()
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new qi(this._data, this._utilFactory.createTrans())
                }
                getSpeedwayHeaderText() {
                    return new ss(this._data, this._utilFactory.createTrans())
                }
            }
            class Qs extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._application = t.createApplication(), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Xi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getTeam() {
                    return this._data.getTeamName()
                }
                getAge() {
                    return this._data.getAge() || ""
                }
                getWeight() {
                    return this._data.getWeight() || ""
                }
                getDistance() {
                    return this._data.getDistance() || ""
                }
                getStartingPrice() {
                    return this._data.getStartingPrice() || ""
                }
                getStartingPriceLink() {
                    let e = "";
                    const t = this.getStartingPrice(),
                        n = this._application.getMainBookmakerId(),
                        a = this._utilFactory.createConfig().get("app", "odds", "bookmakers_sp_allowed"),
                        r = a && a.length ? a : [],
                        i = n && r.indexOf(n) > -1,
                        s = this._utilFactory.createEnviroment().getGlobalGeoIp(),
                        l = this._utilFactory.createEnviroment().getGeoIpIsoSubdivisionCode0(),
                        o = this._helperFactory.createClickableBookmaker().isClickable(s, l);
                    if (t && i && o) {
                        const t = {};
                        t.sport = this._data.getSportId().toString(), t.from = "iframe-special-price", e = this._utilFactory.createUrl().createBookmakerLink(t, n)
                    }
                    return e
                }
                isCutOff() {
                    return Boolean(this._data.getParticipantStatus())
                }
                getHeaderText() {
                    return new Zi(this._utilFactory.createTrans())
                }
            }
            class Zs extends ms {}
            class zs extends ms {}
            class qs extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                isTeam() {
                    return this._data.isNationalTeam()
                }
                getRank() {
                    return new Yi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getJumpCount() {
                    return this._data.getStatsResultsJumpCount() || ""
                }
                getJumpRound1() {
                    return this._helperFactory.createStatsResults().getJumpRound1(this._data)
                }
                getJumpRound2() {
                    return this._helperFactory.createStatsResults().getJumpRound2(this._data)
                }
                getPointsRound1() {
                    return this._data.getStatsResultsPointsRound1() || ""
                }
                getPointsRound2() {
                    return this._data.getStatsResultsPointsRound2() || ""
                }
                getPoints() {
                    return this._data.getStatsResultsPoints() || ""
                }
                isPlaying() {
                    return this._data.isLive() && !this._data.isStatsResultsCutOff()
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new as(this._utilFactory.createTrans())
                }
                getTeamsHeaderText() {
                    return new cs(this._utilFactory.createTrans())
                }
            }
            class el extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                hasRounds() {
                    return (this._data.getLeague().getStagesCount() || 0) > 1
                }
                getRank() {
                    return new Yi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getTime() {
                    return this._helperFactory.createStatsResults().getTime(this._data)
                }
                getTimeRound1() {
                    const e = this._data.getStatsResultsStopReasonRound1();
                    return e ? this._helperFactory.createStatsResults().getParticipantStatusTrans(e, !0) : this._data.getStatsResultsTimeRound1()
                }
                getTimeRound2() {
                    const e = this._data.getStatsResultsStopReasonRound2();
                    return e ? this._helperFactory.createStatsResults().getParticipantStatusTrans(e, !0) : this._data.getStatsResultsTimeRound2()
                }
                getGap() {
                    return new gs(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                isPlaying() {
                    return this._data.isLive() && !this._data.isStatsResultsCutOff()
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new es(this._utilFactory.createTrans())
                }
                getRoundsHeaderText() {
                    return new os(this._utilFactory.createTrans())
                }
            }
            class tl extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Yi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getTime() {
                    return this._helperFactory.createStatsResults().getTime(this._data)
                }
                getGap() {
                    return new gs(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                isOnTrack() {
                    return this._data.getStatsResultsOnTrack()
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new ts(this._utilFactory.createTrans())
                }
            }
            class nl extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._historyItem = this._getHistoryItem()
                }
                getRank() {
                    return new Yi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getShooting() {
                    return this._helperFactory.createStatsResults().getShooting(this._data)
                }
                getTime() {
                    return this._helperFactory.createStatsResults().getTime(this._data)
                }
                isOnTrack() {
                    return this._data.getStatsResultsOnTrack()
                }
                getGap() {
                    return new gs(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return new ns(this._utilFactory.createTrans())
                }
            }
            class al extends ms {}
            class rl {
                constructor(e, t) {
                    this._eventItem = e, this._utilTrans = t
                }
                getRankTitle() {
                    return this._utilTrans.translate("TRANS_CYCLING_RANK")
                }
                getTeamText() {
                    return this._utilTrans.translate("TRANS_CYCLING_SHORT_TEAM")
                }
                getTeamTitle() {
                    return this._utilTrans.translate("TRANS_CYCLING_TEAM")
                }
                getTimeText() {
                    return this._utilTrans.translate("TRANS_CYCLING_SHORT_TIME")
                }
                getTimeTitle() {
                    return this._utilTrans.translate("TRANS_CYCLING_TIME")
                }
                getParticipantText() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getParticipantTitle() {
                    return this._utilTrans.translate("TRANS_NAME")
                }
                getStageText() {
                    return this._eventItem.getLeague().getTournamentTemplateNameFromTitle()
                }
            }
            var il = n(155);
            class sl extends ms {
                constructor(e, t, n) {
                    super(e, t, n), this._headerCyclingTexts = new rl(this._data, this._utilFactory.createTrans()), this._historyItem = this._getHistoryItem()
                }
                getTeam() {
                    return this._data.getTeamName()
                }
                getRank() {
                    return new Xi(this._data, this._historyItem, this._utilFactory, this._helperFactory)
                }
                getLapTime() {
                    return new is(this._data, this._utilFactory)
                }
                getCountryId() {
                    return this._data.getHomeParticipantCountryId()
                }
                getCountryName() {
                    return this._data.getCountryName()
                }
                getCyclingJerseys() {
                    const e = new il.a(this._utilFactory.createEnviroment(), this._utilFactory.createTrans());
                    return e.setFeedValue(this._data.getCyclingJersey() || ""), e
                }
                getStage() {
                    return new Es(this._data, this._utilFactory)
                }
                getRankNoLive() {
                    return new ds(this._data, this._helperFactory)
                }
                getHeaderText() {
                    return this._headerCyclingTexts
                }
            }
            class ll {
                constructor(e, t, n, a, r, i) {
                    this._highlighterContainer = e, this._utilFactory = t, this._helperFactory = n, this._moduleLoader = a, this._myGamesFactory = r, this._myTeamsFactory = i
                }
                create(e, t = !1) {
                    let n = new fi(e, S.a.HOME),
                        a = new fi(e, S.a.AWAY);
                    const r = new bi(e, this._highlighterContainer.getItem(e.getOriginalId()), n, a, this._utilFactory, this._helperFactory, this._moduleLoader, this._myGamesFactory, this._myTeamsFactory, t);
                    if (he.isSoccer(r)) r.setSportSpecific(new vs(e, this._utilFactory, this._helperFactory));
                    else if (he.isTennis(r)) r.setSportSpecific(new ps(e, this._utilFactory, this._helperFactory));
                    else if (he.isBasketball(r)) r.setSportSpecific(new Is(e, this._utilFactory, this._helperFactory));
                    else if (he.isHockey(r)) r.setSportSpecific(new As(e, this._utilFactory, this._helperFactory));
                    else if (he.isAmericanFootball(r)) r.setSportSpecific(new Ns(e, this._utilFactory, this._helperFactory));
                    else if (he.isBaseball(r)) r.setSportSpecific(new Rs(e, this._utilFactory, this._helperFactory));
                    else if (he.isHandball(r)) r.setSportSpecific(new Os(e, this._utilFactory, this._helperFactory));
                    else if (he.isRugbyUnion(r)) r.setSportSpecific(new Ds(e, this._utilFactory, this._helperFactory));
                    else if (he.isFloorball(r)) r.setSportSpecific(new Cs(e, this._utilFactory, this._helperFactory));
                    else if (he.isBandy(r)) r.setSportSpecific(new ys(e, this._utilFactory, this._helperFactory));
                    else if (he.isFutsal(r)) r.setSportSpecific(new Hs(e, this._utilFactory, this._helperFactory));
                    else if (he.isVolleyball(r)) r.setSportSpecific(new Ls(e, this._utilFactory, this._helperFactory));
                    else if (he.isCricket(r)) r.setSportSpecific(new Ps(e, this._utilFactory, this._helperFactory));
                    else if (he.isDarts(r)) r.setSportSpecific(new Ms(e, this._utilFactory, this._helperFactory));
                    else if (he.isSnooker(r)) r.setSportSpecific(new Fs(e, this._utilFactory, this._helperFactory));
                    else if (he.isBoxing(r)) r.setSportSpecific(new ws(e, this._utilFactory, this._helperFactory));
                    else if (he.isBeachVolleyball(r)) r.setSportSpecific(new bs(e, this._utilFactory, this._helperFactory));
                    else if (he.isAussieRules(r)) {
                        const t = this._helperFactory.createAussieRulesFormatter();
                        n = new ki(e, S.a.HOME, t), a = new ki(e, S.a.AWAY, t), r.setSportSpecific(new fs(e, this._utilFactory, this._helperFactory)), r.setHomeScore(n), r.setAwayScore(a)
                    } else he.isRugbyLeague(r) ? r.setSportSpecific(new ks(e, this._utilFactory, this._helperFactory)) : he.isBadminton(r) ? r.setSportSpecific(new Gs(e, this._utilFactory, this._helperFactory)) : he.isWaterPolo(r) ? r.setSportSpecific(new Us(e, this._utilFactory, this._helperFactory)) : he.isGolf(r) ? r.setSportSpecific(new Bs(e, this._utilFactory, this._helperFactory)) : he.isFieldHockey(r) ? r.setSportSpecific(new Ws(e, this._utilFactory, this._helperFactory)) : he.isTableTennis(r) ? r.setSportSpecific(new xs(e, this._utilFactory, this._helperFactory)) : he.isBeachSoccer(r) ? r.setSportSpecific(new Xs(e, this._utilFactory, this._helperFactory)) : he.isMma(r) ? r.setSportSpecific(new Ys(e, this._utilFactory, this._helperFactory)) : he.isNetball(r) ? r.setSportSpecific(new Ks(e, this._utilFactory, this._helperFactory)) : he.isPesapallo(r) ? r.setSportSpecific(new Vs(e, this._utilFactory, this._helperFactory)) : he.isMotorsport(r) ? r.setSportSpecific(new js(e, this._utilFactory, this._helperFactory)) : he.isMotorsportAutoRacing(r) ? r.setSportSpecific(new Js(e, this._utilFactory, this._helperFactory)) : he.isMotorsportMotoRacing(r) ? r.setSportSpecific(new $s(e, this._utilFactory, this._helperFactory)) : he.isCycling(r) ? r.setSportSpecific(new sl(e, this._utilFactory, this._helperFactory)) : he.isHorseRacing(r) ? r.setSportSpecific(new Qs(e, this._utilFactory, this._helperFactory)) : he.isEsports(r) ? r.setSportSpecific(new Zs(e, this._utilFactory, this._helperFactory)) : he.isWinterSports(r) ? r.setSportSpecific(new zs(e, this._utilFactory, this._helperFactory)) : he.isWinterSportsSkiJumping(r) ? r.setSportSpecific(new qs(e, this._utilFactory, this._helperFactory)) : he.isWinterSportsAlpineSkiing(r) ? r.setSportSpecific(new el(e, this._utilFactory, this._helperFactory)) : he.isWinterSportsCrossCountry(r) ? r.setSportSpecific(new tl(e, this._utilFactory, this._helperFactory)) : he.isWinterSportsBiathlon(r) ? r.setSportSpecific(new nl(e, this._utilFactory, this._helperFactory)) : he.isKabaddi(r) ? r.setSportSpecific(new al(e, this._utilFactory, this._helperFactory)) : r.setSportSpecific(new ms(e, this._utilFactory, this._helperFactory));
                    return r
                }
            }
            class ol {
                constructor(e, t, n, a, r, i) {
                    this._tabId = e, this._utilConfig = t.createConfig(), this._utilEnviroment = t.createEnviroment(), this._utilTrans = t.createTrans(), this._utilSport = t.createSport(), this._helperScoresChanged = r.createScoresChanged(), this._myGames = n.createMyGames(), this._myTeamsFactory = a, this._reactCalls = i
                }
                isEnabled() {
                    if (this._tabId === _.a.TAB_ID_TV) return this._utilConfig.get("app", "tv", "enabled") && !this._utilEnviroment.isNoDuelSport(this._utilEnviroment.getSportId());
                    const e = this._utilConfig.get("app", "odds", "hide_tab") || this._utilConfig.get("app", "odds", "odds_disabled_countries").indexOf(this._utilEnviroment.getGlobalGeoIp()) > -1;
                    return this._tabId != _.a.TAB_ID_ODDS || this._utilConfig.get("app", "odds", "enable") && this._utilConfig.get("app", "odds", "iframe") && !e
                }
                getTabId() {
                    return this._tabId
                }
                getTitle(e = "") {
                    let t = "";
                    const n = this._utilEnviroment.getSportId();
                    switch (this._tabId) {
                        case _.a.TAB_ID_ALL:
                            t = "ALL";
                            break;
                        case _.a.TAB_ID_LIVE:
                            t = "LIVE";
                            break;
                        case _.a.TAB_ID_FINISHED:
                            t = "FIN";
                            break;
                        case _.a.TAB_ID_SCHEDULED:
                        case _.a.TAB_ID_COUNTRY_SCHEDULED:
                            t = "SCHED";
                            break;
                        case _.a.TAB_ID_ODDS:
                            t = "ODDS";
                            break;
                        case _.a.TAB_ID_MYGAMES:
                            t = "CUSTOMIZE";
                            break;
                        case _.a.TAB_ID_COUNTRY_ALL:
                            t = "LATEST_SCORES";
                            break;
                        case _.a.TAB_ID_TV:
                            t = "TV"
                    }
                    const a = this._utilSport.getParentSport(n) || n,
                        r = "TRANS" + this._utilSport.getConstant(a) + "_BOOKMARK_" + e + t,
                        i = this._utilTrans.translate(r),
                        s = "TRANS_BOOKMARK_" + e + t;
                    if (i == r) {
                        const t = this._utilTrans.translate(s);
                        return t == s && e ? this.getTitle() : t
                    }
                    return i
                }
                getMyGamesCount() {
                    return this._myGames.getCount()
                }
                getShortTitle() {
                    return this.getTitle("SHORT_")
                }
                getHandlerOnClick() {
                    return e => {
                        var t;
                        let n = "",
                            a = 0,
                            r = 1;
                        const i = this._utilEnviroment.getUpdater();
                        switch (this._tabId) {
                            case _.a.TAB_ID_ALL:
                                n = "all-matches", a = 0;
                                break;
                            case _.a.TAB_ID_LIVE:
                                n = "live", a = 1;
                                break;
                            case _.a.TAB_ID_FINISHED:
                                n = "finished", a = 2;
                                break;
                            case _.a.TAB_ID_SCHEDULED:
                                n = "scheduled", a = 3;
                                break;
                            case _.a.TAB_ID_ODDS:
                                n = "odds", a = 0, r = 2, i && i.doc_update(oi.ODDS, !0);
                                break;
                            case _.a.TAB_ID_TV:
                                n = "tv", a = 8;
                                break;
                            case _.a.TAB_ID_MYGAMES: {
                                n = "myGames", a = 5, this._reactCalls.loadingState("mygames", !0), window.setNavigationCategory(a), window.category = a, window.setHolderProxyScope(a), window.push_update_subscription();
                                const e = this._myTeamsFactory.createMyTeams();
                                e && (0 == e.getCount() ? window.loadAndShowMygamesContent() : e.reloadParticipants());
                                break
                            }
                            case _.a.TAB_ID_COUNTRY_ALL:
                                n = "all-matches", a = 0, i && (i.country_tournament_order_fin = !0, i.doc_update(oi.COUNTRY));
                                break;
                            case _.a.TAB_ID_COUNTRY_SCHEDULED:
                                n = "scheduled", a = 1, i && (i.country_tournament_order_fin = !1, i.doc_update(oi.COUNTRY))
                        }
                        return window.setNavigationCategory(a), window.category = a, window.sub_category = r, this._utilEnviroment.hideOddsBasicInfoBox(), [_.a.TAB_ID_MYGAMES].includes(this._tabId) || (window.setHolderProxyScope(a), window.updateNonMyGamesTabs()), null === (t = this._utilEnviroment.getEventTrackingObject()) || void 0 === t || t.track_click("iframe-bookmark-click", n), !0
                    }
                }
                getElementsCustomClass() {
                    return this._tabId === _.a.TAB_ID_TV ? "tabs__text--tv" : ""
                }
            }
            class cl {
                constructor(e, t, n, a, r) {
                    this._utilFactory = e, this._myGamesFactory = t, this._myTeamsFactory = n, this._helperFactory = a, this._reactCalls = r
                }
                getTabImpl(e) {
                    return new ol(e, this._utilFactory, this._myGamesFactory, this._myTeamsFactory, this._helperFactory, this._reactCalls)
                }
                getTabAll() {
                    return this.getTabImpl(_.a.TAB_ID_ALL)
                }
                getTabLive() {
                    return this.getTabImpl(_.a.TAB_ID_LIVE)
                }
                getTabFinished() {
                    return this.getTabImpl(_.a.TAB_ID_FINISHED)
                }
                getTabCountryAll() {
                    return this.getTabImpl(_.a.TAB_ID_COUNTRY_ALL)
                }
                getTabScheduled() {
                    return this.getTabImpl(_.a.TAB_ID_SCHEDULED)
                }
                getTabCountryScheduled() {
                    return this.getTabImpl(_.a.TAB_ID_COUNTRY_SCHEDULED)
                }
                getTabOdds() {
                    return this.getTabImpl(_.a.TAB_ID_ODDS)
                }
                getTabMyGames() {
                    return this.getTabImpl(_.a.TAB_ID_MYGAMES)
                }
                getTabTv() {
                    return this.getTabImpl(_.a.TAB_ID_TV)
                }
            }
            var gl = function(e, t, n, a) {
                return new(n || (n = Promise))((function(r, i) {
                    function s(e) {
                        try {
                            o(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function l(e) {
                        try {
                            o(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function o(e) {
                        var t;
                        e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                            e(t)
                        }))).then(s, l)
                    }
                    o((a = a.apply(e, t || [])).next())
                }))
            };
            class _l {
                constructor(e, t, n, a) {
                    this._utilConfig = e, this._utilEnviroment = t, this._soundPlayerPromise = a, this._utilTrans = n
                }
                isEnabled() {
                    return gl(this, void 0, void 0, (function*() {
                        return !0
                    }))
                }
                isSwitchedOn() {
                    return gl(this, void 0, void 0, (function*() {
                        return (yield this._soundPlayerPromise).isEnabled()
                    }))
                }
                toggle() {
                    return gl(this, void 0, void 0, (function*() {
                        return (yield this._soundPlayerPromise).toggle()
                    }))
                }
                getHandlerOnClick() {
                    return (e, t) => {
                        var n;
                        return e.stopPropagation(), null === (n = this._utilEnviroment.getEventTrackingObject()) || void 0 === n || n.track_click("iframe-bookmark-click", "sound"), this.toggle(), t && t(this.isSwitchedOn()), !0
                    }
                }
                getHandlerOnMouseEnter() {
                    return e => gl(this, void 0, void 0, (function*() {
                        return e.persist(), e.target.title = yield this.getTitle(), this._utilEnviroment.isResponsive() || this._utilEnviroment.getTooltipObject().show(e.target, e, null, "live-table"), !0
                    }))
                }
                getHandlerOnMouseLeave() {
                    return e => (this._utilEnviroment.isResponsive() || this._utilEnviroment.getTooltipObject().hide(e.target), !0)
                }
                getTitle() {
                    return gl(this, void 0, void 0, (function*() {
                        return (yield this.isSwitchedOn()) ? this._utilTrans.translate("TRANS_SOUND_OFF") : this._utilTrans.translate("TRANS_SOUND_ON")
                    }))
                }
            }
            class hl {
                constructor(e, t) {
                    this.eventHolderProxy = e, this.eventId = t
                }
                getEventStage() {
                    return this.eventHolderProxy.getEventHolder().getItem(this.eventId).getStage()
                }
                getEventStageType() {
                    return this.eventHolderProxy.getEventHolder().getItem(this.eventId).getStageType()
                }
                getStartTime() {
                    return this.eventHolderProxy.getEventHolder().getItem(this.eventId).getStartUTime()
                }
            }
            var El = function(e, t, n, a) {
                return new(n || (n = Promise))((function(r, i) {
                    function s(e) {
                        try {
                            o(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function l(e) {
                        try {
                            o(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function o(e) {
                        var t;
                        e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                            e(t)
                        }))).then(s, l)
                    }
                    o((a = a.apply(e, t || [])).next())
                }))
            };
            class dl {
                constructor(e, t, n, a, r, i, s, l, o, c, g) {
                    this._dataEventHolderProxy = e, this._dataLeagueHolderProxy = t, this._highlighterContainer = n, this._utilFactory = a, this._helperFactory = r, this._moduleLoader = i, this._myGamesFactory = s, this._myTeamsFactory = l, this._myLeaguesFactory = o, this._reactCalls = c, this._specificEventFactory = new ll(this._highlighterContainer, this._utilFactory, this._helperFactory, this._moduleLoader, this._myGamesFactory, this._myTeamsFactory);
                    const _ = new hi(this._dataEventHolderProxy, this._utilFactory.createNavigation()),
                        h = new Mr(this._dataEventHolderProxy, this._specificEventFactory, _, ci.SCOPE_DEFAULT);
                    this._eventDefaultProvider = new zr(new Pr(h));
                    const E = new Mr(this._dataEventHolderProxy, this._specificEventFactory, _, ci.SCOPE_TEMPORARY);
                    this._eventTemporaryProvider = new zr(new Pr(E));
                    const d = new hi(this._dataLeagueHolderProxy, this._utilFactory.createNavigation()),
                        T = new $r(this._dataLeagueHolderProxy, this._utilFactory, this._myLeaguesFactory, this._myGamesFactory, d, ci.SCOPE_DEFAULT);
                    this._leagueDefaultProvider = new zr(new Jr(T));
                    const u = new $r(this._dataLeagueHolderProxy, this._utilFactory, this._myLeaguesFactory, this._myGamesFactory, d, ci.SCOPE_TEMPORARY);
                    this._leagueTemporaryProvider = new zr(new Jr(u)), this._eventScopeHandler = new hi(this._dataEventHolderProxy, this._utilFactory.createNavigation()), this._leagueScopeHandler = new hi(this._dataLeagueHolderProxy, this._utilFactory.createNavigation());
                    const S = this._utilFactory.createEnviroment(),
                        m = this._utilFactory.createSport(),
                        v = this._utilFactory.createConfig(),
                        p = this._utilFactory.createDate(),
                        I = this._utilFactory.createUtilPage();
                    this._suffixProvider = new hn(S.getSportId(), I), this._staticBlockDataProvider = new di(this._dataEventHolderProxy, this._dataLeagueHolderProxy, this._eventScopeHandler, this._leagueScopeHandler, S, m, v, p, I, g, this._reactCalls, this._suffixProvider), this._tabFactory = new cl(this._utilFactory, this._myGamesFactory, this._myTeamsFactory, this._helperFactory, this._reactCalls)
                }
                _scopeBegin(e) {
                    this._eventScopeHandler.scopeBegin(e), this._leagueScopeHandler.scopeBegin(e)
                }
                scopeBeginByBlockType(e) {
                    const t = this._staticBlockDataProvider.getDataScope(e);
                    this._scopeBegin(t)
                }
                scopeEnd() {
                    this._eventScopeHandler.scopeEnd(), this._leagueScopeHandler.scopeEnd()
                }
                executeInScope(e, t) {
                    const n = this._staticBlockDataProvider.getDataScope(e);
                    this._scopeBegin(n);
                    const a = t();
                    return this.scopeEnd(), a
                }
                getLeaguesByTabId(e) {
                    return this._getLeagues(e)
                }
                getMeetingLeaguesByTabIdSortByMeetingId(e) {
                    return this._getMeetingLeaguesByTabId(e, e => e.getMeetingId() || "")
                }
                getMeetingLeaguesByTabIdSortByDate(e) {
                    return this._getMeetingLeaguesByTabId(e, e => e.getEvents()[0].getStartFullDate() || "")
                }
                shouldShowAllEvents(e) {
                    const t = this._utilFactory.createUtilPage(),
                        n = this._utilFactory.createSport(),
                        a = e.getSportId(),
                        r = e.isStageSport(),
                        i = n.hasCategoryPage(a) && !n.isGolf(a) && !n.inGroup(a, _n.a.MOTORSPORT);
                    return t.isCountryPage() && i || !e.isNoDuelTournament() || t.isTournamentPage() && !r || t.isTournamentPagePassiveTable()
                }
                _getMeetingLeaguesByTabId(e, t) {
                    const n = this._getLeagues(e),
                        a = {};
                    for (const e of n) {
                        const n = t(e);
                        a[n] || (a[n] = []), a[n].push(e)
                    }
                    return a
                }
                resetHighlighter() {
                    this._highlighterContainer.reset()
                }
                getLeague(e, t) {
                    -1 == [_.a.TAB_ID_MYGAMES, _.a.TAB_ID_MYGAMES_GROUPS].indexOf(t) && this._scopeBegin(ci.SCOPE_DEFAULT);
                    const n = this._dataEventHolderProxy.getEventHandler();
                    n.sort();
                    const a = n.getIds();
                    let r = null;
                    const i = [];
                    for (const n of a) {
                        const a = this._dataEventHolderProxy.getEventHolder().getItem(n),
                            s = a.getLeague(),
                            l = this._specificEventFactory.create(a);
                        s.getId() === e && l.isAllowedByTabId(t) && (r || (r = new Hr(s, i, this._utilFactory, this._myLeaguesFactory, this._myGamesFactory, new br(s.getId(), s.getSportId(), this._utilFactory, new hl(this._dataEventHolderProxy, n)), new Kr(this._utilFactory.createDate(), this._utilFactory.createTrans(), this._utilFactory.createSport(), window.cjs.Api.timezone, new jr))), i.push(l))
                    }
                    return -1 == [_.a.TAB_ID_MYGAMES, _.a.TAB_ID_MYGAMES_GROUPS].indexOf(t) && this.scopeEnd(), r
                }
                _setBookmakers() {
                    (() => {
                        El(this, void 0, void 0, (function*() {
                            const e = this._utilFactory.createEnviroment(),
                                t = this._utilFactory.createApplication(),
                                n = yield this._moduleLoader.getBookmakerSettings();
                            t.setMainBookmakerIds(n.getMainBookmakerIds(String(e.getGlobalGeoIp()), String(e.getGeoIpIsoSubdivisionCode0())))
                        }))
                    })()
                }
                _setStaticBlockData(e) {
                    this._staticBlockDataProvider.setData(e)
                }
                _shouldUseDefaultScope(e) {
                    return this._staticBlockDataProvider.getDataScope(e) === ci.SCOPE_DEFAULT
                }
                getLeaguesByBlockType(e) {
                    return this._setBookmakers(), this._setStaticBlockData(e), this._getLeagues(_.a.TAB_ID_ALL, e, !0)
                }
                _setOrderForCategoryPage(e) {
                    if (this.isCategoryPage()) {
                        const t = e.getIds()[0] || "";
                        if (t) {
                            const e = this._dataEventHolderProxy.getEventHolder().getItem(t).getStartUTime() >= this._utilFactory.createDate().getMidnight(),
                                n = this._utilFactory.createEnviroment().getUpdater();
                            n && (n.country_tournament_order_fin = !e)
                        }
                    }
                }
                _getLeagues(e, t = Le.BLOCK_TYPE_DEFAULT, n = !1) {
                    const a = -1 != [_.a.TAB_ID_MYGAMES, _.a.TAB_ID_MYGAMES_GROUPS].indexOf(e),
                        r = this._staticBlockDataProvider.getDataScope(t);
                    a || this._scopeBegin(r);
                    const i = this._dataEventHolderProxy.getEventHandler();
                    r === ci.SCOPE_DEFAULT && -1 == [Le.BLOCK_TYPE_RESULTS, Le.BLOCK_TYPE_FIXTURES].indexOf(t) && i.resetIds(), n || this.isCountryPage() || (this._setOrderForCategoryPage(i), i.sort());
                    const s = i.getIds(),
                        l = [];
                    let o = null,
                        c = [],
                        g = "";
                    for (const t of s) {
                        const a = this._dataEventHolderProxy.getEventHolder().getItem(t),
                            r = a.getLeague(),
                            i = this._specificEventFactory.create(a, n);
                        i.isAllowedByTabId(e) && ("" != g && g == r.getId() || (null != o && o.getEvents().length > 0 && (l.push(o), c = []), o = new Hr(r, c, this._utilFactory, this._myLeaguesFactory, this._myGamesFactory, new br(r.getId(), r.getSportId(), this._utilFactory, new hl(this._dataEventHolderProxy, t)), new Kr(this._utilFactory.createDate(), this._utilFactory.createTrans(), this._utilFactory.createSport(), window.cjs.Api.timezone, new jr)), g = r.getId()), c.push(i))
                    }
                    return null != o && o.getEvents().length > 0 && l.push(o), a || this.scopeEnd(), l
                }
                getTabFactory() {
                    return this._tabFactory
                }
                getCalendar() {
                    return new Lr(this._utilFactory, this._helperFactory, () => window.cjs.Api.timezone.getGmtOffsetDiff())
                }
                getSound() {
                    return new _l(this._utilFactory.createConfig(), this._utilFactory.createEnviroment(), this._utilFactory.createTrans(), this._moduleLoader.getSoundPlayer())
                }
                reloadEvent(e, t = Le.BLOCK_TYPE_SUMMARY) {
                    this.getEventProvider(t).update(e)
                }
                reloadLeague(e, t = Le.BLOCK_TYPE_SUMMARY) {
                    this.getLeagueProvider(t).update(e)
                }
                getEventProvider(e = Le.BLOCK_TYPE_SUMMARY) {
                    return this._shouldUseDefaultScope(e) ? this._eventDefaultProvider : this._eventTemporaryProvider
                }
                getLeagueProvider(e = Le.BLOCK_TYPE_SUMMARY) {
                    return this._shouldUseDefaultScope(e) ? this._leagueDefaultProvider : this._leagueTemporaryProvider
                }
                isOddsFormatSwitcherEnabled() {
                    return this._utilFactory.createConfig().get("app", "odds", "format_switch_enable", "iframe")
                }
                getSwitchOddsFormatData() {
                    return new Promise(e => El(this, void 0, void 0, (function*() {
                        const t = yield this._getOddsManagerAsync(), n = {
                            actualFormat: t.getOddsFormat(),
                            formats: t.getOddsFormats(),
                            translation: t.getOddsHeaderTitle().getOddsFormatSwitch(),
                            switcherGetter: e => t.switchOddsFormat(e)
                        };
                        e(n)
                    })))
                }
                getStageTabs(e) {
                    return new qr(this._dataLeagueHolderProxy.getHolder().getOrCreateNewLeague(e), this._dataEventHolderProxy.getEventHandler(), this._utilFactory.createDate()).setCategoryIsFinished(this._utilFactory.createNavigation().isFinished()).setCategoryIsScheduled(this._utilFactory.createNavigation().isScheduled()).setIsTournamentPage(this._utilFactory.createUtilPage().isTournamentPage()).setGmtOffset(this._utilFactory.createEnviroment().getGmtOffset()()).build()
                }
                getMyTeamsTitle() {
                    const e = this._utilFactory.createTrans(),
                        t = this._myTeamsFactory.createMyTeams();
                    return e.translate("TRANS_MY_TEAMS_LABEL") + (t ? " (" + t.getCount() + ")" : "")
                }
                getMyTeamsParticipants() {
                    const e = this._myGamesFactory.createMyGames(),
                        t = this._myTeamsFactory.createMyTeams(),
                        n = this._utilFactory.createSport(),
                        a = this._dataEventHolderProxy.getEventHolder(),
                        r = this._utilFactory.createTrans().translate("TRANS_MY_TEAMS_NO_MATCH_SCHEDULED"),
                        i = this._utilFactory.createConfig().get("app", "mygames", "future_days"),
                        s = t ? t.getParticipantsEvents() : {},
                        l = new li(this._utilFactory.createString());
                    for (const o in s) {
                        const c = t.getParticipantData(o);
                        if (c) {
                            const g = [];
                            for (const e of s[o])
                                if (a.hasEvent(e)) {
                                    const t = a.getItem(e),
                                        n = this._specificEventFactory.create(t);
                                    g.push(n)
                                } const _ = parseInt(o.replace(/_.*/, "")),
                                h = (new ii).setKey(o).setTitle(c.title).setName(c.name).setSportId(_).setSportName(n.getOriginalNameFromId(_)).setSportTranslatedName(n.getTranslatedName(_)).setCountryId(parseInt(c.countryId)).setCountryName(c.title.split(":")[0]).setUrl(c.url).setEvents(g).setTranslateNoMatch(r.replace("%s_team", c.name).replace("%s_days", i)).setUtilFactory(this._utilFactory).setMyGames(e).setMyTeams(t).build();
                            l.addItem(h)
                        }
                    }
                    return l.getItems()
                }
                getStaticBlockShowMore() {
                    return new gi(this._utilFactory, this._staticBlockDataProvider, this._reactCalls, this._suffixProvider)
                }
                getSectionTitle() {
                    return new _i(this._utilFactory.createTrans(), this._utilFactory.createUtilPage(), this.getTabFactory().getTabScheduled().getTitle())
                }
                getUpcomingDrawStartTimeFormatter() {
                    return new Promise(e => {
                        cjs.Api.loader.get("upcomingDrawFormatter").call(e)
                    })
                }
                isCountryPage() {
                    return this._utilFactory.createUtilPage().isCountryPage() && !this.isCategoryPage()
                }
                isCategoryPage() {
                    const e = this._utilFactory.createSport(),
                        t = this._utilFactory.createEnviroment().getSportId();
                    return this._utilFactory.createUtilPage().isCountryPage() && e.hasCategoryPage(t)
                }
                getSuffixProvider() {
                    return this._suffixProvider
                }
                getTranslator() {
                    return this._utilFactory.createTrans()
                }
                getConfig() {
                    return this._utilFactory.createConfig()
                }
                getStaticEventInitialCount() {
                    return this._staticBlockDataProvider.getEventInitialCount()
                }
                getViewportSwitcher() {
                    return this._helperFactory.createViewportSwitcher()
                }
                getGamePlanSettings() {
                    return this._utilFactory.createEnviroment().getGamePlanSettings()
                }
                getFullFeedTrigger() {
                    return this._utilFactory.createEnviroment().getFullFeedTrigger()
                }
                getModuleLoader() {
                    return this._moduleLoader
                }
                scrollToLastPosition() {
                    return this._moduleLoader.scrollToLastPosition()
                }
                isMixedPage() {
                    return this._utilFactory.createUtilPage().isMixed()
                }
                fetchFeed(e, t = {}) {
                    return El(this, void 0, void 0, (function*() {
                        return new Promise((n, a) => {
                            const r = this._utilFactory.createEnviroment();
                            r.getFeedRequestObject().execute(e, r.getSportId(), (e, t, a, r, i) => {
                                n(new Ti(e, t, a, r, i))
                            }, t, (e, t) => {
                                a(new Ti(e, "", "", t, {}))
                            })
                        })
                    }))
                }
                isReactEnabledForRenderingLeagues() {
                    const e = this._utilFactory.createEnviroment(),
                        t = this._utilFactory.createUtilPage().getPageType(),
                        n = e.getPageTab();
                    return this._helperFactory.createReact().isEnabled(t, n)
                }
                _getOddsManagerAsync() {
                    return new Promise(e => cjs.Api.loader.get("oddsManager").call(e))
                }
            }
            class Tl {
                constructor(e, t, n) {
                    this._utilConfig = e.createConfig(), this._utilEnviroment = e.createEnviroment(), this._page = e.createUtilPage(), this._hasDraw = n
                }
                setPageTypeSpecific(e) {
                    this._pageTypeSpecific = e
                }
                getPageTypeSpecific() {
                    return this._pageTypeSpecific
                }
                getPageType() {
                    return this._page.getPageType()
                }
                getSportId() {
                    return this._utilEnviroment.getSportId()
                }
                getHasDraw() {
                    return this._hasDraw
                }
            }
            var ul = n(134);
            class Sl {
                constructor(e) {
                    this.utilTrans = e, this._constantsManager = cjs.Api.constantsManager
                }
                getStatus(e, t, n, a, r) {
                    if (!r && t == this._constantsManager.getEventStages().LIVE) {
                        const t = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_SET1"),
                            r = this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_LIVE"),
                            i = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SET1"),
                            s = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SHORT_SET1"),
                            l = this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_IFRAME_LIVE"),
                            o = "" + (Number(n) + Number(a) + 1),
                            c = this.utilTrans.translate("TRANS_DARTS_LEG_NUMBER").replace("%s", o);
                        let g = "";
                        e.indexOf(t) > -1 ? g = t : e.indexOf(i) > -1 ? g = i : e.indexOf(s) > -1 ? g = s : e.indexOf(r) > -1 ? g = r : e.indexOf(l) > -1 && (g = l), g && (e = e.replace(g, c))
                    }
                    return e
                }
                getCurrentScore(e, t, n, a, r) {
                    let i = "";
                    return e ? (void 0 !== t && "" !== t && void 0 !== n && "" !== n && (i += "<br />" + t + " : " + n), void 0 !== a && "" !== a && void 0 !== r && "" !== r && (i += " ( " + a + " : " + r + " )")) : void 0 !== a && "" !== a && void 0 !== r && "" !== r && (i += "<br />" + a + " : " + r), i
                }
                getBestOf(e, t, n) {
                    let a = "",
                        r = "";
                    return t && (a = e ? n ? this.utilTrans.translate("TRANS_DARTS_BEST_OF_SETS_IFRAME") : this.utilTrans.translate("TRANS_DARTS_BEST_OF_SETS") : n ? this.utilTrans.translate("TRANS_DARTS_BEST_OF_LEGS_IFRAME") : this.utilTrans.translate("TRANS_DARTS_BEST_OF_LEGS"), r = a.replace("%s", t)), r
                }
            }
            class ml {
                createBoxing() {
                    return cjs.Api.helperBoxing
                }
                createClickableBookmaker() {
                    return cjs.dic.get("Helper_ClickableBookmaker")
                }
                createCricketScoreBuilder() {
                    return cjs.dic.get("Helper_CricketScoreBuilder")
                }
                createCricketScoreInputBoundaryForEventItem() {
                    return cjs.dic.get("Helper_CricketScoreInputBoundaryForEventItem")
                }
                createMma() {
                    return cjs.Api.helperMma
                }
                createStatsResults() {
                    return cjs.dic.get("Helper_StatsResults")
                }
                createDarts() {
                    return new Sl(cjs.dic.get("util_trans"))
                }
                createBaseballExtraRow() {
                    return cjs.dic.get("Helper_BaseballExtraRow")
                }
                createBaseballExtraRowDataImplBuilder() {
                    return cjs.dic.get("Helper_BaseballExtraRowDataImplBuilder")
                }
                createCricketExtraRowBuilder() {
                    return cjs.dic.get("Helper_CricketExtraRowBuilder")
                }
                createCricketExtraRowInputBoundary() {
                    return cjs.dic.get("Helper_CricketExtraRowInputBoundaryImpl")
                }
                createAussieRulesFormatter() {
                    return cjs.dic.get("Helper_AussieRulesFormatter")
                }
                createScoresChanged() {
                    return cjs.dic.get("Helper_ScoresChanged")
                }
                createStatsResultsIndexGenerator() {
                    return window.cjs.Api.statsResultsIndexGenerator
                }
                createWinLose() {
                    return cjs.dic.get("Helper_WinLose")
                }
                createViewportSwitcher() {
                    return cjs.dic.get("Helper_ViewportSwitcher")
                }
                createReact() {
                    return cjs.dic.get("Helper_React")
                }
                createFeedTableContainerBuilder() {
                    return cjs.dic.getNewInstance("Feed_Table_ContainerBuilder")
                }
            }
            class vl {
                createMyGames() {
                    return cjs.mygames
                }
            }
            class pl {
                createMyLeagues() {
                    return cjs.myLeagues
                }
            }
            class Il {
                createMyTeams() {
                    return cjs.myTeams
                }
            }
            class Al {
                constructor(e, t, n, a) {
                    this.TRANSFER_IN = "in", this.TRANSFER_OUT = "out", this._dateHandler = e, this._dateFormat = t;
                    const r = n.getProperty(a.TRANSFERSINDEXES_TRANSFER_DIRECTION) == this.TRANSFER_IN && "1" == n.getChildren()[0].getProperty(a.TRANSFERSINDEXES_AFFECTED_TEAM) ? 0 : 1,
                        i = n.getProperty(a.TRANSFERSINDEXES_TRANSFER_DIRECTION) == this.TRANSFER_IN && "1" == n.getChildren()[0].getProperty(a.TRANSFERSINDEXES_AFFECTED_TEAM) ? 1 : 0;
                    this._date = parseInt(n.getProperty(a.TRANSFERSINDEXES_DATE), 10), this._direction = n.getProperty(a.TRANSFERSINDEXES_TRANSFER_DIRECTION), this._type = n.getProperty(a.TRANSFERSINDEXES_TRANSFER_TYPE), this._affectedTeamImage = n.getChildren()[r].getProperty(a.TRANSFERSINDEXES_PARTICIPANT_ICON), this._affectedTeamName = n.getChildren()[r].getProperty(a.COMMONINDEXES_VALUE), this._affectedTeamUrl = n.getChildren()[r].getProperty(a.TRANSFERSINDEXES_TEAM_URL), this._notAffectedTeamImage = n.getChildren()[i].getProperty(a.TRANSFERSINDEXES_PARTICIPANT_ICON), this._notAffectedTeamName = n.getChildren()[i].getProperty(a.COMMONINDEXES_VALUE), this._notAffectedTeamUrl = n.getChildren()[i].getProperty(a.TRANSFERSINDEXES_TEAM_URL), this._playerImage = n.getChildren()[2].getProperty(a.TRANSFERSINDEXES_PARTICIPANT_ICON), this._playerImageTitle = n.getChildren()[2].getProperty(a.TRANSFERSINDEXES_COUNTRY_NAME), this._playerName = n.getChildren()[2].getProperty(a.COMMONINDEXES_VALUE), this._playerUrl = n.getChildren()[2].getProperty(a.TRANSFERSINDEXES_PLAYER_URL)
                }
                getDate() {
                    return this._date
                }
                getFormattedDate() {
                    return this._dateHandler.timestamp2date(this._dateFormat, this._date, this._dateHandler.gmtOffsetGetter())
                }
                getDirection() {
                    return this._direction
                }
                getType() {
                    return this._type
                }
                getAffectedTeamImage() {
                    return "team" == this._affectedTeamImage ? "/res/image/empty-logo-team-share.gif" : "" == this._affectedTeamImage ? "" : "/res/image/data/" + this._affectedTeamImage
                }
                getAffectedTeamName() {
                    return this._affectedTeamName
                }
                getAffectedTeamUrl() {
                    return this._affectedTeamUrl
                }
                getNotAffectedTeamImage() {
                    return this._notAffectedTeamImage
                }
                getNotAffectedTeamName() {
                    return this._notAffectedTeamName
                }
                getPlayerImageTitle() {
                    return this._playerImageTitle
                }
                getPlayerImage() {
                    return this._playerImage.replace("ag-", "_")
                }
                getNotAffectedTeamUrl() {
                    return this._notAffectedTeamUrl
                }
                getPlayerName() {
                    return this._playerName
                }
                getPlayerUrl() {
                    return this._playerUrl
                }
            }
            class Nl {
                _transformParsedTransferData(e, t) {
                    if (0 == e.getChildren().length) return [];
                    const n = [],
                        a = e.getChildren()[t].getChildren()[0].getChildren();
                    for (let e = 0; e < a.length; e++) n.push(new Al(this.getDateHandler(), this.getFullDateFormat(), a[e], this._utilFactory.createEnviroment().getFeedIndexes()));
                    return n
                }
                setSportId(e) {
                    return this._sportId = e, this
                }
                setParticipantId(e) {
                    return this._participantId = e, this
                }
                setPageTab(e) {
                    return this._pageTab = e, this
                }
                setTransferParser(e) {
                    return this._transfersParser = e, this
                }
                setContainerBuilderWithNewsfeedParser(e) {
                    return this._containerBuilderWithNewsfeedParser = e, this
                }
                setUtilFactory(e) {
                    return this._utilFactory = e, this
                }
                setMyTeamsHandler(e) {
                    return this._myTeams = e, this
                }
                setReactCalls(e) {
                    return this._reactCalls = e, this
                }
                setDicProxy(e) {
                    return this._dicProxy = e, this
                }
                getDateHandler() {
                    return this._utilFactory.createDate()
                }
                getFullDateFormat() {
                    return this._utilFactory.createEnviroment().fullDateShortFormat()
                }
                getFullDateFormatWithTime() {
                    return this._utilFactory.createEnviroment().fullDateTimeFormat()
                }
                getPageTab() {
                    return this._pageTab
                }
                docUpdate(e, t, n, a) {
                    const r = this._utilFactory.createEnviroment().getUpdater();
                    r && r.doc_update(e, !1, null, t, n, a)
                }
                getTranslator() {
                    return this._utilFactory.createTrans()
                }
                getDetailOpener() {
                    return (e, t) => this._utilFactory.createEnviroment().detailOpenWithEventId(e, t)
                }
                getSportId() {
                    return this._sportId
                }
                getParticipantId() {
                    return this._participantId
                }
                setTeamPageLoadingState(e) {
                    this._reactCalls.loadingState("teamPage", e)
                }
                myTeamsInit() {
                    new ai(this._myTeams).appendToggle(this._sportId, this._participantId)
                }
                getTransfers(e, t, n) {
                    this._dicProxy.onReady(() => {
                        this.docUpdate("participant-transfers", e, t, (e, a, r, i, s) => {
                            const l = this._transfersParser.parse(r),
                                o = this._transformParsedTransferData(l, t);
                            n(o)
                        })
                    })
                }
                getNewsFeed(e) {
                    this._dicProxy.onReady(() => {
                        this.docUpdate("participant-newsfeed", 1, 1, (t, n, a, r, i) => {
                            const s = this._containerBuilderWithNewsfeedParser.build(a);
                            e(s.getItems())
                        })
                    })
                }
                getTransfersShowMoreUrl() {
                    const e = this._utilFactory.createUrl().getPathname();
                    return (e || "") + this.getTranslator().translate("TRANS_URL_IDENT_TOURNAMENT_TRANSFERS")
                }
                getNewsFeedShowMoreUrl() {
                    const e = this._utilFactory.createUrl().getPathname();
                    return (e || "") + this.getTranslator().translate("TRANS_URL_IDENT_TOURNAMENT_NEWS")
                }
            }
            var Rl = n(156),
                Ol = n(175);
            let Dl = (() => {
                class e {
                    static reactEnabled(t) {
                        const n = t.createEnviroment(),
                            a = t.createUtilPage().getPageType(),
                            r = n.getPageTab();
                        return -1 != e.enabledPageTypes.indexOf(a) || -1 != e.enabledPageTypesWithTabs.indexOf(a) && -1 != e.enabledPageTabs.indexOf(r)
                    }
                }
                return e.enabledPageTypes = [ce.PAGE_TYPE_SPORT, ce.PAGE_TYPE_MIXED, ce.PAGE_TYPE_CATEGORY, ce.PAGE_TYPE_SERIES, ce.PAGE_TYPE_RANKING, ce.PAGE_TYPE_DRAW], e.enabledPageTypesWithTabs = [ce.PAGE_TYPE_TOURNAMENT, ce.PAGE_TYPE_TEAM, ce.PAGE_TYPE_PLAYER], e.enabledPageTabs = [Le.BLOCK_TYPE_SUMMARY, Le.BLOCK_TYPE_SUMMARY_FIXTURES, Le.BLOCK_TYPE_SUMMARY_RESULTS, Le.BLOCK_TYPE_FIXTURES, Le.BLOCK_TYPE_RESULTS, Le.BLOCK_TYPE_TRANSFERS, Le.BLOCK_TYPE_NEWS, Le.BLOCK_TYPE_STANDINGS_TABLE, Le.BLOCK_TYPE_PARTICIPANT_TEAMS, Le.BLOCK_TYPE_ARCHIVE, Le.BLOCK_TYPE_STANDINGS_DRAW, Le.BLOCK_TYPE_PARTICIPANT_PLAYERS, Le.BLOCK_TYPE_SQUAD], e
            })();
            var Cl;
            ! function(e) {
                e[e.MATCH_START = 1] = "MATCH_START", e[e.MATCH_END = 3] = "MATCH_END", e[e.CURRENT_RESULT_CHANGE = 4] = "CURRENT_RESULT_CHANGE", e[e.CURRENT_RESULT_CHANGE_INCIDENT = 41] = "CURRENT_RESULT_CHANGE_INCIDENT", e[e.EVENT_STAGE_END = 5] = "EVENT_STAGE_END", e[e.EVENT_STAGE_START = 51] = "EVENT_STAGE_START", e[e.SUBSTITUTION = 6] = "SUBSTITUTION", e[e.LINEUPS = 7] = "LINEUPS", e[e.RED_CARD = 30] = "RED_CARD", e[e.YELLOW_CARD = 31] = "YELLOW_CARD", e[e.MATCH_REMINDER_3H = 2] = "MATCH_REMINDER_3H", e[e.MATCH_REMINDER_1H = 32] = "MATCH_REMINDER_1H", e[e.MATCH_REMINDER_30M = 33] = "MATCH_REMINDER_30M", e[e.MATCH_REMINDER_15M = 34] = "MATCH_REMINDER_15M", e[e.MATCH_REMINDER_5M = 35] = "MATCH_REMINDER_5M", e[e.WICKET_CHANGE = 40] = "WICKET_CHANGE", e[e.HIGHLIGHT = 50] = "HIGHLIGHT", e[e.RACE_START = 60] = "RACE_START", e[e.RACE_STAGE_START = 61] = "RACE_STAGE_START", e[e.RACE_STAGE_END = 62] = "RACE_STAGE_END", e[e.RACE_END = 63] = "RACE_END", e[e.DATASYNC = 70] = "DATASYNC", e[e.INGROUP_MATCH_START = 101] = "INGROUP_MATCH_START", e[e.INGROUP_MATCH_END = 103] = "INGROUP_MATCH_END", e[e.NEWS_FEED = 110] = "NEWS_FEED"
            }(Cl || (Cl = {}));
            const yl = {
                1: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "HALF_TIME_SCORE"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_2ND_HALF"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "GOAL"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE_INCIDENT,
                    translation: "GOAL_SCORER"
                }, {
                    notificationType: Cl.LINEUPS,
                    translation: "LINEUPS"
                }, {
                    notificationType: Cl.RED_CARD,
                    translation: "RED_CARD"
                }, {
                    notificationType: Cl.HIGHLIGHT,
                    translation: "HIGHLIGHT"
                }],
                2: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_SET"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                3: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_QUARTER"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_3RD_QUARTER"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                4: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_PERIOD"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_PERIOD"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "GOAL"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE_INCIDENT,
                    translation: "GOAL_SCORER"
                }, {
                    notificationType: Cl.LINEUPS,
                    translation: "LINEUPS"
                }, {
                    notificationType: Cl.HIGHLIGHT,
                    translation: "HIGHLIGHT"
                }],
                5: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_QUARTER"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_3RD_QUARTER"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "SCORE_CHANGE"
                }],
                6: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "SCORE_CHANGE"
                }],
                7: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "HALF_TIME_SCORE"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_2ND_HALF"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                8: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "HALF_TIME_SCORE"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_2ND_HALF"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "SCORE_CHANGE"
                }],
                9: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_PERIOD"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_PERIOD"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "GOAL"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE_INCIDENT,
                    translation: "GOAL_SCORER"
                }],
                11: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "HALF_TIME_SCORE"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_2ND_HALF"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE,
                    translation: "GOAL"
                }, {
                    notificationType: Cl.CURRENT_RESULT_CHANGE_INCIDENT,
                    translation: "GOAL_SCORER"
                }],
                13: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_DAY"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }, {
                    notificationType: Cl.WICKET_CHANGE,
                    translation: "WICKET"
                }],
                16: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                26: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "END_OF_PERIOD"
                }, {
                    notificationType: Cl.EVENT_STAGE_START,
                    translation: "START_OF_PERIOD"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                30: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_START,
                    translation: "MATCH_START"
                }, {
                    notificationType: Cl.EVENT_STAGE_END,
                    translation: "HALF_TIME_SCORE"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }],
                23: [{
                    notificationType: Cl.RACE_START,
                    translation: "TOURNAMENT_START"
                }, {
                    notificationType: Cl.RACE_END,
                    translation: "TOURNAMENT_END"
                }],
                31: [{
                    notificationType: Cl.RACE_START,
                    translation: "RACE_START"
                }, {
                    notificationType: Cl.RACE_END,
                    translation: "RACE_END"
                }],
                36: [{
                    notificationType: Cl.MATCH_REMINDER_30M,
                    translation: "REMINDER_BEFORE_START_30_MINS"
                }, {
                    notificationType: Cl.MATCH_END,
                    translation: "FINAL_RESULT"
                }]
            };
            yl[10] = yl[7], yl[12] = yl[2], yl[14] = yl[2], yl[15] = yl[6], yl[17] = yl[12], yl[18] = yl[3], yl[19] = yl[8], yl[21] = yl[2], yl[22] = yl[3], yl[24] = yl[7], yl[25] = yl[2], yl[28] = yl[16], yl[29] = yl[3], yl[34] = yl[31], yl[37] = yl[31], yl[42] = yl[7];
            class Hl {
                constructor(e, t, n) {
                    this._sportsSelector = "body .menuTop__group [data-sport-id]", this._majorMenuItemClassName = "menuTop__item", this._moduleEnabled = !1, this._utilConfig = e.createConfig(), this._utilTrans = e.createTrans(), this._utilSport = e.createSport(), this._utilEnviroment = e.createEnviroment(), this._window = t, this._loaderHandler = n, this._loaderHandler.get("notifications/gui").fulfill(e => {
                        e(this)
                    })
                }
                enable() {
                    this._moduleEnabled = !0
                }
                isEnabled(e) {
                    const t = e == a.MOBILE || 29 == this._utilConfig.get("app", "project", "id") || 49 == this._utilConfig.get("app", "project", "id");
                    return this._moduleEnabled && this._utilConfig.get("app", "native_notifications", "enabled") && t
                }
                getTitle() {
                    return this._utilTrans.translate("TRANS_NOTIFICATION_SETTINGS_NOTIFICATION_SETTINGS")
                }
                getTabTitle() {
                    return this._utilTrans.translate("TRANS_SETTINGS")
                }
                getSwitcherOnTitle() {
                    return this._utilTrans.translate("TRANS_NOTIFICATIONS_ARE_ON")
                }
                getSwitcherOffTitle() {
                    return this._utilTrans.translate("TRANS_NOTIFICATIONS_ARE_OFF")
                }
                getFavouriteSportsTitle() {
                    return this._utilTrans.translate("TRANS_NOTIFICATION_FAVOURITE_SPORTS")
                }
                getTurnOnAllNotificationsTitle() {
                    return this._utilTrans.translate("TRANS_NOTIFICATION_TURN_ON_ALL_NOTIFICATIONS")
                }
                getHandlerOnClick() {
                    return e => (this._window.dispatchEvent(new Event("ShowNotificationSettingsDialog")), !0)
                }
                getHandlerOnClose() {
                    return e => (this._window.dispatchEvent(new Event("HideNotificationSettingsDialog")), !0)
                }
                _getNotificationsModule() {
                    return new Promise(e => {
                        this._loaderHandler.get("notifications").call(e)
                    })
                }
                getIsTokenEnabledHandler() {
                    return () => new Promise(e => {
                        this._getNotificationsModule().then(t => e(!!t && t.isUserTokenEnabled()))
                    })
                }
                getCurrentSettings() {
                    return new Promise(e => {
                        this._getNotificationsModule().then(t => {
                            if (!t) return;
                            const n = t.getCurrentSettings(),
                                a = [];
                            n.getAll().forEach(e => {
                                a.push(e.getValue())
                            }), e(a)
                        })
                    })
                }
                _getSortedSportList() {
                    const e = this._window.document.querySelectorAll(this._sportsSelector),
                        t = [],
                        n = {
                            majorSports: [],
                            minorSports: []
                        };
                    return e.forEach(e => {
                        const a = e.dataset.sportId;
                        if (a) {
                            const r = parseInt(a);
                            if (-1 == t.indexOf(r)) {
                                const a = e.classList.contains(this._majorMenuItemClassName);
                                t.push(r), a ? n.majorSports.push(r) : n.minorSports.push(r)
                            }
                        }
                    }), n
                }
                getSports() {
                    const e = [],
                        t = this._getSortedSportList(),
                        n = this._utilEnviroment.getSportListById();
                    return ["majorSports", "minorSports"].forEach(a => {
                        for (const r of t[a]) {
                            if (this._utilSport.getParentSport(r) || !(r in yl)) continue;
                            const t = [];
                            for (const e of yl[r]) t.push({
                                notificationType: e.notificationType,
                                translation: this._utilTrans.translate("TRANS_NOTIFICATION_DETAILED_SETTINGS_" + e.translation)
                            });
                            e.push({
                                id: r,
                                title: this._utilSport.getTranslatedName(r),
                                icon: n[r],
                                options: t,
                                majorMenuItem: "majorSports" == a
                            })
                        }
                    }), e
                }
                onEnabledChangeHandler(e) {
                    const t = e.target.checked;
                    this._getNotificationsModule().then(e => {
                        e && (e.setUserTokenEnabled(t), e.synchronize())
                    })
                }
                onChangeHandler(e, t, n) {
                    const a = n.target.checked,
                        r = this._utilSport.isStageSport(t),
                        i = this._utilSport.isGolf(t),
                        s = [`sport_${t};${e}`];
                    (i || r) && e == Cl.RACE_END ? (s.push(`sport_${t};${Cl.INGROUP_MATCH_END}`), s.push(`sport_${t};${Cl.RACE_STAGE_END}`)) : (i || r) && e == Cl.RACE_START && (s.push(`sport_${t};${Cl.INGROUP_MATCH_START}`), s.push(`sport_${t};${Cl.RACE_STAGE_START}`)), this._utilSport.getSportIdsInParentSport(t).forEach(t => {
                        s.push(`sport_${t};${e}`), (i || r) && e == Cl.RACE_END ? (s.push(`sport_${t};${Cl.INGROUP_MATCH_END}`), s.push(`sport_${t};${Cl.RACE_STAGE_END}`)) : (i || r) && e == Cl.RACE_START && (s.push(`sport_${t};${Cl.INGROUP_MATCH_START}`), s.push(`sport_${t};${Cl.RACE_STAGE_START}`))
                    }), this._getNotificationsModule().then(e => {
                        e && (a ? s.forEach(t => {
                            e.addSettingOption(t)
                        }) : s.forEach(t => {
                            e.removeSettingOption(t)
                        }), e.synchronize())
                    })
                }
            }
            class Ll {
                constructor(e) {
                    this.DELIMITER_ROW = "~", this.DELIMITER_CELL = "Â¬", this.DELIMITER_VALUE = "Ã·", this._transferParser = e
                }
                parse(e) {
                    const t = this._transferParser;
                    t.startFeed();
                    const n = e.split(this.DELIMITER_ROW);
                    for (const e of n) {
                        t.startRow();
                        const n = e.split(this.DELIMITER_CELL);
                        for (const e of n) {
                            const n = e.split(this.DELIMITER_VALUE);
                            t.parse(n[0], n[1])
                        }
                        t.endRow()
                    }
                    return t.endFeed(), t.getParsedModel()
                }
            }
            class Pl {
                constructor(e, t) {
                    this.allowedNodeTypes = [], this.allowedPropertyTypes = [], this._builderTree = e, this._constants = t.getFeedIndexes(), this.allowedNodeTypes = [this._constants.COMMONINDEXES_GROUP, this._constants.COMMONINDEXES_TABLE, this._constants.COMMONINDEXES_HEADER, this._constants.COMMONINDEXES_UNKNOWN, this._constants.COMMONINDEXES_ROOT, this._constants.COMMONINDEXES_MENU, this._constants.COMMONINDEXES_TAB, this._constants.COMMONINDEXES_ROW, this._constants.COMMONINDEXES_COL, this._constants.COMMONINDEXES_ROW_SCORE, this._constants.COMMONINDEXES_ROW_POINTS, this._constants.COMMONINDEXES_ROW_CURRENT, this._constants.COMMONINDEXES_SCORE, this._constants.COMMONINDEXES_TEXT_SPEC], this.allowedPropertyTypes = [this._constants.COMMONINDEXES_UNKNOWN_PROPERTY, this._constants.TRANSFERSINDEXES_DATE, this._constants.TRANSFERSINDEXES_TRANSFER_DIRECTION, this._constants.COMMONINDEXES_VALUE, this._constants.COMMONINDEXES_TAB_ID, this._constants.TRANSFERSINDEXES_TRANSFER_TYPE, this._constants.TRANSFERSINDEXES_AFFECTED_TEAM, this._constants.TRANSFERSINDEXES_PARTICIPANT_ICON, this._constants.TRANSFERSINDEXES_PROPERTY_ID, this._constants.TRANSFERSINDEXES_TEAM_URL, this._constants.TRANSFERSINDEXES_PLAYER_URL, this._constants.TRANSFERSINDEXES_COUNTRY_NAME]
                }
                startFeed() {
                    this._nodeBuilder = this._builderTree.startFeed()
                }
                endFeed() {
                    this._builderTree.endFeed()
                }
                startRow() {}
                endRow() {}
                parse(e, t) {
                    const n = cjs.dic.getClass("Feed_Table_NodeType"),
                        a = this._builderTree;
                    switch (e) {
                        case this._constants.FSCORE_TABLEDATAINDEXES_NODE_START:
                            this._nodeBuilder = a.startNode(n.getByIdent(this._isNodeTypeAllowed(t)));
                            break;
                        case this._constants.FSCORE_TABLEDATAINDEXES_NODE_ID:
                            this._nodeBuilder.setId(t);
                            break;
                        case this._constants.FSCORE_TABLEDATAINDEXES_NODE_END:
                            this._nodeBuilder = a.endNode();
                            break;
                        case this._constants.FSCORE_TABLEDATAINDEXES_PROPERTY_TYPE:
                            this._propertyType = this._isPropertyAllowed(t);
                            break;
                        case this._constants.FSCORE_TABLEDATAINDEXES_PROPERTY_VALUE:
                            if (this._propertyType === this._constants.COMMONINDEXES_UNKNOWN_PROPERTY) return;
                            this._nodeBuilder.setProperty(this._propertyType, t), this._propertyType = this._constants.COMMONINDEXES_UNKNOWN_PROPERTY
                    }
                }
                getParsedModel() {
                    return this._nodeBuilder.build()
                }
                _isPropertyAllowed(e) {
                    if (-1 === this.allowedPropertyTypes.indexOf(e)) throw new Error("Not valid property type: " + e);
                    return e
                }
                _isNodeTypeAllowed(e) {
                    return -1 === this.allowedNodeTypes.indexOf(e) ? "" : e
                }
            }
            const Ml = {
                fullFeedLoaded: () => {},
                loadingState: (e, t) => {},
                loadingStateReset: () => {},
                setCalendarDate: e => {},
                reloadDay: e => {},
                reloadEvent: e => {},
                reloadLeague: e => {},
                reloadMyGamesTabCounter: () => {},
                reloadTabContent: e => {},
                forceRedrawTabContent: e => {},
                reloadNoMatch: () => {},
                reloadDraw: () => {},
                reloadStaticContent: () => {},
                reloadOnDayChange: () => {},
                reloadTeamTransfers: (e, t, n, a, r) => {}
            };
            window.cjs.reactCalls = Ml,
                function() {
                    const e = cjs.Api.loader;
                    e.get("cjs").call((function(t) {
                        const n = parseInt(window.sportId),
                            a = {
                                name: function(e) {
                                    return t.dic.get("util_sport").getOriginalNameFromId(e)
                                }(n),
                                isDuel: !window.isNoDuelSport(n),
                                sportId: window.sport_id
                            },
                            i = new Ol.a,
                            l = t.pageTab,
                            o = new ul.a,
                            c = o.createUtilPage(),
                            g = c.getPageType(),
                            _ = new ml,
                            h = new Rl.a(e);
                        window.allEvents = new dl(t.dic.get("Data_EventHolderProxy"), t.dic.get("Data_LeagueHolderProxy"), t.Api.highlighterContainer, o, _, h, new vl, new Il, new pl, Ml, g);
                        const E = (new Nl).setSportId(n).setParticipantId(c.getParticipantEncodedId()).setPageTab(l).setTransferParser(new Ll(new Pl(t.dic.get("Feed_Table_BuilderTree"), t.dic.get("util_enviroment")))).setContainerBuilderWithNewsfeedParser(t.dic.getNewInstance("Feed_Table_ContainerBuilder").setSpecificParser(t.dic.getNewInstance("Feed_Table_NewsfeedParser"))).setUtilFactory(new ul.a).setMyTeamsHandler(t.myTeams).setReactCalls(Ml).setDicProxy(t.dic.get("DicProxy")),
                            d = new Hl(o, window, e),
                            T = t.hasDraw || !1,
                            u = new Tl(o, _, T);
                        if (pa.isRanking(u)) {
                            const e = t.rankingId;
                            u.setPageTypeSpecific(new ma(e, window.allEvents, o, _))
                        } else if (pa.isDraw(u)) {
                            const e = t.drawWithSwappedParticipants || !1;
                            u.setPageTypeSpecific(new va(window.allEvents, o, _, c.getParticipantEncodedId(), e))
                        }
                        Dl.reactEnabled(o) ? s.render(r.createElement(Rr, {
                            utilFactory: o,
                            fsLiveTable: window.allEvents,
                            reactCalls: Ml,
                            sportDetails: a,
                            pageType: g,
                            pageTab: l,
                            teamPageProvider: E,
                            loadingController: i,
                            notificationsProvider: d,
                            page: u
                        }), document.getElementById("live-table")) : document.body.classList.toggle("loading", !1), e.get("react").fulfill(e => {
                            e(Ml)
                        })
                    }))
                }()
        },
        5: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.MIXED = -1] = "MIXED", e[e.SOCCER = 1] = "SOCCER", e[e.TENNIS = 2] = "TENNIS", e[e.BASKETBALL = 3] = "BASKETBALL", e[e.HOCKEY = 4] = "HOCKEY", e[e.AMERICAN_FOOTBALL = 5] = "AMERICAN_FOOTBALL", e[e.BASEBALL = 6] = "BASEBALL", e[e.HANDBALL = 7] = "HANDBALL", e[e.RUGBY_UNION = 8] = "RUGBY_UNION", e[e.FLOORBALL = 9] = "FLOORBALL", e[e.BANDY = 10] = "BANDY", e[e.FUTSAL = 11] = "FUTSAL", e[e.VOLLEYBALL = 12] = "VOLLEYBALL", e[e.CRICKET = 13] = "CRICKET", e[e.DARTS = 14] = "DARTS", e[e.SNOOKER = 15] = "SNOOKER", e[e.BOXING = 16] = "BOXING", e[e.BEACH_VOLLEYBALL = 17] = "BEACH_VOLLEYBALL", e[e.AUSSIE_RULES = 18] = "AUSSIE_RULES", e[e.RUGBY_LEAGUE = 19] = "RUGBY_LEAGUE", e[e.BADMINTON = 21] = "BADMINTON", e[e.WATER_POLO = 22] = "WATER_POLO", e[e.FIELD_HOCKEY = 24] = "FIELD_HOCKEY", e[e.TABLE_TENNIS = 25] = "TABLE_TENNIS", e[e.BEACH_SOCCER = 26] = "BEACH_SOCCER", e[e.MMA = 28] = "MMA", e[e.NETBALL = 29] = "NETBALL", e[e.PESAPALLO = 30] = "PESAPALLO", e[e.GOLF = 23] = "GOLF", e[e.MOTORSPORT = 31] = "MOTORSPORT", e[e.MOTORSPORT_AUTO_RACING = 32] = "MOTORSPORT_AUTO_RACING", e[e.MOTORSPORT_MOTO_RACING = 33] = "MOTORSPORT_MOTO_RACING", e[e.CYCLING = 34] = "CYCLING", e[e.HORSE_RACING = 35] = "HORSE_RACING", e[e.ESPORTS = 36] = "ESPORTS", e[e.WINTER_SPORTS = 37] = "WINTER_SPORTS", e[e.WINTER_SPORTS_SKI_JUMPING = 38] = "WINTER_SPORTS_SKI_JUMPING", e[e.WINTER_SPORTS_ALPINE_SKIING = 39] = "WINTER_SPORTS_ALPINE_SKIING", e[e.WINTER_SPORTS_CROSS_COUNTRY = 40] = "WINTER_SPORTS_CROSS_COUNTRY", e[e.WINTER_SPORTS_BIATHLON = 41] = "WINTER_SPORTS_BIATHLON", e[e.KABADDI = 42] = "KABADDI"
                }(a || (a = {}))
        },
        50: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            })), n.d(t, "b", (function() {
                return s
            }));
            var a = n(0),
                r = n.n(a);
            const i = r.a.createContext({
                selected: {
                    index: 0,
                    key: null
                },
                setSelected: e => {}
            });

            function s() {
                return r.a.useContext(i)
            }
        },
        53: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            }));
            class a {
                static createParams(e) {
                    return e.length ? "?" + e.map(this.createParameter).join("&") : ""
                }
                static createParameter(e) {
                    return `${e.key}=${e.value}`
                }
            }
        },
        55: function(e, t, n) {
            "use strict";

            function a(e, t) {
                return e.reduce((e, n, a) => {
                    const r = function(e) {
                        return "function" == typeof e
                    }(t) ? t(n, a) : t;
                    return [...e, ...a > 0 ? [r] : [], n]
                }, [])
            }
            n.d(t, "a", (function() {
                return a
            }))
        },
        56: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n.n(a);
            const i = ({
                children: e,
                isActive: t,
                onClick: n,
                title: a,
                className: i
            }) => r.a.createElement("div", {
                className: `${i||""} ${t?"selected":""}`,
                title: a,
                onClick: n
            }, e)
        },
        57: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })), n.d(t, "b", (function() {
                    return r
                })),
                function(e) {
                    e.UP = "u", e.DOWN = "d"
                }(a || (a = {}));
            class r {
                constructor(e, t = null, n = null) {
                    this.value = e, this.prevValue = t, this.arrow = n
                }
                getValue() {
                    return this.value
                }
                getPrevValue() {
                    return this.prevValue
                }
                getArrow() {
                    return this.arrow
                }
            }
        },
        6: function(e, t, n) {
            e.exports = {
                tennis: "tennis___25pcSFM",
                "table-tennis": "table-tennis___qjkrG0G",
                badminton: "badminton___3ItxTGb",
                volleyball: "volleyball___69INWTy",
                "beach-volleyball": "beach-volleyball___2FMTmsu",
                darts: "darts___21USfEO",
                "american-football": "american-football___Wn5DCCH",
                baseball: "baseball___2lYisnp",
                "baseball-bat": "baseball-bat___xH-nvfO",
                pesapallo: "pesapallo___14h4NXe",
                "pesapallo-bat": "pesapallo-bat___1-MhZe1",
                cricket: "cricket___37uC4sU",
                "cricket-bat": "cricket-bat___2tuMv9D",
                winner: "winner___259228F",
                info: "info___3Lh1dXC",
                tv: "tv___3CDCWbf",
                draw: "draw___2W5p2Wo",
                shirt: "shirt___1FMTTpd",
                calendar: "calendar___3Ndx7Rd",
                headphones: "headphones___1JcUGYy",
                pause: "pause___2NpUi-7",
                stream: "stream___1M_rykF",
                "stream-locked": "stream-locked___pOMTj02",
                arrowUp: "arrowUp___1j5YCOA",
                arrowDown: "arrowDown___2PHXpul",
                sortArrowUp: "sortArrowUp___1QJuuXa",
                sortArrowDown: "sortArrowDown___3mi9UME",
                bet: "bet___3LxnyUK",
                liveBet: "liveBet___RyYMCMN",
                footballGoal: "footballGoal___JhNvHxG",
                footballOwnGoal: "footballOwnGoal___1GrwaFf",
                footballPenalty: "footballPenalty___SqIJEtp",
                penaltyMissed: "penaltyMissed___3bhzOSG",
                card: "card___2ip_DLm",
                yellowCard: "yellowCard___1KfFgE0",
                redYellowCard: "redYellowCard___z3VMZ1T",
                oddsUp: "oddsUp___1yw5S0X",
                oddsDown: "oddsDown___34PX8Qo",
                var: "var___1VjnNmL",
                floorballBall: "floorballBall___3DPGdKo",
                floorballOwnGoal: "floorballOwnGoal____f6BtLf",
                video: "video___2uoR0Vq",
                assist: "assist___R2EpPRJ",
                jersey: "jersey___1VJJIiY",
                americanFootballBall: "americanFootballBall___304AnNq",
                teamLogoPlaceholder: "teamLogoPlaceholder___19OkolR",
                emptyTeamLogo: "emptyTeamLogo___TMUSvy-",
                liveStreamLogo: "liveStreamLogo___1iNzonP",
                rugbyBall: "rugbyBall___23qEvBF"
            }
        },
        60: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return s
            }));
            var a = n(44),
                r = function(e, t, n, a) {
                    return new(n || (n = Promise))((function(r, i) {
                        function s(e) {
                            try {
                                o(a.next(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function l(e) {
                            try {
                                o(a.throw(e))
                            } catch (e) {
                                i(e)
                            }
                        }

                        function o(e) {
                            var t;
                            e.done ? r(e.value) : (t = e.value, t instanceof n ? t : new n((function(e) {
                                e(t)
                            }))).then(s, l)
                        }
                        o((a = a.apply(e, t || [])).next())
                    }))
                };
            class i extends a.b {
                constructor(e) {
                    super(), this.body = e
                }
                getBody() {
                    return this.body
                }
            }
            class s extends a.a {
                constructor(e, t, n) {
                    super(e, t, n), this.resolveFetchedData = e => r(this, void 0, void 0, (function*() {
                        return new i(yield e.text())
                    }))
                }
            }
        },
        61: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return g
            }));
            var a = n(0),
                r = n(10),
                i = n(76),
                s = n(96),
                l = n(62),
                o = n(97),
                c = function(e, t) {
                    var n = {};
                    for (var a in e) Object.prototype.hasOwnProperty.call(e, a) && t.indexOf(a) < 0 && (n[a] = e[a]);
                    if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
                        var r = 0;
                        for (a = Object.getOwnPropertySymbols(e); r < a.length; r++) t.indexOf(a[r]) < 0 && Object.prototype.propertyIsEnumerable.call(e, a[r]) && (n[a[r]] = e[a[r]])
                    }
                    return n
                };
            let g = (() => {
                class e {
                    static displayFinalResultOnlyIcon(e) {
                        return e.finalResultOnlyIcon ? i.a.render({
                            enabled: e.finalResultOnlyIcon.isEnabled(),
                            title: e.finalResultOnlyIcon.getTitle(),
                            text: e.finalResultOnlyIcon.getText(),
                            handlerOnClick: e.finalResultOnlyIcon.getHandlerOnClick(),
                            handlerOnMouseEnter: e.finalResultOnlyIcon.getHandlerOnMouseEnter(),
                            handlerOnMouseLeave: e.finalResultOnlyIcon.getHandlerOnMouseLeave()
                        }) : null
                    }
                    static displayPreviewIcon(e) {
                        return e.previewIcon && e.previewIcon.isEnabled() ? s.a.render({
                            enabled: e.previewIcon.isEnabled(),
                            handlerOnClick: e.previewIcon.getHandlerOnClick(),
                            handlerOnMouseEnter: e.previewIcon.getHandlerOnMouseEnter(),
                            handlerOnMouseLeave: e.previewIcon.getHandlerOnMouseLeave()
                        }) : null
                    }
                    static showEventStage(e) {
                        var {
                            showStatus: t = !0
                        } = e, n = c(e, ["showStatus"]);
                        const a = [...this.lineThroughEventStages, r.a.WALKOVER, r.a.INTERUPTED, r.a.DELAYED, r.a.AWARDED, r.a.AFTER_ET, r.a.AFTER_PEN];
                        return t && a.includes(n.eventStage) ? o.a.render({
                            stageTime: n.stageTime || null,
                            eventStage: n.eventStage,
                            usTimeFormat: n.usTimeFormat,
                            highlighted: n.highlighted
                        }) : null
                    }
                    static isLineThrough(e) {
                        return this.lineThroughEventStages.includes(e)
                    }
                    static renderTime(e) {
                        let t = e.startTime || "";
                        return e.dateFormat == l.a.DATE ? t = e.startDate || "" : e.showDateWithTime && (t = e.usTimeFormat ? a.createElement(a.Fragment, null, e.startDate, a.createElement("br", null), e.startTime) : e.startDate + " " + e.startTime), this.isLineThrough(e.eventStage) ? a.createElement("div", {
                            className: "lineThrough"
                        }, t) : t
                    }
                    static render(e) {
                        return a.createElement("div", {
                            className: "event__time" + (e.highlighted ? " highlighted" : "") + (e.usTimeFormat ? " event__time--usFormat" : "")
                        }, this.renderTime(e), this.displayFinalResultOnlyIcon(e), this.displayPreviewIcon(e), this.showEventStage(e))
                    }
                }
                return e.lineThroughEventStages = [r.a.POSTPONED, r.a.ABANDONED, r.a.CANCELED], e
            })()
        },
        62: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.TIME = 0] = "TIME", e[e.DATE = 1] = "DATE"
                }(a || (a = {}))
        },
        63: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return a
            })), n.d(t, "b", (function() {
                return r
            }));
            class a {
                constructor(e, t) {
                    this.tabs = e, this.content = t
                }
                getTabs() {
                    return this.tabs
                }
                getContent() {
                    return this.content
                }
            }
            class r {
                constructor() {
                    this.tabs = [], this.content = []
                }
                addTab(e) {
                    return this.tabs.push(e), this
                }
                addSubTabOrContent(e) {
                    return this.content.push(e), this
                }
                build() {
                    return new a(this.tabs, this.content)
                }
            }
        },
        7: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.NONE = -1] = "NONE", e[e.RANK = 1] = "RANK", e[e.POINTS = 2] = "POINTS", e[e.JUMP_ROUND_1 = 3] = "JUMP_ROUND_1", e[e.JUMP_ROUND_2 = 4] = "JUMP_ROUND_2", e[e.TIME = 5] = "TIME", e[e.GAP = 6] = "GAP", e[e.EVENT_PARTICIPANT_SORT_KEY = 7] = "EVENT_PARTICIPANT_SORT_KEY", e[e.STOP_REASON = 8] = "STOP_REASON", e[e.PENALTY_LAP = 9] = "PENALTY_LAP", e[e.MISSED_SHOT = 10] = "MISSED_SHOT", e[e.STOP_EVENT_STAGE = 11] = "STOP_EVENT_STAGE", e[e.POINTS_ROUND_1 = 12] = "POINTS_ROUND_1", e[e.POINTS_ROUND_2 = 13] = "POINTS_ROUND_2", e[e.TIME_ROUND_1 = 14] = "TIME_ROUND_1", e[e.TIME_ROUND_2 = 15] = "TIME_ROUND_2", e[e.STOP_REASON_ROUND_1 = 16] = "STOP_REASON_ROUND_1", e[e.STOP_REASON_ROUND_2 = 17] = "STOP_REASON_ROUND_2", e[e.ON_TRACK = 18] = "ON_TRACK", e[e.STOP_REASON_TEXT = 19] = "STOP_REASON_TEXT", e[e.LAPS_DISTANCE = 20] = "LAPS_DISTANCE", e[e.JUMP_COUNT = 21] = "JUMP_COUNT", e[e.RIDES = 22] = "RIDES", e[e.WINS = 23] = "WINS", e[e.ROUND_1 = 24] = "ROUND_1", e[e.ROUND_2 = 25] = "ROUND_2", e[e.ROUND_3 = 26] = "ROUND_3", e[e.ROUND_4 = 27] = "ROUND_4", e[e.ROUND_5 = 28] = "ROUND_5", e[e.ROUND_6 = 29] = "ROUND_6", e[e.ROUND_7 = 30] = "ROUND_7", e[e.ROUND_8 = 31] = "ROUND_8", e[e.ROUND_9 = 32] = "ROUND_9", e[e.ROUND_10 = 33] = "ROUND_10", e[e.ROUND_11 = 34] = "ROUND_11", e[e.ROUND_12 = 35] = "ROUND_12", e[e.ROUND_13 = 36] = "ROUND_13", e[e.ROUND_14 = 37] = "ROUND_14", e[e.ROUND_15 = 38] = "ROUND_15", e[e.ROUND_16 = 39] = "ROUND_16", e[e.ROUND_17 = 40] = "ROUND_17", e[e.ROUND_18 = 41] = "ROUND_18", e[e.ROUND_19 = 42] = "ROUND_19", e[e.ROUND_20 = 43] = "ROUND_20", e[e.SEMIFINAL_1 = 44] = "SEMIFINAL_1", e[e.SEMIFINAL_2 = 45] = "SEMIFINAL_2", e[e.FINAL_ROUND = 46] = "FINAL_ROUND", e[e.LAPS = 47] = "LAPS", e[e.GRID = 48] = "GRID", e[e.PITSTOPS = 49] = "PITSTOPS", e[e.DARTS_180S = 50] = "DARTS_180S", e[e.DARTS_140_PLUS = 51] = "DARTS_140_PLUS", e[e.DARTS_100_PLUS = 52] = "DARTS_100_PLUS", e[e.DARTS_CHECKOUTS = 53] = "DARTS_CHECKOUTS", e[e.DARTS_CHECKOUTS_MAX = 54] = "DARTS_CHECKOUTS_MAX", e[e.DARTS_AVERAGES = 55] = "DARTS_AVERAGES", e[e.DARTS_LEG_WON = 56] = "DARTS_LEG_WON", e[e.LEG = 57] = "LEG", e[e.ROUND = 58] = "ROUND", e[e.PREV_POINTS = 59] = "PREV_POINTS", e[e.CURRENT_POINTS = 60] = "CURRENT_POINTS", e[e.OPPONENT_POINTS = 61] = "OPPONENT_POINTS", e[e.RESULT = 62] = "RESULT", e[e.LEG_RESULT = 63] = "LEG_RESULT", e[e.IS_PLAYING = 64] = "IS_PLAYING", e[e.CURRENT_LEG_RESULT = 65] = "CURRENT_LEG_RESULT", e[e.RUN_RATE = 66] = "RUN_RATE", e[e.SHOOTING = 67] = "SHOOTING"
                }(a || (a = {}))
        },
        76: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);
            class r {
                static render(e) {
                    return e.enabled ? a.createElement("div", {
                        className: "event__stage--pkv",
                        title: e.title,
                        onClick: e.handlerOnClick,
                        onMouseEnter: e.handlerOnMouseEnter,
                        onMouseLeave: e.handlerOnMouseLeave
                    }, e.text) : null
                }
            }
        },
        77: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n(50);
            const i = ({
                children: e,
                initiallySelected: t,
                onSelect: n
            }) => {
                const [i, s] = a.useState({
                    index: t,
                    key: null
                });
                return a.createElement(r.a.Provider, {
                    value: {
                        selected: i,
                        setSelected: e => {
                            s(e), n && n(e)
                        }
                    }
                }, e)
            }
        },
        78: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(50);

            function r({
                children: e
            }) {
                const {
                    selected: t
                } = Object(a.b)();
                return e[t.index] || ""
            }
        },
        79: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n(50);
            const i = ({
                children: e,
                className: t
            }) => {
                const {
                    selected: n,
                    setSelected: i
                } = Object(r.b)();
                if (n.index >= a.Children.count(e)) {
                    const {
                        key: t
                    } = a.Children.toArray(e)[0];
                    i({
                        index: 0,
                        key: t
                    })
                }
                const s = a.Children.map(e, (e, t) => a.cloneElement(e, {
                    isActive: t === n.index,
                    onClick: e.props.onClick || (() => i({
                        index: t,
                        key: e.key
                    }))
                }));
                return "";
            }
        },
        8: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.SCHEDULED = 1] = "SCHEDULED", e[e.LIVE = 2] = "LIVE", e[e.FINISHED = 3] = "FINISHED"
                }(a || (a = {}))
        },
        80: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.SCHEDULED = 1] = "SCHEDULED", e[e.LIVE = 2] = "LIVE", e[e.FINISHED = 3] = "FINISHED", e.TYPE_MAIN = "main", e.TYPE_ALTER = "alter", e.TYPE_MERGED = "merged"
                }(a || (a = {}))
        },
        9: function(e, t, n) {
            "use strict";
            var a;
            n.d(t, "a", (function() {
                    return a
                })),
                function(e) {
                    e[e.TAB_NONE = -1] = "TAB_NONE", e[e.TAB_ID_ALL = 0] = "TAB_ID_ALL", e[e.TAB_ID_LIVE = 1] = "TAB_ID_LIVE", e[e.TAB_ID_FINISHED = 2] = "TAB_ID_FINISHED", e[e.TAB_ID_SCHEDULED = 3] = "TAB_ID_SCHEDULED", e[e.TAB_ID_ODDS = 4] = "TAB_ID_ODDS", e[e.TAB_ID_MYGAMES = 5] = "TAB_ID_MYGAMES", e[e.TAB_ID_MYGAMES_GROUPS = 55] = "TAB_ID_MYGAMES_GROUPS", e[e.TAB_ID_COUNTRY_ALL = 6] = "TAB_ID_COUNTRY_ALL", e[e.TAB_ID_COUNTRY_SCHEDULED = 7] = "TAB_ID_COUNTRY_SCHEDULED", e[e.TAB_ID_TV = 8] = "TAB_ID_TV", e[e.TAB_ID_MYTEAMS = 10] = "TAB_ID_MYTEAMS"
                }(a || (a = {}))
        },
        90: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(22);
            class r {
                constructor(e, t, n) {
                    this.channel = e, this.eventChannels = t, this.defaultBundleUuid = n
                }
                getChannel() {
                    return this.channel
                }
                getDefaultBundleUuid() {
                    return this.defaultBundleUuid
                }
                getEventChannels() {
                    return this.eventChannels
                }
            }
            class i {
                constructor() {
                    this.eventChannels = [], this.defaultBundleUuid = ""
                }
                setChannel(e) {
                    return this.channel = e, this
                }
                setEventChannels(e) {
                    return this.eventChannels = e, this
                }
                setDefaultBundleUuid(e) {
                    return this.defaultBundleUuid = e, this
                }
                build() {
                    return new r(this.channel || (new a.a).build(), this.eventChannels, this.defaultBundleUuid)
                }
            }
        },
        96: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return r
            }));
            var a = n(0);
            class r {
                static render(e) {
                    return e.enabled ? a.createElement("span", {
                        className: "icon icon--preview",
                        onClick: e.handlerOnClick,
                        onMouseEnter: e.handlerOnMouseEnter,
                        onMouseLeave: e.handlerOnMouseLeave
                    }) : null
                }
            }
        },
        97: function(e, t, n) {
            "use strict";
            n.d(t, "a", (function() {
                return i
            }));
            var a = n(0),
                r = n(76);
            class i {
                static displayFinalResultOnlyIcon(e) {
                    return e.finalResultOnlyIcon && e.finalResultOnlyIcon.isEnabled() ? r.a.render({
                        enabled: e.finalResultOnlyIcon.isEnabled(),
                        title: e.finalResultOnlyIcon.getTitle(),
                        text: e.finalResultOnlyIcon.getText(),
                        handlerOnClick: e.finalResultOnlyIcon.getHandlerOnClick(),
                        handlerOnMouseEnter: e.finalResultOnlyIcon.getHandlerOnMouseEnter(),
                        handlerOnMouseLeave: e.finalResultOnlyIcon.getHandlerOnMouseLeave()
                    }) : null
                }
                static displayEventStage(e) {
                    return e.stageTime && (e.stageTime.includes("<") || e.stageTime.includes(";")) ? a.createElement("div", {
                        className: "event__stage" + (e.highlighted ? " highlighted" : "") + (e.usTimeFormat ? " event__stage--usFormat" : "")
                    }, a.createElement("div", {
                        dangerouslySetInnerHTML: {
                            __html: e.stageTime || ""
                        },
                        className: "event__stage--block"
                    })) : a.createElement("div", {
                        className: "event__stage" + (e.highlighted ? " highlighted" : "") + (e.usTimeFormat ? " event__stage--usFormat" : "")
                    }, a.createElement("div", {
                        className: "event__stage--block"
                    }, e.stageTime))
                }
                static render(e) {
                    return this.displayFinalResultOnlyIcon(e) || this.displayEventStage(e)
                }
            }
        }
    },
    [
        [451, 0, 1]
    ]
]);