(function(e, a) { for(var i in a) e[i] = a[i]; }(this, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../lib/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../src/edq.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../src/edq.ts":
/*!*********************!*\
  !*** ../src/edq.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pro_web_1 = __webpack_require__(/*! ./pro-web */ \"../src/pro-web.ts\");\nvar phone_validate_1 = __webpack_require__(/*! ./phone-validate */ \"../src/phone-validate.ts\");\nvar global_intuitive_1 = __webpack_require__(/*! ./global-intuitive */ \"../src/global-intuitive.ts\");\nvar email_validate_1 = __webpack_require__(/*! ./email-validate */ \"../src/email-validate.ts\");\nvar iff_1 = __webpack_require__(/*! ./iff */ \"../src/iff.ts\");\n(function () {\n    var root = this;\n    var previousEdq = root.EDQ;\n    var EDQ = {};\n    root.EDQ = previousEdq || EDQ;\n    var ProWebOnDemand = new pro_web_1.default({\n        EDQ_CONFIG: null,\n        SOAP_ACTION_URL: null,\n        PRO_WEB_SERVICE_URL: null,\n        PRO_WEB_AUTH_TOKEN: null,\n        PRO_WEB_TIMEOUT: null,\n        onPremise: false\n    });\n    var ProWebOnPremise = new pro_web_1.default({\n        EDQ_CONFIG: null,\n        SOAP_ACTION_URL: null,\n        PRO_WEB_SERVICE_URL: null,\n        PRO_WEB_AUTH_TOKEN: null,\n        PRO_WEB_TIMEOUT: null,\n        onPremise: true\n    });\n    var ReversePhoneAppend = new phone_validate_1.default({ validationType: \"reversePhoneAppend\" });\n    var GlobalPhone = new phone_validate_1.default({ validationType: \"globalPhone\" });\n    var AperturePhone = new phone_validate_1.default({ validationType: \"aperturePhoneValidate\" });\n    var GlobalIntuitiveAddress = new global_intuitive_1.default({});\n    var GlobalEmail = new email_validate_1.default({});\n    var InstantFormFill = new iff_1.default({});\n    EDQ.address = {\n        globalIntuitive: {\n            search: GlobalIntuitiveAddress.search.bind(GlobalIntuitiveAddress),\n            format: GlobalIntuitiveAddress.format.bind(GlobalIntuitiveAddress)\n        },\n        proWeb: {\n            doSearch: ProWebOnPremise.doSearch.bind(ProWebOnPremise),\n            doRefine: ProWebOnPremise.doRefine.bind(ProWebOnPremise),\n            doGetSystemInfo: ProWebOnPremise.doGetSystemInfo.bind(ProWebOnPremise),\n            doGetPromptSet: ProWebOnPremise.doGetPromptSet.bind(ProWebOnPremise),\n            doGetLicenseInfo: ProWebOnPremise.doGetLicenseInfo.bind(ProWebOnPremise),\n            doGetLayouts: ProWebOnPremise.doGetLayouts.bind(ProWebOnPremise),\n            doGetExampleAddresses: ProWebOnPremise.doGetExampleAddresses.bind(ProWebOnPremise),\n            doGetDataMapDetail: ProWebOnPremise.doGetDataMapDetail.bind(ProWebOnPremise),\n            doGetData: ProWebOnPremise.doGetData.bind(ProWebOnPremise),\n            doGetAddress: ProWebOnPremise.doGetAddress.bind(ProWebOnPremise),\n            doCanSearch: ProWebOnPremise.doCanSearch.bind(ProWebOnPremise),\n            doGetDataHashCode: ProWebOnPremise.doGetDataHashCode.bind(ProWebOnPremise),\n            doUnlockDPV: ProWebOnPremise.doUnlockDPV.bind(ProWebOnPremise),\n            doGetDPVStatus: ProWebOnPremise.doGetDPVStatus.bind(ProWebOnPremise),\n            doBulkSearch: ProWebOnPremise.doBulkSearch.bind(ProWebOnPremise)\n        },\n        proWebOnDemand: {\n            doCanSearch: ProWebOnDemand.doCanSearch.bind(ProWebOnDemand),\n            doGetAddress: ProWebOnDemand.doGetAddress.bind(ProWebOnDemand),\n            doGetData: ProWebOnDemand.doGetData.bind(ProWebOnDemand),\n            doGetDataMapDetail: ProWebOnDemand.doGetDataMapDetail.bind(ProWebOnDemand),\n            doGetExampleAddresses: ProWebOnDemand.doGetExampleAddresses.bind(ProWebOnDemand),\n            doGetLayouts: ProWebOnDemand.doGetLayouts.bind(ProWebOnDemand),\n            doGetLicenseInfo: ProWebOnDemand.doGetLicenseInfo.bind(ProWebOnDemand),\n            doGetPromptSet: ProWebOnDemand.doGetPromptSet.bind(ProWebOnDemand),\n            doGetSystemInfo: ProWebOnDemand.doGetSystemInfo.bind(ProWebOnDemand),\n            doRefine: ProWebOnDemand.doRefine.bind(ProWebOnDemand),\n            doSearch: ProWebOnDemand.doSearch.bind(ProWebOnDemand),\n        },\n    };\n    EDQ.phone = {\n        reversePhoneAppend: ReversePhoneAppend.reversePhoneAppend.bind(ReversePhoneAppend),\n        globalPhoneValidate: GlobalPhone.globalPhoneValidate.bind(GlobalPhone),\n        aperturePhoneValidate: AperturePhone.aperturePhoneValidate.bind(AperturePhone)\n    };\n    EDQ.email = {\n        emailValidate: GlobalEmail.emailValidate.bind(GlobalEmail)\n    };\n    EDQ.enrichment = {\n        instantFormFill: {\n            token: InstantFormFill.token.bind(InstantFormFill),\n            request: InstantFormFill.request.bind(InstantFormFill)\n        }\n    };\n}).call(this);\n\n\n//# sourceURL=webpack:///../src/edq.ts?");

/***/ }),

/***/ "../src/email-validate.ts":
/*!********************************!*\
  !*** ../src/email-validate.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EmailValidate = /** @class */ (function () {\n    function EmailValidate(_a) {\n        var EMAIL_VALIDATE_AUTH_TOKEN = _a.EMAIL_VALIDATE_AUTH_TOKEN;\n        this.EMAIL_VALIDATE_URL = \"https://api.experianmarketingservices.com/sync/queryresult/EmailValidate/1.0/\";\n        this.EMAIL_VALIDATE_AUTH_TOKEN = function () {\n            return window.EdqConfig.EMAIL_VALIDATE_AUTH_TOKEN || EMAIL_VALIDATE_AUTH_TOKEN;\n        };\n    }\n    /**\n     * Makes the Email Validate request\n     */\n    EmailValidate.prototype.emailValidate = function (_a) {\n        var emailAddress = _a.emailAddress, _b = _a.timeout, timeout = _b === void 0 ? 15 : _b, _c = _a.verbose, verbose = _c === void 0 ? true : _c, callback = _a.callback;\n        if (!this.EMAIL_VALIDATE_AUTH_TOKEN()) {\n            throw 'Missing EMAIL_VALIDATE_AUTH_TOKEN';\n        }\n        return this.makeRequest(emailAddress, timeout, verbose, callback);\n    };\n    ;\n    /**\n     * Makes the XMLHttpRequest\n     */\n    EmailValidate.prototype.makeRequest = function (emailAddress, timeout, verbose, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(JSON.parse(this.response), null);\n                }\n                else {\n                    callback(null, {\n                        status: this.status,\n                        statusText: this.statusText\n                    });\n                }\n            }\n        };\n        xhr.open('POST', this.EMAIL_VALIDATE_URL);\n        xhr.setRequestHeader('Auth-Token', this.EMAIL_VALIDATE_AUTH_TOKEN());\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            email: emailAddress,\n            timeout: timeout,\n            verbose: verbose\n        }));\n        return xhr;\n    };\n    ;\n    return EmailValidate;\n}());\nexports.default = EmailValidate;\n\n\n//# sourceURL=webpack:///../src/email-validate.ts?");

/***/ }),

/***/ "../src/global-intuitive.ts":
/*!**********************************!*\
  !*** ../src/global-intuitive.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n;\nvar GlobalIntuitive = /** @class */ (function () {\n    function GlobalIntuitive(_a) {\n        var GLOBAL_INTUITIVE_AUTH_TOKEN = _a.GLOBAL_INTUITIVE_AUTH_TOKEN;\n        this.GLOBAL_INTUITIVE_URL = 'https://api.edq.com/capture/address/v2';\n        this.GLOBAL_INTUITIVE_AUTH_TOKEN = function () {\n            return window.EdqConfig.GLOBAL_INTUITIVE_AUTH_TOKEN || GLOBAL_INTUITIVE_AUTH_TOKEN;\n        };\n    }\n    /**\n     * Makes the Global Intuitive Search Request\n     */\n    GlobalIntuitive.prototype.search = function (_a) {\n        var query = _a.query, country = _a.country, location = _a.location, dataset = _a.dataset, _b = _a.take, take = _b === void 0 ? 7 : _b, callback = _a.callback;\n        if (!this.GLOBAL_INTUITIVE_AUTH_TOKEN()) {\n            throw 'Missing GLOBAL_INTUITIVE_AUTH_TOKEN';\n        }\n        var data = \"?query=\" + query + \"&country=\" + country + \"&take=\" + take + \"&auth-token=\" + this.GLOBAL_INTUITIVE_AUTH_TOKEN();\n        if (location) {\n            data += \"&location=\" + encodeURIComponent(location);\n        }\n        if (dataset) {\n            data += \"&dataset=\" + encodeURIComponent(dataset);\n        }\n        return this.makeRequest(data, this.GLOBAL_INTUITIVE_URL + \"/Search\", callback);\n    };\n    ;\n    /**\n     * Makes the Global Intuitive Format Request\n     */\n    GlobalIntuitive.prototype.format = function (_a) {\n        var formatUrl = _a.formatUrl, callback = _a.callback;\n        if (!this.GLOBAL_INTUITIVE_AUTH_TOKEN()) {\n            throw 'Missing GLOBAL_INTUITIVE_AUTH_TOKEN';\n        }\n        var data = \"&auth-token=\" + this.GLOBAL_INTUITIVE_AUTH_TOKEN();\n        return this.makeRequest(data, formatUrl, callback);\n    };\n    ;\n    /**\n     * Makes the HTTP request\n     *\n     * @param data - URL parameters\n     */\n    GlobalIntuitive.prototype.makeRequest = function (data, url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(JSON.parse(this.response), null);\n                }\n                else {\n                    callback(null, {\n                        status: this.status,\n                        statusText: this.statusText\n                    });\n                }\n            }\n        };\n        xhr.open('GET', \"\" + url + data);\n        xhr.send();\n        return xhr;\n    };\n    ;\n    return GlobalIntuitive;\n}());\nexports.default = GlobalIntuitive;\n\n\n//# sourceURL=webpack:///../src/global-intuitive.ts?");

/***/ }),

/***/ "../src/iff.ts":
/*!*********************!*\
  !*** ../src/iff.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** The Instant Form Fill addition to the Pegasus library */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IFF = /** @class */ (function () {\n    function IFF(_a) {\n        /** Configuration file that can optionally be used, if configuration is external to this library.\n         *  This approach is recommended.\n         *\n         *  @type {Object}\n         */\n        this.EDQ_CONFIG = function () {\n            return window.EdqConfig[\"instantFormFill\"] || {};\n        };\n        this.IFF_USERNAME = function () {\n            return this.EDQ_CONFIG().USERNAME;\n        };\n        this.IFF_PASSWORD = function () {\n            return this.EDQ_CONFIG().PASSWORD;\n        };\n        this.IFF_CLIENT_ID_HEADER = function () {\n            return this.EDQ_CONFIG().CLIENT_ID_HEADER;\n        };\n        this.IFF_CLIENT_SECRET_HEADER = function () {\n            return this.EDQ_CONFIG().CLIENT_SECRET_HEADER;\n        };\n        this.IFF_TOKEN_URL = function () {\n            return this.EDQ_CONFIG().TOKEN_URL;\n        };\n        this.IFF_REQUEST_URL = function () {\n            return this.EDQ_CONFIG().REQUEST_URL;\n        };\n    }\n    IFF.prototype.makeRequest = function (_a) {\n        var iffUrl = _a.iffUrl, body = _a.body, headers = _a.headers, callback = _a.callback;\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(JSON.parse(this.responseText), null);\n                }\n                else {\n                    callback(null, {\n                        status: this.status,\n                        statusText: this.statusText\n                    });\n                }\n            }\n        };\n        var headerKeys = Object.keys(headers);\n        xhr.open(\"POST\", iffUrl);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        for (var index = 0; index < headerKeys.length; index++) {\n            var headerName = headerKeys[index];\n            var headerValue = headers[headerName];\n            xhr.setRequestHeader(headerName, headerValue);\n        }\n        xhr.send(JSON.stringify(body));\n        return xhr;\n    };\n    ;\n    IFF.prototype.token = function (_a) {\n        var iffUrl = _a.iffUrl, clientId = _a.clientId, clientSecret = _a.clientSecret, username = _a.username, password = _a.password, callback = _a.callback;\n        return this.makeRequest({\n            iffUrl: iffUrl || this.IFF_TOKEN_URL(),\n            body: {\n                username: username || this.IFF_USERNAME(),\n                password: password || this.IFF_PASSWORD()\n            },\n            headers: {\n                \"CLIENT_ID\": clientId || this.IFF_CLIENT_ID_HEADER(),\n                \"CLIENT_SECRET\": clientSecret || this.IFF_CLIENT_SECRET_HEADER()\n            },\n            callback: callback,\n        });\n    };\n    ;\n    IFF.prototype.request = function (_a) {\n        var iffUrl = _a.iffUrl, accessToken = _a.accessToken, requestId = _a.requestId, firstName = _a.firstName, lastName = _a.lastName, zipCode = _a.zipCode, ssn4 = _a.ssn4, callback = _a.callback;\n        return this.makeRequest({\n            iffUrl: iffUrl || this.IFF_REQUEST_URL(),\n            body: {\n                requestID: requestId,\n                PID: \"device_only\",\n                cinfo: {\n                    firstName: firstName,\n                    lastName: lastName,\n                    zipCode: zipCode,\n                    ssn4: ssn4\n                },\n                deviceInfo: \"\"\n            },\n            headers: {\n                \"Authorization\": \"Bearer \" + accessToken\n            },\n            callback: callback\n        });\n    };\n    return IFF;\n}());\nexports.default = IFF;\n\n\n//# sourceURL=webpack:///../src/iff.ts?");

/***/ }),

/***/ "../src/phone-validate.ts":
/*!********************************!*\
  !*** ../src/phone-validate.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PhoneValidate = /** @class */ (function () {\n    function PhoneValidate(_a) {\n        var PHONE_VALIDATE_PLUS_AUTH_TOKEN = _a.PHONE_VALIDATE_PLUS_AUTH_TOKEN, PHONE_VALIDATE_PLUS_URL = _a.PHONE_VALIDATE_PLUS_URL, GLOBAL_PHONE_VALIDATE_AUTH_TOKEN = _a.GLOBAL_PHONE_VALIDATE_AUTH_TOKEN, GLOBAL_PHONE_VALIDATE_URL = _a.GLOBAL_PHONE_VALIDATE_URL, APERTURE_PHONE_VALIDATE_AUTH_TOKEN = _a.APERTURE_PHONE_VALIDATE_AUTH_TOKEN, APERTURE_PHONE_VALIDATE_URL = _a.APERTURE_PHONE_VALIDATE_URL, validationType = _a.validationType;\n        this.PHONE_VALIDATE_PLUS_URL = \"https://api.experianmarketingservices.com/sync/queryresult/PhoneValidatePlus/1.0/\";\n        this.GLOBAL_PHONE_VALIDATE_URL = \"https://api.experianmarketingservices.com/sync/queryresult/PhoneValidate/3.0/\";\n        this.APERTURE_PHONE_VALIDATE_URL = \"https://api.experianaperture.io/phone/validation/v2\";\n        this.PHONE_VALIDATE_PLUS_AUTH_TOKEN = function () {\n            return window.EdqConfig.PHONE_VALIDATE_PLUS_AUTH_TOKEN || PHONE_VALIDATE_PLUS_AUTH_TOKEN;\n        };\n        this.GLOBAL_PHONE_VALIDATE_AUTH_TOKEN = function () {\n            return window.EdqConfig.GLOBAL_PHONE_VALIDATE_AUTH_TOKEN || GLOBAL_PHONE_VALIDATE_AUTH_TOKEN;\n        };\n        this.APERTURE_PHONE_VALIDATE_AUTH_TOKEN = function () {\n            return window.EdqConfig.APERTURE_PHONE_VALIDATE_AUTH_TOKEN || APERTURE_PHONE_VALIDATE_AUTH_TOKEN;\n        };\n        this.validationType = validationType;\n    }\n    PhoneValidate.prototype.aperturePhoneValidate = function (_a) {\n        var phoneNumber = _a.phoneNumber, outputFormat = _a.outputFormat, cacheValueDays = _a.cacheValueDays, callback = _a.callback;\n        if (!this.APERTURE_PHONE_VALIDATE_AUTH_TOKEN()) {\n            throw \"Missing APERTURE_PHONE_VALIDATE_AUTH_TOKEN\";\n        }\n        return this.aperturePhoneMakeRequest({ phoneNumber: phoneNumber, outputFormat: outputFormat, cacheValueDays: cacheValueDays, callback: callback });\n    };\n    ;\n    PhoneValidate.prototype.reversePhoneAppend = function (_a) {\n        var phoneNumber = _a.phoneNumber, callback = _a.callback;\n        if (!this.PHONE_VALIDATE_PLUS_AUTH_TOKEN()) {\n            throw 'Missing PHONE_VALIDATE_PLUS_AUTH_TOKEN';\n        }\n        return this.makeRequest(phoneNumber, callback);\n    };\n    ;\n    PhoneValidate.prototype.globalPhoneValidate = function (_a) {\n        var phoneNumber = _a.phoneNumber, callback = _a.callback;\n        if (!this.GLOBAL_PHONE_VALIDATE_AUTH_TOKEN()) {\n            throw 'Missing GLOBAL_PHONE_VALIDATE_AUTH_TOKEN';\n        }\n        return this.makeRequest(phoneNumber, callback);\n    };\n    ;\n    PhoneValidate.prototype.aperturePhoneMakeRequest = function (args) {\n        var phoneNumber = args.phoneNumber, outputFormat = args.outputFormat, cacheValueDays = args.cacheValueDays, callback = args.callback;\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(JSON.parse(this.responseText), null);\n                }\n                else {\n                    callback(null, {\n                        status: this.status,\n                        statusText: this.statusText\n                    });\n                }\n            }\n        };\n        xhr.open(\"POST\", this.APERTURE_PHONE_VALIDATE_URL);\n        xhr.setRequestHeader(\"Auth-Token\", this.APERTURE_PHONE_VALIDATE_AUTH_TOKEN());\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.setRequestHeader(\"Add-Metadata\", \"true\");\n        xhr.send(JSON.stringify({\n            \"number\": phoneNumber,\n            \"output_format\": outputFormat || \"E164\",\n            \"cache_value_days\": cacheValueDays || 7\n        }));\n        return xhr;\n    };\n    ;\n    /**\n     * Makes XMLHttpRequest\n     */\n    PhoneValidate.prototype.makeRequest = function (phoneNumber, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.withCredentials = false;\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(JSON.parse(this.response), null);\n                }\n                else {\n                    callback(null, {\n                        status: this.status,\n                        statusText: this.statusText\n                    });\n                }\n            }\n        };\n        switch (this.validationType) {\n            case 'reversePhoneAppend':\n                xhr.open('POST', this.PHONE_VALIDATE_PLUS_URL);\n                xhr.setRequestHeader('Auth-Token', this.PHONE_VALIDATE_PLUS_AUTH_TOKEN());\n                break;\n            case 'globalPhone':\n                xhr.open('POST', this.GLOBAL_PHONE_VALIDATE_URL);\n                xhr.setRequestHeader('Auth-Token', this.GLOBAL_PHONE_VALIDATE_AUTH_TOKEN());\n                break;\n        }\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            'Number': phoneNumber\n        }));\n        return xhr;\n    };\n    ;\n    return PhoneValidate;\n}());\nexports.default = PhoneValidate;\n;\n\n\n//# sourceURL=webpack:///../src/phone-validate.ts?");

/***/ }),

/***/ "../src/pro-web.ts":
/*!*************************!*\
  !*** ../src/pro-web.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ProWeb = /** @class */ (function () {\n    function ProWeb(_a) {\n        var EDQ_CONFIG = _a.EDQ_CONFIG, SOAP_ACTION_URL = _a.SOAP_ACTION_URL, PRO_WEB_SERVICE_URL = _a.PRO_WEB_SERVICE_URL, PRO_WEB_AUTH_TOKEN = _a.PRO_WEB_AUTH_TOKEN, PRO_WEB_TIMEOUT = _a.PRO_WEB_TIMEOUT, onPremise = _a.onPremise;\n        this.onPremise = false;\n        this.serviceUrl = 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx';\n        this.EDQ_CONFIG = function () {\n            return window.EdqConfig || EDQ_CONFIG;\n        };\n        this.SOAP_ACTION_URL = function (onPremiseArg) {\n            if (onPremiseArg === void 0) { onPremiseArg = onPremise; }\n            if (onPremiseArg) {\n                if (this.EDQ_CONFIG().SOAP_ACTION_URL) {\n                    return this.EDQ_CONFIG().SOAP_ACTION_URL;\n                }\n                else {\n                    throw 'Missing SOAP_ACTION_URL';\n                }\n            }\n            return 'http://www.qas.com/OnDemand-2011-03';\n        };\n        this.PRO_WEB_SERVICE_URL = function () {\n            return this.EDQ_CONFIG().PRO_WEB_SERVICE_URL || this.serviceUrl;\n        };\n        this.PRO_WEB_AUTH_TOKEN = function () {\n            return this.EDQ_CONFIG().PRO_WEB_AUTH_TOKEN;\n        };\n        this.PRO_WEB_TIMEOUT = function () {\n            return this.EDQ_CONFIG().PRO_WEB_TIMEOUT || 300;\n        };\n        this.onPremise = onPremise;\n    }\n    ProWeb.prototype.doCanSearch = function (_a) {\n        var onPremise = _a.onPremise, country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoCanSearch\";\n        var xmlRequest = this.buildDoCanSearch({ country: country, engineOptions: engineOptions, engineType: engineType, layout: layout, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetAddress = function (_a) {\n        var layout = _a.layout, moniker = _a.moniker, callback = _a.callback, onPremise = _a.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetAddress\";\n        var xmlRequest = this.buildDoGetAddressMessage({ layout: layout, moniker: moniker, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetLayouts = function (_a) {\n        var country = _a.country, onPremise = _a.onPremise, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetLayouts\";\n        var xmlRequest = this.buildDoGetLayoutsMessage({ country: country, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetLicenseInfo = function (_a) {\n        var callback = _a.callback, onPremise = _a.onPremise;\n        onPremise = onPremise || this.onPremise;\n        if (this.serviceUrl === 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx') {\n            throw \"This SOAP method is not supported in this version of QAS Pro On Demand\";\n        }\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetLicenseInfo\";\n        var xmlRequest = this.buildDoGetLicenseInfoMessage({ onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetPromptSet = function (_a) {\n        var country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, promptSet = _a.promptSet, callback = _a.callback, onPremise = _a.onPremise;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetPromptSet\";\n        var xmlRequest = this.buildDoGetPromptSetMessage({ country: country, engineOptions: engineOptions, engineType: engineType, promptSet: promptSet, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetSystemInfo = function (_a) {\n        var callback = _a.callback, onPremise = _a.onPremise;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetSystemInfo\";\n        var xmlRequest = this.buildDoGetSystemInfoMessage(onPremise);\n        this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doRefine = function (_a) {\n        var onPremise = _a.onPremise, refineOptions = _a.refineOptions, moniker = _a.moniker, refinement = _a.refinement, layout = _a.layout, formattedAddressInPicklist = _a.formattedAddressInPicklist, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoRefine\";\n        var xmlRequest = this.buildDoRefineMessage({\n            onPremise: onPremise,\n            refineOptions: refineOptions,\n            moniker: moniker,\n            refinement: refinement,\n            layout: layout,\n            formattedAddressInPicklist: formattedAddressInPicklist\n        });\n        this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doSearch = function (_a) {\n        var onPremise = _a.onPremise, country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, addressQuery = _a.addressQuery, formattedAddressInPicklist = _a.formattedAddressInPicklist, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoSearch\";\n        var xmlRequest = this.buildDoSearchMessage({\n            onPremise: onPremise,\n            country: country,\n            engineOptions: engineOptions,\n            engineType: engineType,\n            layout: layout,\n            addressQuery: addressQuery,\n            formattedAddressInPicklist: formattedAddressInPicklist\n        });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetData = function (_a) {\n        var callback = _a.callback, onPremise = _a.onPremise;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL() + \"/DoGetData\";\n        var xmlRequest = this.buildDoGetDataMessage();\n        return this.makeRequest(xmlRequest, soapActionUrl, callback);\n    };\n    ;\n    ProWeb.prototype.doGetDataMapDetail = function (_a) {\n        var dataMap = _a.dataMap, callback = _a.callback, onPremise = _a.onPremise;\n        onPremise = onPremise || this.onPremise;\n        if (this.serviceUrl === 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx') {\n            throw \"This SOAP method is not supported in this version of QAS Pro On Demand\";\n        }\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetDataMapDetail\";\n        var xmlRequest = this.buildDoGetDataMapDetail({ dataMap: dataMap, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetDataHashCode = function (_a) {\n        var onPremise = _a.onPremise, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        if (this.serviceUrl === 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx') {\n            throw \"This SOAP method is not supported in this version of QAS Pro On Demand\";\n        }\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetDataHashCode\";\n        var xmlRequest = this.buildDoGetDataHashCode({ onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doUnlockDPV = function (_a) {\n        var onPremise = _a.onPremise, unlockCode = _a.unlockCode, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        if (this.serviceUrl === 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx') {\n            throw \"This SOAP method is not supported in this version of QAS Pro On Demand\";\n        }\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoUnlockDPV\";\n        var xmlRequest = this.buildDoUnlockDPV({ unlockCode: unlockCode, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetDPVStatus = function (_a) {\n        var onPremise = _a.onPremise, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        if (this.serviceUrl === 'https://ws2.ondemand.qas.com/ProOnDemand/V3/ProOnDemandService.asmx') {\n            throw \"This SOAP method is not supported in this version of QAS Pro On Demand\";\n        }\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetDPVStatus\";\n        var xmlRequest = this.buildDoGetDPVStatus({ onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doGetExampleAddresses = function (_a) {\n        var onPremise = _a.onPremise, country = _a.country, layout = _a.layout, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoGetExampleAddresses\";\n        var xmlRequest = this.buildDoGetExampleAddressesMessage({ country: country, layout: layout, onPremise: onPremise });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    ProWeb.prototype.doBulkSearch = function (_a) {\n        var onPremise = _a.onPremise, country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, searches = _a.searches, formattedAddressInPicklist = _a.formattedAddressInPicklist, callback = _a.callback;\n        onPremise = onPremise || this.onPremise;\n        var soapActionUrl = this.SOAP_ACTION_URL(onPremise) + \"/DoBulkSearch\";\n        var xmlRequest = this.buildDoBulkSearch({\n            searches: searches,\n            onPremise: onPremise,\n            country: country,\n            engineOptions: engineOptions,\n            engineType: \"Verification\",\n            layout: layout,\n            formattedAddressInPicklist: formattedAddressInPicklist\n        });\n        return this.makeRequest(xmlRequest, soapActionUrl, callback, onPremise);\n    };\n    ;\n    /**\n     * Build DoBulkSearch XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoBulkSearch = function (_a) {\n        var _this = this;\n        var searches = _a.searches, country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, formattedAddressInPicklist = _a.formattedAddressInPicklist, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QABulkSearch \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            this._buildSoapEngineString({ engineOptions: engineOptions, engineType: engineType, onPremise: onPremise }) +\n            this._buildSoapLayoutString(layout, onPremise) +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":BulkSearchTerm Count=\\\"\\\">\") +\n            searches.map(function (search) { return _this._buildSoapSearchString(search, onPremise); }).join('') +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":BulkSearchTerm>\") +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QABulkSearch>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    /**\n     * Build DoCanSearch XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoCanSearch = function (_a) {\n        var country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QACanSearch \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" RequestTag=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            this._buildSoapEngineString({ engineOptions: engineOptions, engineType: engineType, onPremise: onPremise }) +\n            this._buildSoapLayoutString(layout, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QACanSearch>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds DoGetAddress XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetAddressMessage = function (_a) {\n        var layout = _a.layout, moniker = _a.moniker, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetAddress \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" RequestTag=\\\"\\\">\") +\n            this._buildSoapLayoutString(layout, onPremise) +\n            this._buildSoapMonikerString(moniker, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetAddress>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds DoUnlockDPV XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoUnlockDPV = function (_a) {\n        var onPremise = _a.onPremise, unlockCode = _a.unlockCode;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAUnlockDPV>\") +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":UnlockCode>\" + unlockCode + \"</\" + (onPremise ? 'web' : 'ond') + \":UnlockCode>\") +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAUnlockDPV>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetDPVStatus XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetDPVStatus = function (_a) {\n        var onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetDPVStatus/>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds DoGetExampleAddresses XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetExampleAddressesMessage = function (_a) {\n        var country = _a.country, layout = _a.layout, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetExampleAddresses \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" RequestTag=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            this._buildSoapLayoutString(layout, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetExampleAddresses>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the Data Message XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetDataMessage = function (_a) {\n        var onPremise = (_a === void 0 ? { onPremise: false } : _a).onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetData \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" >\") +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetData>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the Data Hash Code XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetDataHashCode = function (_a) {\n        var onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetDataHashCode \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\">\") +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetDataHashCode>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetDataMapDetail XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetDataMapDetail = function (_a) {\n        var dataMap = _a.dataMap, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetDataMapDetail \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\">\") +\n            this._buildSoapDataMapString(dataMap, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetDataMapDetail>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetLicenseInfo XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetLicenseInfoMessage = function (_a) {\n        var onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetLicenseInfo \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\"/>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetLayoutsArgs XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetLayoutsMessage = function (_a) {\n        var country = _a.country, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetLayouts \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetLayouts>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetPromptSet XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetPromptSetMessage = function (_a) {\n        var country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, promptSet = _a.promptSet, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetPromptSet \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            this._buildSoapEngineString({ engineOptions: engineOptions, engineType: engineType, onPremise: onPremise }) +\n            this._buildSoapPromptSetString(promptSet, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QAGetPromptSet>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoGetSystemInfo XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoGetSystemInfoMessage = function (onPremise) {\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QAGetSystemInfo \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\"/>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoRefine XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoRefineMessage = function (_a) {\n        var refineOptions = _a.refineOptions, moniker = _a.moniker, refinement = _a.refinement, layout = _a.layout, formattedAddressInPicklist = _a.formattedAddressInPicklist, onPremise = _a.onPremise;\n        var threshold = this._cleanThreshold(refineOptions.threshold);\n        var timeout = this._cleanTimeout(refineOptions.timeout);\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QARefine Threshold=\\\"\" + threshold + \"\\\" \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" RequestTag=\\\"\\\">\") +\n            this._buildSoapMonikerString(moniker, onPremise) +\n            this._buildSoapRefinementString(refinement, onPremise) +\n            this._buildSoapLayoutString(layout, onPremise) +\n            this._buildSoapFormatString(formattedAddressInPicklist, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QARefine>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Builds the DoSearch XML string\n     * @ignore\n     */\n    ProWeb.prototype.buildDoSearchMessage = function (_a) {\n        var country = _a.country, engineOptions = _a.engineOptions, engineType = _a.engineType, layout = _a.layout, addressQuery = _a.addressQuery, formattedAddressInPicklist = _a.formattedAddressInPicklist, onPremise = _a.onPremise;\n        var xmlString = '<soapenv:Envelope ' + this._buildSoapNamespaceSubString(onPremise) + '>' +\n            '<soapenv:Body>' +\n            (\"<\" + (onPremise ? 'web' : 'ond') + \":QASearch \" + (onPremise ? 'Language' : 'Localisation') + \"=\\\"\\\" RequestTag=\\\"\\\">\") +\n            this._buildSoapCountryString(country, onPremise) +\n            this._buildSoapEngineString({ engineOptions: engineOptions, engineType: engineType, onPremise: onPremise }) +\n            this._buildSoapLayoutString(layout, onPremise) +\n            this._buildSoapSearchString(addressQuery, onPremise) +\n            this._buildSoapFormatString(formattedAddressInPicklist, onPremise) +\n            (\"</\" + (onPremise ? 'web' : 'ond') + \":QASearch>\") +\n            '</soapenv:Body>' +\n            '</soapenv:Envelope>';\n        return xmlString;\n    };\n    ;\n    /**\n     * Makes the actual XMLHttpRequest to Pro Web.\n     * @ignore\n     */\n    ProWeb.prototype.makeRequest = function (requestData, soapActionUrl, callback, onPremise) {\n        if (onPremise === void 0) { onPremise = false; }\n        if (!this.PRO_WEB_SERVICE_URL() && !this.PRO_WEB_AUTH_TOKEN()) {\n            if (!this.PRO_WEB_SERVICE_URL()) {\n                throw 'Missing PRO_WEB_SERVICE_URL.';\n            }\n            if (!this.PRO_WEB_AUTH_TOKEN()) {\n                throw 'Missing PRO_WEB_AUTH_TOKEN';\n            }\n        }\n        var xhr = new XMLHttpRequest();\n        var self = this;\n        xhr.withCredentials = false;\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4) {\n                if (this.status === 200) {\n                    callback(self._parseDOMChildren(this.responseXML), null);\n                }\n                else {\n                    callback(null, {\n                        status: 500,\n                        statusText: 'Internal Server Error',\n                        responseType: 'text',\n                        response: 'Due to limitations in cross origin requests (CORS), the error frome the server could not be ' +\n                            'referenced here. For more details about the error, resend this request from a client that is not an internet browser'\n                    });\n                }\n            }\n        };\n        xhr.open('POST', this.PRO_WEB_SERVICE_URL());\n        if (this.PRO_WEB_AUTH_TOKEN()) {\n            xhr.setRequestHeader('Auth-Token', this.PRO_WEB_AUTH_TOKEN());\n        }\n        xhr.setRequestHeader('SOAPAction', soapActionUrl);\n        xhr.setRequestHeader('Content-Type', 'text/xml');\n        xhr.send(requestData);\n        return xhr;\n    };\n    ;\n    /**\n     * Returns a new object that's similar to 'engineOptions', except there are no\n     * undefined values, and instead are replaced with empty strings.\n     * @ignore\n     */\n    ProWeb.prototype._cleanEngineOptions = function (_a) {\n        var flatten = _a.flatten, intensity = _a.intensity, promptSet = _a.promptSet, threshold = _a.threshold, timeout = _a.timeout;\n        return {\n            flatten: flatten || true,\n            intensity: intensity || 'Close',\n            promptSet: promptSet || 'Default',\n            threshold: this._cleanThreshold(threshold),\n            timeout: this._cleanTimeout(timeout)\n        };\n    };\n    ;\n    /**\n     * Returns threshold or a specified default\n     * @ignore\n     */\n    ProWeb.prototype._cleanThreshold = function (threshold) {\n        return threshold || 300;\n    };\n    ;\n    /**\n     * Returns timeout or a specified default\n     * @ignore\n     */\n    ProWeb.prototype._cleanTimeout = function (timeout) {\n        return this.PRO_WEB_TIMEOUT() || timeout || 300;\n    };\n    ;\n    /**\n     * Builds the SOAP string for FormattedAddressInPicklist\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapFormatString = function (formattedAddress, onPremise) {\n        if (onPremise === void 0) { onPremise = false; }\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":FormattedAddressInPicklist>\" + formattedAddress + (\"</\" + (onPremise ? 'web' : 'ond') + \":FormattedAddressInPicklist>\");\n    };\n    ;\n    /**\n     * @ignore\n     * @param {Object} engineOptions - contains an object that has the engine options (see #_cleanEngineOptions)\n     * @param {String} engineType\n     * @param {Boolean} onPremise\n     *\n     * @returns {String}\n     */\n    ProWeb.prototype._buildSoapEngineString = function (_a) {\n        var engineOptions = _a.engineOptions, engineType = _a.engineType, onPremise = _a.onPremise;\n        var result = this._cleanEngineOptions(engineOptions);\n        var flatten = result.flatten;\n        var intensity = result.intensity;\n        var promptSet = result.promptSet;\n        var threshold = result.threshold;\n        var timeout = result.timeout;\n        var engineSoapString = \"<\" + (onPremise ? 'web' : 'ond') + \":Engine\" + ' ' +\n            (\"Flatten='\" + flatten + \"' \") +\n            (\"Intensity='\" + intensity + \"' \") +\n            (\"PromptSet='\" + promptSet + \"' \") +\n            (\"Threshold='\" + threshold + \"' \") +\n            (\"Timeout='\" + timeout + \"'\") +\n            '>' + engineType + (\"</\" + (onPremise ? 'web' : 'ond') + \":Engine>\");\n        return engineSoapString;\n    };\n    ;\n    /**\n     * Builds the partial XML string for the namespace\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapNamespaceSubString = function (onPremise) {\n        if (onPremise) {\n            return 'xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" ' +\n                (\"xmlns:web=\\\"\" + this.SOAP_ACTION_URL(onPremise) + \"\\\"\");\n        }\n        return 'xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" ' +\n            (\"xmlns:ond=\\\"\" + this.SOAP_ACTION_URL(onPremise) + \"\\\"\");\n    };\n    ;\n    /**\n     * Builds the partial XML string for the moniker\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapMonikerString = function (moniker, onPremise) {\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":Moniker>\" + moniker + \"</\" + (onPremise ? 'web' : 'ond') + \":Moniker>\";\n    };\n    ;\n    /**\n     *\n     * Builds the partial XML string for Refinement.\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapRefinementString = function (refinement, onPremise) {\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":Refinement>\" + refinement + \"</\" + (onPremise ? 'web' : 'ond') + \":Refinement>\";\n    };\n    ;\n    /**\n     * Builds the partial XML string for Layout\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapLayoutString = function (layoutType, onPremise) {\n        if (layoutType === void 0) { layoutType = 'AllElements'; }\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":Layout>\" + layoutType + \"</\" + (onPremise ? 'web' : 'ond') + \":Layout>\";\n    };\n    ;\n    /**\n     * Builds the partial XML string for Search\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapSearchString = function (addressQuery, onPremise) {\n        if (onPremise === void 0) { onPremise = false; }\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":Search>\" + addressQuery + (\"</\" + (onPremise ? 'web' : 'ond') + \":Search>\");\n    };\n    ;\n    /**\n     * Builds the partial XML string for PromptSet\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapPromptSetString = function (promptSet, onPremise) {\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":PromptSet>\" + promptSet + \"</\" + (onPremise ? 'web' : 'ond') + \":PromptSet>\";\n    };\n    ;\n    /**\n     * Builds the partial XML string for Country\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapCountryString = function (country, onPremise) {\n        if (onPremise) {\n            return '<web:Country>' + country + '</web:Country>';\n        }\n        return '<ond:Country>' + country + '</ond:Country>';\n    };\n    ;\n    /**\n     * Builds the partial XML string for DataMap\n     * @ignore\n     */\n    ProWeb.prototype._buildSoapDataMapString = function (dataMap, onPremise) {\n        return \"<\" + (onPremise ? 'web' : 'ond') + \":DataMap>\" + dataMap + \"</\" + (onPremise ? 'web' : 'ond') + \":DataMap>\";\n    };\n    ;\n    /*** Taken from X2JS ***/\n    /**\n     * @ignore\n     */\n    ProWeb.prototype._parseDOMChildren = function (node, path, config) {\n        if (path === void 0) { path = null; }\n        if (config === void 0) { config = {}; }\n        config = initConfigDefaults(config);\n        /**\n         * @returns {ConfigObject}\n         */\n        function initConfigDefaults(config) {\n            return {\n                escapeMode: config.escapeMode || true,\n                attributePrefix: config.attributePrefix || \"_\",\n                arrayAccessForm: config.arrayAccessForm || \"none\",\n                emptyNodeForm: config.emptyNodeForm || \"text\",\n                enableToStringFunc: config.enableToStringFunc || true,\n                arrayAccessFormPaths: config.arrayAccessFormPaths || [],\n                skipEmptyTextNodesForObj: config.skipEmptyTextNodesForObj || true,\n                stripWhitespaces: config.stripWhitespaces || true,\n                datetimeAccessFormPaths: config.datetimeAccessFormPaths || [],\n                useDoubleQuotes: config.useDoubleQuotes || false,\n                xmlElementsFilter: config.xmlElementsFilter || [],\n                jsonPropertiesFilter: config.jsonPropertiesFilter || [],\n                keepCData: config.keepCData || false\n            };\n        }\n        var DOMNodeTypes = {\n            ELEMENT_NODE: 1,\n            TEXT_NODE: 3,\n            CDATA_SECTION_NODE: 4,\n            COMMENT_NODE: 8,\n            DOCUMENT_NODE: 9\n        };\n        function getNodeLocalName(node) {\n            var nodeLocalName = node.localName;\n            if (nodeLocalName == null) // Yeah, this is IE!!\n                nodeLocalName = node.baseName;\n            if (nodeLocalName == null || nodeLocalName == \"\") // ==\"\" is IE too\n                nodeLocalName = node.nodeName;\n            return nodeLocalName;\n        }\n        function getNodePrefix(node) {\n            return node.prefix;\n        }\n        function escapeXmlChars(str) {\n            if (typeof (str) == \"string\")\n                return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n            else\n                return str;\n        }\n        function unescapeXmlChars(str) {\n            return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").replace(/&amp;/g, '&');\n        }\n        function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {\n            var idx = 0;\n            for (; idx < stdFiltersArrayForm.length; idx++) {\n                var filterPath = stdFiltersArrayForm[idx];\n                if (typeof filterPath === \"string\") {\n                    if (filterPath == path)\n                        break;\n                }\n                else if (filterPath instanceof RegExp) {\n                    if (filterPath.test(path))\n                        break;\n                }\n                else if (typeof filterPath === \"function\") {\n                    if (filterPath(obj, name, path))\n                        break;\n                }\n            }\n            return idx != stdFiltersArrayForm.length;\n        }\n        function toArrayAccessForm(obj, childName, path) {\n            switch (config.arrayAccessForm) {\n                case \"property\":\n                    if (!(obj[childName] instanceof Array))\n                        obj[childName + \"_asArray\"] = [obj[childName]];\n                    else\n                        obj[childName + \"_asArray\"] = obj[childName];\n                    break;\n                /*case \"none\":\n                break;*/\n            }\n            if (!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\n                if (checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {\n                    obj[childName] = [obj[childName]];\n                }\n            }\n        }\n        function fromXmlDateTime(prop) {\n            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\n            // Improved to support full spec and optional parts\n            var bits = prop.split(/[-T:+Z]/g);\n            var d = new Date(bits[0], bits[1] - 1, bits[2]);\n            var secondBits = bits[5].split(\"\\.\");\n            d.setHours(bits[3], bits[4], secondBits[0]);\n            if (secondBits.length > 1)\n                d.setMilliseconds(secondBits[1]);\n            // Get supplied time zone offset in minutes\n            if (bits[6] && bits[7]) {\n                var offsetMinutes = bits[6] * 60 + Number(bits[7]);\n                var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop) ? '-' : '+';\n                // Apply the sign\n                offsetMinutes = 0 + (sign == '-' ? -1 * offsetMinutes : offsetMinutes);\n                // Apply offset and local timezone\n                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());\n            }\n            else if (prop.indexOf(\"Z\", prop.length - 1) !== -1) {\n                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n            }\n            // d is now a local time equivalent to the supplied time\n            return d;\n        }\n        function checkFromXmlDateTimePaths(value, childName, fullPath) {\n            if (config.datetimeAccessFormPaths.length > 0) {\n                var path = fullPath.split(\"\\.#\")[0];\n                if (checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {\n                    return fromXmlDateTime(value);\n                }\n                else\n                    return value;\n            }\n            else\n                return value;\n        }\n        function checkXmlElementsFilter(obj, childType, childName, childPath) {\n            if (childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0) {\n                return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);\n            }\n            else\n                return true;\n        }\n        if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\n            var result = {};\n            var nodeChildren = node.childNodes;\n            // Alternative for firstElementChild which is not supported in some environments\n            for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                var child = nodeChildren.item(cidx);\n                if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n                    var childName = getNodeLocalName(child);\n                    result[childName] = this._parseDOMChildren(child, childName);\n                }\n            }\n            return result;\n        }\n        else if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n            var result = {};\n            result.__cnt = 0;\n            var nodeChildren = node.childNodes;\n            // Children nodes\n            for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                var child = nodeChildren.item(cidx); // nodeChildren[cidx];\n                var childName = getNodeLocalName(child);\n                if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {\n                    var childPath = path + \".\" + childName;\n                    if (checkXmlElementsFilter(result, child.nodeType, childName, childPath)) {\n                        result.__cnt++;\n                        if (result[childName] == null) {\n                            result[childName] = this._parseDOMChildren(child, childPath);\n                            toArrayAccessForm(result, childName, childPath);\n                        }\n                        else {\n                            if (result[childName] != null) {\n                                if (!(result[childName] instanceof Array)) {\n                                    result[childName] = [result[childName]];\n                                    toArrayAccessForm(result, childName, childPath);\n                                }\n                            }\n                            (result[childName])[result[childName].length] = this._parseDOMChildren(child, childPath);\n                        }\n                    }\n                }\n            }\n            for (var aidx = 0; aidx < node.attributes.length; aidx++) {\n                var attr = node.attributes.item(aidx);\n                result.__cnt++;\n                result[config.attributePrefix + attr.name] = attr.value;\n            }\n            var nodePrefix = getNodePrefix(node);\n            if (nodePrefix != null && nodePrefix != \"\") {\n                result.__cnt++;\n                result.__prefix = nodePrefix;\n            }\n            if (result[\"#text\"] != null) {\n                result.__text = result[\"#text\"];\n                if (result.__text instanceof Array) {\n                    result.__text = result.__text.join(\"\\n\");\n                }\n                if (config.stripWhitespaces)\n                    result.__text = result.__text.trim();\n                delete result[\"#text\"];\n                if (config.arrayAccessForm == \"property\")\n                    delete result[\"#text_asArray\"];\n                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + \".\" + childName);\n            }\n            if (result[\"#cdata-section\"] != null) {\n                result.__cdata = result[\"#cdata-section\"];\n                delete result[\"#cdata-section\"];\n                if (config.arrayAccessForm == \"property\")\n                    delete result[\"#cdata-section_asArray\"];\n            }\n            if (result.__cnt == 0 && config.emptyNodeForm == \"text\") {\n                result = '';\n            }\n            else if (result.__cnt == 1 && result.__text != null) {\n                result = result.__text;\n            }\n            else if (result.__cnt == 1 && result.__cdata != null && !config.keepCData) {\n                result = result.__cdata;\n            }\n            else if (result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj) {\n                if ((config.stripWhitespaces && result.__text == \"\") || (result.__text.trim() == \"\")) {\n                    delete result.__text;\n                }\n            }\n            delete result.__cnt;\n            if (config.enableToStringFunc && (result.__text != null || result.__cdata != null)) {\n                result.toString = function () {\n                    return (this.__text != null ? this.__text : '') + (this.__cdata != null ? this.__cdata : '');\n                };\n            }\n            return result;\n        }\n        else if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\n            return node.nodeValue;\n        }\n    };\n    ;\n    return ProWeb;\n}());\nexports.default = ProWeb;\n;\n\n\n//# sourceURL=webpack:///../src/pro-web.ts?");

/***/ })

/******/ })));