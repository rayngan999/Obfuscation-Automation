/* Copyright (c) 2006-2020 Livesport s.r.o.
 * You are not allowed to copy or redistribute this file.
 */


/* Debugger is capable of logging your messages since his own construct. It is recommended to create
 * an instance as soon as possible. HTML containers containing text will be created on DOMReady and
 * placed after content of <body>. Disabled debugger will exist but throw away any data not
 * consuming any system resources.
 * 
 * required libs: jQuery
 * construct: new FlashscoreDebugger(is_enabled)
 * @param is_enabled
 */
function FlashscoreDebugger(is_enabled) {
    var bugger = this;
    var container, menu, selected;
    var used = typeof is_enabled != 'undefined' && !!is_enabled;
    var ready = false;
    var logs = {};
    var logQueue = [];


    /* Message container class
     * @param string id   Identifier
     * @param string name Heading
     */
    var FlashscoreDebuggerLog = function(id, name) {
        var id = id;
        var name = name;
        var domId = 'fsLog_' + id;
        var logContainer;
        var logQueue = [];
        var ready = false;
        var self = this;


        /* Get heading/name of container
         */
        this.getName = function() {
            return name;
        };


        /* Get identifier of container
         */
        this.getId = function() {
            return id;
        };


        /* Get id used in DOM for container
         */
        this.getDomId = function() {
            return domId;
        };


        /* Report a message
         * @param string Message type
         * @param message The message
         */
        this.report = function(msg_type, message) {
            if ((pos = message.indexOf(':')) > 0) {
                parts = [message.substr(0, pos + 1), message.substr(pos + 1)];
                message = '<span class="heading">' + parts[0] + '</span>' + parts[1];
            }
            ready ? logContainer.append('<span class="' + msg_type + '" title="' + getTimestamp() + '">' + message + '</span>') : logQueue.push([msg_type, message]);
        };


        /* Process queued actions (runs after DOMReady)
         */
        this.processQueue = function() {
            for (i in logQueue) {
                this.report(logQueue[i][0], logQueue[i][1]);
                delete logQueue[i];
            }
        };


        /* Create HTML container
         */
        this.createContainer = function() {
            if (!ready) {
                container.append('<div class="log" id="' + domId + '"><span class="info" title="' + getTimestamp() + '">Initialized</span></div>');
                logContainer = container.find('#' + domId);
                typeof selected == 'undefined' && (selected = id);
                ready = true;
                genMenu();
            }
        };


        /* Simplified constructor
         */
        var init = function() {
            logs[id] = self;
            bugger.isReady() ? self.createContainer() : logQueue.push(id);
        }();
    };



    /* Start a new log
     * @param string id   identifier
     * @param string name heading
     */
    this.createLog = function(id, name) {
        return new FlashscoreDebuggerLog(id, name);
    };


    /* Report a message
     * @param string log_id   Identifier of log to write
     * @param string msg_type Type of message (class that will be added on message container)
     * @param string message  The message to log
     */
    this.report = function(log_id, msg_type, message) {
        log_id === null && (log_id = 'general');
        used && logs[log_id].report(msg_type, message);
    };


    /* Is logger ready?
     */
    this.isReady = function() {
        return ready;
    };


    /* Regenerate menu
     */
    var genMenu = function() {
        if (used) {
            menu.html('');
            for (id in logs) {
                menu.append(
                    '<li class="' + logs[id].getId() + '">' +
                    '<a href="#" rel="' + logs[id].getDomId() + '">' + logs[id].getName() + '</a>' +
                    '</li>'
                );
            }

            menu.children('.' + selected).addClass('selected');
            $('#' + logs[selected].getDomId()).css('display', 'inline-block');

            menu.find('a').click(function(e) {
                $(this).parent().siblings().removeClass('selected');
                //clientStorage.store("DebuggerMenu", $(this).parent().attr('class'));
                $(this).parent().addClass('selected');
                container.find('div.log').hide();
                container.find('#' + $(this).attr('rel')).css('display', 'inline-block');

                return false;
            });
        }
    };


    /* Get timestamp for a message (helper)
     */
    var getTimestamp = function() {
        var d = new Date();
        var date = [d.getFullYear(), d.getMonth(), d.getDay(), d.getHours(), d.getMinutes(), d.getSeconds()];

        for (var i in date) {
            if ((date[i] + "").length <= 1) {
                date[i] = "0" + date[i];
            }
        }

        return date[0] + '-' + date[1] + '-' + date[2] + ' ' + date[3] + ':' + date[4] + ':' + date[5];
    };


    /* Simplified constructor
     */
    var init = function() {
        if (used) {
            $(function() {
                $("body").append('<div id="fsDebuggerContainer"><ul class="menu"></ul></div>');
                container = $("#fsDebuggerContainer");
                menu = container.children(".menu");
                //selected = clientStorage.get("DebuggerMenu");
                ready = true;

                bugger.createLog('general', 'General messages');

                for (id in logs) {
                    logs[id].createContainer();
                    logs[id].processQueue();
                }
            });
        }
    }();

};
var Debugger = new FlashscoreDebugger(false);

// tournament list for tournament menu
var l = {};
var locationOrigin = location.origin;
if (typeof locationOrigin === "undefined") {
    locationOrigin = location.protocol + "//" + location.host;
}
l.x_url = locationOrigin + '/x/';
l.feed_url = l.x_url + 'feed/';
var req_url = l.x_url + 'req/';
var menumin_fix_param = false;
var menu_minority_is_open = false;
l.sports_count = {};
l.sports_count.queue = [];
l.sports_count.data = null;
l.sports_count.displayed_menu = false;
l.sports_count.displayed_menumin = false;
l.sports_count.displayed_ls_sports_count = false;
l.sports_count.displayed_sports_count_in_link = false;
l.sports_count.title = 'Partidos de hoy:';
l.sports_count.reload_data = function() {
    this.data = null;
    var sportMenuItems;

    if (this.displayed_menumin) {
        var sportMenuItemsSelector = '.menuMinority__content a.menuMinority__item';
        var sportCountSelector = '.menuMinority__sportCount';

        sportMenuItems = $(sportMenuItemsSelector);
        sportMenuItems.removeAttr('title');
        sportMenuItems.find(sportCountSelector).remove();
        this.displayed_menumin = false;

        this.load_data('show_menumin');

    }
    if (this.displayed_menu) {
        sportMenuItems = $('.menuTop__content a.menuTop__item');
        sportMenuItems.removeAttr('title');
        sportMenuItems.find('.menuTop__sportCount').remove();

        this.displayed_menu = false;
        this.load_data('show_menu');
    }
};
l.sports_count.load_data = function(caller) {
    var doRequest = !this.queue.length;
    if (typeof caller != 'undefined') {
        this.queue.push(caller);
    }

    if (doRequest) {
        (new cjs.AjaxJqObject(l.feed_url + 'mc_' + cjs.Api.timezone.getActualTimezone(), void 0, 'callback', 'queue', this, void 0, true, feed_sign)).update();
    }
};
l.sports_count.call_trigger = function(r_trigger) {
    if (r_trigger == 'show_menu') {
        this.show_menu();
    } else if (r_trigger == 'show_menumin') {
        this.show_menumin();
    } else if (r_trigger == 'show_sports_count_in_link') {
        this.show_sports_count_in_link();
    } else if (r_trigger == 'show_ls_sports_count') {
        this.show_ls_sports_count();
    }
};
l.sports_count.callback = function(r_status, r_headers, r_content, r_trigger) {
    var data = r_content.split(JS_ROW_END);
    this.data = {};
    for (var rowId in data) {
        var row = data[rowId];
        if (row.substr(0, 2) != 'SA') {
            continue;
        }
        var sportData = row.split(JS_CELL_END);
        var sportID = sportData[0].substr(3);
        var eventCount = typeof sportData[1] != 'undefined' ? sportData[1].substr(3) : '0';
        var liveCount = typeof sportData[2] != 'undefined' ? sportData[2].substr(3) : '0';
        this.data[sportID] = {
            events: parseInt(eventCount),
            live: parseInt(liveCount)
        };
    }

    if (r_trigger == 'queue') {
        $.each(this.queue, function(key, trigger) {
            this.call_trigger(trigger);
        }.bind(this));
        this.queue = [];
    } else {
        this.call_trigger(r_trigger);
    }

    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.reloadTabContent(category);
    });
};
l.sports_count.show_menu = function() {
    if (this.displayed_menu) {
        return;
    }

    if (!this.data) {
        return this.load_data('show_menu');
    }

    this.displayed_menu = true;

    $('.menuTop__content a.menuTop__item').each(function(obj) {
        return function() {
            var sportID = $(this).attr("data-sport-id");
            var txtEvent = obj.data[sportID].events;
            $(this).attr('title', obj.title + ' ' + txtEvent);
            $(this).html($(this).html() + ' ' + '<div class="menuTop__sportCount">' + txtEvent + '</div>');
        }
    }(this));
};
l.sports_count.show_menumin = function() {
    if (this.displayed_menumin) {
        return;
    }

    if (!this.data) {
        return this.load_data('show_menumin');
    }

    this.displayed_menumin = true;
    var projectTypeName = cjs.Api.config.get('app', 'project_type', 'name');

    for (var sportID in this.data) {
        if (this.data[sportID].events) {
            var sportMenuItemSelector = '.menuMinority__content a[data-sport-id="' + sportID + '"].menuMinority__item';

            var sportMenuItem = $(sportMenuItemSelector);
            if (sportMenuItem.length === 0) {
                continue;
            }

            var txtEvent = this.data[sportID].events;
            sportMenuItem.attr('title', this.title + ' ' + txtEvent);

            var sportCountHtml = '<div class="menuMinority__sportCount">' + txtEvent + '</div>';

            sportMenuItem.html(sportMenuItem.html() + ' ' + sportCountHtml);
        }
    }
};

l.sports_count.show_ls_sports_count = function() {
    if (this.displayed_ls_sports_count) {
        return;
    }
    if (!this.data) {
        return this.load_data('show_ls_sports_count');
    }
    this.displayed_sports_count_in_link = true;

    $('.livescoreTile__counterMatchesText').each(function(i, e) {
        var el = $(e);
        var sportId = e.id.split('-')[1];
        if (typeof l.sports_count.data[sportId] == 'undefined') {
            return;
        }
        var eventCount = l.sports_count.data[sportId].events;
        if (eventCount) {
            $(e).html(eventCount + '');
        } else {
            $(e).html('-');
            //$(e).removeClass('red');
        }
    });
};

l.sports_count.show_sports_count_in_link = function() {
    if (this.displayed_sports_count_in_link) {
        return;
    }

    if (!this.data) {
        return this.load_data('show_sports_count_in_link');
    }

    // count displayed games for each sport
    var sports_counts = {};
    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var eventItem = this.getItem(id);
        var sport = eventItem.getValue('sport_id');
        if (sport in sports_counts) {
            sports_counts[sport] += 1;
        } else {
            sports_counts[sport] = 1;
        }
    });

    this.displayed_sports_count_in_link = true;

    $('span[id^=cfm-sports]').each(function(i, e) {
        var el = $(e);
        var count = 0;
        var sportId = el.attr('id').split('-')[2];

        if (
            typeof l.sports_count.data[sportId] != 'undefined' &&
            typeof l.sports_count.data[sportId].events != 'undefined' &&
            l.sports_count.data[sportId].events
        ) {
            count = l.sports_count.data[sportId].events;
        }
        el.html(count);

        // don't show more games link if all games already displayed
        el.closest('.table-link-more-games').toggle(
            !(sportId in sports_counts && sports_counts[sportId] == count)
        );

    });
};

function action_intersecting_banners($elementBox, callback) {
    var $rightColumn;
    var projectTypeName = cjs.Api.config.get('app', 'project_type', 'name');
    if ($.inArray(projectTypeName, ['_fs', '_ss', '_in']) !== -1) {
        if (projectTypeName === '_ss') {
            $rightColumn = $(".right-column");
        } else if (projectTypeName === '_in') {
            $rightColumn = $(".col-right");
        } else {
            $rightColumn = $("#rccontent");
        }
    }

    if (typeof callback === 'function') {
        callback($elementBox, $rightColumn);
    }
};

/** reload sports events count
 */
function sports_count_reload() {
    l.sports_count.reload_data();
};

/** show minority sport menu
 */
function menumin_show() {
    document.getElementById('menumin').style.display = 'block';
    if (!l.sports_count.displayed_menumin) {
        //  Hack pro IE7 - aby bylo minority menu on top
        if (document.all && !document.querySelector) {
            $('div#header').css('zIndex', 100);
        }

    }
    l.sports_count.show_menumin();
};

function menuMinorityGenerateSportCount() {
    l.sports_count.show_menumin();
}

function menuMinorityToggle(force) {
    if (menu_minority_is_open || force) {
        $("div.menuMinority__title").removeClass('menuMinority__title--open');
        $("div.menuMinority__arrow").removeClass('menuMinority__arrow--arrow-rotation');
        $("div.menuMinority__content").css('display', 'none');
        menu_minority_is_open = false;
    } else {
        $("div.menuMinority__title").addClass('menuMinority__title--open');
        $("div.menuMinority__arrow").addClass('menuMinority__arrow--arrow-rotation');
        $("div.menuMinority__content").css('display', 'block');
        menu_minority_is_open = true;
    }
}

/** hide minority sport menu
 */
function menumin_hide() {
    menumin_fix_param = false;
    setTimeout('menumin_try_to_hide()', 200);

    //  Hack pro IE7 - aby bylo minority menu on top
    if (document.all && !document.querySelector) {
        $("div#header").removeAttr("style");
    }
};

/** set minority menu fix
 */
function menumin_fix() {
    menumin_fix_param = true;
};


/** try to hide minority menu
 */
function menumin_try_to_hide() {
    if (!menumin_fix_param) {
        document.getElementById('menumin').style.display = 'none';
    }
};


function show_more_templates() {
    var node = document.getElementById("mt");
    var els = node.getElementsByTagName("li");
    var elsLength = els.length;
    var hiddenFound = false;
    var reg = new RegExp('(\\s|^)' + "hidden-templates" + '(\\s|$)');
    for (var i = 0; i < elsLength; i++) {
        if (reg.test(els[i].className)) {
            els[i].className = els[i].className.replace(reg, ' ');
        } else if (hiddenFound) {
            break;
        }
        if (els[i].className == "show-more") {
            els[i].className = "hidden-templates";
            hiddenFound = true;
        }
    }

    if (typeof cjs.bannerScrollManager !== 'undefined' && typeof cjs.bannerScrollManager.refreshWaypoints === 'function') {
        cjs.bannerScrollManager.refreshWaypoints();
    }
};

function show_more_templates_2(context) {
    $(context).closest('ul').find('li.hidden-templates').removeClass('hidden-templates');
    $(context).closest('li').remove();
    if (typeof cjs.bannerScrollManager !== 'undefined' && typeof cjs.bannerScrollManager.refreshWaypoints === 'function') {
        cjs.bannerScrollManager.refreshWaypoints();
    }
}
"use strict";
var BannerHandler = (function() {
    function BannerHandler(zoneIds, elementsBackgrounds, adsServers, adsAdminUrl, noticeTextSelectors, noticeText, storage, zoneIdsCond, requestOnInit, topZoneIds, refreshRates) {
        if (noticeTextSelectors === void 0) {
            noticeTextSelectors = {};
        }
        if (noticeText === void 0) {
            noticeText = '';
        }
        if (storage === void 0) {
            storage = null;
        }
        if (zoneIdsCond === void 0) {
            zoneIdsCond = null;
        }
        if (requestOnInit === void 0) {
            requestOnInit = true;
        }
        if (topZoneIds === void 0) {
            topZoneIds = [];
        }
        if (refreshRates === void 0) {
            refreshRates = {};
        }
        this.verbose = false;
        this.allZoneIds = [];
        this.zoneIds = [];
        this.backupedDroppedZoneIds = [];
        this._refreshRateTimers = {};
        this.adsServers = [];
        this.adsAdminUrl = '';
        this.noticeText = '';
        this.storage = null;
        this.requests = 0;
        this.idPrefix = 'lsadvert-zid-';
        this.requested = false;
        this.responseHandled = false;
        this.displayed = false;
        this.displayCalled = false;
        this.adBlockedCallback = null;
        this.displayedCallback = null;
        this.zones = {};
        this.capping = {};
        this.cappingKey = '';
        this.setBackgroundCallbacks = [];
        this.backgroundZonesWithOffset = {};
        this.afterAdBackgroundElementCreatedCallbacks = [];
        this.bannersLoadedCallbacks = [];
        this.adBlocked = null;
        this.clientTypes = {
            mobile: "mobile",
            tablet: "tablet",
            PC: "PC"
        };
        this._backupPrepaired = false;
        this._attachedEvents = false;
        this._setIframeContentCounter = 0;
        this._setIframeContentTimeout = 20;
        this._backgroundSetTimeout = 100;
        this.testAdBlockElement = function(element) {
            var _a = document.body.getBoundingClientRect(),
                width = _a.width,
                height = _a.height;
            return element.style.display === "none" || element.style.visibility === "none" || width === 0 || height === 0;
        };
        var windowWithBrowser = window;
        windowWithBrowser.browser = windowWithBrowser.browser || {};
        this.zoneIdsCond = zoneIdsCond;
        this.allZoneIdsCond = zoneIdsCond ? zoneIdsCond : {};
        if (zoneIds && Array.isArray(zoneIds)) {
            this.allZoneIds = zoneIds;
            this.zoneIds = this._filterZoneIdsByBreakpoints(zoneIds);
        } else if (this.verbose) {
            window.cerr('zoneIds must be array');
        }
        this.topZoneIds = topZoneIds;
        this.noticeTextSelectors = noticeTextSelectors;
        this.elementsBackgrounds = elementsBackgrounds;
        this._refreshRates = refreshRates;
        if (adsServers && Array.isArray(zoneIds)) {
            this.adsServers = adsServers;
        } else if (this.verbose) {
            window.cerr('adsServers must be array');
        }
        this.adsAdminUrl = adsAdminUrl;
        this.validateBackgroundZones();
        this.noticeText = noticeText;
        this.storage = storage;
        this.maxRequests = Math.min(3, this.adsServers.length);
        this.requestTTL = this.maxRequests == 1 ? 15 : 2;
        this.urlTemplate = location.protocol + '//{URL}/delivery?zones=';
        if (this.storage) {
            var date = new Date();
            this.cappingKey = 'advertCapping_' + date.getFullYear() + '_' + date.getMonth() + '_' + date.getDate();
            var capping = this.storage.get(this.cappingKey);
            this.capping = capping ? JSON.parse(capping) : {};
        }
        if (requestOnInit) {
            this.request();
        }
    }
    BannerHandler.prototype.disableZone = function(zoneId) {
        var indexOfZone = this.zoneIds.indexOf(zoneId);
        if (indexOfZone != -1) {
            this.backupedDroppedZoneIds.push(zoneId);
            this.zoneIds.splice(indexOfZone, 1);
            return true;
        }
        return false;
    };
    BannerHandler.prototype.enableZone = function(zoneId) {
        var indexOfDroppedZone = this.backupedDroppedZoneIds.indexOf(zoneId);
        if (indexOfDroppedZone != -1) {
            this.zoneIds.push(zoneId);
            this.backupedDroppedZoneIds.splice(indexOfDroppedZone, 1);
            this.resetState();
            return true;
        }
        return false;
    };
    BannerHandler.prototype.resetState = function() {
        this.displayed = false;
        this.responseHandled = false;
        this.requested = false;
        this.requests = 0;
        return this;
    };
    BannerHandler.prototype.validateBackgroundZones = function() {
        if (this.getClientType() != this.clientTypes.mobile) {
            return;
        }
        var newZoneIds = [];
        for (var zoneIndex in this.zoneIds) {
            if (typeof this.elementsBackgrounds[this.zoneIds[zoneIndex]] == 'undefined') {
                newZoneIds.push(this.zoneIds[zoneIndex]);
            }
        }
        this.zoneIds = newZoneIds;
        this.elementsBackgrounds = {};
    };
    BannerHandler.prototype.setAdBlockedCallback = function(callback) {
        this.adBlockedCallback = callback;
        return this;
    };
    BannerHandler.prototype.setDisplayedCallback = function(callback) {
        this.displayedCallback = callback;
        return this;
    };
    BannerHandler.prototype.addSetBackgroundCallback = function(callback) {
        this.setBackgroundCallbacks.push(callback);
        return this;
    };
    BannerHandler.prototype.addAfterAdBackgroundElementCreatedCallbacks = function(callback) {
        this.afterAdBackgroundElementCreatedCallbacks.push(callback);
        return this;
    };
    BannerHandler.prototype.addBannersLoadedCallback = function(callback) {
        this.bannersLoadedCallbacks.push(callback);
        return this;
    };
    BannerHandler.prototype.hasFlashSupport = function() {
        try {
            var swfobject_1 = window.swfobject;
            return !!((typeof swfobject_1 != 'undefined' && swfobject_1.hasFlashPlayerVersion("1")) || "application/x-shockwave-flash" in navigator.mimeTypes || window.ActiveXObject && new ActiveXObject('ShockwaveFlash.ShockwaveFlash'));
        } catch (e) {}
        return false;
    };
    BannerHandler.prototype.getClientType = function() {
        if (typeof window.browser.mobile === 'undefined' ||
            typeof window.browser.mobile !== 'undefined' &&
            window.browser.mobile) {
            return this.clientTypes.mobile;
        } else if (/android|ipad|playbook|silk/i.test(navigator.userAgent || navigator.vendor || window.opera)) {
            return this.clientTypes.tablet;
        }
        return this.clientTypes.PC;
    };
    BannerHandler.prototype.getUrl = function() {
        var randUrlPos = Math.floor(Math.random() * this.adsServers.length);
        var randUrl = this.urlTemplate.replace('{URL}', this.adsServers[randUrlPos]);
        if (this.adsServers.length > 1) {
            this.adsServers.splice(randUrlPos, 1);
        }
        return randUrl;
    };
    BannerHandler.prototype.getUrlCappingPart = function() {
        var retCap = {},
            hasCap = false;
        for (var i = 0; i < this.zoneIds.length; i++) {
            if (typeof this.capping[this.zoneIds[i]] != 'undefined') {
                hasCap = true;
                for (var j in this.capping[this.zoneIds[i]]) {
                    retCap[j] = this.capping[this.zoneIds[i]][j];
                }
            }
        }
        return hasCap ? '&cap=' + encodeURI(JSON.stringify(retCap)) : '';
    };
    BannerHandler.prototype.getUrlFlashPart = function() {
        return this.hasFlashSupport() ? '' : '&no_flash=1';
    };
    BannerHandler.prototype.getUrlClientTypePart = function() {
        return "&clientType=" + this.getClientType();
    };
    BannerHandler.prototype.getZoneIdsWithMissingData = function() {
        if (Object.keys(this.zones).length == 0) {
            return this.zoneIds;
        }
        var zonesToRequest = [];
        for (var key in this.zoneIds) {
            if (!this.zones[this.zoneIds[key]]) {
                zonesToRequest.push(this.zoneIds[key]);
            }
        }
        return zonesToRequest;
    };
    BannerHandler.prototype.viewportChanged = function() {
        if (this.verbose) {
            window.clog('Viewport changed');
        }
        var oldZoneIds = this.zoneIds;
        var zoneIds = this._filterZoneIdsByBreakpoints(this.allZoneIds);
        for (var index in oldZoneIds) {
            var zoneId = oldZoneIds[index];
            if (zoneIds.indexOf(zoneId) === -1) {
                this.hideZone(zoneId);
            }
        }
        this.zoneIds = zoneIds;
        var zonesToRequest = this.getZoneIdsWithMissingData();
        for (var index in zoneIds) {
            var zoneId = zoneIds[index];
            if (zonesToRequest.indexOf(zoneId) === -1) {
                this.showZone(zoneId);
            }
        }
        this.resetState();
        this.request();
    };
    BannerHandler.prototype.xhrRequest = function(url, onSuccess, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a,
            method = _b.method,
            timeout = _b.timeout,
            json = _b.json,
            jsonp = _b.jsonp,
            onError = _b.onError;
        var xhr = new XMLHttpRequest();
        xhr.open(method || 'GET', url);
        if (timeout) {
            xhr.timeout = timeout * 1000;
        }
        xhr.onload = function() {
            if (_this.verbose) {
                window.clog('Success response');
            }
            xhr.status === 200 ?
                onSuccess(json ? JSON.parse(_this.parseJsonp(xhr.response, jsonp)) : xhr.response) :
                onError && onError(xhr);
        };
        xhr.onerror = function() {
            return onError && onError(xhr);
        };
        try {
            xhr.send();
        } catch (e) {
            console.error(e);
            onError && onError(xhr);
        }
        return xhr;
    };
    BannerHandler.prototype.parseJsonp = function(data, jsonp) {
        if (jsonp)
            return data.substring(data.indexOf('(') + 1, data.lastIndexOf(')'));
        return data;
    };
    BannerHandler.prototype.request = function() {
        var zonesToRequest = this.getZoneIdsWithMissingData();
        this._request(zonesToRequest);
    };
    BannerHandler.prototype._request = function(zonesToRequest) {
        var _this = this;
        if (zonesToRequest.length > 0) {
            this.requests++;
            if (this.verbose) {
                window.clog('Requesting ' + zonesToRequest.join(','));
            }
            var url = this.getUrl() + zonesToRequest.join(',') + this.getUrlClientTypePart() + this.getUrlCappingPart() + this.getUrlFlashPart();
            this.xhrRequest(url, function(data) {
                return _this.setData(data, zonesToRequest);
            }, {
                jsonp: true,
                json: true,
                onError: function(xhr) {
                    return _this.responseError(xhr);
                }
            });
        }
        this.requested = true;
    };
    BannerHandler.prototype.setData = function(data, requestedZones) {
        for (var zoneIdString in data) {
            var zoneId = parseInt(zoneIdString);
            this.zones[zoneId] = data[zoneId];
            this._prepareZone(zoneId);
            this._callBannersLoadedCallback(zoneId);
            if (this.zoneIdsCond && this.zoneIdsCond[zoneId] && this.zoneIdsCond[zoneId].offset) {
                this.backgroundZonesWithOffset[zoneId] = this.zoneIdsCond[zoneId].offset;
            }
        }
        this.responseHandled = true;
        if (this.displayCalled) {
            this.display();
        } else {
            for (var index = 0; index < this.zoneIds.length; index++) {
                var zoneId = this.zoneIds[index];
                if (!this.zones[zoneId] || !this.zones[zoneId].content) {
                    this.hideZone(zoneId);
                }
            }
        }
        var storeCapping = false;
        var zonesCond = [];
        if (!requestedZones) {
            requestedZones = this.zoneIds;
        }
        for (var _i = 0, requestedZones_1 = requestedZones; _i < requestedZones_1.length; _i++) {
            var zoneId = requestedZones_1[_i];
            if (this.zoneIdsCond != null && typeof this.zoneIdsCond[zoneId] != 'undefined') {
                var noZoneOrSecondRequest = typeof this.zones[zoneId] == 'undefined' || this.zoneIdsCond[zoneId].second_request;
                var noZoneOrNoHeight = typeof this.zones[zoneId] == 'undefined' || typeof this.zones[zoneId].h == 'undefined' || this.zones[zoneId].h <= this.zoneIdsCond[zoneId].height;
                if (noZoneOrSecondRequest && noZoneOrNoHeight) {
                    for (var i in this.zoneIdsCond[zoneId].zones) {
                        zonesCond.push(this.zoneIdsCond[zoneId].zones[i]);
                    }
                } else {
                    for (var i in this.zoneIdsCond[zoneId].zones) {
                        var zone = document.getElementById(this.idPrefix + this.zoneIdsCond[zoneId].zones[i]);
                        if (zone) {
                            zone.style.display = 'none';
                            var wrapper = zone.closest ? zone.closest('div.adsbackground-wrapper') : null;
                            if (wrapper) {
                                wrapper.style.display = 'none';
                            }
                        }
                    }
                }
            }
        }
        for (var zone in this.zones) {
            if (typeof this.zones[zone].cap != 'undefined') {
                if (typeof this.capping[zone] == 'undefined') {
                    this.capping[zone] = {};
                }
                if (typeof this.capping[zone][this.zones[zone].cap] == 'undefined') {
                    this.capping[zone][this.zones[zone].cap] = 1;
                } else {
                    this.capping[zone][this.zones[zone].cap]++;
                }
                storeCapping = true;
            }
        }
        if (storeCapping && this.storage) {
            this.storage.store(this.cappingKey, JSON.stringify(this.capping), 24 * 60 * 60, 'self', '/');
        }
        if (zonesCond.length) {
            var zoneIdsBack = this.zoneIds;
            for (var i = 0, l = zonesCond.length; i < l; i++) {
                zoneIdsBack.push(zonesCond[i]);
            }
            this.zoneIds = zonesCond;
            this.zoneIdsCond = null;
            this.requested = false;
            this.displayed = false;
            this.request();
            this.zoneIds = zoneIdsBack;
        }
        return this;
    };
    BannerHandler.prototype.responseError = function(xhr, errorThrown) {
        if (this.verbose) {
            window.cerr('Response error');
        }
        if (this.requests >= this.maxRequests) {
            this.setData({});
            if (!this.displayCalled) {
                this.requested = false;
                this.responseHandled = false;
            }
        } else {
            this.requested = false;
            this.request();
        }
    };
    BannerHandler.prototype.getContent = function(zoneId) {
        if (zoneId === void 0) {
            zoneId = 0;
        }
        if (this.zones && this.zones[zoneId] && this.zones[zoneId].content) {
            var zoneContent = this.zones[zoneId].content.replace(/\[timestamp\]/g, "" + Math.random());
            var windowWithBrowser = window;
            if ((windowWithBrowser.browser.msie || windowWithBrowser.browser.opera) && zoneContent.indexOf('<script') != -1) {
                var closeDelay = 700;
                if (windowWithBrowser.browser.version && windowWithBrowser.browser.version <= 8) {
                    closeDelay *= 8;
                }
                if (windowWithBrowser.browser.opera) {
                    closeDelay = 10;
                }
                zoneContent += "<script type=\"text/javascript\">setTimeout('document.close();', " + closeDelay + ");</s" + "cript>";
                if (windowWithBrowser.browser.opera) {
                    return "<script type=\"text/javascript\">setTimeout('document.write(unescape(\"" + escape("<body style=\"margin:0;padding:0;\">" + zoneContent + "</b" + "ody>") + "\"));',10);</s" + "cript>";
                }
            }
            return "<body style=\"margin:0;padding:0;\">" + zoneContent + "</b" + "ody>";
        }
        return '';
    };
    BannerHandler.prototype.display = function() {
        var _this = this;
        this.displayCalled = true;
        this._windowWidth = window.innerWidth;
        if (this.verbose) {
            window.clog('DisplayCalled');
        }
        if (this.responseHandled && !this.displayed) {
            this.displayed = true;
            var keys = [];
            this._prepareBackgroundsWithOffset();
            this._displayAdblockBanners();
            for (var i in this.zones) {
                if (this.zones.hasOwnProperty(i)) {
                    keys.push(i);
                }
            }
            if (!keys.length) {
                this.adBlocked = true;
                if (this.adBlockedCallback !== null) {
                    this.adBlockedCallback(this.adBlocked, window.browser);
                }
            }
            for (var index = 0, len = this.zoneIds.length; index < len; index++) {
                var zoneId = this.zoneIds[index];
                this._renderZone(zoneId);
            }
            if (!this._attachedEvents) {
                this._attachedEvents = true;
                var self_1 = this;
                window.addEventListener('resize', function() {
                    if (window.innerWidth != self_1._windowWidth) {
                        self_1._windowWidth = window.innerWidth;
                        clearTimeout(self_1._viewportTimeout);
                        self_1._viewportTimeout = setTimeout(function() {
                            self_1.viewportChanged();
                        }, 600);
                    }
                });
                if (!document.hidden) {
                    this._prepareRefreshZones();
                }
                var lastActiveTime_1 = new Date();
                window.addEventListener('visibilitychange', function() {
                    if (document.hidden) {
                        lastActiveTime_1 = new Date();
                        _this._clearRefreshZones();
                    } else {
                        var now = new Date();
                        var diff = now.getTime() - lastActiveTime_1.getTime();
                        _this._prepareRefreshZones(Math.floor(diff / 1000));
                    }
                });
            }
            if (this.verbose) {
                window.clog('Display');
            }
        } else if (!this.requested) {
            this.request();
        }
    };
    BannerHandler.prototype.showZone = function(zoneId) {
        var zone = document.getElementById(this.idPrefix + zoneId);
        if (zone) {
            zone.style.display = 'block';
            var wrapper = zone.closest ? zone.closest('div.adsbackground-wrapper') : null;
            if (wrapper) {
                wrapper.style.display = 'block';
            }
        }
        var zoneIfrm = this._getZoneIframe(zoneId);
        if (zoneIfrm) {
            var bodyClassAttribute = zoneIfrm.getAttribute('data-body-class');
            if (bodyClassAttribute) {
                document.body.classList.add(bodyClassAttribute);
            }
        }
    };
    BannerHandler.prototype.hideZone = function(zoneId) {
        delete(this.zones[zoneId]);
        var zone = document.getElementById(this.idPrefix + zoneId);
        if (zone) {
            zone.style.display = 'none';
            var wrapper = zone.closest ? zone.closest('div.adsbackground-wrapper') : null;
            if (wrapper) {
                wrapper.style.display = 'none';
            }
        }
        var zoneIfrm = this._getZoneIframe(zoneId);
        if (zoneIfrm) {
            var bodyClassAttribute = zoneIfrm.getAttribute('data-body-class');
            if (bodyClassAttribute) {
                document.body.classList.remove(bodyClassAttribute);
            }
        }
    };
    BannerHandler.prototype.refreshZone = function(zoneId) {
        if (this.zoneIds.indexOf(zoneId) === -1) {
            return false;
        }
        delete(this.zones[zoneId]);
        this.resetState();
        this._request([zoneId]);
        return true;
    };
    BannerHandler.prototype._prepareRefreshZones = function(intervalSinceLastTime) {
        if (intervalSinceLastTime === void 0) {
            intervalSinceLastTime = 0;
        }
        var _loop_1 = function(zoneId) {
            var refreshRate = this_1._refreshRates[zoneId];
            if (this_1._refreshRateTimers.hasOwnProperty(zoneId)) {
                window.clearInterval(this_1._refreshRateTimers[zoneId]);
                delete(this_1._refreshRateTimers[zoneId]);
            }
            if (intervalSinceLastTime >= refreshRate) {
                this_1.refreshZone(parseInt(zoneId));
            }
            this_1._refreshRateTimers[zoneId] = (function(_self, _zoneId) {
                return window.setInterval(function() {
                    _self.refreshZone(_zoneId);
                }, refreshRate * 1000);
            })(this_1, parseInt(zoneId));
        };
        var this_1 = this;
        for (var zoneId in this._refreshRates) {
            _loop_1(zoneId);
        }
    };
    BannerHandler.prototype._clearRefreshZones = function() {
        for (var zoneId in this._refreshRateTimers) {
            window.clearInterval(this._refreshRateTimers[zoneId]);
            delete(this._refreshRateTimers[zoneId]);
        }
    };
    BannerHandler.prototype.testAdBlock = function() {
        if (this.requested) {
            var self_2 = this;
            setTimeout(function() {
                self_2.adBlocked = !self_2.responseHandled;
                if (!self_2.adBlocked) {
                    for (var i in self_2.zoneIds) {
                        var zoneIframe = document.getElementById(self_2.idPrefix + self_2.zoneIds[i] + '-iframe');
                        if (typeof self_2.zones[self_2.zoneIds[i]] != 'undefined') {
                            if (zoneIframe && self_2.testAdBlockElement(zoneIframe)) {
                                self_2.adBlocked = true;
                                break;
                            }
                            var zoneIframeObj = zoneIframe;
                            var zoneIframeDoc = (zoneIframeObj.contentWindow) ? zoneIframeObj.contentWindow : (zoneIframeObj.contentDocument.document) ? zoneIframeObj.contentDocument.document : zoneIframeObj.contentDocument;
                            if (typeof zoneIframeDoc.document != 'object') {
                                self_2.adBlocked = true;
                                break;
                            } else {
                                var body = zoneIframeDoc.document.body;
                                if (body && (body.innerHTML.trim() == '' || self_2.testAdBlockElement(body))) {
                                    self_2.adBlocked = true;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    self_2.adBlocked = true;
                }
                if (self_2.adBlockedCallback !== null) {
                    self_2.adBlockedCallback(self_2.adBlocked, self_2.getBrowser());
                }
            }, 2000);
        }
    };
    BannerHandler.prototype.uaMatch = function(ua) {
        ua = ua.toLowerCase();
        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };
    BannerHandler.prototype.getBrowser = function() {
        var userAgent = this.uaMatch(navigator.userAgent);
        var browser = {};
        if (userAgent.browser) {
            browser[userAgent.browser] = true;
            browser.version = userAgent.version;
        }
        if (browser.chrome) {
            browser.webkit = true;
        } else if (browser.webkit) {
            browser.safari = true;
        }
        return browser;
    };
    BannerHandler.prototype.backgroundZoneHasOffset = function(zoneId) {
        return !!this.backgroundZonesWithOffset[zoneId];
    };
    BannerHandler.prototype.addOrCallAdblockPlusCallback = function(callback) {
        if (window.AdblockPlus && typeof window.AdblockPlus.detect === 'function') {
            var locationOrigin = location.protocol + "//" + location.host;
            window.AdblockPlus.detect(locationOrigin + '/px.gif', callback);
        }
        return this;
    };
    BannerHandler.prototype._getViewportSize = function() {
        var body = (document.compatMode && document.compatMode === 'CSS1Compat') ? document.documentElement : document.body;
        return {
            width: body.clientWidth,
            height: body.clientHeight
        };
    };
    BannerHandler.prototype._filterZoneIdsByBreakpoints = function(zoneIds) {
        if (!this.zoneIdsCond) {
            this.zoneIdsCond = this.allZoneIdsCond;
        }
        var bodyClassList = document.body.classList;
        var isMobi = bodyClassList.contains("mobi");
        if (isMobi) {
            return zoneIds;
        }
        var filteredZoneIds = [];
        var isMobileOrTablet = this.getClientType() == this.clientTypes.mobile || this.getClientType() == this.clientTypes.tablet;
        var isDetailPage = document.body.classList.contains("detailbody");
        var fsiElement = document.getElementById('fsi');
        var isLsInFrame = false;
        if (fsiElement != null) {
            isLsInFrame = fsiElement.classList.contains('lsInFrame');
        }
        var viewportSize = this._getViewportSize();
        var desktopBreakpoint = 1000;
        if (!isDetailPage) {
            if (bodyClassList.contains("_in")) {
                desktopBreakpoint = 980;
            } else if (bodyClassList.contains("_sb")) {
                desktopBreakpoint = 988;
            }
        }
        for (var i in zoneIds) {
            var zoneId = zoneIds[i];
            if (!this.zoneIdsCond ||
                !(zoneId in this.zoneIdsCond) ||
                !('breakpoint' in this.zoneIdsCond[zoneId]) ||
                !this.zoneIdsCond[zoneId]['breakpoint']) {
                if (!(zoneId in this.zoneIdsCond)) {
                    this.zoneIdsCond[zoneId] = {};
                }
                this.zoneIdsCond[zoneId]['breakpoint'] = [desktopBreakpoint, 9999];
            }
            var breakpoint = this.zoneIdsCond[zoneId]['breakpoint'];
            var matchedBreakpoint = (viewportSize.width >= breakpoint[0] && viewportSize.width <= breakpoint[1]);
            var allowedForDetailPage = breakpoint[0] == desktopBreakpoint;
            if ((!isDetailPage && matchedBreakpoint) || (isDetailPage && (matchedBreakpoint || allowedForDetailPage) && (isMobileOrTablet || allowedForDetailPage)) || isLsInFrame) {
                filteredZoneIds.push(zoneId);
                continue;
            }
            this.hideZone(zoneId);
            for (var i_1 in this.zoneIdsCond[zoneId].zones) {
                this.hideZone(this.zoneIdsCond[zoneId].zones[i_1]);
            }
        }
        return filteredZoneIds;
    };
    BannerHandler.prototype._getInt = function(int) {
        try {
            int = parseInt(int);
        } catch (e) {}
        if (typeof int == "number") {
            return int;
        }
        return 0;
    };
    BannerHandler.prototype._prepareZone = function(zoneId) {
        if (zoneId === void 0) {
            zoneId = 0;
        }
        if (this.zones && this.zones[zoneId]) {
            this.zones[zoneId].rendered = false;
            this._resizeZoneToContent(zoneId);
        }
    };
    BannerHandler.prototype._resizeZoneToContent = function(zoneId) {
        if (zoneId === void 0) {
            zoneId = 0;
        }
        if (typeof this.zones[zoneId].w == "number" && typeof this.zones[zoneId].h == "number") {
            var zone = document.getElementById(this.idPrefix + zoneId);
            var zoneChild = zone && zone.childNodes[0];
            if (zone && zoneChild) {
                var width = Math.min(this._getInt(zone.style.width), this.zones[zoneId].w);
                var height = Math.min(this._getInt(zoneChild.style.height), this.zones[zoneId].h);
                this.zones[zoneId].width = width;
                this.zones[zoneId].height = height;
                zone.style.width = width + "px";
                zoneChild.style.height = height + "px";
                var iframe = document.getElementById(this.idPrefix + zoneId + '-iframe');
                if (iframe) {
                    iframe.style.width = width + "px";
                    iframe.style.height = height + "px";
                }
            }
        }
    };
    BannerHandler.prototype._callBannersLoadedCallback = function(zoneId) {
        for (var callbackIndex = 0, len = this.bannersLoadedCallbacks.length; callbackIndex < len; callbackIndex++) {
            if (Object.prototype.toString.call(this.bannersLoadedCallbacks[callbackIndex]) == '[object Function]') {
                this.bannersLoadedCallbacks[callbackIndex](zoneId);
            }
        }
    };
    BannerHandler.prototype._setIframeContent = function(zoneIfrm, zoneId, content, bannerId) {
        var _this = this;
        var self = this;
        var iterator = this._setIframeContentCounter;
        setTimeout(function() {
            var zoneIfrmDoc = _this._getIframeContentDocument(zoneIfrm);
            zoneIfrm.style.visibility = "";
            zoneIfrm.setAttribute("banner-id", bannerId.toString());
            var bodyClassAttribute = zoneIfrm.getAttribute('data-body-class');
            if (bodyClassAttribute) {
                document.body.classList.add(bodyClassAttribute);
            }
            if (self.noticeTextSelectors[zoneId]) {
                self._setNoticeTextToElement(self.noticeTextSelectors[zoneId]);
                for (var callbackIndex = 0, len = self.setBackgroundCallbacks.length; callbackIndex < len; callbackIndex++) {
                    if (Object.prototype.toString.call(self.setBackgroundCallbacks[callbackIndex]) == '[object Function]') {
                        var hasOffset = self.backgroundZoneHasOffset(zoneId);
                        self.setBackgroundCallbacks[callbackIndex](zoneId, hasOffset);
                    }
                }
            }
            if (!zoneIfrmDoc || !('document' in zoneIfrmDoc) || typeof zoneIfrmDoc.document != 'object') {
                zoneIfrm.src = 'javascript:(function(){document.open();document.domain="' + document.domain + '";var c = window.parent.banners.getContent(' + zoneId + ');document.write(c);})()';
            } else {
                zoneIfrmDoc.document.open();
                zoneIfrmDoc.document.write(content);
            }
            if (zoneIfrmDoc && 'document' in zoneIfrmDoc && (!(window.browser.msie) || content.indexOf('<script') == -1)) {
                zoneIfrmDoc.document.close();
            }
            self.showZone(zoneId);
            if (self._setIframeContentCounter - 1 == iterator) {
                self.testAdBlock();
                if (self.displayedCallback !== null) {
                    self.displayedCallback();
                }
            }
        }, this._setIframeContentTimeout * this._setIframeContentCounter++);
        return this;
    };
    BannerHandler.prototype._getIframeContentDocument = function(iframe) {
        if (iframe) {
            if (iframe.contentWindow) {
                return iframe.contentWindow;
            } else if (iframe.contentDocument) {
                if (iframe.contentDocument.document) {
                    return iframe.contentDocument.document;
                }
                return iframe.contentDocument;
            }
        }
        return null;
    };
    BannerHandler.prototype._setNoticeTextToElement = function(elementSelector) {
        var elements = document.querySelectorAll(elementSelector);
        if (elements[0]) {
            var span = document.createElement('span');
            span.classList.add("advert-bgr-notice");
            span.appendChild(document.createTextNode(this.noticeText));
            elements[0].appendChild(span);
        }
        return this;
    };
    BannerHandler.prototype.prepareBackup = function() {
        var _this = this;
        if (this.verbose) {
            window.clog('PrepareBackup');
        }
        if (this._backupPrepaired) {
            return;
        }
        this._backupPrepaired = true;
        if (typeof window.banners_backup_callbacks != "undefined" && window.banners_backup_callbacks.length) {
            var callbacks_1 = window.banners_backup_callbacks;
            var onRequestSuccess = function(script) {
                _this._eval(script);
                for (var index = 0, len = callbacks_1.length; index < len; index++) {
                    var callback = callbacks_1[index];
                    if (typeof callback == 'function') {
                        callback();
                    }
                }
            };
            this.xhrRequest("//static.criteo.net/js/ld/publishertag.js", onRequestSuccess);
        }
    };
    BannerHandler.prototype._eval = function(data) {
        if (data) {
            try {
                (window.execScript || function(data) {
                    window["eval"].call(window, data);
                })(data);
            } catch (error) {
                console.error(error);
            }
        }
    };
    BannerHandler.prototype._renderZone = function(zoneId) {
        var backgroundIds = [];
        if (typeof window.cjs != 'undefined' && window.cjs.dic) {
            var zoneList_1 = window.cjs.Api.config.get('app', 'banner', 'zone_list');
            if (zoneList_1) {
                Object.keys(zoneList_1).forEach(function(zoneName) {
                    if (zoneName.indexOf('background') === 0) {
                        if (zoneList_1[zoneName].id) {
                            backgroundIds.push(zoneList_1[zoneName].id);
                        }
                    }
                });
            }
        }
        var isMobileOrTablet = this.getClientType() == this.clientTypes.mobile || this.getClientType() == this.clientTypes.tablet;
        if (isMobileOrTablet && backgroundIds.indexOf(zoneId) != -1) {
            var element = document.getElementById(this.idPrefix + zoneId);
            if (element)
                element.remove();
            return;
        }
        if (this.zones[zoneId] && this.zones[zoneId].content && !this.zones[zoneId].rendered) {
            this.zones[zoneId].rendered = true;
            var clickUrl = null;
            if (this.zones[zoneId].id) {
                clickUrl = 'https://' + this.adsAdminUrl + '/delivery/ck.php?oaparams=2__bannerid=' + this.zones[zoneId].id + '__zoneid=' + zoneId;
            }
            if (this.elementsBackgrounds[zoneId]) {
                var backgroundSet = function(banners, zoneId, click) {
                    return function() {
                        for (var callbackIndex = 0; callbackIndex < banners.setBackgroundCallbacks.length; callbackIndex++) {
                            if (Object.prototype.toString.call(banners.setBackgroundCallbacks[callbackIndex]) == '[object Function]') {
                                var hasOffset = banners.backgroundZoneHasOffset(zoneId);
                                banners.setBackgroundCallbacks[callbackIndex](zoneId, hasOffset);
                            }
                        }
                        var bgrItem = banners.elementsBackgrounds[zoneId];
                        var backgroundAdSelector = bgrItem.element;
                        var background = "";
                        var elementContainingBackground = Array.prototype.filter.call(document.getElementsByTagName("div"), function(element) {
                            return element.innerHTML === banners.zones[zoneId].content;
                        })[0];
                        if (elementContainingBackground) {
                            var imgElement = elementContainingBackground.getElementsByTagName("img")[0];
                            if (imgElement) {
                                background = imgElement.getAttribute("src") || "";
                            }
                        }
                        var backgroundElements = document.querySelectorAll(backgroundAdSelector);
                        var backgroundElement = backgroundElements[0] ? backgroundElements[0] : null;
                        if (backgroundElement) {
                            backgroundElement.style.backgroundImage = 'url(' + background + ')';
                            backgroundElement.style.backgroundPosition = '49.9% 0';
                            backgroundElement.style.backgroundRepeat = 'repeat-x';
                            backgroundElement.style.cursor = 'pointer';
                            if (bgrItem.fixed) {
                                backgroundElement.style.backgroundAttachment = 'fixed';
                            }
                        }
                        for (var callbackIndex = 0, len = banners.afterAdBackgroundElementCreatedCallbacks.length; callbackIndex < len; callbackIndex++) {
                            if (Object.prototype.toString.call(banners.afterAdBackgroundElementCreatedCallbacks[callbackIndex]) == '[object Function]') {
                                banners.afterAdBackgroundElementCreatedCallbacks[callbackIndex](backgroundAdSelector, banners);
                            }
                        }
                        if (bgrItem.notice) {
                            banners._setNoticeTextToElement(bgrItem.notice);
                        }
                        var newStyle = document.createElement("style");
                        newStyle.innerHTML = backgroundAdSelector + ' > * {cursor: default;}';
                        newStyle.setAttribute("type", "text/css");
                        document.head.appendChild(newStyle);
                        if (click) {
                            if (backgroundElement) {
                                backgroundElement.onclick = function(_clickUrl, _clickableElement) {
                                    return function(e) {
                                        if (typeof e != 'undefined' && e.target == _clickableElement) {
                                            window.open(_clickUrl, 'banner');
                                        }
                                    };
                                }(click, backgroundElement);
                            }
                        }
                    };
                }(this, zoneId, clickUrl);
                setTimeout(backgroundSet, this._backgroundSetTimeout + this._setIframeContentTimeout * (this._setIframeContentCounter - 1));
                return;
            }
            if (this.zones[zoneId].id) {
                var zone = document.getElementById(this.idPrefix + zoneId);
                if (zone) {
                    var adsContent = zone.querySelectorAll("div.adscontent")[0];
                    if (adsContent) {
                        var parent_1 = adsContent.parentElement;
                        if (parent_1) {
                            parent_1.innerHTML = '<div class="adsclick" style="width: 100% !important; height: 100% !important" onclick="window.open(\'' + clickUrl + '\')"></div>' + parent_1.innerHTML;
                        }
                    }
                }
            }
            var zoneIfrm = this._getZoneIframe(zoneId);
            if (zoneIfrm) {
                var content = this.getContent(zoneId);
                this._setIframeContent(zoneIfrm, zoneId, content, this.zones[zoneId].id ? this.zones[zoneId].id : 0);
            }
        } else if (!this.zones[zoneId] || !this.zones[zoneId].rendered) {
            this.hideZone(zoneId);
        }
    };
    BannerHandler.prototype._getZoneIframe = function(zoneId) {
        return document.getElementById(this.idPrefix + zoneId + "-iframe");
    };
    BannerHandler.prototype._prepareBackgroundsWithOffset = function() {
        var self = this;
        var topZoneIds = this.topZoneIds;
        var programmaticZonesIds = Object.keys(this.backgroundZonesWithOffset);
        topZoneIds.forEach(function(topZoneId) {
            if (self.zones[topZoneId] && programmaticZonesIds.length) {
                programmaticZonesIds.forEach(function(programmaticZoneId) {
                    delete self.backgroundZonesWithOffset[programmaticZoneId];
                    delete self.zones[programmaticZoneId];
                });
            }
        });
    };
    BannerHandler.prototype._displayAdblockBanners = function() {
        var self = this;
        this.addOrCallAdblockPlusCallback(function(usesABP) {
            if (usesABP) {
                var elements = document.getElementsByClassName('abp_backup_zone');
                [].forEach.call(elements, function(element) {
                    element.style.display = 'block';
                });
                self.zoneIds.map(self.hideZone.bind(self));
            }
        });
    };
    return BannerHandler;
}());
if (typeof window !== "undefined" && window !== null) {
    window.BannerHandler = BannerHandler;
} else {
    exports.BannerHandler = BannerHandler;
}

function create_ofcontent(element_id) {
    var dof = clientStorage.get('fs_of');
    if (typeof of_list[dof] !== 'undefined') {
        of_current = dof;
    } else {
        set_of(of_current, element_id);
        return;
    }

    document.getElementById('ofactual').innerHTML = of_list[of_current]['name_title'];

    var html = new Array();

    html.push('<ul id="ofcontent">');

    var i = 0;
    for (var of_index in of_list) {
        if (of_index == of_current) {
            continue;
        }

        html.push('<li', (i % 2 ? ' class="even"' : ''), '><a href="#" onclick="set_of(\'' + of_index.substring(0, 2).toLowerCase() + '\', \'' + element_id + '\')">', of_list[of_index]['name_title'], '</a></li>');
        i++;
    }

    html.push('</ul>');

    document.getElementById(element_id).innerHTML = html.join('');
};

function set_of(format, element_id) {
    if (of_list[format] !== 'undefined') {
        switch_odd_format(format);
    }
    create_ofcontent(element_id);
};

function refresh_alert_check_on() {

    if (!inside) {
        inside = !!clientStorage.get('LS_refresh_inside');
        //inside = !!clientStorage.get_from_session('LS_refresh_inside');
    }
    if (clientStorage.get_from_session('LS_refresh_web') == window.location && inside) {
        window.count = parseInt(clientStorage.get_from_session('LS_refresh_count')) + 1;
        clientStorage.store_in_session('LS_refresh_count', window.count, 60);
    } else {
        clientStorage.store_in_session('LS_refresh_count', 0, 60);
    }

    clientStorage.store_in_session('LS_refresh_web', window.location, 30);
};


document.disable_refresh_check_once = function() {
    dont_check_me = true;
};


document.refresh_alert = function(warning) {
    if (checked) {
        return;
    }

    checked = true;

    if (typeof window.count == 'undefined') {
        window.count = 0;
    }
    if (window.count > 1) {
        alert("Los marcadores se actualizan automÃ¡ticamente sin retraso.\nNo necesitas recargar la pÃ¡gina.");
    }
    window.count = 0;
};


window.onunload = function(e) {
    if (!dont_check_me) {
        clientStorage.store('LS_refresh_inside', 1, 3);
        //clientStorage.store_in_session('LS_refresh_inside', 1, 3);
    } else {
        clientStorage.drop('LS_refresh_inside');
        //clientStorage.store_in_session('LS_refresh_inside', 1, 0);
    }
};

var inside = false;
var check_count = 0;
var checked = false;
var dont_check_me = false;

/**
 * Get existing league ID
 *
 * @param object
 * @param id
 * @returns Data_Item|null
 */
function getExistingLeagueId(object, id) {
    var leagueItem;
    try {
        leagueItem = object.getItem(id);
    } catch (err) {
        leagueItem = null;
    }

    return leagueItem;
}

/** Set league display
 */
function expand_collapse_league_load() {
    if (country == null) {
        var cookie_name = 'fsdc_expand_collapse_league';
        var tmp_cookie = clientStorage.get(cookie_name);

        // there are leagues in cookie
        if (tmp_cookie != null && tmp_cookie.length > 0) {
            // set custom flag for games
            cjs.dic.get('dataLeagueHolderProxy').getHandler().each(function(index, id) {
                if (tmp_cookie.match(id) == null) {
                    return;
                }
                var leagueItem = getExistingLeagueId(this, id);
                if (!leagueItem) {
                    return;
                }
                if (leagueItem.getValue('ZD') == 'c') {
                    leagueItem.setValue('display', true);
                } else {
                    leagueItem.setValue('display', false);
                }
            });
        }
    }
};
/** Window prototype: Open help window
 * @url		string	url		url of window
 */
window.open_help = function(url) {
    var id = Math.floor(Math.random() * 1000);
    return this.open(url, id, 'hotkeys=no, resizable=no, toolbar=no, status=no, dependent=yes, scrollbars=1, width=520, height=500');
};

/** Display/Hide element
 */
function display_hide_element(id) {
    var element = document.getElementById(id);

    if (element) {
        if (element.style.display == 'block') {
            element.style.display = 'none';
        } else {
            element.style.display = 'block';
        }
    }
};

function display_element(id) {
    var element = document.getElementById(id);
    if (element) {
        element.style.display = 'block';
    }
};

function hide_element(id) {
    var element = document.getElementById(id);
    if (element) {
        element.style.display = 'none';
    }
};

function show_media(url, width, height) {
    var resizable = false;
    if (!width && !height) {
        width = 400;
        height = 400;
        var resizable = true;
    } else {
        width = !width ? 300 : width + 10;
        height = !height ? 300 : height + 10;

        if (width < 100) {
            width = 100;
        }

    }

    if (document.all) {
        var x = Math.round(window.screen.availWidth / 2 - width / 2);
        var y = Math.round(window.screen.availHeight / 2 - height / 2);
        if (x < 0) {
            x = 10;
        }
        if (y < 0) {
            y = 10;
        }
    } else {
        var x = 200,
            y = 200;
    }


    var features = 'height=' + height + ', left=' + x + ', location=no, menubar=no, resizable=' + (resizable ? 'yes' : 'no') + ', ' +
        'scrollbars=no, status=no, titlebar=no, toolbar=no, top=' + y + ', width=' + width;

    window.open(url, '_blank', features);
};

function tooltip(div_input_id, ident, disable) {
    this.max_width = 400;
    this.is_init = false;
    this.div = null;
    this.div_content = null;
    this.isDisabled = disable || false;

    this.div_id = typeof div_input_id == "undefined" ? null : div_input_id;
    this.ident = typeof ident == "undefined" ? 1 : ident;
    this.container_id = "tooltip-" + this.ident;
    this.defaultZIndex = "999";
    this.currentZIndex = this.defaultZIndex;
    this.hideCallback = function() {};

    this.init = function() {
        if (this.is_init || this.isDisabled) {
            return;
        }

        // create new or use existing tooltip element
        if (this.createTooltipElement()) {
            this.is_init = true;
        }
    };

    this.show = function(elm, elm_event, opposite_direction, border_elm) {
        if (!this.is_init || this.isDisabled) {
            return;
        }

        var title = elm.title;
        if (!title) {
            title = elm.getAttribute("title"); // workaround svg title
        }
        if (!title) {
            return;
        }
        var title_length = title.length;

        // formating
        title = title.replace(/\[bl\]([^]+)/gi, function(match, p1, offset, str) {
            var closest = elm.closest("[data-bookmaker-id]");
            if (!closest) {
                return "";
            }
            var bookmakerId = closest.getAttribute("data-bookmaker-id");
            if (bookmakerId) {
                p1 = p1.replace(/\[br\]/, "\n");
                var rowData = p1.split("\n");
                var odds = rowData[0];

                var secondLineText = "";
                if (rowData[1]) {
                    secondLineText = '<span class="tooltip-second-row">' + rowData[1] + "</span>";
                }

                var showText = 0;
                var bookmakerLogo = null;
                var bookmakerName = "";
                if (typeof cjs !== "undefined") {
                    cjs.Api.loader.get("bookmakerSettings").call(function(module) {
                        bookmakerLogo = module.getLogo(bookmakerId);
                        bookmakerName = module.getBookmakerNameByGeoIpAndId(
                            cjs.geoIP,
                            cjs.geoIPIsoSubdivisionCode0,
                            bookmakerId,
                        );
                        showText = module.showBookmakerLogoMatchSummary(cjs.geoIP, cjs.geoIPIsoSubdivisionCode0) === 1;
                    });
                }

                var bookmaker = "";
                if (bookmakerLogo) {
                    bookmaker =
                        '<span class="tooltip-logo"><a><span class="tooltip-first-row"><span style="background: transparent url(' +
                        bookmakerLogo.getUrl() +
                        ') no-repeat" class="detail-blogos"></span><span class="tooltip-first-row__text">' +
                        odds +
                        "</span></span>" +
                        secondLineText +
                        "</a></span>";
                    if (showText) {
                        bookmaker =
                            '<span class="tooltip-logo"><a><span class="tooltip-first-row"><span class="tooltip-first-row__text">' +
                            bookmakerName +
                            " " +
                            odds +
                            "</span></span>" +
                            secondLineText +
                            "</a></span>";
                    }
                }

                return bookmaker;
            }

            return "";
        });
        title = title.replace(/\[b\]/i, "<strong>");
        title = title.replace(/\[\/b\]/i, "</strong>");
        title = title.replace(/\[br\]/gi, "<br />");
        title = title.replace(/\[u\]/i, " &raquo; ");
        title = title.replace(/\[d\]/i, " &raquo; ");
        title = title.replace(/\n/g, "<br />");
        title = title.replace(/\\'/g, "'");

        if (title_length > 0) {
            var x = parseInt(elm_event.clientX);

            this.div_content.innerHTML = title;
            elm.title = "";

            this.div.style.display = "block";
            if ((this.div.style.width = "auto")) {
                this.div.style.width = this.div.offsetWidth + "px";
            }

            var div_width = this.div.offsetWidth;
            if (div_width > this.max_width) {
                div_width = this.max_width;
                this.div.style.width = this.max_width + "px";
                this.div_content.style.whiteSpace = "normal";
            }

            if (
                typeof opposite_direction != "undefined" &&
                opposite_direction == null &&
                typeof border_elm != "undefined" &&
                border_elm != null
            ) {
                var fence = document.getElementById(border_elm);
                opposite_direction = true;
                var fenceWidth = parseFloat(getComputedStyle(fence, null).width.replace("px", ""));
                if (x + div_width > fenceWidth) {
                    opposite_direction = false;
                }
            } else {
                var windowWidth = parseFloat(getComputedStyle(window.document.body, null).width.replace("px", ""));
                opposite_direction = windowWidth / 2 - x > 0;
            }

            if (opposite_direction == true) {
                this.div.classList.add("revert");
            }

            this.div.style.zIndex = this.getZIndex();

            // indent
            var tooltip_indent_r = 11;
            var tooltip_indent_l = 11;
            var tooltip_indent_t = 10; // top

            var rect = elm.getBoundingClientRect();
            var win = elm.ownerDocument.defaultView;
            var elm_coords = {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset,
            };
            var elm_width = parseFloat(getComputedStyle(elm, null).width.replace("px", ""));
            var elm_height = parseFloat(getComputedStyle(elm, null).height.replace("px", ""));
            if (isNaN(elm_width)) {
                elm_width = 10;
            }
            if (isNaN(elm_height)) {
                elm_height = 10;
            }

            var pos_top = elm_coords.top + tooltip_indent_t + elm_height;
            var elm_midpoint = elm_coords.left ? Math.floor(elm_width / 2) : Math.ceil(elm_width / 2);
            var pos_left1 = elm_coords.left + elm_midpoint - tooltip_indent_r;
            var pos_left2 = elm_coords.left - div_width + Math.ceil(elm_width / 2) + tooltip_indent_l;
            var pos_left;
            if (!opposite_direction && pos_left2 > 0) {
                pos_left = pos_left2;
            } else if (!opposite_direction && pos_left2 <= 0) {
                pos_left = 0;
                this.div.style.width = this.div.offsetWidth + pos_left2 - 10 + "px";
                this.div.classList.add("tooltip-wide");
            } else {
                pos_left = pos_left1;
                this.div.classList.add("revert-wide");
            }
            this.div.title = "";
            this.div.style.top = pos_top + "px";
            this.div.style.left = pos_left + "px";
        }
    };

    this.hide = function(elm) {
        if (!this.is_init || this.isDisabled) {
            return;
        }

        if (typeof this.hideCallback === "function") {
            this.hideCallback();
        }

        var title = this.div_content.innerHTML.replace(/<br( \/){0,1}>/gi, "\n");
        title = title.replace(/\<strong\>/i, "[b]");
        title = title.replace(/\<\/strong\>/i, "[/b]");

        if (title.length > 0) {
            if (typeof elm !== "undefined" && elm.title === "") {
                elm.title = title;
            }

            this.div.style.display = "none";
            this.div.style.width = "auto";
            this.div_content.innerHTML = "";
            this.div.classList.remove("revert");
            this.div.classList.remove("revert-wide");
            this.div.classList.remove("tooltip-wide");
        }
    };

    this.hide_all = function() {
        if (!this.is_init || this.isDisabled) {
            return;
        }

        this.div.style.display = "none";
        this.div.style.width = "auto";
        this.div.classList.remove("revert");
        this.div.classList.remove("revert-wide");
        this.div.classList.remove("tooltip-wide");
    };

    this.set_max_width = function(width) {
        this.max_width = width - 0;
    };

    /**
     * Returns element as tooltip wrapper.
     * @return {Object}
     */
    this.getTooltipWrapper = function() {
        return this.div_id ? document.getElementById(this.div_id) : document.getElementsByTagName("body")[0];
    };

    /**
     * Creates tooltip element. If wrapper element could not be created
     * returns false otherwise true.
     * @return {Boolean}
     */
    this.createTooltipElement = function() {
        this.div = document.getElementById(this.container_id);

        // use existing tooltip element in DOM
        if (this.div !== null) {
            this.div_content = this.div.getElementsByTagName("span")[0];
            return true;
        }

        // tooltip wrapper
        var wrapper = this.getTooltipWrapper();
        if (!wrapper) {
            return false;
        }

        // create new tooltip element
        this.div = document.createElement("div");
        this.div.id = this.container_id;
        this.div.className = "tooltip";

        this.div_content = document.createElement("span");
        this.div.appendChild(this.div_content);

        var div_lt = document.createElement("div");
        div_lt.id = this.container_id + "-lt";
        div_lt.className = "tooltip-lt";
        this.div.appendChild(div_lt);

        var div_rt = document.createElement("div");
        div_rt.id = this.container_id + "-rt";
        div_rt.className = "tooltip-rt";
        this.div.appendChild(div_rt);

        var div_lb = document.createElement("div");
        div_lb.id = this.container_id + "-lb";
        div_lb.className = "tooltip-lb";
        this.div.appendChild(div_lb);

        var div_cb = document.createElement("div");
        div_cb.id = this.container_id + "-cb";
        div_cb.className = "tooltip-cb";

        this.div.appendChild(div_cb);

        var div_rb = document.createElement("div");
        div_rb.id = this.container_id + "-rb";
        div_rb.className = "tooltip-rb";
        this.div.appendChild(div_rb);

        var div_ct = document.createElement("div");
        div_ct.id = this.container_id + "-ct";
        div_ct.className = "tooltip-ct";

        this.div.appendChild(div_ct);

        wrapper.appendChild(this.div);
        return true;
    };

    this.setZIndex = function(value) {
        this.currentZIndex = value;
    };

    this.getZIndex = function() {
        return this.currentZIndex;
    };

    this.getDefaultZIndex = function() {
        return this.defaultZIndex;
    };

    this.revertZIndex = function() {
        this.setZIndex(this.getDefaultZIndex());
    };

    this.setHideCallback = function(cb) {
        this.hideCallback = cb;
    };

    this.init();
}


/** Simple calendar control for TV programs
 */
var TVCalendar = function() {
    return new function() {
        var self = this;
        var ready = false;
        var days = {};

        this.init = function() {
            this.browse_calendar();
            this.bind_actions();
            ready = true;
        };


        /** Switch to previous day
         */
        this.prev_day = function() {
            document.location = days.prev_day.href;
        };


        /** Switch to next day
         */
        this.next_day = function() {
            document.location = days.next_day.href;
        };


        /** Browse calendar and init object
         */
        this.browse_calendar = function() {
            var day_containers = $('.tv-gonet-bookmark #ifmenu-calendar-content li a');
            day_containers.each(function(i, el) {
                var el = $(el);

                if (el.hasClass('ifmenu-active')) {
                    typeof day_containers[i - 1] !== 'undefined' && (days.prev_day = day_containers[i - 1]);
                    typeof day_containers[i + 1] !== 'undefined' && (days.next_day = day_containers[i + 1]);

                    days.today = day_containers[i];
                }
            });

            $(".tv-gonet-bookmark #ifmenu-calendar")
                .addClass(typeof days.prev_day === 'undefined' ? 'no-yesterday' : 'has-yesterday')
                .addClass(typeof days.next_day === 'undefined' ? 'no-tomorrow' : 'has-tomorrow');
        };


        /** Bind actions to buttons
         */
        this.bind_actions = function() {
            $(".tv-gonet-bookmark .yesterday").bind('click', function(obj) {
                return function() {
                    obj.prev_day();
                };
            }(this));
            $(".tv-gonet-bookmark .tomorrow ").bind('click', function(obj) {
                return function() {
                    obj.next_day();
                };
            }(this));
        };


        $(function() {
            self.init();
        });
    };
}();

function core_update() {
    this.data_update = new Array();
    this.data_history = {};
    this.dataHistoryReact = {};
};

core_update._tvTooltipTimeout = null;
core_update.register_actions = false;

/** Test if element (row) is defined
 * string	element_ident	Element identifier
 * return	true if element is defined, false otherwise
 */
core_update.prototype.element_defined = function(element_ident) {
    if (typeof this.data_update[element_ident] == 'undefined') {
        return false;
    }
    return true;
};

/** Set element (row)
 * string	element_ident	Element identifier
 */
core_update.prototype.element_set = function(element_ident) {
    if (!this.element_defined(element_ident)) {
        this.data_update[element_ident] = new Array();
        this.data_history[element_ident] = {};
    }
};

core_update.prototype.element_history_get = function(element_ident) {
    return this.data_history[element_ident];
};

core_update.prototype.getDataHistoryReact = function(eventId) {
    return this.dataHistoryReact[eventId];
};

/** Test if property (column) of given element (row) is defined
 * string	element_ident	Element identifier
 * string	property_ident	Property identifier
 * return	true if element's property is defined, false otherwise
 */
core_update.prototype.property_defined = function(element_ident, property_ident) {
    if (!this.element_defined(element_ident) || typeof this.data_update[element_ident][property_ident] == 'undefined') {
        return false;
    }
    return true;
};

/**
 * Tests whether property (column) of given element (row) has been
 * changed in queality.
 *
 * This means whether there's difference from history value.
 *
 * @param {String} element_ident element identifier
 * @param {String} property_ident property identifier
 * @returns {Boolean}
 */
core_update.prototype.did_property_changed = function(element_ident, property_ident) {
    return this.property_defined(element_ident, property_ident) && (this.data_update[element_ident][property_ident] != this.data_history[element_ident][property_ident]);
};

/**
 * Checks whether identified property was increased during last
 * update.
 *
 * @param {String} element_ident
 * @param {String} property_ident
 * @returns {Boolean}
 */
core_update.prototype.did_property_increase = function(element_ident, property_ident) {
    if (!this.property_defined(element_ident, property_ident)) {
        return false;
    }

    var current = this.data_update[element_ident][property_ident],
        history = this.data_history[element_ident][property_ident];

    return (null === history) || (current > history);
};

/**
 * Checks whether identified property was decreased during last
 * update.
 *
 * This usually means that the value of property was correted
 * by provider.
 *
 * @param {String} element_ident
 * @param {String} property_ident
 * @returns {Boolean}
 */
core_update.prototype.did_property_decrease = function(element_ident, property_ident) {
    if (!this.property_defined(element_ident, property_ident)) {
        return false;
    }

    var current = this.data_update[element_ident][property_ident],
        history = this.data_history[element_ident][property_ident];

    return (null !== history) && (current < history);
};

/**
 * Returns history value or null, if history value isn't present
 *
 * @param {String} element_ident element identifier
 * @param {String} property_ident property identifier
 * @returns {Float,null}
 */
core_update.prototype.get_property_history = function(element_ident, property_ident) {
    if (this.property_defined(element_ident, property_ident)) {
        return this.data_history[element_ident][property_ident];
    }
    return null;
};

/** Set property (column) of given element(row)
 * string	element_ident	Element identifier
 * string	property_ident	Property identifier
 * string	property_value	Property value
 * string	old_property_value	History property value, defaults to property_value
 */
core_update.prototype.property_set = function(element_ident, property_ident, property_value, old_property_value) {
    this.element_set(element_ident);
    this.data_update[element_ident][property_ident] = property_value;

    if ('undefined' === typeof old_property_value) {
        old_property_value = property_value;
    }
    this.data_history[element_ident][property_ident] = old_property_value;

};

/**
 * Clear updates after init actions
 */
core_update.prototype.clear_update = function() {
    this.data_update = new Array();
};

/** Update displayed data
 *  Tahle funkce je potreba rozsekat na mensi segmenty, aby byla citelnejsi
 */
core_update.prototype.update = function(action) {
    this.updateTemplate();

    if (action && cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME]) {
        if (cjs.dic.get('list_navigation').isMyGames()) {
            action = 'updateMyGames';
        }

        cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME].update(action);
    }
};

core_update.prototype.register_actions = function() {
    if (core_update.register_actions) {
        return;
    }

    if (typeof(cjs.myLeagues) != 'undefined' && cjs.myLeagues.isEditable()) {
        cjs.myLeagues.delegateTooltips();
    }

    if (typeof cjs.myTeams != 'undefined') {
        cjs.myTeams.delegateTooltips();
    }

    if (typeof cjs.mygamesGroups != 'undefined') {
        cjs.mygamesGroups.registerEvents();
    }

    cjs.Api.loader.get('cyclingJerseys').call(function(module) {
        module.delegateTooltips();
    });

    $("div#last-matches").delegate(".profileTable__row--click", "mouseenter", function() {
        $(this).attr("title", cjs.dic.get('utilTrans').translate('TRANS_CLICK_FOR_MATCH_DETAIL'));
    });

    var openMatch = true;
    $("div#last-matches").delegate("div.soccerTable__division--code, .profileTable__row--click", "click", function(clickEvent) {
        if ($(this).hasClass('soccerTable__division--code')) {
            openMatch = false;
        }
        if (openMatch) {
            var isDiv = false;
            var isPlayerPage = cjs.dic.get('util_page').getPageType() == "player_page";
            if ($(this).parents("div").hasClass('last-matches-table')) {
                isDiv = true;
            }
            var $row = isPlayerPage && isDiv ? $(this) : $(this).parents("tr");
            var id = $row.get(0).id;
            if (!id) {
                id = getIdFromClass($row.attr('class'));
            }

            var sportId = parseInt(id.split('_')[1]);
            if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
                return;
            }

            var detailId = id.replace(/^._/, 'g_');
            cjs.fromGlobalScope.detail_open(detailId, null, false);

            if (cjs.Api.config.get('app', 'google_analytics', 'event_tracking')) {
                e_t.track_click('iframe-click', 'detail');
            }
        }
    });

    core_update.register_actions = true;

};


/** Set timeout to remove match from LIVE category
 * @param string event_id
 * @return void
 */
core_update.prototype.remove_event_live_status = function(event_id) {
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    if (!eventDataHolder.hasEvent(event_id)) {
        return;
    }
    var eventItem = eventDataHolder.getEvent(event_id);

    if (eventItem.getValue('live_timer') !== null) {
        clearTimeout(eventItem.getValue('live_timer'));
        eventItem.removeValue('live_timer');
    }
    var timerId = setTimeout(function(myObj, event_id) {
        return function() {
            var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
            if (!eventDataHolder.hasEvent(event_id)) {
                return;
            }
            var eventItem = eventDataHolder.getEvent(event_id);
            var AI = eventItem.getValue('AI');
            var AB = eventItem.getValue('AB');
            if (AI == 'y' && AB != cjs.Api.constantsManager.getEventStageTypes().LIVE) {
                eventItem.setValue('AI', 'n');
                myObj.property_set(event_id, 'AI', 'n');
                myObj.update();

                if (category == 1) {
                    cjs.Api.loader.get('react').call(function(reactCalls) {
                        reactCalls.reloadTabContent(category);
                    });
                }
            }
            eventItem.removeValue('live_timer');
        };
    }(this, event_id), cjs.cfg.time_keep_match_live);
    eventItem.setValue('live_timer', timerId);
};

core_update.prototype.update_merged_score = function(eventItem, index, new_value) {
    if (eventItem.getValue('sport') == 'aussie-rules') {
        var resultHistory = eventItem.getValue(index) + "";
        if (resultHistory != '0') {
            var old_result = resultHistory.split(".");
            var resultNew = new_value + "";
            var updated_result = resultNew.split(".");

            for (var i in updated_result) {
                if (updated_result[i] == '') {
                    updated_result[i] = old_result[i];
                }
            }

            new_value = updated_result.join('.');
        }
    }

    return new_value;
};

core_update.prototype.updateTemplate = function() {
    var leaguesChanged = {};
    var rowAdded = false;
    var rowDeleted = false;
    var updated = false;
    var matchesPositionUpdate = [];
    var matchesToFadeIn = {};
    var leaguesToUpdateHiddenState, updatedIndexes, fsDataIndexToUpdate;
    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var eventItem;

    leaguesToUpdateHiddenState = this._getNoduelLeaguesUpdate();
    if (Object.keys(leaguesToUpdateHiddenState).length) {
        sort_fs_data();
        updatedIndexes = this.updateEventPositions();

        for (fsDataIndexToUpdate in updatedIndexes) {
            this.property_set(updatedIndexes[fsDataIndexToUpdate], 'visibility-changed', 1);
        }
    }

    for (var fsDataIndex in this.data_update) {
        eventItem = eventDataHolder.getItem(fsDataIndex);
        var rowPositionChanged = this.deleteOrUpdateRow(eventItem);

        if (rowPositionChanged) {
            matchesPositionUpdate.push(fsDataIndex);
            matchesToFadeIn[fsDataIndex] = 1;
            leaguesChanged[eventItem.getLeague().getId()] = true;
        }

        if ((this.property_defined(fsDataIndex, 'AB') || this.did_property_changed(fsDataIndex, 'AI')) && eventItem.getValue('AI') == 'y' && eventItem.getValue('AB') != cjs.Api.constantsManager.getEventStageTypes().LIVE) {
            this.remove_event_live_status(fsDataIndex);
        }

        updated = false;
        if (this.data_history[fsDataIndex]) {
            if (!this.dataHistoryReact[fsDataIndex]) {
                this.dataHistoryReact[fsDataIndex] = {};
            }
            var lastUpdate = {};
            for (var i in this.data_history[fsDataIndex]) {
                this.dataHistoryReact[fsDataIndex][i] = this.data_history[fsDataIndex][i];
                lastUpdate[i] = true;
            }
            this.dataHistoryReact[fsDataIndex]['lastUpdate'] = lastUpdate;
        }

        if (!isNoDuelTournament(eventItem.getLeague().getId())) {
            this.playSound(eventItem);
        }

        cjs.Api.loader.get('highlighter').call(function(highlighter) {
            highlighter.highlight(fsDataIndex);
        });

        this.removeEvent(fsDataIndex);

        cjs.Api.loader.get('soundPlayer').call(function(soundPlayer) {
            soundPlayer.gameUpdateFinished(fsDataIndex);
        });
    }

    if (matchesPositionUpdate.length) {
        sort_fs_data();
        cjs.Api.loader.get('react').call(function(reactCalls) {
            for (var leagueChanged in leaguesChanged) {
                reactCalls.reloadLeague(leagueChanged);
            }
        });
    }

    if (updated) {
        ++debug_update_no;
        counter_update();
    }
};

core_update.prototype.playSound = function(eventItem) {
    var AC = eventItem.getValue('AC');
    var AG = eventItem.getValue('AG');
    var AH = eventItem.getValue('AH');
    var id = eventItem.getId();
    var eventStageList = cjs.Api.constantsManager.getEventStages();

    if (this.property_defined(id, 'AB') && eventItem.isFinished() &&
        (eventItem.isEventStageFinished() ||
            AC == eventStageList.RETIRED ||
            AC == eventStageList.AFTER_EXTRA_TIME ||
            AC == eventStageList.AFTER_PENALTIES)) {
        cjs.Api.loader.get('soundPlayer').call(function(soundPlayer) {
            soundPlayer.play(id, "finished");
        });
    }

    if (eventItem.getValue('sport') == 'tennis') {
        var leagueItem = eventItem.getLeague();
        var tennisScoreParts = ['BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ'];
        // osetreni neozyvani zvuku behem super-tiebreaku
        if (leagueItem.getValue('ZI') == 1) {
            tennisScoreParts.splice(4, 2);
        }
        for (var partIndex in tennisScoreParts) {
            if (this.did_property_changed(id, tennisScoreParts[partIndex])) {
                cjs.Api.loader.get('soundPlayer').call(function(soundPlayer) {
                    soundPlayer.play(id, "tennis-game");
                });
                break;
            }
        }
    }

    if (this.property_defined(id, 'AG') || this.property_defined(id, 'AH')) {
        if (
            (this.did_property_changed(id, 'AG') && AG < this.data_history[id].AG) ||
            (this.did_property_changed(id, 'AH') && AH < this.data_history[id].AH)
        ) {
            cjs.Api.loader.get('soundPlayer').call(function(soundPlayer) {
                soundPlayer.play(id, "correction");
            });
        } else if (
            (this.did_property_changed(id, 'AG') && AG > this.data_history[id].AG) ||
            (this.did_property_changed(id, 'AH') && AH > this.data_history[id].AH)
        ) {
            cjs.Api.loader.get('soundPlayer').call(function(soundPlayer) {
                soundPlayer.play(id, "score-incremented");
            });
        }
    }

};

core_update.prototype.deleteOrUpdateRow = function(eventItem) {
    var position_changed = false;
    var id = eventItem.getId();
    var leagueItem = eventItem.getLeague();

    // support only primary leagues or country pages
    if (leagueItem.getValue('ZD') != 's' || cjs.myLeagues.isTop(leagueItem.getId()) || country != null || category == 5) {
        // start time of match or rank or stats_sort_key has change - recalculate position
        var startTimeChanged = typeof this.data_update[id]['AD'] != 'undefined';
        var orderChanged = typeof this.data_update[id]['WS'] != 'undefined' ||
            typeof this.data_update[id]['NI'] != 'undefined' ||
            typeof this.data_update[id][cjs.Api.statsResultsIndexGenerator.get(cjs.Api.constantsManager.getStatsDataTypes().EVENT_PARTICIPANT_SORT_KEY)] != 'undefined';

        if (startTimeChanged || (isNoDuelTournament(leagueItem.getId()) && orderChanged)) {
            position_changed = true;
        }
    }

    return position_changed;
};

core_update.prototype._getNoduelLeaguesUpdate = function() {
    var leaguesToUpdateHiddenState = {};
    var utilPage = cjs.dic.get('util_page');
    if (utilPage.isTournamentPage() || utilPage.isTournamentPagePassiveTable()) {
        return leaguesToUpdateHiddenState;
    }

    var eventDataHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var leagueItem;

    for (fsDataIndex in this.data_update) {
        if (eventDataHolder.hasEvent(fsDataIndex) === false) {
            continue;
        }

        leagueItem = eventDataHolder.getEvent(fsDataIndex).getLeague();
        if (isNoDuelTournament(leagueItem.getId())) {
            leaguesToUpdateHiddenState[leagueItem.getId()] = 0;
        }
    }

    return leaguesToUpdateHiddenState;
};

core_update.prototype.updateEventPositions = function() {
    var eventDataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    var lastLeagueId = '';
    var position;
    var changedEventIds = [];

    eventDataHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var leagueId = eventItem.getValue('labl_id');
        if (!isNoDuelTournament(leagueId)) {
            return;
        }
        if (leagueId !== lastLeagueId) {
            position = 1;
            lastLeagueId = leagueId;
        }
        if (eventItem.getValue('pos') !== position) {
            changedEventIds.push(id);
            eventItem.setValue('pos', position);
        }
        position++;
    });
    return changedEventIds;
};

core_update.prototype.loadFeedForNoduelMygames = function(labelId, callback) {
    matchDay = cjs.mygames.getMatchDayForTournament(labelId);
    if (matchDay === 0 || matchDay === false) {
        callback();
        return;
    }
    cjs.feedLoader.reset();
    cjs.feedLoader.beforeCallback(function() {
        updater.parse_only = true;
    });
    cjs.feedLoader.afterCallback(function() {
        updater.parse_only = false;
        cjs.dic.get('dataEventHolderProxy').getHandler().resetIds();
        cjs.dic.get('dataLeagueHolderProxy').getHandler().resetIds();
        cjs.mygames.load(true);
        callback();
    });
    var sportId = parseInt(labelId.replace(/^([0-9]+)_[a-zA-Z0-9]{8}$/, '$1'), 10);
    var parentSportId = cjs.dic.get('util_sport').getParentSport(sportId);
    if (parentSportId != null) {
        sportId = parentSportId;
    }

    cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('full', sportId, matchDay));

    if (cjs.Api.config.get('app', 'project_type', 'name') === '_ass') {
        var feedRequest = cjs.feedRequest.getFeedData('odds', sportId, matchDay);
        feedRequest.completeCallback = function(r_status, r_headers, r_content, r_trigger) {
            parse(r_content, false, true);
        };
        cjs.feedLoader.addIntoQueue(feedRequest);
    }
    cjs.feedLoader.downloadAndExecuteFeeds();
};

core_update.prototype.removeEvent = function(id) {
    delete this.data_update[id];
};
window.Criteo = window.Criteo || {};
window.Criteo.events = window.Criteo.events || [];

function callAdblock(zoneId, passbackHTML, addCallback) {
    var containerId = 'crt-' + zoneId;
    if (document.getElementById(containerId) && typeof addCallback == 'function') {
        addCallback(
            ((containerId) => {
                return function() {
                    var crtElement = document.getElementById(containerId);
                    crtElement.style.display = 'block';
                    if (crtElement.parentElement) {
                        var projectId =
                            typeof cjs != 'undefined' ?
                            cjs.Api.config.get('app', 'project', 'id') :
                            (
                                typeof environment != 'undefined' ?
                                environment['project_id'] :
                                0
                            );
                        crtElement.parentElement.style.display = projectId == 8 ? 'flex' : 'block';
                    }

                    Criteo.events.push(function() {
                        Criteo.DisplayAcceptableAdIfAdblocked({
                            'zoneid': zoneId,
                            'containerid': containerId,
                            'overrideZoneFloor': false,
                            'callIfNotAdblocked': function() {
                                if (document.getElementById(containerId).parentElement) {
                                    document.getElementById(containerId).parentElement.style.display = 'none';
                                }
                            }
                        });
                    });
                    window.addEventListener("message", function(e) {
                        if (e.data && e.data == zoneId) {
                            if (passbackHTML) {
                                document.getElementById(containerId).innerHTML = passbackHTML;
                            } else {
                                document.getElementById(containerId).style.display = 'none';
                                if (document.getElementById(containerId).parentElement) {
                                    document.getElementById(containerId).parentElement.style.display = 'none';
                                }
                            }
                        }
                    }, false);
                }
            })(containerId)
        );
    }
}
window.callAdblock = window.callAdblock || callAdblock;

// global variables {{{
// config variables
var cjs = $.extend(true, window.cjs || {}, {
    'classes': {},
    'constants': {
        'sportOddsTypeList': {
            "1": "1x2",
            "2": "12",
            "3": "12",
            "4": "1x2",
            "5": "12",
            "6": "12",
            "7": "1x2",
            "8": "1x2",
            "9": "1x2",
            "10": "1x2",
            "11": "1x2",
            "12": "12",
            "18": "12",
            "19": "1x2",
            "13": "12",
            "14": "12",
            "15": "12",
            "16": "1x2",
            "17": "12",
            "21": "12",
            "22": "1x2",
            "24": "1x2",
            "25": "12",
            "26": "1x2",
            "28": "12",
            "29": "12",
            "30": "1x2",
            "23": "12",
            "31": "12",
            "32": "12",
            "33": "12",
            "34": "12",
            "35": "12",
            "36": "12",
            "37": "12",
            "38": "12",
            "39": "12",
            "40": "12",
            "41": "12",
            "42": "1x2"
        }
    },
    'cfg': {
        'sortByTime': false,
        'time_keep_match_live': 180000,
        'mygames_past_days': 1,
        'mygames_future_days': 7,
        'noDuelSports': [23, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41],
        'parentSports': {
            "32": 31,
            "33": 31,
            "38": 37,
            "39": 37,
            "40": 37,
            "41": 37
        },
        'categorySports': [2, 16, 17, 21, 25, 28, 23, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41],
        'projectId': 13
    },
    eventId: null,
    fromGlobalScope: {},
    'Util': {},
    '_list': {},
    'portable': {},
    'tournamentTemplateCategoryList': {
        "7771": "DAKAR",
        "6578": "SPEEDWAY",
        "6576": "WRC"
    }
});

cjs.Api.constantsManager.init({
    eventStageType: {
        "SCHEDULED": 1,
        "LIVE": 2,
        "FINISHED": 3,
        "TYPE_MAIN": "main",
        "TYPE_ALTER": "alter",
        "TYPE_MERGED": "merged"
    },
    eventStage: {
        "TRANS_NAME_IFRAME_KEY": "trans_iframe",
        "TRANS_NAME_SHORTENED_KEY": "trans_shortened",
        "SCHEDULED": 1,
        "LIVE": 2,
        "FINISHED": 3,
        "POSTPONED": 4,
        "CANCELED": 5,
        "EXTRA_TIME": 6,
        "PENALTIES": 7,
        "RETIRED": 8,
        "WALKOVER": 9,
        "AFTER_EXTRA_TIME": 10,
        "AFTER_PENALTIES": 11,
        "FIRST_HALF": 12,
        "SECOND_HALF": 13,
        "FIRST_PERIOD": 14,
        "SECOND_PERIOD": 15,
        "THIRD_PERIOD": 16,
        "FIRST_SET": 17,
        "SECOND_SET": 18,
        "THIRD_SET": 19,
        "FOURTH_SET": 20,
        "FIFTH_SET": 21,
        "FIRST_QUARTER": 22,
        "SECOND_QUARTER": 23,
        "THIRD_QUARTER": 24,
        "FOURTH_QUARTER": 25,
        "FIRST_INNING": 26,
        "SECOND_INNING": 27,
        "THIRD_INNING": 28,
        "FOURTH_INNING": 29,
        "FIFTH_INNING": 30,
        "SIXTH_INNING": 31,
        "SEVENTH_INNING": 32,
        "EIGHTH_INNING": 33,
        "NINTH_INNING": 34,
        "EXTRA_INNING": 35,
        "INTERRUPTED": 36,
        "ABANDONED": 37,
        "HALF_TIME": 38,
        "TIME_OUT": 39,
        "FIRST_EXTRA_TIME": 40,
        "SECOND_EXTRA_TIME": 41,
        "PENDING": 42,
        "DELAYED": 43,
        "SUSPENDED": 44,
        "TO_FINISH": 45,
        "PAUSE": 46,
        "FIRST_SET_TIEBREAK": 47,
        "SECOND_SET_TIEBREAK": 48,
        "THIRD_SET_TIEBREAK": 49,
        "FOURTH_SET_TIEBREAK": 50,
        "FIFTH_SET_TIEBREAK": 51,
        "GAME": 52,
        "SECOND_PLACE": 53,
        "AWARDED": 54,
        "SIXTH_SET": 55,
        "SEVENTH_SET": 56,
        "AFTER_DAY1": 57,
        "AFTER_DAY2": 58,
        "AFTER_DAY3": 59,
        "AFTER_DAY4": 60,
        "AFTER_DAY5": 61,
        "AFTER_DAY6": 257,
        "AFTER_DAY7": 258,
        "AFTER_DAY8": 259,
        "AFTER_DAY9": 260,
        "AFTER_DAY10": 261,
        "AFTER_ROUND1": 62,
        "AFTER_ROUND2": 63,
        "AFTER_ROUND3": 64,
        "FIRST_ROUND": 65,
        "SECOND_ROUND": 66,
        "THIRD_ROUND": 67,
        "FOURTH_ROUND": 68,
        "AFTER_EXTRA_INNING": 69,
        "PRACTICE": 70,
        "QUALIFICATION": 71,
        "WARM_UP": 72,
        "WARM_UP_2": 234,
        "WARM_UP_1": 235,
        "RACE": 73,
        "MAIN": 74,
        "PLAY_OFFS": 75,
        "PRACTICE_1": 76,
        "PRACTICE_2": 77,
        "PRACTICE_3": 78,
        "PRACTICE_4": 79,
        "PRACTICE_5": 80,
        "PRACTICE_6": 81,
        "PRACTICE_7": 82,
        "PRACTICE_8": 229,
        "PRACTICE_9": 236,
        "QUALIFICATION_FIRST_STAGE": 83,
        "QUALIFICATION_SECOND_STAGE": 84,
        "QUALIFICATION_THIRD_STAGE": 85,
        "QUALIFICATION_1": 86,
        "QUALIFICATION_2": 87,
        "QUALIFICATION_3": 88,
        "QUALIFICATION_4": 243,
        "QUALIFICATION_5": 244,
        "RACE_1": 89,
        "RACE_2": 90,
        "RACE_3": 207,
        "RACE_4": 208,
        "RACE_5": 209,
        "RACE_6": 210,
        "RACE_7": 211,
        "RACE_8": 212,
        "RACE_9": 213,
        "RACE_10": 214,
        "RACE_11": 215,
        "RACE_12": 216,
        "RACE_13": 217,
        "RACE_14": 218,
        "RACE_15": 219,
        "RACE_16": 237,
        "RACE_17": 238,
        "RACE_18": 239,
        "TESTING": 91,
        "SPECIAL_STAGE_1": 92,
        "SPECIAL_STAGE_2": 93,
        "SPECIAL_STAGE_3": 94,
        "SPECIAL_STAGE_4": 95,
        "SPECIAL_STAGE_5": 96,
        "SPECIAL_STAGE_6": 97,
        "SPECIAL_STAGE_7": 99,
        "SPECIAL_STAGE_8": 100,
        "SPECIAL_STAGE_9": 101,
        "SPECIAL_STAGE_10": 102,
        "SPECIAL_STAGE_11": 103,
        "SPECIAL_STAGE_12": 104,
        "SPECIAL_STAGE_13": 105,
        "SPECIAL_STAGE_14": 106,
        "SPECIAL_STAGE_15": 107,
        "SPECIAL_STAGE_16": 108,
        "SPECIAL_STAGE_17": 109,
        "SPECIAL_STAGE_18": 110,
        "SPECIAL_STAGE_19": 111,
        "SPECIAL_STAGE_20": 112,
        "SPECIAL_STAGE_21": 113,
        "SPECIAL_STAGE_22": 114,
        "SPECIAL_STAGE_23": 115,
        "SPECIAL_STAGE_24": 116,
        "SPECIAL_STAGE_25": 117,
        "SPECIAL_STAGE_26": 118,
        "HEAT_1": 119,
        "HEAT_2": 120,
        "HEAT_3": 121,
        "HEAT_4": 122,
        "HEAT_5": 123,
        "HEAT_6": 124,
        "HEAT_7": 125,
        "HEAT_8": 126,
        "HEAT_9": 127,
        "HEAT_10": 128,
        "HEAT_11": 129,
        "HEAT_12": 130,
        "HEAT_13": 131,
        "HEAT_14": 132,
        "HEAT_15": 133,
        "HEAT_16": 134,
        "HEAT_17": 135,
        "HEAT_18": 136,
        "HEAT_19": 137,
        "HEAT_20": 138,
        "HEAT_21": 139,
        "HEAT_22": 140,
        "HEAT_23": 141,
        "HEAT_24": 142,
        "HEAT_25": 143,
        "TEST_DAY_1": 144,
        "TEST_DAY_2": 145,
        "TEST_DAY_3": 146,
        "TEST_DAY_4": 147,
        "TEST_DAY_5": 148,
        "AFTER_STAGE_1": 149,
        "AFTER_STAGE_2": 150,
        "AFTER_STAGE_3": 151,
        "AFTER_STAGE_4": 152,
        "AFTER_STAGE_5": 153,
        "AFTER_STAGE_6": 154,
        "AFTER_STAGE_7": 155,
        "AFTER_STAGE_8": 156,
        "AFTER_STAGE_9": 157,
        "AFTER_STAGE_10": 158,
        "AFTER_STAGE_11": 159,
        "AFTER_STAGE_12": 160,
        "AFTER_STAGE_13": 161,
        "AFTER_STAGE_14": 162,
        "AFTER_STAGE_15": 163,
        "AFTER_STAGE_16": 164,
        "AFTER_STAGE_17": 165,
        "AFTER_STAGE_18": 166,
        "AFTER_STAGE_19": 167,
        "AFTER_STAGE_20": 168,
        "AFTER_STAGE_21": 169,
        "AFTER_STAGE_22": 170,
        "AFTER_STAGE_23": 171,
        "AFTER_STAGE_24": 172,
        "AFTER_STAGE_25": 173,
        "AFTER_STAGE_26": 174,
        "AFTER_STAGE_27": 175,
        "AFTER_STAGE_28": 176,
        "AFTER_STAGE_29": 177,
        "AFTER_STAGE_30": 178,
        "STAGE_1": 179,
        "STAGE_2": 180,
        "STAGE_3": 181,
        "STAGE_4": 182,
        "STAGE_5": 183,
        "STAGE_6": 184,
        "STAGE_7": 185,
        "STAGE_8": 186,
        "STAGE_9": 187,
        "STAGE_10": 188,
        "STAGE_11": 189,
        "STAGE_12": 190,
        "STAGE_13": 191,
        "STAGE_14": 192,
        "STAGE_15": 193,
        "STAGE_16": 194,
        "STAGE_17": 195,
        "STAGE_18": 196,
        "STAGE_19": 197,
        "STAGE_20": 198,
        "STAGE_21": 199,
        "STAGE_22": 200,
        "STAGE_23": 201,
        "STAGE_24": 202,
        "STAGE_25": 203,
        "SEMIFINAL": 251,
        "SEMIFINAL_1": 204,
        "SEMIFINAL_2": 205,
        "SEMIFINAL_3": 253,
        "FINAL_ROUND": 206,
        "FIFTH_ROUND": 220,
        "SIXTH_ROUND": 221,
        "SEVENTH_ROUND": 222,
        "EIGHTH_ROUND": 223,
        "NINTH_ROUND": 224,
        "TENTH_ROUND": 225,
        "ELEVENTH_ROUND": 226,
        "TWELFTH_ROUND": 227,
        "AFTER_RACE_1": 262,
        "AFTER_RACE_2": 263,
        "AFTER_RACE_3": 264,
        "AFTER_RACE_4": 265,
        "CURRENT": 228,
        "QUALIFICATION_1_FIRST_STAGE": 230,
        "QUALIFICATION_2_FIRST_STAGE": 231,
        "QUALIFICATION_1_SECOND_STAGE": 232,
        "QUALIFICATION_2_SECOND_STAGE": 233,
        "FULL_TIME": 242,
        "QUARTER_FINAL_1": 245,
        "QUARTER_FINAL_2": 246,
        "QUARTER_FINAL_3": 247,
        "QUARTER_FINAL_4": 248,
        "QUARTER_FINAL_5": 249,
        "QUARTER_FINAL_6": 250,
        "QUARTER_FINAL": 252,
        "FINAL_B": 254,
        "SPECIAL_STAGE_1_B": 256,
        "AFTER_QUALIFICATION": 255,
        "AFTER_QUALIFICATION_1": 266,
        "AFTER_QUALIFICATION_2": 267,
        "AFTER_QUALIFICATION_3": 268,
        "AFTER_QUALIFICATION_4": 269,
        "AFTER_QUALIFICATION_5": 270,
        "AFTER_QUALIFICATION_FIRST_STAGE": 271,
        "AFTER_QUALIFICATION_SECOND_STAGE": 272,
        "AFTER_QUALIFICATION_THIRD_STAGE": 273,
        "AFTER_QUALIFICATION_1_FIRST_STAGE": 274,
        "AFTER_QUALIFICATION_1_SECOND_STAGE": 275,
        "AFTER_QUALIFICATION_2_FIRST_STAGE": 276,
        "AFTER_QUALIFICATION_2_SECOND_STAGE": 277,
        "AFTER_PRACTICE_1": 278,
        "AFTER_PRACTICE_2": 279,
        "AFTER_PRACTICE_3": 280,
        "AFTER_PRACTICE_4": 281,
        "AFTER_PRACTICE_5": 282,
        "AFTER_PRACTICE_6": 283,
        "AFTER_PRACTICE_7": 284,
        "AFTER_PRACTICE_8": 285,
        "AFTER_PRACTICE_9": 286,
        "AFTER_SPECIAL_STAGE_1": 287,
        "AFTER_SPECIAL_STAGE_2": 288,
        "AFTER_SPECIAL_STAGE_3": 289,
        "AFTER_SPECIAL_STAGE_4": 290,
        "AFTER_SPECIAL_STAGE_5": 291,
        "AFTER_SPECIAL_STAGE_6": 292,
        "AFTER_SPECIAL_STAGE_7": 293,
        "AFTER_SPECIAL_STAGE_8": 294,
        "AFTER_SPECIAL_STAGE_9": 295,
        "AFTER_SPECIAL_STAGE_10": 296,
        "AFTER_SPECIAL_STAGE_11": 297,
        "AFTER_SPECIAL_STAGE_12": 298,
        "AFTER_SPECIAL_STAGE_13": 299,
        "AFTER_SPECIAL_STAGE_14": 300,
        "AFTER_SPECIAL_STAGE_15": 301,
        "AFTER_SPECIAL_STAGE_16": 302,
        "AFTER_SPECIAL_STAGE_17": 303,
        "AFTER_SPECIAL_STAGE_18": 304,
        "AFTER_SPECIAL_STAGE_19": 305,
        "AFTER_SPECIAL_STAGE_20": 306,
        "AFTER_SPECIAL_STAGE_21": 307,
        "AFTER_SPECIAL_STAGE_22": 308,
        "AFTER_SPECIAL_STAGE_23": 309,
        "AFTER_SPECIAL_STAGE_24": 310,
        "AFTER_SPECIAL_STAGE_25": 311,
        "AFTER_SPECIAL_STAGE_26": 312,
        "AFTER_SPECIAL_STAGE_1_B": 313,
        "AFTER_WARM_UP": 314,
        "AFTER_WARM_UP_1": 315,
        "AFTER_WARM_UP_2": 316,
        "AFTER_HEAT_1": 317,
        "AFTER_HEAT_2": 318,
        "AFTER_HEAT_3": 319,
        "AFTER_HEAT_4": 320,
        "AFTER_HEAT_5": 321,
        "EIGHTH_SET": 324,
        "NINTH_SET": 325,
        "TENTH_SET": 326,
        "ELEVENTH_SET": 327,
        "TWELFTH_SET": 328,
        "THIRTEENTH_SET": 329,
        "LUNCH": 333,
        "TEA": 334,
        "MEDICAL_TIMEOUT": 335,
        "FIRST_AND_SECOND_HALF": 9999,
        "OVERALL": 74
    },
    eventIncidentType: {
        "TRANS_GROUP_KEY": "trans_goup",
        "YELLOW_CARD": 1,
        "RED_CARD": 2,
        "GOAL": 3,
        "OWN_GOAL": 4,
        "PENALTY_KICK": 5,
        "SUBSTITUTION_OUT": 6,
        "SUBSTITUTION_IN": 7,
        "ASSISTANCE": 8,
        "SUSPENSION": 9,
        "PENALTY_SCORED": 10,
        "PENALTY_MISSED": 11,
        "BALL_POSSESSION": 12,
        "SHOTS_ON_GOAL": 13,
        "SHOTS_OFF_GOAL": 14,
        "FREE_KICKS": 15,
        "CORNER_KICKS": 16,
        "OFFSIDES": 17,
        "THROW_IN": 18,
        "GOALKEEPER_SAVES": 19,
        "GOAL_KICKS": 20,
        "FOULS": 21,
        "RED_CARDS": 22,
        "YELLOW_CARDS": 23,
        "SERVICE": 24,
        "HITS": 25,
        "ERRORS": 26,
        "TOUCH_DOWN": 27,
        "EXTRA_POINT": 28,
        "TWO_POINT_CONVERSION": 29,
        "FIELD_GOAL": 30,
        "SAFETY": 31,
        "FOUR_P_FIELD_GOAL": 32,
        "ROUGE": 33,
        "GOAL_ATTEMPTS": 34,
        "OUTS": 35,
        "OVERS": 36,
        "ACES": 37,
        "DOUBLE_FAULTS": 38,
        "BREAKS": 39,
        "BREAK_POINTS_WON": 40,
        "MAX_POINTS_IN_ROW": 41,
        "MAX_GAMES_IN_ROWS": 42,
        "SERVICE_POINTS_WON": 43,
        "SERVICE_POINTS_LOST": 44,
        "SERVICE_GAMES_WON": 45,
        "SERVICE_GAMES_LOST": 46,
        "NOT_ON_PITCH": 47,
        "ASSISTANCE_SECOND": 48,
        "SHOOTING": 49,
        "PENALTIES": 50,
        "POWERPLAY_GOALS": 51,
        "SHORTHANDED_GOALS": 52,
        "POWERPLAY": 53,
        "PENALTY_KILLING": 54,
        "FACEOFFS_WON": 55,
        "EMPTY_NET_GOALS": 56,
        "SAVES": 57,
        "PIM": 58,
        "SERVE_1ST_PCT": 59,
        "SERVE_1ST_WON": 60,
        "SERVE_2ND_WON": 61,
        "SERVICE_GAMES_PLAYED": 62,
        "RETURN_POINTS_1ST_WON": 63,
        "RETURN_POINTS_2ND_WON": 64,
        "TOTAL_POINTS_WON": 65,
        "RETURN_GAMES_PLAYED": 66,
        "BREAK_POINTS_SAVED": 67,
        "WINNERS": 68,
        "UNFORCED_ERRORS": 69,
        "SERVE_1ST_TOTAL": 70,
        "SERVE_2ND_TOTAL": 71,
        "RETURN_GAMES_WON": 72,
        "RETURN_GAMES_LOST": 73,
        "RETURN_POINTS_WON": 74,
        "RETURN_POINTS_LOST": 75,
        "TOTAL_GAMES_WON": 76,
        "TOTAL_POINTS": 77,
        "TOTAL_GAMES": 78,
        "SERVICE_POINTS_PLAYED": 79,
        "RETURN_POINTS_PLAYED": 80,
        "WICKETS_1ST_INNING": 81,
        "WICKETS_2ND_INNING": 82,
        "POWERPLAY_GOAL": 83,
        "SHORTHANDED_GOAL": 84,
        "EMPTY_NET_GOAL": 85,
        "GOAL_UNDER_REVIEW": 86,
        "BALLS_BOWLED_SS": 88,
        "OVERS_BOWLED_SS": 89,
        "WICKETS_TAKEN_SS": 90,
        "MAIDENS_BOWLED_SS": 91,
        "RUNS_CONCEDED_SS": 92,
        "RUNS_CONCEDED_PER_OVER_SS": 93,
        "RUNS_SCORED_SS": 94,
        "BALLS_FACED_SS": 95,
        "BOUNDARY_FOURS_SS": 96,
        "BOUNDARY_SIXES_SS": 97,
        "BATTING_STRIKE_RATE_SS": 98,
        "RUN_RATE_SS": 99,
        "MINUTES_BATTED_SS": 100,
        "BALLS_BOWLED": 101,
        "OVERS_BOWLED": 102,
        "BALLS_FACED": 103,
        "WICKETS_TAKEN": 104,
        "MAIDENS_BOWLED": 105,
        "BOUNDARY_FOURS": 106,
        "BOUNDARY_SIXES": 107,
        "WICKETS_LOST": 108,
        "RUNS_SCORED": 109,
        "RUNS_CONCEDED": 110,
        "RUN_RATE": 111,
        "ECONOMY_RATE": 112,
        "MINUTES_BATTED": 113,
        "ASSISTS": 114,
        "BLOCKS": 115,
        "TURNOVERS": 116,
        "PERSONAL_FAULTS": 117,
        "FIELD_GOALS_ATTEMPTED": 118,
        "FIELD_GOALS_MADE": 119,
        "FIELD_GOALS_PERCENTAGE": 120,
        "TWO_POINTS_FIELD_GOALS_ATTEMPTED": 121,
        "TWO_POINTS_FIELD_GOALS_MADE": 122,
        "TWO_POINTS_FIELD_GOALS_PERCENTAGE": 123,
        "THREE_POINTS_FIELD_GOALS_ATTEMPTED": 124,
        "THREE_POINTS_FIELD_GOALS_MADE": 125,
        "THREE_POINTS_FIELD_GOALS_PERCENTAGE": 126,
        "FREE_THROWS_ATTEMPTED": 127,
        "FREE_THROWS_MADE": 128,
        "FREE_THROWS_PERCENTAGE": 129,
        "OFFENSIVE_REBOUNDS": 130,
        "DEFFENSIVE_REBOUNDS": 131,
        "BATSMAN": 134,
        "BOWLER": 137,
        "AT_BAT": 138,
        "TWO_B_DOUBLE": 139,
        "THREE_B_TRIPLE": 140,
        "HOME_RUNS": 141,
        "RUNS_BATTED_IN": 142,
        "LEFT_ON_BASE": 143,
        "BASE_ON_BALLS": 144,
        "STRIKEOUTS": 145,
        "STOLEN_BASES": 146,
        "BATTING_AVERAGE": 147,
        "DOWNS_1ST": 152,
        "TOTAL_YARDS": 153,
        "PASSING_YARDS": 154,
        "RUSHING_YARDS": 155,
        "PENALTIES_YARDS": 156,
        "PUNTS": 157,
        "BLOCKED_SHOOTS": 158,
        "OUT": 159,
        "B": 160,
        "C": 161,
        "LBW": 162,
        "NO_BALLS": 163,
        "WIDE": 164,
        "NO_BALLS_SS": 165,
        "WIDE_SS": 166,
        "TRIES": 167,
        "TOTAL_REBOUNDS": 168,
        "POINTS": 169,
        "TOTAL_REBOUNDS_SS": 170,
        "ASSISTS_SS": 171,
        "BYE_SS": 172,
        "LEG_BYE_SS": 173,
        "BYE": 174,
        "LEG_BYE": 175,
        "EXTRAS": 176,
        "EXTRAS_SS": 177,
        "WICKETS": 178,
        "BEHIND": 179,
        "GOALS_2": 180,
        "RUN_OUT": 181,
        "KICKS": 182,
        "MARKS": 183,
        "HANDBALLS": 184,
        "DISPOSALS": 185,
        "GOALS": 186,
        "BEHINDS": 187,
        "HITOUTS": 188,
        "TACKLES": 189,
        "FREES_FOR": 190,
        "FREES_AGAINST": 191,
        "KICKS_SS": 192,
        "MARKS_SS": 193,
        "HANDBALLS_SS": 194,
        "DISPOSALS_SS": 195,
        "BEHINDS_SS": 196,
        "SUPER_GOALS": 197,
        "SUPER_GOALS_SS": 198,
        "SUPER_GOAL": 199,
        "CLEARENCES": 200,
        "ST": 201,
        "CONVERSION_GOALS": 202,
        "PENALTY_GOALS": 203,
        "PENALTY_GOAL_ATTEMPTS": 204,
        "DROPPED_GOALS": 205,
        "DO_TRY": 206,
        "CONVERSION_GOAL": 207,
        "PENALTY_GOAL": 208,
        "DROP_GOAL": 209,
        "CONVERSION_GOAL_ATTEMPTS": 210,
        "GOALS_PERCENT": 211,
        "TOTAL_RUNS": 212,
        "METRES_RUN_WITH_BALL": 213,
        "RED_CARDS_2": 218,
        "YELLOW_CARDS_2": 219,
        "SHOTS_ON_GOAL_SS": 220,
        "SHOTS_OFF_GOAL_SS": 221,
        "OFFSIDES_SS": 222,
        "FOULS_COMMITTED_SS": 223,
        "FOULS_SUFFERED_SS": 224,
        "GOALKEEPER_SAVES_SS": 225,
        "DROPPED_GOALS_ATTEMPTS": 226,
        "BLOCKED_SHOTS_SS": 227,
        "BLOCK_AGAINST_SS": 228,
        "TURNOVERS_SS": 229,
        "STEALS_SS": 230,
        "PERSONAL_FOULS_SS": 231,
        "OFFENSIVE_REBOUNDS_SS": 232,
        "DEFENSIVE_REBOUNDS_SS": 233,
        "PLUS_MINUS_POINTS": 234,
        "GIVEAWAYS_SS": 235,
        "HITS_SS": 236,
        "PIM_SS": 237,
        "FACEOFFS_PERCENTAGE_SS": 238,
        "TIME_ON_ICE_SS": 239,
        "TAKEAWAYS_SS": 240,
        "MINUTES_PLAYED_SS": 241,
        "FIELD_GOALS_SS": 242,
        "THREE_POINT_FIELD_GOALS_SS": 243,
        "FREE_THROWS_SS": 244,
        "AT_BAT_SS": 245,
        "RUNS_BATTED_IN_SS": 246,
        "BASE_ON_BALLS_SS": 247,
        "STRIKEOUTS_SS": 248,
        "LEFT_ON_BASE_SS": 249,
        "BATTING_AVERAGE_SS": 250,
        "GOALKEEPER_EVEN_STRENGTH_SAVES_SS": 251,
        "GOALKEEPER_POWERPLAY_SAVES_SS": 252,
        "GOALKEEPER_SHORTHANDED_SAVES_SS": 253,
        "GOALKEEPER_SAVES_PERCENTAGE_SS": 255,
        "INNINGS_PITCHED_SS": 256,
        "HITS_ALLOWED_SS": 257,
        "EARNED_RUNS_SS": 258,
        "HOME_RUNS_SS": 259,
        "EARNED_RUN_AVERAGE_SS": 260,
        "DROPPED_GOALS_SS": 261,
        "PENALTY_GOALS_SS": 262,
        "CONVERSION_GOALS_SS": 263,
        "TRIES_SS": 264,
        "PENALTY_TRY": 265,
        "PENALTY_SHOT": 267,
        "GOLF_FINAL_RESULT": 268,
        "GOAL_ATTEMPTS_SS": 270,
        "TOTAL_PASSES_SS": 271,
        "PASS_SUCCESS_PERCENTAGE_SS": 272,
        "POWERPLAY_TIME_ON_ICE_SS": 273,
        "STEALS": 274,
        "TWO_POINT_FIELD_GOALS": 275,
        "MINOR_PENALTY": 276,
        "MAJOR_PENALTY": 277,
        "PERSONAL_FOUL": 278,
        "GAME_MISCONDUCT": 279,
        "CUT_OFF": 280,
        "DISQUALIFIED": 281,
        "DID_NOT_START": 282,
        "DID_NOT_FINISH": 283,
        "MADE_CUT_DID_NOT_FINISH": 284,
        "WITHDRAWN": 285,
        "RETIRED": 291,
        "DID_NOT_CLASSIFIED": 294,
        "BEHIND_RUSHED": 295,
        "SINGLE_POINT": 296,
        "NET_RUN_RATE": 299,
        "NOT_QUALIFIED": 300,
        "OWNER_POINTS": 301,
        "ON_COURSE_TRACK": 302,
        "PASS_SUCCESS": 303,
        "TOTAL_PASSES": 304,
        "COMPLETED_PASSES_SS": 305,
        "CURRENT_LAP": 306,
        "RETIRED_HURT": 310,
        "HIT_WICKET": 311,
        "LEADER": 312,
        "GENERAL_LEADER": 314,
        "POINTS_LEADER": 315,
        "MOUNTAINS_LEADER": 316,
        "YOUTH_LEADER": 317,
        "CURRENT_WORLD_CHAMPION": 318,
        "LAST_IN_RACE": 319,
        "CURRENT_DISTANCE": 323,
        "NON_RUNNER": 326,
        "PULLED_UP": 327,
        "UNSEATED_RIDER": 328,
        "RAN_OUT": 329,
        "FALL": 330,
        "BROUGHT_DOWN": 331,
        "HIT_RAILS": 332,
        "REFUSED_TO_RACE": 333,
        "SEVEN_METER_THROW": 334,
        "SEVEN_METER_SCORED": 335,
        "SEVEN_METER_MISSED": 336,
        "OBSTRUCTING_THE_FIELD": 337,
        "KNOCKOUT": 338,
        "MARTIAL_ARTS_FINISHED": 340,
        "TECHNICAL_KNOCKOUT": 341,
        "COMPLETED_PASSES": 342,
        "DISTANCE_COVERED_METRES": 343,
        "SUBMISSION": 344,
        "NO_CONTEST": 346,
        "FIRST_SERVICE": 347,
        "MISSED_PENALTY": 348,
        "MISSED_CONVERSION": 349,
        "MISSED_DROP_GOAL": 350,
        "MISSED_FIELD_GOAL": 351,
        "MISSED_EXTRA_POINT": 352,
        "TWO_POINT_CONVERSION_FAILED": 353,
        "SLIPPED_UP": 356,
        "STOLEN_BASES_SS": 357,
        "DEFENSIVE_2_POINT_CONVERSION": 361,
        "GOAL_DISALLOWED": 362,
        "RAID_POINTS": 363,
        "TACKLE_POINTS": 364,
        "ALL_OUT_POINTS": 365,
        "EXTRA_POINTS": 366,
        "TOUCH_POINTS_PLAYER": 367,
        "BONUS_POINTS_PLAYER": 368,
        "RAID_POINTS_PLAYER": 369,
        "TACKLE_POINTS_PLAYER": 370,
        "TOTAL_POINTS_PLAYER": 371,
        "ATTACKS": 372,
        "DANGEROUS_ATTACKS": 373,
        "ELECTED_START_ON": 374,
        "SCORES_CHANGED": 382,
        "NET_POINTS_WON": 404,
        "NET_POINTS_PLAYED": 405,
        "VIRTUAL_YELLOW_RED_CARD": -2,
        "RUSHING_TOUCHDOWNS": 393,
        "PASSING_TOUCHDOWNS": 394,
        "TURNOVER_TOUCHDOWNS": 403,
        "FIELD_GOALS_SUCCEEDED": 395,
        "INTERCEPTION_THROWN": 396,
        "FUMBLE_LOST": 397,
        "SACKS_ALLOWED": 398,
        "TOUCHDOWNS": 399,
        "SAFETIES": 400,
        "TWO_POINT_CONVERSIONS": 401,
        "TECHNICAL_FOULS": 402,
        "TECHNICAL_FOULS_SS": 410,
        "FACEOFFS": 411,
        "REVERSE_INCOMPATIBLE_TYPES": [86, 362]
    },
    eventIncidentSubtype: {
        "POWERPLAY_GOAL": 1,
        "SHORTHANDED_GOAL": 2,
        "EMPTY_NET_GOAL": 3,
        "SLASHING": 4,
        "BOARDING": 5,
        "BUTT_ENDING": 6,
        "CROSS_CHECKING": 7,
        "DELAY_OF_GAME": 8,
        "ELBOWING": 9,
        "FIGHTING": 10,
        "HIGH_STICKING": 11,
        "HOLDING": 12,
        "HOLDING_THE_STICK": 13,
        "HOOKING": 14,
        "ILLEGAL_EQUIPMENT": 15,
        "INSTIGATOR_PENALTY": 16,
        "INTERFERENCE": 17,
        "ROUGHING": 18,
        "KNEEING": 19,
        "TOO_MANY_MEN_ON_THE_ICE": 20,
        "TRIPPING": 21,
        "UNSPORTSMANLIKE_CONDUCT": 22,
        "CHARGING": 23,
        "CHECKING_FROM_BEHIND": 24,
        "HEAD_BUTTING": 25,
        "ILLEGAL_CHECK_TO_THE_HEAD": 26,
        "LEAVING_THE_PLAYERS_BENCH": 28,
        "SPEARING": 29,
        "ABUSE_OF_OFFICIALS": 30,
        "SERIOUS_FOUL": 66,
        "FOUL": 67,
        "HANDLING": 68,
        "DIVING": 69,
        "CLIPPING": 70,
        "THROWING_THE_STICK": 71,
        "IMPEDING": 72,
        "PLAYERS_BENCH_PENALTY": 90,
        "MATCH_PENALTY": 95,
        "LEAVING_GOAL_CREASE": 170,
        "SLEW_FOOTING": 196,
        "UNSUCCESSFUL_CHALLENGE": 198,
        "FACEOFF_VIOLATION": 199,
        "LATE_HIT": 200,
        "YELLOW_JERSEY": 76,
        "GREEN_JERSEY": 77,
        "RED_POLKA_DOT_JERSEY": 78,
        "WHITE_JERSEY": 79,
        "PINK_JERSEY": 80,
        "RED_JERSEY": 81,
        "BLUE_POLKA_DOT_JERSEY": 82,
        "BLUE_JERSEY": 83,
        "BLACK_JERSEY": 84,
        "OCHRE_JERSEY": 85,
        "TURQUOISE_JERSEY": 86,
        "GOLD_JERSEY": 87,
        "SILVER_JERSEY": 88,
        "RAINBOW_JERSEY": 89,
        "KNOCKOUT": 91,
        "TECHNICAL_KNOCKOUT": 92,
        "POINTS": 93,
        "SUBMISSION": 148,
        "NO_CONTEST": 156,
        "DISQUALIFIED": 201,
        "PUNCHES": 94,
        "UNANIMOUS": 96,
        "SPLIT": 97,
        "PUNCH": 98,
        "GUILLOTINE_CHOKE": 99,
        "FLYING_KNEE": 100,
        "TRIANGLE_CHOKE": 101,
        "ARM_TRIANGLE_CHOKE": 102,
        "SUPLEX_AND_PUNCHES": 103,
        "REAR_NAKED_CHOKE": 104,
        "MAJORITY": 105,
        "ARMBAR": 106,
        "STRAIGHT_ARMBAR": 107,
        "UPKICK": 108,
        "BROKEN_EYE_SOCKET": 109,
        "CORNER_STOPPAGE": 110,
        "KNEE": 111,
        "KIMURA": 112,
        "ELBOW": 113,
        "KEYLOCK": 114,
        "ILLEGAL_DOWNWARD_ELBOWS": 115,
        "INJURY": 116,
        "BRABO_CHOKE": 117,
        "HEAD_KICK": 118,
        "KICK": 119,
        "CUT": 120,
        "DOCTOR_STOPPAGE": 121,
        "SOCCER_KICKS": 122,
        "NECK_CRANK": 123,
        "KICK_AND_PUNCHES": 124,
        "ELBOWS_AND_PUNCHES": 125,
        "HEAD_KICK_AND_PUNCHES": 126,
        "KICK_TO_THE_BODY": 127,
        "JUDGING_ERROR": 128,
        "ARMLOCK": 129,
        "LEGLOCK": 130,
        "HEEL_HOOK": 131,
        "SHOULDER_CHOKE": 132,
        "CALF_SLICER": 133,
        "OVERTURNED_BY_CSAC": 134,
        "ILLEGAL_KICK": 135,
        "KNEE_TO_THE_BODY": 136,
        "KNEE_AND_PUNCHES": 137,
        "RETIREMENT": 138,
        "NORTH_SOUTH_CHOKE": 139,
        "ACHILLES_LOCK": 140,
        "OMOPLATA": 141,
        "SPINNING_HEEL_KICK": 142,
        "FRONT_KICK_AND_PUNCHES": 143,
        "FRONT_KICK": 144,
        "KNEE_TO_THE_RIBS": 145,
        "KNEEBAR": 146,
        "STOMPS": 147,
        "JAPANESE_NECKTIE": 149,
        "ANACONDA_CHOKE": 167,
        "BODY_KICK_AND_PUNCHES": 168,
        "CHOKE": 169,
        "FLYING_KNEE_AND_PUNCHES": 171,
        "SPLIT_DECISION": 172,
        "MAJORITY_DECISION": 173,
        "UNANIMOUS_DECISION": 174,
        "SPLIT_DECISION_DRAW": 175,
        "MAJORITY_DRAW": 176,
        "TECHNICAL_DECISION": 177,
        "OFFSIDE": 180,
        "VIDEO_REVIEW": 181,
        "COACHS_CHALLENGE": 182,
        "VIDEO_REVIEW_FOUL": 221,
        "VIDEO_REVIEW_OFFSIDE": 222,
        "VIDEO_REVIEW_HANDBALL": 223,
        "PASS": 158,
        "RUN": 159,
        "TURNOVER": 160,
        "RETURN": 178,
        "BOWLING": 183,
        "BATTING": 184,
        "BOWLED": 185,
        "CAUGHT": 186,
        "HANDLED_THE_BALL": 187,
        "HIT_THE_BALL_TWICE": 188,
        "HIT_WICKET": 189,
        "LEG_BEFORE_WICKET": 190,
        "OBSTRUCTING_THE_FIELD": 191,
        "RUN_OUT": 192,
        "STUMPED": 193,
        "TIMED_OUT": 194,
        "RETIRED_OUT": 195,
        "RETIRED_HURT": 197
    },
    sport: {
        "TRANS_MENU_KEY": "trans_menu",
        "TRANS_SEARCH_PARTICIPANT_TITLE": "trans_search_participant_title",
        "DETAIL_TYPE": "detail",
        "DETAIL_TYPE_OLD": "detail-old",
        "DETAIL_TYPE_VERTICAL": "vertical",
        "DETAIL_TYPE_HORIZONTAL": "horizontal",
        "HAS_SPECIAL_INCIDENTS": "has-special-incidents",
        "CATEGORY_SPORT": "category-sport",
        "IRREPRESSIBLE_CATEGORY": "irrepressible-category",
        "COUNTRY_WITHIN_PLAYER_NAME": "country-within-player-name",
        "H2H_HOME_AWAY_SPORT": "is_home_away_sport",
        "SOUNDS": "sounds",
        "SOUND_FINISHED": "finished",
        "SOUND_CORRECTION": "correction",
        "SOUND_SCORE_INCREMENTED": "score-incremented",
        "SOUND_TENNIS_GAME": "tennis-game",
        "NO_DUEL": "no_duel",
        "PARENT": "parent",
        "SORT_PRIORITY": "sort_priority",
        "SHOW_BREADCRUMB_NAVIGATION_LINK": "show-breadcrumb-navigation-link",
        "MIXED": -1,
        "SOCCER": 1,
        "TENNIS": 2,
        "BASKETBALL": 3,
        "HOCKEY": 4,
        "AMERICAN_FOOTBALL": 5,
        "BASEBALL": 6,
        "HANDBALL": 7,
        "RUGBY_UNION": 8,
        "FLOORBALL": 9,
        "BANDY": 10,
        "FUTSAL": 11,
        "VOLLEYBALL": 12,
        "CRICKET": 13,
        "DARTS": 14,
        "SNOOKER": 15,
        "BOXING": 16,
        "BEACH_VOLLEYBALL": 17,
        "AUSSIE_RULES": 18,
        "RUGBY_LEAGUE": 19,
        "BADMINTON": 21,
        "WATER_POLO": 22,
        "GOLF": 23,
        "FIELD_HOCKEY": 24,
        "TABLE_TENNIS": 25,
        "BEACH_SOCCER": 26,
        "MMA": 28,
        "NETBALL": 29,
        "PESAPALLO": 30,
        "MOTORSPORT": 31,
        "MOTORSPORT_AUTO_RACING": 32,
        "MOTORSPORT_MOTO_RACING": 33,
        "CYCLING": 34,
        "HORSE_RACING": 35,
        "ESPORTS": 36,
        "WINTER_SPORTS": 37,
        "WINTER_SPORTS_SKI_JUMPING": 38,
        "WINTER_SPORTS_ALPINE_SKIING": 39,
        "WINTER_SPORTS_CROSS_COUNTRY": 40,
        "WINTER_SPORTS_BIATHLON": 41,
        "KABADDI": 42
    },
    soundSportConfig: {
        "soccer": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "tennis": {
            "finished": "tennisGameSetMatch",
            "correction": "commonCorrection",
            "score-incremented": "tennisGameSet",
            "tennis-game": "tennisGame"
        },
        "basketball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "hockey": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "american-football": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "baseball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "handball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "rugby-union": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "floorball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "bandy": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "futsal": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "volleyball": {
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "aussie-rules": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "rugby-league": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection",
            "score-incremented": "commonCheers"
        },
        "cricket": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "darts": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "snooker": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "boxing": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "beach-volleyball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "badminton": {
            "correction": "commonCorrection"
        },
        "water-polo": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "field-hockey": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "table-tennis": {
            "correction": "commonCorrection"
        },
        "beach-soccer": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "mma": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "netball": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "pesapallo": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "golf": {
            "finished": "commonEndOfGame"
        },
        "motorsport": [],
        "motorsport-auto-racing": [],
        "motorsport-moto-racing": [],
        "cycling": [],
        "horse-racing": [],
        "esports": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        },
        "winter-sports": [],
        "winter-sports-ski-jumping": [],
        "winter-sports-alpine-skiing": [],
        "winter-sports-cross-country": [],
        "winter-sports-biathlon": [],
        "kabaddi": {
            "finished": "commonEndOfGame",
            "correction": "commonCorrection"
        }
    },
    participantTypeList: {
        "SIDE": "side",
        "TEAM": 1,
        "PLAYER": 2,
        "HOME": 3,
        "AWAY": 4,
        "PAIR_1": 5,
        "PAIR_2": 6,
        "PLAYER_1": 7,
        "PLAYER_2": 8,
        "TEAM_1": 9,
        "TEAM_2": 10,
        "GOALKEEPER": 12,
        "DEFENDER": 13,
        "MIDFIELDER": 14,
        "FORWARD": 15,
        "CLUB": 16,
        "NATIONAL": 17,
        "COACH": 27,
        "HORSE": 28,
        "FRONT_OFFICE": 62,
        "DUMMY_PLAYER_2": 100,
        "DUMMY_PLAYER_3": 101,
        "DUMMY_PLAYER_4": 102,
        "HOME_SIDE": "home",
        "AWAY_SIDE": "away"
    },
    winnerSides: {
        "UNKNOWN": -1,
        "DRAW": 0,
        "HOME": 1,
        "AWAY": 2
    },
    statsDataType: {
        "NONE": -1,
        "RANK": 1,
        "POINTS": 2,
        "JUMP_ROUND_1": 3,
        "JUMP_ROUND_2": 4,
        "TIME": 5,
        "GAP": 6,
        "EVENT_PARTICIPANT_SORT_KEY": 7,
        "STOP_REASON": 8,
        "PENALTY_LAP": 9,
        "MISSED_SHOT": 10,
        "STOP_EVENT_STAGE": 11,
        "POINTS_ROUND_1": 12,
        "POINTS_ROUND_2": 13,
        "TIME_ROUND_1": 14,
        "TIME_ROUND_2": 15,
        "STOP_REASON_ROUND_1": 16,
        "STOP_REASON_ROUND_2": 17,
        "ON_TRACK": 18,
        "STOP_REASON_TEXT": 19,
        "LAPS_DISTANCE": 20,
        "JUMP_COUNT": 21,
        "RIDES": 22,
        "WINS": 23,
        "ROUND_1": 24,
        "ROUND_2": 25,
        "ROUND_3": 26,
        "ROUND_4": 27,
        "ROUND_5": 28,
        "ROUND_6": 29,
        "ROUND_7": 30,
        "ROUND_8": 31,
        "ROUND_9": 32,
        "ROUND_10": 33,
        "ROUND_11": 34,
        "ROUND_12": 35,
        "ROUND_13": 36,
        "ROUND_14": 37,
        "ROUND_15": 38,
        "ROUND_16": 39,
        "ROUND_17": 40,
        "ROUND_18": 41,
        "ROUND_19": 42,
        "ROUND_20": 43,
        "SEMIFINAL_1": 44,
        "SEMIFINAL_2": 45,
        "FINAL_ROUND": 46,
        "LAPS": 47,
        "GRID": 48,
        "PITSTOPS": 49,
        "DARTS_180S": 50,
        "DARTS_140_PLUS": 51,
        "DARTS_100_PLUS": 52,
        "DARTS_CHECKOUTS": 53,
        "DARTS_CHECKOUTS_MAX": 54,
        "DARTS_AVERAGES": 55,
        "DARTS_LEG_WON": 56,
        "LEG": 57,
        "ROUND": 58,
        "PREV_POINTS": 59,
        "CURRENT_POINTS": 60,
        "OPPONENT_POINTS": 61,
        "RESULT": 62,
        "LEG_RESULT": 63,
        "IS_PLAYING": 64,
        "CURRENT_LEG_RESULT": 65,
        "RUN_RATE": 66
    },
    cricketTypes: {
        "TEST": 5149866,
        "ODI": 5149867,
        "T20": 5149868
    },
    sportOddsTypeList: {
        "1": "1x2",
        "2": "12",
        "3": "12",
        "4": "1x2",
        "5": "12",
        "6": "12",
        "7": "1x2",
        "8": "1x2",
        "9": "1x2",
        "10": "1x2",
        "11": "1x2",
        "12": "12",
        "18": "12",
        "19": "1x2",
        "13": "12",
        "14": "12",
        "15": "12",
        "16": "1x2",
        "17": "12",
        "21": "12",
        "22": "1x2",
        "24": "1x2",
        "25": "12",
        "26": "1x2",
        "28": "12",
        "29": "12",
        "30": "1x2",
        "23": "12",
        "31": "12",
        "32": "12",
        "33": "12",
        "34": "12",
        "35": "12",
        "36": "12",
        "37": "12",
        "38": "12",
        "39": "12",
        "40": "12",
        "41": "12",
        "42": "1x2"
    },
    pageTypes: {
        "PAGE_TYPE_TEAM": "team_page",
        "PAGE_TYPE_PLAYER": "player_page",
        "PAGE_TYPE_TOURNAMENT": "tournament_page",
        "PAGE_TYPE_SERIES": "series_page",
        "PAGE_TYPE_SPORT": "sport_page",
        "PAGE_TYPE_MIXED": "mixed_page",
        "PAGE_TYPE_COMMON": "common_page",
        "PAGE_TYPE_RANKING": "ranking_page",
        "PAGE_TYPE_CATEGORY": "category_page",
        "TAB_STANDINGS": "standings",
        "TAB_STANDINGS_TABLE": "standings_table",
        "TAB_STANDINGS_DRAW": "standings_draw"
    },
});

cjs.search = {
    'participantsTitles': {
        "1": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "2": "Jugadores",
        "3": "Equipos",
        "4": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "5": "Equipos",
        "6": "Equipos",
        "7": "Equipos",
        "8": "Equipos",
        "9": "Equipos",
        "10": "Equipos",
        "11": "Equipos",
        "12": "Equipos",
        "18": "Equipos",
        "19": "Equipos",
        "13": "Equipos",
        "14": "Jugadores",
        "15": "Jugadores",
        "16": "Jugadores",
        "17": "Jugadores",
        "21": "Jugadores",
        "22": "Equipos",
        "24": "Equipos",
        "25": "Jugadores",
        "26": "Equipos",
        "28": "Jugadores",
        "29": "Equipos",
        "30": "Equipos",
        "23": "Jugadores",
        "31": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "32": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "33": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "34": {
            "teams": "Equipos",
            "players": "Jugadores"
        },
        "35": "Equipos",
        "36": "Equipos",
        "37": "Jugadores",
        "38": "Jugadores",
        "39": "Jugadores",
        "40": "Jugadores",
        "41": "Jugadores",
        "42": "Equipos"
    },
    'sortedSports': {
        "1": 0,
        "2": 1,
        "3": 2,
        "25": 3,
        "4": 4,
        "6": 5,
        "36": 6,
        "14": 7,
        "5": 8,
        "21": 9,
        "7": 10,
        "10": 11,
        "16": 12,
        "35": 13,
        "34": 14,
        "13": 15,
        "37": 16,
        "18": 17,
        "26": 18,
        "11": 19,
        "23": 20,
        "24": 21,
        "42": 22,
        "28": 23,
        "31": 24,
        "29": 25,
        "30": 26,
        "8": 27,
        "19": 28,
        "15": 29,
        "9": 30,
        "12": 31,
        "17": 32,
        "22": 33
    },
    'jsonpCallback': function(data) {
        cjs.dic.get('SearchWindow').onResponse(data);
    }
};

cjs.superTemplateDefinition = {
    "5724": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9011
    },
    "5725": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9012
    },
    "5726": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9021
    },
    "5727": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9022
    },
    "5728": {
        "flag": "3473167",
        "sport_id": "2",
        "category_id": 9030
    },
    "5729": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9001
    },
    "5730": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9010
    },
    "5731": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9003
    },
    "5732": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9013
    },
    "5733": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9002
    },
    "5734": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9006
    },
    "5735": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9004
    },
    "5736": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9007
    },
    "5737": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9008
    },
    "5738": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9009
    },
    "5739": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9014
    },
    "5740": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9015
    },
    "5741": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9992
    },
    "5743": {
        "flag": "3473167",
        "sport_id": "2",
        "category_id": 9994
    },
    "6393": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9993
    },
    "7897": {
        "flag": "3473162",
        "sport_id": "2",
        "category_id": 9016
    },
    "7898": {
        "flag": "3473163",
        "sport_id": "2",
        "category_id": 9018
    },
    "7899": {
        "flag": "3473164",
        "sport_id": "2",
        "category_id": 9017
    },
    "7900": {
        "flag": "3473165",
        "sport_id": "2",
        "category_id": 9019
    },
    "8430": {
        "flag": "3473166",
        "sport_id": "2",
        "category_id": null
    },
    "10883": {
        "flag": "3473167",
        "sport_id": "2",
        "category_id": null
    },
    "5744": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9050
    },
    "5745": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": null
    },
    "5746": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9052
    },
    "5747": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": null
    },
    "5748": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9054
    },
    "5749": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9055
    },
    "5750": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9056
    },
    "5751": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9057
    },
    "5752": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9058
    },
    "5753": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9059
    },
    "5754": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9060
    },
    "5755": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9061
    },
    "5756": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9062
    },
    "5757": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9063
    },
    "5758": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9064
    },
    "5759": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9065
    },
    "5760": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9066
    },
    "5761": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9067
    },
    "5762": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9068
    },
    "5763": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9069
    },
    "5764": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9070
    },
    "5765": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9071
    },
    "5766": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9072
    },
    "5767": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9073
    },
    "5768": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9074
    },
    "5769": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9075
    },
    "5770": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9076
    },
    "5771": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9077
    },
    "5772": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9078
    },
    "5773": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9079
    },
    "5774": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9080
    },
    "5775": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9081
    },
    "5776": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9082
    },
    "5777": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9083
    },
    "5778": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9084
    },
    "5779": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9085
    },
    "5780": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9086
    },
    "5781": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9089
    },
    "5782": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9088
    },
    "5783": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9087
    },
    "5784": {
        "flag": "3473162",
        "sport_id": "16",
        "category_id": 9090
    },
    "5785": {
        "flag": "3473164",
        "sport_id": "16",
        "category_id": 9091
    },
    "5788": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8050
    },
    "5789": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8051
    },
    "5790": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8052
    },
    "5791": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8053
    },
    "5792": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8054
    },
    "5793": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8055
    },
    "5794": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8056
    },
    "5795": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8057
    },
    "5796": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8058
    },
    "5797": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8059
    },
    "5798": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8060
    },
    "5799": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8061
    },
    "5800": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8062
    },
    "5801": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8063
    },
    "5802": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8066
    },
    "5803": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8067
    },
    "5804": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8064
    },
    "5805": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8065
    },
    "7103": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": 8068
    },
    "7104": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": 8069
    },
    "8991": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "8992": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "8993": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "8994": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "8996": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "8997": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "8998": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "8999": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "9000": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "9001": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "9358": {
        "flag": "3473163",
        "sport_id": "17",
        "category_id": null
    },
    "9359": {
        "flag": "3473165",
        "sport_id": "17",
        "category_id": null
    },
    "5806": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8001
    },
    "5807": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8002
    },
    "5808": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8003
    },
    "5809": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8004
    },
    "5810": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8005
    },
    "5811": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8006
    },
    "5812": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8007
    },
    "5813": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8008
    },
    "5814": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8009
    },
    "5815": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8010
    },
    "5816": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 8011
    },
    "5817": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 8012
    },
    "5818": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 8013
    },
    "5819": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 8014
    },
    "5820": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 8015
    },
    "5821": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 9992
    },
    "5823": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 9994
    },
    "5824": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": 9995
    },
    "5826": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": 9997
    },
    "5828": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": 9999
    },
    "5951": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 9993
    },
    "5954": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": 9996
    },
    "5956": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": 9998
    },
    "9960": {
        "flag": "3473162",
        "sport_id": "21",
        "category_id": null
    },
    "9961": {
        "flag": "3473164",
        "sport_id": "21",
        "category_id": null
    },
    "9962": {
        "flag": "3473163",
        "sport_id": "21",
        "category_id": null
    },
    "9963": {
        "flag": "3473165",
        "sport_id": "21",
        "category_id": null
    },
    "9964": {
        "flag": "3473167",
        "sport_id": "21",
        "category_id": null
    },
    "5829": {
        "flag": "3473162",
        "sport_id": "25",
        "category_id": 8100
    },
    "5830": {
        "flag": "3473164",
        "sport_id": "25",
        "category_id": 8101
    },
    "5831": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 8102
    },
    "5832": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 8103
    },
    "5833": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 8104
    },
    "5834": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 9992
    },
    "5836": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 9994
    },
    "5837": {
        "flag": "3473162",
        "sport_id": "25",
        "category_id": 9995
    },
    "5839": {
        "flag": "3473163",
        "sport_id": "25",
        "category_id": 9997
    },
    "5841": {
        "flag": "3473167",
        "sport_id": "25",
        "category_id": 9999
    },
    "6376": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 9993
    },
    "6379": {
        "flag": "3473164",
        "sport_id": "25",
        "category_id": 9996
    },
    "6381": {
        "flag": "3473165",
        "sport_id": "25",
        "category_id": 9998
    },
    "5842": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9054
    },
    "5843": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9058
    },
    "5844": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9062
    },
    "5845": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9066
    },
    "5846": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9072
    },
    "5847": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9078
    },
    "5848": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9090
    },
    "5849": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9084
    },
    "5850": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": 9086
    },
    "8011": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": 9059
    },
    "8012": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": 9092
    },
    "8108": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "8110": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "8122": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "9525": {
        "flag": "3473162",
        "sport_id": "28",
        "category_id": null
    },
    "9526": {
        "flag": "3473164",
        "sport_id": "28",
        "category_id": null
    },
    "5852": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8150
    },
    "5853": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8151
    },
    "5854": {
        "flag": "3473164",
        "sport_id": "23",
        "category_id": 8161
    },
    "5855": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8153
    },
    "5856": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8154
    },
    "5857": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8156
    },
    "5858": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8157
    },
    "5859": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8158
    },
    "6157": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": null
    },
    "7059": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": null
    },
    "7326": {
        "flag": "3473162",
        "sport_id": "23",
        "category_id": 8159
    },
    "7693": {
        "flag": "3473164",
        "sport_id": "23",
        "category_id": 8152
    },
    "8424": {
        "flag": "3473166",
        "sport_id": "23",
        "category_id": null
    },
    "12497": {
        "flag": "3473164",
        "sport_id": "23",
        "category_id": null
    },
    "5860": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7100
    },
    "6575": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7102
    },
    "6576": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7204
    },
    "6577": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7101
    },
    "6653": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7103
    },
    "6654": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7104
    },
    "7771": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7207
    },
    "7977": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7209
    },
    "7978": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7210
    },
    "7979": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7211
    },
    "7980": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7212
    },
    "7981": {
        "flag": null,
        "sport_id": "32",
        "category_id": 7213
    },
    "8390": {
        "flag": null,
        "sport_id": "32",
        "category_id": null
    },
    "9047": {
        "flag": null,
        "sport_id": "32",
        "category_id": null
    },
    "12207": {
        "flag": null,
        "sport_id": "32",
        "category_id": null
    },
    "12917": {
        "flag": null,
        "sport_id": "32",
        "category_id": null
    },
    "5861": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7200
    },
    "6495": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7201
    },
    "6496": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7202
    },
    "6578": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7203
    },
    "7862": {
        "flag": null,
        "sport_id": "33",
        "category_id": 7208
    },
    "9574": {
        "flag": null,
        "sport_id": "33",
        "category_id": null
    },
    "10998": {
        "flag": null,
        "sport_id": "33",
        "category_id": null
    },
    "7205": {
        "flag": null,
        "sport_id": "34",
        "category_id": 7300
    },
    "7206": {
        "flag": null,
        "sport_id": "34",
        "category_id": 7301
    },
    "7310": {
        "flag": 7400,
        "sport_id": "36",
        "category_id": 7400
    },
    "7311": {
        "flag": 7401,
        "sport_id": "36",
        "category_id": 7401
    },
    "7360": {
        "flag": 7402,
        "sport_id": "36",
        "category_id": 7402
    },
    "7361": {
        "flag": 7403,
        "sport_id": "36",
        "category_id": 7403
    },
    "7362": {
        "flag": 7404,
        "sport_id": "36",
        "category_id": 7404
    },
    "9027": {
        "flag": "7613333",
        "sport_id": "36",
        "category_id": null
    },
    "9028": {
        "flag": "7613334",
        "sport_id": "36",
        "category_id": null
    },
    "12390": {
        "flag": "15836321",
        "sport_id": "36",
        "category_id": null
    },
    "12438": {
        "flag": "15836322",
        "sport_id": "36",
        "category_id": null
    },
    "12534": {
        "flag": "15836323",
        "sport_id": "36",
        "category_id": null
    },
    "12535": {
        "flag": "15836324",
        "sport_id": "36",
        "category_id": null
    },
    "12608": {
        "flag": "15932604",
        "sport_id": "36",
        "category_id": null
    },
    "12649": {
        "flag": "16296163",
        "sport_id": "36",
        "category_id": null
    },
    "8401": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8402": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8403": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8404": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8405": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8406": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8407": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8408": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8409": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8410": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8645": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "8653": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "8962": {
        "flag": "3473162",
        "sport_id": "39",
        "category_id": null
    },
    "9060": {
        "flag": "3473164",
        "sport_id": "39",
        "category_id": null
    },
    "9083": {
        "flag": "3473167",
        "sport_id": "39",
        "category_id": null
    },
    "8416": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8417": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8418": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8419": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8420": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8491": {
        "flag": "3473163",
        "sport_id": "38",
        "category_id": null
    },
    "8544": {
        "flag": "3473163",
        "sport_id": "38",
        "category_id": null
    },
    "8646": {
        "flag": "3473162",
        "sport_id": "38",
        "category_id": null
    },
    "8648": {
        "flag": "3473164",
        "sport_id": "38",
        "category_id": null
    },
    "8446": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8447": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8448": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8449": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8450": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8451": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8452": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8453": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8454": {
        "flag": "3473163",
        "sport_id": "41",
        "category_id": null
    },
    "8455": {
        "flag": "3473165",
        "sport_id": "41",
        "category_id": null
    },
    "8456": {
        "flag": "3473167",
        "sport_id": "41",
        "category_id": null
    },
    "8457": {
        "flag": "3473166",
        "sport_id": "41",
        "category_id": null
    },
    "8641": {
        "flag": "3473162",
        "sport_id": "41",
        "category_id": null
    },
    "8642": {
        "flag": "3473164",
        "sport_id": "41",
        "category_id": null
    },
    "8460": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8461": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8462": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8463": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8464": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8465": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8466": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8467": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8468": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8469": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8472": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8473": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8474": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8475": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8527": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8528": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8529": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8530": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8531": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8532": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8535": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8536": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "8537": {
        "flag": "3473163",
        "sport_id": "40",
        "category_id": null
    },
    "8538": {
        "flag": "3473165",
        "sport_id": "40",
        "category_id": null
    },
    "8643": {
        "flag": "3473162",
        "sport_id": "40",
        "category_id": null
    },
    "8652": {
        "flag": "3473164",
        "sport_id": "40",
        "category_id": null
    },
    "11627": {
        "flag": "3473167",
        "sport_id": "40",
        "category_id": null
    },
    "8827": {
        "flag": "3473162",
        "sport_id": "15",
        "category_id": null
    },
    "8841": {
        "flag": null,
        "sport_id": "14",
        "category_id": null
    }
};
document.lsadvert_display = document.lsadvert_display || function() {};
cjs.full_loaded = false;
cjs.repair_loaded = false;
cjs.parseCustomHeadersCallbacks = [];
cjs.hourFormat = 'H:i';
cjs.dateTimeFormat = 'd.m. H:i';
cjs.dateTimeFormatTwoLines = 'd.m.<br/>H:i';
cjs.fullDateTimeFormat = 'd.m.Y H:i';
cjs.fullDateFormat = 'd.m.Y';
cjs.fullDateShortFormat = 'd.m.Y';
cjs.fullDateUltraShortFormat = 'd.m.y';
cjs.dateFormat = 'd.m.';
cjs.geoIP = null;
cjs.geoIPCityName = null;
cjs.geoIPSubdivisionName0 = null;
cjs.geoIPSubdivisionCode0 = null;
cjs.geoIPIsoSubdivisionCode0 = null;
cjs.geoIPSubdivisionName1 = null;
cjs.prepareGeoIP = function() {
    if (this.geoIP) {
        return;
    }
    cjs.Api.loader.get("geoIpResolver").call();
};
cjs.clientIP = null;
cjs.getOriginalLabelId = function(labelId) {
    return labelId.replace(/(.*)-.*/, '$1');
};
var feed_sign = 'SW9D1eZo';
// data containers
var pom_array = new Array();
var fs_counter;
var fs_update;
var fs_fade;
var fsEventsUpdatedStartTime = {};
reset_env();
var fs_detail = {};
var ajax = new Array();
// iframe variables
var iframe_stop_generating = false;
var iframe_part_generator = null;
var iframe_height = 0;
// runtime variables
var prefered_sport_id;
var matches;
var iframe_external = false;
var mid_s;
var url_check;
var referrer_url;
var verify_status;
var css_ident;
var config_hash_id = 0;
var lsin_status = false;
var sport = null;
var sport_id = null;
var SPORTS_WITH_LIVECENTRE = [1, 2, 4, 6, 5, 3, 13, 18, 19, 8, 42];
var country = null;
var tournament = null;
var participant = null;
var series = null;
cjs.pageTab = null;
var updater = null;
var category_default = 0;
var category = category_default;
var navigation_category = category;
var sub_category = null;
var fullfeed_trigger = null;
var regenerate = false;
var disable_update = false;
var page_is_initialized = false;
var g2utime = 0; // game 2nd half utime - soccer only (GMT)
var sudate = 0; // selected day server utime (GMT)
var tudate;
var refresh_utime = 0;
var ums_timeoutId = null; // update mode status timeout Id
var default_tz = default_tz || null;
var interval_live = null;
var bookmaker_link = '/bookmaker/';
var odds_betslip = false;
var has_more_formats = false;
var ODDS_FORMAT_LIST = new Array();
ODDS_FORMAT_LIST['eu'] = new Array();
ODDS_FORMAT_LIST['eu']['name_iframe'] = '';
ODDS_FORMAT_LIST['eu']['name_title'] = '';
var goal_duration_time = 60;
var penalty_duration_time = 60;
var counter_duration_time = 60;
var scores_changed_duration_time = 60;
var project_type_id = 1;
var project_type_name = '_fs';
var base_url = location.host;
var locationOrigin = location.origin;
if (typeof locationOrigin === "undefined") {
    locationOrigin = location.protocol + "//" + location.host;
}
var base_url_protocol = locationOrigin;
var base_feed_x_url = base_url_protocol + '/x/feed/';
var feedProxyUrl = base_url_protocol + "\/x\/feed\/proxy-local";
var u_304 = 'd41d8cd98f00b204e9800998ecf8427e';
var default_odds_format = 'eu';
var pdiff = 0;
var service_status = 0;
var scrollbar_width = 0;
var ajax_updater = '';
var mpr = 0;
var custom_enable = false;
var stats_enable = false;
var swap = {};
var parsed_sports = {};
var sport_sort = {};
var odds_enable = false;
var ff_data = '';
var sys_interval_checker = null;
var counter_update_interval = null;
var calendar = {
    "buttons": {
        "prev_day": true,
        "next_day": true
    },
    "range": 7
};
// separators
var JS_ROW_END = '~';
var JS_CELL_END = 'Â¬';
var JS_INDEX = 'Ã·';
var refresh_in_progress = null;
var refresh_serial = 0;
// debug variables
var debug_sync_no = 0;
var debug_update_no = 0;
var debug_generate_no = 0;
// tooltip ident
var tt = null;
// tooltip ball type ident
var ttball = null;

// push engine
var mpe_delivery = 'a';
cjs._translates = {
    "TRANS_DC_INCIDENT_SUBTYPE_31": "ERS",
    "TRANS_DC_INCIDENT_SUBTYPE_32": "Sistema de combustible",
    "TRANS_DC_INCIDENT_SUBTYPE_33": "Accidente",
    "TRANS_DC_INCIDENT_SUBTYPE_34": "Motor",
    "TRANS_DC_INCIDENT_SUBTYPE_35": "PresiÃ³n del aceite",
    "TRANS_DC_INCIDENT_SUBTYPE_36": "Power unit",
    "TRANS_DC_INCIDENT_SUBTYPE_37": "Caja de cambios",
    "TRANS_DC_INCIDENT_SUBTYPE_38": "Abandono",
    "TRANS_DC_INCIDENT_SUBTYPE_39": "Turbo",
    "TRANS_DC_INCIDENT_SUBTYPE_40": "Embrague",
    "TRANS_DC_INCIDENT_SUBTYPE_41": "Fuga de aceite",
    "TRANS_DC_INCIDENT_SUBTYPE_42": "Frenos",
    "TRANS_DC_INCIDENT_SUBTYPE_43": "Escape",
    "TRANS_DC_INCIDENT_SUBTYPE_44": "Bomba de combustible",
    "TRANS_DC_INCIDENT_SUBTYPE_45": "AlerÃ³n trasero",
    "TRANS_DC_INCIDENT_SUBTYPE_46": "SuspensiÃ³n",
    "TRANS_DC_INCIDENT_SUBTYPE_47": "Grupo motopropulsor",
    "TRANS_DC_INCIDENT_SUBTYPE_48": "Encendido",
    "TRANS_DC_INCIDENT_SUBTYPE_49": "RefrigeraciÃ³n",
    "TRANS_DC_INCIDENT_SUBTYPE_50": "Problema elÃ©ctrico",
    "TRANS_DC_INCIDENT_SUBTYPE_51": "Rueda",
    "TRANS_DC_INCIDENT_SUBTYPE_52": "KERS",
    "TRANS_DC_INCIDENT_SUBTYPE_53": "AlerÃ³n delantero",
    "TRANS_DC_INCIDENT_SUBTYPE_54": "NeumÃ¡tico",
    "TRANS_DC_INCIDENT_SUBTYPE_55": "Problema hidrÃ¡ulico",
    "TRANS_DC_INCIDENT_SUBTYPE_56": "Problema mecÃ¡nico",
    "TRANS_DC_INCIDENT_SUBTYPE_57": "Alternador",
    "TRANS_DC_INCIDENT_SUBTYPE_58": "DirecciÃ³n",
    "TRANS_DC_INCIDENT_SUBTYPE_59": "Diferencial",
    "TRANS_DC_INCIDENT_SUBTYPE_60": "Acelerador",
    "TRANS_DC_INCIDENT_SUBTYPE_61": "Vueltas insuficientes",
    "TRANS_DC_INCIDENT_SUBTYPE_62": "Toma de aire",
    "TRANS_DC_INCIDENT_SUBTYPE_63": "Problemas fÃ­sicos",
    "TRANS_DC_INCIDENT_SUBTYPE_64": "Problema tÃ©cnico",
    "TRANS_DC_INCIDENT_SUBTYPE_65": "DecisiÃ³n del equipo",
    "TRANS_DC_INCIDENT_SUBTYPE_158": "Pass",
    "TRANS_DC_INCIDENT_SUBTYPE_159": "Run",
    "TRANS_DC_INCIDENT_SUBTYPE_160": "Turnover",
    "TRANS_DC_CUT_OFF": "No pasÃ³ el corte",
    "TRANS_DC_SHORT_CUT_OFF": "CUT",
    "TRANS_DC_DISQUALIFIED": "Descalificado",
    "TRANS_DC_SHORT_DISQUALIFIED": "DSQ",
    "TRANS_DC_DID_NOT_START": "No comenzÃ³",
    "TRANS_DC_SHORT_DID_NOT_START": "DNS",
    "TRANS_DC_DID_NOT_FINISH": "No terminÃ³",
    "TRANS_DC_SHORT_DID_NOT_FINISH": "DNF",
    "TRANS_DC_MADE_CUT_DID_NOT_FINISH": "PasÃ³ el corte, no finalizÃ³.",
    "TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH": "MDF",
    "TRANS_DC_WITHDRAWN": "Retiro",
    "TRANS_DC_SHORT_WITHDRAWN": "WD",
    "TRANS_DC_RETIRED": "Retiro",
    "TRANS_DC_SHORT_RETIRED": "RET",
    "TRANS_DC_DID_NOT_CLASSIFIED": "No clasificado",
    "TRANS_DC_SHORT_DID_NOT_CLASSIFIED": "NC",
    "TRANS_DC_NOT_QUALIFIED": "No clasificado",
    "TRANS_DC_SHORT_NOT_QUALIFIED": "DNQ",
    "TRANS_DC_OWNER_POINTS": "Owner Points",
    "TRANS_DC_SHORT_OWNER_POINTS": "OP",
    "TRANS_DC_NON_RUNNER": "No participante",
    "TRANS_DC_SHORT_NON_RUNNER": "NP",
    "TRANS_DC_PULLED_UP": "Pulled up",
    "TRANS_DC_SHORT_PULLED_UP": "PU",
    "TRANS_DC_UNSEATED_RIDER": "YÃ³quey desmontado",
    "TRANS_DC_SHORT_UNSEATED_RIDER": "UR",
    "TRANS_DC_RAN_OUT": "Se saliÃ³ de la pista",
    "TRANS_DC_SHORT_RAN_OUT": "RO",
    "TRANS_DC_FALL": "CaÃ­da",
    "TRANS_DC_SHORT_FALL": "F",
    "TRANS_DC_BROUGHT_DOWN": "Derribado",
    "TRANS_DC_SHORT_BROUGHT_DOWN": "BD",
    "TRANS_DC_HIT_RAILS": "GolpeÃ³ los palos",
    "TRANS_DC_SHORT_HIT_RAILS": "HR",
    "TRANS_DC_REFUSED_TO_RACE": "Se negÃ³ a correr",
    "TRANS_DC_SHORT_REFUSED_TO_RACE": "RTR",
    "TRANS_DC_SLIPPED_UP": "Slipped Up",
    "TRANS_DC_SHORT_SLIPPED_UP": "SU",
    "TRANS_ADVERTISEMENT": "anuncios",
    "TRANS_AMERICAN_FOOTBALL_TEAM_ON_BALL": "PosesiÃ³n del balÃ³n",
    "TRANS_AUSSIE_RULES_BEHINDS": "Behinds",
    "TRANS_AUSSIE_RULES_GOALS": "Goals",
    "TRANS_AUSSIE_RULES_POINTS": "Points",
    "TRANS_TENNIS_LOST_SERVE": "PÃRDIDA DE SERVICIO",
    "TRANS_TENNIS_SHORT_BREAK_POINT": "PB",
    "TRANS_TENNIS_SHORT_MATCH_POINT": "PP",
    "TRANS_TENNIS_BREAK_POINT": "Punto de break",
    "TRANS_TENNIS_MATCH_POINT": "Punto de partido",
    "TRANS_TENNIS_SET_POINT": "Punto de set",
    "TRANS_TENNIS_SHORT_SET_POINT": "PS",
    "TRANS_AUSSIE_RULES_SUPER_GOALS": "Super Goals",
    "TRANS_BADMINTON_SERVING_PLAYER": "Jugador al servicio",
    "TRANS_VOLLEYBALL_SERVING_TEAM": "Equipo al servicio",
    "TRANS_BEACH_VOLLEYBALL_SERVING_TEAM": "Equipo al servicio",
    "TRANS_BASEBALL_BATTING_TEAM": "Equipo bateador",
    "TRANS_BASEBALL_ERRORS": "Errores",
    "TRANS_BASEBALL_HITS": "Hits",
    "TRANS_BASEBALL_MATCH_STATUS_": "TRANS_BASEBALL_MATCH_STATUS_",
    "TRANS_LOST_SHORT": "P",
    "TRANS_BASEBALL_PITCHERS": "Pitchers",
    "TRANS_WIN_SHORT": "G",
    "TRANS_DRAW_SHORT": "E",
    "TRANS_BASEBALL_PITCHING_TEAM": "Equipo lanzador",
    "TRANS_BASEBALL_RUNS": "Runs",
    "TRANS_BASEBALL_SHORT_ERRORS": "E",
    "TRANS_BASEBALL_SHORT_HITS": "H",
    "TRANS_BASEBALL_SHORT_RUNS": "R",
    "TRANS_PESAPALLO_SHORT_1HF": "T1",
    "TRANS_PESAPALLO_SHORT_2HF": "T2",
    "TRANS_PESAPALLO_BATTING_TEAM": "Equipo bateador",
    "TRANS_PESAPALLO_PITCHING_TEAM": "Equipo lanzador",
    "TRANS_PESAPALLO_MATCH_STATUS_EINN": "Entrada Extra",
    "TRANS_PESAPALLO_SHORT_EINN": "EE",
    "TRANS_PESAPALLO_MATCH_STATUS_PEN": "Penaltis",
    "TRANS_PESAPALLO_SHORT_PEN": "P",
    "TRANS_BLOCK_LABEL_PARTNERS": "Colaboradores",
    "TRANS_BOOKMARK_ALL": "Todos",
    "TRANS_BOOKMARK_CUSTOMIZE": "Mis Partidos",
    "TRANS_BOOKMARK_FIN": "Finalizados",
    "TRANS_BOOKMARK_LATEST_SCORES": "Ãltimos Resultados",
    "TRANS_BOOKMARK_LIVE": "En Directo",
    "TRANS_BOOKMARK_ODDS": "Cuotas",
    "TRANS_BOOKMARK_SCHED": "PrÃ³ximos",
    "TRANS_BOOKMARK_SHORT_ALL": "Todos",
    "TRANS_BOOKMARK_SHORT_CUSTOMIZE": "Mis",
    "TRANS_BOOKMARK_SHORT_LIVE": "EN DIRECTO",
    "TRANS_BOXING_DRAW": "Empatado",
    "TRANS_BOXING_RESULT_KO": "KO",
    "TRANS_BOXING_RESULT_POINTS": "Por puntos",
    "TRANS_BOXING_RESULT_TKO": "KO tÃ©cnico",
    "TRANS_BOXING_RESULT_SUBMISSION": "SumisiÃ³n",
    "TRANS_BOXING_RESULT_NO_CONTEST": "No Contest",
    "TRANS_BOXING_RESULT_DISQUALIFIED": "DescalificaciÃ³n",
    "TRANS_BOXING_RESULT_SHORT_KO": "KO",
    "TRANS_BOXING_RESULT_SHORT_POINTS": "PTS",
    "TRANS_BOXING_RESULT_SHORT_TKO": "TKO",
    "TRANS_BOXING_RESULT_SHORT_SUBMISSION": "SUBM",
    "TRANS_BOXING_RESULT_SHORT_NO_CONTEST": "NC",
    "TRANS_BOXING_RESULT_SHORT_DISQUALIFIED": "DSC",
    "TRANS_BOXING_RESULT_PUNCHES": "PuÃ±etazos",
    "TRANS_BOXING_RESULT_UNANIMOUS": "UnÃ¡nime",
    "TRANS_BOXING_RESULT_SPLIT": "Dividida",
    "TRANS_BOXING_RESULT_PUNCH": "PuÃ±etazo",
    "TRANS_BOXING_RESULT_GUILLOTINE_CHOKE": "EstrangulaciÃ³n de guillotina",
    "TRANS_BOXING_RESULT_FLYING_KNEE": "Rodillazo volador",
    "TRANS_BOXING_RESULT_TRIANGLE_CHOKE": "EstrangulaciÃ³n de triÃ¡ngulo",
    "TRANS_BOXING_RESULT_ARM_TRIANGLE_CHOKE": "TriÃ¡ngulo de brazo",
    "TRANS_BOXING_RESULT_SUPLEX_AND_PUNCHES": "SÃºplex y puÃ±etazos",
    "TRANS_BOXING_RESULT_REAR_NAKED_CHOKE": "MataleÃ³n",
    "TRANS_BOXING_RESULT_MAJORITY": "Por mayorÃ­a",
    "TRANS_BOXING_RESULT_ARMBAR": "Armbar",
    "TRANS_BOXING_RESULT_STRAIGHT_ARMBAR": "Armbar recto",
    "TRANS_BOXING_RESULT_UPKICK": "Upkick",
    "TRANS_BOXING_RESULT_BROKEN_EYE_SOCKET": "Fractura de Ã³rbita",
    "TRANS_BOXING_RESULT_CORNER_STOPPAGE": "Corner stoppage",
    "TRANS_BOXING_RESULT_KNEE": "Rodillazo",
    "TRANS_BOXING_RESULT_KIMURA": "Kimura",
    "TRANS_BOXING_RESULT_ELBOW": "Codazo",
    "TRANS_BOXING_RESULT_KEYLOCK": "Keylock",
    "TRANS_BOXING_RESULT_ILLEGAL_DOWNWARD_ELBOWS": "Codazos verticales ilegales",
    "TRANS_BOXING_RESULT_INJURY": "LesiÃ³n",
    "TRANS_BOXING_RESULT_BRABO_CHOKE": "EstrangulaciÃ³n Brabo",
    "TRANS_BOXING_RESULT_HEAD_KICK": "Patada a la cabeza",
    "TRANS_BOXING_RESULT_KICK": "Patada",
    "TRANS_BOXING_RESULT_CUT": "Corte",
    "TRANS_BOXING_RESULT_DOCTOR_STOPPAGE": "Doctor stoppage",
    "TRANS_BOXING_RESULT_SOCCER_KICKS": "Patadas de fÃºtbol",
    "TRANS_BOXING_RESULT_NECK_CRANK": "Neck crank",
    "TRANS_BOXING_RESULT_KICK_AND_PUNCHES": "Patada y puÃ±etazos",
    "TRANS_BOXING_RESULT_ELBOWS_AND_PUNCHES": "Codazos y puÃ±etazos",
    "TRANS_BOXING_RESULT_HEAD_KICK_AND_PUNCHES": "Patada a la cabeza y puÃ±etazos",
    "TRANS_BOXING_RESULT_KICK_TO_THE_BODY": "Patada al cuerpo",
    "TRANS_BOXING_RESULT_JUDGING_ERROR": "Error de los jueces",
    "TRANS_BOXING_RESULT_ARMLOCK": "Armlock",
    "TRANS_BOXING_RESULT_LEGLOCK": "Leglock",
    "TRANS_BOXING_RESULT_HEEL_HOOK": "Gancho de talÃ³n",
    "TRANS_BOXING_RESULT_SHOULDER_CHOKE": "EstrangulaciÃ³n de hombro",
    "TRANS_BOXING_RESULT_CALF_SLICER": "Calf slicer",
    "TRANS_BOXING_RESULT_OVERTURNED_BY_CSAC": "Anulado por la CSAC",
    "TRANS_BOXING_RESULT_ILLEGAL_KICK": "Patada ilegal",
    "TRANS_BOXING_RESULT_KNEE_TO_THE_BODY": "Rodillazo al cuerpo",
    "TRANS_BOXING_RESULT_KNEE_AND_PUNCHES": "Rodillazo y puÃ±etazos",
    "TRANS_BOXING_RESULT_RETIREMENT": "Retirada",
    "TRANS_BOXING_RESULT_NORTH_SOUTH_CHOKE": "EstrangulaciÃ³n de norte-sur",
    "TRANS_BOXING_RESULT_ACHILLES_LOCK": "Achilles lock",
    "TRANS_BOXING_RESULT_OMOPLATA": "Llave de omÃ³plato",
    "TRANS_BOXING_RESULT_SPINNING_HEEL_KICK": "Spinning heel kick",
    "TRANS_BOXING_RESULT_FRONT_KICK_AND_PUNCHES": "Patada frontal y puÃ±etazos",
    "TRANS_BOXING_RESULT_FRONT_KICK": "Patada frontal",
    "TRANS_BOXING_RESULT_KNEE_TO_THE_RIBS": "Rodillazo a las costillas",
    "TRANS_BOXING_RESULT_KNEEBAR": "Kneebar",
    "TRANS_BOXING_RESULT_STOMPS": "Pisotones",
    "TRANS_BOXING_RESULT_ANACONDA_CHOKE": "EstrangulaciÃ³n anaconda",
    "TRANS_BOXING_RESULT_CHOKE": "EstrangulaciÃ³n",
    "TRANS_BOXING_RESULT_FLYING_KNEE_AND_PUNCHES": "Rodillazo volador y puÃ±etazos",
    "TRANS_BOXING_RESULT_BODY_KICK_AND_PUNCHES": "Patada al cuerpo y puÃ±etazos",
    "TRANS_BOXING_RESULT_JAPANESE_NECKTIE": "Corbata japonesa",
    "TRANS_BOXING_RESULT_SPLIT_DECISION": "DecisiÃ³n dividida",
    "TRANS_BOXING_RESULT_MAJORITY_DECISION": "DecisiÃ³n mayoritaria",
    "TRANS_BOXING_RESULT_UNANIMOUS_DECISION": "DecisiÃ³n unÃ¡nime",
    "TRANS_BOXING_RESULT_SPLIT_DECISION_DRAW": "Empate dividido",
    "TRANS_BOXING_RESULT_MAJORITY_DRAW": "Empate mayoritario",
    "TRANS_BOXING_RESULT_TECHNICAL_DECISION": "DecisiÃ³n tÃ©cnica",
    "TRANS_BOXING_ROUND": "Asalto %s",
    "TRANS_CLICK_FOR_MATCH_DETAIL": "Â¡Haga click para detalles del partido!",
    "TRANS_CLICK_FOR_DETAIL": "Â¡Haz clic para ver detalles!",
    "TRANS_CLICK_FOR_PLAYER_CARD": "Â¡Haz clic para consultar tarjeta!",
    "TRANS_CLICK_FOR_LIST_OF_MATCHES": "Clique para ver una lista de partidos",
    "TRANS_CLICK_FOR_MORE_SPORT_GAMES": "MÃ¡s partidos de la categorÃ­a [sport]",
    "TRANS_CLICK_FOR_ODDS_COMPARISON": "Â¡Haga click para comparaciÃ³n de cuotas!",
    "TRANS_CLICK_TO_SEE_LINEUPS": "Â¡Haga click para ver alineaciones!",
    "TRANS_CLICK_TO_WATCH_VIDEO_HIGHLIGHTS": "Â¡Haz clic para ver imÃ¡genes de los mejores momentos!",
    "TRANS_CLOSE_WINDOW": "Cerrar ventana",
    "TRANS_UPDATE_CORRECTION": "CORRECCIÃN",
    "TRANS_CORRECTION_FOUL": "falta",
    "TRANS_CORRECTION_HANDBALL": "mano",
    "TRANS_CORRECTION_OFFSIDE": "fuera de juego",
    "TRANS_CORRECTION_VIDEO_REVIEW": "revisiÃ³n de vÃ­deo",
    "TRANS_CORRECTION_COACHS_CHALLENGE": "coachÂ´s challenge",
    "TRANS_CORRECTION_VAR": "VAR",
    "TRANS_NOTIFICATION_MESSAGE_CORRECTION_INCIDENT_VIDEO_REVIEW_FOUL": "VAR - falta",
    "TRANS_NOTIFICATION_MESSAGE_CORRECTION_INCIDENT_VIDEO_REVIEW_OFFSIDE": "VAR - fuera de juego",
    "TRANS_NOTIFICATION_MESSAGE_CORRECTION_INCIDENT_VIDEO_REVIEW_HANDBALL": "VAR - mano",
    "TRANS_CRICKET_2_DAY_MATCH": "2-day match.",
    "TRANS_CRICKET_3_DAY_MATCH": "3-day match.",
    "TRANS_CRICKET_4_DAY_MATCH": "4-day match.",
    "TRANS_CRICKET_5_DAY_MATCH": "5-day match.",
    "TRANS_CRICKET_BATSMAN": "Batsman",
    "TRANS_CRICKET_BATTING_TEAM": "Equipo bateador",
    "TRANS_CRICKET_BOWLER": "Bowler",
    "TRANS_CRICKET_BOWLING_TEAM": "Equipo fildeador",
    "TRANS_CRICKET_DAY_1": "Day 1.",
    "TRANS_CRICKET_DAY_2": "Day 2.",
    "TRANS_CRICKET_DAY_3": "Day 3.",
    "TRANS_CRICKET_DAY_4": "Day 4.",
    "TRANS_CRICKET_DAY_5": "Day 5.",
    "TRANS_CRICKET_LAST_SIX_BALLS": "Last six balls",
    "TRANS_CRICKET_OVERS": "Overs",
    "TRANS_CRICKET_RECENT_OVERS": "Recent overs",
    "TRANS_CRICKET_RUNS": "Runs",
    "TRANS_CRICKET_SHORT_RUNS": "R",
    "TRANS_CRICKET_WICKETS": "Wickets",
    "TRANS_CRICKET_WICKET": "Wicket",
    "TRANS_CRICKET_RUN_RATE_TITLE": "Run rate",
    "TRANS_CYCLING_BOOKMARK_ALL": "Todas",
    "TRANS_CYCLING_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_CYCLING_BOOKMARK_FIN": "Finalizadas",
    "TRANS_CYCLING_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_CYCLING_STAGE_TYPE_FLAT": "etapa llana",
    "TRANS_CYCLING_STAGE_TYPE_MEDIUM_MOUNTAIN": "etapa de media montaÃ±a",
    "TRANS_CYCLING_STAGE_TYPE_MOUNTAIN": "etapa de montaÃ±a",
    "TRANS_CYCLING_STAGE_TYPE_INDIVIDUAL_TIME_TRIAL": "contrarreloj individual",
    "TRANS_CYCLING_STAGE_TYPE_TEAM_TIME_TRIAL": "contrarreloj por equipos",
    "TRANS_DARTS_BEGINNING_PLAYER": "Primer lanzador",
    "TRANS_DARTS_PLAYING_PLAYER": "Tirando ahora",
    "TRANS_DARTS_BEST_OF_LEGS": "Al mejor de %s legs",
    "TRANS_DARTS_BEST_OF_LEGS_IFRAME": "%s L",
    "TRANS_DARTS_BEST_OF_SETS": "Al mejor de %s sets",
    "TRANS_DARTS_BEST_OF_SETS_IFRAME": "%s S",
    "TRANS_DARTS_LEG_NUMBER": "Leg %s",
    "TRANS_DARTS_SET_NUMBER": "Set %s",
    "TRANS_DARTS_LEGS": "Legs",
    "TRANS_DARTS_SHORT_LEGS": "Legs",
    "TRANS_DARTS_SETS": "Sets",
    "TRANS_DARTS_SHORT_SETS": "Sets",
    "TRANS_DARTS_CURRENT_POINTS": "Puntos",
    "TRANS_DARTS_SHORT_CURRENT_POINTS": "Puntos",
    "TRANS_DARTS_LOST_SERVE": "PÃ©rdida de tirada",
    "TRANS_DARTS_CURRENT_LEG": "Leg actual",
    "TRANS_DARTS_STATISTICS_180": "Tiradas de 180",
    "TRANS_DARTS_STATISTICS_140": "Tiradas de 140 o mÃ¡s",
    "TRANS_DARTS_DEFAULT_MATCH_STATUS_SET1": "1er Set",
    "TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SET1": "1er Set",
    "TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SHORT_SET1": "S1",
    "TRANS_BIG_CHANCE": "Â¡Gran ocasiÃ³n!",
    "TRANS_DAY_FRI": "Viernes",
    "TRANS_DAY_MON": "Lunes",
    "TRANS_DAY_NEXT": "DÃ­a siguiente",
    "TRANS_DAY_PREVIOUS": "DÃ­a anterior",
    "TRANS_DAY_SAT": "SÃ¡bado",
    "TRANS_DAY_SHORT_FRI": "Vi",
    "TRANS_DAY_SHORT_MON": "Lu",
    "TRANS_DAY_SHORT_SAT": "Sa",
    "TRANS_DAY_SHORT_SUN": "Do",
    "TRANS_DAY_SHORT_THU": "Ju",
    "TRANS_DAY_SHORT_TUE": "Ma",
    "TRANS_DAY_SHORT_WED": "Mi",
    "TRANS_DAY_SUN": "Domingo",
    "TRANS_DAY_THU": "Jueves",
    "TRANS_DAY_TODAY": "Hoy",
    "TRANS_DAY_TUE": "Martes",
    "TRANS_DAY_WED": "MiÃ©rcoles",
    "TRANS_MOTORSPORT_LEADER": "LÃDER",
    "TRANS_MOTORSPORT_WINNER": "Vencedor",
    "TRANS_DEFAULT_MATCH_STATUS_1INN": "1a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_2INN": "2a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_3INN": "3a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_4INN": "4a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_5INN": "5a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_6INN": "6a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_7INN": "7a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_8INN": "8a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_9INN": "9a Entrada",
    "TRANS_DEFAULT_MATCH_STATUS_EINN": "Entrada Extra",
    "TRANS_DEFAULT_MATCH_STATUS_FIRST_ROUND": "Vuelta 1",
    "TRANS_DEFAULT_MATCH_STATUS_SECOND_ROUND": "Vuelta 2",
    "TRANS_DEFAULT_MATCH_STATUS_THIRD_ROUND": "Vuelta 3",
    "TRANS_DEFAULT_MATCH_STATUS_FOURTH_ROUND": "Vuelta 4",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND1": "Tras la vuelta 1",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND2": "Tras la vuelta 2",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_ROUND3": "Tras la vuelta 3",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY1": "Tras dÃ­a 1",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY2": "Tras dÃ­a 2",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY3": "Tras dÃ­a 3",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY4": "Tras dÃ­a 4",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY5": "Tras dÃ­a 5",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY6": "Tras dÃ­a 6",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY7": "Tras dÃ­a 7",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY8": "Tras dÃ­a 8",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY9": "Tras dÃ­a 9",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_DAY10": "Tras dÃ­a 10",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_STAGE": "Tras la etapa %s",
    "TRANS_DEFAULT_MATCH_STATUS_AFTER_SS": "Tras el tramo %s",
    "TRANS_DEFAULT_MATCH_STATUS_SHORT_EINN": "EE",
    "TRANS_DEFAULT_MATCH_STATUS_FINISHED": "Finalizado",
    "TRANS_DEFAULT_MATCH_STATUS_INTERRUPTED": "Interrumpido",
    "TRANS_DEFAULT_MATCH_STATUS_DELAYED": "Retrasado",
    "TRANS_DEFAULT_MATCH_STATUS_RET": "Finalizado \/ retirada",
    "TRANS_DEFAULT_MATCH_STATUS_WALK": "Walkover",
    "TRANS_DEFAULT_MATCH_STATUS_POSTPONED": "Aplazado",
    "TRANS_DEFAULT_MATCH_STATUS_ABANDONED": "Suspendido",
    "TRANS_DEFAULT_MATCH_STATUS_PAUSE": "Descanso",
    "TRANS_DEFAULT_MATCH_STATUS_AWARDED": "Por perdido",
    "TRANS_DEFAULT_MATCH_STATUS_PENDING": "En espera de actualizaciones",
    "TRANS_DEFAULT_MATCH_STATUS_TO_FINISH": "Por terminar",
    "TRANS_DEFAULT_MATCH_STATUS_LIVE": "En directo",
    "TRANS_DEFAULT_MATCH_STATUS_1HF": "1er Tiempo",
    "TRANS_DEFAULT_MATCH_STATUS_2HF": "2Âº Tiempo",
    "TRANS_DEFAULT_MATCH_STATUS_CANCELED": "Anulado",
    "TRANS_SOCCER_MATCH_STATUS_FIN_APEN": "Tras los penaltis",
    "TRANS_SOCCER_MATCH_STATUS_FIN_AET": "Tras la prÃ³rroga",
    "TRANS_DEFAULT_MATCH_STATUS_1PER": "1er Periodo",
    "TRANS_DEFAULT_MATCH_STATUS_2PER": "2Âº Periodo",
    "TRANS_DEFAULT_MATCH_STATUS_3PER": "3er Periodo",
    "TRANS_DEFAULT_MATCH_STATUS_1QRT": "1er Cuarto",
    "TRANS_DEFAULT_MATCH_STATUS_2QRT": "2Âº Cuarto",
    "TRANS_DEFAULT_MATCH_STATUS_3QRT": "3er Cuarto",
    "TRANS_DEFAULT_MATCH_STATUS_4QRT": "4Âº Cuarto",
    "TRANS_DEFAULT_MATCH_STATUS_SET1": "1er Set",
    "TRANS_DEFAULT_MATCH_STATUS_SET2": "2Âº Set",
    "TRANS_DEFAULT_MATCH_STATUS_SET3": "3er Set",
    "TRANS_DEFAULT_MATCH_STATUS_SET4": "4Âº Set",
    "TRANS_DEFAULT_MATCH_STATUS_SET5": "5Âº Set",
    "TRANS_DEFAULT_MATCH_STATUS_SET1_TIEBREAK": "1er Set - Tiebreak",
    "TRANS_DEFAULT_MATCH_STATUS_SET2_TIEBREAK": "2Âº Set - Tiebreak",
    "TRANS_DEFAULT_MATCH_STATUS_SET3_TIEBREAK": "3er Set - Tiebreak",
    "TRANS_DEFAULT_MATCH_STATUS_SET4_TIEBREAK": "4Âº Set - Tiebreak",
    "TRANS_DEFAULT_MATCH_STATUS_SET5_TIEBREAK": "5Âº Set - Tiebreak",
    "TRANS_DEFAULT_MATCH_STATUS_IFRAME_SET1": "1er Set",
    "TRANS_DEFAULT_MATCH_STATUS_IFRAME_LIVE": "En directo",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_LINEUPS": "alineaciones",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_ODDS_COMPARISON": "comparacion-cuotas",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_STATISTICS": "estadisticas-del-partido",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_SUMMARY": "resumen-del-partido",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_TV": "tv",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_VIDEO_HIGHLIGHTS": "video",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_PHOTOREPORT": "fotorreportaje",
    "TRANS_DETAIL_WATCH_VIDEO": "Â¡Ver vÃ­deo!",
    "TRANS_DETAIL_BOOKMARK_H2H": "H2H",
    "TRANS_DETAIL_BOOKMARK_LINEUPS": "Alineaciones",
    "TRANS_DETAIL_BOOKMARK_LIVE_CENTRE": "Live Centre",
    "TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY": "Comentarios",
    "TRANS_DETAIL_BOOKMARK_LIVE_TABLE": "ClasificaciÃ³n",
    "TRANS_DETAIL_BOOKMARK_MATCH": "Partido",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY": "Historial partido",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_DARTS": "Leg a Leg",
    "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_TENNIS": "Punto a Punto",
    "TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY": "Resumen",
    "TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2": "Resumen",
    "TRANS_DETAIL_BOOKMARK_ODDS_COMPARISON": "ComparaciÃ³n Cuotas",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS": "EstadÃ­sticas Individuales",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_CRICKET": "EstadÃ­sticas Individuales",
    "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_GOLF": "EstadÃ­sticas",
    "TRANS_DETAIL_BOOKMARK_FALL_OF_WICKETS": "CaÃ­da de wickets",
    "TRANS_DETAIL_BOOKMARK_OVERS": "Bola a bola",
    "TRANS_DETAIL_BOOKMARK_PLAYER_CARD": "Tarjeta",
    "TRANS_DETAIL_BOOKMARK_PRE_MATCH_ODDS": "Cuotas prepartido",
    "TRANS_DETAIL_BOOKMARK_LIVE_ODDS": "Cuotas en directo",
    "TRANS_DETAIL_BOOKMARK_ROUND_RESULTS": "Resultados por vuelta",
    "TRANS_DETAIL_BOOKMARK_STATISTICS": "EstadÃ­sticas",
    "TRANS_DETAIL_BOOKMARK_TV_SCHEDULE": "TV",
    "TRANS_DETAIL_BOOKMARK_TV_LIVE_STREAMING": "TV \/ Streaming en directo",
    "TRANS_DETAIL_BOOKMARK_VIDEO_HIGHLIGHTS": "VÃ­deo",
    "TRANS_DETAIL_BOOKMARK_PHOTOREPORT": "Fotorreportaje",
    "TRANS_DETAIL_BOOKMARK_PLAYER_RESULTS": "Resultados",
    "TRANS_DETAIL_BOOKMARK_ODDS": "Cuotas",
    "TRANS_DETAIL_BOOKMARK_PRE_MATCH_ODDS_UNCLICKABLE": "Cuotas",
    "TRANS_DETAIL_INFORMATION_AVAILABLE_LATER": "InformaciÃ³n aÃºn no disponible.",
    "TRANS_DETAIL_MATCH_SUMMARY_NO_DATA_SCHED": "InformaciÃ³n resultado en directo no disponible, partido sin comenzar.",
    "TRANS_DETAIL_MATCH_MATCH_INFORMATION": "InformaciÃ³n adicional",
    "TRANS_DETAIL_MATCH_ATTENDANCE": "Asistencia",
    "TRANS_DETAIL_MATCH_REFEREE": "Ãrbitro",
    "TRANS_DETAIL_MATCH_VENUE": "Estadio",
    "TRANS_DETAIL_RACE_SUMMARY_NO_DATA_SCHED": "InformaciÃ³n no disponible.",
    "TRANS_DETAIL_TOURNAMENT_SUMMARY_NO_DATA_SCHED": "InformaciÃ³n no disponible, el torneo aÃºn no ha comenzado.",
    "TRANS_DETAIL_TV_WATCH_STREAM_FREE": "TRANS_DETAIL_TV_WATCH_STREAM_FREE",
    "TRANS_DETAIL_TV_WATCH_STREAM_LIVE_FREE": "TRANS_DETAIL_TV_WATCH_STREAM_LIVE_FREE",
    "TRANS_LSTV_DETAIL_HIDE_SCORE": "TRANS_LSTV_DETAIL_HIDE_SCORE",
    "TRANS_LSTV_DETAIL_SHOW_SCORE": "TRANS_LSTV_DETAIL_SHOW_SCORE",
    "TRANS_STANDINGS_DRAW": "Cuadro",
    "TRANS_STANDINGS_TABLE": "ClasificaciÃ³n",
    "TRANS_DETAIL_BOOKMARK_STANDINGS_TABLE": "ClasificaciÃ³n",
    "TRANS_DETAIL_BOOKMARK_STANDINGS_DRAW": "Cuadro",
    "TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER": "Debes iniciar sesiÃ³n para utilizar esta funciÃ³n.",
    "TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK": "Debes iniciar sesiÃ³n para utilizar esta funciÃ³n. <a href=\"#\">Â¡Puedes iniciar sesiÃ³n aquÃ­!<\/a>",
    "TRANS_FINAL_RESULT_ONLY": "SÃ³lo resultado final.",
    "TRANS_FINAL_RESULT_ONLY_SHORT": "SRF",
    "TRANS_FOOTER_TOP_ARROW": "Arriba",
    "TRANS_GOAL_UNDER_REVIEW": "Gol en revisiÃ³n",
    "TRANS_GOLF_MATCH_STATUS_": "TRANS_GOLF_MATCH_STATUS_",
    "TRANS_GOLF_PAR": "Al par",
    "TRANS_GOLF_HOLE": "Hoyo",
    "TRANS_GOLF_HOLE_COL": "Hoyo",
    "TRANS_GOLF_RANK": "PosiciÃ³n",
    "TRANS_GOLF_SHORT_PAR": "Par",
    "TRANS_GOLF_SHORT_TOTAL": "Total",
    "TRANS_GOLF_TOTAL": "Total",
    "TRANS_GOLF_BOOKMARK_ALL": "Todos",
    "TRANS_GOLF_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_GOLF_BOOKMARK_FIN": "Finalizados",
    "TRANS_GOLF_BOOKMARK_SCHED": "PrÃ³ximos",
    "TRANS_HOCKEY_CORRECTION_VIDEO_REFEREE": "RepeticiÃ³n instantÃ¡nea",
    "TRANS_HOCKEY_GOAL": "GOL",
    "TRANS_LINK_TO_PARENT_PROJECT_STANDINGS": "MÃ¡s informaciÃ³n en %s",
    "TRANS_LIVE_BETTING_ICON_TITLE_SCHEDULED": "Â¡Partido disponible para apostar EN DIRECTO!",
    "TRANS_LIVE_BETTING_ICON_TITLE_LIVE": "Â¡Apueste ahora en este partido EN DIRECTO!",
    "TRANS_LIVE_CENTRE_ICON_TITLE": "Â¡Haga click para ver informaciÃ³n detallada del partido en nuestro Live Centre!",
    "TRANS_LIVE_CENTRE_ICON_TITLE_FUTURE": "InformaciÃ³n detallada disponible tras el comienzo del partido.",
    "TRANS_MATCH_LIST_NOT_FOUND": "NingÃºn partido encontrado.",
    "TRANS_MATCH_LIST_NOT_FOUND_LIVE": "No hay ningÃºn partido en juego.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NEXT_GAME": "PrÃ³ximo dÃ­a de partidos: [time]",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "No hay ningÃºn partido programado para los prÃ³ximos %s dÃ­as.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "No se ha disputado ningÃºn partido en los Ãºltimos %s dÃ­as.",
    "TRANS_MATCH_LIST_NOT_FOUND_PLAN_PAST_GAME": "Ãltimo dÃ­a de partidos: [time]",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY": "Hoy no se juega ningÃºn partido.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_1": "Pero puedes seguir los marcadores de otros deportes. Las secciones mÃ¡s visitadas en [project_name] son las de <a href=\"[soccer_url]\" target=\"_top\">FÃTBOL<\/a> y <a href=\"[tennis_url]\" target=\"_top\">TENIS<\/a>.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_2": "Ofrecemos marcadores en directo, resultados finales, clasificaciones y detalles de partidos de [sport_count] deportes.",
    "TRANS_MATCH_LIST_NOT_FOUND_TODAY_INFO_3": "",
    "TRANS_MATCH_SUMMARY_LABEL_SCORE": "Marcador",
    "TRANS_RACE_LIST_NOT_FOUND": "Ninguna carrera encontrada.",
    "TRANS_RACE_LIST_NOT_FOUND_LIVE": "No se estÃ¡ disputando ninguna carrera.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "PrÃ³ximo dÃ­a de carreras: [time]",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "No hay ninguna carrera programada para los prÃ³ximos %s dÃ­as.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "No se ha disputado ninguna carrera en los Ãºltimos %s dÃ­as.",
    "TRANS_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Ãltimo dÃ­a de carreras: [time]",
    "TRANS_RACE_LIST_NOT_FOUND_TODAY": "Hoy no se disputa ninguna carrera.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND": "Ninguna carrera encontrada.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_LIVE": "No se estÃ¡ disputando ninguna carrera.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "PrÃ³ximo dÃ­a de carreras: [time]",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "No hay ninguna carrera programada para los prÃ³ximos %s dÃ­as.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "No se ha disputado ninguna carrera en los Ãºltimos %s dÃ­as.",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Ãltimo dÃ­a de carreras: [time]",
    "TRANS_HORSE_RACE_LIST_NOT_FOUND_TODAY": "Hoy no se disputa ninguna carrera.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND": "Ninguna carrera encontrada.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_LIVE": "No se estÃ¡ disputando ninguna carrera.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NEXT_GAME": "PrÃ³ximo dÃ­a de carreras: [time]",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "No hay ninguna carrera programada para los prÃ³ximos %s dÃ­as.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "No se ha disputado ninguna carrera en los Ãºltimos %s dÃ­as.",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_PLAN_PAST_GAME": "Ãltimo dÃ­a de carreras: [time]",
    "TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_TODAY": "Hoy no se disputa ninguna carrera.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND": "NingÃºn torneo encontrado.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_LIVE": "No se estÃ¡ disputando ningÃºn torneo.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NEXT_GAME": "PrÃ³ximo dÃ­a de torneos: [time]",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NO_NEXT_GAME": "No hay ningÃºn torneo programado para los prÃ³ximos %s dÃ­as.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_NO_PAST_GAME": "No se ha disputado ningÃºn torneo en los Ãºltimos %s dÃ­as.",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_PLAN_PAST_GAME": "Ãltimo dÃ­a de torneos: [time]",
    "TRANS_TOURNAMENT_LIST_NOT_FOUND_TODAY": "Hoy no se disputa ningÃºn torneo.",
    "TRANS_MOTORSPORT_AUTO_RACING_RANK": "PosiciÃ³n",
    "TRANS_MOTORSPORT_AUTO_RACING_NUMBER": "No",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_NUMBER": "No",
    "TRANS_MOTORSPORT_AUTO_RACING_PLAYER": "Piloto",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_PLAYER": "Piloto",
    "TRANS_MOTORSPORT_AUTO_RACING_TEAM": "EscuderÃ­a",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_TEAM": "EscuderÃ­a",
    "TRANS_MOTORSPORT_AUTO_RACING_LAPS": "Vueltas",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_LAPS": "Vueltas",
    "TRANS_MOTORSPORT_AUTO_RACING_TIME": "Tiempo",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_TIME": "Tiempo",
    "TRANS_MOTORSPORT_AUTO_RACING_GRID": "Parrilla de salida",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_GRID": "Parrilla",
    "TRANS_MOTORSPORT_MOTO_RACING_RANK": "PosiciÃ³n",
    "TRANS_MOTORSPORT_MOTO_RACING_NUMBER": "No",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_NUMBER": "No",
    "TRANS_MOTORSPORT_MOTO_RACING_PLAYER": "Piloto",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_PLAYER": "Piloto",
    "TRANS_MOTORSPORT_MOTO_RACING_TEAM": "EscuderÃ­a",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_TEAM": "EscuderÃ­a",
    "TRANS_MOTORSPORT_MOTO_RACING_LAPS": "Vueltas",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_LAPS": "Vueltas",
    "TRANS_MOTORSPORT_MOTO_RACING_TIME": "Tiempo",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_TIME": "Tiempo",
    "TRANS_MOTORSPORT_MOTO_RACING_GRID": "Parrilla de salida",
    "TRANS_MOTORSPORT_MOTO_RACING_SHORT_GRID": "Parrilla",
    "TRANS_MOTORSPORT_AUTO_RACING_PITSTOPS": "Paradas en boxes",
    "TRANS_MOTORSPORT_AUTO_RACING_SHORT_PITSTOPS": "Pit",
    "TRANS_MOTORSPORT_AUTO_RACING_ONE_LAP": "TRANS_MOTORSPORT_AUTO_RACING_ONE_LAP",
    "TRANS_MOTORSPORT_ONE_LAP": "vuelta",
    "TRANS_MOTORSPORT_LAP_SHORT": "v.",
    "TRANS_MOTORSPORT_LAPS_TOTAL": "vueltas",
    "TRANS_MOTORSPORT_KM": "km",
    "TRANS_MOTORSPORT_NO_TIME": "Sin tiempo",
    "TRANS_MOTORSPORT_BOOKMARK_ALL": "Todas",
    "TRANS_MOTORSPORT_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_MOTORSPORT_BOOKMARK_FIN": "Finalizadas",
    "TRANS_MOTORSPORT_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_MOTORSPORT_TIME_SECOND_SHORT": "s",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_TARMAC": "asfalto",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_SNOW": "nieve",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_GRAVEL": "tierra",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_SNOW_AND_TARMAC": "asfalto\/nieve",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_TARMAC_AND_GRAVEL": "asfalto\/tierra",
    "TRANS_MOTORSPORT_AUTO_RACING_SURFACE_GRAVEL_AND_SNOW": "tierra\/nieve",
    "TRANS_MMA_DRAW": "Empatado",
    "TRANS_MMA_RESULT_KO": "KO",
    "TRANS_MMA_RESULT_POINTS": "Por puntos",
    "TRANS_MMA_RESULT_TKO": "KO tÃ©cnico",
    "TRANS_MMA_RESULT_SUBMISSION": "SumisiÃ³n",
    "TRANS_MMA_RESULT_NO_CONTEST": "No Contest",
    "TRANS_MMA_RESULT_DISQUALIFIED": "DescalificaciÃ³n",
    "TRANS_MMA_RESULT_SHORT_KO": "KO",
    "TRANS_MMA_RESULT_SHORT_POINTS": "PTS",
    "TRANS_MMA_RESULT_SHORT_TKO": "TKO",
    "TRANS_MMA_RESULT_SHORT_SUBMISSION": "SUBM",
    "TRANS_MMA_RESULT_SHORT_NO_CONTEST": "NC",
    "TRANS_MMA_RESULT_SHORT_DISQUALIFIED": "DSC",
    "TRANS_MMA_ROUND": "Asalto %s",
    "TRANS_MMA_RESULT_PUNCHES": "PuÃ±etazos",
    "TRANS_MMA_RESULT_UNANIMOUS": "UnÃ¡nime",
    "TRANS_MMA_RESULT_SPLIT": "Dividida",
    "TRANS_MMA_RESULT_PUNCH": "PuÃ±etazo",
    "TRANS_MMA_RESULT_GUILLOTINE_CHOKE": "EstrangulaciÃ³n de guillotina",
    "TRANS_MMA_RESULT_FLYING_KNEE": "Rodillazo volador",
    "TRANS_MMA_RESULT_TRIANGLE_CHOKE": "EstrangulaciÃ³n de triÃ¡ngulo",
    "TRANS_MMA_RESULT_ARM_TRIANGLE_CHOKE": "TriÃ¡ngulo de brazo",
    "TRANS_MMA_RESULT_SUPLEX_AND_PUNCHES": "SÃºplex y puÃ±etazos",
    "TRANS_MMA_RESULT_REAR_NAKED_CHOKE": "MataleÃ³n",
    "TRANS_MMA_RESULT_MAJORITY": "Por mayorÃ­a",
    "TRANS_MMA_RESULT_ARMBAR": "Armbar",
    "TRANS_MMA_RESULT_STRAIGHT_ARMBAR": "Armbar recto",
    "TRANS_MMA_RESULT_UPKICK": "Upkick",
    "TRANS_MMA_RESULT_BROKEN_EYE_SOCKET": "Fractura de Ã³rbita",
    "TRANS_MMA_RESULT_CORNER_STOPPAGE": "Corner stoppage",
    "TRANS_MMA_RESULT_KNEE": "Rodillazo",
    "TRANS_MMA_RESULT_KIMURA": "Kimura",
    "TRANS_MMA_RESULT_ELBOW": "Codazo",
    "TRANS_MMA_RESULT_KEYLOCK": "Keylock",
    "TRANS_MMA_RESULT_ILLEGAL_DOWNWARD_ELBOWS": "Codazos verticales ilegales",
    "TRANS_MMA_RESULT_INJURY": "LesiÃ³n",
    "TRANS_MMA_RESULT_BRABO_CHOKE": "EstrangulaciÃ³n Brabo",
    "TRANS_MMA_RESULT_HEAD_KICK": "Patada a la cabeza",
    "TRANS_MMA_RESULT_KICK": "Patada",
    "TRANS_MMA_RESULT_CUT": "Corte",
    "TRANS_MMA_RESULT_DOCTOR_STOPPAGE": "Doctor stoppage",
    "TRANS_MMA_RESULT_SOCCER_KICKS": "Patadas de fÃºtbol",
    "TRANS_MMA_RESULT_NECK_CRANK": "Neck crank",
    "TRANS_MMA_RESULT_KICK_AND_PUNCHES": "Patada y puÃ±etazos",
    "TRANS_MMA_RESULT_ELBOWS_AND_PUNCHES": "Codazos y puÃ±etazos",
    "TRANS_MMA_RESULT_HEAD_KICK_AND_PUNCHES": "Patada a la cabeza y puÃ±etazos",
    "TRANS_MMA_RESULT_KICK_TO_THE_BODY": "Patada al cuerpo",
    "TRANS_MMA_RESULT_JUDGING_ERROR": "Error de los jueces",
    "TRANS_MMA_RESULT_ARMLOCK": "Armlock",
    "TRANS_MMA_RESULT_LEGLOCK": "Leglock",
    "TRANS_MMA_RESULT_HEEL_HOOK": "Gancho de talÃ³n",
    "TRANS_MMA_RESULT_SHOULDER_CHOKE": "EstrangulaciÃ³n de hombro",
    "TRANS_MMA_RESULT_CALF_SLICER": "Calf slicer",
    "TRANS_MMA_RESULT_OVERTURNED_BY_CSAC": "Anulado por la CSAC",
    "TRANS_MMA_RESULT_ILLEGAL_KICK": "Patada ilegal",
    "TRANS_MMA_RESULT_KNEE_TO_THE_BODY": "Rodillazo al cuerpo",
    "TRANS_MMA_RESULT_KNEE_AND_PUNCHES": "Rodillazo y puÃ±etazos",
    "TRANS_MMA_RESULT_RETIREMENT": "Retirada",
    "TRANS_MMA_RESULT_NORTH_SOUTH_CHOKE": "EstrangulaciÃ³n de norte-sur",
    "TRANS_MMA_RESULT_ACHILLES_LOCK": "Achilles lock",
    "TRANS_MMA_RESULT_OMOPLATA": "Llave de omÃ³plato",
    "TRANS_MMA_RESULT_SPINNING_HEEL_KICK": "Spinning heel kick",
    "TRANS_MMA_RESULT_FRONT_KICK_AND_PUNCHES": "Patada frontal y puÃ±etazos",
    "TRANS_MMA_RESULT_FRONT_KICK": "Patada frontal",
    "TRANS_MMA_RESULT_KNEE_TO_THE_RIBS": "Rodillazo a las costillas",
    "TRANS_MMA_RESULT_KNEEBAR": "Kneebar",
    "TRANS_MMA_RESULT_STOMPS": "Pisotones",
    "TRANS_MMA_RESULT_ANACONDA_CHOKE": "EstrangulaciÃ³n anaconda",
    "TRANS_MMA_RESULT_CHOKE": "EstrangulaciÃ³n",
    "TRANS_MMA_RESULT_FLYING_KNEE_AND_PUNCHES": "Rodillazo volador y puÃ±etazos",
    "TRANS_MMA_RESULT_BODY_KICK_AND_PUNCHES": "Patada al cuerpo y puÃ±etazos",
    "TRANS_MMA_RESULT_JAPANESE_NECKTIE": "Corbata japonesa",
    "TRANS_MMA_RESULT_SPLIT_DECISION": "DecisiÃ³n dividida",
    "TRANS_MMA_RESULT_MAJORITY_DECISION": "DecisiÃ³n mayoritaria",
    "TRANS_MMA_RESULT_UNANIMOUS_DECISION": "DecisiÃ³n unÃ¡nime",
    "TRANS_MMA_RESULT_SPLIT_DECISION_DRAW": "Empate dividido",
    "TRANS_MMA_RESULT_MAJORITY_DRAW": "Empate mayoritario",
    "TRANS_MMA_RESULT_TECHNICAL_DECISION": "DecisiÃ³n tÃ©cnica",
    "TRANS_MOD_REWRITE_STANDINGS_TABLE": "clasificacion",
    "TRANS_MY_GAMES_ADD": "Â¡AÃ±adir a Mis Partidos!",
    "TRANS_MY_GAMES_ADD_DEFAULT": "Â¡AÃ±adir a Mis Partidos!",
    "TRANS_MY_GAMES_ADD_ALL": "Â¡AÃ±adir todos los partidos de esta competiciÃ³n a Mis partidos!",
    "TRANS_MY_GAMES_MATCH_LIST_NOT_FOUND": "No ha seleccionado ningÃºn partido.<br \/>Para seleccionar sus partidos, haga click sobre el icono [+] situado junto a cualquier partido a lo largo de la Web.",
    "TRANS_MY_GAMES_MATCH_LIST_NOT_FOUND_PART1": "No ha seleccionado ningÃºn partido.",
    "TRANS_MY_GAMES_MATCH_LIST_NOT_FOUND_PART2": "Para seleccionar sus partidos, haga click sobre el icono situado junto a cualquier partido a lo largo de la Web.",
    "TRANS_MY_GAMES_REMOVE": "Â¡Eliminar de Mis Partidos!",
    "TRANS_MY_GAMES_REMOVE_DEFAULT": "Â¡Eliminar de Mis Partidos!",
    "TRANS_MY_GAMES_REMOVE_ALL": "Â¡Eliminar todos los partidos de esta competiciÃ³n de Mis partidos!",
    "TRANS_MY_GAMES_ADD_EVENT": "Â¡AÃ±adir este evento a Mis Partidos!",
    "TRANS_MY_GAMES_REMOVE_EVENT": "Â¡Eliminar este evento de Mis Partidos!",
    "TRANS_MY_GAMES_SELECT_GROUP": "Â¡Seleccionar grupo!",
    "TRANS_MY_GAMES_REMOVE_FROM_GROUP": "Eliminar del grupo.",
    "TRANS_MY_GAMES_GROUP": "Grupo %s",
    "TRANS_MY_GAMES_GROUP_INFO_PART1": "Â¿Has realizado apuestas combinadas? Â¡Ahora puedes ordenar tus partidos en grupos.",
    "TRANS_MY_GAMES_GROUP_INFO_PART2": " Â¡Activa esta funciÃ³n en tus ajustes!",
    "TRANS_MY_GAMES_GROUPS_MOBILE_INFO_TEXT": "Si desea agrupar sus partidos, pase a la versiÃ³n de escritorio.",
    "TRANS_MY_LEAGUES_ADD": "Â¡AÃ±adir esta liga a Mis Ligas!",
    "TRANS_MY_LEAGUES_LEFT_MENU_TEXT": "Para seleccionar tus ligas, sÃ³lo debes hacer clic en el icono [*] situado junto al nombre de cada liga.",
    "TRANS_MY_LEAGUES_REMOVE": "Â¡Eliminar esta liga de Mis Ligas!",
    "TRANS_MY_TEAMS_ADD": "Â¡AÃ±adir a Mis Equipos!",
    "TRANS_MY_TEAMS_REMOVE": "Â¡Eliminar de Mis Equipos!",
    "TRANS_MY_TEAMS_LEFT_MENU_TEXT": "Para seleccionar tus equipos, haz clic en el icono [*] situado junto a los nombres de los equipos.",
    "TRANS_MY_TEAMS_MATCH_LIST_NOT_FOUND": "No ha seleccionado ningÃºn equipo.<br \/>Para seleccionar tus equipos, haz clic en el icono [*] situado junto a los nombres de los equipos.",
    "TRANS_MY_TEAMS_LIMIT_REACHED": "Has seleccionado el nÃºmero mÃ¡ximo de Mis Equipos.",
    "TRANS_MY_GAMES_MOVE_TO": "Mover a:",
    "TRANS_MY_GAMES_COPY_TO": "Copiar en:",
    "TRANS_ODDS_ADD_TO_BOOKMAKER_BETSLIP": "Â¡AÃ±ada este partido al cupÃ³n de apuestas en %s!",
    "TRANS_ODDS_BONUS_TITLE": "Â¡Haz clic para reclamar tu bono!",
    "TRANS_ODDS_COMPARISON_ASIAN_HANDICAP": "Handicap AsiÃ¡tico",
    "TRANS_ODDS_COMPARISON_ASIAN_HANDICAP_IFRAME_SHORT": "HA",
    "TRANS_ODDS_COMPARISON_NO": "No",
    "TRANS_ODDS_COMPARISON_YES": "SÃ­",
    "TRANS_ODDS_CLICK_TO_BET_MATCH": "Â¡Haga click para apostar a este partido con %s!",
    "TRANS_ODDS_FORMAT_SWITCH": "Cambiar formato de cuotas:",
    "TRANS_ODDS_FORMAT_TITLE_EU": "",
    "TRANS_ODDS_FORMAT_TITLE_UK": "",
    "TRANS_ODDS_FORMAT_TITLE_US": "",
    "TRANS_ODDS_FORMAT_TITLE_HK": "",
    "TRANS_ODDS_FORMAT_TITLE_MA": "",
    "TRANS_ODDS_FORMAT_TITLE_IN": "",
    "TRANS_ODDS_FORMAT_IFRAME_EU": "",
    "TRANS_ODDS_FORMAT_IFRAME_UK": "",
    "TRANS_ODDS_FORMAT_IFRAME_US": "",
    "TRANS_ODDS_FORMAT_IFRAME_HK": "",
    "TRANS_ODDS_FORMAT_IFRAME_MA": "",
    "TRANS_ODDS_FORMAT_IFRAME_IN": "",
    "TRANS_ODDS_FORMAT_DETAIL_EU": "",
    "TRANS_ODDS_FORMAT_DETAIL_UK": "",
    "TRANS_ODDS_FORMAT_DETAIL_US": "",
    "TRANS_ODDS_FORMAT_DETAIL_HK": "",
    "TRANS_ODDS_FORMAT_DETAIL_MA": "",
    "TRANS_ODDS_FORMAT_DETAIL_IN": "",
    "TRANS_ODDS_REMOVED_BY_BOOKMAKER": "Cuotas retiradas por la casa de apuestas.",
    "TRANS_ODDS_TYPE_0": "X",
    "TRANS_ODDS_TYPE_HOME_AWAY": "Cuotas 1 2",
    "TRANS_ODDS_TYPE_OVER_UNDER": "MÃ¡s de\/Menos de",
    "TRANS_ODDS_POWERED_BY": "Las cuotas mostradas pertenecen a contenido promocional de las casas de apuestas listadas.",
    "TRANS_ODDS_POWERED_BY_IN_LIVE_TABLE": "Tato sekce je komerÄnÃ­ prezentacÃ­ kurzovÃ© nabÃ­dky spoleÄnostÃ­: %s",
    "TRANS_PLAYER": "Jugador",
    "TRANS_POINTS": "Puntos",
    "TRANS_POWERED_BY": "Marcadores en directo accionados por <a href=\"https:\/\/www.MisMarcadores.com\/\" title=\"MisMarcadores.com\" target=\"_blank\">MisMarcadores.com<\/a><br \/>Webmasters: Consiga su propio livescore gratuito <a href=\"https:\/\/www.enetpulse.com\/freelivescore\" title=\"LIVESCORE.in\" target=\"_blank\">free livescore<\/a>",
    "TRANS_PROJECT_NAME": "MisMarcadores.com",
    "TRANS_SCOREBOARD_HOME_NO_MATCH_SPORT_NAME": "TRANS_SCOREBOARD_HOME_NO_MATCH_SPORT_NAME",
    "TRANS_ODDS_COMPARISON_BASEBALL_SPREAD": "",
    "TRANS_ODDS_COMPARISON_BASEBALL_SPREAD_IFRAME_SHORT": "",
    "TRANS_ODDS_COMPARISON_HOCKEY_SPREAD": "",
    "TRANS_ODDS_COMPARISON_HOCKEY_SPREAD_IFRAME_SHORT": "",
    "TRANS_ODDS_EVEN_SHORT": "",
    "TRANS_SWAP_TEAM_AT_IFRAME": "",
    "TRANS_SEARCH_ACTION": "Buscar",
    "TRANS_SEARCH_CANCEL": "Cancelar",
    "TRANS_SEARCH_NOUN": "BÃºsqueda",
    "TRANS_SEARCH_TITLE": "BÃºsqueda",
    "TRANS_SEARCH_INSERT_TEXT": "Introduzca su bÃºsqueda aquÃ­",
    "TRANS_SEARCH_COMPETITIONS": "Competiciones",
    "TRANS_SEARCH_TEAMS": "Equipos",
    "TRANS_SEARCH_SPORT": "Deporte",
    "TRANS_SEARCH_ALL_SPORTS": "Todos",
    "TRANS_SEARCH_DEFAULT_TEXT_EMPTY_QUERY": "Por favor, introduzca al menos %s caracteres. Los resultados se mostrarÃ¡n aquÃ­ inmediatamente.",
    "TRANS_SEARCH_NO_RESULTS": "La bÃºsqueda no obtuvo ningÃºn resultado.",
    "TRANS_SEARCH_MORE_RESULTS_AVAILABLE_TEXT": "Se encontraron mÃ¡s resultados, mostramos sÃ³lo una parte. Le recomendamos que especifique su bÃºsqueda.",
    "TRANS_SEARCH_LAST_SEARCH": "Sus Ãºltimas bÃºsquedas",
    "TRANS_SEARCH_MOST_POPULAR_SEARCHES": "BÃºsquedas mÃ¡s populares",
    "TRANS_SETTINGS": "Ajustes",
    "TRANS_SETTINGS_LIVESCORE": "Ajustes",
    "TRANS_SETTINGS_LIVESCORE_ORDER_BY_LEAGUE_NAME": "Nombre de liga",
    "TRANS_SETTINGS_LIVESCORE_ORDER_BY_MATCH_START_TIME": "Hora de inicio",
    "TRANS_SETTINGS_LIVESCORE_ORDER_MATCHES_BY": "Ordenar partidos por",
    "TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT": "Restaurar la configuraciÃ³n",
    "TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT_CONFIRM": "Â¿EstÃ¡s seguro de querer restaurar la configuraciÃ³n?",
    "TRANS_SETTINGS_LIVESCORE_SHOW_MY_LEAGUES_ON_TOP": "Mostrar Mis Ligas arriba",
    "TRANS_SETTINGS_LIVESCORE_MYGAMES_DISPLAY_GROUPS": "Habilitar ordenaciÃ³n en grupos:",
    "TRANS_SETTINGS_LIVESCORE_DISPLAY_NOTIFICATIONS_BOTTOM_LEFT": "Mostrar notificaciones en la esquina inferior izquierda de la pantalla:",
    "TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_ON": "SÃ­, con efectos de sonido",
    "TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_OFF": "SÃ­, sin efectos de sonido",
    "TRANS_SETTINGS_LIVESCORE_GENERAL_SETTINGS": "Ajustes generales",
    "TRANS_USER_BUTTON_BACK": "AtrÃ¡s",
    "TRANS_TIMEZONE": "ZONA HORARIA",
    "TRANS_NOTIFICATION_SETTINGS_MY_GAMES": "Mis Partidos",
    "TRANS_SNOOKER_BEST_OF_FRAMES": "Al mejor de %s frames",
    "TRANS_SNOOKER_BEST_OF_FRAMES_IFRAME": "%s F",
    "TRANS_SNOOKER_FRAME_NUMBER": "Frame %s",
    "TRANS_SOCCER_CORRECTION_OFFSIDE": "Fuera de juego",
    "TRANS_SOCCER_GOAL": "GOL",
    "TRANS_FUTSAL_GOAL": "GOL",
    "TRANS_SOUND_OFF": "Desactivar sonido",
    "TRANS_SOUND_ON": "Activar sonido",
    "TRANS_START_TIME": "Hora de comienzo",
    "TRANS_STANDINGS_LIVE_TABLE": "Tabla En Directo",
    "TRANS_SUB_BOOKMARK_LIVE_ODDS": "LIVE Odds",
    "TRANS_SUB_BOOKMARK_MAIN": "Results",
    "TRANS_SUB_BOOKMARK_ODDS": "bet365 Odds",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_1": "Pedimos disculpas por la indisponibilidad actual de la funciÃ³n H2H.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_2": "Trabajamos para lograr una pronta resoluciÃ³n.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_1": "Pedimos disculpas por la indisponibilidad actual de la funciÃ³n Live Centre.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_2": "Trabajamos para lograr una pronta resoluciÃ³n.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_1": "La informaciÃ³n detallada del Live Centre podrÃ­a ser ofrecida con retraso o no estar disponible por motivos tÃ©cnicos.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_2": "Trabajamos para solucionar este problema con la mayor brevedad. Gracias por su comprensiÃ³n.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_1": "Pedimos disculpas por la indisponibilidad actual de la funciÃ³n Mis Partidos.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_2": "Trabajamos para lograr una pronta resoluciÃ³n.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_1": "Pedimos disculpas por la indisponibilidad actual de las Clasificaciones.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_2": "Trabajamos para lograr una pronta resoluciÃ³n.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_1": "Un fallo tÃ©cnico podrÃ­a originar retrasos en las actualizaciones.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_2": "Estamos trabajando para solucionar el problema con la mayor brevedad. Gracias por su comprensiÃ³n y disculpen las molestias.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_1": "Cuotas de apuestas no disponibles actualmente.",
    "TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_2": "La provisiÃ³n de las mismas serÃ¡ restaurada con la mayor brevedad. Gracias por su comprensiÃ³n.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_1": "Su navegador no admite caracterÃ­sticas que nos permiten mostrar la web mÃ¡s rÃ¡pido.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_2": "Como consecuencia de ello, algunas partes de la web podrÃ­an no funcionar correctamente.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_2a": "Por favor, use alguno de los navegadores indicados a continuaciÃ³n para acceder a nuestro servicio.",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_PART_4": "Recomendamos:",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_EDGE": "Edge",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_FIREFOX": "Firefox",
    "TRANS_SYSTEM_ERROR_UNSUPPORTED_BROWSER_CHROME": "Chrome",
    "TRANS_TABLE_TENNIS_SERVING_PLAYER": "Jugador al servicio",
    "TRANS_TENNIS_CORRECTION_HAWK_EYE": "Ojo de HalcÃ³n",
    "TRANS_TENNIS_SERVING_PLAYER": "Jugador al servicio",
    "TRANS_TENNIS_SET": "SET",
    "TRANS_TOURNAMENT_PAGE_TODAYS_MATCHES": "Partidos de hoy",
    "TRANS_TOURNAMENT_PAGE_RESULTS": "Resultados",
    "TRANS_UNAUTHORIZED_WEBSITE": "Este sitio web no estÃ¡ autorizado.<br \/>Cree su propio livescore personalizado gratuitamente en <a href=\"#\">LIVESCORE.in<\/a>!",
    "TRANS_UNAUTHORIZED_WEBSITE_URL": "https:\/\/www.enetpulse.com\/freelivescore",
    "TRANS_UNVERIFIED_SOURCE_INFO_NOTE": "Las actualizaciones de este partido pueden sufrir retrasos.",
    "TRANS_URL_BOOKMAKER_LINK": "\/bookmaker\/",
    "TRANS_URL_IDENT_TOURNAMENT_ARCHIVE": "archivo",
    "TRANS_URL_IDENT_TOURNAMENT_FIXTURES": "partidos",
    "TRANS_URL_IDENT_TOURNAMENT_RESULTS": "resultados",
    "TRANS_URL_IDENT_TOURNAMENT_NEWS": "noticias",
    "TRANS_URL_MATCH_DETAIL": "\/partido\/",
    "TRANS_URL_PRIVACY_POLICY": "\/condiciones\/",
    "TRANS_URL_SOCCER": "\/futbol\/",
    "TRANS_URL_STANDINGS_DRAW": "\/cuadro\/",
    "TRANS_URL_TENNIS": "\/tenis\/",
    "TRANS_URL_CONTACT": "\/contactar\/",
    "TRANS_URL_FAQ": "\/faq\/",
    "TRANS_USER_ACTIVATION_SUCCESSFUL": "Tu cuenta ha sido activada con Ã©xito. Ya puedes iniciar sesiÃ³n.",
    "TRANS_USER_CAPTCHA_TYPE_TEXT_AGAIN": "Por favor, escribe de nuevo las dos palabras de la imagen.",
    "TRANS_USER_CHANGE_PASSWORD": "Cambiar contraseÃ±a",
    "TRANS_USER_CHANGE_PASSWORD_SUCCESSFUL": "Tu contraseÃ±a ha sido cambiada con Ã©xito.",
    "TRANS_USER_DELETE_ACCOUNT": "Cierre de cuenta",
    "TRANS_USER_DIALOG_DELETE_ACCOUNT_SUCCESSFUL": "La cuenta ha sido eliminada con Ã©xito.",
    "TRANS_USER_ERROR_ACCOUNT_NOT_VERIFIED": "Tu cuenta no ha sido verificada.<br \/>Debes verificar tu cuenta siguiendo las instrucciones contenidas en el mensaje que hemos enviado a tu direcciÃ³n de e-mail.",
    "TRANS_USER_ERROR_CAPTCHA_NOT_SAME": "El texto de la imagen no ha sido introducido correctamente.",
    "TRANS_USER_ERROR_EMAIL_NOT_VALID": "La direcciÃ³n de e-mail debe ser vÃ¡lida (p. ej., nombre@ejemplo.com)",
    "TRANS_USER_ERROR_EMAIL_USED": "Esta direcciÃ³n de e-mail ya estÃ¡ registrada por otro usuario.",
    "TRANS_USER_ERROR_I_AGREE_WITH_TERMS": "Debes confirmar tu aceptaciÃ³n de los tÃ©rminos de uso.",
    "TRANS_USER_ERROR_LOGIN_FAILED": "Nombre de usuario y\/o contraseÃ±a incorrectos.",
    "TRANS_USER_ERROR_PASSWORD_INVALID": "ContraseÃ±a no vÃ¡lida",
    "TRANS_USER_ERROR_PASSWORD_MIN_5_CHARACTERS": "La contraseÃ±a debe tener al menos 5 caracteres.",
    "TRANS_USER_ERROR_PASSWORDS_NOT_SAME": "Las contraseÃ±as no coinciden.",
    "TRANS_USER_ERROR_VERIFICATION_CODE_INVALID": "Tu cÃ³digo de activaciÃ³n no es vÃ¡lido.",
    "TRANS_USER_FORGOTTEN_PASSWORD_ERROR_NOT_VALID_VERIFICATION_CODE": "El cÃ³digo de activaciÃ³n para cambiar la contraseÃ±a no es vÃ¡lido. La contraseÃ±a no puede ser modificada.",
    "TRANS_USER_FORGOTTEN_PASSWORD_SEND_INSTRUCTIONS_SUCCESSFUL": "Las instrucciones concernientes al cambio de la contraseÃ±a han sido enviadas a tu direcciÃ³n de e-mail.",
    "TRANS_USER_LOGGED_IN": "SesiÃ³n iniciada",
    "TRANS_USER_LOGIN": "Conectar",
    "TRANS_USER_LOGIN_FACEBOOK": "Iniciar sesiÃ³n con Facebook",
    "TRANS_USER_LOGIN_SUCCESSFUL": "Has iniciado sesiÃ³n con Ã©xito.",
    "TRANS_USER_LOGOUT": "Cierre de sesiÃ³n",
    "TRANS_USER_LOGOUT_CONFIRMATION": "Â¿EstÃ¡s seguro de querer cerrar la sesiÃ³n?",
    "TRANS_USER_LOGOUT_SUCCESSFUL": "Has cerrado la sesiÃ³n con Ã©xito.",
    "TRANS_USER_REGISTRATION": "Registro",
    "TRANS_USER_REGISTRATION_SUCCESSFUL": "Te has registrado con Ã©xito.",
    "TRANS_USER_REGISTRATION_SUCCESSFUL_ADDITIONAL_TEXT": "ATENCIÃN: Te hemos enviado un e-mail de activaciÃ³n. Por favor, revisa tu buzÃ³n de correo y haz clic en el enlace de activaciÃ³n incluido en el mensaje.<br \/><br \/>Si no recibes nuestro e-mail de activaciÃ³n dentro de 20 minutos, comprueba la carpeta SPAM de tu buzÃ³n de correo.<br \/><br \/>Si no encuentras nuestro e-mail, por favor, contÃ¡ctanos en [user_support_email].",
    "TRANS_USER_SERVER_ERROR": "Lo sentimos, la acciÃ³n solicitada no ha podido ser completada por motivos tÃ©cnicos. Por favor, intÃ©ntalo de nuevo mÃ¡s tarde.",
    "TRANS_USER_SERVER_LOGOUT": "Esta sesiÃ³n ha finalizado por motivos de seguridad. Debes iniciar sesiÃ³n para completar la acciÃ³n.",
    "TRANS_USER_SETTINGS": "ConfiguraciÃ³n",
    "TRANS_USER_USER": "Usuario",
    "TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION": "Por favor, confirme que no es un robot.",
    "TRANS_USER_DIALOG_REGISTRATION_ALMOST_DONE": "Registro casi completado",
    "TRANS_USER_DIALOG_REGISTRATION_EMAIL_SENT_TO": "Le hemos enviado un email a %s.",
    "TRANS_USER_DIALOG_REGISTRATION_CONFIRMATION_INFO": "Por favor, compruebe su buzÃ³n de correo y confirme su registro.",
    "TRANS_USER_DIALOG_NEW_TERMS_OF_USE_SUCCESSFUL": "Gracias por aceptar nuestros tÃ©rminos de uso.",
    "TRANS_WINNER": "Vencedor",
    "TRANS_WINNER_TOOLTIP": "Equipo que avanza",
    "TRANS_SHOW_MATCH_STATISTICS": "Mostrar estadÃ­sticas del partido",
    "TRANS_SHOW_MORE": "Mostrar mÃ¡s",
    "TRANS_SHOW_MORE_MATCHES": "Mostrar mÃ¡s partidos",
    "TRANS_TOURNAMENT_PAGE_SHOW_MORE_MATCHES": "Mostrar mÃ¡s partidos",
    "TRANS_SOCCER_MATCH_SCORER_TYPE_PEN": "Penalti",
    "TRANS_SOCCER_MATCH_SCORER_TYPE_PEN_MISS": "Penalti fallado",
    "TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN": "Penalti",
    "TRANS_HOCKEY_MATCH_SCORER_TYPE_PEN_MISSED": "Penalti fallado",
    "TRANS_MY_GAMES_CANNOT_REMOVE": "Puedes aÃ±adir todo el evento o sÃ³lo los participantes que desees a Mis Partidos. Si aÃ±ades todo el evento, no podrÃ¡s eliminar ningÃºn participante de Mis Partidos.",
    "TRANS_GOLF_NODUEL_SCHEDULED_INFO": "Esta lista tiene carÃ¡cter meramente informativo y estÃ¡ sujeta a cambios.",
    "TRANS_ANDROID_APPLICATION": "AplicaciÃ³n para Android",
    "TRANS_SMART_BANNER_FREE": "GRATUITA",
    "TRANS_SMART_BANNER_DOWNLOAD_BUTTON": "DESCÃRGALA AQUÃ",
    "TRANS_SMART_BANNER_ANDROID_APPLICATION": "",
    "TRANS_NEW_FEATURE": "NUEVO",
    "TRANS_GOLF_HOLES_PLAYED": "Hoyos disputados: %s",
    "TRANS_GOLF_TODAY": "Hoy",
    "TRANS_ODDS_COMPARISON_WINNER": "Ganador",
    "TRANS_ODDS_COMPARISON_WINNER_SHORT": "Ganador",
    "TRANS_ODDS_COMPARISON_TOP_3": "Top 3",
    "TRANS_ODDS_COMPARISON_TOP_3_SHORT": "Top 3",
    "TRANS_ODDS_COMPARISON_TOP_5": "Top 5",
    "TRANS_ODDS_COMPARISON_TOP_5_SHORT": "Top 5",
    "TRANS_ODDS_COMPARISON_TOP_6": "Top 6",
    "TRANS_ODDS_COMPARISON_TOP_6_SHORT": "Top 6",
    "TRANS_ODDS_COMPARISON_TOP_10": "Top 10",
    "TRANS_ODDS_COMPARISON_TOP_10_SHORT": "Top 10",
    "TRANS_ODDS_COMPARISON_TOP_20": "Top 20",
    "TRANS_ODDS_COMPARISON_TOP_20_SHORT": "Top 20",
    "TRANS_ODDS_COMPARISON_EACH_WAY": "Each Way",
    "TRANS_ODDS_COMPARISON_EACH_WAY_SHORT": "Each Way",
    "TRANS_OTHER": "Otros",
    "TRANS_HOLE_RESULT_DOUBLE_EAGLE": "Double-Eagle",
    "TRANS_HOLE_RESULT_EAGLE": "Eagle",
    "TRANS_HOLE_RESULT_BIRDIE": "Birdie",
    "TRANS_HOLE_RESULT_PAR": "Par",
    "TRANS_HOLE_RESULT_BOGEY": "Bogey",
    "TRANS_HOLE_RESULT_DOUBLE_BOGEY": "Double-Bogey",
    "TRANS_HOLE_RESULT_TRIPLE_PLUS_BOGEY": "3+ Bogey",
    "TRANS_GOLF_RESULT_BETTER_SCORE": "Mejor resultado en el hoyo",
    "TRANS_GOLF_INFO_PRIZE_MONEY": "DotaciÃ³n en premios",
    "TRANS_GOLF_INFO_PAR": "Par",
    "TRANS_GOLF_INFO_DATE": "Fecha",
    "TRANS_TOURNAMENT_PAGE_PLAYER_RESULTS": "Resultados",
    "TRANS_LIVE_STREAMING": "Streaming en directo",
    "TRANS_LIVE_STREAMING_BET365_TEXT": "Se aplican restricciones geogrÃ¡ficas. Es necesario tener una cuenta con fondos o haber realizado una apuesta en las Ãºltimas 24 h. GamblingTherapy.org. 18+",
    "TRANS_TV_CHANNEL": "Canal TV",
    "TRANS_MATCH_ROUND": "Jornada %d",
    "TRANS_DRAW": "Empatado",
    "TRANS_WIN": "Ganado",
    "TRANS_LOST": "Perdido",
    "TRANS_NOTIFICATION_MESSAGE_GOAL": "Â¡Gol!",
    "TRANS_NOTIFICATION_MESSAGE_MATCH_FINISHED": "Finalizado.",
    "TRANS_LOADING": "Loading...",
    "TRANS_CYCLING_KM": "km",
    "TRANS_NAME": "Nombre",
    "TRANS_CYCLING_RANK": "PosiciÃ³n",
    "TRANS_CYCLING_TEAM": "Equipo",
    "TRANS_CYCLING_SHORT_TEAM": "Equipo",
    "TRANS_CYCLING_LAPS": "Vueltas",
    "TRANS_CYCLING_SHORT_LAPS": "Vueltas",
    "TRANS_CYCLING_TIME": "Tiempo",
    "TRANS_CYCLING_SHORT_TIME": "Tiempo",
    "TRANS_CYCLING_GAP": "Dif. 1Âº",
    "TRANS_CYCLING_SHORT_GAP": "Dif. 1Âº",
    "TRANS_CYCLING_GENERAL_LEADER": "LÃ­der general",
    "TRANS_CYCLING_POINTS_LEADER": "LÃ­der puntos",
    "TRANS_CYCLING_MOUNTAINS_LEADER": "LÃ­der montaÃ±a",
    "TRANS_CYCLING_YOUTH_LEADER": "Mejor joven",
    "TRANS_CYCLING_LAST_IN_RACE": "Farolillo rojo",
    "TRANS_CYCLING_CURRENT_WORLD_CHAMPION": "Actual campeÃ³n del mundo",
    "TRANS_HORSE_RACING_HORSE": "Caballo",
    "TRANS_HORSE_RACING_JOCKEY": "YÃ³quey",
    "TRANS_HORSE_RACING_TRAINER": "Entrenador",
    "TRANS_HORSE_RACING_AGE": "Edad",
    "TRANS_HORSE_RACING_AGE_OF_HORSE": "Edad del caballo",
    "TRANS_HORSE_RACING_WEIGHT": "Peso",
    "TRANS_HORSE_RACING_WEIGHT_CARRYING_IN_STONES_AND_LBS": "Peso de carga en stones y lb",
    "TRANS_HORSE_RACING_DIST": "Dist.",
    "TRANS_HORSE_RACING_DISTANCE_BEHIND_HORSE_AHEAD": "Distancia del caballo por delante",
    "TRANS_HORSE_RACING_SP": "SP",
    "TRANS_HORSE_RACING_STARTING_PRICE": "Cuota de salida",
    "TRANS_HORSE_RACING_NR": "NP",
    "TRANS_HORSE_RACING_NON_RUNNER": "No participante",
    "TRANS_HORSE_RACING_CLASS": "Clase",
    "TRANS_HORSE_RACING_WINNER": "Ganador",
    "TRANS_HORSE_RACING_GOING": "Estado del terreno",
    "TRANS_HORSE_RACING_MILES": "Millas",
    "TRANS_HORSE_RACING_FURLONGS": "Furlongs",
    "TRANS_HORSE_RACING_YARDS": "Yardas",
    "TRANS_HORSE_RACING_BOOKMARK_ALL": "Todas",
    "TRANS_HORSE_RACING_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_HORSE_RACING_BOOKMARK_FIN": "Finalizadas",
    "TRANS_HORSE_RACING_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_RANK": "PosiciÃ³n",
    "TRANS_RANKINGS": "Rankings",
    "TRANS_RANKINGS_COLUMN_NAME": "Nombre",
    "TRANS_RANKINGS_COLUMN_NATIONALITY": "Nacionalidad",
    "TRANS_RANKINGS_COLUMN_AVG": "Media",
    "TRANS_RANKINGS_COLUMN_POINTS": "Puntos",
    "TRANS_RANKINGS_COLUMN_TOTAL_POINTS": "Puntos totales",
    "TRANS_RANKINGS_COLUMN_SHORT_TOTAL_POINTS": "Ptos. totales",
    "TRANS_RANKINGS_COLUMN_POINTS_NEXT_ROUND": "PrÃ³ximos puntos",
    "TRANS_RANKINGS_COLUMN_SHORT_POINTS_NEXT_ROUND": "PrÃ³x. ptos.",
    "TRANS_RANKINGS_COLUMN_POINTS_WINNER": "Puntos mÃ¡ximos",
    "TRANS_RANKINGS_COLUMN_SHORT_POINTS_WINNER": "Ptos. mÃ¡x.",
    "TRANS_RANKINGS_COLUMN_CURRENT_TOURNAMENT_NAME": "Torneo actual",
    "TRANS_RANKINGS_COLUMN_TOURNAMENTS": "Torneos",
    "TRANS_RANKINGS_COLUMN_PRICE_MONEY": "Ganancias",
    "TRANS_RANKINGS_NAME_SEARCH": "Buscar",
    "TRANS_RANKINGS_NATIONALITY_SEARCH": "nacionalidad",
    "TRANS_RANKINGS_LIVE_SEARCH": "Ranking en directo",
    "TRANS_MOTORSPORT_RANKINGS_TEAM": "escuderÃ­a",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_1": "Salto 1",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_LENGTH_2": "Salto 2",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_1": "Puntos 1",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_2": "Puntos 2",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_POINTS_TOTAL": "Total",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_1": "Ronda 1",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_RUN_2": "Ronda 2",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_TOTAL": "Total",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFF": "Dif.",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_DIFFERENCE": "Diferencia",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_TIME": "Tiempo",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFF": "Dif.",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_DIFFERENCE": "Diferencia",
    "TRANS_WINTER_SPORTS_BIATHLON_SHOOTING": "Tiro",
    "TRANS_WINTER_SPORTS_BIATHLON_DIFF": "Dif.",
    "TRANS_WINTER_SPORTS_BIATHLON_DIFFERENCE": "Diferencia",
    "TRANS_WINTER_SPORTS_BIATHLON_TIME": "Tiempo",
    "TRANS_WINTER_SPORTS_BOOKMARK_ALL": "Todas",
    "TRANS_WINTER_SPORTS_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_WINTER_SPORTS_BOOKMARK_FIN": "Finalizadas",
    "TRANS_WINTER_SPORTS_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_ALL": "Todas",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_FIN": "Finalizadas",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_HILL_SIZE": "HS",
    "TRANS_WINTER_SPORTS_SKI_JUMPING_JUMP_COUNT": "Saltos",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_ALL": "Todas",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_FIN": "Finalizadas",
    "TRANS_WINTER_SPORTS_ALPINE_SKIING_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_ALL": "Todas",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_FIN": "Finalizadas",
    "TRANS_WINTER_SPORTS_BIATHLON_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_ALL": "Todas",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_LIVE": "EN DIRECTO",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_FIN": "Finalizadas",
    "TRANS_WINTER_SPORTS_CROSS_COUNTRY_BOOKMARK_SCHED": "PrÃ³ximas",
    "TRANS_WINTER_SPORTS_KM": "km",
    "TRANS_WINTER_SPORTS_LAP_SHORT": "v.",
    "TRANS_WINTER_SPORTS_DISTANCE": "Distancia",
    "TRANS_PLAYER_CAREER_SHOW_DETAILS": "Mostrar detalles",
    "TRANS_PLAYER_CAREER_HIDE_DETAILS": "Ocultar detalles",
    "TRANS_MOTORSPORT_MOTO_RACING_RIDES": "Heats",
    "TRANS_MOTORSPORT_MOTO_RACING_WINS": "Vict.",
    "TRANS_MOTORSPORT_MOTO_RACING_POINTS": "Puntos",
    "TRANS_CRICKET_MATCH_STATUS_IFRAME_3CHARINN": "%s Entrada",
    "TRANS_CRICKET_MATCH_STATUS_3CHARINN": "%s Entrada",
    "TRANS_GAMBLE_RESPONSIBLY_FOOTER": "<a href=\"http:\/\/www.jugarbien.es\/\" target=\"_blank\">Juego Responsable<\/a>. 18+",
    "TRANS_LIVE_COMMENTARY_PREMATCH": "Prematch",
    "TRANS_MATCH_PREVIEW_SHOW_MORE": "Mostrar previa Ã­ntegra",
    "TRANS_MATCH_PREVIEW_TITLE": "Haga clic para ver la previa del partido",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_MATCH_HISTORY_TENNIS": "punto-a-punto",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_H2H": "h2h",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_LIVE_COMMENTARY": "comentarios-en-directo",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_LIVE_TABLE": "clasificacion-live",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_STANDINGS": "clasificacion",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_STANDINGS_DRAW": "draw",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_PLAYER_STATISTICS": "player-statistics",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_FALL_OF_WICKETS": "fall-of-wickets",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_OVERS": "ball-by-ball",
    "TRANS_DETAIL_BOOKMARK_BONUS_OFFERS": "Promociones",
    "TRANS_DETAIL_BOOKMARK_NEWS_FEED": "Noticias",
    "TRANS_DETAIL_BOOKMARK_URL_IDENT_NEWS_FEED": "noticias",
    "TRANS_COLLAPSE_LEAGUE_IFRAME": "Ocultar todos los partidos de esta liga",
    "TRANS_EXPAND_LEAGUE_IFRAME": "Mostrar todos los partidos de esta liga",
    "TRANS_EXPAND_LEAGUE_LINK_IFRAME": "mostrar partidos",
    "TRANS_NEWSFEED_CATEGORY_REACTION": "Reacciones",
    "TRANS_NEWSFEED_CATEGORY_REPORT": "CrÃ³nica",
    "TRANS_NEWSFEED_CATEGORY_PREMATCH": "Prepartido",
    "TRANS_MY_TEAMS_LABEL": "Mis Equipos",
    "TRANS_MY_TEAMS_NO_MATCH_SCHEDULED": "%s_team no tiene ningÃºn partido programado para los prÃ³ximos %s_days dÃ­as.",
    "TRANS_TEAM_TRANSFERS": "Traspasos",
    "TRANS_TEAM_TRANSFERS_ALL": "Todos",
    "TRANS_TEAM_TRANSFERS_IN": "Llegadas",
    "TRANS_TEAM_TRANSFERS_OUT": "Salidas",
    "TRANS_PLAYER_CAREER_DATE": "Fecha",
    "TRANS_PLAYER_CAREER_FROM": "De",
    "TRANS_PLAYER_CAREER_TO": "A",
    "TRANS_PLAYER_CAREER_TYPE": "Tipo",
    "TRANS_PLAYER_PROFILE_NO_DATA": "Los datos solicitados no estÃ¡n disponibles. AÃ±adimos continuamente datos histÃ³ricos a nuestra base de datos.",
    "TRANS_TENNIS_SINGLES": "Individuales",
    "TRANS_TENNIS_DOUBLES": "Dobles ",
    "TRANS_TENNIS_MIXED_DOUBLES": "Dobles Mixtos",
    "TRANS_BOOKMARK_LATEST_TOURNAMENTS": "Ãltimos torneos",
    "TRANS_BOOKMARK_SCHED_TOURNAMENTS": "PrÃ³ximos torneos",
    "TRANS_URL_IDENT_TOURNAMENT_TRANSFERS": "traspasos",
    "TRANS_NEWSFEED_NO_NEWS": "No se ha encontrado ninguna noticia.",
    "TRANS_SPORT_SOCCER": "FÃºtbol",
    "TRANS_SPORT_TENNIS": "Tenis",
    "TRANS_SPORT_BASKETBALL": "Baloncesto",
    "TRANS_SPORT_HOCKEY": "Hockey",
    "TRANS_SPORT_AMERICAN_FOOTBALL": "FÃºtbol Americano",
    "TRANS_SPORT_BASEBALL": "BÃ©isbol",
    "TRANS_SPORT_MOTORSPORT": "Motor",
    "TRANS_SPORT_HANDBALL": "Balonmano",
    "TRANS_SPORT_RUGBY_UNION": "Rugby",
    "TRANS_SPORT_FLOORBALL": "Unihockey",
    "TRANS_SPORT_BANDY": "Bandy",
    "TRANS_SPORT_FUTSAL": "FÃºtbol Sala",
    "TRANS_SPORT_AUSSIE_RULES": "FÃºtbol Australiano",
    "TRANS_SPORT_VOLLEYBALL": "Voleibol",
    "TRANS_SPORT_RUGBY_LEAGUE": "Rugby League",
    "TRANS_SPORT_CRICKET": "Cricket",
    "TRANS_SPORT_DARTS": "Dardos",
    "TRANS_SPORT_SNOOKER": "Snooker",
    "TRANS_SPORT_BOXING": "Boxeo",
    "TRANS_SPORT_BEACH_VOLLEYBALL": "Voley Playa",
    "TRANS_SPORT_BADMINTON": "BÃ¡dminton",
    "TRANS_SPORT_WATER_POLO": "Waterpolo",
    "TRANS_SPORT_GOLF": "Golf",
    "TRANS_SPORT_FIELD_HOCKEY": "Hockey hierba",
    "TRANS_SPORT_TABLE_TENNIS": "Tenis de mesa",
    "TRANS_SPORT_BEACH_SOCCER": "FÃºtbol playa",
    "TRANS_SPORT_MMA": "MMA",
    "TRANS_SPORT_NETBALL": "Netball",
    "TRANS_SPORT_PESAPALLO": "PesÃ¤pallo",
    "TRANS_SPORT_ESPORTS": "eSports",
    "TRANS_SPORT_HORSE_RACING": "Carreras de caballos",
    "TRANS_SPORT_WINTER_SPORTS": "Deportes de invierno",
    "TRANS_SPORT_CYCLING": "Ciclismo",
    "TRANS_SPORT_KABADDI": "Kabaddi",
    "TRANS_NOTIFICATION_SETTINGS_NOTIFICATION_SETTINGS": "Ajustes de notificaciones",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_FINAL_RESULT": "Resultado final",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_MATCH_START": "Inicio del partido",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START": "Aviso antes del inicio",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START_5_MINS": "Aviso antes del inicio (5 min)",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START_15_MINS": "Aviso antes del inicio (15 min)",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START_30_MINS": "Aviso antes del inicio (30 min)",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START_1_HOUR": "Aviso antes del inicio (1 h)",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_BEFORE_START_3_HOURS": "Aviso antes del inicio (3 h)",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_5_MINS": "5 min",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_15_MINS": "15 min",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_30_MINS": "30 min",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_1_HOUR": "1 h",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_REMINDER_3_HOURS": "3 h",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_HALF_TIME_SCORE": "Marcador al descanso",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_END_OF_PERIOD": "Final del periodo",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_END_OF_QUARTER": "Final del cuarto",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_END_OF_SET": "Final del set",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_END_OF_DAY": "Final del dÃ­a",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_START_OF_2ND_HALF": "Inicio del 2.Âº tiempo",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_START_OF_PERIOD": "Inicio de periodo",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_START_OF_3RD_QUARTER": "Inicio del 3er cuarto",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_GOAL": "Gol",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_GOAL_SCORER": "Goleador",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_RED_CARD": "Tarjeta roja",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_YELLOW_CARD": "Tarjeta amarilla",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_SUBSTITUTION": "SustituciÃ³n",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_LINEUPS": "Alineaciones",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_SCORE_CHANGE": "Cambio en el marcador",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_WICKET": "Wicket",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_HIGHLIGHT": "VÃ­deo",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_RACE_START": "Inicio de la prueba",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_RACE_END": "Fin de la prueba",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_TOURNAMENT_START": "Comienzo del torneo",
    "TRANS_NOTIFICATION_DETAILED_SETTINGS_TOURNAMENT_END": "Fin del torneo",
    "TRANS_NOTIFICATION_FAVOURITE_SPORTS": "-",
    "TRANS_NOTIFICATIONS_ARE_ON": "Notificaciones permitidas",
    "TRANS_NOTIFICATIONS_ARE_OFF": "Notificaciones desactivadas",
    "TRANS_NOTIFICATION_TURN_ON_ALL_NOTIFICATIONS": "Permitir todas las notificaciones",
    "TRANS_NOTIFICATIONS_PROMPT": "Si quieres ser informado de todos los momentos importantes, permÃ­telas.",
    "TRANS_NOTIFICATIONS_SET": "Establecer",
    "TRANS_NOTIFICATIONS_BLOCKED_BY_BROWSER": "Las notificaciones estÃ¡n bloqueadas por el navegador",
    "TRANS_NOTIFICATIONS_BLOCKED_PROMPT": "Con sus ajustes actuales, no podemos enviÃ¡rselas.",
    "TRANS_MOD_REWRITE_MATCH_DETAIL": "partido",
    "TRANS_BOOKMAKER": "Casa de Apuestas",
    "TRANS_CLICK_TO_AUDIO_COMMENTS": "Pre tento zÃ¡pas je k dispozÃ­cii audiokomentÃ¡r",
    "TRANS_AUDIO_START": "Iniciar audiocomentario",
    "TRANS_AUDIO_PAUSE": "Detener audiocomentario",
    "TRANS_AUDIO_BEFORE_START": "Inicio del audiocomentario: %s",
    "TRANS_GAMBLE_RESPONSIBLY_DETAIL": "<a href=\"http:\/\/www.jugarbien.es\/\" target=\"_blank\">Juego Responsable<\/a>. 18+",
    "TRANS_DETAIL_TITLE_SHOW_PROFILE": "Mostrar perfil",
    "TRANS_LSTV_BUY_DIALOG_SUB_TITLE": "TRANS_LSTV_BUY_DIALOG_SUB_TITLE",
    "TRANS_LSTV_BUY_DIALOG_FEATURE1": "TRANS_LSTV_BUY_DIALOG_FEATURE1",
    "TRANS_LSTV_BUY_DIALOG_FEATURE2": "TRANS_LSTV_BUY_DIALOG_FEATURE2",
    "TRANS_LSTV_BUY_DIALOG_FEATURE3": "TRANS_LSTV_BUY_DIALOG_FEATURE3",
    "TRANS_LSTV_BUY_DIALOG_REMEMBER_CARD": "TRANS_LSTV_BUY_DIALOG_REMEMBER_CARD",
    "TRANS_LSTV_BUY_BUTTON_SCHEDULED": "TRANS_LSTV_BUY_BUTTON_SCHEDULED",
    "TRANS_LSTV_BUY_BUTTON_LIVE_FORMAT_WITH_CHANNEL": "TRANS_LSTV_BUY_BUTTON_LIVE_FORMAT_WITH_CHANNEL",
    "TRANS_LSTV_PAYMENT_CONFIRMATION_TITLE": "TRANS_LSTV_PAYMENT_CONFIRMATION_TITLE",
    "TRANS_LSTV_PAYMENT_CONFIRMATION_BUTTON": "TRANS_LSTV_PAYMENT_CONFIRMATION_BUTTON",
    "TRANS_LSTV_PAYMENT_CONFIRMATION_MSG": "TRANS_LSTV_PAYMENT_CONFIRMATION_MSG",
    "TRANS_LSTV_PAYMENT_FAILED_TITLE": "TRANS_LSTV_PAYMENT_FAILED_TITLE",
    "TRANS_LSTV_PAYMENT_FAILED_TEXT": "TRANS_LSTV_PAYMENT_FAILED_TEXT",
    "TRANS_LSTV_PAYMENT_TRY_AGAIN": "TRANS_LSTV_PAYMENT_TRY_AGAIN",
    "TRANS_LSTV_BUY_DIALOG_CHANNEL_PROVIDER_MSG_FORMAT": "TRANS_LSTV_BUY_DIALOG_CHANNEL_PROVIDER_MSG_FORMAT",
    "TRANS_LSTV_BUY_DIALOG_CHANNEL_PROVIDER_MSG_FORMAT_FREE": "TRANS_LSTV_BUY_DIALOG_CHANNEL_PROVIDER_MSG_FORMAT_FREE",
    "TRANS_LSTV_BUY_DIALOG_BUY_BUTTON": "TRANS_LSTV_BUY_DIALOG_BUY_BUTTON",
    "TRANS_LSTV_BUY_DIALOG_BUY_BUTTON_FREE": "TRANS_LSTV_BUY_DIALOG_BUY_BUTTON_FREE",
    "TRANS_LSTV_BUY_DIALOG_ACCEPT_TERMS_FREE_WITH_LOGIN": "TRANS_LSTV_BUY_DIALOG_ACCEPT_TERMS_FREE_WITH_LOGIN",
    "TRANS_USER_LOGIN_BLOCK_FORGOTTEN_PASSWORD_TEXT": "Â¿Has olvidado tu contraseÃ±a?",
    "TRANS_USER_DIALOG_LOGIN_LOG_IN": "Inicia sesiÃ³n",
    "TRANS_USER_DIALOG_REGISTRATION_SIGN_UP": "RegÃ­strate  ",
    "TRANS_USER_EMAIL": "E-mail",
    "TRANS_LSTV_LOGIN_PURPOSE": "TRANS_LSTV_LOGIN_PURPOSE",
    "TRANS_USER_DIALOG_RESET_PASSWORD_HEADER": "Restablecer ContraseÃ±a",
    "TRANS_USER_DIALOG_RESET_PASSWORD_TEXT": "No te preocupes. Escribe tu direcciÃ³n de e-mail abajo y te enviaremos algunas instrucciones.",
    "TRANS_USER_BUTTON_SEND": "Enviar",
    "TRANS_LSTV_REDIRECT_TO_PAYMENT_GATEWAY": "TRANS_LSTV_REDIRECT_TO_PAYMENT_GATEWAY",
    "TRANS_USER_PASSWORD": "ContraseÃ±a",
    "TRANS_USER_EMAIL_REGISTRATION_CONFIRM": "Confirmar",
    "TRANS_LSTV_BUY_DIALOG_TITLE": "TRANS_LSTV_BUY_DIALOG_TITLE",
    "TRANS_LSTV_GO_TO_PAYMENT": "TRANS_LSTV_GO_TO_PAYMENT",
    "TRANS_LSTV_FILL_EMAIL_TITLE": "TRANS_LSTV_FILL_EMAIL_TITLE",
    "TRANS_LSTV_FILL_EMAIL_MSG": "TRANS_LSTV_FILL_EMAIL_MSG",
    "TRANS_TV_USERS_OVERVIEW_CHANNELS_TITLE": "TRANS_TV_USERS_OVERVIEW_CHANNELS_TITLE",
    "TRANS_TV_USERS_OVERVIEW_CHANNELS_EMPTY_DATA": "TRANS_TV_USERS_OVERVIEW_CHANNELS_EMPTY_DATA",
    "TRANS_TV_USERS_OVERVIEW_CHANNEL_WATCH_FREE": "TRANS_TV_USERS_OVERVIEW_CHANNEL_WATCH_FREE",
    "TRANS_TV_USERS_OVERVIEW_CHANNEL_PAID": "TRANS_TV_USERS_OVERVIEW_CHANNEL_PAID",
    "TRANS_TV_USERS_OVERVIEW_CHANNEL_PLAY": "TRANS_TV_USERS_OVERVIEW_CHANNEL_PLAY",
    "TRANS_TV_USERS_OVERVIEW_PAYMENT_METHOD_TITLE": "TRANS_TV_USERS_OVERVIEW_PAYMENT_METHOD_TITLE",
    "TRANS_TV_USERS_OVERVIEW_PAYMENT_SAVED_CARD": "TRANS_TV_USERS_OVERVIEW_PAYMENT_SAVED_CARD",
    "TRANS_TV_USERS_OVERVIEW_PAYMENT_EXPIRATION": "TRANS_TV_USERS_OVERVIEW_PAYMENT_EXPIRATION",
    "TRANS_TV_USERS_OVERVIEW_PAYMENT_REMOVE_CARD": "TRANS_TV_USERS_OVERVIEW_PAYMENT_REMOVE_CARD",
    "TRANS_TV_USERS_OVERVIEW_PURCHASE_HISTORY_TITLE": "TRANS_TV_USERS_OVERVIEW_PURCHASE_HISTORY_TITLE",
    "TRANS_TV_USERS_OVERVIEW_NOTE_TEXT": "TRANS_TV_USERS_OVERVIEW_NOTE_TEXT",
    "TRANS_TV_USERS_OVERVIEW_TITLE": "TRANS_TV_USERS_OVERVIEW_TITLE",
    "TRANS_TV_USERS_OVERVIEW_PURCHASE_HISTORY_EMPTY_DATA": "TRANS_TV_USERS_OVERVIEW_PURCHASE_HISTORY_EMPTY_DATA",
    "TRANS_LSTV_WATCH_BROADCAST": "TRANS_LSTV_WATCH_BROADCAST",
    "TRANS_CURRENT_GAME": "Juego actual",
    "TRANS_RANKINGS_SHOW_FULL_RANKINGS": "Ver ranking completo",
    "TRANS_TEAM_NEWS": "Noticias",
    "TRANS_TEAM_LATEST_NEWS": "Ãltimas noticias",
    "TRANS_TEAM_MORE_NEWS": "Ver mÃ¡s noticias",
    "TRANS_TV_STREAM_NOT_STARTED_INFO": "TRANS_TV_STREAM_NOT_STARTED_INFO",
    "TRANS_TV_PLAY_LIVE_STREAM": "TRANS_TV_PLAY_LIVE_STREAM",
    "TRANS_LSTV_STREAM_SECTION": "TRANS_LSTV_STREAM_SECTION",
    "TRANS_LSTV_QUALITY_AUTO": "TRANS_LSTV_QUALITY_AUTO",
    "TRANS_LSTV_PICTURE_IN_PICTURE": "TRANS_LSTV_PICTURE_IN_PICTURE",
    "TRANS_LSTV_QUALITY": "TRANS_LSTV_QUALITY",
    "TRANS_LSTV_AIRPLAY": "TRANS_LSTV_AIRPLAY",
    "TRANS_LSTV_VIDEO_QUALITY": "TRANS_LSTV_VIDEO_QUALITY",
    "TRANS_LSTV_END_OF_STREAM_INFO": "TRANS_LSTV_END_OF_STREAM_INFO",
    "TRANS_LSTV_PLAY_RECORD": "TRANS_LSTV_PLAY_RECORD",
    "TRANS_LSTV_CONTINUE_PLAYING": "TRANS_LSTV_CONTINUE_PLAYING",
    "TRANS_LSTV_LIVE": "TRANS_LSTV_LIVE",
    "TRANS_LSTV_ERROR_MSG_RETRY_AGAIN": "TRANS_LSTV_ERROR_MSG_RETRY_AGAIN",
    "TRANS_LSTV_ERROR_MSG_CONNECTION_ERROR": "TRANS_LSTV_ERROR_MSG_CONNECTION_ERROR",
    "TRANS_LSTV_SETTINGS": "TRANS_LSTV_SETTINGS",
    "TRANS_LSTV_MUTE": "TRANS_LSTV_MUTE",
    "TRANS_LSTV_FULLSCREEN": "TRANS_LSTV_FULLSCREEN",
    "TRANS_LSTV_EXIT_FULLSCREEN": "TRANS_LSTV_EXIT_FULLSCREEN",
    "TRANS_LSTV_PLAY_PAUSE": "TRANS_LSTV_PLAY_PAUSE",
    "TRANS_LSTV_FORWARD": "TRANS_LSTV_FORWARD",
    "TRANS_LSTV_BACK": "TRANS_LSTV_BACK",
    "TRANS_LSTV_BUY_DIALOG_NOTE": "TRANS_LSTV_BUY_DIALOG_NOTE",
    "TRANS_LSTV_DELETE_CARD_DESC": "TRANS_LSTV_DELETE_CARD_DESC",
    "TRANS_STAGE_PREVIOUS": "Ronda anterior",
    "TRANS_STAGE_NEXT": "Siguiente ronda",
    "TRANS_MISSING_PLAYERS": "Jugadores ausentes"
};
cjs._config = {
    "css_serial": "1535000000",
    "js_serial": "1842000000",
    "js_framework_serial": 39,
    "app": {
        "lang": {
            "charset": "es_ES",
            "web": "es",
            "dc": 13
        },
        "lang_combo": {
            "js_redirect": false,
            "project_list": false
        },
        "noduel_events": {
            "mygames": 10,
            "main": {
                "default": 40,
                "golf": 30,
                "motorsport-auto-racing": 40,
                "motorsport-moto-racing": 40,
                "cycling": 10,
                "winter-sports-ski-jumping": 10,
                "winter-sports-alpine-skiing": 10,
                "winter-sports-cross-country": 10,
                "winter-sports-biathlon": 10
            },
            "tournament_page": {
                "winter-sports-ski-jumping": 1000,
                "winter-sports-alpine-skiing": 1000,
                "winter-sports-cross-country": 1000,
                "winter-sports-biathlon": 1000
            },
            "participant_page": {
                "meetings": {
                    "winter-sports-ski-jumping": 5,
                    "winter-sports-alpine-skiing": 5,
                    "winter-sports-cross-country": 5,
                    "winter-sports-biathlon": 5
                },
                "events": {
                    "motorsport-auto-racing": 10,
                    "motorsport-moto-racing": 10,
                    "cycling": 10
                }
            },
            "categories": {
                "6576": 10,
                "7771": 10
            }
        },
        "mygames": {
            "enable": true,
            "position": "left",
            "groups": {
                "enable": true
            },
            "past_days": 1,
            "future_days": 7
        },
        "detail": {
            "version": 1,
            "experimental_version": 1,
            "window_size": {
                "width": 565,
                "height": 700
            }
        },
        "calendar_range": 7,
        "google_analytics": {
            "event_tracking": true
        },
        "video_highlights_live_icon": {
            "enable": true
        },
        "video_highlights": {
            "enable_interval": 24,
            "disabled_geoip": ["GB"]
        },
        "US_time_format": false,
        "project_type": {
            "id": 1,
            "name": "_fs",
            "us_web": false
        },
        "popup": false,
        "js_redirect": false,
        "myteams": {
            "enable": true,
            "maximum_count": 100
        },
        "has_category_page": [2, 21, 23, 31, 32, 33, 36],
        "banner": {
            "zone_list": {
                "background": {
                    "id": 1061,
                    "width_max": 3000,
                    "height_max": 2000,
                    "dynamic_background": true,
                    "element_notice_selector": ".footer__advertBackground"
                },
                "background_tennis": {
                    "id": 1626,
                    "width_max": 3000,
                    "height_max": 2000,
                    "dynamic_background": true,
                    "element_notice_selector": ".footer__advertBackground",
                    "condition": {
                        "height": 1,
                        "zones": ["background"]
                    }
                },
                "left_menu_1": {
                    "id": 87,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_tennis": {
                    "id": 722,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_basketball": {
                    "id": 723,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_hockey": {
                    "id": 724,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_horse-racing": {
                    "id": 2521,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_2": {
                    "id": 204,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_2_tennis": {
                    "id": 781,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_2"]
                    }
                },
                "left_menu_2_basketball": {
                    "id": 780,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_2"]
                    }
                },
                "left_menu_3": {
                    "id": 3564,
                    "width_max": 140,
                    "height_max": 400
                },
                "right_top": {
                    "id": 219,
                    "width_max": 160,
                    "height_max": 141
                },
                "right_zone_1": {
                    "id": 89,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_2": {
                    "id": 416,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_2_tennis": {
                    "id": 776,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_2_basketball": {
                    "id": 777,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_2_horse-racing": {
                    "id": 2522,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_3": {
                    "id": 417,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_4_adsence": {
                    "id": 730,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_criteo": {
                    "id": 3190,
                    "width_max": 200,
                    "height_max": 1000
                },
                "top": {
                    "id": 86,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true
                },
                "top_american-football": {
                    "id": 126,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_baseball": {
                    "id": 124,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_basketball": {
                    "id": 125,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_hockey": {
                    "id": 123,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_tennis": {
                    "id": 122,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_horse-racing": {
                    "id": 2523,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "content_top": {
                    "id": 2581,
                    "width_max": 970,
                    "height_max": 150,
                    "vertical": true
                },
                "content_bottom": {
                    "id": 127,
                    "width_max": 660,
                    "height_max": 400
                },
                "content_bottom_horse-racing": {
                    "id": 2524,
                    "width_max": 660,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["content_bottom"]
                    }
                },
                "content_bottom_criteo": {
                    "id": 3191,
                    "width_max": 660,
                    "height_max": 400
                },
                "detail": {
                    "id": 88,
                    "width_max": 550,
                    "height_max": 500
                },
                "detail_tennis": {
                    "id": 1301,
                    "width_max": 550,
                    "height_max": 500,
                    "condition": {
                        "height": 1,
                        "zones": ["detail"]
                    }
                },
                "detail_basketball": {
                    "id": 1302,
                    "width_max": 550,
                    "height_max": 500,
                    "condition": {
                        "height": 1,
                        "zones": ["detail"]
                    }
                },
                "detail_criteo": {
                    "id": 3189,
                    "width_max": 550,
                    "height_max": 500
                },
                "standings_top": {
                    "id": 549,
                    "width_max": 500,
                    "height_max": 60
                },
                "responsive_fixed_bottom_mobile": {
                    "id": 3528,
                    "refresh": 45,
                    "width_max": 320,
                    "height_max": 50,
                    "body_class": "mobile_ad",
                    "condition": {
                        "breakpoint": [320, 727]
                    }
                },
                "responsive_detail_fixed_bottom_mobile": {
                    "id": 3530,
                    "refresh": 45,
                    "width_max": 320,
                    "height_max": 50,
                    "body_class": "mobile_ad",
                    "condition": {
                        "breakpoint": [320, 727]
                    }
                },
                "responsive_fixed_bottom_tablet": {
                    "id": 3529,
                    "refresh": 45,
                    "width_max": 728,
                    "height_max": 90,
                    "body_class": "tablet_ad",
                    "condition": {
                        "breakpoint": [728, 999]
                    }
                },
                "responsive_detail_fixed_bottom_tablet": {
                    "id": 3531,
                    "refresh": 45,
                    "width_max": 728,
                    "height_max": 90,
                    "body_class": "tablet_ad",
                    "condition": {
                        "breakpoint": [728, 999]
                    }
                }
            }
        },
        "icon-scrolling-enable": true,
        "project": {
            "id": 13,
            "name": "MisMarcadores.com"
        },
        "odds": {
            "layout": "default",
            "format": "eu",
            "format_switch_enable": {
                "iframe": false
            },
            "ah_override": false,
            "us_handicap": false,
            "enable": true,
            "iframe": true,
            "hide_tab": false,
            "odds_disabled_countries": [],
            "finished_matches_clickable": false,
            "betslip": false,
            "betslip_detail_window": false,
            "betslip_window_size": [],
            "bookmakers_sp_allowed": [16],
            "betting_light_version": false,
            "light_live_bet_icon": false,
            "hide_live_bet_icon": false,
            "odds_comparison_show_copyright": true
        },
        "redirector": {
            "types": {
                "event": 1,
                "tournament_template": 2,
                "participant": 3,
                "player": 4,
                "detail_page": 5
            }
        },
        "fs_stats": {
            "enable": true,
            "url": {
                "mygames": "www.apurogol.net\/mg",
                "adblocked": "",
                "search_stats": "www.apurogol.net\/ss",
                "full_feed_duration": "remote-stats.www.apurogol.net\/ffd"
            }
        },
        "measure_full_feed": {
            "chance": 100,
            "sports": [1, 2]
        },
        "empty_logo_small_path": {
            "logo_team": "image\/empty-logo-team-small.png"
        },
        "game_notification_push": {
            "enable": true
        },
        "user_functions": {
            "server_domain": "www.apurogol.net",
            "serverAPI": "http:\/\/www.apurogol.net:82\/",
            "enable": true,
            "use_only_local": true,
            "namespace": "flashscore",
            "server": "https:\/\/www.apurogol.net\/",
            "apple_client_id": "com.flashscore.siwa",
            "apple_redirect_uri": "https:\/\/www.www.apurogol.net:8443\/apple-proxy\/",
            "facebook_app_id": "125754474284594",
            "google_client_id": "199503525252-89hptckd4dhego166b0lopiqdfkkecb9.apps.googleusercontent.com"
        },
        "registration": {
            "version": 1,
            "no_remote": false,
            "sign_out_in_drop_down": true,
            "captcha_sitekey": "6LdnlAoTAAAAAIzaLLR8ezPKKnLeM2LozP6OQKj_"
        },
        "european_union_states": {
            "codes": ["BE", "BG", "CZ", "DK", "EE", "FI", "FR", "HR", "IE", "IT", "CY", "LT", "LV", "LU", "HU", "MT", "DE", "NL", "PL", "PT", "AT", "RO", "GR", "SK", "SI", "GB", "ES", "SE"]
        },
        "url_prefix": "",
        "project_moved": [],
        "sports_without_detail": [35],
        "tournament_pages": {
            "disabled_sports": [],
            "block_summary_match_limit": 10,
            "data_part_match_limit": 100
        },
        "new_mobile_page": {
            "enable": true
        },
        "box-over-content": {
            "scrolling-enable": true
        },
        "detail_live_betting_strip": {
            "rotation_time": 30000
        },
        "sports_with_participant_no_duel_page": [38, 39, 40, 41, 32, 33, 34],
        "match_comments": {
            "enable": true,
            "sports": [1, 2, 13, 18, 8, 19]
        },
        "new_live_betting_icon": {
            "enable": true,
            "version": 1
        },
        "live_streaming": {
            "disabled_bookmakers_by_geoip": []
        },
        "facelift": {
            "main_class": "flat"
        },
        "timezone": {
            "default": 2
        },
        "icon_list": {
            "info": true,
            "shirt": false,
            "tv": false
        },
        "react": {
            "enabled": false,
            "sports": false
        },
        "responsive": {
            "breakpoint": 800,
            "breakpoint_mobile": 639
        },
        "tv_program": {
            "enable": true
        },
        "mixed_feed": {
            "link_to_more_games": false
        },
        "team_transfers": {
            "sports": [1, 4]
        },
        "team_news": {
            "enabled": false
        },
        "native_notifications": {
            "enabled": true,
            "lsnp": "https:\/\/lsnp.www.apurogol.net\/web-",
            "firebase": {
                "apiKey": "AIzaSyAW9FbqeajkSTftCCbFlcbojPETqu1IThs",
                "authDomain": "flashscore-web-notifications.firebaseapp.com",
                "databaseURL": "https:\/\/flashscore-web-notifications.firebaseio.com",
                "projectId": "flashscore-web-notifications",
                "messagingSenderId": "258573697417"
            }
        },
        "feed_sign": "SW9D1eZo",
        "audio_comments": {
            "enabled": false
        },
        "tv": {
            "enabled": false,
            "feeds_enabled": false,
            "api_service": "https:\/\/lstv-service.livesport.services\/api\/v1",
            "payment_gateways": {
                "csob": "\/payment-gateways\/csob\/payments"
            },
            "payment_redirect": "lstv-payment-proxy",
            "license_servers": {
                "wv": "https:\/\/wv-keyos.licensekeyserver.com",
                "pr": "https:\/\/pr-keyos.licensekeyserver.com\/core\/rightsmanager.asmx",
                "fp": "https:\/\/fp-keyos.licensekeyserver.com\/getkey"
            },
            "server_certs": {
                "wv": "CsECCAMSEBcFuRfMEgSGiwYzOi93KowYgrSCkgUijgIwggEKAoIBAQCZ7Vs7Mn2rXiTvw7YqlbWYUgrVvMs3UD4GRbgU2Ha430BRBEGtjOOtsRu4jE5yWl5KngeVKR1YWEAjp+GvDjipEnk5MAhhC28VjIeMfiG\/+\/7qd+EBnh5XgeikX0YmPRTmDoBYqGB63OBPrIRXsTeo1nzN6zNwXZg6IftO7L1KEMpHSQykfqpdQ4IY3brxyt4zkvE9b\/tkQv0x4b9AsMYE0cS6TJUgpL+X7r1gkpr87vVbuvVk4tDnbNfFXHOggrmWEguDWe3OJHBwgmgNb2fG2CxKxfMTRJCnTuw3r0svAQxZ6ChD4lgvC2ufXbD8Xm7fZPvTCLRxG88SUAGcn1oJAgMBAAE6FGxpY2Vuc2Uud2lkZXZpbmUuY29tEoADrjRzFLWoNSl\/JxOI+3u4y1J30kmCPN3R2jC5MzlRHrPMveoEuUS5J8EhNG79verJ1BORfm7BdqEEOEYKUDvBlSubpOTOD8S\/wgqYCKqvS\/zRnB3PzfV0zKwo0bQQQWz53ogEMBy9szTK\/NDUCXhCOmQuVGE98K\/PlspKkknYVeQrOnA+8XZ\/apvTbWv4K+drvwy6T95Z0qvMdv62Qke4XEMfvKUiZrYZ\/DaXlUP8qcu9u\/r6DhpV51Wjx7zmVflkb1gquc9wqgi5efhn9joLK3\/bNixbxOzVVdhbyqnFk8ODyFfUnaq3fkC3hR3f0kmYgI41sljnXXjqwMoW9wRzBMINk+3k6P8cbxfmJD4\/Paj8FwmHDsRfuoI6Jj8M76H3CTsZCZKDJjM3BQQ6Kb2m+bQ0LMjfVDyxoRgvfF\/\/M\/EEkPrKWyU2C3YBXpxaBquO4C8A0ujVmGEEqsxN1HX9lu6c5OMm8huDxwWFd7OHMs3avGpr7RP7DUnTikXrh6X0",
                "fp": "MIIFATCCA+mgAwIBAgIISULhFBgeQkQwDQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTMwMQYDVQQDDCpBcHBsZSBLZXkgU2VydmljZXMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTkwODAyMDY1NTU4WhcNMjEwODAyMDY1NTU4WjByMQswCQYDVQQGEwJDWjEcMBoGA1UECgwTTGl2ZXNwb3J0IFRWIHMuci5vLjETMBEGA1UECwwKQzVWVkdKOVA5NjEwMC4GA1UEAwwnRmFpclBsYXkgU3RyZWFtaW5nOiBMaXZlc3BvcnQgVFYgcy5yLm8uMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkUV6fl4Vm1eL56aUNCRTAjz4zYe4cQe4m3F+k9KSos32jij4ildOt4Pm1SNIS2T91+Zrnqe3LwRK9x2qq8QfbMipFaJRItIT11fMancg9McWBvD8P1Op7tpIxfP7ExI7ZNNM4DgXpD2YFq2+8SCYQhvq+qzRIQZVkGTL\/mndxSQIDAQABo4ICEDCCAgwwDAYDVR0TAQH\/BAIwADAfBgNVHSMEGDAWgBRj5EdUy4VxWUYsg6zMRDFkZwMsvjCB4gYDVR0gBIHaMIHXMIHUBgkqhkiG92NkBQEwgcYwgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5hcHBsZS5jb20va2V5c2VydmljZXMuY3JsMB0GA1UdDgQWBBTzeP9K0qXyhuCFS4v8dY6R43Za1zAOBgNVHQ8BAf8EBAMCBSAwRwYLKoZIhvdjZAYNAQMBAf8ENQE5ZDl5cnNmZGkwcmVjYXF5ZmZwbGZ2MTJseTJyc3huNjB1bnE3MWl1Zm1jNHRsbnhsZHo5MEcGCyqGSIb3Y2QGDQEEAQH\/BDUBb3JzbDZhdGlmZjB3cnY4ZmJiYndxZ2JmOTF6eGdxa2tnc2RvcmhvcDB5b281NnNhZGFqbTANBgkqhkiG9w0BAQUFAAOCAQEATorStK5zMls476ieK6EFojMEzSlYmrQnUAiSgj\/av76RBBlG4epcNYkEOBs3\/Kvr\/v4VF24sX7hAKrsTGXPeAKP10xBh\/MqprqBrHRLphHLxKrB7L4inBCet5XhcC2Zc\/fK3azv2qYJh0thAlzltFLVzrHqG28wu\/RXFp25DzG86WEaVcgmrwmzgheKt5o+Mf90\/v4qF0Ksh7HAnf45LXR\/FQPBX8AWpVXcJIqPTfoxR5dNLDCjlAmfHVWNDG+10Y\/L0IghGbxEeUuZyg30BE4x\/p49dGT17g6WIzSr4NFKCmXN5JTRY5g8gJZ664O7Qy6Dzc4Dw9JoeshBfSHkFMA=="
            },
            "player": {
                "move_back": 15,
                "move_forward": 15,
                "fragment_size": 2,
                "buffer_tolerance": 2.2,
                "live_tolerance": 2.8
            },
            "transaction_expiration": 604800000
        },
        "apple_sign_in": {
            "enable": true
        },
        "recombee": {
            "enabled": false,
            "database_id": "livesport-eu-prod",
            "public_token": "FEi4XEiLW3jsljzduaSyR10SOCxIMtgcBY06ssPMenRjEMFut9SeGnOmR7WtICKC",
            "scenario": "1"
        },
        "advanced_tennis": {
            "enable": true,
            "point_by_point": true
        },
        "reversed_time": {
            "enable": false,
            "sports": {
                "3": {
                    "stages": [22, 23, 24, 25],
                    "extra_time_stages": [6],
                    "stage_time": 10,
                    "extra_time": 5
                },
                "4": {
                    "stages": [14, 15, 16],
                    "extra_time_stages": [6],
                    "stage_time": 20,
                    "extra_time": 5
                },
                "5": {
                    "stages": [22, 23, 24, 25],
                    "extra_time_stages": [6],
                    "stage_time": 15,
                    "extra_time": 15
                }
            }
        },
        "sports_with_player_profile": [1, 4],
        "empty_logo_path": {
            "face_man": "image\/empty-face-man-share.gif",
            "face_woman": "image\/empty-face-woman-share.gif",
            "logo_team": "image\/empty-logo-team-share.gif"
        },
        "team_logo": {
            "iframe": false
        },
        "sphinxsearch": {
            "server_domain": "s.livesport.services",
            "search_path": "\/search\/",
            "top_search_path": "\/top\/",
            "enable": true,
            "client_server": "s.livesport.services\/search\/"
        }
    },
    "portable_apps": {
        "android": {
            "enable": true,
            "app-id": "eu.livesport.MisMarcadores_com",
            "app-name": "Mis Marcadores",
            "url": "\/mobile\/#android",
            "header-url": "\/mobile\/#android",
            "footer-url": "\/mobile\/#android",
            "apk-url": "http:\/\/t.verfutbol.xyz\/android\/mismarcadores-com.apk",
            "context-box-url": "\/mobile\/#android"
        },
        "info": {
            "name": "MisMarcadores",
            "developer": "FlashScore"
        }
    },
    "ajax": {
        "sync_time": {
            "default": 10,
            "update": 5,
            "game": 5,
            "live_tables": 10
        },
        "goal_duration_time": 60,
        "correction_duration_time": 15,
        "penalty_duration_time": 60,
        "counter_duration_time": 60,
        "scores_changed_duration_time": 60
    },
    "timezone": {
        "list": {
            "-11": "Apia, Midway",
            "-10": "Honolulu, Papeete, Avarua",
            "-9": "Juneau",
            "-8": "Los Angeles",
            "-7": "Denver",
            "-6": "Chicago",
            "-5": "New York",
            "-4": "St. John's, Caracas, Santiago",
            "-3": "Brasilia, Buenos Aires, Nuuk",
            "-2": "Mid Atlantic",
            "-1": "Ponta Delgada, Praia",
            "+0": "London, Dublin, Lisbon",
            "+1": "Berlin, Prague, Vienna",
            "+2": "Ankara, Athens, Helsinki",
            "+3": "Moscow, Riyadh"
        },
        "dst_list": [],
        "name_list": false
    },
    "cache": {
        "feed_x": "x"
    }
};
cjs.Api.config.initConfig({
    "css_serial": "1535000000",
    "js_serial": "1842000000",
    "js_framework_serial": 39,
    "app": {
        "lang": {
            "charset": "es_ES",
            "web": "es",
            "dc": 13
        },
        "lang_combo": {
            "js_redirect": false,
            "project_list": false
        },
        "noduel_events": {
            "mygames": 10,
            "main": {
                "default": 40,
                "golf": 30,
                "motorsport-auto-racing": 40,
                "motorsport-moto-racing": 40,
                "cycling": 10,
                "winter-sports-ski-jumping": 10,
                "winter-sports-alpine-skiing": 10,
                "winter-sports-cross-country": 10,
                "winter-sports-biathlon": 10
            },
            "tournament_page": {
                "winter-sports-ski-jumping": 1000,
                "winter-sports-alpine-skiing": 1000,
                "winter-sports-cross-country": 1000,
                "winter-sports-biathlon": 1000
            },
            "participant_page": {
                "meetings": {
                    "winter-sports-ski-jumping": 5,
                    "winter-sports-alpine-skiing": 5,
                    "winter-sports-cross-country": 5,
                    "winter-sports-biathlon": 5
                },
                "events": {
                    "motorsport-auto-racing": 10,
                    "motorsport-moto-racing": 10,
                    "cycling": 10
                }
            },
            "categories": {
                "6576": 10,
                "7771": 10
            }
        },
        "mygames": {
            "enable": true,
            "position": "left",
            "groups": {
                "enable": true
            },
            "past_days": 1,
            "future_days": 7
        },
        "detail": {
            "version": 1,
            "experimental_version": 1,
            "window_size": {
                "width": 565,
                "height": 700
            }
        },
        "calendar_range": 7,
        "google_analytics": {
            "event_tracking": true
        },
        "video_highlights_live_icon": {
            "enable": true
        },
        "video_highlights": {
            "enable_interval": 24,
            "disabled_geoip": ["GB"]
        },
        "US_time_format": false,
        "project_type": {
            "id": 1,
            "name": "_fs",
            "us_web": false
        },
        "popup": false,
        "js_redirect": false,
        "myteams": {
            "enable": true,
            "maximum_count": 100
        },
        "has_category_page": [2, 21, 23, 31, 32, 33, 36],
        "banner": {
            "zone_list": {
                "background": {
                    "id": 1061,
                    "width_max": 3000,
                    "height_max": 2000,
                    "dynamic_background": true,
                    "element_notice_selector": ".footer__advertBackground"
                },
                "background_tennis": {
                    "id": 1626,
                    "width_max": 3000,
                    "height_max": 2000,
                    "dynamic_background": true,
                    "element_notice_selector": ".footer__advertBackground",
                    "condition": {
                        "height": 1,
                        "zones": ["background"]
                    }
                },
                "left_menu_1": {
                    "id": 87,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_1_tennis": {
                    "id": 722,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_basketball": {
                    "id": 723,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_hockey": {
                    "id": 724,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_1_horse-racing": {
                    "id": 2521,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_1"]
                    }
                },
                "left_menu_2": {
                    "id": 204,
                    "width_max": 140,
                    "height_max": 400
                },
                "left_menu_2_tennis": {
                    "id": 781,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_2"]
                    }
                },
                "left_menu_2_basketball": {
                    "id": 780,
                    "width_max": 140,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["left_menu_2"]
                    }
                },
                "left_menu_3": {
                    "id": 3564,
                    "width_max": 140,
                    "height_max": 400
                },
                "right_top": {
                    "id": 219,
                    "width_max": 160,
                    "height_max": 141
                },
                "right_zone_1": {
                    "id": 89,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_2": {
                    "id": 416,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_2_tennis": {
                    "id": 776,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_2_basketball": {
                    "id": 777,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_2_horse-racing": {
                    "id": 2522,
                    "width_max": 200,
                    "height_max": 1000,
                    "condition": {
                        "height": 1,
                        "zones": ["right_zone_2"]
                    }
                },
                "right_zone_3": {
                    "id": 417,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_zone_4_adsence": {
                    "id": 730,
                    "width_max": 200,
                    "height_max": 1000
                },
                "right_criteo": {
                    "id": 3190,
                    "width_max": 200,
                    "height_max": 1000
                },
                "top": {
                    "id": 86,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true
                },
                "top_american-football": {
                    "id": 126,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_baseball": {
                    "id": 124,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_basketball": {
                    "id": 125,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_hockey": {
                    "id": 123,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_tennis": {
                    "id": 122,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "top_horse-racing": {
                    "id": 2523,
                    "width_max": 1000,
                    "height_max": 300,
                    "vertical": true,
                    "condition": {
                        "height": 1,
                        "zones": ["top"]
                    }
                },
                "content_top": {
                    "id": 2581,
                    "width_max": 970,
                    "height_max": 150,
                    "vertical": true
                },
                "content_bottom": {
                    "id": 127,
                    "width_max": 660,
                    "height_max": 400
                },
                "content_bottom_horse-racing": {
                    "id": 2524,
                    "width_max": 660,
                    "height_max": 400,
                    "condition": {
                        "height": 1,
                        "zones": ["content_bottom"]
                    }
                },
                "content_bottom_criteo": {
                    "id": 3191,
                    "width_max": 660,
                    "height_max": 400
                },
                "detail": {
                    "id": 88,
                    "width_max": 550,
                    "height_max": 500
                },
                "detail_tennis": {
                    "id": 1301,
                    "width_max": 550,
                    "height_max": 500,
                    "condition": {
                        "height": 1,
                        "zones": ["detail"]
                    }
                },
                "detail_basketball": {
                    "id": 1302,
                    "width_max": 550,
                    "height_max": 500,
                    "condition": {
                        "height": 1,
                        "zones": ["detail"]
                    }
                },
                "detail_criteo": {
                    "id": 3189,
                    "width_max": 550,
                    "height_max": 500
                },
                "standings_top": {
                    "id": 549,
                    "width_max": 500,
                    "height_max": 60
                },
                "responsive_fixed_bottom_mobile": {
                    "id": 3528,
                    "refresh": 45,
                    "width_max": 320,
                    "height_max": 50,
                    "body_class": "mobile_ad",
                    "condition": {
                        "breakpoint": [320, 727]
                    }
                },
                "responsive_detail_fixed_bottom_mobile": {
                    "id": 3530,
                    "refresh": 45,
                    "width_max": 320,
                    "height_max": 50,
                    "body_class": "mobile_ad",
                    "condition": {
                        "breakpoint": [320, 727]
                    }
                },
                "responsive_fixed_bottom_tablet": {
                    "id": 3529,
                    "refresh": 45,
                    "width_max": 728,
                    "height_max": 90,
                    "body_class": "tablet_ad",
                    "condition": {
                        "breakpoint": [728, 999]
                    }
                },
                "responsive_detail_fixed_bottom_tablet": {
                    "id": 3531,
                    "refresh": 45,
                    "width_max": 728,
                    "height_max": 90,
                    "body_class": "tablet_ad",
                    "condition": {
                        "breakpoint": [728, 999]
                    }
                }
            }
        },
        "icon-scrolling-enable": true,
        "project": {
            "id": 13,
            "name": "MisMarcadores.com"
        },
        "odds": {
            "layout": "default",
            "format": "eu",
            "format_switch_enable": {
                "iframe": false
            },
            "ah_override": false,
            "us_handicap": false,
            "enable": true,
            "iframe": true,
            "hide_tab": false,
            "odds_disabled_countries": [],
            "finished_matches_clickable": false,
            "betslip": false,
            "betslip_detail_window": false,
            "betslip_window_size": [],
            "bookmakers_sp_allowed": [16],
            "betting_light_version": false,
            "light_live_bet_icon": false,
            "hide_live_bet_icon": false,
            "odds_comparison_show_copyright": true
        },
        "redirector": {
            "types": {
                "event": 1,
                "tournament_template": 2,
                "participant": 3,
                "player": 4,
                "detail_page": 5
            }
        },
        "fs_stats": {
            "enable": true,
            "url": {
                "mygames": "remote-stats.www.apurogol.net\/mg",
                "adblocked": "",
                "search_stats": "remote-stats.www.apurogol.net\/ss",
                "full_feed_duration": "www.apurogol.net\/ffd"
            }
        },
        "measure_full_feed": {
            "chance": 100,
            "sports": [1, 2]
        },
        "empty_logo_small_path": {
            "logo_team": "image\/empty-logo-team-small.png"
        },
        "game_notification_push": {
            "enable": true
        },
        "user_functions": {
            "server_domain": "www.apurogol.net",
            "serverAPI": "http:\/\/lsid.edrive.intra:82\/",
            "enable": true,
            "use_only_local": true,
            "namespace": "flashscore",
            "server": "https:\/\/www.apurogol.net\/",
            "apple_client_id": "com.flashscore.siwa",
            "apple_redirect_uri": "https:\/\/www.www.apurogol.net:8443\/apple-proxy\/",
            "facebook_app_id": "125754474284594",
            "google_client_id": "199503525252-89hptckd4dhego166b0lopiqdfkkecb9.apps.googleusercontent.com"
        },
        "registration": {
            "version": 1,
            "no_remote": false,
            "sign_out_in_drop_down": true,
            "captcha_sitekey": "6LdnlAoTAAAAAIzaLLR8ezPKKnLeM2LozP6OQKj_"
        },
        "european_union_states": {
            "codes": ["BE", "BG", "CZ", "DK", "EE", "FI", "FR", "HR", "IE", "IT", "CY", "LT", "LV", "LU", "HU", "MT", "DE", "NL", "PL", "PT", "AT", "RO", "GR", "SK", "SI", "GB", "ES", "SE"]
        },
        "url_prefix": "",
        "project_moved": [],
        "sports_without_detail": [35],
        "tournament_pages": {
            "disabled_sports": [],
            "block_summary_match_limit": 10,
            "data_part_match_limit": 100
        },
        "new_mobile_page": {
            "enable": true
        },
        "box-over-content": {
            "scrolling-enable": true
        },
        "detail_live_betting_strip": {
            "rotation_time": 30000
        },
        "sports_with_participant_no_duel_page": [38, 39, 40, 41, 32, 33, 34],
        "match_comments": {
            "enable": true,
            "sports": [1, 2, 13, 18, 8, 19]
        },
        "new_live_betting_icon": {
            "enable": true,
            "version": 1
        },
        "live_streaming": {
            "disabled_bookmakers_by_geoip": []
        },
        "facelift": {
            "main_class": "flat"
        },
        "timezone": {
            "default": 2
        },
        "icon_list": {
            "info": true,
            "shirt": false,
            "tv": false
        },
        "react": {
            "enabled": false,
            "sports": false
        },
        "responsive": {
            "breakpoint": 800,
            "breakpoint_mobile": 639
        },
        "tv_program": {
            "enable": true
        },
        "mixed_feed": {
            "link_to_more_games": false
        },
        "team_transfers": {
            "sports": [1, 4]
        },
        "team_news": {
            "enabled": false
        },
        "native_notifications": {
            "enabled": true,
            "lsnp": "http:\/\/www.apurogol.net\/web-",
            "firebase": {
                "apiKey": "AIzaSyAW9FbqeajkSTftCCbFlcbojPETqu1IThs",
                "authDomain": "flashscore-web-notifications.firebaseapp.com",
                "databaseURL": "https:\/\/flashscore-web-notifications.firebaseio.com",
                "projectId": "flashscore-web-notifications",
                "messagingSenderId": "258573697417"
            }
        },
        "feed_sign": "SW9D1eZo",
        "audio_comments": {
            "enabled": false
        },
        "tv": {
            "enabled": false,
            "feeds_enabled": false,
            "api_service": "https:\/\/lstv-service.livesport.services\/api\/v1",
            "payment_gateways": {
                "csob": "\/payment-gateways\/csob\/payments"
            },
            "payment_redirect": "lstv-payment-proxy",
            "license_servers": {
                "wv": "https:\/\/wv-keyos.licensekeyserver.com",
                "pr": "https:\/\/pr-keyos.licensekeyserver.com\/core\/rightsmanager.asmx",
                "fp": "https:\/\/fp-keyos.licensekeyserver.com\/getkey"
            },
            "server_certs": {
                "wv": "CsECCAMSEBcFuRfMEgSGiwYzOi93KowYgrSCkgUijgIwggEKAoIBAQCZ7Vs7Mn2rXiTvw7YqlbWYUgrVvMs3UD4GRbgU2Ha430BRBEGtjOOtsRu4jE5yWl5KngeVKR1YWEAjp+GvDjipEnk5MAhhC28VjIeMfiG\/+\/7qd+EBnh5XgeikX0YmPRTmDoBYqGB63OBPrIRXsTeo1nzN6zNwXZg6IftO7L1KEMpHSQykfqpdQ4IY3brxyt4zkvE9b\/tkQv0x4b9AsMYE0cS6TJUgpL+X7r1gkpr87vVbuvVk4tDnbNfFXHOggrmWEguDWe3OJHBwgmgNb2fG2CxKxfMTRJCnTuw3r0svAQxZ6ChD4lgvC2ufXbD8Xm7fZPvTCLRxG88SUAGcn1oJAgMBAAE6FGxpY2Vuc2Uud2lkZXZpbmUuY29tEoADrjRzFLWoNSl\/JxOI+3u4y1J30kmCPN3R2jC5MzlRHrPMveoEuUS5J8EhNG79verJ1BORfm7BdqEEOEYKUDvBlSubpOTOD8S\/wgqYCKqvS\/zRnB3PzfV0zKwo0bQQQWz53ogEMBy9szTK\/NDUCXhCOmQuVGE98K\/PlspKkknYVeQrOnA+8XZ\/apvTbWv4K+drvwy6T95Z0qvMdv62Qke4XEMfvKUiZrYZ\/DaXlUP8qcu9u\/r6DhpV51Wjx7zmVflkb1gquc9wqgi5efhn9joLK3\/bNixbxOzVVdhbyqnFk8ODyFfUnaq3fkC3hR3f0kmYgI41sljnXXjqwMoW9wRzBMINk+3k6P8cbxfmJD4\/Paj8FwmHDsRfuoI6Jj8M76H3CTsZCZKDJjM3BQQ6Kb2m+bQ0LMjfVDyxoRgvfF\/\/M\/EEkPrKWyU2C3YBXpxaBquO4C8A0ujVmGEEqsxN1HX9lu6c5OMm8huDxwWFd7OHMs3avGpr7RP7DUnTikXrh6X0",
                "fp": "MIIFATCCA+mgAwIBAgIISULhFBgeQkQwDQYJKoZIhvcNAQEFBQAwfzELMAkGA1UEBhMCVVMxEzARBgNVBAoMCkFwcGxlIEluYy4xJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTMwMQYDVQQDDCpBcHBsZSBLZXkgU2VydmljZXMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTkwODAyMDY1NTU4WhcNMjEwODAyMDY1NTU4WjByMQswCQYDVQQGEwJDWjEcMBoGA1UECgwTTGl2ZXNwb3J0IFRWIHMuci5vLjETMBEGA1UECwwKQzVWVkdKOVA5NjEwMC4GA1UEAwwnRmFpclBsYXkgU3RyZWFtaW5nOiBMaXZlc3BvcnQgVFYgcy5yLm8uMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCkUV6fl4Vm1eL56aUNCRTAjz4zYe4cQe4m3F+k9KSos32jij4ildOt4Pm1SNIS2T91+Zrnqe3LwRK9x2qq8QfbMipFaJRItIT11fMancg9McWBvD8P1Op7tpIxfP7ExI7ZNNM4DgXpD2YFq2+8SCYQhvq+qzRIQZVkGTL\/mndxSQIDAQABo4ICEDCCAgwwDAYDVR0TAQH\/BAIwADAfBgNVHSMEGDAWgBRj5EdUy4VxWUYsg6zMRDFkZwMsvjCB4gYDVR0gBIHaMIHXMIHUBgkqhkiG92NkBQEwgcYwgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5hcHBsZS5jb20va2V5c2VydmljZXMuY3JsMB0GA1UdDgQWBBTzeP9K0qXyhuCFS4v8dY6R43Za1zAOBgNVHQ8BAf8EBAMCBSAwRwYLKoZIhvdjZAYNAQMBAf8ENQE5ZDl5cnNmZGkwcmVjYXF5ZmZwbGZ2MTJseTJyc3huNjB1bnE3MWl1Zm1jNHRsbnhsZHo5MEcGCyqGSIb3Y2QGDQEEAQH\/BDUBb3JzbDZhdGlmZjB3cnY4ZmJiYndxZ2JmOTF6eGdxa2tnc2RvcmhvcDB5b281NnNhZGFqbTANBgkqhkiG9w0BAQUFAAOCAQEATorStK5zMls476ieK6EFojMEzSlYmrQnUAiSgj\/av76RBBlG4epcNYkEOBs3\/Kvr\/v4VF24sX7hAKrsTGXPeAKP10xBh\/MqprqBrHRLphHLxKrB7L4inBCet5XhcC2Zc\/fK3azv2qYJh0thAlzltFLVzrHqG28wu\/RXFp25DzG86WEaVcgmrwmzgheKt5o+Mf90\/v4qF0Ksh7HAnf45LXR\/FQPBX8AWpVXcJIqPTfoxR5dNLDCjlAmfHVWNDG+10Y\/L0IghGbxEeUuZyg30BE4x\/p49dGT17g6WIzSr4NFKCmXN5JTRY5g8gJZ664O7Qy6Dzc4Dw9JoeshBfSHkFMA=="
            },
            "player": {
                "move_back": 15,
                "move_forward": 15,
                "fragment_size": 2,
                "buffer_tolerance": 2.2,
                "live_tolerance": 2.8
            },
            "transaction_expiration": 604800000
        },
        "apple_sign_in": {
            "enable": true
        },
        "recombee": {
            "enabled": false,
            "database_id": "livesport-eu-prod",
            "public_token": "FEi4XEiLW3jsljzduaSyR10SOCxIMtgcBY06ssPMenRjEMFut9SeGnOmR7WtICKC",
            "scenario": "1"
        },
        "advanced_tennis": {
            "enable": true,
            "point_by_point": true
        },
        "reversed_time": {
            "enable": false,
            "sports": {
                "3": {
                    "stages": [22, 23, 24, 25],
                    "extra_time_stages": [6],
                    "stage_time": 10,
                    "extra_time": 5
                },
                "4": {
                    "stages": [14, 15, 16],
                    "extra_time_stages": [6],
                    "stage_time": 20,
                    "extra_time": 5
                },
                "5": {
                    "stages": [22, 23, 24, 25],
                    "extra_time_stages": [6],
                    "stage_time": 15,
                    "extra_time": 15
                }
            }
        },
        "sports_with_player_profile": [1, 4],
        "empty_logo_path": {
            "face_man": "image\/empty-face-man-share.gif",
            "face_woman": "image\/empty-face-woman-share.gif",
            "logo_team": "image\/empty-logo-team-share.gif"
        },
        "team_logo": {
            "iframe": false
        },
        "sphinxsearch": {
            "server_domain": "s.livesport.services",
            "search_path": "\/search\/",
            "top_search_path": "\/top\/",
            "enable": true,
            "client_server": "s.livesport.services\/search\/"
        }
    },
    "portable_apps": {
        "android": {
            "enable": true,
            "app-id": "eu.livesport.MisMarcadores_com",
            "app-name": "Mis Marcadores",
            "url": "\/mobile\/#android",
            "header-url": "\/mobile\/#android",
            "footer-url": "\/mobile\/#android",
            "apk-url": "http:\/\/t.verfutbol.xyz\/android\/mismarcadores-com.apk",
            "context-box-url": "\/mobile\/#android"
        },
        "info": {
            "name": "MisMarcadores",
            "developer": "FlashScore"
        }
    },
    "ajax": {
        "sync_time": {
            "default": 10,
            "update": 5,
            "game": 5,
            "live_tables": 10
        },
        "goal_duration_time": 60,
        "correction_duration_time": 15,
        "penalty_duration_time": 60,
        "counter_duration_time": 60,
        "scores_changed_duration_time": 60
    },
    "timezone": {
        "list": {
            "-11": "Apia, Midway",
            "-10": "Honolulu, Papeete, Avarua",
            "-9": "Juneau",
            "-8": "Los Angeles",
            "-7": "Denver",
            "-6": "Chicago",
            "-5": "New York",
            "-4": "St. John's, Caracas, Santiago",
            "-3": "Brasilia, Buenos Aires, Nuuk",
            "-2": "Mid Atlantic",
            "-1": "Ponta Delgada, Praia",
            "+0": "London, Dublin, Lisbon",
            "+1": "Berlin, Prague, Vienna",
            "+2": "Ankara, Athens, Helsinki",
            "+3": "Moscow, Riyadh"
        },
        "dst_list": [],
        "name_list": false
    },
    "cache": {
        "feed_x": "x"
    }
});
(function() {
    var Dic,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Dic = (function() {
        Dic.prototype.SERVICE_TYPE_CLASS = 1;

        Dic.prototype.SERVICE_TYPE_SINGLETON = 2;

        Dic.prototype.SERVICE_TYPE_GETTER = 3;

        Dic.prototype.resetContainer = function() {
            this._mapAliasToService = {};
            return this._services = {};
        };

        function Dic() {
            this.resetContainer();
        }

        Dic.prototype.setAutoModuleLoaderCallback = function(_autoModuleLoaderCallback) {
            this._autoModuleLoaderCallback = _autoModuleLoaderCallback;
        };

        Dic.prototype.registerClass = function(serviceName, classFunction, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = [];
            }
            if (allowOverride == null) {
                allowOverride = false;
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_CLASS, serviceName, classFunction, serviceAliases, allowOverride);
        };

        Dic.prototype.registerSingleton = function(serviceName, singletonFunction, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = [];
            }
            if (allowOverride == null) {
                allowOverride = false;
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_SINGLETON, serviceName, singletonFunction, serviceAliases, allowOverride);
        };

        Dic.prototype.registerGetter = function(serviceName, object, serviceAliases, allowOverride) {
            if (serviceAliases == null) {
                serviceAliases = [];
            }
            if (allowOverride == null) {
                allowOverride = false;
            }
            return this._registerService(Dic.prototype.SERVICE_TYPE_GETTER, serviceName, object, serviceAliases, allowOverride);
        };

        Dic.prototype.get = function(serviceName) {
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            if (!this._services[serviceName].instance) {
                this._services[serviceName].instance = this._createInstance(serviceName);
            }
            return this._services[serviceName].instance;
        };

        Dic.prototype.getNewInstance = function(serviceName, overrideOld) {
            if (overrideOld == null) {
                overrideOld = false;
            }
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            if (overrideOld) {
                this._services[serviceName].instance = null;
                return this.get(serviceName);
            }
            return this._createInstance(serviceName);
        };

        Dic.prototype.getClass = function(serviceName) {
            var service;
            this._loadServiceModule(serviceName);
            serviceName = this._getRealServiceName(serviceName);
            service = this._services[serviceName];
            if (service.type !== Dic.prototype.SERVICE_TYPE_CLASS) {
                throw "Service is not defined as class";
            }
            return this._getDependencyInjectedClass(service);
        };

        Dic.prototype.getRegisteredServiceNames = function() {
            return this._mapAliasToService;
        };

        Dic.prototype.exists = function(serviceName) {
            return this._mapAliasToService[serviceName] != null;
        };

        Dic.prototype._loadServiceModule = function(serviceName) {
            if (this._mapAliasToService[serviceName] != null) {
                return;
            }
            return typeof this._autoModuleLoaderCallback === "function" ? this._autoModuleLoaderCallback(serviceName) : void 0;
        };

        Dic.prototype._registerService = function(type, name, invoke, aliases, allowOverride) {
            var alias, err, i, len, parsedFunction;
            if (aliases == null) {
                aliases = [];
            }
            this._services[name] = {
                type: type,
                name: name,
                invoke: invoke,
                "arguments": [],
                funcName: ""
            };
            if (type === Dic.prototype.SERVICE_TYPE_CLASS || type === Dic.prototype.SERVICE_TYPE_SINGLETON) {
                parsedFunction = this._parseFunctionArguments(invoke);
                this._services[name].funcName = parsedFunction.funcName;
                this._services[name]["arguments"] = parsedFunction.funcArgs;
            }
            this._checkServiceOverride(name, allowOverride);
            this._mapAliasToService[name] = name;
            for (i = 0, len = aliases.length; i < len; i++) {
                alias = aliases[i];
                this._checkServiceOverride(alias, allowOverride);
                this._mapAliasToService[alias] = name;
            }
            if (type === Dic.prototype.SERVICE_TYPE_CLASS || type === Dic.prototype.SERVICE_TYPE_SINGLETON) {
                err = this._checkCyclicDependencies(name, this._services[name]["arguments"]);
                if (err) {
                    err = this._getDependencyInfo(name) + " => " + err;
                    throw 'Cyclic dependencies found: ' + err;
                }
            }
            return true;
        };

        Dic.prototype._parseFunctionArguments = function(func) {
            var firstBracket, funcArgs, funcAsString, funcNoComments, ret;
            ret = {
                funcName: "",
                funcArgs: []
            };
            funcAsString = func.toString();
            funcNoComments = funcAsString.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
            firstBracket = funcNoComments.indexOf('(');
            ret.funcName = funcNoComments.substring(9, firstBracket);
            funcArgs = funcNoComments.slice(firstBracket + 1, funcNoComments.indexOf(')')).match(/([^\s,]+)/g);
            if (funcArgs) {
                ret.funcArgs = funcArgs;
            }
            return ret;
        };

        Dic.prototype._createInstance = function(serviceName) {
            var service;
            service = this._services[serviceName];
            switch (service.type) {
                case Dic.prototype.SERVICE_TYPE_GETTER:
                    return service.invoke;
                case Dic.prototype.SERVICE_TYPE_SINGLETON:
                    return this._invokeSingleton(serviceName);
                case Dic.prototype.SERVICE_TYPE_CLASS:
                    return this._createNewObject(serviceName);
            }
        };

        Dic.prototype._invokeSingleton = function(serviceName) {
            var dependencies, ref, service;
            service = this._services[serviceName];
            if ((service != null ? (ref = service.invoke) != null ? ref.apply : void 0 : void 0) == null) {
                throw "Can`t invoke singleton function";
            }
            dependencies = this._resolveDependencies(serviceName);
            return service.invoke.apply(null, dependencies);
        };

        Dic.prototype._createNewObject = function(serviceName) {
            var service;
            service = this._services[serviceName];
            if ((service != null ? service.invoke : void 0) == null) {
                throw "Can`t create new object";
            }
            return new(this._getDependencyInjectedClass(service))();
        };

        Dic.prototype._getDependencyInjectedClass = function(service) {
            var Wrap, dependenciesGetter;
            if (service.dependencyInjectedClass == null) {
                dependenciesGetter = (function(that) {
                    return function(serviceName) {
                        return that._resolveDependencies(serviceName);
                    };
                })(this);
                Wrap = (function(superClass) {
                    extend(Wrap, superClass);

                    function Wrap() {
                        this._className = service.funcName;
                        Wrap.__super__.constructor.apply(this, dependenciesGetter(service.name));
                    }

                    return Wrap;

                })(service.invoke);
                service.dependencyInjectedClass = Wrap;
            }
            return service.dependencyInjectedClass;
        };

        Dic.prototype._resolveDependencies = function(serviceName) {
            var argument, i, len, ref, results, service;
            service = this._services[serviceName];
            if (service["arguments"] == null) {
                return [];
            }
            ref = service["arguments"];
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                argument = ref[i];
                results.push(this.get(argument));
            }
            return results;
        };

        Dic.prototype._getRealServiceName = function(serviceName) {
            if (this._mapAliasToService[serviceName] == null) {
                throw "Service (" + serviceName + ") not found";
            }
            return this._mapAliasToService[serviceName];
        };

        Dic.prototype._getDependencyInfo = function(serviceName) {
            var info, ref, service;
            info = serviceName;
            if (!this._mapAliasToService[serviceName]) {
                return;
            }
            serviceName = this._getRealServiceName(serviceName);
            service = this._services[serviceName];
            info += "(@" + serviceName;
            if (((ref = service.type) === Dic.prototype.SERVICE_TYPE_CLASS || ref === Dic.prototype.SERVICE_TYPE_SINGLETON) && service.funcName) {
                info += "[func: " + service.funcName + "]";
            }
            info += ")";
            return info;
        };

        Dic.prototype._checkCyclicDependencies = function(serviceName, dependencies) {
            var _dependencyServiceName, dependencyService, dependencyServiceName, err, i, len;
            serviceName = this._getRealServiceName(serviceName);
            for (i = 0, len = dependencies.length; i < len; i++) {
                _dependencyServiceName = dependencies[i];
                if (!this._mapAliasToService[_dependencyServiceName]) {
                    return "";
                }
                dependencyServiceName = this._getRealServiceName(_dependencyServiceName);
                if (dependencyServiceName === serviceName) {
                    return this._getDependencyInfo(_dependencyServiceName);
                }
                dependencyService = this._services[dependencyServiceName];
                err = this._checkCyclicDependencies(serviceName, dependencyService["arguments"]);
                if (err) {
                    return this._getDependencyInfo(_dependencyServiceName) + " => " + err;
                }
            }
            return "";
        };

        Dic.prototype._checkServiceOverride = function(serviceName, allowOverride) {
            if (allowOverride) {
                return;
            }
            if (this._mapAliasToService[serviceName]) {
                throw 'Trying to override service: ' + serviceName;
            }
        };

        return Dic;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic = new Dic();

}).call(this);

cjs.dic.registerGetter('$', $, ['_$', '_jQuery', 'jQuery', '$1']);

cjs.dic.registerGetter('Handlebars', Handlebars);
"use strict";
var BrowserImpl = (function() {
    function BrowserImpl(utilEnviroment) {
        this._utilEnvironment = utilEnviroment;
    }
    BrowserImpl.prototype.isAndroid = function() {
        return /android/i.test(navigator.userAgent);
    };
    BrowserImpl.prototype.isIos = function() {
        return /ipad|iphone|ipod/i.test(navigator.userAgent);
    };
    BrowserImpl.prototype.isMobile = function() {
        return (window.browser.mobile || this.isAndroid() || this.isIos() || this._utilEnvironment.hasWindowOrientation());
    };
    return BrowserImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_browser", BrowserImpl, ["utilBrowser"]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = BrowserImpl;
}
"use strict";
var Util;
(function(Util) {
    var CounterHandlerImpl = (function() {
        function CounterHandlerImpl(utilNumber, utilTrans) {
            this._utilTrans = utilTrans;
            this._utilNumber = utilNumber;
            this._constantsManager = cjs.Api.constantsManager;
        }
        CounterHandlerImpl.prototype.counter_format = function(eventId, withHtml, wrapLines, withWrapper, withStage) {
            return this._counterFormatFromKey(eventId, withHtml, wrapLines, withWrapper, withStage, "counter");
        };
        CounterHandlerImpl.prototype.short_counter_format = function(eventId, withHtml, wrapLines, withWrapper, withStage) {
            return this._counterFormatFromKey(eventId, withHtml, wrapLines, withWrapper, withStage, "counterShort");
        };
        CounterHandlerImpl.prototype._counterFormatFromKey = function(eventId, withHtml, wrapLines, withWrapper, withStage, key) {
            if (withHtml === void 0) {
                withHtml = true;
            }
            if (wrapLines === void 0) {
                wrapLines = true;
            }
            if (withWrapper === void 0) {
                withWrapper = true;
            }
            if (withStage === void 0) {
                withStage = true;
            }
            var eventItem = cjs.dic
                .get("dataEventHolderProxy")
                .getHolder()
                .getEvent(eventId);
            var leagueItem = eventItem.getLeague();
            var gameTime = cjs.dic.get("Helper_GameTime");
            var eventStageList = this._constantsManager.getEventStages();
            var counter = eventItem.getValue(key);
            if (counter === null) {
                counter = "";
            }
            var minutesDiff = 0;
            var appendText = "";
            var matchStatus = eventItem.getStage();
            var matchSport = eventItem.getSportName();
            var eventStageTime = eventItem.getGameTime() > 0 && counter !== "&nbsp;" && gameTime.hasStageWithTime(matchStatus);
            if (["soccer", "bandy", "rugby-league", "rugby-union"].indexOf(matchSport) !== -1) {
                var firstHalf = void 0,
                    secondHalf = void 0;
                switch (matchSport) {
                    case "soccer":
                    case "bandy":
                        firstHalf = 45;
                        secondHalf = 90;
                        break;
                    case "rugby-union":
                    case "rugby-league":
                        if (leagueItem.getValue(window.feedIndexes.LEAGUEINDEXES_IS_SEVEN_RUGBY) == 1) {
                            firstHalf = 7;
                            secondHalf = 14;
                        } else {
                            firstHalf = 40;
                            secondHalf = 80;
                        }
                        break;
                    default:
                        firstHalf = 40;
                        secondHalf = 80;
                        break;
                }
                var isSoccer = matchSport === "soccer";
                var soccerExtraTime = 120;
                if (matchStatus === eventStageList.FIRST_HALF && counter > firstHalf) {
                    minutesDiff = counter - firstHalf;
                    counter = firstHalf + "+";
                } else if (matchStatus === eventStageList.SECOND_HALF && counter > secondHalf) {
                    minutesDiff = counter - secondHalf;
                    counter = secondHalf + "+";
                } else if (isSoccer && matchStatus === eventStageList.EXTRA_TIME && counter > soccerExtraTime) {
                    minutesDiff = counter - soccerExtraTime;
                    counter = soccerExtraTime + "+";
                }
                var isLiveStage = gameTime.isLiveStageHalves(matchStatus);
                if (isSoccer && eventItem.hasLiveCentre() && minutesDiff > 0 && minutesDiff <= 10 && isLiveStage) {
                    counter += minutesDiff;
                }
                var isBandyRugby = ["bandy", "rugby-league", "rugby-union"].indexOf(matchSport) !== -1;
                var isBandyRugbyLive = matchStatus === eventStageList.LIVE && isBandyRugby;
                var isSoccerExtraTime = matchStatus === eventStageList.EXTRA_TIME && isSoccer;
                if (isBandyRugbyLive || isSoccerExtraTime) {
                    counter = counter + '<span class="blink">&nbsp;</span>';
                    if (withStage) {
                        var sportTranslation = cjs.dic
                            .get("util_enviroment")
                            .getCompleteSportTranslations();
                        counter =
                            sportTranslation[matchSport][eventItem.getStage()] +
                            (wrapLines ? "<br/>" : "&nbsp;-&nbsp;") +
                            counter;
                    }
                }
            } else if (matchSport == "aussie-rules" && !(eventItem.getGameTime() > 0)) {
                var stageDuration = 20;
                if (counter > stageDuration) {
                    minutesDiff = counter - stageDuration;
                    counter = stageDuration + "+";
                }
                var isLiveStage = gameTime.isLiveStageQuarters(matchStatus);
                if (isLiveStage) {
                    counter = counter + '<span class="blink">&nbsp;</span>';
                    if (withStage) {
                        var sportTranslation = cjs.dic
                            .get("util_enviroment")
                            .getCompleteSportTranslations();
                        counter =
                            sportTranslation[matchSport][eventItem.getStage()] +
                            (wrapLines ? "<br/>" : "&nbsp;-&nbsp;") +
                            counter;
                    }
                }
            } else {
                if (!withStage) {
                    counter = " ";
                    appendText = this.getCounterAppendText(eventItem.getData(), "");
                } else {
                    appendText = this.getCounterAppendText(eventItem.getData());
                }
                if (eventItem.isDarts()) {
                    counter = cjs.dic
                        .get("Helper_Darts")
                        .getStatus(counter, eventItem.getStageType(), eventItem.getStatsResultsResultHome(), eventItem.getStatsResultsResultAway(), eventItem.isPlayingOnSets());
                }
            }
            if (withHtml) {
                var blink = gameTime.getBlink(eventItem);
                if (eventStageTime) {
                    var sportTime = window.get_sport_time(eventItem.getGameTime(), eventItem.getSportId(), eventItem.getStage(), eventItem.getDataStageTime());
                    var disableStageInfo = gameTime.isSportWithContinuousMinutes(eventItem.getSportId()) &&
                        !gameTime.isExtraTime(matchStatus);
                    if (withStage && !disableStageInfo) {
                        counter = counter + (wrapLines ? "<br />&nbsp;" : "&nbsp;-&nbsp;") + sportTime;
                    } else {
                        counter = sportTime;
                    }
                }
                if (counter === "") {
                    counter = "&nbsp;";
                } else {
                    counter = counter + blink + appendText;
                    if (withWrapper) {
                        counter = "<span>" + counter + "</span>";
                    }
                }
            }
            return counter;
        };
        CounterHandlerImpl.prototype.getCounterAppendText = function(match, delimiter) {
            if (typeof delimiter === "undefined") {
                delimiter = "<br />";
            }
            var match_status = match[window.feedIndexes.SHAREDINDEXES_EVENT_STAGE_ID];
            var sportId = parseInt(match["sport_id"]);
            var append_text = "";
            if (sportId == this._constantsManager.getSports().SNOOKER &&
                parseInt(match_status) == this._constantsManager.getEventStages().LIVE &&
                typeof match[window.feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT] != "undefined" &&
                typeof match[window.feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT] != "undefined") {
                var homeResult = this._utilNumber.toNumber(match[window.feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT]);
                var awayResult = this._utilNumber.toNumber(match[window.feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT]);
                append_text =
                    delimiter +
                    this._utilTrans
                    .translate("TRANS_SNOOKER_FRAME_NUMBER")
                    .replace("%s", String(homeResult + awayResult + 1));
            }
            return append_text;
        };
        CounterHandlerImpl.prototype.set_counter_time = function(eventId, callback) {
            var _this = this;
            if (callback === void 0) {
                callback = function() {};
            }
            var counterTimeLoader = cjs.Api.loader.get("counterTime");
            counterTimeLoader.call(eventId, function(pom) {
                if (pom != null) {
                    var eventItem = cjs.dic
                        .get("dataEventHolderProxy")
                        .getHolder()
                        .getEvent(eventId);
                    pom = Math.floor(pom);
                    eventItem.setValue("counter", _this._utilNumber.toNumber(pom));
                    eventItem.setValue("counterShort", _this._utilNumber.toNumber(pom));
                    callback();
                }
            });
        };
        return CounterHandlerImpl;
    }());
    Util.CounterHandlerImpl = CounterHandlerImpl;
})(Util || (Util = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_CounterHandler", Util.CounterHandlerImpl);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = Util.CounterHandlerImpl;
}
"use strict";
var DatesImpl = (function() {
    function DatesImpl(usTimeFormat, utilEnviroment) {
        this._delta = 0;
        this._usTimeFormat = usTimeFormat;
        this._utilEnviroment = utilEnviroment;
    }
    DatesImpl.prototype.gmtOffsetGetter = function() {
        return this._utilEnviroment.getGmtOffset()();
    };
    DatesImpl.prototype.setServerTimestamp = function(timestamp) {
        this._delta = this.getLocalUTime() - Math.floor(timestamp);
        return this;
    };
    DatesImpl.prototype.getTimestamp = function() {
        return this.getLocalUTime() - this._delta;
    };
    DatesImpl.prototype.createCalendarDate = function(index) {
        var date = new Date();
        var utime = this.getTimestamp() || date.getTime() / 1000;
        date.setTime((index * 86400 + utime - date.getTimezoneOffset() * 60 - this._utilEnviroment.getGmtOffsetDiff()) * 1000);
        return date;
    };
    DatesImpl.prototype.fromUnixtimeToDatetime = function(yearFormat, titleOrText, selector) {
        var _this = this;
        var localGmtOffset = this._utilEnviroment.getGmtOffset()();
        var elements = document.querySelectorAll(selector);
        elements.forEach(function(element) {
            var timestamp = "";
            var data = [];
            var firstPart = "";
            var secondPart = "";
            var dataMax = 0;
            if (titleOrText === "title") {
                var title = element.getAttribute("title");
                if (title) {
                    data = title.split("\n");
                    if (data[0]) {
                        firstPart = data[0];
                    }
                    if (data[1]) {
                        secondPart = data[1];
                    }
                    dataMax = data.length - 1;
                    timestamp = data[dataMax];
                }
            } else {
                timestamp = element.textContent || "";
            }
            if (timestamp !== "") {
                var format = _this._getFormat(yearFormat);
                var startDateTimeStr = _this.timestamp2date(format, parseInt(timestamp), localGmtOffset);
                if (titleOrText === "title") {
                    var dataTmp = firstPart + "\n";
                    if (dataMax === 2) {
                        dataTmp += secondPart + "\n";
                    }
                    element.setAttribute("title", dataTmp + startDateTimeStr);
                } else {
                    element.innerHTML = startDateTimeStr;
                }
            }
        });
    };
    DatesImpl.prototype._getFormat = function(yearFormat) {
        var format = this._usTimeFormat ? "M d" : "d.m.";
        switch (yearFormat) {
            case "tv": {
                format += this._usTimeFormat ? ", g:i A" : " G:i";
                break;
            }
            case "short": {
                format += (this._usTimeFormat ? ", " : "") + "y";
                break;
            }
            case "kickoff": {
                format = this._usTimeFormat ? "h:i A" : "H:i";
                break;
            }
            case "event": {
                format += this._usTimeFormat ? ", h:i A" : " H:i";
                break;
            }
        }
        return format;
    };
    DatesImpl.prototype.getLocalUTime = function() {
        return Math.round(new Date().getTime() / 1000);
    };
    DatesImpl.prototype.timestamp2date = function(format, timestamp, offset) {
        if (offset === void 0) {
            offset = 0;
        }
        var monthName = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ];
        var monthNameShort = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
        ];
        var time = new Date();
        if (!timestamp && timestamp != 0) {
            timestamp = Math.round(new Date().getTime() / 1000);
        }
        time.setTime((timestamp + time.getTimezoneOffset() * 60 - offset) * 1000);
        var _zerosPrepend = function(value, length) {
            var _len;
            if (!length) {
                length = 2;
            }
            _len = value.length;
            while (_len < length) {
                value = "0" + value;
                _len = value.length;
            }
            return value;
        };
        var d = time.getDate();
        var m = time.getMonth() + 1;
        var y = time.getFullYear();
        var H = time.getHours();
        var i = time.getMinutes();
        var s = time.getSeconds();
        var dateParts = {
            d: _zerosPrepend(String(d)),
            j: d,
            F: monthName[m - 1],
            m: _zerosPrepend(String(m)),
            M: monthNameShort[m - 1],
            n: m,
            y: String(y).slice(2),
            Y: y,
            g: H % 12 || 12,
            G: H,
            h: _zerosPrepend(String(H % 12 || 12)),
            H: _zerosPrepend(String(H)),
            i: _zerosPrepend(String(i)),
            s: _zerosPrepend(String(s)),
            a: H > 11 ? "pm" : "am",
            A: H > 11 ? "PM" : "AM",
        };
        var _replacer = function(substring) {
            if (substring in dateParts) {
                return dateParts[substring];
            }
            return substring.slice(1, substring.length - 1);
        };
        return format.replace(/[djFmMnyYgGhHisaA]|"[^"]*"|'[^']*'/g, _replacer);
    };
    DatesImpl.prototype.formatBirthOrDeathDay = function(format, time) {
        var userLocalTimezoneOffset = new Date().getTimezoneOffset() * 60;
        return this.timestamp2date(format, time, userLocalTimezoneOffset);
    };
    DatesImpl.prototype.getLastMidnight = function() {
        return this.getMidnight();
    };
    DatesImpl.prototype.getNextMidnight = function() {
        return this.getMidnight() + 24 * 60 * 60;
    };
    DatesImpl.prototype.getMidnight = function(time) {
        var now = new Date();
        if (time) {
            now = new Date(time * 1000);
        }
        var gmtOffset = this._utilEnviroment.getGmtOffset()();
        var localTimezoneOffsetSeconds = now.getTimezoneOffset() * 60;
        now.setTime((now.getTime() / 1000 + localTimezoneOffsetSeconds - gmtOffset) * 1000);
        return Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0) / 1000 + gmtOffset;
    };
    DatesImpl.prototype.getNow = function() {
        return Math.floor(new Date().getTime() / 1000);
    };
    DatesImpl.prototype.getAge = function(birthday, dateOfDeath) {
        var nowTs = dateOfDeath || this.getNow();
        var now = new Date(nowTs * 1000);
        var birthDate = new Date(birthday * 1000);
        var ageYears = now.getFullYear() - birthDate.getFullYear();
        var ageMonths = now.getMonth() - birthDate.getMonth();
        if (ageMonths < 0 || (ageMonths === 0 && now.getDate() < birthDate.getDate())) {
            ageYears--;
        }
        return ageYears;
    };
    DatesImpl.prototype.isToday = function() {
        return this._utilEnviroment.getSudate() === 0;
    };
    DatesImpl.prototype.isDaylightSavingTime = function(date) {
        var currentOffset = date.getTimezoneOffset();
        var offsetInJanuary = new Date(date.getFullYear(), 0, 1).getTimezoneOffset();
        var offsetInJuly = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        return Math.max(offsetInJanuary, offsetInJuly) > currentOffset;
    };
    DatesImpl.prototype.getMatchDay = function(startTime, endTime) {
        var gmtOffset = this._utilEnviroment.getGmtOffset()();
        var localDate = new Date();
        localDate.setTime((this.getTimestamp() + localDate.getTimezoneOffset() * 60 - gmtOffset) * 1000);
        var localDateStart = Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), 0, 0, 0) / 1000 + gmtOffset;
        var _start = this._getDayDiff(startTime, localDateStart);
        if (!endTime) {
            return [_start];
        }
        var _end = this._getDayDiff(endTime, localDateStart);
        var ret = [];
        if (_end >= _start) {
            var i = _start;
            while (i <= _end) {
                ret.push(i);
                i++;
            }
        }
        return ret;
    };
    DatesImpl.prototype._getDayDiff = function(time1, time2) {
        var secondsPerDay = 24 * 60 * 60;
        var diffTime = (time1 - time2) / secondsPerDay;
        return Math.floor(diffTime);
    };
    return DatesImpl;
}());
var create = function(utilEnviroment) {
    return new DatesImpl(cjs.Api.config.get("app", "US_time_format"), utilEnviroment);
};
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton("util_date", create, [
    "utilDate",
]);
window.cjs = window.cjs || {};
window.cjs.LsUtil = window.cjs.LsUtil || {};
window.cjs.LsUtil.createDateImpl = create;
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = create;
}
(function() {
    var Enviroment;

    Enviroment = {
        open: function(url) {
            return window.open(url);
        },
        detailOpen: function(id, tab, checkHolder) {
            return cjs.Api.loader.get('detail/opener').call(id, tab, checkHolder);
        },
        detailOpenWithEventId: function(id, tab) {
            return cjs.Api.loader.get('detail/opener/eventId').call(id, tab);
        },
        bookmakerOpen: function(link, bookmakerId, betslip) {
            return window.bookmaker_open(link, bookmakerId, betslip);
        },
        statsOpen: function(tournamentId, tournamentStageId, sportId, statsType, highlightParticipants, eventEncodedId) {
            return window.stats_open(tournamentId, tournamentStageId, sportId, statsType, highlightParticipants, eventEncodedId);
        },
        getGmtOffset: function() {
            return cjs.Api.timezone.getGmtOffset.bind(cjs.Api.timezone);
        },
        getGmtOffsetDiff: function() {
            return cjs.Api.timezone.getGmtOffsetDiff();
        },
        getOddsFormat: function() {
            return get_odds_format;
        },
        hourFormat: function() {
            return cjs.hourFormat;
        },
        dateFormat: function() {
            return cjs.dateFormat;
        },
        dateTimeFormat: function() {
            return cjs.dateTimeFormat;
        },
        fullDateShortFormat: function() {
            return cjs.fullDateShortFormat;
        },
        fullDateTimeFormat: function() {
            return cjs.fullDateTimeFormat;
        },
        getTimezone: function() {
            return cjs.Api.timezone.getActualTimezone();
        },
        getNavigator: function() {
            return navigator;
        },
        getUserAgent: function() {
            return navigator.userAgent || "";
        },
        getLocation: function() {
            return location;
        },
        getOpener: function() {
            return opener;
        },
        hasWindowOrientation: function() {
            return window.orientation != null;
        },
        hasChromeObject: function() {
            return window.chrome != null;
        },
        getConfig: function() {
            return cjs._config;
        },
        getTranslates: function() {
            return cjs._translates;
        },
        getList: function() {
            return cjs._list;
        },
        getConstants: function() {
            return cjs.constants;
        },
        getFeedIndexes: function() {
            return cjs.constants.FEED;
        },
        getSport: function() {
            return window.sport;
        },
        getSportId: function() {
            return window.sport_id;
        },
        getSportUrl: function() {
            return window.sport_url;
        },
        getParticipantEncodedIds: function() {
            return window.participantEncodedIds;
        },
        getTournamentStageEncodedId: function() {
            return window.tournamentStageEncodedId;
        },
        getTournamentEncodedId: function() {
            return window.tournamentEncodedId;
        },
        getEventEncodedId: function() {
            return cjs.eventId || "";
        },
        getTournamentNameWithStage: function() {
            return window.tournamentNameWithStage;
        },
        getPageTab: function() {
            return cjs.pageTab || '';
        },
        getFsDetail: function() {
            return window.fs_detail;
        },
        getGameUTime: function() {
            return window.game_utime;
        },
        getGameUTimeEnd: function() {
            return window.game_utime_end;
        },
        getFsUpdate: function() {
            return window.fs_update;
        },
        getCoreUpdate: function() {
            return window.core_update;
        },
        getSportUrlsById: function() {
            return window.SPORT_URL_BY_ID;
        },
        getSportListById: function() {
            return window.SPORT_LIST_BY_ID;
        },
        getSportList: function() {
            return window.SPORT_LIST;
        },
        getTournamentTemplateCategoryList: function() {
            return cjs.tournamentTemplateCategoryList;
        },
        getParentSports: function() {
            var ref;
            if (((ref = cjs.cfg) != null ? ref.parentSports : void 0) != null) {
                return cjs.cfg.parentSports;
            } else {
                return {};
            }
        },
        getGeoIp: function(callback) {
            return cjs.Api.loader.get("geoIpResolver").call(callback);
        },
        getGeoIpCityName: function() {
            return cjs.geoIPCityName;
        },
        getGeoIpSubdivisionName0: function() {
            return cjs.geoIPSubdivisionName0;
        },
        getGeoIpSubdivisionCode0: function() {
            return cjs.geoIPSubdivisionCode0;
        },
        getGeoIpIsoSubdivisionCode0: function() {
            return cjs.geoIPIsoSubdivisionCode0;
        },
        getGeoIpSubdivisionName1: function() {
            return cjs.geoIPSubdivisionName1;
        },
        getGlobalGeoIp: function() {
            return cjs.geoIP;
        },
        getMixedFeed: function() {
            return window.mixed_feed;
        },
        getBaseUrl: function() {
            return window.base_url_protocol;
        },
        getBaseImageUrl: function() {
            return window.base_image_url;
        },
        getBaseImageDataUrl: function() {
            return window.base_image_data_url;
        },
        getBaseProjectImageUrl: function() {
            return window.base_project_image_url;
        },
        getFeedProxyUrl: function() {
            return window.feedProxyUrl;
        },
        getSearchInfo: function() {
            return cjs.search;
        },
        getSuperTemplateDefinition: function() {
            return cjs.superTemplateDefinition;
        },
        getTournamentPageTab: function() {
            return window.tournamentPageTab;
        },
        isDetailPage: function() {
            return (cjs.isDetailPage != null) && cjs.isDetailPage;
        },
        isNoDuelTournament: function() {
            return isNoDuelTournament;
        },
        isNoDuelTournamentByLeagueId: function(leagueId) {
            return isNoDuelTournament(leagueId);
        },
        getCompleteSportTranslations: function() {
            if (this.isResponsive()) {
                return window.TXT_SPORT_MOBILE;
            } else {
                return window.TXT_SPORT;
            }
        },
        getShortSportTranslations: function() {
            return window.TXT_SPORT_MOBILE;
        },
        getSudate: function() {
            return window.sudate;
        },
        getUpdater: function() {
            return window.updater;
        },
        getSentences: function() {
            return window.sentences;
        },
        getSentencesParts: function() {
            return window.sentences_parts;
        },
        getCategory: function() {
            return window.category;
        },
        getNavigationCategory: function() {
            return window.navigation_category;
        },
        getSubCategory: function() {
            return window.sub_category;
        },
        getHasOddsBetslip: function() {
            return window.odds_betslip;
        },
        getPreloadShow: function() {
            return window.preload_show;
        },
        getPreloadHide: function() {
            return window.preload_hide;
        },
        getPageScrollTop: function() {
            return window.pageYOffset || document.documentElement.scrollTop;
        },
        getFeedRequestObject: function() {
            window.initFeedRequest();
            return cjs.feedRequest;
        },
        getMyTeamsObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback();
            }
            return cjs.myTeams;
        },
        getMyLeaguesObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback();
            }
            return cjs.myLeagues;
        },
        getMyGamesObject: function() {
            return cjs.mygames;
        },
        getLoginClientObject: function() {
            return typeof ls !== "undefined" && ls !== null ? ls.loginClient : void 0;
        },
        getTooltipObject: function(beforeCallback) {
            if (typeof beforeCallback === "function") {
                beforeCallback();
            }
            if (!window.tt) {
                window.tt = new tooltip();
            }
            return window.tt;
        },
        getFormater: function() {
            return formater;
        },
        getHtmlTemplate: function() {
            return cjs.HtmlTemplate;
        },
        getProjectTypeId: function() {
            return project_type_id;
        },
        getProjectTypeName: function() {
            return project_type_name;
        },
        getOddsBettingTypes: function() {
            return window.odds_betting_types;
        },
        getOddsSportScopes: function() {
            return window.odds_sport_scope_list;
        },
        getSearchSportOrder: function(sportId) {
            var ref, ref1;
            if (((ref = cjs.search) != null ? (ref1 = ref.sortedSports) != null ? ref1[sportId] : void 0 : void 0) == null) {
                return 99;
            }
            return cjs.search.sortedSports[sportId];
        },
        getSearchParticipantTitle: function(sportId, isPlayer) {
            var ref, ref1;
            if (((ref = cjs.search) != null ? (ref1 = ref.participantsTitles) != null ? ref1[sportId] : void 0 : void 0) == null) {
                return '';
            }
            if (isPlayer && (cjs.search.participantsTitles[sportId]['players'] != null)) {
                return cjs.search.participantsTitles[sportId]['players'];
            } else if (cjs.search.participantsTitles[sportId]['teams'] != null) {
                return cjs.search.participantsTitles[sportId]['teams'];
            } else {
                return cjs.search.participantsTitles[sportId];
            }
        },
        getSportsCountObject: function() {
            var ref;
            return (ref = window.l.sports_count) != null ? ref : {};
        },
        getMatchDay: function(startTime, endTime) {
            return window.get_match_day(startTime, endTime);
        },
        getRequestUrl: function(urlPart) {
            return req_url + urlPart;
        },
        getFeedUrl: function(urlPart) {
            return base_feed_x_url + urlPart;
        },
        getParse: function() {
            return window.parse;
        },
        createAjaxFeedObject: function(url, completeCallback, action) {
            return new cjs.AjaxJqObject(url, cjs.feedProxy, completeCallback, action, void 0, function() {
                return u_304;
            }, true, feed_sign);
        },
        getParserConfig: function() {
            return {
                JS_ROW_END: JS_ROW_END,
                JS_CELL_END: JS_CELL_END,
                JS_INDEX: JS_INDEX
            };
        },
        geoIpIsEu: function(doneCallback) {
            return this.getGeoIp((function(_this) {
                return function() {
                    var codes, ref, ref1;
                    codes = (ref = _this.getConfig().app) != null ? (ref1 = ref.european_union_states) != null ? ref1.codes : void 0 : void 0;
                    if (codes.indexOf(_this.getGlobalGeoIp()) !== -1) {
                        return doneCallback(true);
                    } else {
                        return doneCallback(false);
                    }
                };
            })(this));
        },
        getEventTrackingObject: function() {
            return window.e_t;
        },
        getCfg: function() {
            return cjs.cfg;
        },
        getConfigHashId: function() {
            return window.config_hash_id;
        },
        getBookmakerLink: function() {
            return window.bookmaker_link;
        },
        getWaypoint: function() {
            return window.Waypoint;
        },
        getBookmakersData: function() {
            return cjs.bookmakersData;
        },
        getBookmakerGeoGroups: function() {
            return cjs.bookmakerGeoGroups;
        },
        getBookmakerLogos: function() {
            return cjs.bookmakerLogos;
        },
        getRightZoneBookmakerLogos: function() {
            return cjs.rightZoneBookmakerLogos;
        },
        getAvailableBookmakers: function() {
            return cjs.availableBookmakers;
        },
        getAllowedTvs: function() {
            return cjs.allowedTvs;
        },
        prepareFeedProxy: function(cb) {
            return cjs.feedProxy = new cjs.AjaxProxy(this.getFeedProxyUrl(), cb);
        },
        projectHasLiveCentre: function() {
            var ref;
            return (ref = this.getProjectTypeName()) === '_scoreboard' || ref === '_ass' || ref === '_portable';
        },
        getEventStageTrans: function() {
            if (window.event_stage_trans != null) {
                return window.event_stage_trans;
            } else {
                return [];
            }
        },
        getCalendarConfig: function() {
            return window.calendar;
        },
        getSetCounterTime: function(eventId, callback) {
            return cjs.dic.get("util_CounterHandler").set_counter_time(eventId, callback);
        },
        getCounterFormat: function(eventId, withHtml, wrapLines, withWrapper, withStage) {
            return cjs.dic.get("util_CounterHandler").counter_format(eventId, withHtml, wrapLines, withWrapper, withStage);
        },
        getShortCounterFormat: function(eventId, withHtml, wrapLines, withWrapper, withStage) {
            return cjs.dic.get("util_CounterHandler").short_counter_format(eventId, withHtml, wrapLines, withWrapper, withStage);
        },
        getSetCalendarDate: function() {
            return window.set_calendar_date;
        },
        usStyleWinLossMark: function() {
            return window.usStyleWinLossMark;
        },
        isNoDuelSport: function(sportId) {
            return window.isNoDuelSport(sportId);
        },
        getDefaultOddsFormat: function() {
            return window.default_odds_format;
        },
        getOddsFormatList: function() {
            return window.ODDS_FORMAT_LIST;
        },
        setDefaultOddsFormat: function(oddsFormat) {
            return window.setDefaultOddsFormat(oddsFormat);
        },
        getOddsFormatValue: function() {
            return window.get_odds_format();
        },
        hideOddsBasicInfoBox: function() {
            return window.hideOddsBasicInfoBox();
        },
        getOddsContentValue: function(isEventStageWithoutWinner, hasUsHandicap, singleOddsInCurrentFormatGetter, singleHandicapInRightFormatGetter, outcome_type, eventItem, current_odds, odds_side_class, divider) {
            return window.get_odds_content(isEventStageWithoutWinner, hasUsHandicap, singleOddsInCurrentFormatGetter, singleHandicapInRightFormatGetter, outcome_type, eventItem, current_odds, odds_side_class, divider);
        },
        getSpreadTrans: function() {
            return window.getSpreadTrans();
        },
        parse: function(fsInput, update, odds, action) {
            return parse(fsInput, update, odds, action);
        },
        reSortDetailTable: function(el, colIndex) {
            return window.ts_resortTable(el, colIndex);
        },
        getFullLoaded: function() {
            return cjs.full_loaded;
        },
        getLivescoreSettings: function() {
            return cjs.livescoreSettings;
        },
        isResponsive: function() {
            var ref, ref1;
            return !cjs.dic.get('Helper_ViewportSwitcher').userOverride() && window.innerWidth < ((ref = this.getConfig().app) != null ? (ref1 = ref.responsive) != null ? ref1.breakpoint : void 0 : void 0);
        },
        getJquery: function() {
            return window.jQuery;
        },
        getSportReversedList: function() {
            if (window.SPORT_REVERSED_TIME_LIST != null) {
                return window.SPORT_REVERSED_TIME_LIST;
            } else {
                return {};
            }
        },
        getFullDateFormat: function() {
            return cjs.fullDateFormat;
        },
        getGamePlanSettings: function() {
            return window.getGamePlanSettings();
        },
        getFullFeedTrigger: function() {
            return window.fullfeed_trigger;
        },
        getLoader: function() {
            return cjs.Api.loader;
        },
        getCategorySports: function() {
            return cjs.cfg.categorySports;
        },
        changeTzCallback: function() {
            return window.change_tz_callback();
        },
        refreshIframe: function() {
            return refresh_iframe();
        },
        responseGameHandler: function(content, forceReload) {
            return response_game_handler(content, forceReload);
        },
        updateDetailLiveOdds: function(content, hash) {
            return updateDetailLiveOdds(content, hash);
        },
        setServiceStatus: function(value, forceReload) {
            return set_service_status(value, forceReload);
        },
        setAjaxSyncMultiplier: function(value, feed) {
            return setAjaxSyncMultiplier(value, feed);
        },
        checkStaticSerial: function(value) {
            return check_static_serial(value);
        },
        getLsLoginClient: function() {
            return ls.loginClient;
        },
        getLocalStorage: function() {
            return window.localStorage;
        },
        openStreamWindow: function(type, paramId) {
            return cjs.Api.loader.get('tv/streamOpener').call(type, paramId);
        },
        getDisabledVideoHighlightGeoIps: function() {
            return window.disabledVideoHighlightGeoIps;
        }
    };

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('util_enviroment', Enviroment, ['utilEnviroment']);

}).call(this);
"use strict";
var NumberImpl = (function() {
    function NumberImpl() {}
    NumberImpl.prototype.toNumber = function(value) {
        var ret = Number(value);
        if (isNaN(ret)) {
            ret = 0;
        }
        return ret;
    };
    NumberImpl.prototype.format = function(value, thousandsSeparator) {
        if (thousandsSeparator === void 0) {
            thousandsSeparator = " ";
        }
        if ((typeof value === "number" && isNaN(value)) || typeof value !== "number") {
            return "";
        }
        var neg = value < 0;
        value = Math.abs(value);
        if (value < 1000) {
            return "" + value;
        }
        var main = Math.floor(value / 1000);
        var rest = value % 1000;
        var formattedMain = this.format(main, thousandsSeparator);
        var formattedRest = "";
        formattedRest = String(rest).padStart(3, "0");
        return (neg ? "-" : "") + ("" + formattedMain + thousandsSeparator + formattedRest);
    };
    NumberImpl.prototype.getRandomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    return NumberImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_number", NumberImpl, [
    "utilNumber",
]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = NumberImpl;
}
"use strict";
var PageImpl = (function() {
    function PageImpl() {
        this._detailParticipantPage = false;
        this._detailPage = false;
        this._fullPage = false;
        this._mixedFeed = false;
        this._parentSportId = 0;
        this._tournamentPage = false;
        this._tournamentSubPage = false;
        this._tournamentPagePassiveTable = false;
        this._subPage = false;
        this._pageType = "";
        this._countryId = 0;
        this._seriesEncodedId = "";
        this._participantEncodedId = "";
        this._pageTypeList = cjs.Api.constantsManager.getPageTypes();
    }
    PageImpl.prototype.setDetailParticipantPage = function(value) {
        this._detailParticipantPage = value;
    };
    PageImpl.prototype.isDetailParticipantPage = function() {
        return this._detailParticipantPage;
    };
    PageImpl.prototype.setDetailPage = function(value) {
        this._detailPage = value;
    };
    PageImpl.prototype.isDetailPage = function() {
        return this._detailPage;
    };
    PageImpl.prototype.setMixedFeed = function(value) {
        this._mixedFeed = value;
    };
    PageImpl.prototype.isMixed = function() {
        return this._mixedFeed;
    };
    PageImpl.prototype.setParentSportId = function(value) {
        this._parentSportId = value;
    };
    PageImpl.prototype.isParent = function() {
        return this._parentSportId > 0;
    };
    PageImpl.prototype.setFullPage = function(value) {
        this._fullPage = value;
    };
    PageImpl.prototype.isFullPage = function() {
        return this._fullPage;
    };
    PageImpl.prototype.setTournamentPage = function(value) {
        this._tournamentPage = value;
    };
    PageImpl.prototype.isTournamentPage = function() {
        return this._tournamentPage;
    };
    PageImpl.prototype.setTournamentSubPage = function(value) {
        this._tournamentSubPage = value;
    };
    PageImpl.prototype.isTournamentSubPage = function() {
        return this._tournamentSubPage;
    };
    PageImpl.prototype.setTournamentPagePassiveTable = function(value) {
        this._tournamentPagePassiveTable = value;
    };
    PageImpl.prototype.isTournamentPagePassiveTable = function() {
        return this._tournamentPagePassiveTable;
    };
    PageImpl.prototype.setParticipantEncodedId = function(value) {
        this._participantEncodedId = value;
    };
    PageImpl.prototype.getParticipantEncodedId = function() {
        return this._participantEncodedId;
    };
    PageImpl.prototype.isParticipantPage = function() {
        return this._participantEncodedId !== "";
    };
    PageImpl.prototype.isParticipantPageSummary = function() {
        return this.isParticipantPage() && !this.isSubPage();
    };
    PageImpl.prototype.isTeamPage = function() {
        return this.isParticipantPage() && this.getPageType() === this._pageTypeList.PAGE_TYPE_TEAM;
    };
    PageImpl.prototype.setSeriesEncodedId = function(value) {
        this._seriesEncodedId = value;
    };
    PageImpl.prototype.isSeriesPage = function() {
        return this._seriesEncodedId !== "";
    };
    PageImpl.prototype.isSeasonPage = function() {
        return this.isTournamentPage() || this.isParticipantPage() || this.isSeriesPage();
    };
    PageImpl.prototype.setCountryId = function(value) {
        this._countryId = value;
    };
    PageImpl.prototype.getCountryId = function() {
        return this._countryId;
    };
    PageImpl.prototype.isCountryPage = function() {
        return this._countryId > 0 && !this.isSeasonPage();
    };
    PageImpl.prototype.setSubPage = function(value) {
        this._subPage = value;
    };
    PageImpl.prototype.isSubPage = function() {
        return this._subPage;
    };
    PageImpl.prototype.setPageType = function(value) {
        this._pageType = value;
    };
    PageImpl.prototype.getPageType = function() {
        return this._pageType;
    };
    return PageImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_page", PageImpl, [
    "utilPage",
]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = PageImpl;
}
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SimpleStorageImpl = (function() {
    function SimpleStorageImpl(storage) {
        this.storage = storage;
    }
    SimpleStorageImpl.prototype.get = function(key) {
        var storedJson = this.storage.getItem(key);
        if (!storedJson)
            return null;
        var _a = JSON.parse(storedJson),
            value = _a.value,
            validTo = _a.validTo;
        if (validTo && !this.checkValidTo(validTo)) {
            this.storage.removeItem(key);
            return null;
        }
        return value;
    };
    SimpleStorageImpl.prototype.store = function(key, value, ttl) {
        this.storage.setItem(key, JSON.stringify({
            value: value,
            validTo: ttl ? Math.round(ttl) + this._getTimeStamp() : undefined,
        }));
        return true;
    };
    SimpleStorageImpl.prototype._getTimeStamp = function() {
        return Math.round(new Date().getTime() / 1000);
    };
    SimpleStorageImpl.prototype.checkValidTo = function(validTo) {
        return validTo > this._getTimeStamp();
    };
    return SimpleStorageImpl;
}());
var SimplePersistentStorage = (function(_super) {
    __extends(SimplePersistentStorage, _super);

    function SimplePersistentStorage() {
        return _super.call(this, localStorage) || this;
    }
    return SimplePersistentStorage;
}(SimpleStorageImpl));
var isJestTest = window && window.process && window.process.env.JEST_WORKER_ID;
var dic = ((typeof window !== "undefined" && window !== null ? window : global).cjs || {}).dic || {};
if (isJestTest) {
    module.exports = SimpleStorageImpl;
    if (!dic.registerSingleton) {
        dic.registerSingleton = function() {};
    }
    dic.registerSingleton("SimpleStorage", function() {
        return new SimplePersistentStorage();
    }, []);
}
if ((window || global).cjs && !isJestTest) {
    if (!dic.registerSingleton) {
        dic.registerSingleton = function() {};
    }
    dic.registerSingleton("SimpleStorage", function() {
        return new SimplePersistentStorage();
    }, []);
} else {
    module.exports = SimpleStorageImpl;
}
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var SportImpl = (function() {
    function SportImpl(utilEnviroment, utilString, utilTrans) {
        this._utilConfig = cjs.Api.config;
        this._utilEnvironment = utilEnviroment;
        this._sportList = cjs.Api.constantsManager.getSports();
        this._utilString = utilString;
        this._utilTrans = utilTrans;
    }
    SportImpl.prototype.getId = function() {
        var sportId = this._utilEnvironment.getSportId();
        if (sportId) {
            return sportId;
        } else {
            var sportName = this._utilEnvironment.getSport();
            sportId = this.getIdFromName(sportName);
            if (sportId) {
                return sportId;
            } else {
                var sportUrl = this._utilEnvironment.getSportUrl();
                if (sportUrl) {
                    var translatedSportName = this._utilString.trim(sportUrl, "/");
                    sportId = this.getIdFromTranslatedName(translatedSportName);
                    if (sportId) {
                        return sportId;
                    }
                }
            }
        }
        return 0;
    };
    SportImpl.prototype.getIdFromName = function(name) {
        var sports = this._utilEnvironment.getSportList();
        if (sports.hasOwnProperty(name)) {
            return sports[name];
        }
        return 0;
    };
    SportImpl.prototype.getIdFromTranslatedName = function(name) {
        var e_1, _a;
        var urls = this._utilEnvironment.getSportUrlsById();
        try {
            for (var _b = __values(Object.keys(urls)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var id = parseInt(key);
                var urlName = name ? name + "/" : name;
                if (urls[id] === "/" + urlName) {
                    return id;
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        return 0;
    };
    SportImpl.prototype.getTranslatedName = function(id, originalName) {
        if (originalName === void 0) {
            originalName = "";
        }
        var translations = this._utilEnvironment.getCompleteSportTranslations();
        if (id && !originalName) {
            originalName = this.getOriginalNameFromId(id);
        }
        return originalName &&
            translations.hasOwnProperty(originalName) &&
            translations[originalName].hasOwnProperty("name") ?
            translations[originalName]["name"] :
            "";
    };
    SportImpl.prototype.getOriginalNameFromId = function(id) {
        var sportList = this._utilEnvironment.getSportListById();
        return sportList.hasOwnProperty(id) ? sportList[id] : "";
    };
    SportImpl.prototype.getTranslatedMenuName = function(id, originalName) {
        if (originalName === void 0) {
            originalName = "";
        }
        var sportNameUpper = "";
        if (id && !originalName) {
            originalName = this.getOriginalNameFromId(id);
        }
        sportNameUpper = originalName.replace(/-/, "_").toUpperCase();
        return this._utilTrans.translate("TRANS_MENU_" + sportNameUpper);
    };
    SportImpl.prototype.getTranslatedUrlName = function(id) {
        var urls = this._utilEnvironment.getSportUrlsById();
        return urls.hasOwnProperty(id) ? this._utilString.trim(urls[id], "/") : "";
    };
    SportImpl.prototype.getAllTranslatedSports = function() {
        var e_2, _a;
        var allTranslatedSports = {};
        try {
            for (var _b = __values(Object.values(this._getSportsProvider())), _c = _b.next(); !_c.done; _c = _b.next()) {
                var sportId = _c.value;
                allTranslatedSports[sportId] = this.getTranslatedName(sportId);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_2) throw e_2.error;
            }
        }
        return allTranslatedSports;
    };
    SportImpl.prototype._getSportsProvider = function() {
        var valuesFromSportList = Object.values(this._sportList);
        var keysFromSportList = Object.keys(this._sportList);
        var onlySportsList = {};
        for (var val in valuesFromSportList) {
            if (!isNaN(valuesFromSportList[parseInt(val)])) {
                onlySportsList[keysFromSportList[val]] = valuesFromSportList[parseInt(val)];
            }
        }
        return onlySportsList;
    };
    SportImpl.prototype.exists = function(sportId, sportName) {
        if (sportId === void 0) {
            sportId = 0;
        }
        if (sportName === void 0) {
            sportName = "";
        }
        if (sportId) {
            return this.getOriginalNameFromId(sportId) !== "";
        } else if (sportName) {
            return this.getIdFromName(sportName) !== 0;
        }
        return false;
    };
    SportImpl.prototype.translatedNameExists = function(sportName) {
        return this.getIdFromTranslatedName(sportName) > 0;
    };
    SportImpl.prototype.getParentSport = function(id) {
        var parentSports = this._utilEnvironment.getParentSports();
        return parentSports.hasOwnProperty(id) ? parentSports[id] : null;
    };
    SportImpl.prototype.inGroup = function(id, parentId) {
        return id === parentId || this.getParentSport(id) === parentId;
    };
    SportImpl.prototype.isGroupSport = function(id) {
        var e_3, _a;
        var parentSports = this._utilEnvironment.getParentSports();
        try {
            for (var _b = __values(Object.keys(parentSports)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (parentSports[parseInt(key)] === id) {
                    return true;
                }
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_3) throw e_3.error;
            }
        }
        return false;
    };
    SportImpl.prototype.isMeetingSport = function(id) {
        if (id === this._sportList.HORSE_RACING) {
            return true;
        }
        return this.inGroup(id, this._sportList.WINTER_SPORTS);
    };
    SportImpl.prototype.isStageSport = function(id) {
        if (id === this._sportList.CYCLING) {
            return true;
        }
        return (this.isMeetingSport(id) ||
            this.inGroup(id, this._sportList.MOTORSPORT) ||
            this.inGroup(id, this._sportList.WINTER_SPORTS));
    };
    SportImpl.prototype.isRacingSport = function(id) {
        if ([this._sportList.CYCLING, this._sportList.HORSE_RACING].indexOf(id) != -1) {
            return true;
        }
        return this.inGroup(id, this._sportList.MOTORSPORT) || this.inGroup(id, this._sportList.WINTER_SPORTS);
    };
    SportImpl.prototype.isMotorSport = function(id) {
        return this.inGroup(id, this._sportList.MOTORSPORT);
    };
    SportImpl.prototype.isServingSport = function(id) {
        return ([
            this._sportList.AMERICAN_FOOTBALL,
            this._sportList.TENNIS,
            this._sportList.BADMINTON,
            this._sportList.CRICKET,
            this._sportList.BASEBALL,
            this._sportList.PESAPALLO,
            this._sportList.DARTS,
        ].indexOf(id) !== -1);
    };
    SportImpl.prototype.isCategorySport = function(id) {
        return this._utilEnvironment.getCategorySports().indexOf(id) != -1;
    };
    SportImpl.prototype.getMainSport = function(id) {
        var parentSportId = this.getParentSport(id);
        if (parentSportId) {
            return parentSportId;
        }
        return id;
    };
    SportImpl.prototype.getSportIdsInParentSport = function(id) {
        var e_4, _a;
        var sportIds = [];
        var parentSports = this._utilEnvironment.getParentSports();
        try {
            for (var _b = __values(Object.keys(parentSports)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var childSportIdString = _c.value;
                var childSportId = parseInt(childSportIdString);
                if (parentSports[childSportId] === id) {
                    sportIds.push(childSportId);
                }
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_4) throw e_4.error;
            }
        }
        return sportIds;
    };
    SportImpl.prototype.getRacingSportShortLapsLabel = function(id) {
        var label = "";
        if (this.inGroup(id, this._sportList.MOTORSPORT)) {
            label = this._utilTrans.translate("TRANS_MOTORSPORT_LAP_SHORT");
        } else if (this.inGroup(id, this._sportList.WINTER_SPORTS)) {
            label = this._utilTrans.translate("TRANS_WINTER_SPORTS_LAP_SHORT");
        }
        return label;
    };
    SportImpl.prototype.hasCategoryPage = function(id) {
        var sportsHasCategoryPage = this._utilConfig.get("app", "has_category_page");
        return sportsHasCategoryPage.indexOf(id) !== -1;
    };
    SportImpl.prototype.getSportCategoryId = function(leagueItem) {
        if (this.inGroup(leagueItem.getSportId(), this._sportList.MOTORSPORT)) {
            var sortKey = leagueItem.getSortKey();
            return parseInt(sortKey.substr(2, sortKey.indexOf(".") - 2));
        }
        return 0;
    };
    SportImpl.prototype.isGolf = function(sportId) {
        return sportId === this._sportList.GOLF;
    };
    SportImpl.prototype.hasDisabledDetail = function(sportId) {
        var sportsHasCategoryPage = this._utilConfig.get("app", "sports_without_detail");
        return sportsHasCategoryPage.indexOf(sportId) !== -1;
    };
    SportImpl.prototype.getBettingTypeId = function(sportId) {
        if (sportId === void 0) {
            sportId = 0;
        }
        if (!sportId) {
            sportId = this.getId();
        }
        var oddsBettingTypes = this._utilEnvironment.getOddsBettingTypes();
        if (sportId && oddsBettingTypes.hasOwnProperty(sportId)) {
            return oddsBettingTypes[sportId];
        }
        return 0;
    };
    SportImpl.prototype.getOddsScope = function(sportId) {
        if (sportId === void 0) {
            sportId = 0;
        }
        if (!sportId) {
            sportId = this.getId();
        }
        var oddsSportScopes = this._utilEnvironment.getOddsSportScopes();
        if (sportId && oddsSportScopes.hasOwnProperty(sportId)) {
            return oddsSportScopes[sportId];
        }
        return 0;
    };
    SportImpl.prototype.getConstant = function(id) {
        var originalName = this.getOriginalNameFromId(id);
        if (originalName) {
            return ("_" + originalName.replace(/-/g, "_")).toUpperCase();
        }
        return "";
    };
    return SportImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_sport", SportImpl, [
    "utilSport",
]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = SportImpl;
}
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var TransImpl = (function() {
    function TransImpl(utilEnviroment) {
        this._translates = utilEnviroment.getTranslates();
    }
    TransImpl.prototype.translate = function(key, args) {
        var translated = key;
        if (key in this._translates) {
            translated = this.createTranslate(this._translates[key], args);
        }
        return translated;
    };
    TransImpl.prototype.createTranslate = function(translated, args) {
        var e_1, _a;
        var _this = this;
        if (args && args.length > 0) {
            try {
                for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                    var arg = args_1_1.value;
                    if (typeof arg === "string") {
                        translated = translated.replace(/%s/, arg);
                    } else if (typeof arg === "object") {
                        var _loop_1 = function(argKey) {
                            var argValue = arg[argKey];
                            var placeholderMatch = void 0;
                            if (argKey.startsWith("%s")) {
                                translated = translated.replace(new RegExp(argKey), argValue);
                            } else if ((placeholderMatch = argKey.match(/^\[([a-zA-Z0-9_]*)\]$/))) {
                                translated = translated.replace(new RegExp("\\[" + placeholderMatch[1] + "\\](.*)\\[\\/" + placeholderMatch[1] + "\\]"), function(match, p1) {
                                    return _this.createTranslate(argValue, [p1]);
                                });
                            }
                        };
                        for (var argKey in arg) {
                            _loop_1(argKey);
                        }
                    }
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally {
                try {
                    if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
                } finally {
                    if (e_1) throw e_1.error;
                }
            }
        }
        return translated;
    };
    return TransImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_trans", TransImpl, [
    "utilTrans",
]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = TransImpl;
}
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var UrlImpl = (function() {
    function UrlImpl(utilEnviroment) {
        this._utilConfig = cjs.Api.config;
        this._utilEnvironment = utilEnviroment;
        this._regexHashPart = new RegExp("(.+)#(.+)");
    }
    UrlImpl.prototype.isAbsolute = function(url) {
        var pattern = /^(https?:\/\/|www)/i;
        return pattern.test(url);
    };
    UrlImpl.prototype.getLocationOrigin = function() {
        return window.location.origin;
    };
    UrlImpl.prototype.addQueryStringParameter = function(inputUrl, inputParams) {
        var e_1, _a;
        var url;
        var parsedSuccessfully = false;
        try {
            url = new URL(inputUrl);
            parsedSuccessfully = true;
        } catch (e) {
            url = new URL("http://dummy.url");
        }
        var urlParams = new URLSearchParams(url.search.slice(1));
        try {
            for (var _b = __values(Object.keys(inputParams)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var paramToUrl = String(inputParams[key]);
                urlParams.set(key, paramToUrl);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        var outputUrl;
        var outputUrlParams = urlParams.toString();
        if (parsedSuccessfully) {
            outputUrl =
                url.origin + url.port + url.pathname + (outputUrlParams ? "?" + outputUrlParams : "") + url.hash;
        } else {
            var paramsDelimiter = !inputUrl.includes("?") ? "?" : "&";
            var outputUrlParamsWithDelimiter = outputUrlParams ? paramsDelimiter + outputUrlParams : "";
            outputUrl = inputUrl + outputUrlParamsWithDelimiter;
            if (inputUrl.match(this._regexHashPart)) {
                outputUrl = inputUrl.replace(this._regexHashPart, "$1" + outputUrlParamsWithDelimiter + "#$2");
            }
        }
        return outputUrl;
    };
    UrlImpl.prototype.getLanguagePart = function() {
        var lang = "";
        var projectList = this._utilConfig.get("app", "lang_combo", "project_list");
        if (projectList && Object.keys(projectList).length) {
            var projectId = this._utilConfig.get("app", "project", "id");
            lang = this._getLangForProject(projectList, projectId);
        }
        return lang === "--" ? "" : lang;
    };
    UrlImpl.prototype.getLocalizedUrl = function(url) {
        var lang = this.getLanguagePart();
        return lang ? "/" + lang + url : url;
    };
    UrlImpl.prototype.getPathname = function() {
        return window.location.pathname;
    };
    UrlImpl.prototype.getBaseImageData = function(withLocationOrigin) {
        if (withLocationOrigin === void 0) {
            withLocationOrigin = false;
        }
        var baseImageDataUrl = this._utilEnvironment.getBaseImageDataUrl();
        return withLocationOrigin ? baseImageDataUrl : baseImageDataUrl.replace(this.getLocationOrigin(), "");
    };
    UrlImpl.prototype.getEmptyTeamLogo = function() {
        var baseImageDataUrl = this.getBaseImageData();
        return (baseImageDataUrl.replace("/image/data", "") +
            this._utilConfig.get("app", "empty_logo_small_path", "logo_team"));
    };
    UrlImpl.prototype.getEmptyLogoByType = function(type) {
        var config = this._utilConfig.get("app", "empty_logo_path");
        var img = config["face_" + type.replace("e", "a")] || config["logo_team"];
        return "" + this.getBaseImageData().replace("/image/data", "") + img;
    };
    UrlImpl.prototype.createBookmakerLink = function(inputParams, bookmakerId) {
        var bookmakerLink = this._utilEnvironment.getBookmakerLink() + String(bookmakerId) + "/";
        return this.addQueryStringParameter(bookmakerLink, inputParams);
    };
    UrlImpl.prototype._getLangForProject = function(projectList, value) {
        return Object.keys(projectList).find(function(key) {
            return projectList[key] === value;
        }) || "";
    };
    return UrlImpl;
}());
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("util_url", UrlImpl, [
    "utilUrl",
]);
if (typeof window === "undefined" ||
    (window && window.process && window.process.env.JEST_WORKER_ID)) {
    module.exports = UrlImpl;
}
"use strict";
var Helper;
(function(Helper) {
    var GameTimeImpl = (function() {
        function GameTimeImpl() {
            this._sportList = cjs.Api.constantsManager.getSports();
            this._liveMatchStagesQuarters = [
                cjs.Api.constantsManager.getEventStages().FIRST_QUARTER,
                cjs.Api.constantsManager.getEventStages().SECOND_QUARTER,
                cjs.Api.constantsManager.getEventStages().THIRD_QUARTER,
                cjs.Api.constantsManager.getEventStages().FOURTH_QUARTER,
                cjs.Api.constantsManager.getEventStages().EXTRA_TIME,
            ];
            this._stagesWithGameTime = [
                cjs.Api.constantsManager.getEventStages().FIRST_HALF,
                cjs.Api.constantsManager.getEventStages().SECOND_HALF,
                cjs.Api.constantsManager.getEventStages().FIRST_PERIOD,
                cjs.Api.constantsManager.getEventStages().SECOND_PERIOD,
                cjs.Api.constantsManager.getEventStages().THIRD_PERIOD,
                cjs.Api.constantsManager.getEventStages().FIRST_QUARTER,
                cjs.Api.constantsManager.getEventStages().SECOND_QUARTER,
                cjs.Api.constantsManager.getEventStages().THIRD_QUARTER,
                cjs.Api.constantsManager.getEventStages().FOURTH_QUARTER,
                cjs.Api.constantsManager.getEventStages().EXTRA_TIME,
                cjs.Api.constantsManager.getEventStages().FIRST_EXTRA_TIME,
                cjs.Api.constantsManager.getEventStages().SECOND_EXTRA_TIME,
            ];
            this._stagesExtraTime = [
                cjs.Api.constantsManager.getEventStages().EXTRA_TIME,
                cjs.Api.constantsManager.getEventStages().FIRST_EXTRA_TIME,
                cjs.Api.constantsManager.getEventStages().SECOND_EXTRA_TIME,
            ];
            this._liveMatchStagesHalves = [
                cjs.Api.constantsManager.getEventStages().FIRST_HALF,
                cjs.Api.constantsManager.getEventStages().SECOND_HALF,
            ];
            this._sportsWithCountedGameTime = [
                this._sportList.SOCCER,
                this._sportList.BANDY,
                this._sportList.RUGBY_LEAGUE,
                this._sportList.RUGBY_UNION,
            ];
            this._sportsWithContinuousMinutes = [this._sportList.HANDBALL, this._sportList.FUTSAL];
        }
        GameTimeImpl.prototype.hasStageWithTime = function(eventStage) {
            return this._stagesWithGameTime.indexOf(eventStage) > -1;
        };
        GameTimeImpl.prototype.isExtraTime = function(eventStage) {
            return this._stagesExtraTime.indexOf(eventStage) > -1;
        };
        GameTimeImpl.prototype.isLive = function(eventStage) {
            return this.hasStageWithTime(eventStage) || this.isLiveStageHalves(eventStage);
        };
        GameTimeImpl.prototype.isLiveStageHalves = function(eventStage) {
            return this._liveMatchStagesHalves.indexOf(eventStage) > -1;
        };
        GameTimeImpl.prototype.isLiveStageQuarters = function(eventStage) {
            return this._liveMatchStagesQuarters.indexOf(eventStage) > -1;
        };
        GameTimeImpl.prototype.isSportWithContinuousMinutes = function(sportId) {
            return this._sportsWithContinuousMinutes.indexOf(sportId) > -1;
        };
        GameTimeImpl.prototype.showStageInfo = function(eventItem) {
            return this.hasStageWithTime(eventItem.getStage()) && eventItem.getGameTime() > 0;
        };
        GameTimeImpl.prototype.getBlink = function(eventItem) {
            var blink = "";
            var hasSportGameTime = eventItem.getGameTime() != null && eventItem.getGameTime() > 0;
            var hasStageWithTime = this.hasStageWithTime(eventItem.getStage());
            var blinkInsertedGameTime = hasSportGameTime && hasStageWithTime;
            var blinkCountedGameTime = this._sportsWithCountedGameTime.indexOf(eventItem.getSportId()) > -1 &&
                this.isLiveStageHalves(eventItem.getStage());
            if (blinkInsertedGameTime || blinkCountedGameTime) {
                blink = '<span class="blink">&nbsp;</span>';
            }
            return blink;
        };
        GameTimeImpl.prototype.getBlinkingTime = function(gameTime) {
            return ' - </span><span class="r">' + gameTime + '<span class="blink">&nbsp;</span>';
        };
        GameTimeImpl.prototype.getTopPart = function(sportId, stage) {
            if (!(this._sportsWithCountedGameTime.indexOf(sportId) > -1)) {
                return "";
            }
            var topPartIndex = "";
            if (stage === cjs.Api.constantsManager.getEventStages().FIRST_HALF) {
                topPartIndex = "1";
            } else if (stage === cjs.Api.constantsManager.getEventStages().SECOND_HALF) {
                topPartIndex = "2";
            }
            return " - </span><span class=\"r\" id=\"atomclock\"><span id=\"part-top" + topPartIndex + "\">";
        };
        return GameTimeImpl;
    }());
    Helper.GameTimeImpl = GameTimeImpl;
})(Helper || (Helper = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Helper_GameTime", Helper.GameTimeImpl);
(function() {
    var Menu;

    Menu = (function() {
        function Menu($1) {
            this.$ = $1;
            this.tlist = {};
            this.dashStartSubstring = function(str) {
                return str.substring(str.indexOf("_") + 1, str.length);
            };
        }


        /*
        	left menu script
        	@param	string	param	id og menu element
         */

        Menu.prototype.lmenuShow = function(c_id) {
            var elm, getToggleButton, isActive, item, lmenu, sportUrl, sportUrlsById, str, submenuHtml, tclass, templateId, templateList, that, tmp_link, tmp_submenu, ul;
            getToggleButton = function(leagueKey) {
                if (typeof cjs !== "undefined" && cjs.hasOwnProperty("myLeagues") && cjs.myLeagues.isEditable()) {
                    return cjs.myLeagues.getToggleIcon(null, leagueKey);
                }
                return "";
            };
            lmenu = this.$("#lmenu_" + c_id);
            this.$(".lmenu_" + c_id + " span.more-arrow").toggleClass('less');
            if (lmenu.find(".submenu[data-ajax=\"false\"]").length && !lmenu.hasClass("active")) {
                if (lmenu.data("prepared-for-nonajax") !== true) {
                    that = this;
                    lmenu.find(".submenu li").each(function() {
                        that.$(this).prepend(getToggleButton(that.$(this).data("mt")));
                    });
                    lmenu.find(".submenu li:last").addClass("last");
                }
                lmenu.prepend(this.$("<span class=\"active-top\"></span>"));
                lmenu.append(this.$("<span class=\"active-bottom\"></span>"));
                lmenu.addClass("active").data("prepared-for-nonajax", true);
                lmenu.find(".submenu").hide().removeClass("hidden").slideDown(100, (function(_this) {
                    return function() {
                        _this.refreshWaypoints();
                    };
                })(this));
                this.tlist["vars_" + c_id] = [];
                return;
            }
            this.tlist["vars_" + c_id]["loading"] = false;
            elm = this.$("#lmenu_" + c_id).get(0);
            str = elm.innerHTML;
            tmp_link = str.match(/<a(.|\n|\s)+?<\/a>/gi);
            if (tmp_link.length > 1) {
                tmp_link = tmp_link[0];
            } else {
                tmp_link = tmp_link;
            }
            if (str.match(/<span class=(")?active-top(")?>/gi)) {
                str = elm.innerHTML.toString();
                tmp_submenu = str.match(/<ul(.|\n|\s)+?<\/ul>/gi);
                elm.innerHTML = tmp_link + tmp_submenu;
                ul = elm.getElementsByTagName("ul");
                if (typeof ul !== "undefined") {
                    that = this;
                    this.$(ul[0]).slideUp(100, "linear", function() {
                        that.$(this).parent().removeClass("active");
                        that.refreshWaypoints();
                    });
                } else {
                    this.$(elm).removeClass("active");
                }
            } else {
                templateList = this.tlist["c_" + c_id];
                submenuHtml = "<ul class=\"submenu hidden\">";
                if (lmenu.data("link") && lmenu.parent().data("trans")) {
                    isActive = lmenu.data("active") ? "active-tournament" : "";
                    submenuHtml += "<li class=\"" + isActive + "\"><a class=\"iconRankMenu\" href=\"" + lmenu.data("link") + "\" >" + lmenu.parent().data("trans") + "</a></li>";
                }
                sportUrlsById = cjs.dic.get('utilEnviroment').getSportUrlsById();
                sportUrl = sportUrlsById[lmenu.data("cid")] || sport_url;
                for (templateId in templateList) {
                    item = templateList[templateId];
                    tclass = " class=\"";
                    if (parseInt(templateId) === (templateList.length - 1)) {
                        tclass += "last";
                    }
                    if (lmenu.data("tid") === item.templateID) {
                        tclass += " tid-active";
                    }
                    tclass += "\"";
                    submenuHtml += "<li" + tclass + ">" + getToggleButton(item.leagueKey) + "<a href=\"" + (item.short_url !== undefined ? "/" + item.short_url : sportUrl + item.url) + "/" + "\">" + item.name + "</a></li>";
                }
                submenuHtml += "</ul>";
                elm.innerHTML = "<span class=\"active-top\"></span>" + tmp_link + submenuHtml + "<span class=\"active-bottom\"></span>";
                this.$(elm).addClass("active");
                this.$(elm).find(".submenu").hide().removeClass("hidden").slideDown(100, (function(_this) {
                    return function() {
                        _this.refreshWaypoints();
                    };
                })(this));
            }
            return false;
        };


        /*
        	left menu script - check data (fill or show)
        	@param	string	param	c_id og menu element
        	@param	string	param	url of data request
        	@param	string	param	s_id id of sport
         */

        Menu.prototype.lmenu = function(c_id, url, s_id) {
            var menu_ajax;
            if (typeof this.tlist["c_" + c_id] !== "undefined" || this.$("#lmenu_" + c_id + " .submenu[data-ajax=\"false\"]").length) {
                this.lmenuShow(c_id);
                return false;
            }
            this.tlist["vars_" + c_id] = Array();
            this.tlist["vars_" + c_id]["loading"] = true;
            setTimeout((function(_this) {
                return function() {
                    return _this.lmenuShowLoading(c_id);
                };
            })(this), 500);
            url += "m_" + s_id + "_" + c_id;
            menu_ajax = $.ajax({
                url: url,
                success: (function(_this) {
                    return function(content) {
                        return _this.lmenuResponse(content);
                    };
                })(this)
            });
            return false;
        };


        /*
        	left menu script - check data (fill or show)
         */

        Menu.prototype.lmenuResponse = function(r_content) {
            var c_id, c_url, data, i, j, key, row, text, val;
            data = r_content.split(JS_ROW_END);
            c_id = null;
            c_url = null;
            for (i in data) {
                row = data[i].split(JS_CELL_END);
                for (j in row) {
                    text = row[j];
                    if (!text) {
                        continue;
                    }
                    key = text.substring(0, 2);
                    val = text.substring(3);
                    if (key === "MC") {
                        c_id = val;
                        continue;
                    }
                    if (key === "ML") {
                        c_url = val;
                        continue;
                    }
                    if ((c_id == null) || (c_url == null)) {
                        continue;
                    }
                    if (typeof this.tlist["c_" + c_id] === "undefined") {
                        this.tlist["c_" + c_id] = Array();
                    }
                    if (typeof this.tlist["c_" + c_id][i] === "undefined") {
                        this.tlist["c_" + c_id][i] = Array();
                    }
                    switch (key) {
                        case "MN":
                            this.tlist["c_" + c_id][i]["name"] = val;
                            break;
                        case "MU":
                            this.tlist["c_" + c_id][i]["url"] = c_url + "/" + val;
                            break;
                        case "MT":
                            this.tlist["c_" + c_id][i]["leagueKey"] = val;
                            this.tlist["c_" + c_id][i]["templateID"] = this.dashStartSubstring(this.dashStartSubstring(val));
                            break;
                        case "MV":
                            this.tlist["c_" + c_id][i]["short_url"] = val;
                    }
                }
            }
            if ((c_id != null) && typeof this.tlist["c_" + c_id] !== "undefined") {
                this.lmenu(c_id);
            }
        };

        Menu.prototype.lmenuShowLoading = function(c_id) {
            var elm, str, tmp_link;
            elm = this.$("#lmenu_" + c_id).get(0);
            str = elm.innerHTML;
            tmp_link = str.match(/<a(.|\n|\s)+?<\/a>/gi);
            if (tmp_link.length > 1) {
                tmp_link = tmp_link[0];
            } else {
                tmp_link = tmp_link;
            }
            if (this.tlist["vars_" + c_id]["loading"]) {
                if (this.tlist["vars_" + c_id]["loading"]) {
                    this.$(elm).addClass('active');
                    elm.innerHTML = "<span class=\"active-top fake\"></span>" + tmp_link + "<ul class=\"submenu\"><li class=\"last\"><a class=\"no-underline\"><div class=\"menu_loading\">&nbsp;</div></a></li></ul><span class=\"active-bottom\"></span>";
                }
            }
        };

        Menu.prototype.refreshWaypoints = function() {
            var ref;
            return (ref = cjs.bannerScrollManager) != null ? typeof ref.refreshWaypoints === "function" ? ref.refreshWaypoints() : void 0 : void 0;
        };

        return Menu;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_Menu', Menu);

}).call(this);
(function() {
    var PlayerProfile;

    PlayerProfile = (function() {
        function PlayerProfile(util_trans, _$, util_enviroment) {
            this.util_trans = util_trans;
            this._$ = _$;
            this.util_enviroment = util_enviroment;
        }

        PlayerProfile.prototype.delegateEvents = function() {
            var firstTableId;
            $('.career-table').first().show();
            firstTableId = $('.career-table').first().attr('id');
            this._updateTable(firstTableId);
            this._$('#player-profile').on('click', 'ul.ifmenu li span a', (function(_this) {
                return function(e) {
                    var tableId;
                    tableId = _this._getCurrentCareerTableId(_this._$(e.target));
                    return _this._updateTable(tableId);
                };
            })(this));
            return this._$('#player-profile').on('click', 'div.hockeyTable__competition--click, tr.all-tournament > td.tournament-name:not(".hide-arrow")', (function(_this) {
                return function(e) {
                    var $this;
                    $this = _this._$(e.target);
                    if (_this._$(e.target).is('a')) {
                        return;
                    }
                    return _this._toggleArrow($this);
                };
            })(this));
        };

        PlayerProfile.prototype._toggleArrow = function(element) {
            var arrow, elementFS, key;
            if (element.hasClass('tournament-name') || element.hasClass('arrow')) {
                key = element.closest('tr').attr('data-key');
                if (element.hasClass('arrow')) {
                    arrow = element;
                    element = element.closest('td');
                } else {
                    arrow = element.children('span.arrow');
                }
                if (arrow.hasClass('open')) {
                    element.closest('tr').siblings('.key' + key).hide();
                    arrow.removeClass('open');
                    arrow.addClass('yet-closed');
                    if (element.attr('title') === this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS')) {
                        return element.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_SHOW_DETAILS'));
                    } else {
                        return element.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
                    }
                } else {
                    element.closest('tr').siblings('.key' + key).show();
                    arrow.addClass('open');
                    if (element.attr('title') === this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS')) {
                        return element.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_SHOW_DETAILS'));
                    } else {
                        return element.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
                    }
                }
            } else {
                elementFS = element.closest('div.hockeyTable__competition--click');
                if (elementFS.attr('title') === this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS')) {
                    return elementFS.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_SHOW_DETAILS'));
                } else {
                    return elementFS.attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
                }
            }
        };

        PlayerProfile.prototype._getCurrentCareerTableId = function(tab) {
            var className;
            tab.closest('li').siblings('li').removeClass('selected');
            tab.closest('li').addClass('selected');
            this._$('.career-table').hide();
            className = tab.attr('class');
            this._$('table#' + className + '-table').show();
            return this._$('table#' + className + '-table').attr('id');
        };

        PlayerProfile.prototype._updateTable = function(tableId) {
            this._setTotalClass(tableId);
            this._openFirstTournament(tableId);
            return this._hideTitle();
        };

        PlayerProfile.prototype._setTotalClass = function(tableId) {
            var isPrevElementEven;
            isPrevElementEven = this._$('#' + tableId + ' tr.total').prev().hasClass('even');
            if (!isPrevElementEven) {
                return this._$('#' + tableId + ' tr.total').addClass('even');
            }
        };

        PlayerProfile.prototype._openFirstTournament = function(tableId) {
            var firstLine, firstLineCup, firstLineInternational, firstLineLeague, firstLineNational;
            firstLineLeague = this._$('#league-table div.hockeyTable__row--open').first();
            firstLineLeague.find('div.hockeyTable__competition--click').attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
            firstLineNational = this._$('#national-team-table div.hockeyTable__row--open').first();
            firstLineNational.find('div.hockeyTable__competition--click').attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
            firstLineInternational = this._$('#international-cups-table div.hockeyTable__row--open').first();
            firstLineInternational.find('div.hockeyTable__competition--click').attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
            firstLineCup = this._$('#nacional-cup-table div.hockeyTable__row--open').first();
            firstLineCup.find('div.hockeyTable__competition--click').attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
            firstLine = this._$('#' + tableId + ' tr.all-tournament').first();
            if (!firstLine.find('span.arrow').hasClass('yet-closed')) {
                this._$('#' + tableId + ' tr').siblings('.key' + firstLine.attr('data-key')).show();
                firstLine.find('span.arrow').addClass('open');
                return firstLine.children('td.tournament-name').attr('title', this.util_trans.translate('TRANS_PLAYER_CAREER_HIDE_DETAILS'));
            }
        };

        PlayerProfile.prototype._hideTitle = function() {
            this._$('.hide-arrow').removeAttr('title');
            this._$('tr.tournament-stage td.tournament-name').removeAttr('title');
            this._$('.hockeyTable__competition--border').removeAttr('title');
            return this._$('.hockeyTable__competition--hide').removeAttr('title');
        };

        return PlayerProfile;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Helper_PlayerProfile', PlayerProfile);

}).call(this);
"use strict";
var Helper;
(function(Helper) {
    var LayoutTypeList;
    (function(LayoutTypeList) {
        LayoutTypeList["STANDARD"] = "fs";
        LayoutTypeList["WIDE"] = "fsw";
    })(LayoutTypeList || (LayoutTypeList = {}));
    var LayoutWidthList;
    (function(LayoutWidthList) {
        LayoutWidthList[LayoutWidthList["STANDARD"] = 1000] = "STANDARD";
        LayoutWidthList[LayoutWidthList["WIDE"] = 1140] = "WIDE";
    })(LayoutWidthList || (LayoutWidthList = {}));
    var ViewportSwitcherImpl = (function() {
        function ViewportSwitcherImpl(_$, client_storage) {
            this._storageKey = "viewport";
            this._layoutType = "fs";
            this._bodyResponsiveClassName = "responsive";
            this._bodyNonResponsiveClassName = "non-responsive";
            this._flexClassName = "footer__view--flex";
            this._orderClassName = "footer__view--order";
            this._hideTextClassName = "footer__viewText--hide";
            this._$ = _$;
            this._util_config = cjs.Api.config;
            this._client_storage = client_storage;
        }
        ViewportSwitcherImpl.prototype.delegateActions = function() {
            var _this = this;
            var $footerView = this._getFooterViewElement();
            $footerView.click(function() {
                _this.switchOnClickAction();
            });
        };
        ViewportSwitcherImpl.prototype.initViewport = function() {
            var storedLayoutType = this._client_storage.get(this._storageKey);
            if (storedLayoutType == "fs") {
                this._setViewportWidth(1000);
            } else if (storedLayoutType == "fsw") {
                this._setViewportWidth(1140);
            }
        };
        ViewportSwitcherImpl.prototype.prepareClasses = function() {
            var $bodyElement = this._getBodyElement();
            var $footerView = this._getFooterViewElement();
            var $textToDesktop = this._getTextToDesktopElement();
            var $textToMobile = this._getTextToMobileElement();
            var $defaultStyles = this._getDefaultStyles();
            if (this._client_storage.get(this._storageKey)) {
                $bodyElement.removeClass(this._bodyResponsiveClassName).addClass(this._bodyNonResponsiveClassName);
                $footerView.removeClass(this._orderClassName).addClass(this._flexClassName);
                $textToDesktop.addClass(this._hideTextClassName);
                $defaultStyles.attr("href", $defaultStyles.data("href"));
            } else {
                $footerView.removeClass(this._flexClassName).addClass(this._orderClassName);
                $textToMobile.addClass(this._hideTextClassName);
            }
        };
        ViewportSwitcherImpl.prototype.userOverride = function() {
            return this._client_storage.get(this._storageKey) !== null;
        };
        ViewportSwitcherImpl.prototype.switchOnClickAction = function() {
            var hasViewport = !!this._client_storage.get(this._storageKey);
            if (hasViewport) {
                this._client_storage.drop(this._storageKey);
            } else {
                this._client_storage.store(this._storageKey, this._layoutType, 0);
            }
            location.reload();
        };
        ViewportSwitcherImpl.prototype._setViewportWidth = function(width) {
            var $viewport = this._getViewportElement();
            $viewport.attr("content", "width=" + width);
        };
        ViewportSwitcherImpl.prototype._getBodyElement = function() {
            return this._$("body");
        };
        ViewportSwitcherImpl.prototype._getDefaultStyles = function() {
            return this._$('link[href*="livetable"]');
        };
        ViewportSwitcherImpl.prototype._getFooterViewElement = function() {
            return this._$(".footer__view");
        };
        ViewportSwitcherImpl.prototype._getViewportElement = function() {
            return this._$('meta[name="viewport"]');
        };
        ViewportSwitcherImpl.prototype._getTextToDesktopElement = function() {
            return this._$(".footer__viewText[data-view='toDesktop']");
        };
        ViewportSwitcherImpl.prototype._getTextToMobileElement = function() {
            return this._$(".footer__viewText[data-view='toMobile']");
        };
        return ViewportSwitcherImpl;
    }());
    Helper.ViewportSwitcherImpl = ViewportSwitcherImpl;
})(Helper || (Helper = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Helper_ViewportSwitcher", Helper.ViewportSwitcherImpl);
(function() {
    var DropDownList, base;

    DropDownList = (function() {
        var CSS_CLASS_LIST_OPEN, CSS_CLASS_SELECTED_ITEM, CSS_CLASS_SELECTED_ITEM_WRAP, SELECTOR_LIST, SELECTOR_LIST_ITEM, SELECTOR_LIST_ITEM_SELECTED;

        SELECTOR_LIST = 'ul.dropdown-list';

        SELECTOR_LIST_ITEM = 'ul.dropdown-list .list-item';

        SELECTOR_LIST_ITEM_SELECTED = 'ul.dropdown-list .list-item.selected';

        CSS_CLASS_SELECTED_ITEM = 'selected';

        CSS_CLASS_LIST_OPEN = 'open-list';

        CSS_CLASS_SELECTED_ITEM_WRAP = 'selected-item-wrap';

        function DropDownList(jQuery1, listWrapElement, onItemSelectCallback) {
            this.jQuery = jQuery1;
            this.listWrapElement = listWrapElement;
            this.onItemSelectCallback = onItemSelectCallback != null ? onItemSelectCallback : function() {};
            this.listElement = this.jQuery(this.listWrapElement).find(SELECTOR_LIST);
            this.selectedItemElement = null;
            this.selectedItemWrapElement = null;
            this.listClicked = false;
        }

        DropDownList.prototype.init = function() {
            var selectedItem;
            this.disableLinks();
            this.handleCloseList();
            selectedItem = this.listWrapElement.find(SELECTOR_LIST_ITEM_SELECTED);
            if (selectedItem.length) {
                this.setSelectedItem(selectedItem);
            }
            this.initSelectedItemWrap();
            this.listWrapElement.click((function(context) {
                return function(e) {
                    e.preventDefault();
                    context.listClicked = true;
                    return context.toggleList();
                };
            })(this));
            return this.listWrapElement.find(SELECTOR_LIST_ITEM).click((function(context) {
                return function() {
                    context.setSelectedItem(context.jQuery(this));
                    context.selectedItemWrapElement.children().remove();
                    context.selectedItemWrapElement.append(context.getSelectedItem().children().clone());
                    return context.onItemSelectCallback(context.jQuery(this));
                };
            })(this));
        };

        DropDownList.prototype.handleCloseList = function() {
            return jQuery(document).click((function(context) {
                return function() {
                    if (!context.listClicked) {
                        context.closeList();
                    }
                    context.listClicked = false;
                };
            })(this));
        };

        DropDownList.prototype.disableLinks = function() {
            return this.listElement.find('a').click(function(e) {
                return e.preventDefault();
            });
        };

        DropDownList.prototype.getSelectedItem = function() {
            return this.selectedItemElement;
        };

        DropDownList.prototype.setSelectedItem = function(selectedItemElement) {
            this.selectedItemElement = selectedItemElement;
            this.listWrapElement.find(SELECTOR_LIST_ITEM_SELECTED).removeClass(CSS_CLASS_SELECTED_ITEM);
            return this.selectedItemElement.addClass(CSS_CLASS_SELECTED_ITEM);
        };

        DropDownList.prototype.initSelectedItemWrap = function() {
            var wrap;
            wrap = this.jQuery('<span class="' + CSS_CLASS_SELECTED_ITEM_WRAP + '"></span>');
            if (this.getSelectedItem()) {
                wrap.append(this.getSelectedItem().children().clone());
            }
            this.listWrapElement.prepend(wrap);
            return this.selectedItemWrapElement = wrap;
        };

        DropDownList.prototype.isListOpen = function() {
            return this.listElement.hasClass(CSS_CLASS_LIST_OPEN);
        };

        DropDownList.prototype.toggleList = function() {
            return this.listElement.toggleClass(CSS_CLASS_LIST_OPEN);
        };

        DropDownList.prototype.openList = function() {
            return this.listElement.addClass(CSS_CLASS_LIST_OPEN);
        };

        DropDownList.prototype.closeList = function() {
            return this.listElement.removeClass(CSS_CLASS_LIST_OPEN);
        };

        return DropDownList;

    })();

    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).DropDownList == null) {
            base.DropDownList = DropDownList;
        }
    } else {
        if (exports.DropDownList == null) {
            exports.DropDownList = DropDownList;
        }
    }

}).call(this);
(function() {
    var List_Navigation;

    List_Navigation = (function() {
        List_Navigation.prototype.ALL_RACES = 0;

        List_Navigation.prototype.LIVE = 1;

        List_Navigation.prototype.FINISHED = 2;

        List_Navigation.prototype.SCHEDULED = 3;

        List_Navigation.prototype.ODDS = 4;

        List_Navigation.prototype.MY_GAMES = 5;

        List_Navigation.prototype.COUNTRY_TAB_DEFAULT = 0;

        List_Navigation.prototype.COUNTRY_TAB_FINISHED = 6;

        List_Navigation.prototype.COUNTRY_TAB_SCHEDULED = 7;

        List_Navigation.prototype.ODDS_MATCHES = 1;

        List_Navigation.prototype.ODDS_PREMATCH = 2;

        List_Navigation.prototype.ODDS_LIVE = 3;

        function List_Navigation(util_enviroment) {
            this.util_enviroment = util_enviroment;
        }

        List_Navigation.prototype.getCurrentCategory = function() {
            return this.util_enviroment.getCategory();
        };

        List_Navigation.prototype.getCurrentNavigationCategory = function() {
            return this.util_enviroment.getNavigationCategory();
        };

        List_Navigation.prototype.getCurrentSubCategory = function() {
            return this.util_enviroment.getSubCategory();
        };

        List_Navigation.prototype.isAllRaces = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.ALL_RACES;
        };

        List_Navigation.prototype.isLive = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.LIVE;
        };

        List_Navigation.prototype.isFinished = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.FINISHED;
        };

        List_Navigation.prototype.isScheduled = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.SCHEDULED;
        };

        List_Navigation.prototype.isOdds = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.ALL_RACES && (this.isOddsPrematch() || this.isOddsLive());
        };

        List_Navigation.prototype.isMyGames = function() {
            return this.getCurrentCategory() === List_Navigation.prototype.MY_GAMES;
        };

        List_Navigation.prototype.isOddsMatches = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_MATCHES;
        };

        List_Navigation.prototype.isOddsPrematch = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_PREMATCH;
        };

        List_Navigation.prototype.isOddsLive = function() {
            return this.getCurrentSubCategory() === List_Navigation.prototype.ODDS_LIVE;
        };

        List_Navigation.prototype.isCountryTabDefault = function() {
            return this.getCurrentNavigationCategory() === List_Navigation.prototype.COUNTRY_TAB_DEFAULT;
        };

        List_Navigation.prototype.isCountryTabFinished = function() {
            return this.getCurrentNavigationCategory() === List_Navigation.prototype.COUNTRY_TAB_FINISHED;
        };

        List_Navigation.prototype.isCountryTabScheduled = function() {
            return this.getCurrentNavigationCategory() === List_Navigation.prototype.COUNTRY_TAB_SCHEDULED;
        };

        return List_Navigation;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('List_Navigation', List_Navigation, ['list_navigation', 'listNavigation', 'utilNavigation']);

}).call(this);
(function() {
    var DataHandlerClass, Data_Handler, dataEventHandler, dataEventHandlerArchive, dataEventHandlerMygames, dataEventHandlerTemporary, dataLeagueHandler, dataLeagueHandlerArchive, dataLeagueHandlerMygames, dataLeagueHandlerTemporary, dataParticipantHandler, dataParticipantHandlerTemporary, dic;

    Data_Handler = (function() {
        function Data_Handler(utilString) {
            this.utilString = utilString;
            this.setIds([]);
        }

        Data_Handler.prototype.setDataHolder = function(_dataHolder) {
            this._dataHolder = _dataHolder;
            return this.resetIds();
        };

        Data_Handler.prototype.getDataHolder = function() {
            return this._dataHolder;
        };

        Data_Handler.prototype.sort = function(compareFunction) {
            var ids;
            if (compareFunction == null) {
                compareFunction = this._defaultCompareFunction;
            }
            if (typeof compareFunction !== "function") {
                return;
            }
            ids = this.getIds().map((function(_this) {
                return function(o) {
                    return {
                        id: o,
                        sortKey: _this.getItem(o).getSortKey()
                    };
                };
            })(this));
            this._sortKeysBuffer = {};
            ids.sort((function(_this) {
                return function(a, b) {
                    return compareFunction.apply(_this, [a, b]);
                };
            })(this));
            this._sortKeysBuffer = {};
            return this.setIds(ids.map(function(o) {
                return o.id;
            }));
        };

        Data_Handler.prototype.filter = function(filterFunction) {
            var i, id, ids, index, len, newIds;
            if (typeof filterFunction !== "function") {
                return;
            }
            ids = this.getIds();
            newIds = [];
            index = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                if (filterFunction.apply(this, [index, id]) === true) {
                    newIds.push(id);
                }
                index++;
            }
            return this.setIds(newIds);
        };

        Data_Handler.prototype.limit = function(count, offset) {
            var ids, newIds;
            if (offset == null) {
                offset = 0;
            }
            ids = this.getIds();
            newIds = ids.slice(offset, offset + count);
            return this.setIds(newIds);
        };

        Data_Handler.prototype.count = function() {
            return this.getIds().length;
        };

        Data_Handler.prototype.each = function(callbackFunction) {
            var i, id, ids, index, len, ret;
            if (typeof callbackFunction !== "function") {
                return;
            }
            ids = this.getIds();
            index = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                ret = callbackFunction.apply(this, [index, id]);
                index++;
                if (ret === false) {
                    break;
                }
            }
            return true;
        };

        Data_Handler.prototype.setIds = function(_ids) {
            this._ids = _ids;
        };

        Data_Handler.prototype.getIds = function() {
            return this._ids;
        };

        Data_Handler.prototype.resetIds = function() {
            return this.setIds(this._dataHolder.getAllContainerIds());
        };

        Data_Handler.prototype.getItem = function(id) {
            return this.getDataHolder().getItem(id);
        };

        Data_Handler.prototype._defaultCompareFunction = function(idA, idB) {
            var hasAccentsForLanguage, sortKeyA, sortKeyB;
            hasAccentsForLanguage = this.utilString.hasAccentsForLanguage();
            sortKeyA = idA.sortKey;
            sortKeyB = idB.sortKey;
            if (!hasAccentsForLanguage) {
                return this.utilString.compare(sortKeyA, sortKeyB);
            }
            if (this._sortKeysBuffer[idA.id] == null) {
                this._sortKeysBuffer[idA.id] = sortKeyA;
                if (hasAccentsForLanguage) {
                    this._sortKeysBuffer[idA.id] = this.utilString.replaceAccents(this._sortKeysBuffer[idA.id]);
                    this._sortKeysBuffer[idA.id] = this._sortKeysBuffer[idA.id].replace(/[a-z]/g, function(letter) {
                        return letter.toUpperCase();
                    });
                }
            }
            if (this._sortKeysBuffer[idB.id] == null) {
                this._sortKeysBuffer[idB.id] = sortKeyB;
                if (hasAccentsForLanguage) {
                    this._sortKeysBuffer[idB.id] = this.utilString.replaceAccents(this._sortKeysBuffer[idB.id]);
                    this._sortKeysBuffer[idB.id] = this._sortKeysBuffer[idB.id].replace(/[a-z]/g, function(letter) {
                        return letter.toUpperCase();
                    });
                }
            }
            return this.utilString.fastCompare(this._sortKeysBuffer[idA.id], this._sortKeysBuffer[idB.id]);
        };

        return Data_Handler;

    })();

    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;

    dic.registerClass('Data_Handler', Data_Handler, ['dataHandler']);

    DataHandlerClass = dic.getClass('Data_Handler');

    dataEventHandler = function(Data_EventHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolder);
        return handler;
    };

    dataEventHandlerArchive = function(Data_EventHolderArchive) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderArchive);
        return handler;
    };

    dataEventHandlerMygames = function(Data_EventHolderMygames) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderMygames);
        return handler;
    };

    dataEventHandlerTemporary = function(Data_EventHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_EventHolderTemporary);
        return handler;
    };

    dataLeagueHandler = function(Data_LeagueHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolder);
        return handler;
    };

    dataLeagueHandlerArchive = function(Data_LeagueHolderArchive) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderArchive);
        return handler;
    };

    dataLeagueHandlerMygames = function(Data_LeagueHolderMygames) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderMygames);
        return handler;
    };

    dataLeagueHandlerTemporary = function(Data_LeagueHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_LeagueHolderTemporary);
        return handler;
    };

    dataParticipantHandler = function(Data_ParticipantHolder) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_ParticipantHolder);
        return handler;
    };

    dataParticipantHandlerTemporary = function(Data_ParticipantHolderTemporary) {
        var handler;
        handler = new DataHandlerClass();
        handler.setDataHolder(Data_ParticipantHolderTemporary);
        return handler;
    };

    dic.registerSingleton('Data_EventHandler', dataEventHandler, ['dataEventHandler']);

    dic.registerSingleton('Data_EventHandlerArchive', dataEventHandlerArchive, ['dataEventHandlerArchive']);

    dic.registerSingleton('Data_EventHandlerMygames', dataEventHandlerMygames, ['dataEventHandlerMygames']);

    dic.registerSingleton('Data_EventHandlerTemporary', dataEventHandlerTemporary, ['dataEventHandlerTemporary']);

    dic.registerSingleton('Data_LeagueHandler', dataLeagueHandler, ['dataLeagueHandler']);

    dic.registerSingleton('Data_LeagueHandlerArchive', dataLeagueHandlerArchive, ['dataLeagueHandlerArchive']);

    dic.registerSingleton('Data_LeagueHandlerMygames', dataLeagueHandlerMygames, ['dataLeagueHandlerMygames']);

    dic.registerSingleton('Data_LeagueHandlerTemporary', dataLeagueHandlerTemporary, ['dataLeagueHandlerTemporary']);

    dic.registerSingleton('Data_ParticipantHandler', dataParticipantHandler, ['dataParticipantHandler']);

    dic.registerSingleton('Data_ParticipantHandlerTemporary', dataParticipantHandlerTemporary, ['dataParticipantHandlerTemporary']);

}).call(this);
(function() {
    var Data_Holder;

    Data_Holder = (function() {
        function Data_Holder() {
            this.reinit();
        }

        Data_Holder.prototype.reinit = function(newContainer) {
            if (newContainer == null) {
                newContainer = {};
            }
            return this._container = newContainer;
        };

        Data_Holder.prototype.getAllContainerIds = function() {
            return Object.keys(this._container);
        };

        Data_Holder.prototype.getOrCreateNewItem = function(id) {
            if (this._container[id] == null) {
                this._container[id] = this._getNewItemInstance();
                this._container[id].setId(id);
            }
            return this._container[id];
        };

        Data_Holder.prototype.getItem = function(id) {
            if (!this.hasItem(id)) {
                throw new Error("Item " + id + " not found");
            }
            return this._container[id];
        };

        Data_Holder.prototype.setItem = function(id, item) {
            return this._container[id] = item;
        };

        Data_Holder.prototype.hasItem = function(id) {
            return this._container[id] != null;
        };

        Data_Holder.prototype.hasData = function() {
            var waste;
            for (waste in this._container) {
                return true;
            }
            return false;
        };

        Data_Holder.prototype.removeItem = function(id) {
            return delete this._container[id];
        };

        Data_Holder.prototype.getReferences = function() {
            var id, refs;
            refs = {};
            for (id in this._container) {
                refs[id] = this._container[id];
            }
            return refs;
        };

        Data_Holder.prototype.addItemsFromRawObject = function(rawObject, replaceItemIfExists) {
            var data, id, item, key, newData, results, value;
            if (replaceItemIfExists == null) {
                replaceItemIfExists = false;
            }
            results = [];
            for (id in rawObject) {
                data = rawObject[id];
                if (!replaceItemIfExists && this.hasItem(id)) {
                    continue;
                }
                newData = {};
                for (key in data) {
                    value = data[key];
                    newData[key] = value;
                }
                item = this.getOrCreateNewItem(id);
                results.push(item.reinit(newData));
            }
            return results;
        };

        Data_Holder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_Item');
        };

        Data_Holder.prototype._dumpContainer = function() {
            var i, id, len, ref, ret;
            ret = {};
            ref = this.getAllContainerIds();
            for (i = 0, len = ref.length; i < len; i++) {
                id = ref[i];
                ret[id] = this.getItem(id).getData();
            }
            return ret;
        };

        return Data_Holder;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_Holder', Data_Holder, ['dataHolder']);

}).call(this);
(function() {
    var Data_HolderProxy;

    Data_HolderProxy = (function() {
        Data_HolderProxy.prototype.SCOPE_DEFAULT = 'default';

        Data_HolderProxy.prototype.SCOPE_MYGAMES = 'mygames';

        Data_HolderProxy.prototype.SCOPE_ARCHIVE = 'archive';

        Data_HolderProxy.prototype.SCOPE_TEMPORARY = 'temporary';

        function Data_HolderProxy() {
            this.setScope(Data_HolderProxy.prototype.SCOPE_DEFAULT);
        }

        Data_HolderProxy.prototype.setScope = function(_scopeName) {
            this._scopeName = _scopeName;
        };

        Data_HolderProxy.prototype.getScope = function() {
            return this._scopeName;
        };

        Data_HolderProxy.prototype.setDataHolders = function(_dataHolders) {
            this._dataHolders = _dataHolders;
        };

        Data_HolderProxy.prototype.setDataHandlers = function(_dataHandlers) {
            this._dataHandlers = _dataHandlers;
        };

        Data_HolderProxy.prototype.getHolder = function() {
            if (this._dataHolders[this._scopeName] != null) {
                return this._dataHolders[this._scopeName];
            }
            throw new Error("Holder for scope " + this._scopeName + " not found");
        };

        Data_HolderProxy.prototype.getHandler = function() {
            if (this._dataHandlers[this._scopeName] != null) {
                return this._dataHandlers[this._scopeName];
            }
            throw new Error("Handler for scope " + this._scopeName + " not found");
        };

        Data_HolderProxy.prototype.eachHolder = function(callbackFunction) {
            var holder, ref, ret, scopeName;
            if (typeof callbackFunction !== "function") {
                return;
            }
            ref = this._dataHolders;
            for (scopeName in ref) {
                holder = ref[scopeName];
                ret = callbackFunction(scopeName, holder);
                if (ret === false) {
                    break;
                }
            }
            return true;
        };

        Data_HolderProxy.prototype.eachHandler = function(callbackFunction) {
            var handler, ref, ret, scopeName;
            if (typeof callbackFunction !== "function") {
                return;
            }
            ref = this._dataHandlers;
            for (scopeName in ref) {
                handler = ref[scopeName];
                ret = callbackFunction(scopeName, handler);
                if (ret === false) {
                    break;
                }
            }
            return true;
        };

        Data_HolderProxy.prototype.findScopeByItemId = function(itemId) {
            var retScope;
            retScope = false;
            if (this.getHolder().hasItem(itemId)) {
                return this._scopeName;
            }
            this.eachHolder(function(scope, holder) {
                if (scope === this._scopeName) {
                    return;
                }
                if (holder.hasItem(itemId)) {
                    retScope = scope;
                    return false;
                }
            });
            return retScope;
        };

        Data_HolderProxy.prototype.findHolderByItemId = function(itemId) {
            var scope;
            scope = this.findScopeByItemId(itemId);
            if (scope === false) {
                return false;
            }
            return this._dataHolders[scope];
        };

        Data_HolderProxy.prototype.findHandlerByItemId = function(itemId) {
            var scope;
            scope = this.findScopeByItemId(itemId);
            if (scope === false || (this._dataHandlers[scope] == null)) {
                return false;
            }
            return this._dataHandlers[scope];
        };

        Data_HolderProxy.prototype.getItemValue = function(itemId, index) {
            var holder;
            holder = this.findHolderByItemId(itemId);
            if (holder === false) {
                return null;
            }
            return holder.getItem(itemId).getValue(index);
        };

        return Data_HolderProxy;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_HolderProxy', Data_HolderProxy, ['dataHolderProxy']);

}).call(this);
(function() {
    var Data_Item;

    Data_Item = (function() {
        function Data_Item(utilEnviroment) {
            this.utilEnviroment = utilEnviroment;
            this._utilConfig = cjs.Api.config;
            this._constantsManager = cjs.Api.constantsManager;
            this.reinit();
        }

        Data_Item.prototype.setId = function(_id) {
            this._id = _id;
        };

        Data_Item.prototype.getId = function() {
            return this._id;
        };

        Data_Item.prototype.getSortKey = function(type) {
            return "";
        };

        Data_Item.prototype.getValue = function(index, defaultReturnValueIfNotFound) {
            if (defaultReturnValueIfNotFound == null) {
                defaultReturnValueIfNotFound = null;
            }
            if (index in this._data) {
                return this._data[index];
            }
            return defaultReturnValueIfNotFound;
        };

        Data_Item.prototype.getStatsResults = function(typeId, defaultReturnValueIfNotFound, isHomeParticipant) {
            var key;
            if (defaultReturnValueIfNotFound == null) {
                defaultReturnValueIfNotFound = null;
            }
            if (isHomeParticipant == null) {
                isHomeParticipant = null;
            }
            key = cjs.Api.statsResultsIndexGenerator.get(typeId, isHomeParticipant);
            return this.getValue(key, defaultReturnValueIfNotFound);
        };

        Data_Item.prototype.setValue = function(index, value) {
            return this._data[index] = value;
        };

        Data_Item.prototype.pushValue = function(index, value) {
            if (!(index in this._data)) {
                this._data[index] = [];
            }
            return this._data[index].push(value);
        };

        Data_Item.prototype.removeValue = function(index) {
            return delete this._data[index];
        };

        Data_Item.prototype.reinit = function(dataObject) {
            if (dataObject == null) {
                dataObject = {};
            }
            this._data = dataObject;
            if (this._data['is_valid'] == null) {
                return this._data['is_valid'] = true;
            }
        };

        Data_Item.prototype.isValid = function() {
            if (!this._utilConfig.get('app', 'myteams', 'enable')) {
                return true;
            }
            if (this._data['is_valid'] != null) {
                return this._data['is_valid'];
            }
            return true;
        };

        Data_Item.prototype.invalidate = function() {
            return this._data['is_valid'] = false;
        };

        Data_Item.prototype.getData = function(clone) {
            var id, newDataObj;
            if (clone == null) {
                clone = false;
            }
            if (!clone) {
                return this._data;
            }
            newDataObj = {};
            for (id in this._data) {
                newDataObj[id] = this.getValue(id);
            }
            return newDataObj;
        };

        Data_Item.prototype.getFeedIndexes = function() {
            return this.utilEnviroment.getFeedIndexes();
        };

        return Data_Item;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_Item', Data_Item, ['dataItem']);

}).call(this);
(function() {
    var Data_EventHolder, dic,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_EventHolder = (function(superClass) {
        extend(Data_EventHolder, superClass);

        function Data_EventHolder() {
            return Data_EventHolder.__super__.constructor.apply(this, arguments);
        }

        Data_EventHolder.prototype.getOrCreateNewEvent = function(id) {
            return this.getOrCreateNewItem(id);
        };

        Data_EventHolder.prototype.getEvent = function(id) {
            return this.getItem(id);
        };

        Data_EventHolder.prototype.hasEvent = function(id) {
            return this.hasItem(id);
        };

        Data_EventHolder.prototype.removeEvent = function(id) {
            return this.removeItem(id);
        };

        Data_EventHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_EventItem');
        };

        return Data_EventHolder;

    })(cjs.dic.getClass('Data_Holder'));

    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;

    dic.registerClass('Data_EventHolder', Data_EventHolder, ['dataEventHolder']);

    dic.registerClass('Data_EventHolderArchive', Data_EventHolder, ['dataEventHolderArchive']);

    dic.registerClass('Data_EventHolderMygames', Data_EventHolder, ['dataEventHolderMygames']);

    dic.registerClass('Data_EventHolderTemporary', Data_EventHolder, ['dataEventHolderTemporary']);

    dic.registerClass('Data_EventHolderFiltered', Data_EventHolder, ['dataEventHolderFiltered']);

}).call(this);
(function() {
    var Data_EventHolderProxy, initDataEventHolderProxy,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_EventHolderProxy = (function(superClass) {
        extend(Data_EventHolderProxy, superClass);

        function Data_EventHolderProxy() {
            return Data_EventHolderProxy.__super__.constructor.apply(this, arguments);
        }

        Data_EventHolderProxy.prototype.getEventHolder = function() {
            return this.getHolder();
        };

        Data_EventHolderProxy.prototype.getEventHandler = function() {
            return this.getHandler();
        };

        Data_EventHolderProxy.prototype.findEventHolderByEventId = function(eventId) {
            return this.findHolderByItemId(eventId);
        };

        Data_EventHolderProxy.prototype.findEventHandlerByEventId = function(eventId) {
            return this.findHandlerByItemId(eventId);
        };

        Data_EventHolderProxy.prototype.getEventValue = function(eventId, index) {
            return this.getItemValue(eventId, index);
        };

        return Data_EventHolderProxy;

    })(cjs.dic.getClass('Data_HolderProxy'));

    initDataEventHolderProxy = function(Data_EventHolder, Data_EventHolderMygames, Data_EventHolderArchive, Data_EventHolderTemporary, Data_EventHandler, Data_EventHandlerMygames, Data_EventHandlerArchive, Data_EventHandlerTemporary) {
        var handlers, holderProxy, holderProxyClass, holders;
        holderProxy = new Data_EventHolderProxy();
        holderProxyClass = cjs.dic.getClass('Data_HolderProxy');
        holders = {};
        holders[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_EventHolder;
        holders[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_EventHolderArchive;
        holders[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_EventHolderMygames;
        holders[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_EventHolderTemporary;
        holderProxy.setDataHolders(holders);
        handlers = {};
        handlers[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_EventHandler;
        handlers[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_EventHandlerArchive;
        handlers[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_EventHandlerMygames;
        handlers[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_EventHandlerTemporary;
        holderProxy.setDataHandlers(handlers);
        return holderProxy;
    };

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Data_EventHolderProxy', initDataEventHolderProxy, ['dataEventHolderProxy', 'dataEvent']);

}).call(this);
(function() {
    var Data_EventItem,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    Data_EventItem = (function(superClass) {
        extend(Data_EventItem, superClass);

        function Data_EventItem(utilEnviroment, utilSport, utilDate) {
            this.utilEnviroment = utilEnviroment;
            this.utilSport = utilSport;
            this.utilDate = utilDate;
            Data_EventItem.__super__.constructor.apply(this, arguments);
        }

        Data_EventItem.prototype.getSortKey = function(type) {
            var eventStageTypes, leagueId, leagueItem, sortKeyGenerator, sortKeyGeneratorBuilder, sortKeyStr, sportId, sports;
            leagueItem = this.getLeague();
            leagueId = leagueItem.getId();
            sports = this._constantsManager.getSports();
            eventStageTypes = this._constantsManager.getEventStageTypes();
            sportId = this.getSportId();
            sortKeyGeneratorBuilder = cjs.dic.get('Data_Event_SortKey_GeneratorBuilder');
            sortKeyGenerator = sortKeyGeneratorBuilder.setLeagueSortKey(leagueItem.getSortKey()).setParticipant(participant).setIsSeasonPage(cjs.dic.get('util_page').isSeasonPage()).setIsLeagueTop(cjs.myLeagues.isTop(leagueId)).setIsSecondary(leagueItem.isSecondary()).setIsWinterSport(this.utilSport.inGroup(sportId, sports.WINTER_SPORTS)).setIsStageSport(this.utilSport.isStageSport(sportId)).setEndUtime(this.getEndUTime()).setStartUtime(this.getStartUTime()).setSortByDesc(isSortDesc()).setSortByTime(isSortByTime()).setEventStageTypes(eventStageTypes).setSports(sports).setSportId(sportId).setCategoryId(leagueItem.getCategoryId()).setEventStageType(this.getStageType()).setIsNoDuelTournament(isNoDuelTournament(leagueId)).setIsStatsResults(this.isStatsResults()).setStatsResultsSortKey(parseInt(this.getStatsResultsSortKey())).setStatsSortKey(this.getStatsSortKey()).setParticipantStatus(this.getParticipantStatus()).setHomeScorePart(this.getHomeScorePart(5)).setRank(this.getRank()).setGolfHoleResult(this.getParticipantHoleInfo()).setHomeName(this.getHomeName()).setAwayName(this.getAwayName()).setLeagueTitle(leagueItem.getTitle()).setSortKeyHelper(cjs.dic.get('Data_Event_SortKey_HelperPart')).setTopLeaguesPartBuilder(cjs.dic.get('Data_Event_SortKeyPart_TopLeaguesPartBuilder')).setTimePartBuilder(cjs.dic.get('Data_Event_SortKeyPart_TimePartBuilder')).setLabelPartBuilder(cjs.dic.get('Data_Event_SortKeyPart_LabelPartBuilder')).setRankPartBuilder(cjs.dic.get('Data_Event_SortKeyPart_RankPartBuilder')).build();
            sortKeyStr = sortKeyGenerator.generate();
            this.setValue('sort_key_str', sortKeyStr);
            return sortKeyStr;
        };

        Data_EventItem.prototype.getLeague = function() {
            var leagueHolderProxy;
            leagueHolderProxy = cjs.dic.get('dataLeagueHolderProxy');
            return leagueHolderProxy.getHolder().getLeague(this.getLeagueId());
        };

        Data_EventItem.prototype.getLeagueId = function() {
            return this.getValue('labl_id');
        };

        Data_EventItem.prototype.getSportId = function() {
            return parseInt(this.getValue('sport_id'));
        };

        Data_EventItem.prototype.getSportName = function() {
            return this.getValue('sport');
        };

        Data_EventItem.prototype.getStageType = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_EVENT_STAGE_TYPE_ID));
        };

        Data_EventItem.prototype.isMotorSport = function() {
            return this.utilSport.inGroup(this.getSportId(), this._constantsManager.getSports().MOTORSPORT);
        };

        Data_EventItem.prototype.isCycling = function() {
            return this.getSportId() === this._constantsManager.getSports().CYCLING;
        };

        Data_EventItem.prototype.isDarts = function() {
            return this.getSportId() === this._constantsManager.getSports().DARTS;
        };

        Data_EventItem.prototype.isGolf = function() {
            return this.getSportId() === this._constantsManager.getSports().GOLF;
        };

        Data_EventItem.prototype.isWinterSport = function() {
            return this.utilSport.inGroup(this.getSportId(), this._constantsManager.getSports().WINTER_SPORTS);
        };

        Data_EventItem.prototype.isTotallyFinished = function() {
            var isAlterStageFinished;
            isAlterStageFinished = this.getValue(this.getFeedIndexes().SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID) === this._constantsManager.getEventStageTypes().FINISHED;
            if ((isAlterStageFinished && !this.isInterrupted() && !this.isAfterDay()) || (!this.getValue(this.getFeedIndexes().SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID) && this.isFinished() && !this.isInterrupted() && !this.isAfterDay())) {
                return true;
            }
            return false;
        };

        Data_EventItem.prototype.getStage = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_EVENT_STAGE_ID));
        };

        Data_EventItem.prototype.isRoundFinish = function() {
            return this.getStage() === this._constantsManager.getEventStages().FINISHED;
        };

        Data_EventItem.prototype.isScheduled = function() {
            return this.getStageType() === this._constantsManager.getEventStageTypes().SCHEDULED;
        };

        Data_EventItem.prototype.isLive = function() {
            return this.getStageType() === this._constantsManager.getEventStageTypes().LIVE;
        };

        Data_EventItem.prototype.isResultEnabled = function() {
            var resultEnabled;
            resultEnabled = this.isLive() || (this.isFinished() && !this.isPostponed() && !this.isCanceled()) || this.isToFinish();
            if (resultEnabled) {
                return !this.isEventWithoutScoreAndNotRetired();
            }
            return resultEnabled;
        };

        Data_EventItem.prototype.isFinished = function() {
            return this.getStageType() === this._constantsManager.getEventStageTypes().FINISHED;
        };

        Data_EventItem.prototype.isDelayed = function() {
            return this.getStage() === this._constantsManager.getEventStages().DELAYED;
        };

        Data_EventItem.prototype.isEventStageFinished = function() {
            return this.getStage() === this._constantsManager.getEventStages().FINISHED;
        };

        Data_EventItem.prototype.isToFinish = function() {
            return this.getStage() === this._constantsManager.getEventStages().TO_FINISH;
        };

        Data_EventItem.prototype.isInterrupted = function() {
            return this.getStage() === this._constantsManager.getEventStages().INTERRUPTED;
        };

        Data_EventItem.prototype.isCanceled = function() {
            return this.getStage() === this._constantsManager.getEventStages().CANCELED;
        };

        Data_EventItem.prototype.isPending = function() {
            return this.getStage() === this._constantsManager.getEventStages().PENDING;
        };

        Data_EventItem.prototype.isPostponed = function() {
            return this.getStage() === this._constantsManager.getEventStages().POSTPONED;
        };

        Data_EventItem.prototype.isAfterDay = function() {
            var afterDayStages, ref;
            afterDayStages = [this._constantsManager.getEventStages().AFTER_DAY1, this._constantsManager.getEventStages().AFTER_DAY2, this._constantsManager.getEventStages().AFTER_DAY3, this._constantsManager.getEventStages().AFTER_DAY4, this._constantsManager.getEventStages().AFTER_DAY5];
            return ref = this.getStage(), indexOf.call(afterDayStages, ref) >= 0;
        };

        Data_EventItem.prototype.isPenalties = function() {
            return this.getStage() === this._constantsManager.getEventStages().PENALTIES;
        };

        Data_EventItem.prototype.isFirstInning = function() {
            return this.getStage() === this._constantsManager.getEventStages().FIRST_INNING;
        };

        Data_EventItem.prototype.isSecondInning = function() {
            return this.getStage() === this._constantsManager.getEventStages().SECOND_INNING;
        };

        Data_EventItem.prototype.getHomeScorePart = function(part) {
            switch (part) {
                case 1:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_1);
                case 2:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_2);
                case 3:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_3);
                case 4:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_4);
                case 5:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_5);
                case 6:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_6);
                case 7:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_7);
                case 8:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_8);
                case 9:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_9);
            }
        };

        Data_EventItem.prototype.getAwayScorePart = function(part) {
            switch (part) {
                case 1:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_1);
                case 2:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_2);
                case 3:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_3);
                case 4:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_4);
                case 5:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_5);
                case 6:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_6);
                case 7:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_7);
                case 8:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_8);
                case 9:
                    return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_9);
            }
        };

        Data_EventItem.prototype.getHomeTiebreakPart = function(part) {
            switch (part) {
                case 1:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_1, '');
                case 2:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_2, '');
                case 3:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3, '');
                case 4:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4, '');
                case 5:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_5, '');
            }
        };

        Data_EventItem.prototype.getAwayTiebreakPart = function(part) {
            switch (part) {
                case 1:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_1, '');
                case 2:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_2, '');
                case 3:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3, '');
                case 4:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4, '');
                case 5:
                    return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_5, '');
            }
        };

        Data_EventItem.prototype.getHomeGamesInLastSet = function() {
            return this.getGamesInLastSet(0);
        };

        Data_EventItem.prototype.getAwayGamesInLastSet = function() {
            return this.getGamesInLastSet(1);
        };

        Data_EventItem.prototype.getGamesInLastSet = function(side) {
            var awayScorePart, i, j, result;
            result = '';
            for (i = j = 9; j > 0.1; i = --j) {
                awayScorePart = side === 0 ? this.getHomeScorePart(i) : this.getAwayScorePart(i);
                if (!isNaN(parseInt(awayScorePart, 10))) {
                    result = awayScorePart;
                    break;
                }
            }
            return result;
        };

        Data_EventItem.prototype.getStartUTime = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_MATCH_START_UTIME, 0));
        };

        Data_EventItem.prototype.getEventStartUTime = function() {
            return parseInt(this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_EVENT_START_UTIME, 0));
        };

        Data_EventItem.prototype.getStartUTimeDate = function() {
            return this.utilDate.timestamp2date(this.utilEnviroment.dateFormat(), this.getStartUTime(), this.utilEnviroment.getGmtOffset()());
        };

        Data_EventItem.prototype.getEndUTime = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_MATCH_END_UTIME, 0));
        };

        Data_EventItem.prototype.getStageStartUTime = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_PERIOD_START_UTIME, 0));
        };

        Data_EventItem.prototype.getPar = function() {
            if (this.isParticipantLive() || this.wasParticipantLive()) {
                if (this.getHomeScore() > 0 && !this.isStableford()) {
                    return '+' + this.getHomeScore();
                } else {
                    return this.getHomeScore();
                }
            } else {
                return '-';
            }
        };

        Data_EventItem.prototype.isStableford = function() {
            return parseInt(this.getValue(this.getFeedIndexes().FSCORE_GOLFPARTINDEXES_IS_GOLF_STABLEFORD)) === 1;
        };

        Data_EventItem.prototype.getHomeScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_CURRENT_RESULT);
        };

        Data_EventItem.prototype.getAwayScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_CURRENT_RESULT);
        };

        Data_EventItem.prototype.getHomeFullTimeScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_FULL_TIME_RESULT);
        };

        Data_EventItem.prototype.getAwayFullTimeScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_FULL_TIME_RESULT);
        };

        Data_EventItem.prototype.getHomeGameScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_TENNIS_GAME);
        };

        Data_EventItem.prototype.getAwayGameScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_TENNIS_GAME);
        };

        Data_EventItem.prototype.getHomeHitsScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_HITS);
        };

        Data_EventItem.prototype.getAwayHitsScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_HITS);
        };

        Data_EventItem.prototype.getHomeErrorsScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_ERRORS);
        };

        Data_EventItem.prototype.getAwayErrorsScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_ERRORS);
        };

        Data_EventItem.prototype.getHomeExtraScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RESULT_PERIOD_X);
        };

        Data_EventItem.prototype.getAwayExtraScore = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RESULT_PERIOD_X);
        };

        Data_EventItem.prototype.getHomePesapalloFirstHalfScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_FIRST_HALF);
        };

        Data_EventItem.prototype.getAwayPesapalloFirstHalfScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_FIRST_HALF);
        };

        Data_EventItem.prototype.getHomePesapalloSecondHalfScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_SECOND_HALF);
        };

        Data_EventItem.prototype.getAwayPesapalloSecondHalfScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_SECOND_HALF);
        };

        Data_EventItem.prototype.getHomePesapalloPenaltiesScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_PENALTIES);
        };

        Data_EventItem.prototype.getAwayPesapalloPenaltiesScore = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_PENALTIES);
        };

        Data_EventItem.prototype.getOddsWinner = function() {
            return this.getFtWinner();
        };

        Data_EventItem.prototype.getHomeMartialArtsFinished = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED);
        };

        Data_EventItem.prototype.getAwayMartialArtsFinished = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED);
        };

        Data_EventItem.prototype.getHomeMartialArtsFinishedSub = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_SUB);
        };

        Data_EventItem.prototype.getAwayMartialArtsFinishedSub = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_SUB);
        };

        Data_EventItem.prototype.getHomeMartialArtsFinishedRound = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND);
        };

        Data_EventItem.prototype.getAwayMartialArtsFinishedRound = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND);
        };

        Data_EventItem.prototype.isOddsHomeWinner = function() {
            return this.getOddsWinner() === this._constantsManager.getWinnerSides().HOME;
        };

        Data_EventItem.prototype.isOddsAwayWinner = function() {
            return this.getOddsWinner() === this._constantsManager.getWinnerSides().AWAY;
        };

        Data_EventItem.prototype.isOddsDrawWinner = function() {
            return this.getOddsWinner() === this._constantsManager.getWinnerSides().DRAW;
        };

        Data_EventItem.prototype.getService = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_SERVICE));
        };

        Data_EventItem.prototype.hasService = function() {
            var ref;
            return (ref = this.getService()) === 1 || ref === 2;
        };

        Data_EventItem.prototype.hasHomeService = function() {
            return this.getService() === 1;
        };

        Data_EventItem.prototype.hasAwayService = function() {
            return this.getService() === 2;
        };

        Data_EventItem.prototype.getHomeName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_PARTICIPANT_NAME);
        };

        Data_EventItem.prototype.getHomeLogo = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_TEAM_LOGO);
        };

        Data_EventItem.prototype.getAwayName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_PARTICIPANT_NAME);
        };

        Data_EventItem.prototype.getAwayLogo = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_TEAM_LOGO);
        };

        Data_EventItem.prototype.getHomeRedCardCount = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_RED_CARD_COUNT);
        };

        Data_EventItem.prototype.getAwayRedCardCount = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_RED_CARD_COUNT);
        };

        Data_EventItem.prototype.getHomeScoresChanged = function() {
            return this.getValue(this.getFeedIndexes().UPDATEINDEXES_HOME_SCORES_CHANGED);
        };

        Data_EventItem.prototype.getAwayScoresChanged = function() {
            return this.getValue(this.getFeedIndexes().UPDATEINDEXES_AWAY_SCORES_CHANGED);
        };

        Data_EventItem.prototype.getWinner = function() {
            return parseInt(this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_WINNER));
        };

        Data_EventItem.prototype.getFtWinner = function() {
            return parseInt(this.getValue(this.getFeedIndexes().COMMONINDEXES_FT_WINNER));
        };

        Data_EventItem.prototype.hasLiveBetting = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HAS_LIVE_BETTING) === 'y';
        };

        Data_EventItem.prototype.hasLiveBettingByBookmaker = function(bookmakerId) {
            var bookmakersWithLiveInOffer, geoIp, geoIpIsoSubdivisionCode, settings;
            geoIp = this.utilEnviroment.getGlobalGeoIp();
            geoIpIsoSubdivisionCode = this.utilEnviroment.getGeoIpIsoSubdivisionCode0();
            if (!cjs.dic.get('Helper_ClickableBookmaker').isClickable(geoIp, geoIpIsoSubdivisionCode)) {
                return false;
            }
            bookmakersWithLiveInOffer = [];
            settings = this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_BOOKMAKER_LIST_LIVE_IN_OFFER);
            if (settings != null) {
                if (typeof settings === 'string') {
                    bookmakersWithLiveInOffer = settings.split('|').map(function(bookmaker) {
                        return parseInt(bookmaker);
                    });
                } else {
                    bookmakersWithLiveInOffer = [parseInt(settings)];
                }
            }
            return indexOf.call(bookmakersWithLiveInOffer, bookmakerId) >= 0;
        };

        Data_EventItem.prototype.hasLiveCentre = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_HAS_LIVE_CENTRE)) === 1;
        };

        Data_EventItem.prototype.hasPrematchBetslip = function() {
            return parseInt(this.getValue(this.getFeedIndexes().ODDSINDEXES_PREMATCH_ODDS_BETSLIP)) === 1;
        };

        Data_EventItem.prototype.isMarkedAsLive = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_LIVE) === 'y';
        };

        Data_EventItem.prototype.isHomeWinner = function() {
            return this.getWinner() === 1;
        };

        Data_EventItem.prototype.isAwayWinner = function() {
            return this.getWinner() === 2;
        };

        Data_EventItem.prototype.getHomeDrawWinner = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER));
        };

        Data_EventItem.prototype.getAwayDrawWinner = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER));
        };

        Data_EventItem.prototype.isDraw = function() {
            return this.getWinner() === 0;
        };

        Data_EventItem.prototype.isEventWithoutScoreAndNotRetired = function() {
            return this.getHomeScore() === 0 && this.getAwayScore() === 0 && !this.isDraw() && this.getStage() !== this._constantsManager.getEventStages().RETIRED;
        };

        Data_EventItem.prototype.getRank = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_RANK);
        };

        Data_EventItem.prototype.getParticipantStatus = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_PARTICIPANT_STATUS);
        };

        Data_EventItem.prototype.getParticipantStatusSubType = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_PARTICIPANT_STATUS_SUBTYPE);
        };

        Data_EventItem.prototype.getParticipantHoleInfo = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GOLF_HOLE_RESULT);
        };

        Data_EventItem.prototype.getParToday = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GOLF_PAR_TODAY);
        };

        Data_EventItem.prototype.getGolfHolesPlayed = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GOLF_TOTAL_HOLES_PLAYED);
        };

        Data_EventItem.prototype.getGolfFinalResult = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GOLF_FINAL_RESULT);
        };

        Data_EventItem.prototype.isGolfNational = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_IS_NATIONAL_EVENT) === 1;
        };

        Data_EventItem.prototype.getHomeParticipantCountryId = function() {
            return parseInt(this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_PARTICIPANT_COUNTRY_ID, 0));
        };

        Data_EventItem.prototype.getAwayParticipantCountryId = function() {
            return parseInt(this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_PARTICIPANT_COUNTRY_ID, 0));
        };

        Data_EventItem.prototype.getLapTime = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_TIME);
        };

        Data_EventItem.prototype.getGap = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GAP);
        };

        Data_EventItem.prototype.getLapsDistance = function() {
            return String(this.getValue(this.getFeedIndexes().SHAREDINDEXES_LAPS_DISTANCE, ''));
        };

        Data_EventItem.prototype.getRankIsTied = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_RANK_TIED)) === 1;
        };

        Data_EventItem.prototype.isParticipantLive = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_ON_TRACK) === 1;
        };

        Data_EventItem.prototype.wasParticipantLive = function() {
            if (this.isFinished() && this.isEventStageFinished()) {
                return true;
            }
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_ON_TRACK) === 0;
        };

        Data_EventItem.prototype.getGameTime = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_GAME_TIME);
        };

        Data_EventItem.prototype.getRound = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_EVENT_ROUND_NAME, '');
        };

        Data_EventItem.prototype.getCyclingJersey = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_PARTICIPANT_CYCLING_JERSEY);
        };

        Data_EventItem.prototype.getDetailId = function() {
            return this.getId().split(/_/)[2].substr(0, 8);
        };

        Data_EventItem.prototype.isOddPublished = function(oddIndex) {
            return !(new RegExp(oddIndex)).test(this.getValue(this.getFeedIndexes().ODDSINDEXES_INACTIVE_ODDS, ''));
        };

        Data_EventItem.prototype.getLiveSentence = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_CRICKET_LIVE_SENTENCE);
        };

        Data_EventItem.prototype.getStatsSortKey = function() {
            var value;
            value = this.getValue(this.getFeedIndexes().SHAREDINDEXES_STATS_SORT_KEY);
            if (value != null) {
                return parseInt(value);
            } else {
                return value;
            }
        };

        Data_EventItem.prototype.getCurrentDistance = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_CURRENT_DISTANCE);
        };

        Data_EventItem.prototype.getDistance = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_DISTANCE);
        };

        Data_EventItem.prototype.getGrid = function() {
            return String(this.getValue(this.getFeedIndexes().SHAREDINDEXES_GRID, ''));
        };

        Data_EventItem.prototype.getLaps = function() {
            return String(this.getValue(this.getFeedIndexes().SHAREDINDEXES_LAPS, ''));
        };

        Data_EventItem.prototype.getTeamName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_TEAM_NAME);
        };

        Data_EventItem.prototype.getTeam3CharName = function() {
            return String(this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_TEAM_3CHAR_NAME, ''));
        };

        Data_EventItem.prototype.getPitstops = function() {
            return String(this.getValue(this.getFeedIndexes().SHAREDINDEXES_PITSTOPS, ''));
        };

        Data_EventItem.prototype.getWeight = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_WEIGHT);
        };

        Data_EventItem.prototype.getStartingPrice = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_STARTING_PRICE);
        };

        Data_EventItem.prototype.getAge = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AGE);
        };

        Data_EventItem.prototype.getDataStageTime = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_EVENT_STAGE_TIME);
        };

        Data_EventItem.prototype.getStageSortKey = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_STAGE_SORT_KEY, '');
        };

        Data_EventItem.prototype.getCounter = function() {
            return this.getValue('counter');
        };

        Data_EventItem.prototype.getCountryName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_PARTICIPANT_COUNTRY);
        };

        Data_EventItem.prototype.getEachWayHandicap = function() {
            return this.getValue(this.getFeedIndexes().ODDSINDEXES_EACH_WAY_HANDICAP);
        };

        Data_EventItem.prototype.getOriginalId = function() {
            return this.getValue('original_id');
        };

        Data_EventItem.prototype.getTvLiveStreaming = function() {
            return this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING);
        };

        Data_EventItem.prototype.getHome3CharName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_3CHAR_NAME);
        };

        Data_EventItem.prototype.getAway3CharName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_3CHAR_NAME);
        };

        Data_EventItem.prototype.hasBroadcast = function(allowedBookmakers, allowedTvs) {
            return this.hasLiveStreamingBroadcast(allowedBookmakers) || this.hasTVBroadcast(allowedTvs) || this.hasWWWBroadcast();
        };

        Data_EventItem.prototype.getDisabledBroadcastsData = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_BLOCKED_GEOIP_STREAMING);
        };

        Data_EventItem.prototype.hasTVBroadcast = function(allowedTvIds) {
            var broadcastData, data, j, len, ref, ref1, tvItem;
            broadcastData = this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING);
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if (((data != null ? data[1] : void 0) != null)) {
                ref = data[1];
                for (j = 0, len = ref.length; j < len; j++) {
                    tvItem = ref[j];
                    if (ref1 = tvItem.TVI, indexOf.call(allowedTvIds, ref1) >= 0) {
                        return true;
                    }
                }
            }
            return false;
        };

        Data_EventItem.prototype.hasHighlightProviderLiveStream = function() {
            var broadcastData, data, ref;
            broadcastData = this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING);
            data = broadcastData ? JSON.parse(broadcastData) : {};
            return (data != null ? (ref = data[this.getFeedIndexes().HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_INDEX]) != null ? ref.length : void 0 : void 0) > 0;
        };

        Data_EventItem.prototype.hasLiveStreamingBroadcast = function(allowedBookmakers) {
            var broadcastData, data, j, len, ref, ref1, ref2, tvItem;
            broadcastData = this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING);
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if (data != null ? (ref = data[this.getFeedIndexes().HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_INDEX]) != null ? ref.length : void 0 : void 0) {
                return true;
            } else if ((data != null ? data[2] : void 0) == null) {
                return false;
            }
            ref1 = data[2];
            for (j = 0, len = ref1.length; j < len; j++) {
                tvItem = ref1[j];
                if ((tvItem[this.getFeedIndexes().LOCALIZEKEYINDEXES_BOOKMAKER] != null) && (ref2 = tvItem[this.getFeedIndexes().LOCALIZEKEYINDEXES_BOOKMAKER], indexOf.call(allowedBookmakers, ref2) >= 0)) {
                    return true;
                }
            }
            return false;
        };

        Data_EventItem.prototype.hasWWWBroadcast = function() {
            var broadcastData, data;
            broadcastData = this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING);
            data = broadcastData ? JSON.parse(broadcastData) : {};
            if ((data != null ? data[3] : void 0) != null) {
                return true;
            } else {
                return false;
            }
        };

        Data_EventItem.prototype.isStatsResults = function() {
            var categoryId, isMotorsport, isSpeedway, isWinterSport, sports, superTemplateList;
            superTemplateList = this.utilEnviroment.getTournamentTemplateCategoryList();
            sports = this._constantsManager.getSports();
            isWinterSport = this.utilSport.inGroup(this.getSportId(), sports.WINTER_SPORTS);
            isMotorsport = this.utilSport.inGroup(this.getSportId(), sports.MOTORSPORT);
            isSpeedway = false;
            if (isMotorsport) {
                categoryId = this.getLeague().getSuperTemplateId();
                isSpeedway = superTemplateList[categoryId] === 'SPEEDWAY';
            }
            return isWinterSport || isSpeedway;
        };

        Data_EventItem.prototype.getStatsResultsRank = function() {
            var value;
            value = this.getStatsResults(this._constantsManager.getStatsDataTypes().RANK);
            if (value != null) {
                return parseInt(value);
            } else {
                return value;
            }
        };

        Data_EventItem.prototype.getStatsResultsJumpRound1 = function() {
            var value;
            value = this.getStatsResults(this._constantsManager.getStatsDataTypes().JUMP_ROUND_1);
            if (value != null) {
                return value + ' m';
            } else {
                return '';
            }
        };

        Data_EventItem.prototype.getStatsResultsJumpRound2 = function() {
            var value;
            value = this.getStatsResults(this._constantsManager.getStatsDataTypes().JUMP_ROUND_2);
            if (value != null) {
                return value + ' m';
            } else {
                return '';
            }
        };

        Data_EventItem.prototype.getStatsResultsJumpCount = function() {
            return String(this.getStatsResults(this._constantsManager.getStatsDataTypes().JUMP_COUNT, ''));
        };

        Data_EventItem.prototype.getStatsResultsPointsRound1 = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().POINTS_ROUND_1);
        };

        Data_EventItem.prototype.getStatsResultsPointsRound2 = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().POINTS_ROUND_2);
        };

        Data_EventItem.prototype.getStatsResultsPoints = function() {
            return String(this.getStatsResults(this._constantsManager.getStatsDataTypes().POINTS, ''));
        };

        Data_EventItem.prototype.getStatsResultsTime = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().TIME);
        };

        Data_EventItem.prototype.getStatsResultsTimeRound1 = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().TIME_ROUND_1);
        };

        Data_EventItem.prototype.getStatsResultsTimeRound2 = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().TIME_ROUND_2);
        };

        Data_EventItem.prototype.getStatsResultsGap = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().GAP);
        };

        Data_EventItem.prototype.getStatsResultsSortKey = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().EVENT_PARTICIPANT_SORT_KEY);
        };

        Data_EventItem.prototype.getStatsResultsPenaltyLap = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().PENALTY_LAP);
        };

        Data_EventItem.prototype.getStatsResultsMissedShot = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().MISSED_SHOT);
        };

        Data_EventItem.prototype.getStatsResultsStopReason = function(typeId) {
            var value;
            if (typeId == null) {
                typeId = this._constantsManager.getStatsDataTypes().STOP_REASON;
            }
            value = this.getStatsResults(typeId);
            if (value) {
                value = parseInt(value);
            }
            if (value === this._constantsManager.getEventIncidentTypes().CUT_OFF && this.utilSport.inGroup(this.getSportId(), this._constantsManager.getSports().WINTER_SPORTS)) {
                return null;
            } else {
                return value;
            }
        };

        Data_EventItem.prototype.getStatsResultsStopReasonRound1 = function() {
            return this.getStatsResultsStopReason(this._constantsManager.getStatsDataTypes().STOP_REASON_ROUND_1);
        };

        Data_EventItem.prototype.getStatsResultsStopReasonRound2 = function() {
            return this.getStatsResultsStopReason(this._constantsManager.getStatsDataTypes().STOP_REASON_ROUND_2);
        };

        Data_EventItem.prototype.isStatsResultsCutOff = function() {
            var value;
            value = this.getStatsResults(this._constantsManager.getStatsDataTypes().STOP_REASON);
            if (value) {
                return parseInt(value) === this._constantsManager.getEventIncidentTypes().CUT_OFF;
            } else {
                return false;
            }
        };

        Data_EventItem.prototype.getStatsResultsOnTrack = function() {
            var value;
            value = this.getStatsResults(this._constantsManager.getStatsDataTypes().ON_TRACK);
            if (value) {
                return parseInt(value) === 1;
            } else {
                return false;
            }
        };

        Data_EventItem.prototype.getStatsResultsLapDistance = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().LAPS_DISTANCE);
        };

        Data_EventItem.prototype.isNationalTeam = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_IS_NATIONAL_EVENT) === 1;
        };

        Data_EventItem.prototype.getStatsResultsRides = function() {
            return String(this.getStatsResults(this._constantsManager.getStatsDataTypes().RIDES, ''));
        };

        Data_EventItem.prototype.getStatsResultsWins = function() {
            return String(this.getStatsResults(this._constantsManager.getStatsDataTypes().WINS, ''));
        };

        Data_EventItem.prototype.getCricketGameTypeId = function() {
            var value;
            value = this.getValue(this.getFeedIndexes().SHAREDINDEXES_CRICKET_TYPE);
            if (value != null) {
                return parseInt(value);
            } else {
                return value;
            }
        };

        Data_EventItem.prototype.isCricketTypeTest = function() {
            return this.getCricketGameTypeId() === this._constantsManager.getCricketTypes().TEST;
        };

        Data_EventItem.prototype.isCricketTypeOdi = function() {
            return this.getCricketGameTypeId() === this._constantsManager.getCricketTypes().ODI;
        };

        Data_EventItem.prototype.isCricketTypeT20 = function() {
            return this.getCricketGameTypeId() === this._constantsManager.getCricketTypes().T20;
        };

        Data_EventItem.prototype.getBatsman = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_CRICKET_BATSMAN);
        };

        Data_EventItem.prototype.getBowler = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_CRICKET_BOWLER);
        };

        Data_EventItem.prototype.getHomeRunRate = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_CRICKET_RUN_RATE);
        };

        Data_EventItem.prototype.getAwayRunRate = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_CRICKET_RUN_RATE);
        };

        Data_EventItem.prototype.getRecentOvers = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_CRICKET_RECENT_OVERS);
        };

        Data_EventItem.prototype.getVisibleRunRate = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_CRICKET_VISIBLE_RUN_RATE);
        };

        Data_EventItem.prototype.getHomeOversFirstInning = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_CRICKET_OVERS_FIRST_INNING);
        };

        Data_EventItem.prototype.getAwayOversFirstinning = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING);
        };

        Data_EventItem.prototype.hasMatchComments = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HAS_MATCH_COMMENTS);
        };

        Data_EventItem.prototype.isPlayingOnSets = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_PLAYING_ON_SETS) === 1;
        };

        Data_EventItem.prototype.getStatsResultsCurrentPointsHome = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().CURRENT_POINTS, null, true);
        };

        Data_EventItem.prototype.getStatsResultsCurrentPointsAway = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().CURRENT_POINTS, null, false);
        };

        Data_EventItem.prototype.getStatsResultsCurrentLegsHome = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().CURRENT_LEG_RESULT, null, true);
        };

        Data_EventItem.prototype.getStatsResultsCurrentLegsAway = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().CURRENT_LEG_RESULT, null, false);
        };

        Data_EventItem.prototype.getStatsResultsResultHome = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().RESULT, null, true);
        };

        Data_EventItem.prototype.getStatsResultsResultAway = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().RESULT, null, false);
        };

        Data_EventItem.prototype.getStatsResultsIsPlayingHome = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().IS_PLAYING, null, true);
        };

        Data_EventItem.prototype.getStatsResultsIsPlayingAway = function() {
            return this.getStatsResults(this._constantsManager.getStatsDataTypes().IS_PLAYING, null, false);
        };

        Data_EventItem.prototype.homeIsPlaying = function() {
            return parseInt(this.getStatsResultsIsPlayingHome()) === 1;
        };

        Data_EventItem.prototype.awayIsPlaying = function() {
            return parseInt(this.getStatsResultsIsPlayingAway()) === 1;
        };

        Data_EventItem.prototype.getMainBookmakerId = function() {
            return this.getValue(this.getFeedIndexes().ODDSINDEXES_BOOKMAKER_ID);
        };

        Data_EventItem.prototype.hasPreview = function() {
            return this.isScheduled() && this.hasMatchComments() && this._utilConfig.get('app', 'match_comments', 'enable');
        };

        Data_EventItem.prototype.hasFinalResultOnly = function() {
            var sourceTypeOfGame;
            sourceTypeOfGame = this.getValue(this.getFeedIndexes().SHAREDINDEXES_SOURCE_TYPE_OF_GAME);
            return sourceTypeOfGame === 2 || (sourceTypeOfGame === -1 && this.getLeague().getValue(this.getFeedIndexes().LEAGUEINDEXES_SOURCE_TYPE) === '2');
        };

        Data_EventItem.prototype.isUnverifiedSource = function() {
            var sourceTypeOfGame;
            sourceTypeOfGame = this.getValue(this.getFeedIndexes().SHAREDINDEXES_SOURCE_TYPE_OF_GAME);
            return sourceTypeOfGame === 1 || (sourceTypeOfGame === -1 && this.getLeague().getValue(this.getFeedIndexes().LEAGUEINDEXES_SOURCE_TYPE) === '1');
        };

        Data_EventItem.prototype.isSwappedParticipants = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_SWAPPED_PARTICIPANTS);
        };

        Data_EventItem.prototype.hasLineps = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HAS_LINEUPS);
        };

        Data_EventItem.prototype.getInfoNotice = function() {
            return this.getValue(this.getFeedIndexes().UPDATELOCALINDEXES_INFO_NOTICE);
        };

        Data_EventItem.prototype.getBestOfFrames = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_BEST_OF_FRAMES, '');
        };

        Data_EventItem.prototype.getHomePitcher = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_PITCHER);
        };

        Data_EventItem.prototype.getAwayPitcher = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_PITCHER);
        };

        Data_EventItem.prototype.hasSwappedParticipants = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_SWAPPED_PARTICIPANTS);
        };

        Data_EventItem.prototype.getAudioComments = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_AUDIO_COMMENTS);
        };

        Data_EventItem.prototype.getHomeParticipantIds = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_HOME_PARTICIPANT_IDS, '');
        };

        Data_EventItem.prototype.getEventChannelsInfo = function() {
            return this.getValue("eventChannelsInfo");
        };

        Data_EventItem.prototype.getHomeGoalUnderReview = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_HOME_GOAL_UNDER_REVIEW, 0));
        };

        Data_EventItem.prototype.getAwayGoalUnderReview = function() {
            return parseInt(this.getValue(this.getFeedIndexes().SHAREDINDEXES_AWAY_GOAL_UNDER_REVIEW, 0));
        };

        Data_EventItem.prototype.isDuel = function() {
            return !isNoDuelTournament(this.getLeague().getId());
        };

        return Data_EventItem;

    })(cjs.dic.getClass('Data_Item'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_EventItem', Data_EventItem, ['dataEventItem']);

}).call(this);
(function() {
    var Data_LeagueHolder, dic,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_LeagueHolder = (function(superClass) {
        extend(Data_LeagueHolder, superClass);

        function Data_LeagueHolder() {
            return Data_LeagueHolder.__super__.constructor.apply(this, arguments);
        }

        Data_LeagueHolder.prototype.getOrCreateNewLeague = function(id) {
            return this.getOrCreateNewItem(id);
        };

        Data_LeagueHolder.prototype.getLeague = function(id) {
            return this.getItem(id);
        };

        Data_LeagueHolder.prototype.hasLeague = function(id) {
            return this.hasItem(id);
        };

        Data_LeagueHolder.prototype.removeLeague = function(id) {
            return this.removeItem(id);
        };

        Data_LeagueHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_LeagueItem');
        };

        return Data_LeagueHolder;

    })(cjs.dic.getClass('Data_Holder'));

    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;

    dic.registerClass('Data_LeagueHolder', Data_LeagueHolder, ['dataLeagueHolder']);

    dic.registerClass('Data_LeagueHolderArchive', Data_LeagueHolder, ['dataLeagueHolderArchive']);

    dic.registerClass('Data_LeagueHolderMygames', Data_LeagueHolder, ['dataLeagueHolderMygames']);

    dic.registerClass('Data_LeagueHolderTemporary', Data_LeagueHolder, ['dataLeagueHolderTemporary']);

    dic.registerClass('Data_LeagueHolderFiltered', Data_LeagueHolder, ['dataLeagueHolderFiltered']);

}).call(this);
(function() {
    var Data_LeagueHolderProxy, initDataLeagueHolderProxy,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_LeagueHolderProxy = (function(superClass) {
        extend(Data_LeagueHolderProxy, superClass);

        function Data_LeagueHolderProxy() {
            return Data_LeagueHolderProxy.__super__.constructor.apply(this, arguments);
        }

        Data_LeagueHolderProxy.prototype.getLeagueHolder = function() {
            return this.getHolder();
        };

        Data_LeagueHolderProxy.prototype.getLeagueHandler = function() {
            return this.getHandler();
        };

        Data_LeagueHolderProxy.prototype.findLeagueHolderByLeagueId = function(leagueId) {
            return this.findHolderByItemId(leagueId);
        };

        Data_LeagueHolderProxy.prototype.findLeagueHandlerByLeagueId = function(leagueId) {
            return this.findHandlerByItemId(leagueId);
        };

        Data_LeagueHolderProxy.prototype.getLeagueValue = function(leagueId, index) {
            return this.getItemValue(leagueId, index);
        };

        return Data_LeagueHolderProxy;

    })(cjs.dic.getClass('Data_HolderProxy'));

    initDataLeagueHolderProxy = function(Data_LeagueHolder, Data_LeagueHolderMygames, Data_LeagueHolderArchive, Data_LeagueHolderTemporary, Data_LeagueHandler, Data_LeagueHandlerMygames, Data_LeagueHandlerArchive, Data_LeagueHandlerTemporary) {
        var handlers, holderProxy, holderProxyClass, holders;
        holderProxy = new Data_LeagueHolderProxy();
        holderProxyClass = cjs.dic.getClass('Data_HolderProxy');
        holders = {};
        holders[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_LeagueHolder;
        holders[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_LeagueHolderArchive;
        holders[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_LeagueHolderMygames;
        holders[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_LeagueHolderTemporary;
        holderProxy.setDataHolders(holders);
        handlers = {};
        handlers[holderProxyClass.prototype.SCOPE_DEFAULT] = Data_LeagueHandler;
        handlers[holderProxyClass.prototype.SCOPE_ARCHIVE] = Data_LeagueHandlerArchive;
        handlers[holderProxyClass.prototype.SCOPE_MYGAMES] = Data_LeagueHandlerMygames;
        handlers[holderProxyClass.prototype.SCOPE_TEMPORARY] = Data_LeagueHandlerTemporary;
        holderProxy.setDataHandlers(handlers);
        return holderProxy;
    };

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('Data_LeagueHolderProxy', initDataLeagueHolderProxy, ['dataLeagueHolderProxy', 'dataLeague']);

}).call(this);
(function() {
    var Data_LeagueItem,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_LeagueItem = (function(superClass) {
        extend(Data_LeagueItem, superClass);

        function Data_LeagueItem() {
            Data_LeagueItem.__super__.constructor.apply(this, arguments);
        }

        Data_LeagueItem.prototype.getOriginalId = function() {
            return this.getId().split('_')[1];
        };

        Data_LeagueItem.prototype.getSortKey = function(type) {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_SORT_KEY);
        };

        Data_LeagueItem.prototype.hasTable = function() {
            return parseInt(this.getValue(this.getFeedIndexes().LEAGUEINDEXES_STATS_TYPE)) === 1;
        };

        Data_LeagueItem.prototype.hasLiveTable = function() {
            return parseInt(this.getValue(this.getFeedIndexes().UPDATEINDEXES_HAS_LIVE_TABLE)) === 1;
        };

        Data_LeagueItem.prototype.hasDraw = function() {
            return parseInt(this.getValue(this.getFeedIndexes().LEAGUEINDEXES_STATS_TYPE)) === 2;
        };

        Data_LeagueItem.prototype.getStatsType = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_STATS_TYPE);
        };

        Data_LeagueItem.prototype.getTitle = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_TOURNAMENT_NAME, '');
        };

        Data_LeagueItem.prototype.getCountryId = function() {
            return parseInt(this.getValue(this.getFeedIndexes().LEAGUEINDEXES_COUNTRY_ID));
        };

        Data_LeagueItem.prototype.getCountryName = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_COUNTRY_NAME);
        };

        Data_LeagueItem.prototype.getTournamentId = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_TOURNAMENT_ID);
        };

        Data_LeagueItem.prototype.getTournamentTemplateId = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ID);
        };

        Data_LeagueItem.prototype.getTournamentStageId = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_TOURNAMENT_STAGE_ID);
        };

        Data_LeagueItem.prototype.getStageId = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_TOURNAMENT_STAGE_ID);
        };

        Data_LeagueItem.prototype.getStagesCount = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_STAGES_COUNT);
        };

        Data_LeagueItem.prototype.getTournamentType = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_TOURNAMENT_TYPE);
        };

        Data_LeagueItem.prototype.getTournamentStageType = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_TOURNAMENT_STAGE_TYPE);
        };

        Data_LeagueItem.prototype.getTournamentTemplateKey = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_TOURNAMENT_TEMPLATE_KEY);
        };

        Data_LeagueItem.prototype.getTournamentTemplateName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_NAME);
        };

        Data_LeagueItem.prototype.getTournamentTemplateNameFromTitle = function() {
            return this.getTitle().replace(/(.+: )(.+)( \(.+)/, '$2');
        };

        Data_LeagueItem.prototype.getTournamentTemplateAcronym = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ACRONYM);
        };

        Data_LeagueItem.prototype.getStageName = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_LEAGUE_CAPTION_PART_STAGE_NAME, '');
        };

        Data_LeagueItem.prototype.getSuperTemplateId = function() {
            return parseInt(this.getValue(this.getFeedIndexes().LEAGUEINDEXES_SUPER_TEMPLATE_ID, '0'));
        };

        Data_LeagueItem.prototype.getRaceType = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_RACE_TYPE);
        };

        Data_LeagueItem.prototype._parseValueFromTournamentTemplateKey = function(index) {
            var ttk;
            ttk = this.getTournamentTemplateKey();
            if (ttk != null) {
                return ttk.split('_')[index];
            } else {
                return null;
            }
        };

        Data_LeagueItem.prototype.getCategoryId = function() {
            var categoryId;
            categoryId = this._parseValueFromTournamentTemplateKey(0);
            if (categoryId != null) {
                return parseInt(categoryId);
            } else {
                return null;
            }
        };

        Data_LeagueItem.prototype.getCategoryCaption = function() {
            return this.getValue(this.getFeedIndexes().FULLFEEDINDEXES_CATEGORY_CAPTION);
        };

        Data_LeagueItem.prototype.getTournamentTemplateId = function() {
            var tournamentTemplateId;
            tournamentTemplateId = this._parseValueFromTournamentTemplateKey(1);
            if (tournamentTemplateId != null) {
                return tournamentTemplateId;
            } else {
                return null;
            }
        };

        Data_LeagueItem.prototype.isRaceTypeRace = function() {
            return this.getRaceType() === 'r';
        };

        Data_LeagueItem.prototype.isRaceTypePractice = function() {
            return this.getRaceType() === 'p';
        };

        Data_LeagueItem.prototype.getRaceInfoText = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_NODUELINDEXES_STAGE_INFO);
        };

        Data_LeagueItem.prototype.getPrizeMoney = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_GOLFPARTINDEXES_PRIZE_MONEY);
        };

        Data_LeagueItem.prototype.getPar = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_GOLFPARTINDEXES_PAR);
        };

        Data_LeagueItem.prototype.getEventId = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_NODUELINDEXES_NO_DUEL_EVENT_ID);
        };

        Data_LeagueItem.prototype.getMeetingId = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_MEETING_ID);
        };

        Data_LeagueItem.prototype.getMeetingName = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_MEETING_NAME);
        };

        Data_LeagueItem.prototype.getMeetingTimeStart = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_MEETING_TIME_START);
        };

        Data_LeagueItem.prototype.getMeetingTimeEnd = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_MEETING_TIME_END);
        };

        Data_LeagueItem.prototype.getStageTabs = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_HORSERACINGINDEXES_STAGE_TABS);
        };

        Data_LeagueItem.prototype.getUrl = function() {
            return this.getValue(this.getFeedIndexes().LEAGUEINDEXES_TOURNAMENT_TEMPLATE_URL);
        };

        Data_LeagueItem.prototype.getIs7Rugby = function() {
            return parseInt(this.getValue(this.getFeedIndexes().LEAGUEINDEXES_IS_SEVEN_RUGBY));
        };

        Data_LeagueItem.prototype.getSportId = function() {
            return parseInt(this.getValue('sport_id'));
        };

        Data_LeagueItem.prototype.getSportName = function() {
            return this.getValue('sport');
        };

        Data_LeagueItem.prototype.isOpen = function() {
            return this.getValue('display');
        };

        Data_LeagueItem.prototype.getEventCount = function() {
            return this.getValue('g_count');
        };


        /*
        		Visible in iframe
         */

        Data_LeagueItem.prototype.isPrimary = function() {
            return this.getTournamentType() === 'p';
        };


        /*
        		Invisible in iframe
         */

        Data_LeagueItem.prototype.isSecondary = function() {
            return this.getTournamentType() === 's';
        };


        /*
        		Top league
         */

        Data_LeagueItem.prototype.isTop = function() {
            return this.getTournamentType() === 't';
        };


        /*
        		Closed
         */

        Data_LeagueItem.prototype.isClosed = function() {
            return this.getTournamentType() === 'c';
        };

        Data_LeagueItem.prototype.isGolfPlayOff = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_GOLFPARTINDEXES_IS_GOLF_PLAY_OFF) === '1';
        };

        Data_LeagueItem.prototype.isDuel = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_NODUELINDEXES_IS_DUEL, '1') === '1';
        };

        Data_LeagueItem.prototype.isStableford = function() {
            return this.getValue(this.getFeedIndexes().FSCORE_GOLFPARTINDEXES_IS_GOLF_STABLEFORD) === '1';
        };

        Data_LeagueItem.prototype.addUpcomingDraw = function(upcomingDrawItem) {
            return this.pushValue('upcoming_draw_item', upcomingDrawItem);
        };

        Data_LeagueItem.prototype.getUpcomingDraw = function() {
            return this.getValue('upcoming_draw_item');
        };

        return Data_LeagueItem;

    })(cjs.dic.getClass('Data_Item'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_LeagueItem', Data_LeagueItem, ['dataLeagueItem']);

}).call(this);
(function() {
    var Data_ParticipantHolder, dic,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_ParticipantHolder = (function(superClass) {
        extend(Data_ParticipantHolder, superClass);

        function Data_ParticipantHolder() {
            return Data_ParticipantHolder.__super__.constructor.apply(this, arguments);
        }

        Data_ParticipantHolder.prototype.getOrCreateNewParticipant = function(id) {
            return this.getOrCreateNewItem(id);
        };

        Data_ParticipantHolder.prototype.getParticipant = function(id) {
            return this.getItem(id);
        };

        Data_ParticipantHolder.prototype.hasParticipant = function(id) {
            return this.hasItem(id);
        };

        Data_ParticipantHolder.prototype.removeParticipant = function(id) {
            return this.removeItem(id);
        };

        Data_ParticipantHolder.prototype._getNewItemInstance = function() {
            return cjs.dic.getNewInstance('Data_ParticipantItem');
        };

        return Data_ParticipantHolder;

    })(cjs.dic.getClass('Data_Holder'));

    dic = (typeof window !== "undefined" && window !== null ? window : global).cjs.dic;

    dic.registerClass('Data_ParticipantHolder', Data_ParticipantHolder, ['dataParticipantHolder']);

}).call(this);
(function() {
    var Data_ParticipantItem,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_ParticipantItem = (function(superClass) {
        extend(Data_ParticipantItem, superClass);

        function Data_ParticipantItem(utilString) {
            this.utilString = utilString;
            this.clearEventIds();
            this._isDeleted = false;
        }

        Data_ParticipantItem.prototype.reinit = function() {
            Data_ParticipantItem.__super__.reinit.apply(this, arguments);
            this.clearEventIds();
            return this._isDeleted = false;
        };

        Data_ParticipantItem.prototype.addEventId = function(eventId) {
            return this._eventIds[eventId] = 1;
        };

        Data_ParticipantItem.prototype.clearEventIds = function() {
            return this._eventIds = {};
        };

        Data_ParticipantItem.prototype.getEventIds = function() {
            return this._eventIds;
        };

        Data_ParticipantItem.prototype.getShortName = function() {
            return this.getValue(1);
        };

        Data_ParticipantItem.prototype.getCountryName = function() {
            return this.getValue(2, '');
        };

        Data_ParticipantItem.prototype.getMobileImage = function() {
            return this.getValue(3);
        };

        Data_ParticipantItem.prototype.getSportId = function() {
            var value;
            value = this.getValue(4, '').split(';');
            value = value.map(function(val) {
                if (!val || isNaN(val)) {
                    return 0;
                } else {
                    return parseInt(val);
                }
            });
            if (value.length === 1) {
                return value[0];
            } else {
                return value;
            }
        };

        Data_ParticipantItem.prototype.getCountryId = function() {
            var value;
            value = this.getValue(5, '').split(';');
            value = value.map(function(val) {
                if (!val || isNaN(val)) {
                    return 0;
                } else {
                    return parseInt(val);
                }
            });
            if (value.length === 1) {
                return value[0];
            } else {
                return value;
            }
        };

        Data_ParticipantItem.prototype.getUrl = function() {
            return this.getValue(6);
        };

        Data_ParticipantItem.prototype.getTableImage = function() {
            return this.getValue(7);
        };

        Data_ParticipantItem.prototype.getTeamName = function() {
            return this.getValue(14);
        };

        Data_ParticipantItem.prototype.getTitle = function() {
            return this.utilString.toUpper(this.getCountryName()) + ': ' + this.getShortName();
        };

        Data_ParticipantItem.prototype.setDeleted = function(_isDeleted) {
            this._isDeleted = _isDeleted;
        };

        Data_ParticipantItem.prototype.isDeleted = function() {
            return this._isDeleted;
        };

        return Data_ParticipantItem;

    })(cjs.dic.getClass('Data_Item'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_ParticipantItem', Data_ParticipantItem, ['dataParticipantItem']);

}).call(this);
(function() {
    var Data_UpcomingDrawItem,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    Data_UpcomingDrawItem = (function(superClass) {
        extend(Data_UpcomingDrawItem, superClass);

        function Data_UpcomingDrawItem() {
            Data_UpcomingDrawItem.__super__.constructor.apply(this, arguments);
            this._eventStartTimes = [];
        }

        Data_UpcomingDrawItem.prototype.getSortKey = function() {
            return this.getTournamentStageId + '_' + (99 - this.getLevel());
        };

        Data_UpcomingDrawItem.prototype.getEventsStartTime = function() {
            return this._eventStartTimes;
        };

        Data_UpcomingDrawItem.prototype.addEventStartTime = function(value) {
            return this.getEventsStartTime().push(value);
        };

        Data_UpcomingDrawItem.prototype.getRoundName = function() {
            return this.getValue(this.getFeedIndexes().UPCOMINGDRAWINDEXES_UPCOMING_DRAW_ROUND_NAME);
        };

        Data_UpcomingDrawItem.prototype.getLevel = function() {
            return this.getValue(this.getFeedIndexes().UPCOMINGDRAWINDEXES_UPCOMING_DRAW_LEVEL);
        };

        Data_UpcomingDrawItem.prototype.getTournamentStageId = function() {
            return this.getValue(this.getFeedIndexes().SHAREDINDEXES_TOURNAMENT_STAGE_ID);
        };

        Data_UpcomingDrawItem.prototype.isFinal = function() {
            return !!this.getValue(this.getFeedIndexes().UPCOMINGDRAWINDEXES_UPCOMING_DRAW_IS_FINAL);
        };

        return Data_UpcomingDrawItem;

    })(cjs.dic.getClass('Data_Item'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Data_UpcomingDrawItem', Data_UpcomingDrawItem, ['dataUpcomingDrawItem']);

}).call(this);
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['player-profile/last-matches-rows.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, helper, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "	<div class=\"profileTable__row profileTable__row--main profileTable__row--lastMatchMobile\" data-state=\"" +
                alias2(alias1((depth0 != null ? depth0.tournamentTemplateShortCode : depth0), depth0)) +
                "\">\n		 <div class=\"soccerTable__flag\">" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.flagId : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n		 <div class=\"soccerTable__league\"><a href=\"" +
                alias2(((helper = (helper = helpers.tournamentUrl || (depth0 != null ? depth0.tournamentUrl : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "tournamentUrl",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.tournamentTitle : depth0), depth0)) +
                "</a></div>\n		 <div class=\"soccerTable__country\">" +
                alias2(alias1((depth0 != null ? depth0.flagName : depth0), depth0)) +
                "</div>\n	</div>\n    <div class=\"profileTable__row profileTable__row--lastMatches profileTable__row--hover profileTable__row--click\" id=\"" +
                alias2(alias1((depth0 != null ? depth0.eventId : depth0), depth0)) +
                "\" data-hp-url=\"" +
                alias2(alias1((depth0 != null ? depth0.homeParticipantUrl : depth0), depth0)) +
                "\" data-ap-url=\"" +
                alias2(alias1((depth0 != null ? depth0.awayParticipantUrl : depth0), depth0)) +
                "\" data-season=\"" +
                alias2(alias1((depth0 != null ? depth0.tournamentSeason : depth0), depth0)) +
                "\">\n        <div class=\"soccerTable__date\">" +
                alias2(alias1((depth0 != null ? depth0.eventStartTime : depth0), depth0)) +
                "</div>\n        <div class=\"soccerTable__division\">\n            <div class=\"soccerTable__division--flag\">" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.flagId : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n            <div class=\"soccerTable__division--code\"><a href=\"" +
                alias2(alias1((depth0 != null ? depth0.tournamentUrl : depth0), depth0)) +
                "\"><span title=\"" +
                alias2(alias1((depth0 != null ? depth0.tournamentTitle : depth0), depth0)) +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.tournamentTemplateShortCode : depth0), depth0)) +
                "</span></a></div>\n        </div>\n        <div class=\"soccerTable__team soccerTable__team--home" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeWin : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.homeParticipantName : depth0), depth0)) +
                "</div>\n        <div class=\"soccerTable__team soccerTable__team--away" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayWin : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.awayParticipantName : depth0), depth0)) +
                "</div>\n        <div class=\"soccerTable__result\">\n            <div class=\"soccerTable__result--end\">\n            	<div class=\"soccerTable__result--end--first\">" +
                alias2(alias1((depth0 != null ? depth0.homeScore : depth0), depth0)) +
                "</div>\n            	<div class=\"soccerTable__result--end--delimiter\">:</div>\n            	<div class=\"soccerTable__result--end--second\">" +
                alias2(alias1((depth0 != null ? depth0.awayScore : depth0), depth0)) +
                "</div>\n            </div>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.scoreFt : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "        </div>\n        <div class=\"soccerTable__icons soccerTable__icons--matches\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.stats : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(8, data, 0),
                    "inverse": this.program(11, data, 0),
                    "data": data
                })) != null ? stack1 : "") +
                "		</div>\n		<div class=\"soccerTable__resultIcon soccerTable__resultIcon--" +
                alias2(alias1((depth0 != null ? depth0.winLoseClassSuffix : depth0), depth0)) +
                "\" title=\"" +
                alias2(alias1((depth0 != null ? depth0.winLoseTitle : depth0), depth0)) +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.winLoseShort : depth0), depth0)) +
                "</div>\n    </div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "<span class=\"flag fl_" +
                alias2(alias1((depth0 != null ? depth0.flagId : depth0), depth0)) +
                "\" title=\"" +
                alias2(alias1((depth0 != null ? depth0.flagName : depth0), depth0)) +
                "\"></span>";
        },
        "4": function(depth0, helpers, partials, data) {
            return " soccerTable__team--bold";
        },
        "6": function(depth0, helpers, partials, data) {
            return "                <div class=\"soccerTable__result--prev\">(" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.scoreFt : depth0), depth0)) +
                ")</div>\n";
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.stats : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(9, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "9": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "            	<div class=\"soccerTable__icon soccerTable__icon--" +
                alias2(alias1((depth0 != null ? depth0.type : depth0), depth0)) +
                "\">\n            		<div class=\"soccerTable__iconImage soccerTable__iconImage--" +
                alias2(alias1((depth0 != null ? depth0.type : depth0), depth0)) +
                "\" title=\"" +
                alias2(alias1(((stack1 = (depth0 != null ? depth0.header : depth0)) != null ? stack1.minutesPlayed : stack1), depth0)) +
                "\"></div>\n            		<div class=\"soccerTable__iconText soccerTable__iconText--" +
                alias2(alias1((depth0 != null ? depth0.type : depth0), depth0)) +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.value : depth0), depth0)) +
                "</div>\n            	</div>\n";
        },
        "11": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.absenceCategory : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(12, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "12": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                <div class=\"soccerTable__absence\" title=\"" +
                alias2(alias1((depth0 != null ? depth0.absenceTypeText : depth0), depth0)) +
                "\">\n                    " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.absenceIcon : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(13, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n                    <div class=\"soccerTable__absence--text\">" +
                alias2(alias1((depth0 != null ? depth0.absenceCategory : depth0), depth0)) +
                "</div>\n                </div>\n";
        },
        "13": function(depth0, helpers, partials, data) {
            return "<div class=\"soccerTable__absence--icon absence " +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.absenceIcon : depth0), depth0)) +
                "\"></div>";
        },
        "15": function(depth0, helpers, partials, data) {
            var helper;

            return "    <div class=\"profileTable__row profileTable__row--last show-more-last-matches\"><a>" +
                this.escapeExpression(((helper = (helper = helpers.showMore || (depth0 != null ? depth0.showMore : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "showMore",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</a></div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"profileTable__matchTable\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.lastMatches : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.hasMoreLastMatches : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(15, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n<script type=\"text/javascript\">\n    $this = $('.profileTable__row--lastMatchMobile');\n\n    $element = $('.soccerTable__iconText');\n	for(var i = 0; i < $element.length; i++) {\n		if($element.eq(i).html() === '1') {\n			$element.eq(i).addClass('soccerTable__iconText--hide');\n		}\n	}\n\n	$elementYellow = $('.soccerTable__iconText--yellow-card');\n	for(var i = 0; i < $elementYellow.length; i++) {\n		if($elementYellow.html() === '2') {\n			$elementYellow.eq(i).closest('.soccerTable__icons').find('.soccerTable__iconImage--red-card').addClass('soccerTable__iconImage--yellow-red-card').removeClass('soccerTable__iconImage--red-card');\n		}\n	}\n\n	$('body').on('click', '.show-more-last-matches', function() {\n\n		var interval = setInterval(stopTimer, 100);\n\n		function stopTimer() {\n			if($('#preload').css('display') === 'none') {\n				clearInterval(interval);\n				var lastMatches = $('.profileTable__row--lastMatches');\n				for (var i = 0; i < lastMatches.length; i++) {\n					if(lastMatches.eq(i).find('.soccerTable__iconText--yellow-card').html() === '2') {\n						lastMatches.eq(i).find('.soccerTable__iconImage--red-card').addClass('soccerTable__iconImage--yellow-red-card').remove('soccerTable__iconImage--red-card');\n					}\n				}\n			}\n		}\n	})\n\n    $(document).ready(function() {\n        $this.eq(0).addClass('profileTable__row--lastMatchMobileShow');\n        var actualElement = $this.eq(0).attr('data-state');\n        for(var i = 1; i < $this.length; i++) {\n            if($this.eq(i).attr('data-state') != actualElement) {\n                $this.eq(i).addClass('profileTable__row--lastMatchMobileShow');\n                actualElement = $this.eq(i).attr('data-state');\n            }\n        }\n    })\n</script>\n\n\n\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/odds-content.tpl'] = template({
        "1": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isBettingType_ASIAN_HANDICAP : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.oddsCells : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "");
        },
        "2": function(depth0, helpers, partials, data) {
            var helper;

            return "					<col width=\"" +
                this.escapeExpression(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">\n";
        },
        "4": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (data && data.first), {
                "name": "if",
                "hash": {},
                "fn": this.program(5, data, 0, blockParams, depths),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "5": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers.each.call(depth0, depth0, {
                "name": "each",
                "hash": {},
                "fn": this.program(6, data, 0, blockParams, depths),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "6": function(depth0, helpers, partials, data, blockParams, depths) {
            return "							<col width=\"" +
                this.escapeExpression(this.lambda((depths[3] != null ? depths[3].defaultColumnWidth : depths[3]), depth0)) +
                "\">\n";
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1, helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "				<col width=\"" +
                alias3(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isNotBettingType_HOME_AWAY_DRAW_NO_BET : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "				<col width=\"" +
                alias3(((helper = (helper = helpers.defaultColumnWidth || (depth0 != null ? depth0.defaultColumnWidth : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "defaultColumnWidth",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isBettingType_TWP : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "");
        },
        "10": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return "				<tr class=\"odd\">\n" +
                ((stack1 = helpers["if"].call(depth0, (data && data.first), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(11, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.each.call(depth0, depth0, {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(16, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "				</tr>\n";
        },
        "11": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return "					<td class=\"bookmaker\" " +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].countOfRows : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n						<div class=\"bookmaker-inner\">\n							" +
                ((stack1 = this.lambda((depths[2] != null ? depths[2].mainBookmakerLinkHtml : depths[2]), depth0)) != null ? stack1 : "") +
                "\n						</div>\n					</td>\n" +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].isBettingType_ASIAN_HANDICAP : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(14, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "");
        },
        "12": function(depth0, helpers, partials, data, blockParams, depths) {
            return " rowspan=\"" +
                this.escapeExpression(this.lambda((depths[3] != null ? depths[3].countOfRows : depths[3]), depth0)) +
                "\"";
        },
        "14": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "						<td class=\"ah ht" +
                alias2(alias1(((stack1 = (depths[3] != null ? depths[3].handicap : depths[3])) != null ? stack1.type : stack1), depth0)) +
                " " +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].countOfRows : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n							<span class=\"button size2 spread\">\n								<span class=\"odds odds-type\">" +
                alias2(alias1(((stack1 = (depths[3] != null ? depths[3].handicap : depths[3])) != null ? stack1.spread : stack1), depth0)) +
                "</span>\n								<span class=\"odds value\">" +
                alias2(alias1(((stack1 = (depths[3] != null ? depths[3].handicap : depths[3])) != null ? stack1.value : stack1), depth0)) +
                "</span>\n							</span>\n						</td>\n";
        },
        "16": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "					<td class=\"kx " +
                alias2(alias1((depth0 != null ? depth0.wrapper_class : depth0), depth0)) +
                " " +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].countOfRows : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(17, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\" " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.bookmakerId : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(22, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n						<span class=\"button" +
                ((stack1 = helpers.unless.call(depth0, (depths[2] != null ? depths[2].isClickable : depths[2]), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(24, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\" " +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].GAeventTracking : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(26, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n							<span class=\"odds odds-type\">" +
                alias2(alias1((depth0 != null ? depth0.label : depth0), depth0)) +
                "</span>\n							<span class=\"odds value\"><span class=\"" +
                alias2(alias1((depth0 != null ? depth0.content_class : depth0), depth0)) +
                "\"\n								" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.alt_text : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(28, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n								" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.eu_value : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(30, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.value : depth0), depth0)) +
                "</span>\n						</span>\n					</td>\n";
        },
        "17": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers.unless.call(depth0, (this.data(data, 1) && this.data(data, 1).last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(18, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.unless.call(depth0, (this.data(data, 1) && this.data(data, 1).first), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(20, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "");
        },
        "18": function(depth0, helpers, partials, data) {
            return "not-last-row";
        },
        "20": function(depth0, helpers, partials, data) {
            return "not-first-row";
        },
        "22": function(depth0, helpers, partials, data) {
            return "data-bookmaker=\"" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.bookmakerId : depth0), depth0)) +
                "\"";
        },
        "24": function(depth0, helpers, partials, data) {
            return " no-odds";
        },
        "26": function(depth0, helpers, partials, data, blockParams, depths) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return " onclick=\"e_t.track_click('bookmaker-button-click', '" +
                alias2(alias1((depths[3] != null ? depths[3].tableType : depths[3]), depth0)) +
                "_" +
                alias2(alias1((depth0 != null ? depth0.odds_type : depth0), depth0)) +
                "');\"";
        },
        "28": function(depth0, helpers, partials, data) {
            return " alt=\"" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.alt_text : depth0), depth0)) +
                "\"";
        },
        "30": function(depth0, helpers, partials, data) {
            return " eu=\"" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.eu_value : depth0), depth0)) +
                "\"";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper;

            return "<div class=\"odds-wrapper\">\n	<table id=\"default-" +
                this.escapeExpression(((helper = (helper = helpers.tableType || (depth0 != null ? depth0.tableType : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "tableType",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\" class=\"odds\" cellspacing=\"0\">\n		<colgroup>\n			<col>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.countOfRows : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0, blockParams, depths),
                    "inverse": this.program(8, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "		</colgroup>\n		<tbody>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.oddsCells : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(10, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "		</tbody>\n	</table>\n</div>\n";
        },
        "useData": true,
        "useDepths": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/prematch-odds.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<div id=\"tab-prematch-odds\">\n    <div id=\"prematch-odds-content\">\n\n    </div>\n</div>";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/live-odds.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<div id=\"tab-live-odds\">\n	<div id=\"live-odds-preload\" class=\"preload-panel\"><div class=\"preload\"><span>Loading ...</span></div></div>\n	<div id=\"live-odds-content\">\n\n	</div>\n</div>";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/odds-wrapper.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "			<li id=\"odds-tab-" +
                alias3(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\"" +
                ((stack1 = helpers["if"].call(depth0, (data && data.last), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                " style=\"display:none\"><span><a href=\"#odds-tab-" +
                alias3(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\" onclick=\"cjs.Api.loader.get('detail/odds/HtmlDomControllerInstance').call(function(controller) {controller.switchTab('" +
                alias3(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "')}); return false\">" +
                alias3(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "title",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</a></span></li>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            return " class=\"selected\"";
        },
        "4": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "		<div id=\"tab-" +
                alias3(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-odds\" style=\"display:none\">\n			<div id=\"" +
                alias3(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-odds-content\">\n			</div>\n			" +
                ((stack1 = helpers["if"].call(depth0, (depths[1] != null ? depths[1].showBonus : depths[1]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n		</div>\n";
        },
        "5": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = this.invokePartial(partials["odds/detail-bonus-match-summary"], depth0, {
                "name": "odds/detail-bonus-match-summary",
                "data": data,
                "helpers": helpers,
                "partials": partials
            })) != null ? stack1 : "");
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper;

            return "<div id=\"odds-main-wrapper\" style=\"display:none\">\n	<div class=\"odds-comparison-bookmark ifmenu-wrapper\">\n		" +
                ((stack1 = ((helper = (helper = helpers.advertNote || (depth0 != null ? depth0.advertNote : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "advertNote",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") +
                "\n		<ul class=\"ifmenu\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "		</ul>\n	</div>\n	<div class=\"color-spacer odds-spacer\"></div>\n\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "	<div class=\"spacer-block\">&nbsp;</div>\n</div>\n";
        },
        "usePartial": true,
        "useData": true,
        "useDepths": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/detail-bonus-odds-comparison.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<div id=\"detail-bonus-odds-comparison-content\"></div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/detail-bonus-odds-comparison-content.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, helper, options, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = helpers.blockHelperMissing,
                alias4 = this.lambda,
                alias5 = this.escapeExpression,
                buffer =
                "    <div class=\"bonusOffers__row ";
            stack1 = ((helper = (helper = helpers.isOdd || (depth0 != null ? depth0.isOdd : depth0)) != null ? helper : alias1), (options = {
                "name": "isOdd",
                "hash": {},
                "fn": this.program(2, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === alias2 ? helper.call(depth0, options) : helper));
            if (!helpers.isOdd) {
                stack1 = alias3.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : alias1), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(4, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === alias2 ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = alias3.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\"\n         onclick=\"if (typeof e_t !== 'undefined') {e_t.track_click('bookmaker-button-click', 'bonus-odds-comparison', '" +
                alias5(alias4((depth0 != null ? depth0.escapedLabel : depth0), depth0)) +
                "');} return !window.open('" +
                ((stack1 = alias4((depth0 != null ? depth0.url : depth0), depth0)) != null ? stack1 : "") +
                "')\">\n    <div class=\"bonusOffers__header\">\n        <span class=\"bonusOffers__logo\">\n            " +
                ((stack1 = alias4((depth0 != null ? depth0.bookmaker : depth0), depth0)) != null ? stack1 : "") +
                "\n        </span>\n        <a class=\"bonusOffers__link\" onclick=\"if (typeof e_t !== 'undefined') {e_t.track_click('bookmaker-button-click', 'bonus-odds-comparison', '" +
                alias5(alias4((depth0 != null ? depth0.escapedLabel : depth0), depth0)) +
                "');} event.stopPropagation(); return !window.open(this.href)\" href=\"" +
                ((stack1 = alias4((depth0 != null ? depth0.url : depth0), depth0)) != null ? stack1 : "") +
                "\" >" +
                alias5(alias4((depth0 != null ? depth0.label : depth0), depth0)) +
                "</a>\n        <span class=\"bonusOffers__text\">" +
                alias5(alias4((depth0 != null ? depth0.text : depth0), depth0)) +
                "</span>\n    </div>\n    </div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            return "odd";
        },
        "4": function(depth0, helpers, partials, data) {
            return "even";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return "<div class=\"bonus-offers-bookmark\">\n    <ul class=\"ifmenu\">\n        <li class=\"selected\">\n            <span><strong>" +
                this.escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "title",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</strong></span>\n        </li>\n    </ul>\n</div>\n<div class=\"color-spacer bonus-offers-spacer\"></div>\n\n<div id=\"bonus-offers\" class=\"odds bonusOffers\" cellspacing=\"0\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.bookmakers : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/detail-bonus-match-summary.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var helper;

            return "<div id=\"detail-bonus-match-summary-content-" +
                this.escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "id",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\" class=\"detail-bonus-match-summary-content\"></div>";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/detail-bonus-match-summary-content.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            return "-live";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "<div class=\"detail-bonus-match-summary-content-inner\" style=\"background-color: #" +
                alias3(((helper = (helper = helpers.backgroundColor || (depth0 != null ? depth0.backgroundColor : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "backgroundColor",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\" onclick=\"if (typeof e_t !== 'undefined') {e_t.track_click('bookmaker-button-click', 'bonus-match-summary" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isLive : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "', '" +
                alias3(this.lambda((depth0 != null ? depth0.escapedLabel : depth0), depth0)) +
                "');} return !window.open('" +
                ((stack1 = ((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "url",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") +
                "')\">\n    <div class=\"detail-bonus-match-summary-content-inner-main\"><a class=\"detail-bonus-match-summary-content-inner-main__anchor\" style=\"color: #" +
                alias3(((helper = (helper = helpers.textColor || (depth0 != null ? depth0.textColor : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "textColor",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\" href=\"" +
                ((stack1 = ((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "url",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") +
                "\" onclick=\"if (typeof e_t !== 'undefined') {e_t.track_click('bookmaker-button-click', 'bonus-match-summary" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isLive : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "', '" +
                alias3(((helper = (helper = helpers.escapedLabel || (depth0 != null ? depth0.escapedLabel : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "escapedLabel",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "');} event.stopPropagation(); return !window.open(this.href)\">" +
                alias3(((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "label",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</a></div>\n    <div class=\"detail-bonus-match-summary-content-inner-description\" style=\"color: #" +
                alias3(((helper = (helper = helpers.textColor || (depth0 != null ? depth0.textColor : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "textColor",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">" +
                alias3(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "text",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</div>\n</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['odds/live-betting-strip.tpl'] = template({
        "1": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda;

            return "    <div class=\"lb-strip-9\">\n        <a href=\"" +
                ((stack1 = alias1((depths[1] != null ? depths[1].liveBettingStripUrl : depths[1]), depth0)) != null ? stack1 : "") +
                "\" target=\"_blank\"" +
                ((stack1 = helpers["if"].call(depth0, (depths[1] != null ? depths[1].GAeventTracking : depths[1]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n                <div class=\"text\">\n                    <div class=\"check_in\">\n                        <span></span>\n                    </div>\n                  <span>\n                    " +
                ((stack1 = alias1((depth0 != null ? depth0.OH_1 : depth0), depth0)) != null ? stack1 : "") +
                "\n                  </span>\n                </div>\n                <div class=\"button_in\"" +
                ((stack1 = helpers["if"].call(depth0, (depths[2] != null ? depths[2].GAeventTracking : depths[2]), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n                    <span>" +
                ((stack1 = alias1((depth0 != null ? depth0.OH_2 : depth0), depth0)) != null ? stack1 : "") +
                "</span>\n                </div>\n        </a>\n    </div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            return " onclick=\"e_t.track_click('bookmaker-button-click', 'lb-strip');\"";
        },
        "4": function(depth0, helpers, partials, data) {
            return " onclick=\"e_t.track_click('bookmaker-button-click', 'lb-strip_button-in'); event.stopPropagation();\"";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.liveBettingStripText : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(1, data, 0, blockParams, depths),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true,
        "useDepths": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(2, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "		<li title=\"" +
                alias2(alias1((depth0 != null ? depth0.title : depth0), depth0)) +
                "\"" +
                ((stack1 = helpers["if"].call(depth0, (data && data.last), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n		" +
                ((stack1 = alias1((depth0 != null ? depth0.htmlToggleIcon : depth0), depth0)) != null ? stack1 : "") +
                "\n		<a href=\"" +
                alias2(alias1((depth0 != null ? depth0.url : depth0), depth0)) +
                "\">\n		" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.logo : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.program(7, data, 0),
                    "data": data
                })) != null ? stack1 : "") +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</a>\n		</li>\n";
        },
        "3": function(depth0, helpers, partials, data) {
            return " class=\"last\"";
        },
        "5": function(depth0, helpers, partials, data) {
            return "<span style=\"background-image: url(" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.logo : depth0), depth0)) +
                ");\" class=\"team-logo\"></span>";
        },
        "7": function(depth0, helpers, partials, data) {
            return "<span class=\"flag fl_" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.countryId : depth0), depth0)) +
                "\"></span>";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.items : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu-empty.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return "<li class=\"last myTeamInfo\">" +
                ((stack1 = ((helper = (helper = helpers.htmlContent || (depth0 != null ? depth0.htmlContent : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "htmlContent",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") +
                "</li>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['my-teams/my-teams-menu-loading.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            return "<li><div class=\"menu_loading\">&nbsp;</div></li>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/broadcast.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<ul class=\"ifmenu\">\n	<li class=\"selected\">\n		<span>\n			<strong>" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) +
                "</strong>\n		</span>\n	</li>\n</ul>\n<div class=\"color-spacer\"></div>\n<div class=\"tv-program\">\n" +
                ((stack1 = this.invokePartial(partials["broadcast/tv-channel"], depth0, {
                    "name": "broadcast/tv-channel",
                    "data": data,
                    "indent": "\t",
                    "helpers": helpers,
                    "partials": partials
                })) != null ? stack1 : "") +
                ((stack1 = this.invokePartial(partials["broadcast/live-streaming"], depth0, {
                    "name": "broadcast/live-streaming",
                    "data": data,
                    "indent": "\t",
                    "helpers": helpers,
                    "partials": partials
                })) != null ? stack1 : "") +
                "	<div class=\"spacer-block\">\n		&nbsp;\n	</div>\n</div>\n\n";
        },
        "usePartial": true,
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/tv-channel.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "	<table class=\"tv-channel\">\n		<thead>\n			<tr class=\"main\">\n				<th>" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.titleTvChannel : depth0), depth0)) +
                "</th>\n			</tr>\n		</thead>\n		<tbody>\n			<tr>\n				<td>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tvChannel : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "				</td>\n			</tr>\n		</tbody>\n	</table>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.url : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.program(6, data, 0),
                "data": data
            })) != null ? stack1 : "");
        },
        "3": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "							<a href=\"" +
                ((stack1 = alias1((depth0 != null ? depth0.url : depth0), depth0)) != null ? stack1 : "") +
                "\" onclick=\"return !window.open(this.href)\" title=\"" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "\"class=\"no-bm\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</a>" +
                ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "4": function(depth0, helpers, partials, data) {
            return ", ";
        },
        "6": function(depth0, helpers, partials, data) {
            var stack1;

            return "							" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) +
                ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.tvChannel : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['broadcast/live-streaming.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "	<table class=\"live-streaming\">\n		<thead>\n			<tr class=\"main\">\n				<th>" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.titleLiveStreaming : depth0), depth0)) +
                "</th>\n			</tr>\n		</thead>\n		<tbody>\n			<tr>\n				<td>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.liveStreaming : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "				</td>\n			</tr>\n		</tbody>\n	</table>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.url : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.program(8, data, 0),
                "data": data
            })) != null ? stack1 : "");
        },
        "3": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                        <a href=\"" +
                ((stack1 = alias1((depth0 != null ? depth0.url : depth0), depth0)) != null ? stack1 : "") +
                "\" onclick=\"return !window.open(this.href)\" title=\"" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "\"\n                         class=\"elink\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</a>" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.text : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "4": function(depth0, helpers, partials, data) {
            return "<span class=\"live-streaming-name-text\"> - " +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.text : depth0), depth0)) +
                "</span>";
        },
        "6": function(depth0, helpers, partials, data) {
            return ", ";
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1;

            return "                        " +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isLiveStream : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(9, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.unless.call(depth0, (data && data.last), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "9": function(depth0, helpers, partials, data) {
            return "<span class=\"live-stream-icon\" title=\"" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.name : depth0), depth0)) +
                "\"></span>";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.liveStreaming : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['page/participant-no-duel/results.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.showCategory : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "				<table class=\"no-duel" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isHidden : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n					" +
                ((stack1 = ((helper = (helper = helpers.colGroup || (depth0 != null ? depth0.colGroup : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "colGroup",
                    "hash": {},
                    "data": data
                }) : helper))) != null ? stack1 : "") +
                "\n					<thead>\n						" +
                ((stack1 = this.lambda((depth0 != null ? depth0.gameHeader : depth0), depth0)) != null ? stack1 : "") +
                "\n					</thead>\n					<tbody>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.gameRows : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "					</tbody>\n				</table>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "					<div class=\"sport-label" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isHiddenCategory : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(3, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                " " +
                alias2(alias1((depth0 != null ? depth0.sportClass : depth0), depth0)) +
                "\"><div class=\"sportIcon sportIcon--" +
                alias2(alias1((depth0 != null ? depth0.sportName : depth0), depth0)) +
                "\"></div><span class=\"sport-icon " +
                alias2(alias1((depth0 != null ? depth0.sportClass : depth0), depth0)) +
                "\"></span>" +
                alias2(alias1((depth0 != null ? depth0.categoryName : depth0), depth0)) +
                "</div>\n";
        },
        "3": function(depth0, helpers, partials, data) {
            return " hidden";
        },
        "5": function(depth0, helpers, partials, data) {
            var stack1;

            return "						" +
                ((stack1 = this.lambda(depth0, depth0)) != null ? stack1 : "") +
                "\n";
        },
        "7": function(depth0, helpers, partials, data) {
            var stack1;

            return "				<table class=\"table-link-more-games noduel-link\">\n					<tbody>\n						<tr class=\"row-link-more-games\"><td><span>" +
                this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.trans : depth0)) != null ? stack1.showMore : stack1), depth0)) +
                "</span></td></tr>\n					</tbody>\n				</table>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"fs-table\">\n	<div id=\"local-mygames\">\n		<div class=\"table-main\">\n			<div class=\"spacer-block\">&nbsp;</div>\n			<ul class=\"ifmenu\">\n				<li class=\"selected\"><span><strong>" +
                this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.trans : depth0)) != null ? stack1.results : stack1), depth0)) +
                "</strong></span></li>\n			</ul>\n			<div class=\"ifmenu-border\"></div>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.meetings : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.hasShowMoreLink : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(7, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "			<div class=\"table-line-bottom\"></div>\n		</div>\n	</div>\n</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/cricket-live-comments.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"color-px-spacer submenu\">&nbsp;</div>\n<div class=\"lines-bookmark\">\n    <ul class=\"ifmenu\">\n        <li class=\"divider\"></li>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </ul>\n</div>\n\n<div class=\"color-spacer lineup-spacer\"></div>\n<div id=\"tab-match-cricket-live-comments\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n\n<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "        <li id=\"commentary-" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-phrase\" class=\"li" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\">\n            <span>\n                <a onclick=\"detail_tab(['commentary', '" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-phrase']);\">" +
                alias3(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) +
                "</a>\n            </span>\n        </li>\n        <li class=\"divider\"></li>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return "    <div id=\"tab-commentary-" +
                this.escapeExpression(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-phrase\" style=\"display: block;\">\n        <table class=\"parts\">\n            <tbody>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "            </tbody>\n        </table>\n    </div>\n";
        },
        "5": function(depth0, helpers, partials, data) {
            var stack1, helper, options, buffer =
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.overSentence : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "            <tr class=\"";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(8, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.overSentence : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(10, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isSimpleComment : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0),
                    "inverse": this.program(14, data, 0),
                    "data": data
                })) != null ? stack1 : "") +
                "            </tr>\n";
        },
        "6": function(depth0, helpers, partials, data) {
            return "                <tr>\n                    <td colspan=\"3\" class=\"over-sentence\">" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.overSentence : depth0), depth0)) +
                "</td>\n                </tr>\n";
        },
        "8": function(depth0, helpers, partials, data) {
            return "even";
        },
        "10": function(depth0, helpers, partials, data) {
            return " last-ball-comment";
        },
        "12": function(depth0, helpers, partials, data) {
            var stack1;

            return "                    <td colspan=\"3\" class=\"comment\">" +
                ((stack1 = this.lambda((depth0 != null ? depth0.comment : depth0), depth0)) != null ? stack1 : "") +
                "</td>\n";
        },
        "14": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                    <td class=\"number\">" +
                alias2(alias1((depth0 != null ? depth0.number : depth0), depth0)) +
                "</td>\n                    <td class=\"balls\"><span class=\"ball " +
                alias2(alias1((depth0 != null ? depth0.type : depth0), depth0)) +
                "\">" +
                alias2(alias1((depth0 != null ? depth0.value : depth0), depth0)) +
                "</span></td>\n                    <td class=\"comment\">" +
                ((stack1 = alias1((depth0 != null ? depth0.comment : depth0), depth0)) != null ? stack1 : "") +
                "</td>\n";
        },
        "16": function(depth0, helpers, partials, data) {
            var helper;

            return "<div class=\"nodata-block\">" +
                this.escapeExpression(((helper = (helper = helpers.noDataTitle || (depth0 != null ? depth0.noDataTitle : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "noDataTitle",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</div><div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.hasData : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.program(16, data, 0),
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/match-comments.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "        <tr>\n            <td class=\"summary-vertical fl\">\n                " +
                ((stack1 = this.lambda((depth0 != null ? depth0.comment : depth0), depth0)) != null ? stack1 : "") +
                "\n            </td>\n        </tr>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda;

            return "<table id=\"match-comments\" class=\"match-comments parts\">\n    <tbody>\n    <tr>\n        <td class=\"h-part\">" +
                ((stack1 = alias1(((stack1 = (depth0 != null ? depth0.table : depth0)) != null ? stack1.label : stack1), depth0)) != null ? stack1 : "") +
                "</td>\n    </tr>\n" +
                ((stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.table : depth0)) != null ? stack1.rows : stack1), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </tbody>\n</table>\n\n<script type=\"text/javascript\">\n    var textHeight = $(\"#match-comments\").height();\n    if(textHeight > 110)\n    {\n        $(\"#match-comments-content\").after(\"\" +\n            \"<div class=\\\"match-comments-switcher-wrapper\\\">\\n\" +\n                \"<span class=\\\"match-comments-switcher\\\">" +
                this.escapeExpression(alias1(((stack1 = (depth0 != null ? depth0.table : depth0)) != null ? stack1.showMore : stack1), depth0)) +
                "</span>\\n\" +\n            \"</div>\");\n        $(\"#match-comments-content\").addClass(\"match-comments-content--hidden\");\n        $(document).on(\"click\", \".match-comments-switcher\", function(){\n            $(\".match-comments-content--hidden\").removeClass();\n            $(\".match-comments-switcher-wrapper\").hide();\n        });\n    }\n    else\n    {\n        $(\".match-comments-content--hidden\").removeClass();\n    }\n</script>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/event-statistics.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"lines-bookmark\">\n    <ul class=\"ifmenu\">\n        <li class=\"divider\"></li>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </ul>\n</div>\n<div class=\"color-spacer lineup-spacer\"></div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "            <li id=\"statistics-" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic\" class=\"li" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\"><span><a onclick=\"detail_tab(['statistics', '" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic']);\">" +
                alias3(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) +
                "</a></span></li>\n            <li class=\"divider\"></li>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return "<div class=\"tab-statistics\" id=\"tab-statistics-" +
                this.escapeExpression(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic\" style=\"display: none;\">\n    <table class=\"parts\">\n        <tbody>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "        </tbody>\n    </table>\n</div>\n";
        },
        "5": function(depth0, helpers, partials, data) {
            var stack1, helper, options, alias1 = this.lambda,
                alias2 = this.escapeExpression,
                buffer =
                "        <tr class=\"";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(6, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\">\n            <td class=\"summary-vertical home\">\n                <div class=\"name\">" +
                alias2(alias1((depth0 != null ? depth0.home : depth0), depth0)) +
                "</div>\n                <div class=\"progress-bar\">\n                    <div class=\"color " +
                alias2(alias1((depth0 != null ? depth0.homeClass : depth0), depth0)) +
                "\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.homePercent : depth0), depth0)) +
                "%;\"></div>\n                </div>\n            </td>\n            <td class=\"score stats\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</td>\n            <td class=\"summary-vertical away\">\n                <div class=\"progress-bar\">\n                    <div class=\"color " +
                alias2(alias1((depth0 != null ? depth0.awayClass : depth0), depth0)) +
                "\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.awayPercent : depth0), depth0)) +
                "%;\"></div>\n                </div>\n                <div class=\"name\">" +
                alias2(alias1((depth0 != null ? depth0.away : depth0), depth0)) +
                "</div>\n            </td>\n        </tr>\n";
        },
        "6": function(depth0, helpers, partials, data) {
            return "even";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"color-px-spacer submenu\">&nbsp;</div>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.showMenu : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/event-statistics-experimental.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"lines-bookmark\">\n    <ul class=\"ifmenu\">\n        <li class=\"divider\"></li>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </ul>\n</div>\n<div class=\"color-spacer lineup-spacer\"></div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var helper, alias1 = helpers.helperMissing,
                alias2 = "function",
                alias3 = this.escapeExpression;

            return "            <li id=\"statistics-" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic\" class=\"li" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "\"><span><a onclick=\"detail_tab(['statistics', '" +
                alias3(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : alias1), (typeof helper === alias2 ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic']);\">" +
                alias3(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) +
                "</a></span></li>\n            <li class=\"divider\"></li>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return "<div class=\"statBox\">\n    <div class=\"tab-statistics\" id=\"tab-statistics-" +
                this.escapeExpression(((helper = (helper = helpers.index || (data && data.index)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "index",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "-statistic\" style=\"display: none;\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </div>\n</div>\n";
        },
        "5": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "        <div class=\"statRow\">\n            <div class=\"statTextGroup\">\n                <div class=\"statText statText--homeValue\">" +
                alias2(alias1((depth0 != null ? depth0.home : depth0), depth0)) +
                "</div>\n                <div class=\"statText statText--titleValue\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</div>\n                <div class=\"statText statText--awayValue\">" +
                alias2(alias1((depth0 != null ? depth0.away : depth0), depth0)) +
                "</div>\n            </div>\n            <div class=\"statBarGroup\">\n                <div class=\"statBar statBar--home\">\n                    <div class=\"statBarBg " +
                alias2(alias1((depth0 != null ? depth0.homeClass : depth0), depth0)) +
                "\">\n                        <div class=\"statBarLine\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.homePercent : depth0), depth0)) +
                "%;\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"statBar statBar--away\">\n                    <div class=\"statBarBg " +
                alias2(alias1((depth0 != null ? depth0.awayClass : depth0), depth0)) +
                "\">\n                        <div class=\"statBarLine\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.awayPercent : depth0), depth0)) +
                "%;\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"color-px-spacer submenu\">&nbsp;</div>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.showMenu : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/event-statistics-preview.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"tab-statistics\">\n    <table class=\"parts\">\n        <tbody>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "        </tbody>\n    </table>\n</div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1, helper, options, alias1 = this.lambda,
                alias2 = this.escapeExpression,
                buffer =
                "        <tr class=\"";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\">\n            <td class=\"summary-vertical home\">\n                <div class=\"name\">" +
                alias2(alias1((depth0 != null ? depth0.home : depth0), depth0)) +
                "</div>\n                <div class=\"progress-bar\">\n                    <div class=\"color " +
                alias2(alias1((depth0 != null ? depth0.homeClass : depth0), depth0)) +
                "\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.homePercent : depth0), depth0)) +
                "%;\"></div>\n                </div>\n            </td>\n            <td class=\"score stats\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</td>\n            <td class=\"summary-vertical away\">\n                <div class=\"progress-bar\">\n                    <div class=\"color " +
                alias2(alias1((depth0 != null ? depth0.awayClass : depth0), depth0)) +
                "\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.awayPercent : depth0), depth0)) +
                "%;\"></div>\n                </div>\n                <div class=\"name\">" +
                alias2(alias1((depth0 != null ? depth0.away : depth0), depth0)) +
                "</div>\n            </td>\n        </tr>\n";
        },
        "3": function(depth0, helpers, partials, data) {
            return "even";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "<div class=\"bottom-block\"><a href=\"#\" onclick=\"detail_tab(['statistics', '0-statistic']); return false\">" +
                this.escapeExpression(((helper = (helper = helpers.transMore || (depth0 != null ? depth0.transMore : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "transMore",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</a> Â»</div>\n<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/event-statistics-preview-experimental.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"statBox\">\n    <div class=\"tab-statistics\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </div>\n</div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "        <div class=\"statRow\">\n            <div class=\"statTextGroup\">\n                <div class=\"statText statText--homeValue\">" +
                alias2(alias1((depth0 != null ? depth0.home : depth0), depth0)) +
                "</div>\n                <div class=\"statText statText--titleValue\">" +
                alias2(alias1((depth0 != null ? depth0.name : depth0), depth0)) +
                "</div>\n                <div class=\"statText statText--awayValue\">" +
                alias2(alias1((depth0 != null ? depth0.away : depth0), depth0)) +
                "</div>\n            </div>\n            <div class=\"statBarGroup\">\n                <div class=\"statBar statBar--home\">\n                    <div class=\"statBarBg " +
                alias2(alias1((depth0 != null ? depth0.homeClass : depth0), depth0)) +
                "\">\n                        <div class=\"statBarLine\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.homePercent : depth0), depth0)) +
                "%;\">\n                        </div>\n                    </div>\n                </div>\n                <div class=\"statBar statBar--away\">\n                    <div class=\"statBarBg " +
                alias2(alias1((depth0 != null ? depth0.awayClass : depth0), depth0)) +
                "\">\n                        <div class=\"statBarLine\" style=\"width: " +
                alias2(alias1((depth0 != null ? depth0.awayPercent : depth0), depth0)) +
                "%;\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, helper;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "<div class=\"bottom-block\"><a href=\"#\" onclick=\"detail_tab(['statistics', '0-statistic']); return false\">" +
                this.escapeExpression(((helper = (helper = helpers.transMore || (depth0 != null ? depth0.transMore : depth0)) != null ? helper : helpers.helperMissing), (typeof helper === "function" ? helper.call(depth0, {
                    "name": "transMore",
                    "hash": {},
                    "data": data
                }) : helper))) +
                "</a> Â»</div>\n<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/match-history.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"lines-bookmark\">\n    <ul class=\"ifmenu\">\n        <li class=\"divider\"></li>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </ul>\n</div>\n<div class=\"color-spacer lineup-spacer\"></div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "            <li id=\"mhistory-" +
                alias2(alias1((depth0 != null ? depth0.index : depth0), depth0)) +
                "-history\" class=\"li" +
                alias2(alias1((depth0 != null ? depth0.index : depth0), depth0)) +
                "\"><span><a onclick=\"detail_tab(['match-history', '" +
                alias2(alias1((depth0 != null ? depth0.index : depth0), depth0)) +
                "-history']);\">" +
                alias2(alias1((depth0 != null ? depth0.title : depth0), depth0)) +
                "</a></span></li>\n            <li class=\"divider\"></li>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            return "<div class=\"px-spacer\">&nbsp;</div>\n";
        },
        "6": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "<div class=\"tab-statistics\" id=\"tab-mhistory-" +
                alias2(alias1((depth0 != null ? depth0.index : depth0), depth0)) +
                "-history\" style=\"display: none;\">\n<table id=\"parts\" class=\"parts parts-first match-history\">\n    <tbody>\n    <tr>\n        <td colspan=\"10\" class=\"h-part\">" +
                alias2(alias1((depth0 != null ? depth0.tableTitle : depth0), depth0)) +
                "</td>\n    </tr>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(7, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </tbody>\n</table>\n</div>\n";
        },
        "7": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isPoints : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(8, data, 0, blockParams, depths),
                "inverse": this.program(18, data, 0, blockParams, depths),
                "data": data
            })) != null ? stack1 : "");
        },
        "8": function(depth0, helpers, partials, data) {
            var stack1, helper, options, buffer =
                "        <tr class=\"points";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(9, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\">\n            <td colspan=\"5\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.scoreItems : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(11, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "            </td>\n        </tr>\n";
        },
        "9": function(depth0, helpers, partials, data) {
            return " even";
        },
        "11": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                <span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.homeScore : depth0), depth0)) +
                "</span>:<span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(12, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.awayScore : depth0), depth0)) +
                "</span>" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.text : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(14, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.unless.call(depth0, (depth0 != null ? depth0.isLast : depth0), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(16, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "12": function(depth0, helpers, partials, data) {
            return "class=\"point-highlight\"";
        },
        "14": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = this.lambda((depth0 != null ? depth0.textSpanHtml : depth0), depth0)) != null ? stack1 : "");
        },
        "16": function(depth0, helpers, partials, data) {
            return ",";
        },
        "18": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1, helper, options, buffer =
                "        <tr class=\"";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(19, data, 0, blockParams, depths),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\">\n            <td class=\"match-history-vertical fr" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(23, data, 0, blockParams, depths),
                    "inverse": this.program(25, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "</td>\n            <td class=\"server" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n                " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeServe : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(27, data, 0, blockParams, depths),
                    "inverse": this.program(29, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "\n            </td>\n            <td class=\"match-history-score" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isCurrent : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(31, data, 0, blockParams, depths),
                    "inverse": this.program(33, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "            </td>\n            <td class=\"server" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">\n                " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayServe : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(27, data, 0, blockParams, depths),
                    "inverse": this.program(29, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "\n            </td>\n            <td class=\"match-history-vertical fl" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(21, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\">" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayLostService : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(23, data, 0, blockParams, depths),
                    "inverse": this.program(25, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "</td>\n        </tr>\n";
        },
        "19": function(depth0, helpers, partials, data) {
            return "even";
        },
        "21": function(depth0, helpers, partials, data) {
            return " lostserve";
        },
        "23": function(depth0, helpers, partials, data, blockParams, depths) {
            return this.escapeExpression(this.lambda((depths[4] != null ? depths[4].transLostServe : depths[4]), depth0));
        },
        "25": function(depth0, helpers, partials, data) {
            return "<div class=\"lostserve-placeholder\">&nbsp;</div>";
        },
        "27": function(depth0, helpers, partials, data) {
            return "<div class=\"icon-box\" title=\"\"><span class=\"icon darts-serve r_ico mh_ico\">&nbsp;</span></div>";
        },
        "29": function(depth0, helpers, partials, data) {
            return "&nbsp;";
        },
        "31": function(depth0, helpers, partials, data, blockParams, depths) {
            return "                <span class=\"score-highlight\">" +
                this.escapeExpression(this.lambda((depths[4] != null ? depths[4].transCurrent : depths[4]), depth0)) +
                "</span>\n";
        },
        "33": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                <span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(34, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.homeScore : depth0), depth0)) +
                "</span> - <span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(34, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.awayScore : depth0), depth0)) +
                "</span>\n";
        },
        "34": function(depth0, helpers, partials, data) {
            return "class=\"score-highlight\"";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data, blockParams, depths) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.showMenu : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(1, data, 0, blockParams, depths),
                    "inverse": this.program(4, data, 0, blockParams, depths),
                    "data": data
                })) != null ? stack1 : "") +
                "\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(6, data, 0, blockParams, depths),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n<div class=\"spacer-block\">&nbsp;</div>\n";
        },
        "useData": true,
        "useDepths": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/match-history-preview.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "<table id=\"parts\" class=\"parts parts-first match-history\">\n    <tbody>\n    <tr>\n        <td colspan=\"10\" class=\"h-part\">" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.tableTitle : depth0), depth0)) +
                "</td>\n    </tr>\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "    </tbody>\n</table>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.isPoints : depth0), {
                "name": "if",
                "hash": {},
                "fn": this.program(3, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "3": function(depth0, helpers, partials, data) {
            var stack1, helper, options, buffer =
                "        <tr class=\"points";
            stack1 = ((helper = (helper = helpers.isEven || (depth0 != null ? depth0.isEven : depth0)) != null ? helper : helpers.helperMissing), (options = {
                "name": "isEven",
                "hash": {},
                "fn": this.program(4, data, 0),
                "inverse": this.noop,
                "data": data
            }), (typeof helper === "function" ? helper.call(depth0, options) : helper));
            if (!helpers.isEven) {
                stack1 = helpers.blockHelperMissing.call(depth0, stack1, options)
            }
            if (stack1 != null) {
                buffer += stack1;
            }
            return buffer + "\">\n            <td colspan=\"5\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.scoreItems : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(6, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "            </td>\n        </tr>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            return " even";
        },
        "6": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "                <span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.homeIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(7, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.homeScore : depth0), depth0)) +
                "</span>:<span " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.awayIsChanged : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(7, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">" +
                alias2(alias1((depth0 != null ? depth0.awayScore : depth0), depth0)) +
                "</span>" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.text : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(9, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.unless.call(depth0, (depth0 != null ? depth0.isLast : depth0), {
                    "name": "unless",
                    "hash": {},
                    "fn": this.program(11, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "\n";
        },
        "7": function(depth0, helpers, partials, data) {
            return "class=\"point-highlight\"";
        },
        "9": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = this.lambda((depth0 != null ? depth0.textSpanHtml : depth0), depth0)) != null ? stack1 : "");
        },
        "11": function(depth0, helpers, partials, data) {
            return ",";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tabs : depth0), {
                "name": "each",
                "hash": {},
                "fn": this.program(1, data, 0),
                "inverse": this.noop,
                "data": data
            })) != null ? stack1 : "");
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['lsid/dialogs/delete-account.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "<div class=\"contents\">\n	<div class=\"deleteAccount selected\">\n		<div class=\"header\">" +
                alias2(alias1((depth0 != null ? depth0.headerText : depth0), depth0)) +
                "</div>\n		<div class=\"content\">\n			<div class=\"form\">\n				<form id=\"deleteAccountForm\" class=\"deleteAccountForm\" method=\"post\" action=\"\">\n					<div class=\"deleteAccountForm__text\">" +
                ((stack1 = alias1((depth0 != null ? depth0.infoText : depth0), depth0)) != null ? stack1 : "") +
                "</div>\n					<div class=\"deleteAccountForm__buttons\">\n						<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonYesText : depth0), depth0)) +
                "\" id=\"delete-account-yes\" name=\"delete-account-yes\" tabindex=\"3\">\n						<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonNoText : depth0), depth0)) +
                "\" id=\"delete-account-no\" name=\"delete-account-no\" tabindex=\"4\">\n					</div>\n				</form>\n			</div>\n		</div>\n	</div>\n</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['lsid/dialogs/new-terms-of-use-1.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "<div class=\"contents\">\n	<div class=\"newTermsOfUse1 selected\">\n		<h1>" +
                alias2(alias1((depth0 != null ? depth0.headerText : depth0), depth0)) +
                "</h1>\n		<div class=\"content\">\n			<div class=\"form\">\n				<form id=\"newTermsOfUse1Form\" class=\"newTermsOfUse1Form\" method=\"post\" action=\"\">\n					<div class=\"newTermsOfUse1Form__text\">" +
                ((stack1 = alias1((depth0 != null ? depth0.infoText : depth0), depth0)) != null ? stack1 : "") +
                "</div>\n					<div class=\"newTermsOfUse1Form__buttons\">\n						<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonAgreeText : depth0), depth0)) +
                "\" id=\"terms-agree\" name=\"terms-agree\" tabindex=\"3\">\n						<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonDisagreeText : depth0), depth0)) +
                "\" id=\"terms-disagree\" name=\"terms-disagree\" tabindex=\"4\">\n					</div>\n				</form>\n			</div>\n		</div>\n	</div>\n</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['lsid/dialogs/new-terms-of-use-2.tpl'] = template({
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "<div class=\"contents\">\n	<div class=\"newTermsOfUse2 selected\">\n		<h1>" +
                alias2(alias1((depth0 != null ? depth0.headerText : depth0), depth0)) +
                "</h1>\n		<div class=\"content\">\n			<div class=\"form\">\n				<form id=\"newTermsOfUse2Form\" class=\"newTermsOfUse2Form\" method=\"post\" action=\"\">\n					<div class=\"newTermsOfUse2Form__text\">" +
                ((stack1 = alias1((depth0 != null ? depth0.infoText : depth0), depth0)) != null ? stack1 : "") +
                "</div>\n					<div class=\"newTermsOfUse2Form__clickable\">\n						<div class=\"newTermsOfUse2Form__buttons\">\n							<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonAgreeText : depth0), depth0)) +
                "\" id=\"terms-agree\" name=\"terms-agree\" tabindex=\"3\">\n							<input type=\"button\" value=\"" +
                alias2(alias1((depth0 != null ? depth0.buttonLogoutText : depth0), depth0)) +
                "\" id=\"terms-logout\" name=\"terms-logout\" tabindex=\"4\">\n						</div>\n						<div class=\"newTermsOfUse2Form__links\">\n							<a id=\"delete-account-link\" href=\"#\">" +
                alias2(alias1((depth0 != null ? depth0.deleteAccountText : depth0), depth0)) +
                "</a>\n						</div>\n					</div>\n				</form>\n			</div>\n		</div>\n	</div>\n</div>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['detail/newsfeed.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1;

            return "        <div class=\"rssCategory\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.title : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.rows : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(4, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.showMore : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(15, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "        </div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            return "            <div class=\"rssCategory__title\">\n                " +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.title : depth0), depth0)) +
                "\n            </div>\n";
        },
        "4": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "        <a href=\"" +
                alias2(alias1((depth0 != null ? depth0.link : depth0), depth0)) +
                "\"" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.hidden : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(5, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                " class=\"rssBox\" target=\"_blank\"" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.GAeventTracking : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(7, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                ">\n            <div class=\"rssBoxImages\">\n                <img class=\"rssBoxImages__photo\" width=\"75px\" height=\"auto\" " +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.imageUrl : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(9, data, 0),
                    "inverse": this.program(11, data, 0),
                    "data": data
                })) != null ? stack1 : "") +
                ">\n            </div>\n            <div class=\"rssBoxTexts\">\n                <div class=\"rssBoxTexts__title\">\n                    " +
                ((stack1 = alias1((depth0 != null ? depth0.title : depth0), depth0)) != null ? stack1 : "") +
                "\n                </div>\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.perex : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(13, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "                <div class=\"rssBoxTexts__description\">\n                    " +
                alias2(alias1((depth0 != null ? depth0.published : depth0), depth0)) +
                ", " +
                alias2(alias1((depth0 != null ? depth0.providerName : depth0), depth0)) +
                "\n                </div>\n            </div>\n        </a>\n";
        },
        "5": function(depth0, helpers, partials, data) {
            return " style=\"display: none;\"";
        },
        "7": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return " onclick=\"e_t.track_click('news-article-click', '" +
                alias2(alias1((depth0 != null ? depth0.title : depth0), depth0)) +
                "', null, '" +
                alias2(alias1((depth0 != null ? depth0.itemNumber : depth0), depth0)) +
                "_" +
                alias2(alias1((depth0 != null ? depth0.itemCount : depth0), depth0)) +
                "_" +
                alias2(alias1((depth0 != null ? depth0.providerName : depth0), depth0)) +
                "_" +
                alias2(alias1((depth0 != null ? depth0.published : depth0), depth0)) +
                "', '" +
                alias2(alias1((depth0 != null ? depth0.category : depth0), depth0)) +
                "');\"";
        },
        "9": function(depth0, helpers, partials, data) {
            return " src=\"" +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.imageUrl : depth0), depth0)) +
                "\" ";
        },
        "11": function(depth0, helpers, partials, data) {
            return " src=\"/res/image/newsfeed-placeholder.png\" ";
        },
        "13": function(depth0, helpers, partials, data) {
            return "                    <div class=\"rssBoxTexts__perex\">\n                        " +
                this.escapeExpression(this.lambda((depth0 != null ? depth0.perex : depth0), depth0)) +
                "\n                    </div>\n";
        },
        "15": function(depth0, helpers, partials, data) {
            var alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "            <div class=\"show-more\" data-category=\"" +
                alias2(alias1((depth0 != null ? depth0.categoryId : depth0), depth0)) +
                "\"><a>" +
                alias2(alias1((depth0 != null ? depth0.showMore : depth0), depth0)) +
                "</a></div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"rss\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.categories : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n<div class=\"spacer-block\">&nbsp;</div>\n\n<script type=\"text/javascript\">\n    var newsfeedExpandedCategories = newsfeedExpandedCategories || [];\n	$(function() {\n        $('div.rss div.show-more').on('click', function() {\n            var categoryId = $(this).data(\"category\");\n            newsfeedExpandedCategories.push(categoryId);\n            $(this).parent('.rssCategory').children('a.rssBox').show();\n            $(this).remove();\n        });\n	});\n</script>\n";
        },
        "useData": true
    });
})();
(function() {
    var template = Handlebars.template,
        templates = Handlebars.templates = Handlebars.templates || {};
    templates['components/upcoming-draw/upcoming-draw.tpl'] = template({
        "1": function(depth0, helpers, partials, data) {
            var stack1, alias1 = this.lambda,
                alias2 = this.escapeExpression;

            return "		<div class=\"upcomingDraw__row\">\n" +
                ((stack1 = helpers["if"].call(depth0, (depth0 != null ? depth0.is_final : depth0), {
                    "name": "if",
                    "hash": {},
                    "fn": this.program(2, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "			<div class=\"upcomingDraw__name\">" +
                alias2(alias1((depth0 != null ? depth0.round_name : depth0), depth0)) +
                "</div>\n			&nbsp;-&nbsp;\n			<div class=\"upcomingDraw__term\">" +
                alias2(alias1((depth0 != null ? depth0.start_times : depth0), depth0)) +
                "</div>\n		</div>\n";
        },
        "2": function(depth0, helpers, partials, data) {
            return "			<div class=\"upcomingDraw__icon\"></div>\n";
        },
        "compiler": [6, ">= 2.0.0-beta.1"],
        "main": function(depth0, helpers, partials, data) {
            var stack1;

            return "<div class=\"upcomingDraw\">\n" +
                ((stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.rows : depth0), {
                    "name": "each",
                    "hash": {},
                    "fn": this.program(1, data, 0),
                    "inverse": this.noop,
                    "data": data
                })) != null ? stack1 : "") +
                "</div>\n";
        },
        "useData": true
    });
})();
cjs.HtmlTemplate = {
    "TPL_PLAYER_PROFILE_LAST_MATCHES_ROWS": "player-profile\/last-matches-rows.tpl",
    "TPL_ODDS_ODDS_CONTENT": "odds\/odds-content.tpl",
    "TPL_ODDS_PREMATCH_ODDS": "odds\/prematch-odds.tpl",
    "TPL_ODDS_LIVE_ODDS": "odds\/live-odds.tpl",
    "TPL_ODDS_DETAIL_WRAPPER": "odds\/odds-wrapper.tpl",
    "TPL_ODDS_DETAIL_BONUS_ODDS_COMPARISON": "odds\/detail-bonus-odds-comparison.tpl",
    "TPL_ODDS_DETAIL_BONUS_ODDS_COMPARISON_CONTENT": "odds\/detail-bonus-odds-comparison-content.tpl",
    "TPL_ODDS_DETAIL_BONUS_MATCH_SUMMARY": "odds\/detail-bonus-match-summary.tpl",
    "TPL_ODDS_DETAIL_BONUS_MATCH_SUMMARY_CONTENT": "odds\/detail-bonus-match-summary-content.tpl",
    "TPL_ODDS_LIVE_BETTING_STRIP": "odds\/live-betting-strip.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU": "my-teams\/my-teams-menu.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU_EMPTY": "my-teams\/my-teams-menu-empty.tpl",
    "TPL_MY_TEAMS_MY_TEAMS_MENU_LOADING": "my-teams\/my-teams-menu-loading.tpl",
    "TPL_BROADCAST_BROADCAST": "broadcast\/broadcast.tpl",
    "TPL_BROADCAST_TV_CHANNEL": "broadcast\/tv-channel.tpl",
    "TPL_BROADCAST_LIVE_STREAMING": "broadcast\/live-streaming.tpl",
    "TPL_PAGE_PARTICIPANT_NO_DUEL_RESULTS": "page\/participant-no-duel\/results.tpl",
    "TPL_DETAIL_CRICKET_LIVE_COMMENTS": "detail\/cricket-live-comments.tpl",
    "TPL_DETAIL_MATCH_COMMENTS": "detail\/match-comments.tpl",
    "TPL_DETAIL_EVENT_STATISTICS": "detail\/event-statistics.tpl",
    "TPL_DETAIL_EVENT_STATISTICS_EXPERIMENTAL": "detail\/event-statistics-experimental.tpl",
    "TPL_DETAIL_EVENT_STATISTICS_PREVIEW": "detail\/event-statistics-preview.tpl",
    "TPL_DETAIL_EVENT_STATISTICS_PREVIEW_EXPERIMENTAL": "detail\/event-statistics-preview-experimental.tpl",
    "TPL_DETAIL_MATCH_HISTORY": "detail\/match-history.tpl",
    "TPL_DETAIL_MATCH_HISTORY_PREVIEW": "detail\/match-history-preview.tpl",
    "TPL_LSID_DIALOGS_DELETE_ACCOUNT": "lsid\/dialogs\/delete-account.tpl",
    "TPL_LSID_DIALOGS_NEW_TERMS_OF_USE_1": "lsid\/dialogs\/new-terms-of-use-1.tpl",
    "TPL_LSID_DIALOGS_NEW_TERMS_OF_USE_2": "lsid\/dialogs\/new-terms-of-use-2.tpl",
    "TPL_DETAIL_NEWS_FEED": "detail\/newsfeed.tpl",
    "TPL_COMPONENTS_UPCOMING_DRAW": "components\/upcoming-draw\/upcoming-draw.tpl"
};
(function() {
    var HtmlTemplate;

    HtmlTemplate = (function() {
        function HtmlTemplate(Handlebars, util_enviroment, HtmlTemplate_Helpers) {
            this.Handlebars = Handlebars;
            this.util_enviroment = util_enviroment;
            this.HtmlTemplate_Helpers = HtmlTemplate_Helpers;
        }

        HtmlTemplate.prototype.render = function(template, data) {
            var helperFunction, helperName, partial, partialName, partialNameNoExtension, ref, ref1, ref2;
            if (template == null) {
                throw Error("Template name must be specified.");
            }
            HtmlTemplate = this.util_enviroment.getHtmlTemplate();
            if (((ref = this.Handlebars.templates) != null ? ref[template] : void 0) == null) {
                throw Error("Template '" + template + "' does not exist.");
            }
            if (!Object.keys(this.Handlebars.partials).length) {
                ref1 = this.Handlebars.templates;
                for (partialName in ref1) {
                    partial = ref1[partialName];
                    partialNameNoExtension = partialName.replace('.tpl', '');
                    this.Handlebars.registerPartial(partialNameNoExtension, partial);
                }
            }
            ref2 = this.HtmlTemplate_Helpers;
            for (helperName in ref2) {
                helperFunction = ref2[helperName];
                this.Handlebars.registerHelper(helperName, helperFunction);
            }
            return this.Handlebars.templates[template](data);
        };

        return HtmlTemplate;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('HtmlTemplate', HtmlTemplate);

}).call(this);
(function() {
    var init;

    init = function(Handlebars) {
        var Helpers;
        return Helpers = {
            isEven: function(options) {
                if ((options.data.index + 1) % 2 === 0) {
                    return options.fn(this);
                }
            },
            isOdd: function(options) {
                if ((options.data.index + 1) % 2 === 1) {
                    return options.fn(this);
                }
            },
            block: function(template, context, options) {
                var f;
                f = Handlebars.partials[template];
                if (typeof f !== 'function') {
                    throw Error("Partial '" + template + "' not found.");
                }
                return new Handlebars.SafeString(f(context));
            }
        };
    };

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('HtmlTemplate_Helpers', init);

}).call(this);
(function() {
    var dev;

    dev = {
        initUrl: base_url_protocol + '/x/js/core-debugger_0_0.js',
        initialized: false,
        init: function(callback) {
            callback = (function(fnc) {
                return function() {
                    if (typeof fnc === 'function') {
                        return fnc();
                    }
                };
            })(callback);
            if (this.initialized) {
                return callback();
            }
            if (this.initInternal != null) {
                callback = ((function(_this) {
                    return function(fnc) {
                        return function() {
                            return _this.initInternal(fnc);
                        };
                    };
                })(this))(callback);
            }
            this.initialized = true;
            return $.getScript(this.initUrl, function(data, textStatus, jqxhr) {
                return callback();
            });
        },
        _isDisabled: cjs.dic.get('utilBrowser').isMobile() && !cjs.dic.get('utilBrowser').isAndroid(),
        _errorReportsLimit: (cjs.dic.get('utilBrowser').isAndroid() ? 5 : 20),
        _errorReportsReportedMark: '[cjs.devREPORTED]',
        _errorReportsPrint: false,
        _errorReports: [],
        reportError: function(msg, exception, onlyMessage) {
            var env, error, i, key, len, ref, report, reports, value;
            if (exception == null) {
                exception = null;
            }
            if (onlyMessage == null) {
                onlyMessage = false;
            }
            if (exception) {
                msg += "\n\n---- Stack trace ----\n\n" + (this.stackTrace.get(exception));
                exception.message += " " + this._errorReportsReportedMark;
            }
            if (this._errorReportsPrint) {
                cerr(msg);
            }
            key = void 0;
            value = void 0;
            error = void 0;
            reports = this._errorReports;
            this._errorReports = [];
            env = this._isDisabled || onlyMessage ? "{}" : this._buildEnv();
            ref = this._errorReports;
            for (i = 0, len = ref.length; i < len; i++) {
                report = ref[i];
                reports.push(report);
            }
            this._errorReports = reports;
            reports = null;
            error = {
                msg: msg,
                env: env,
                time: cjs.dic.get('utilDate').timestamp2date('y-m-d_H-i-s')
            };
            while (this._errorReports.length && this._errorReports.length > this._errorReportsLimit) {
                this._errorReports.splice(0, 1);
            }
            return this._errorReports.push(error);
        },
        parseReportObject: function(reports) {
            var report, reportId;
            for (reportId in reports) {
                report = reports[reportId];
                eval('var tmpObj = ' + report.env);
                report.envObj = tmpObj;
            }
            return reports;
        },
        stackTrace: {
            get: function(exception) {
                var e, stackTrace, stackTracePreMsg;
                stackTrace = [];
                stackTracePreMsg = "";
                try {
                    if (!exception) {
                        exception = this._getException();
                    } else {
                        stackTracePreMsg = "Exception message [" + exception.message + "]\n\n";
                    }
                    stackTrace = this._modes[this._mode(exception)](exception);
                } catch (error1) {
                    e = error1;
                    cdir(e);
                    stackTrace.push("Couldn't retrieve stack trace!");
                }
                return stackTracePreMsg + stackTrace.join("\n\n");
            },
            _getException: function() {
                var e;
                try {
                    return this.nonexistingMethod();
                } catch (error1) {
                    e = error1;
                    return e;
                }
            },
            _mode: function(e) {
                if (e["arguments"] && e.stack) {
                    return "chrome";
                } else if (e.stack) {
                    return "firefox";
                }
                return "other";
            },
            _modes: {
                chrome: function(e) {
                    var stack;
                    stack = (e.stack + "\n").replace(/^\S[^\(]+?[\n$]/g, "").replace(/^\s+(at eval )?at\s+/g, "").replace(/^([^\(]+?)([\n$])/g, "{anonymous}()@$1$2").replace(/^Object.<anonymous>\s*\(([^\)]+)\)/g, "{anonymous}()@$1").split("\n");
                    stack.pop();
                    return stack;
                },
                firefox: function(e) {
                    return e.stack.replace(/(?:\n@:0)?\s+$/m, "").replace(/^[\(@]/g, "{anonymous}()@").split("\n");
                },
                other: function(ex) {
                    var anon, args, curr, fn, fnRE, maxStackSize, stack;
                    curr = arguments_.callee.caller.caller;
                    anon = "{anonymous}";
                    fnRE = /function\s*([\w\-$]+)?\s*\(/i;
                    stack = [];
                    fn = void 0;
                    args = void 0;
                    maxStackSize = 10;
                    while (curr && curr["arguments"] && stack.length < maxStackSize) {
                        fn = (fnRE.test(curr.toString()) ? RegExp.$1 || anon : anon);
                        args = Array.prototype.slice.call(curr["arguments"] || []);
                        stack[stack.length] = fn + "(" + args + ")";
                        curr = curr.caller;
                    }
                    return stack;
                }
            }
        },
        _timeProfiles: {},
        _arrayToObject: function(arr, deep) {
            var data, prop, ret;
            if (deep == null) {
                deep = 1;
            }
            if (deep >= 3) {
                return arr;
            }
            ret = $.extend({}, arr);
            for (prop in ret) {
                data = ret[prop];
                ret[prop] = $.extend({}, this._arrayToObject(data, ++deep));
            }
            return ret;
        },
        _buildEnv: function() {
            var env, key, manualAdd, manualStringify, stringifyFunction, stringifyHTMLelement, valOfWindow, value;
            dev = null;
            if ((typeof cjs !== "undefined" && cjs !== null ? cjs.dev : void 0) != null) {
                dev = cjs.dev;
                delete cjs.dev;
            }
            try {
                manualAdd = ['cjs', 'ls', 'clientStorage', 'banners'];
                stringifyFunction = function(fnc) {
                    var e;
                    try {
                        return JSON.stringify({
                            'JSON.stringify': {
                                'function': fnc.toString(),
                                'prototype': fnc.prototype
                            }
                        }, function(key, val) {
                            if (typeof val === "function") {
                                return val.toString();
                            }
                            return val;
                        });
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - stringifyFunction error"';
                    }
                };
                stringifyHTMLelement = function(obj) {
                    var ax, e, el, txt;
                    try {
                        if (!obj || !obj.tagName) {
                            return '"JSON.stringify - stringifyHTMLelement error"';
                        }
                        el = document.createElement("div");
                        el.appendChild(obj.cloneNode(false));
                        txt = el.innerHTML;
                        ax = txt.indexOf('>') + 1;
                        txt = txt.substring(0, ax) + who.innerHTML + txt.substring(ax);
                        el = null;
                        return JSON.stringify(txt);
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - stringifyHTMLelement error"';
                    }
                };
                manualStringify = function(obj) {
                    var e, stringifiedObjects;
                    try {
                        stringifiedObjects = [];
                        return JSON.stringify(obj, function(key, val) {
                            if (key === 'webkitStorageInfo') {
                                return '';
                            }
                            if (typeof val === "object") {
                                if (stringifiedObjects.indexOf(val) >= 0) {
                                    return '"JSON.stringify - Already stringified"';
                                }
                                stringifiedObjects.push(val);
                                if (val instanceof HTMLElement) {
                                    return '"JSON.stringify - HTML element"';
                                }
                                if (((val != null ? val.jquery : void 0) != null) && (val.context != null)) {
                                    return '"JSON.stringify - jquery element"';
                                }
                            }
                            if (typeof val === "function") {
                                return stringifyFunction(val);
                            }
                            return val;
                        });
                    } catch (error1) {
                        e = error1;
                        return '"JSON.stringify - manualStringify error"';
                    }
                };
                env = "{";
                for (key in window) {
                    try {
                        if ((key === 'webkitStorageInfo' || key === 'allEvents')) {
                            continue;
                        }
                        valOfWindow = window[key];
                        if (manualAdd.indexOf(key) >= 0) {
                            value = manualStringify(valOfWindow);
                        } else {
                            value = JSON.stringify(valOfWindow);
                        }
                        if (value === void 0) {
                            if (typeof valOfWindow === "function") {
                                value = stringifyFunction(valOfWindow);
                            } else {
                                value = "\"" + value + "\"";
                            }
                        }
                        env += "\"" + key + "\":" + value + ",";
                    } catch (error1) {
                        env += "\"" + key + "\":\"JSON.stringify - error\",";
                    }
                }
                env = env.substring(0, env.length - 1);
                env += "}";
            } catch (error1) {
                env = "{}";
            }
            if (dev) {
                cjs.dev = dev;
            }
            return env;
        },
        setStartTime: function(timeProfileName) {
            return this._timeProfiles[timeProfileName] = (new Date()).getTime();
        },
        getRunTime: function(timeProfileName) {
            return '' + ((new Date()).getTime() - this._timeProfiles[timeProfileName]) / 1000 + ' s';
        }
    };

    if (typeof window !== "undefined" && window !== null) {
        if (window.cjs == null) {
            window.cjs = {};
        }
        window.cjs.dev = dev;
    } else {
        exports.dev = dev;
    }

}).call(this);
(function() {
    var Notification_MyGames;

    Notification_MyGames = (function() {
        Notification_MyGames.prototype.EXPIRATION_TIME = 180000;

        Notification_MyGames.prototype.BOX_DISTANCE = 5;

        Notification_MyGames.prototype.FADEIN_TIMEOUT = 800;

        Notification_MyGames.prototype.FADEOUT_TIMEOUT = 800;

        Notification_MyGames.prototype.IMAGE_PLAYER_WIDTH = '24px';

        Notification_MyGames.prototype.IMAGE_COUNTRY_WIDTH = '30px';

        Notification_MyGames.prototype.IMAGE_PLAYER_HEIGHT = '30px';

        Notification_MyGames.prototype.IMAGE_COUNTRY_HEIGHT = '30px';

        Notification_MyGames.prototype.BOX_WIDTH = 192;

        Notification_MyGames.NOTIFICATIONS = [];

        Notification_MyGames.prototype.NOTIFICATION_COUNTER = 1;

        Notification_MyGames.prototype.LSID_DATA_KEY = 'lsSettins';

        Notification_MyGames.SETTING_SHOW_WITH_SOUND = 'yessound';

        Notification_MyGames.SETTING_SHOW_WITHOUT_SOUND = 'yessilent';

        Notification_MyGames.SETTING_NOT_SHOW = 'no';

        function Notification_MyGames($, utilEnviroment, utilUrl, utilTrans, utilSport, settingsStorage) {
            this.$ = $;
            this.utilEnviroment = utilEnviroment;
            this.utilUrl = utilUrl;
            this.utilTrans = utilTrans;
            this.utilSport = utilSport;
            this.settingsStorage = settingsStorage;
            this._resizeHandler();
            this._lsid = this.utilEnviroment.getLoginClientObject();
            this._userSettings = null;
        }

        Notification_MyGames.prototype.addNotification = function(notification) {
            var generated, nId, newNotification, ref;
            if (this.utilEnviroment.isResponsive()) {
                return null;
            }
            this._userSettings = this.settingsStorage.read(this.LSID_DATA_KEY);
            if ((((ref = this._userSettings) != null ? ref['mygamesNotifications'] : void 0) != null) && this._userSettings['mygamesNotifications'] === Notification_MyGames.SETTING_NOT_SHOW) {
                return null;
            }
            this._startTimeout();
            newNotification = this._parseData(notification);
            if (newNotification == null) {
                return null;
            }
            Notification_MyGames.NOTIFICATIONS[newNotification['id']] = newNotification;
            generated = this._generateHtml(newNotification);
            this.$(generated).appendTo(this.$('body'));
            this._recalculatedLeftAttributes();
            this._show();
            nId = '#game-notification-' + newNotification['id'];
            this.$(nId).on('click', (function(newNotification, that) {
                return function() {
                    return that.utilEnviroment.detailOpen(newNotification['game-id'], null, false);
                };
            })(newNotification, this));
            this.$(nId + ' .close').on('click', (function(that) {
                return function(event) {
                    event.stopPropagation();
                    return that.$(nId).fadeOut(this.FADEOUT_TIMEOUT, function() {
                        that.$(nId).remove();
                        delete Notification_MyGames.NOTIFICATIONS[newNotification['id']];
                        that._recalculatedLeftAttributes();
                        return that._show();
                    });
                };
            })(this));
            if (this.$('#feed_planter').length !== 0) {
                return this.$(".game-notification").css({
                    'margin-bottom': '200px'
                });
            }
        };

        Notification_MyGames.prototype._startTimeout = function() {
            var fn;
            clearTimeout(this._timeoutId);
            fn = (function(_this) {
                return function() {
                    var currentTime, id, nId, notification, ref, results;
                    if (Object.keys(Notification_MyGames.NOTIFICATIONS).length !== 0) {
                        _this._startTimeout();
                    }
                    ref = Notification_MyGames.NOTIFICATIONS;
                    results = [];
                    for (id in ref) {
                        notification = ref[id];
                        currentTime = Date.now();
                        if (currentTime >= (parseInt(notification['timestamp']) + parseInt(_this.EXPIRATION_TIME))) {
                            nId = '#game-notification-' + notification['id'];
                            results.push(_this.$(nId).fadeOut(_this.FADEOUT_TIMEOUT, (function(notification, that) {
                                return function() {
                                    that.$(nId).remove();
                                    delete Notification_MyGames.NOTIFICATIONS[notification['id']];
                                    that._recalculatedLeftAttributes();
                                    return that._show();
                                };
                            })(notification, _this)));
                        } else {
                            results.push(void 0);
                        }
                    }
                    return results;
                };
            })(this);
            return this._timeoutId = setTimeout(fn, 1000);
        };

        Notification_MyGames.prototype._parseData = function(notification) {
            var data, gid, id, imageUrl, logoAway, logoHome, newNotification, notificationTimestamp, score, subjectParts, subscriptionInfo;
            data = JSON.parse(notification.getData());
            subscriptionInfo = notification.getPush().getSubscriptionInfo();
            subjectParts = notification.getGameSubject().split('_');
            id = subjectParts[subjectParts.length - 1];
            imageUrl = this.utilEnviroment.getBaseImageDataUrl().replace(this.utilUrl.getLocationOrigin(), '');
            notificationTimestamp = data[12];
            if (subscriptionInfo[id]['timestamp'] > (notificationTimestamp * 1000)) {
                return null;
            }
            if (data[3] === '') {
                score = '-';
            } else {
                if (data[4] === 1) {
                    score = '<span class="change">' + data[3].split(':')[0] + '</span> - ' + data[3].split(':')[1];
                } else if (data[4] === 2) {
                    score = data[3].split(':')[0] + ' - <span class="change">' + data[3].split(':')[1] + '</span>';
                } else {
                    score = data[3].split(':')[0] + ' - ' + data[3].split(':')[1];
                }
            }
            if (data[9] !== '') {
                logoHome = 'url(\'' + imageUrl + data[9] + '\')';
            } else {
                logoHome = 'none';
            }
            if (data[11] !== '') {
                logoAway = 'url(\'' + imageUrl + data[11] + '\')';
            } else {
                logoAway = 'none';
            }
            if (data[5] > 2) {
                logoHome = 'none';
                logoAway = 'none';
            }
            gid = 'g_' + subscriptionInfo[id]['sportId'] + '_' + id;
            newNotification = {
                'id': this.NOTIFICATION_COUNTER,
                'text': data[0],
                'label': data[1] + ' - ' + data[2],
                'score': score,
                'logo-home': logoHome,
                'logo-away': logoAway,
                'game-id': gid,
                'image-width': data[10] === 1 ? this.IMAGE_PLAYER_WIDTH : this.IMAGE_COUNTRY_WIDTH,
                'image-height': data[10] === 1 ? this.IMAGE_PLAYER_HEIGHT : this.IMAGE_COUNTRY_HEIGHT,
                'url-home': data[6],
                'url-away': data[7],
                'url-season': data[8],
                'timestamp': Date.now(),
                'hidden': true
            };
            this._playMelody(gid, data[0], subscriptionInfo[id]['sportId']);
            this.NOTIFICATION_COUNTER++;
            return newNotification;
        };

        Notification_MyGames.prototype._generateHtml = function(newNotification) {
            var currentBoxId, html, item;
            item = newNotification;
            currentBoxId = 'game-notification-' + item['id'];
            html = "<div id=\"" + currentBoxId + "\" title=\"" + (this.utilTrans.translate('TRANS_CLICK_FOR_MATCH_DETAIL')) + "\" class=\"game-notification\" style=\"display: none;\">\n<div class=\"notification-content\">\n<div class=\"game-id\" style=\"display:none\">" + item['game-id'] + "</div>\n<div class=\"timestamp\" style=\"display:none\">" + item['timestamp'] + "</div>\n<div class=\"label\">" + item['label'] + "</div>\n<div class=\"logo-home notification-logo\" style=\"background-image: " + item['logo-home'] + "; width: " + item['image-width'] + "; height: " + item['image-height'] + "; background-size: " + item['image-width'] + " " + item['image-height'] + "\"></div>\n<div class=\"logo-away notification-logo\" style=\"background-image: " + item['logo-away'] + "; width: " + item['image-width'] + "; height: " + item['image-height'] + "; background-size: " + item['image-width'] + " " + item['image-height'] + "\"></div>\n<div class=\"score\">" + item['score'] + "</div>\n<div class=\"text\">" + item['text'] + "</div>\n<div class=\"url-home\" style=\"display:none\">" + item['url-home'] + "</div>\n<div class=\"url-away\" style=\"display:none\">" + item['url-away'] + "</div>\n<div class=\"url-season\" style=\"display:none\">" + item['url-season'] + "</div>\n<div class=\"close\" title=\"\"></div>\n</div>\n			   </div>";
            return html;
        };

        Notification_MyGames.prototype._playMelody = function(gameId, actionType, sportId) {
            var soundMelody;
            if ((this._userSettings == null) || (this._userSettings['mygamesNotifications'] == null) || this._userSettings['mygamesNotifications'] === Notification_MyGames.SETTING_SHOW_WITHOUT_SOUND) {
                return;
            }
            soundMelody = '';
            if (actionType === this.utilTrans.translate('TRANS_NOTIFICATION_MESSAGE_MATCH_FINISHED') || actionType === 'Finished.') {
                soundMelody = 'finished';
            } else if (actionType === this.utilTrans.translate('TRANS_NOTIFICATION_MESSAGE_GOAL') || actionType === 'Goal!') {
                soundMelody = 'score-incremented';
            }
            return cjs.Api.loader.get('soundPlayer').call((function(_this) {
                return function(soundPlayer) {
                    return soundPlayer.play(gameId, soundMelody, false, _this.utilSport.getOriginalNameFromId(sportId));
                };
            })(this));
        };

        Notification_MyGames.prototype._recalculatedLeftAttributes = function() {
            var id, left, length, notification, ref, results, tempIndex;
            tempIndex = 1;
            length = Object.keys(Notification_MyGames.NOTIFICATIONS).length;
            ref = Notification_MyGames.NOTIFICATIONS;
            results = [];
            for (id in ref) {
                notification = ref[id];
                left = this._calculateLeft(length, tempIndex, this.BOX_WIDTH, this.BOX_DISTANCE);
                tempIndex++;
                results.push(this.$('#game-notification-' + id).css('left', left + 'px'));
            }
            return results;
        };

        Notification_MyGames.prototype._show = function() {
            var maximumNotifications, queue;
            maximumNotifications = this._getMaximumNotificationCount(this.BOX_DISTANCE, this.BOX_WIDTH);
            queue = this._getQueue(Notification_MyGames.NOTIFICATIONS, maximumNotifications);
            if (queue[0].length) {
                this.$(queue[0].join(',')).show();
            }
            if (queue[1].length) {
                this.$(queue[1].join(',')).hide();
            }
            if (queue[2].length) {
                return this.$(queue[2].join(',')).fadeIn(this.FADEIN_TIMEOUT);
            }
        };

        Notification_MyGames.prototype._getWindowWidth = function() {
            return parseInt(this.$(window).width());
        };

        Notification_MyGames.prototype._getMaximumNotificationCount = function(boxDistance, boxWidth) {
            var count;
            if (typeof boxDistance === 'number' && typeof boxWidth === 'number') {
                count = Math.floor((this._getWindowWidth() - boxDistance) / (boxWidth + boxDistance));
                if (count > 0) {
                    return count;
                } else {
                    return 0;
                }
            } else {
                return 0;
            }
        };

        Notification_MyGames.prototype._getQueue = function(notifications, maximumNotifications) {
            var anyShowed, fadeInIds, hideIds, i, id, ids, len, nId, notification, showIds, totalShowed;
            if (notifications == null) {
                notifications = [];
            }
            showIds = [];
            hideIds = [];
            fadeInIds = [];
            ids = Object.keys(notifications).reverse();
            anyShowed = false;
            totalShowed = 0;
            for (i = 0, len = ids.length; i < len; i++) {
                id = ids[i];
                notification = notifications[id];
                nId = '#game-notification-' + id;
                if (anyShowed === false && notification.hidden && totalShowed < maximumNotifications) {
                    fadeInIds.push(nId);
                    notification.hidden = false;
                } else if (notification.hidden && totalShowed < maximumNotifications) {
                    showIds.push(nId);
                    notification.hidden = false;
                } else if (!notification.hidden && totalShowed >= maximumNotifications) {
                    hideIds.push(nId);
                    notification.hidden = true;
                }
                if (!notification.hidden) {
                    anyShowed = true;
                }
                if (!notification.hidden) {
                    totalShowed++;
                }
            }
            return [showIds, hideIds, fadeInIds];
        };

        Notification_MyGames.prototype._resizeHandler = function() {
            return this.$(window).on('resize', (function(_this) {
                return function() {
                    return _this._show();
                };
            })(this));
        };

        Notification_MyGames.prototype._calculateLeft = function(length, index, boxWidth, boxDistance) {
            if (typeof length !== 'number' || typeof index !== 'number' || typeof boxWidth !== 'number' || typeof boxDistance !== 'number') {
                return 0;
            } else {
                return (length * (boxWidth + boxDistance)) - (index * (boxWidth + boxDistance));
            }
        };

        return Notification_MyGames;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Notification_MyGames', Notification_MyGames, ['notificationMyGames']);

}).call(this);
(function() {
    var NotificationBuilder;

    NotificationBuilder = {};

    NotificationBuilder.get = function(data, push, gameSubject) {
        var Builder;
        Builder = (function() {
            function Builder(_data, _push, _gameSubject) {
                this._data = _data;
                this._push = _push;
                this._gameSubject = _gameSubject;
            }

            Builder.prototype.getData = function() {
                return this._data;
            };

            Builder.prototype.getPush = function() {
                return this._push;
            };

            Builder.prototype.getGameSubject = function() {
                return this._gameSubject;
            };

            return Builder;

        })();
        return new Builder(data, push, gameSubject);
    };

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerGetter('NotificationBuilder', NotificationBuilder);

}).call(this);
(function() {
    var SettingsStorage;

    SettingsStorage = (function() {
        function SettingsStorage(clientStorage, utilEnviroment) {
            this.clientStorage = clientStorage;
            this.utilEnviroment = utilEnviroment;
        }

        SettingsStorage.prototype.write = function(key, value) {
            var data, index, jsonData, ref, ref1;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().storeData(value, key, null);
            } else {
                ref1 = key.split('.'), key = ref1[0], index = ref1[1];
                jsonData = this.read(key);
                if (jsonData == null) {
                    data = {};
                } else {
                    data = jsonData;
                }
                if (index != null) {
                    data[index] = value;
                }
                return this.clientStorage.store(key, JSON.stringify(data));
            }
        };

        SettingsStorage.prototype.read = function(key) {
            var data, dataArr, index, ref, ref1;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().getData(key);
            } else {
                ref1 = key.split('.'), key = ref1[0], index = ref1[1];
                data = this.clientStorage.get(key);
                if (data == null) {
                    return null;
                }
                dataArr = JSON.parse(data);
                if (index != null) {
                    return dataArr[index];
                }
                return dataArr;
            }
        };

        SettingsStorage.prototype.remove = function(key) {
            var ref;
            if ((ref = this.utilEnviroment.getLoginClientObject()) != null ? ref.loggedIn() : void 0) {
                return this.utilEnviroment.getLoginClientObject().removeData(key);
            } else {
                return this.clientStorage.drop(key);
            }
        };

        return SettingsStorage;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SettingsStorage', SettingsStorage, ['settingsStorage']);

}).call(this);
(function() {
    var Builder, Feed_Request, ref;

    Builder = (function() {
        function Builder() {
            this._dic;
            this._updaterGetter;
            this._createAjaxJqObject;
            this._baseFeedXUrlGetter;
            this._projectTypeIdGetter;
            this._localLanguageGetter;
            this._sudateGetter;
            this._pageUtimeGetter;
            this._sportIdGetter;
            this._isMixedFeedGetter;
            this._isParticipantDetailGetter;
            this._detailFeedGeoIpHeadersGetter;
            this._detailMainBookmakerGetter;
            this._isLiveOddsGetter;
            this._eventParticipantIdGetter;
            this._oddsFormatGetter;
            this._tournamentStageIdGetter;
            this._isTournamentPagesEnableGetter;
            this._projectIdGetter;
            this._externalProjectIdGetter;
            return this;
        }

        Builder.prototype.build = function() {
            return new Feed_Request(this._dic, this._updaterGetter, this._createAjaxJqObject, this._baseFeedXUrlGetter, this._projectTypeIdGetter, this._localLanguageGetter, this._sudateGetter, this._pageUtimeGetter, this._sportIdGetter, this._isMixedFeedGetter, this._isParticipantDetailGetter, this._detailFeedGeoIpHeadersGetter, this._detailMainBookmakerGetter, this._isLiveOddsGetter, this._eventParticipantIdGetter, this._oddsFormatGetter, this._tournamentStageIdGetter, this._isTournamentPagesEnableGetter, this._projectIdGetter, this._externalProjectIdGetter, cjs.Api.constantsManager.getSports());
        };

        Builder.prototype.setDic = function(_dic) {
            this._dic = _dic;
            return this;
        };

        Builder.prototype.setUpdaterGetter = function(_updaterGetter) {
            this._updaterGetter = _updaterGetter;
            return this;
        };

        Builder.prototype.setCreateAjaxJqObject = function(_createAjaxJqObject) {
            this._createAjaxJqObject = _createAjaxJqObject;
            return this;
        };

        Builder.prototype.setBaseFeedXUrlGetter = function(_baseFeedXUrlGetter) {
            this._baseFeedXUrlGetter = _baseFeedXUrlGetter;
            return this;
        };

        Builder.prototype.setProjectTypeIdGetter = function(_projectTypeIdGetter) {
            this._projectTypeIdGetter = _projectTypeIdGetter;
            return this;
        };

        Builder.prototype.setLocalLanguageGetter = function(_localLanguageGetter) {
            this._localLanguageGetter = _localLanguageGetter;
            return this;
        };

        Builder.prototype.setSudateGetter = function(_sudateGetter) {
            this._sudateGetter = _sudateGetter;
            return this;
        };

        Builder.prototype.setPageUtimeGetter = function(_pageUtimeGetter) {
            this._pageUtimeGetter = _pageUtimeGetter;
            return this;
        };

        Builder.prototype.setSportIdGetter = function(_sportIdGetter) {
            this._sportIdGetter = _sportIdGetter;
            return this;
        };

        Builder.prototype.setIsMixedFeedGetter = function(_isMixedFeedGetter) {
            this._isMixedFeedGetter = _isMixedFeedGetter;
            return this;
        };

        Builder.prototype.setIsParticipantDetailGetter = function(_isParticipantDetailGetter) {
            this._isParticipantDetailGetter = _isParticipantDetailGetter;
            return this;
        };

        Builder.prototype.setDetailFeedGeoIpHeadersGetter = function(_detailFeedGeoIpHeadersGetter) {
            this._detailFeedGeoIpHeadersGetter = _detailFeedGeoIpHeadersGetter;
            return this;
        };

        Builder.prototype.setDetailMainBookmakerGetter = function(_detailMainBookmakerGetter) {
            this._detailMainBookmakerGetter = _detailMainBookmakerGetter;
            return this;
        };

        Builder.prototype.setIsLiveOddsGetter = function(_isLiveOddsGetter) {
            this._isLiveOddsGetter = _isLiveOddsGetter;
            return this;
        };

        Builder.prototype.setEventParticipantIdGetter = function(_eventParticipantIdGetter) {
            this._eventParticipantIdGetter = _eventParticipantIdGetter;
            return this;
        };

        Builder.prototype.setOddsFormatGetter = function(_oddsFormatGetter) {
            this._oddsFormatGetter = _oddsFormatGetter;
            return this;
        };

        Builder.prototype.setTournamentStageIdGetter = function(_tournamentStageIdGetter) {
            this._tournamentStageIdGetter = _tournamentStageIdGetter;
            return this;
        };

        Builder.prototype.setIsTournamentPagesEnableGetter = function(_isTournamentPagesEnableGetter) {
            this._isTournamentPagesEnableGetter = _isTournamentPagesEnableGetter;
            return this;
        };

        Builder.prototype.setProjectIdGetter = function(_projectIdGetter) {
            this._projectIdGetter = _projectIdGetter;
            return this;
        };

        Builder.prototype.setExternalProjectIdGetter = function(_externalProjectIdGetter) {
            this._externalProjectIdGetter = _externalProjectIdGetter;
            return this;
        };

        return Builder;

    })();

    Feed_Request = (function() {
        Feed_Request.Builder = Builder;

        Feed_Request.beforeFullFeedCallbacks = [];

        function Feed_Request(_dic, _updaterGetter, _createAjaxJqObject, _baseFeedXUrlGetter, _projectTypeIdGetter, _localLanguageGetter, _sudateGetter, _pageUtimeGetter, _sportIdGetter, _isMixedFeedGetter, _isParticipantDetailGetter, _detailFeedGeoIpHeadersGetter, _detailMainBookmakerGetter, _isLiveOddsGetter, _eventParticipantIdGetter, _oddsFormatGetter, _tournamentStageIdGetter, _isTournamentPagesEnableGetter, _projectIdGetter, _externalProjectIdGetter, _sportList) {
            this._dic = _dic;
            this._updaterGetter = _updaterGetter;
            this._createAjaxJqObject = _createAjaxJqObject;
            this._baseFeedXUrlGetter = _baseFeedXUrlGetter;
            this._projectTypeIdGetter = _projectTypeIdGetter;
            this._localLanguageGetter = _localLanguageGetter;
            this._sudateGetter = _sudateGetter;
            this._pageUtimeGetter = _pageUtimeGetter;
            this._sportIdGetter = _sportIdGetter;
            this._isMixedFeedGetter = _isMixedFeedGetter;
            this._isParticipantDetailGetter = _isParticipantDetailGetter;
            this._detailFeedGeoIpHeadersGetter = _detailFeedGeoIpHeadersGetter;
            this._detailMainBookmakerGetter = _detailMainBookmakerGetter;
            this._isLiveOddsGetter = _isLiveOddsGetter;
            this._eventParticipantIdGetter = _eventParticipantIdGetter;
            this._oddsFormatGetter = _oddsFormatGetter;
            this._tournamentStageIdGetter = _tournamentStageIdGetter;
            this._isTournamentPagesEnableGetter = _isTournamentPagesEnableGetter;
            this._projectIdGetter = _projectIdGetter;
            this._externalProjectIdGetter = _externalProjectIdGetter;
            this._sportList = _sportList;
            this._activeRequests = {};
        }

        Feed_Request.prototype.execute = function(action, sportId, overrideCompleteCallback, feedConfig, errorCallback) {
            var completeCallback, feedData;
            if (feedConfig == null) {
                feedConfig = {};
            }
            feedData = this.getFeedData(action, sportId, void 0, feedConfig);
            if (!feedData) {
                return false;
            }
            if (overrideCompleteCallback != null) {
                feedData.completeCallback = overrideCompleteCallback;
            }
            this._abortActiveRequest(feedData.context);
            completeCallback = (function(feedData) {
                return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                    if (feedData.completeCallback) {
                        return feedData.completeCallback(r_status, r_headers, r_content, r_trigger, r_custom_headers);
                    }
                };
            })(feedData);
            if (typeof feedData.beforeCallback === "function") {
                feedData.beforeCallback();
            }
            this._activeRequests[feedData.context] = this._createAjaxJqObject(feedData.url, completeCallback, action);
            this._activeRequests[feedData.context].async(feedData.async);
            if (errorCallback != null) {
                this._activeRequests[feedData.context].setErrorCallback(errorCallback);
            }
            this._activeRequests[feedData.context].update(feedData.postData, feedData.postMethod, feedData.headers);
            return true;
        };

        Feed_Request.prototype.getFeedData = function(feedName, sportId, day, feedConfig) {
            var data, dataType, feedData, feedFunction;
            if (day == null) {
                day = this._sudateGetter();
            }
            if (feedConfig == null) {
                feedConfig = {};
            }
            sportId = this._getSportId(sportId);
            day = this._getDay(day);
            feedFunction = this._getFeedFunctionName(feedName);
            if (this[feedFunction] == null) {
                return false;
            }
            feedData = {
                context: feedName,
                headers: {},
                postData: null,
                postMethod: null,
                async: true,
                feedName: feedName
            };
            data = this[feedFunction](sportId, feedConfig);
            if (!data) {
                return false;
            }
            for (dataType in data) {
                if (data.hasOwnProperty(dataType)) {
                    feedData[dataType] = data[dataType];
                }
                switch (dataType) {
                    case 'url':
                    case 'context':
                        feedData[dataType] = this._replaceTags(feedData[dataType], sportId, day);
                }
            }
            if (!/^http:\/\//.test(feedData.url)) {
                feedData.url = this._baseFeedXUrlGetter() + feedData.url;
            }
            if ((feedData.headers != null) && Object.keys(feedData.headers).length === 0) {
                feedData.headers = {};
            }
            return feedData;
        };

        Feed_Request.prototype.hasActiveRequest = function(context) {
            if (this._activeRequests[context] == null) {
                return false;
            }
            return this._activeRequests[context].updating !== false;
        };


        /*
        		=== feed* functions ===
        		replace tags
        			%LOCAL_LANGUAGE%
        			%SUDATE%
        			%PROJECT_TYPE_ID%
        			%TIMEZONE_HOUR%
        			%SPORT_ID%
        			%IS_LIVE_ODDS%
        			%COUNTRY_ID%
        			%TOURNAMENT_ID%
        			%COUNTRY_TOURNAMENT_ORDER%
        			%EVENT_ID%
        			%EVENT_PARTICIPANT_ID%
        			%ODDS_FORMAT%
        			%TOURNAMENT_STAGE_ID%
        			%BASE_URL%
        
        		return object
        			url: //feed url - needed, auto prepend baseFeedXUrl to relative url
        			context: // feed context, optional, default = feedName
        			beforeCallback: // called before ajax request, optional, default = null
        			completeCallback: // ajax complete callback, optional, default = null
        			headers: // request headers, optional = null
        			postData: // request post data, optional = null
        			postMethod: // request post method, optional default = get
        			async: //default true
         */

        Feed_Request.prototype.feedFull = function(sportId) {
            var headers, url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'fm_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            } else if (this._dic.get('util_sport').isGroupSport(sportId)) {
                url = 'fp_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            } else {
                url = 'f_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1;
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1;
            }
            return {
                context: 'full_%SPORT_ID%_%SUDATE%',
                url: url,
                headers: headers,
                beforeCallback: (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks();
                    };
                })(this),
                afterCallback: this._updaterGetter().response_full_after,
                errorCallback: this._updaterGetter().response_full_error,
                completeCallback: this._updaterGetter().response_full
            };
        };

        Feed_Request.prototype.feedUpdate = function(sportId, feedConfig) {
            var headers;
            headers = {};
            if (feedConfig.benchmarkRequest != null) {
                headers['X-BenchmarkRequest'] = 1;
            }
            return {
                url: 'u_%SPORT_ID%_%PROJECT_TYPE_ID%',
                completeCallback: this._updaterGetter().response_update,
                context: 'update_%SPORT_ID%',
                headers: headers
            };
        };

        Feed_Request.prototype.feedUpdateLocal = function(sportId) {
            return {
                url: 'ul_%SPORT_ID%_%PROJECT_ID%',
                completeCallback: function() {},
                context: 'update_local_%SPORT_ID%'
            };
        };

        Feed_Request.prototype.feedRepair = function(sportId) {
            return {
                url: 'r_%SPORT_ID%_%PROJECT_TYPE_ID%',
                beforeCallback: function() {
                    return cjs.repair_loaded = false;
                },
                completeCallback: this._updaterGetter().response_update,
                context: 'repair_%SPORT_ID%'
            };
        };

        Feed_Request.prototype.feedFrepair = function(sportId) {
            var ret;
            ret = this.feedRepair(sportId);
            ret.context = 'frepair_%SPORT_ID%';
            return ret;
        };

        Feed_Request.prototype.feedCountry = function(sportId) {
            var headers;
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1;
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1;
            }
            return {
                headers: headers,
                url: 'c_%SPORT_ID%_%COUNTRY_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%',
                beforeCallback: (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks();
                    };
                })(this),
                completeCallback: this._updaterGetter().response_full
            };
        };

        Feed_Request.prototype.feedTournament = function(sportId) {
            var beforeCallback, headers, url;
            if (this._isTournamentPagesEnableGetter()) {
                url = 't_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
                beforeCallback = (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        if (cjs.dic.get('utilSport').inGroup(sportId, request._sportList.MOTORSPORT)) {
                            request._updaterGetter().country_tournament_order_fin = true;
                        } else {
                            request._updaterGetter().country_tournament_order_fin = false;
                        }
                        return request.executeBeforeFullFeedCallbacks();
                    };
                })(this);
            } else {
                url = 't_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%';
                beforeCallback = (function(request) {
                    return function() {
                        cjs.full_loaded = false;
                        return request.executeBeforeFullFeedCallbacks();
                    };
                })(this);
            }
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1;
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1;
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                completeCallback: this._updaterGetter().response_full
            };
        };

        Feed_Request.prototype.feedParticipant = function(sportId, feedConfig) {
            var beforeCallback, headers, participantId, url;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            url = "p_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%";
            beforeCallback = function() {
                cjs.full_loaded = false;
                return updater.country_tournament_order_fin = false;
            };
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1;
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1;
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                async: false,
                completeCallback: this._updaterGetter().response_full
            };
        };

        Feed_Request.prototype.feedSeries = function(sportId, feedConfig) {
            var beforeCallback, headers, seriesId, url;
            seriesId = (feedConfig != null ? feedConfig.seriesId : void 0) || "";
            url = "s_%SPORT_ID%_" + seriesId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%";
            beforeCallback = function() {
                cjs.full_loaded = false;
                return updater.country_tournament_order_fin = false;
            };
            headers = {};
            if (!cjs.geoIP) {
                headers['X-GeoIP'] = 1;
            }
            if (this._pageUtimeGetter() === 0) {
                headers['X-utime'] = 1;
            }
            return {
                headers: headers,
                url: url,
                beforeCallback: beforeCallback,
                async: false,
                completeCallback: this._updaterGetter().response_full
            };
        };

        Feed_Request.prototype.feedOdds = function(sportId) {
            var url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'mo_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%';
            } else {
                url = 'fo_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%';
                if (this._externalProjectIdGetter()) {
                    url += '_%EXTERNAL_PROJECT_ID%';
                }
            }
            return {
                context: 'odds_%SPORT_ID%',
                url: url,
                completeCallback: this._updaterGetter().response_odds
            };
        };

        Feed_Request.prototype.feedLoadFullOdds = function(sportId) {
            return {
                url: 'fo_%SPORT_ID%_%SUDATE%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%IS_LIVE_ODDS%Â§',
                completeCallback: this._updaterGetter().response_load_odds
            };
        };

        Feed_Request.prototype.feedUpdatedOdds = function(sportId) {
            var url;
            if (this._isMixedFeedGetter() && sportId === 0) {
                url = 'uo_m_%IS_LIVE_ODDS%';
            } else {
                url = 'uo_%SPORT_ID%_%IS_LIVE_ODDS%';
            }
            return {
                url: url,
                completeCallback: this._updaterGetter().response_updated_odds
            };
        };

        Feed_Request.prototype.feedLoadTournamentOdds = function(sportId) {
            return {
                url: 'to_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%COUNTRY_TOURNAMENT_ORDER%_%PROJECT_TYPE_ID%',
                completeCallback: this._updaterGetter().response_load_odds
            };
        };

        Feed_Request.prototype.feedLoadParticipantOdds = function(sportId, feedConfig) {
            var participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            return {
                url: "po_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%",
                completeCallback: this._updaterGetter().response_load_odds
            };
        };

        Feed_Request.prototype.feedGame = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'gp_%PROJECT_TYPE_ID%_%EVENT_ID%_%EVENT_PARTICIPANT_ID%';
            } else {
                url = 'g_%PROJECT_TYPE_ID%_%EVENT_ID%';
            }
            return {
                url: url,
                completeCallback: this._updaterGetter().response_game
            };
        };

        Feed_Request.prototype.feedParticipantTransfers = function(sportId, feedConfig) {
            var pageNumber, participantId, type;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            pageNumber = (feedConfig != null ? feedConfig.pageNumber : void 0) || 1;
            type = (feedConfig != null ? feedConfig.type : void 0) || 1;
            return {
                url: "tetr_" + participantId + "_" + type + "_" + pageNumber,
                completeCallback: (function(_this) {
                    return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                        return feedConfig.callback;
                    };
                })(this)
            };
        };

        Feed_Request.prototype.feedParticipantNewsfeed = function(sportId, feedConfig) {
            var participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            return {
                url: "pnf_" + participantId,
                completeCallback: (function(_this) {
                    return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                        return feedConfig.callback;
                    };
                })(this)
            };
        };

        Feed_Request.prototype.feedDetail = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'dcp_%PROJECT_TYPE_ID%_%EVENT_ID%_%EVENT_PARTICIPANT_ID%';
            } else {
                url = 'dc_%PROJECT_TYPE_ID%_%EVENT_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail
            };
        };

        Feed_Request.prototype.feedDetailSummary = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'd_sp_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            } else {
                url = 'd_su_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailSummaryPlayerCard = function(sportId) {
            return {
                url: 'd_pc_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailOddsComparison = function(sportId) {
            var url;
            url = 'd_od_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%_%ODDS_FORMAT%';
            if (this._externalProjectIdGetter()) {
                url += '_%EXTERNAL_PROJECT_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailHead2Head = function(sportId) {
            return {
                url: 'd_hh_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailLineups = function(sportId) {
            return {
                url: 'd_li_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailMissingPlayers = function(sportId) {
            return {
                url: 'd_mpl_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailMatchHistory = function(sportId) {
            var url;
            if (sportId === this._sportList.DARTS) {
                url = 'df_mhn_%PROJECT_TYPE_ID%_%EVENT_ID%';
            } else {
                url = 'd_mh_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailMatchHistoryPreview = function(sportId) {
            var url;
            if (sportId === this._sportList.DARTS) {
                url = 'df_mhsn_%PROJECT_TYPE_ID%_%EVENT_ID%';
            } else {
                url = 'd_mhs_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailStatistics = function(sportId) {
            var url;
            if (sportId === this._sportList.DARTS) {
                url = 'df_stn_%PROJECT_TYPE_ID%_%EVENT_ID%';
            } else {
                url = 'd_st_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailStatisticsPreview = function(sportId) {
            return {
                url: 'df_stp_%PROJECT_TYPE_ID%_%EVENT_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailMatchComments = function(sportId) {
            return {
                url: 'df_mc_%PROJECT_TYPE_ID%_%EVENT_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailNewsfeed = function(sportId) {
            return {
                url: 'df_nf_%PROJECT_TYPE_ID%_%EVENT_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailCommentary = function(sportId) {
            var url;
            if (sportId === this._sportList.CRICKET) {
                url = 'df_lcn_%PROJECT_TYPE_ID%_%EVENT_ID%';
            } else {
                url = 'd_ph_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailLiveTable = function(sportId) {
            return {
                url: 'd_lt_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailStandings = function(sportId) {
            return {
                url: 'd_ta_%TOURNAMENT_STAGE_ID%_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailDraw = function(sportId) {
            return {
                url: 'd_dr_%TOURNAMENT_STAGE_ID%_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailCommentaryPreview = function(sportId) {
            return {
                url: 'd_pv_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailTv = function(sportId) {
            return {
                url: 'd_tv_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailHighlights = function(sportId) {
            var url;
            if (this._isParticipantDetailGetter()) {
                url = 'd_hip_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            } else {
                url = 'd_hi_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%';
            }
            return {
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailPhotoreport = function(sportId) {
            return {
                url: 'd_pr_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailPlayerStatistics = function(sportId) {
            return {
                url: 'd_ps_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailFallOfWickets = function(sportId) {
            return {
                url: 'd_fow_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailOvers = function(sportId) {
            return {
                url: 'd_ov_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailPlayerStatisticsGolf = function(sportId) {
            return {
                url: 'd_psg_%EVENT_ID%_%EVENT_PARTICIPANT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailPlayerStatisticsPreview = function(sportId) {
            return {
                url: 'd_pt_%EVENT_ID%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%',
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailLiveOdds = function(sportId) {
            return {
                url: 'df_lod2_%DETAIL_BOOKMAKER_ID%_%EVENT_ID%',
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailOddsSetup = function(sportId, feedConfig) {
            var url;
            url = "df_dos_%PROJECT_TYPE_ID%_" + ((feedConfig != null ? feedConfig.eventId : void 0) || '%EVENT_ID%') + "_%EVENT_PARTICIPANT_ID%";
            if (this._externalProjectIdGetter()) {
                url += '_%EXTERNAL_PROJECT_ID%';
            }
            return {
                context: url,
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedDetailOddsComparisons = function(sportId, feedConfig) {
            var url;
            url = "df_od_%PROJECT_TYPE_ID%_" + ((feedConfig != null ? feedConfig.eventId : void 0) || '%EVENT_ID%') + "_%EVENT_PARTICIPANT_ID%";
            if (this._externalProjectIdGetter()) {
                url += '_%EXTERNAL_PROJECT_ID%';
            }
            return {
                context: url,
                url: url,
                headers: this._detailFeedGeoIpHeadersGetter(),
                completeCallback: this._updaterGetter().response_detail_ext
            };
        };

        Feed_Request.prototype.feedSys = function(sportId) {
            return {
                url: 'sys_%PROJECT_TYPE_ID%',
                completeCallback: this._updaterGetter().response_sys
            };
        };

        Feed_Request.prototype.feedTournamentFixtures = function(sportId, feedConfig) {
            var dataPart, seasonId;
            seasonId = (feedConfig != null ? feedConfig.seasonId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "tf_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_" + seasonId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%",
                completeCallback: this._updaterGetter().response_tournament_fixtures
            };
        };

        Feed_Request.prototype.feedTournamentResults = function(sportId, feedConfig) {
            var dataPart, seasonId;
            seasonId = (feedConfig != null ? feedConfig.seasonId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            return {
                context: 'tournament-fixtures_%SPORT_ID%',
                url: "tr_%SPORT_ID%_%COUNTRY_ID%_%TOURNAMENT_ID%_" + seasonId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%",
                completeCallback: this._updaterGetter().response_tournament_results
            };
        };

        Feed_Request.prototype.feedParticipantFixtures = function(sportId, feedConfig) {
            var dataPart, participantId, tennisType;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            tennisType = (feedConfig != null ? feedConfig.tennisType : void 0) || "";
            return {
                context: 'participant-fixtures' + tennisType,
                url: "pf_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%" + tennisType,
                completeCallback: this._updaterGetter().response_participant_fixtures
            };
        };

        Feed_Request.prototype.feedParticipantResults = function(sportId, feedConfig) {
            var dataPart, participantId, tennisType;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            tennisType = (feedConfig != null ? feedConfig.tennisType : void 0) || "";
            return {
                context: 'participant-results' + tennisType,
                url: "pr_%SPORT_ID%_%COUNTRY_ID%_" + participantId + "_" + dataPart + "_%TIMEZONE_HOUR%_%LOCAL_LANGUAGE%_%PROJECT_TYPE_ID%" + tennisType,
                completeCallback: this._updaterGetter().response_participant_results
            };
        };

        Feed_Request.prototype.feedMyTeamsEventsDataMerged = function(sportId, feedConfig) {
            var context, participantIds;
            participantIds = (feedConfig != null ? feedConfig.participantIds.join('_') : void 0) || '';
            context = "my-teams-events-data-merged";
            if (participantIds) {
                context += "_" + participantIds;
            }
            return {
                context: context,
                url: "pmx_%PROJECT_TYPE_ID%_%TIMEZONE_HOUR%_" + participantIds,
                completeCallback: null
            };
        };

        Feed_Request.prototype.feedParticipantsEventsDataMerged = function(sportId, feedConfig) {
            var context, dataPart, participantIds;
            participantIds = (feedConfig != null ? feedConfig.participantIds.join('_') : void 0) || '';
            dataPart = (feedConfig != null ? feedConfig.dataPart : void 0) || "";
            context = "participants-events-data-merged";
            if (participantIds) {
                context += "_" + participantIds;
            }
            return {
                context: context,
                url: "pmp_%PROJECT_TYPE_ID%_%TIMEZONE_HOUR%_" + participantIds + "_" + dataPart,
                completeCallback: null
            };
        };

        Feed_Request.prototype.feedPlayerLastMatches = function(sportId, feedConfig) {
            var pageNumber, participantId;
            participantId = (feedConfig != null ? feedConfig.participantId : void 0) || "";
            pageNumber = (feedConfig != null ? feedConfig.pageNumber : void 0) || 0;
            return {
                url: "plm_" + participantId + "_" + pageNumber,
                completeCallback: null
            };
        };

        Feed_Request.prototype.feedRanking = function(sportId, feedConfig) {
            var pageNumber, rankingId;
            rankingId = (feedConfig != null ? feedConfig.rankingId : void 0) || '';
            pageNumber = (feedConfig != null ? feedConfig.pageNumber : void 0) || 0;
            return {
                url: "ran_" + rankingId + "_" + pageNumber,
                completeCallback: (function(_this) {
                    return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                        return feedConfig.callback;
                    };
                })(this)
            };
        };

        Feed_Request.prototype.feedRankingLive = function(sportId, feedConfig) {
            var pageNumber, rankingId;
            rankingId = (feedConfig != null ? feedConfig.rankingId : void 0) || '';
            pageNumber = (feedConfig != null ? feedConfig.pageNumber : void 0) || 0;
            return {
                url: "ral_" + rankingId + "_" + pageNumber,
                completeCallback: (function(_this) {
                    return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                        return feedConfig.callback;
                    };
                })(this)
            };
        };

        Feed_Request.prototype.feedDraw = function(sportId, feedConfig) {
            var eventId, tournamentId, tournamentStageId, url;
            tournamentId = feedConfig.tournamentId || '';
            tournamentStageId = feedConfig.tournamentStageId || '';
            eventId = feedConfig.eventId || '';
            url = "dr_" + tournamentId + "_" + tournamentStageId;
            if (eventId) {
                url += "_" + eventId;
            }
            return {
                url: url,
                completeCallback: (function(_this) {
                    return function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
                        return feedConfig.callback;
                    };
                })(this)
            };
        };

        Feed_Request.prototype.executeBeforeFullFeedCallbacks = function() {
            var callback, i, len, ref, results;
            ref = Feed_Request.beforeFullFeedCallbacks;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                callback = ref[i];
                if (typeof callback === "function") {
                    callback();
                }
                results.push(Feed_Request.beforeFullFeedCallbacks.shift());
            }
            return results;
        };

        Feed_Request.prototype._getSportId = function(sportId) {
            if (sportId == null) {
                sportId = this._sportIdGetter();
            }
            return parseInt(sportId);
        };

        Feed_Request.prototype._getDay = function(day) {
            return parseInt(day);
        };

        Feed_Request.prototype._replaceTags = function(str, sportId, day) {
            var r, replacements;
            str = str + "";
            replacements = {
                '%LOCAL_LANGUAGE%': this._localLanguageGetter,
                '%LOCAL_LANGUAGE_ID%': (function(_this) {
                    return function() {
                        return cjs.Api.config.get('app', 'lang', 'dc');
                    };
                })(this),
                '%SUDATE%': function() {
                    return day;
                },
                '%PROJECT_TYPE_ID%': this._projectTypeIdGetter,
                '%PROJECT_ID%': this._projectIdGetter,
                '%EXTERNAL_PROJECT_ID%': this._externalProjectIdGetter,
                '%DETAIL_BOOKMAKER_ID%': this._detailMainBookmakerGetter,
                '%TIMEZONE_HOUR%': function() {
                    return cjs.Api.timezone.getHour();
                },
                '%SPORT_ID%': (function(sportId) {
                    return function() {
                        return sportId;
                    };
                })(sportId),
                '%IS_LIVE_ODDS%': this._isLiveOddsGetter,
                '%COUNTRY_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().country_id;
                    };
                })(this._updaterGetter),
                '%TOURNAMENT_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().tournament_id;
                    };
                })(this._updaterGetter),
                '%COUNTRY_TOURNAMENT_ORDER%': (function(updaterGetter) {
                    return function() {
                        if (updaterGetter().country_tournament_order_fin) {
                            return 'y';
                        } else {
                            return 'n';
                        }
                    };
                })(this._updaterGetter),
                '%EVENT_ID%': (function(updaterGetter) {
                    return function() {
                        return updaterGetter().game;
                    };
                })(this._updaterGetter),
                '%EVENT_PARTICIPANT_ID%': this._eventParticipantIdGetter,
                '%ODDS_FORMAT%': this._oddsFormatGetter,
                '%TOURNAMENT_STAGE_ID%': this._tournamentStageIdGetter
            };
            r = new RegExp(Object.keys(replacements).join('|'), 'g');
            return str.replace(r, function(key) {
                return replacements[key]();
            });
        };

        Feed_Request.prototype._getFeedFunctionName = function(feedName) {
            var feedNamePartIndex, feedNamePartValue, feedNameParts;
            feedNameParts = feedName.split('-');
            for (feedNamePartIndex in feedNameParts) {
                feedNamePartValue = feedNameParts[feedNamePartIndex];
                feedNameParts[feedNamePartIndex] = cjs.dic.get('utilString').toUpperFirstChar(feedNamePartValue);
            }
            return 'feed' + feedNameParts.join('');
        };

        Feed_Request.prototype._abortActiveRequest = function(context) {
            if (this._activeRequests[context] == null) {
                return;
            }
            if (this._activeRequests[context].updating != null) {
                this._activeRequests[context].abort();
            }
            return delete this._activeRequests[context];
        };

        return Feed_Request;

    })();

    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Request = Feed_Request;
    }

}).call(this);
(function() {
    var Feed_Loader, ref;

    Feed_Loader = (function() {
        function Feed_Loader() {
            this.reset();
        }

        Feed_Loader.prototype.reset = function() {
            this.abortActiveRequests();
            this._feeds = {};
            this._feedsLoaded = 0;
            this._filterCallback = function() {
                return true;
            };
            this._beforeCallback = null;
            return this._afterCallback = null;
        };

        Feed_Loader.prototype.addIntoQueue = function(feedRequest) {
            if (this._feeds[feedRequest.context] != null) {
                return false;
            }
            this._feeds[feedRequest.context] = feedRequest;
            return true;
        };

        Feed_Loader.prototype.beforeCallback = function(callback) {
            return this._beforeCallback = callback;
        };

        Feed_Loader.prototype.afterCallback = function(callback) {
            return this._afterCallback = callback;
        };

        Feed_Loader.prototype.abortActiveRequests = function() {
            var context, feedData, ref, ref1;
            ref = this._feeds;
            for (context in ref) {
                feedData = ref[context];
                if (((ref1 = feedData.ajaxJqObject) != null ? ref1.updating : void 0) != null) {
                    feedData.ajaxJqObject.abort();
                }
            }
            return this._feedsLoaded = 0;
        };

        Feed_Loader.prototype.downloadAndExecuteFeeds = function() {
            var context, feedCount;
            this.abortActiveRequests();
            feedCount = 0;
            for (context in this._feeds) {
                this._downloadFeed(context);
                feedCount++;
            }
            if (feedCount === 0) {
                if (typeof this._beforeCallback === "function") {
                    this._beforeCallback();
                }
                if (typeof this._afterCallback === "function") {
                    this._afterCallback();
                }
            }
            return true;
        };

        Feed_Loader.prototype.executeCompleteCallback = function(context) {
            var feedData, r;
            if ((this._feeds[context] == null) || this._feedsLoaded !== Object.keys(this._feeds).length) {
                return false;
            }
            feedData = this._feeds[context];
            if (feedData.beforeCallback) {
                feedData.beforeCallback();
            }
            r = feedData.responseData;
            return feedData.completeCallback(r.responseStatus, r.responseHeaders, r.responseContent, r.responseTrigger, r.responseCustomHeaders);
        };

        Feed_Loader.prototype.executeFilterCallback = function(callback) {
            return this._filterCallback = callback;
        };

        Feed_Loader.prototype._downloadFeed = function(context) {
            var completeCallback, feedData;
            feedData = this._feeds[context];
            completeCallback = (function(obj, feedContext) {
                return function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
                    return obj._responseCallback(feedContext, responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders);
                };
            })(this, context);
            if (typeof feedData.beforeCallback === "function") {
                feedData.beforeCallback();
            }
            this._feeds[context].ajaxJqObject = cjs.feedRequest._createAjaxJqObject(feedData.url, completeCallback, feedData.feedName);
            if (feedData.afterCallback != null) {
                this._feeds[context].ajaxJqObject.setAfterCallback(feedData.afterCallback);
            }
            if (feedData.errorCallback != null) {
                this._feeds[context].ajaxJqObject.setErrorCallback(feedData.errorCallback);
            }
            return this._feeds[context].ajaxJqObject.update(feedData.postData, feedData.postMethod, feedData.headers);
        };

        Feed_Loader.prototype._responseCallback = function(feedContext, responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
            this._feeds[feedContext].responseData = {
                responseStatus: responseStatus,
                responseHeaders: responseHeaders,
                responseContent: responseContent,
                responseTrigger: responseTrigger,
                responseCustomHeaders: responseCustomHeaders
            };
            this._feedsLoaded++;
            if (this._feedsLoaded === Object.keys(this._feeds).length) {
                return this._executeAllCallbacks();
            }
        };

        Feed_Loader.prototype._executeAllCallbacks = function() {
            var context, feedData, ref;
            if (typeof this._beforeCallback === "function") {
                this._beforeCallback();
            }
            ref = this._feeds;
            for (context in ref) {
                feedData = ref[context];
                if (!this._filterCallback(context)) {
                    continue;
                }
                this.executeCompleteCallback(context);
            }
            if (typeof this._afterCallback === "function") {
                this._afterCallback();
            }
            return true;
        };

        return Feed_Loader;

    })();

    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Loader = Feed_Loader;
    }

}).call(this);
(function() {
    var Feed_Parser;

    Feed_Parser = (function() {
        function Feed_Parser(util_enviroment) {
            this.util_enviroment = util_enviroment;
            this._parserConfig = this.util_enviroment.getParserConfig();
        }

        Feed_Parser.prototype.parse = function(content) {
            var i, index, item, items, itemsCount, len, parsedItems, parts, ref, signature, value;
            ref = this._parseContentToItems(content), parsedItems = ref[0], signature = ref[1];
            itemsCount = -1;
            items = [];
            for (i = 0, len = parsedItems.length; i < len; i++) {
                item = parsedItems[i];
                if (itemsCount === -1 || item === '') {
                    itemsCount++;
                    items[itemsCount] = [];
                }
                if (item !== '') {
                    parts = item.split(this._parserConfig.JS_INDEX);
                    index = parts[0];
                    value = parts[1];
                    if (items[itemsCount][index] == null) {
                        items[itemsCount][index] = [];
                    }
                    items[itemsCount][index].push(value);
                }
            }
            if (items.length !== 0) {
                if (Object.keys(items[items.length - 1]).length === 0) {
                    items.pop();
                }
            }
            return {
                'data': items,
                'signature': signature
            };
        };

        Feed_Parser.prototype.getHash = function(content) {
            var hash, newFeedHashParts;
            newFeedHashParts = content.match(/A1Ã·([a-z0-9]{32})Â¬/i);
            hash = content.substr(Math.max(0, content.length - 100)).replace(/\n/, '').replace(/.*<[a-zA-Z]+ id=["\']secret_hash["\'][^\>]*>([^<]*)<\/[a-zA-Z]+>.*/, '$1');
            if (newFeedHashParts) {
                hash = newFeedHashParts[1];
            }
            if (hash.length !== 32) {
                hash = '';
            }
            return hash;
        };

        Feed_Parser.prototype._parseContentToItems = function(content) {
            var i, index, item, items, j, len, len1, ref, ref1, row, rows, signature, value;
            signature = '';
            items = [];
            content = this._trim(content);
            rows = content.split(this._parserConfig.JS_ROW_END);
            for (i = 0, len = rows.length; i < len; i++) {
                row = rows[i];
                ref = row.split(this._parserConfig.JS_CELL_END);
                for (j = 0, len1 = ref.length; j < len1; j++) {
                    item = ref[j];
                    items.push(item);
                    if (item !== '') {
                        ref1 = item.split(this._parserConfig.JS_INDEX), index = ref1[0], value = ref1[1];
                        if (index === 'A1') {
                            if (!value) {
                                value = null;
                            }
                            signature = value;
                        }
                    }
                }
            }
            return [items, signature];
        };

        Feed_Parser.prototype._trim = function(content) {
            var ref;
            while ((ref = content.charAt(content.length - 1)) === this._parserConfig.JS_ROW_END || ref === this._parserConfig.JS_CELL_END) {
                content = content.substring(0, content.length - 1);
            }
            return content;
        };

        return Feed_Parser;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Parser', Feed_Parser);

}).call(this);
(function() {
    var Feed_Service_LocalUpdate, ref;

    Feed_Service_LocalUpdate = (function() {
        Feed_Service_LocalUpdate.NAME = 'updateLocal';

        function Feed_Service_LocalUpdate(_sportId, _feedRequestGetter, _windowGetter, _updaterGetter) {
            this._sportId = _sportId;
            this._feedRequestGetter = _feedRequestGetter;
            this._windowGetter = _windowGetter;
            this._updaterGetter = _updaterGetter;
            this._syncTime = 0;
            this._lastSyncTime = 0;
        }

        Feed_Service_LocalUpdate.prototype.setSyncTime = function(timestamp) {
            return this._syncTime = parseInt(timestamp);
        };

        Feed_Service_LocalUpdate.prototype.update = function(action) {
            var responseCallback, sportId;
            if (action !== 'update' && action !== 'updateMyGames') {
                return false;
            }
            responseCallback = (function(_this) {
                return function(status, headers, content, trigger) {
                    return _this._response(status, headers, content, trigger);
                };
            })(this);
            if (this._syncTime > this._lastSyncTime) {
                sportId = action === 'updateMyGames' ? 0 : this._sportId;
                this._feedRequestGetter().execute(Feed_Service_LocalUpdate.NAME, sportId, responseCallback);
                this._lastSyncTime = this._syncTime;
                return true;
            }
            return false;
        };

        Feed_Service_LocalUpdate.prototype._response = function(status, headers, content, trigger) {
            this._windowGetter().parse(content, true, false, trigger);
            return this._updaterGetter().update(trigger);
        };

        return Feed_Service_LocalUpdate;

    })();

    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.Feed_Service_LocalUpdate = Feed_Service_LocalUpdate;
    }

}).call(this);
(function() {
    var Feed_Content_LiveOdds;

    Feed_Content_LiveOdds = (function() {
        Feed_Content_LiveOdds.prototype.ANIMATION_DURATION = 100;

        Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR = '-';

        function Feed_Content_LiveOdds(util_enviroment, _$, Feed_Parser, util_trans, util_number) {
            this.util_enviroment = util_enviroment;
            this._$ = _$;
            this.Feed_Parser = Feed_Parser;
            this.util_trans = util_trans;
            this.util_number = util_number;
            this.util_config = cjs.Api.config;
            this._constantsManager = cjs.Api.constantsManager;
            this._updater = this.util_enviroment.getUpdater();
            this._tabElementId = 'tab-live-odds';
            this._contentElementId = 'live-odds-content';
            this._tableId = 'default-live-odds';
            this._feedName = 'detail-live-odds';
            this._oddsFormatGetter = this.util_enviroment.getOddsFormat();
            this._updateAlreadyUsed = false;
            this._currentEventStageType = null;
            this._lastEventStageType = null;
            this._bookmakerId = null;
            this._downloadingFeedInProgress = false;
            this._initSetBookmakerIdCb();
        }

        Feed_Content_LiveOdds.prototype._initSetBookmakerIdCb = function() {
            return this._setBookmakerIdCb = function() {};
        };

        Feed_Content_LiveOdds.prototype.setBookmakerId = function(bookmakerId) {
            bookmakerId = parseInt(bookmakerId);
            this._bookmakerId = (isNaN(bookmakerId)) ? null : bookmakerId;
            if (this._bookmakerId) {
                return this._setBookmakerIdCb();
            }
        };

        Feed_Content_LiveOdds.prototype.getBookmakerId = function() {
            return this._bookmakerId;
        };

        Feed_Content_LiveOdds.prototype.getTableId = function() {
            return this._tableId;
        };

        Feed_Content_LiveOdds.prototype.getFeedName = function() {
            return this._feedName;
        };

        Feed_Content_LiveOdds.prototype.getTabElementId = function() {
            return this._tabElementId;
        };

        Feed_Content_LiveOdds.prototype.wasUpdateAlreadyUsed = function() {
            return this._updateAlreadyUsed;
        };

        Feed_Content_LiveOdds.prototype.setCurrentEventStageType = function(currentEventStageType) {
            if (this._currentEventStageType !== currentEventStageType) {
                this._lastEventStageType = this._currentEventStageType;
            }
            return this._currentEventStageType = currentEventStageType;
        };

        Feed_Content_LiveOdds.prototype.isActive = function() {
            var data, isActive, isLive;
            data = this.util_enviroment.getFsDetail();
            isActive = data['CQ'] != null ? this._isBookmakerActive(data['CQ']) : false;
            isLive = data['DA'] === this._constantsManager.getEventStageTypes().LIVE;
            return isActive && isLive;
        };

        Feed_Content_LiveOdds.prototype.updateHash = function(_hash) {
            var data, hashKey;
            this._hash = _hash;
            data = this.util_enviroment.getFsDetail();
            hashKey = this.util_enviroment.getConstants().FEED.DETAILHASHINDEXES_LIVE_ODDS_HASH;
            if (!data.hasHash(hashKey)) {
                return data.setHash(hashKey, this._hash);
            } else if (data.isHashValueChange(hashKey, this._hash) && this.isActive()) {
                return this.downloadFeed(2000);
            }
        };

        Feed_Content_LiveOdds.prototype.show = function(callbackAfterShow) {
            this._$("#" + this._tabElementId).show();
            return typeof callbackAfterShow === "function" ? callbackAfterShow() : void 0;
        };

        Feed_Content_LiveOdds.prototype.hide = function() {
            return this._$("#" + this._tabElementId).hide();
        };

        Feed_Content_LiveOdds.prototype.toggle = function(display) {
            if (display) {
                return this.show();
            } else {
                return this.hide();
            }
        };

        Feed_Content_LiveOdds.prototype.downloadFeed = function(delay) {
            var cb;
            if (delay == null) {
                delay = 0;
            }
            if (this._downloadingFeedInProgress) {
                return;
            }
            this._downloadingFeedInProgress = true;
            cb = (function(_this) {
                return function() {
                    var bookieCb;
                    bookieCb = function() {
                        _this._initSetBookmakerIdCb();
                        return _this._updater.doc_update(_this._feedName);
                    };
                    if (_this._bookmakerId) {
                        return bookieCb();
                    } else {
                        return _this._setBookmakerIdCb = bookieCb;
                    }
                };
            })(this);
            clearTimeout(this._timeoutId);
            if (delay) {
                return this._timeoutId = setTimeout(cb, delay);
            } else {
                return cb();
            }
        };

        Feed_Content_LiveOdds.prototype.update = function(data, keepHashUpdated, singleOddsInNewFormatGetter) {
            if (keepHashUpdated == null) {
                keepHashUpdated = true;
            }
            this._downloadingFeedInProgress = false;
            if (!data['feedContent']) {
                this._updateAlreadyUsed = true;
                return;
            }
            if (data['show']) {
                this.show(data['callbackAfterShow']);
            }
            if (keepHashUpdated) {
                this.updateHash(data['hash']);
            }
            return this.updateHtmlContent(data['feedContent'], singleOddsInNewFormatGetter);
        };

        Feed_Content_LiveOdds.prototype.updateHtmlContent = function(feedContent, singleOddsInNewFormatGetter) {
            var cellType, i, len, movementClass, movementShort, oddsActive, oddsExists, oddsType, params, parsedData, ref, ref1, ref2, ref3, value;
            if (!feedContent) {
                this._updateAlreadyUsed = true;
                return false;
            }
            parsedData = this.Feed_Parser.parse(feedContent).data[0];
            if (!parsedData) {
                this._updateAlreadyUsed = true;
                return false;
            }
            cellType = 0;
            ref = ['A', 'B', 'C'];
            for (i = 0, len = ref.length; i < len; i++) {
                oddsType = ref[i];
                oddsExists = (((ref1 = parsedData["X" + oddsType]) != null ? ref1[0] : void 0) != null) && parsedData["X" + oddsType][0] !== '';
                oddsActive = (((ref2 = parsedData["Y" + oddsType]) != null ? ref2[0] : void 0) != null) && parsedData["Y" + oddsType][0] === '1';
                if (oddsExists) {
                    if (oddsType === 'A') {
                        cellType = 1;
                    }
                    if (oddsType === 'B') {
                        cellType = 1 - cellType;
                    }
                    if (oddsType === 'C') {
                        cellType = 2;
                    }
                    ref3 = this._getOddsValues(parsedData["X" + oddsType][0]), value = ref3[0], movementClass = ref3[1], movementShort = ref3[2];
                    params = {
                        'newValue': value,
                        'movementClass': movementClass,
                        'movementShort': movementShort,
                        'cellType': "o_" + cellType,
                        'oddsType': oddsType,
                        'oddsActive': oddsActive
                    };
                    this._updateOdds(params, singleOddsInNewFormatGetter);
                }
            }
            this._updateAlreadyUsed = true;
            return true;
        };

        Feed_Content_LiveOdds.prototype._updateOdds = function(params, singleOddsInNewFormatGetter) {
            var $cell;
            $cell = this._$("#" + this._tableId + " td.kx." + params['cellType'] + " span span.odds.value span.odds-wrap");
            params['currentOddsActive'] = $cell.attr('data-active') === '1';
            params['currentValue'] = $cell.html();
            params['newFormattedValue'] = singleOddsInNewFormatGetter(params['newValue']);
            if (!this._isOddsUpdatable(params)) {
                return false;
            }
            this._updateOddsCellValue($cell, params, singleOddsInNewFormatGetter);
            return true;
        };

        Feed_Content_LiveOdds.prototype._updateOddsCellValue = function($cell, params, singleOddsInNewFormatGetter) {
            var callback;
            callback = (function(_this) {
                return function() {
                    var active, attrName, attrValue, attrs, className, classes, oldBasicAltValue, results;
                    params['currentEuValue'] = $cell.attr('eu');
                    $cell.html(params['newFormattedValue']);
                    if (_this._lastEventStageType === _this._constantsManager.getEventStageTypes().SCHEDULED) {
                        oldBasicAltValue = _this._createOldEuValue($cell.attr('alt'));
                        if (oldBasicAltValue && oldBasicAltValue !== Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR) {
                            params['basicAltFormattedValue'] = singleOddsInNewFormatGetter(oldBasicAltValue);
                        }
                    }
                    attrs = _this._createAttributesToUpdate(params, singleOddsInNewFormatGetter);
                    for (attrName in attrs) {
                        attrValue = attrs[attrName];
                        $cell.attr(attrName, attrValue);
                    }
                    classes = _this._createClasses(params);
                    results = [];
                    for (className in classes) {
                        active = classes[className];
                        if (active) {
                            results.push($cell.addClass(className));
                        } else {
                            results.push($cell.removeClass(className));
                        }
                    }
                    return results;
                };
            })(this);
            if (this._updateAlreadyUsed) {
                return this._doAnimationOnElement($cell, (function(_this) {
                    return function($cell, params) {
                        return function() {
                            return callback();
                        };
                    };
                })(this)($cell, params));
            } else {
                return callback();
            }
        };

        Feed_Content_LiveOdds.prototype._doAnimationOnElement = function($element, firstStepCallback) {
            var callback, stepsCount;
            stepsCount = 3;
            callback = function(opacity, step) {
                if (!(step < stepsCount * 2)) {
                    return;
                }
                return $element.animate({
                    'opacity': opacity
                }, Feed_Content_LiveOdds.ANIMATION_DURATION, (function(opacity, step) {
                    return function() {
                        if (step === 0) {
                            if (typeof firstStepCallback === "function") {
                                firstStepCallback();
                            }
                        }
                        return callback(1 - opacity, step + 1);
                    };
                })(opacity, step));
            };
            return callback(0, 0);
        };

        Feed_Content_LiveOdds.prototype._isOddsUpdatable = function(params) {
            if (params['oddsActive'] !== params['currentOddsActive']) {
                return true;
            }
            if (params['currentValue'] === params['newFormattedValue']) {
                return false;
            }
            return true;
        };

        Feed_Content_LiveOdds.prototype._createAttributesToUpdate = function(params, singleOddsInNewFormatGetter) {
            var attrs, oldEu;
            attrs = {
                'alt': '',
                'eu': singleOddsInNewFormatGetter(params['newValue'], 'eu'),
                'data-active': params['oddsActive'] + 0
            };
            if (!(params['currentValue'] && params['movementShort'] && params['newFormattedValue'])) {
                return attrs;
            }
            attrs['alt'] = "" + params['currentValue'] + params['movementShort'] + params['newFormattedValue'];
            if (params['currentValue'] === params['newFormattedValue']) {
                delete attrs['alt'];
            } else if (params['currentValue'] === Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR) {
                attrs['alt'] = '';
                if (params['basicAltFormattedValue']) {
                    attrs['alt'] = "" + params['basicAltFormattedValue'] + params['movementShort'] + params['newFormattedValue'];
                }
            }
            if (params['currentEuValue']) {
                oldEu = this._createOldEuValue(params['currentEuValue']);
                attrs['eu'] = "" + oldEu + params['movementShort'] + attrs['eu'];
            }
            return attrs;
        };

        Feed_Content_LiveOdds.prototype._createClasses = function(params) {
            var classes, hasCurrentValue, isDown, isValidEventStageType;
            classes = {
                'down': false,
                'up': false
            };
            hasCurrentValue = params['currentValue'] !== Feed_Content_LiveOdds.prototype.EMPTY_VALUE_CHAR;
            isValidEventStageType = this._lastEventStageType === this._constantsManager.getEventStageTypes().SCHEDULED;
            if (params['movementClass'] && (hasCurrentValue || isValidEventStageType)) {
                isDown = params['movementClass'] === 'down';
                classes['down'] = isDown;
                classes['up'] = !isDown;
            }
            classes['not-published'] = !params['oddsActive'];
            return classes;
        };

        Feed_Content_LiveOdds.prototype._getOddsValues = function(value) {
            var firstChar, movementClass, movementShort;
            movementClass = '';
            movementShort = '';
            if (!value) {
                value = '';
            }
            if (value) {
                firstChar = value.charAt(0);
                if (firstChar === 'd' || firstChar === 'u') {
                    movementClass = firstChar === 'd' ? 'down' : 'up';
                    movementShort = "[" + firstChar + "]";
                    value = value.substr(1);
                } else if (firstChar === 's') {
                    value = value.substr(1);
                }
                if (value === '1') {
                    movementClass = '';
                    movementShort = '';
                    value = '-';
                }
            }
            return [value, movementClass, movementShort];
        };

        Feed_Content_LiveOdds.prototype._createOldEuValue = function(value) {
            var oldEuValues, oldMovement, ref;
            if (!value) {
                return '';
            }
            oldMovement = value.match(/\[[ud]\]/);
            oldEuValues = value.split(oldMovement);
            return (ref = oldEuValues[1]) != null ? ref : oldEuValues[0];
        };

        Feed_Content_LiveOdds.prototype._isBookmakerActive = function(data) {
            var bookmakers;
            if (typeof data === 'string') {
                bookmakers = data.split('|').map(function(a) {
                    return parseInt(a);
                });
                return bookmakers.indexOf(this._bookmakerId) > -1;
            } else {
                return data === this._bookmakerId;
            }
        };

        return Feed_Content_LiveOdds;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_LiveOdds', Feed_Content_LiveOdds);

}).call(this);
(function() {
    var LastMatches;

    LastMatches = (function() {
        LastMatches.prototype.FEED_ACTION = 'player-last-matches';

        function LastMatches(util_enviroment, DicProxy, _$, HtmlTemplate, utilPage) {
            this.util_enviroment = util_enviroment;
            this.DicProxy = DicProxy;
            this._$ = _$;
            this.HtmlTemplate = HtmlTemplate;
            this.utilPage = utilPage;
            this.utilConfig = cjs.Api.config;
            this._nextPageNumber = 1;
            this._htmlTemplates = this.util_enviroment.getHtmlTemplate();
            this._fsUpdate = this.util_enviroment.getFsUpdate();
            this._elementId = "last-matches";
            this._showMoreRowSelector = "#" + this._elementId + " table tr.show-more-last-matches, div.show-more-last-matches";
            this._delegateEvents();
        }

        LastMatches.prototype.loadNext = function() {
            return this.load(this._nextPageNumber);
        };

        LastMatches.prototype.load = function(pageNumber) {
            var feedRequest, participantEncodedId;
            participantEncodedId = this.utilPage.getParticipantEncodedId();
            pageNumber = parseInt(pageNumber);
            if (!(pageNumber > 0)) {
                throw Error("Page number must be greater than zero.");
            }
            this._showLoading();
            feedRequest = this.util_enviroment.getFeedRequestObject();
            return this.DicProxy.onReady((function(_this) {
                return function() {
                    var cb;
                    cb = function(responseStatus, responseHeaders, responseContent) {
                        _this._nextPageNumber = pageNumber + 1;
                        _this._showContent(responseContent);
                        return _this._hideLoading();
                    };
                    return feedRequest.execute(_this.FEED_ACTION, null, cb, {
                        'participantId': participantEncodedId,
                        'pageNumber': pageNumber
                    });
                };
            })(this));
        };

        LastMatches.prototype._showContent = function(content) {
            var data, html, templateName;
            data = JSON.parse(content);
            if (data) {
                templateName = this._htmlTemplates.TPL_PLAYER_PROFILE_LAST_MATCHES_ROWS;
                data['lastMatches'] = this._getFilteredLastMatches(data['lastMatches']);
                html = this.HtmlTemplate.render(templateName, data);
                return this._$(this._showMoreRowSelector).replaceWith(html);
            }
        };

        LastMatches.prototype._getFilteredLastMatches = function(lastMatches) {
            var exists, filteredLastMatches, i, index, lastMatch, len;
            filteredLastMatches = [];
            for (index = i = 0, len = lastMatches.length; i < len; index = ++i) {
                lastMatch = lastMatches[index];
                exists = this._$("#" + this._elementId + " #" + lastMatch.eventId).length > 0;
                if (!exists) {
                    filteredLastMatches.push(lastMatch);
                }
            }
            return filteredLastMatches;
        };

        LastMatches.prototype._delegateEvents = function() {
            var tooltipSelector;
            this._$("#fsbody").on('click', this._showMoreRowSelector, (function(_this) {
                return function(e) {
                    return _this.loadNext();
                };
            })(this));
            tooltipSelector = "#" + this._elementId + " tr.event-row td[colspan] span[title], div.profileTable__row .soccerTable__absence[title]";
            this._$("#fsbody").on("mouseenter", tooltipSelector, (function(_this) {
                return function(e) {
                    return _this.util_enviroment.getTooltipObject().show(_this._$(e.currentTarget).get(0), e);
                };
            })(this));
            this._$("#fsbody").on("mouseleave", tooltipSelector, (function(_this) {
                return function(e) {
                    return _this.util_enviroment.getTooltipObject().hide(_this._$(e.currentTarget).get(0));
                };
            })(this));
            return this._fsUpdate.register_actions();
        };

        LastMatches.prototype._showLoading = function() {
            var scrollTop;
            scrollTop = this.util_enviroment.getPageScrollTop();
            this._$('#preload').css('top', scrollTop + 100);
            return this.util_enviroment.getPreloadShow()();
        };

        LastMatches.prototype._hideLoading = function() {
            return this.util_enviroment.getPreloadHide()();
        };

        return LastMatches;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('Feed_Content_LastMatches', LastMatches);

}).call(this);

/**
	LivescoreSettings - settings for livescore
 */

(function() {
    var LivescoreSettings, base;

    LivescoreSettings = (function() {
        function LivescoreSettings(_lsid, _conf, _$, _dic, _trans) {
            var dialog, mygamesGroupsPart, notificationsBlock, timezoneBlock, timezoneList, tmpl;
            this._lsid = _lsid;
            this._conf = _conf;
            this._$ = _$ != null ? _$ : jQuery;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._trans = _trans != null ? _trans : cjs.dic.get('utilTrans');
            this._notificationMyGames = this._dic.getClass('Notification_MyGames');
            if (this._dic.exists('SettingsStorage')) {
                this._settingsStorage = this._dic.get('SettingsStorage');
            }
            this._defConf = {
                sortByTime: this._conf.sortByTime,
                mygamesGroups: false,
                mygamesNotifications: this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND
            };
            this._userSettingsKey = 'lsSettins';
            this.loadUserSettings();
            this._dialog = document.createElement('div');
            this._$(this._dialog).attr('id', 'livescore-settings');
            mygamesGroupsPart = '';
            if (cjs.Api.config.get('app', 'mygames', 'groups', 'enable')) {
                mygamesGroupsPart = "<div class=\"mggroups-form-element\">\n	<strong>" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_MYGAMES_DISPLAY_GROUPS')) + "</strong>\n		<div class=\"options\">\n			<label><input type=\"radio\" name=\"mggroups\" value=\"true\">" + (this._trans.translate('TRANS_ODDS_COMPARISON_YES')) + "</label><br/>\n			<label><input type=\"radio\" name=\"mggroups\" value=\"false\" checked=\"checked\">" + (this._trans.translate('TRANS_ODDS_COMPARISON_NO')) + "</label>\n		</div>\n</div>";
            }
            notificationsBlock = '';
            if (!cjs.dic.get('util_enviroment').isResponsive()) {
                notificationsBlock = "<div class=\"mgnotifications-form-element\">\n	<strong>" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_DISPLAY_NOTIFICATIONS_BOTTOM_LEFT')) + "</strong>\n	<div class=\"options\">\n		<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_SHOW_WITH_SOUND + "\">" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_ON')) + "</label><br/>\n		<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND + "\" checked=\"checked\">" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_NOTIFICATIONS_SOUND_EFFECT_OFF')) + "</label><br/>\n		<label><input type=\"radio\" name=\"mgnotifications\" value=\"" + this._notificationMyGames.SETTING_NOT_SHOW + "\">" + (this._trans.translate('TRANS_ODDS_COMPARISON_NO')) + "</label>\n	</div>\n</div>";
            }
            dialog = [];
            timezoneList = cjs.Api.config.get('timezone', 'list');
            timezoneBlock = "<div class=\"header timezone-settings\">\n	<div class=\"settings-icon\"></div>\n	<div class=\"settings-text\">" + (this._trans.translate('TRANS_TIMEZONE')) + "</div>\n</div>\n<div class=\"content\">\n	<div id=\"timezone\">\n		<ul class=\"menu\">\n			<li class=\"actual\"><span id=\"tzactual\"></span><span id=\"tzactual-icon\"></span></li>\n		</ul>\n		<div id=\"tzcontentenv\"></div>\n	</div>\n</div>";
            tmpl = ("<div class=\"backButton\">\n	<div class=\"backButton__arrow\"></div>\n	<div class=\"backButton__text\">" + (this._trans.translate('TRANS_USER_BUTTON_BACK')) + "</div>\n</div>\n<ul class=\"tabs-menu\">\n	<li class=\"li0 settings selected\"><span><a class=\"settings unclickable\" href=\"#\" onClick=\"return false;\">" + (this._trans.translate('TRANS_SETTINGS')) + "</a></span></li>\n</ul>\n<div class=\"contents\">\n	<div class=\"settings selected\">\n\n	 <form id=\"livescore-settings-form\" method=\"post\" action=\"/\">\n") + ((timezoneList != null) && Object.keys(timezoneList).length ? timezoneBlock : '') + ("		<div class=\"header general-settings\">\n			<div class=\"settings-icon\"></div>\n			<div class=\"settings-text\">" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_GENERAL_SETTINGS')) + "</div>\n		</div>\n		<div class=\"content\">\n			<div class=\"error-box\"><span class=\"err-msg\">" + (this._trans.translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK')) + "</span></div>\n\n			<div class=\"sortby-form-element\">\n				<strong>" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_ORDER_MATCHES_BY')) + ":</strong>\n				<div class=\"options\">\n					<label><input type=\"radio\" name=\"sortby\" value=\"league\" checked=\"checked\">" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_ORDER_BY_LEAGUE_NAME')) + "</label><br/>\n					<label><input type=\"radio\" name=\"sortby\" value=\"time\">" + (this._trans.translate('TRANS_SETTINGS_LIVESCORE_ORDER_BY_MATCH_START_TIME')) + "</label>\n				</div>\n			</div>\n		</div>\n\n		<div class=\"header my-games-settings\">\n			<div class=\"settings-icon\"></div>\n			<div class=\"settings-text\">" + (this._trans.translate('TRANS_NOTIFICATION_SETTINGS_MY_GAMES')) + "</div>\n		</div>\n		<div class=\"content\">\n			" + mygamesGroupsPart + "\n\n			" + notificationsBlock + "\n		</div>\n	 </form>\n</div>");
            dialog.push(tmpl);
            this._technicalError = false;
            this._$(this._dialog).html(dialog.join(''));
        }

        LivescoreSettings.prototype.loadUserSettings = function() {
            return this.restoreDefaults();
        };

        LivescoreSettings.prototype.restoreDefaults = function() {
            var key, localSettings, ref, results, value;
            ref = this._defConf;
            for (key in ref) {
                value = ref[key];
                this._conf[key] = value;
            }
            localSettings = this._settingsStorage.read(this._userSettingsKey);
            results = [];
            for (key in localSettings) {
                value = localSettings[key];
                results.push(this._conf[key] = value);
            }
            return results;
        };

        LivescoreSettings.prototype.restoreDefaultsUser = function() {
            var userConfirm, userSettings;
            userConfirm = window.confirm(this._trans.translate('TRANS_SETTINGS_LIVESCORE_RESTORE_DEFAULT_CONFIRM'));
            if (!userConfirm) {
                return false;
            }
            this.restoreDefaults();
            userSettings = this._settingsStorage.remove(this._userSettingsKey);
            this._redrawLivescore();
            return this._lsid._hideDialog();
        };

        LivescoreSettings.prototype._redrawLivescore = function(redrawFromOutside) {
            var doubleRender;
            if (redrawFromOutside == null) {
                redrawFromOutside = false;
            }
            if (cjs.disableRedrawUserSettings) {
                return true;
            }
            sort_fs_data();
            doubleRender = true;
            if (redrawFromOutside) {
                doubleRender = false;
            }
            if (!cjs.dic.get('util_page').isDetailPage()) {
                clearTimeout(this._redrawReactTimeoutId);
                cjs.Api.loader.get('react').call((function(_this) {
                    return function(reactCalls) {
                        return _this._redrawReactTimeoutId = setTimeout((function() {
                            reactCalls.forceRedrawTabContent(category, doubleRender);
                            return reactCalls.reloadStaticContent();
                        }), 100);
                    };
                })(this));
            }
            return true;
        };

        LivescoreSettings.prototype.errorRollback = function() {
            var form;
            this.loadUserSettings();
            this._redrawLivescore();
            form = this._$('#livescore-settings-form');
            if (form.length) {
                if (this._technicalError) {
                    return;
                }
                return this.show(true);
            } else {
                return this._lsid.showTechnicalError();
            }
        };

        LivescoreSettings.prototype.setSortByTime = function(value) {
            var key;
            if (value == null) {
                value = false;
            }
            if (this._conf.sortByTime === value) {
                return;
            }
            key = this._userSettingsKey + ".sortByTime";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback();
                };
            })(this));
            this._conf.sortByTime = value;
            return this._redrawLivescore();
        };

        LivescoreSettings.prototype.setMygamesGroups = function(value) {
            var key;
            if (value == null) {
                value = false;
            }
            if (this._conf.mygamesGroups === value) {
                return;
            }
            key = this._userSettingsKey + ".mygamesGroups";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback();
                };
            })(this));
            this._conf.mygamesGroups = value;
            return this._redrawLivescore();
        };

        LivescoreSettings.prototype.setMygamesNotifications = function(value) {
            var key;
            if (value == null) {
                value = this._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND;
            }
            if (this._conf.mygamesNotifications === value) {
                return;
            }
            key = this._userSettingsKey + ".mygamesNotifications";
            this._settingsStorage.write(key, value, null, (function(_this) {
                return function() {
                    return _this.errorRollback();
                };
            })(this));
            this._conf.mygamesNotifications = value;
            return this._redrawLivescore();
        };

        LivescoreSettings.prototype._getDisplayCallback = function() {
            var settings;
            settings = this;
            return function() {
                var mggroups, mgnotifications, sortby;
                sortby = settings._conf.sortByTime ? 'time' : 'league';
                mggroups = settings._conf.mygamesGroups ? 'true' : 'false';
                mgnotifications = settings._conf.mygamesNotifications ? settings._conf.mygamesNotifications : settings._notificationMyGames.SETTING_SHOW_WITHOUT_SOUND;
                settings._$(settings._dialog).find('.sortby-form-element input').removeAttr('checked');
                settings._$(settings._dialog).find(".sortby-form-element input[value=" + sortby + "]").prop('checked', true);
                settings._$(settings._dialog).find(".mggroups-form-element input[value=" + mggroups + "]").prop('checked', true);
                settings._$(settings._dialog).find(".mgnotifications-form-element input[value=" + mgnotifications + "]").prop('checked', true);
                if (!settings._technicalError) {
                    settings._$("a.restore-defaults").click(function() {
                        settings.restoreDefaultsUser();
                        return false;
                    });
                    settings._$('#livescore-settings-form .error-box').hide();
                    return settings._$('#livescore-settings-form input').removeAttr("disabled").click(function() {
                        switch (this.name) {
                            case "sortby":
                                return settings.setSortByTime(this.value === 'time');
                            case "mggroups":
                                return settings.setMygamesGroups(this.value === 'true');
                            case "mgnotifications":
                                return settings.setMygamesNotifications(this.value);
                        }
                    });
                } else {
                    settings._$('#livescore-settings-form .error-box').show();
                    settings._$('#livescore-settings-form input').attr("disabled", "disabled");
                    return true;
                }
            };
        };


        /**
        		Displays settings window
         */

        LivescoreSettings.prototype.show = function(serverError) {
            if (serverError == null) {
                serverError = false;
            }
            this._technicalError = serverError;
            this._$(this._dialog).find('.error-box .err-msg').html(this._technicalError ? this._lsid.trans('errTechnical') : this._trans.translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER_LOGIN_LINK'));
            this._$(this._dialog).find('.error-box .err-msg a').click((function(lsid) {
                return function() {
                    lsid.showDialog('login');
                    return false;
                };
            })(this._lsid));
            cjs.dic.get('HighlightWindowManager').changeActive("settings", false);
            return this._lsid._showDialog(this._dialog, this._getDisplayCallback(), null, false);
        };

        return LivescoreSettings;

    })();

    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).LivescoreSettings == null) {
            base.LivescoreSettings = LivescoreSettings;
        }
    } else {
        if (exports.LivescoreSettings == null) {
            exports.LivescoreSettings = LivescoreSettings;
        }
    }

}).call(this);
(function() {
    var AjaxProxy, base;

    AjaxProxy = (function() {
        function AjaxProxy(proxyFileUrl, readyCallback) {
            var that;
            this._proxyFileUrl = proxyFileUrl;
            if (typeof readyCallback === 'function') {
                this._readyCallback = readyCallback;
            } else {
                this._readyCallback = null;
            }
            this._iframeLoaded = false;
            that = this;
            this._iframe = $('<iframe>').attr('src', this._proxyFileUrl).load(this._onLoadProxy(that)).appendTo('head')[0];
            this._storedRequests = [];
        }

        AjaxProxy.prototype.ajax = function(action, setAjaxCallback) {
            if (typeof setAjaxCallback !== 'function') {
                setAjaxCallback = function() {
                    return false;
                };
            }
            this._storedRequests.push({
                'action': action,
                'setAjaxCallback': setAjaxCallback
            });
            return true;
        };

        AjaxProxy.prototype.isReady = function() {
            return this._iframeLoaded;
        };

        AjaxProxy.prototype._onLoadProxy = function(that) {
            return (function(ajaxProxyInstance) {
                return function() {
                    var i, len, ref, request, results;
                    ajaxProxyInstance.ajax = ajaxProxyInstance._iframe.contentWindow.jQuery.ajax;
                    ajaxProxyInstance._iframeLoaded = true;
                    if (typeof ajaxProxyInstance._readyCallback === "function") {
                        ajaxProxyInstance._readyCallback();
                    }
                    ref = that._storedRequests;
                    results = [];
                    for (i = 0, len = ref.length; i < len; i++) {
                        request = ref[i];
                        results.push(request.setAjaxCallback(ajaxProxyInstance.ajax(request.action)));
                    }
                    return results;
                };
            })(this);
        };

        return AjaxProxy;

    })();

    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).AjaxProxy == null) {
            base.AjaxProxy = AjaxProxy;
        }
    } else {
        if (exports.AjaxProxy == null) {
            exports.AjaxProxy = AjaxProxy;
        }
    }

}).call(this);
(function() {
    var DicProxy;

    DicProxy = (function() {
        DicProxy.prototype.READY = 1;

        DicProxy.prototype.LOADING = 2;

        DicProxy.prototype.RUN_CALLBACKS = 3;

        function DicProxy(utilEnviroment) {
            this.utilEnviroment = utilEnviroment;
            this._ready = false;
            this._callbacks = [];
            this._proxyLoading = false;
        }

        DicProxy.prototype.isReady = function() {
            return this._ready;
        };

        DicProxy.prototype.onReady = function(cb) {
            if (this.isReady()) {
                if (typeof cb === "function") {
                    cb();
                }
                return DicProxy.prototype.READY;
            }
            this._callbacks.push(cb);
            if (this._proxyLoading) {
                return DicProxy.prototype.LOADING;
            }
            this._proxyLoading = true;
            this.utilEnviroment.prepareFeedProxy((function(_this) {
                return function() {
                    return _this._runCallbacks();
                };
            })(this));
            return DicProxy.prototype.RUN_CALLBACKS;
        };

        DicProxy.prototype._runCallbacks = function() {
            var cb, i, len, ref;
            this._ready = true;
            ref = this._callbacks;
            for (i = 0, len = ref.length; i < len; i++) {
                cb = ref[i];
                if (typeof cb === "function") {
                    cb();
                }
            }
            this._callbacks = [];
            return this._proxyLoading = false;
        };

        return DicProxy;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('DicProxy', DicProxy);

}).call(this);
(function() {
    var AjaxJqObject, ref;

    AjaxJqObject = (function() {
        AjaxJqObject.prototype.updating = false;

        AjaxJqObject.prototype.aborting = false;

        AjaxJqObject.prototype.ajaxAsync = true;

        AjaxJqObject.prototype.container = null;

        AjaxJqObject.prototype.returnTextAfterUpdate = false;

        AjaxJqObject.prototype.errorReporter = null;

        AjaxJqObject.activeRequests = 0;

        AjaxJqObject.MAX_REQUEST_ATTEMPTS = 3;

        function AjaxJqObject(url, feedProxy, callbackFunction, actionTrigger, callbackObject, u304Get, webkit, feedSign) {
            this.url = url;
            this.feedProxy = feedProxy;
            this.callbackFunction = callbackFunction;
            this.actionTrigger = actionTrigger;
            this.callbackObject = callbackObject;
            this.u304Get = u304Get;
            this.webkit = webkit != null ? webkit : true;
            this.feedSign = feedSign;
            this._requestAttempts = 0;
            this._sendRequestTrigger = null;
        }

        AjaxJqObject.prototype.abort = function() {
            var base;
            if (this.updating) {
                this.updating = false;
                this.aborting = true;
                if (this.ajax != null) {
                    if (typeof(base = this.ajax).abort === "function") {
                        base.abort();
                    }
                }
                return this.ajax = null;
            }
        };

        AjaxJqObject.prototype.async = function(val) {
            return this.ajaxAsync = val ? true : false;
        };

        AjaxJqObject.prototype.setErrorCallback = function(_errorCallback) {
            this._errorCallback = _errorCallback;
        };

        AjaxJqObject.prototype.setAfterCallback = function(_afterCallback) {
            this._afterCallback = _afterCallback;
        };

        AjaxJqObject.prototype.rtext = function(val) {
            this.returnTextAfterUpdate = val ? true : false;
            return this.ajaxAsync = !this.returnTextAfterUpdate;
        };

        AjaxJqObject.prototype.update = function(passData, postMethod, headers) {
            var ajaxSettings, ref, that, u304;
            if (this.updating) {
                return false;
            }
            this.ajax = null;
            AjaxJqObject.activeRequests++;
            if (typeof jQuery === 'undefined') {
                return false;
            }
            if (typeof headers === 'undefined') {
                headers = {};
            }
            this.updating = new Date();
            ajaxSettings = {
                url: this.url,
                async: this.ajaxAsync
            };
            ajaxSettings.data = passData ? passData : void 0;
            ajaxSettings.type = /post/i.test(postMethod) ? 'POST' : 'GET';
            headers['Accept-Language'] = '*';
            headers['X-Referer'] = location.href;
            headers['Accept'] = '*/*';
            if (((ref = this.actionTrigger) === 'update' || ref === 'game') && this.u304Get) {
                u304 = this.u304Get();
                if (u304) {
                    headers['X-Signature'] = u304;
                }
            }
            if (this.feedSign != null) {
                headers['X-Fsign'] = this.feedSign;
            }
            ajaxSettings.headers = headers;
            that = this;
            ajaxSettings.complete = function() {
                var isOk;
                try {
                    if (that.ajax.readyState === 4) {
                        that.updating = false;
                        isOk = false;
                        if (!that.aborting) {
                            isOk = that._ajaxResponse();
                        }
                        if (isOk) {
                            that.ajax = null;
                            return that._requestAttempts = 0;
                        }
                    } else {
                        if (typeof that._errorCallback === "function") {
                            that._errorCallback(that.ajax.status, that.actionTrigger);
                        }
                        return typeof that._sendRequestTrigger === "function" ? that._sendRequestTrigger() : void 0;
                    }
                } catch (error) {}
            };
            this._sendRequestTrigger = (function(ajaxSettings, that) {
                return function() {
                    var cb, timeout;
                    if (that._requestAttempts++ <= AjaxJqObject.MAX_REQUEST_ATTEMPTS) {
                        cb = function() {
                            return that._ajaxSendRequest(ajaxSettings);
                        };
                        timeout = (that._requestAttempts - 1) * 250;
                        if (timeout) {
                            setTimeout(cb, timeout);
                        } else {
                            cb();
                        }
                        return false;
                    }
                    return true;
                };
            })(ajaxSettings, this);
            return this._sendRequestTrigger();
        };

        AjaxJqObject.prototype._ajaxSendRequest = function(ajaxSettings) {
            var ref;
            if ((this.ajaxAsync && (this.feedProxy != null)) || (!this.ajaxAsync && ((ref = this.feedProxy) != null ? ref.isReady() : void 0))) {
                this.ajax = this.feedProxy.ajax(ajaxSettings, (function(_this) {
                    return function(ajax) {
                        return _this.ajax = ajax;
                    };
                })(this));
            } else {
                this.ajax = jQuery.ajax(ajaxSettings);
            }
            if (!this.ajaxAsync && this.ajax !== null) {
                return this._ajaxResponse();
            }
        };

        AjaxJqObject.prototype._ajaxResponse = function() {
            var allResponseHeaders, customHeaders, e, msg, ref, triggerStatus;
            AjaxJqObject.activeRequests--;
            if ((ref = this.ajax.status) === 200 || ref === 304 || ref === 204 || ref === 1223 || ref === 0) {
                if (this.returnTextAfterUpdate === true) {
                    return this.ajax.responseText;
                } else {
                    try {
                        allResponseHeaders = this.ajax.getAllResponseHeaders();
                        customHeaders = this._getCustomHeaders();
                        CommCore.parse_custom_headers(customHeaders);
                        if (typeof this._afterCallback === "function") {
                            this._afterCallback(this.ajax.status, allResponseHeaders, this.ajax.responseText, this.actionTrigger, customHeaders);
                        }
                        if (this.callbackObject) {
                            this.callbackObject[this.callbackFunction](this.ajax.status, allResponseHeaders, this.ajax.responseText, this.actionTrigger, customHeaders);
                        } else {
                            this.callbackFunction(this.ajax.status, allResponseHeaders, this.ajax.responseText, this.actionTrigger, customHeaders);
                        }
                    } catch (error) {
                        e = error;
                        msg = "Ajax response error [" + this.actionTrigger + "] [" + this.url + "] [" + this.ajax.responseText + "]";
                        if (this.errorReporter) {
                            this.errorReporter(msg, e);
                        }
                    }
                }
            } else {
                triggerStatus = this._sendRequestTrigger();
                if (triggerStatus) {
                    if (typeof this._errorCallback === "function") {
                        this._errorCallback(this.ajax.status, this.actionTrigger);
                    }
                }
                return triggerStatus;
            }
            this.ajax = null;
            this.updating = false;
            return true;
        };

        AjaxJqObject.prototype._getCustomHeaders = function() {
            var headers;
            headers = {
                'X-Geoip2-Country-Code': this.ajax.getResponseHeader('X-Geoip2-Country-Code'),
                'X-Geoip2-City-Name': this.ajax.getResponseHeader('X-Geoip2-City-Name'),
                'X-Geoip2-Subdivision-Name-0': this.ajax.getResponseHeader('X-Geoip2-Subdivision-Name-0'),
                'X-Geoip2-Subdivision-Code-0': this.ajax.getResponseHeader('X-Geoip2-Subdivision-Code-0'),
                'X-Geoip2-ISO-Subdivision-Code-0': this.ajax.getResponseHeader('X-Geoip2-ISO-Subdivision-Code-0'),
                'X-Geoip2-Subdivision-Name-1': this.ajax.getResponseHeader('X-Geoip2-Subdivision-Name-1'),
                'X-utime': this.ajax.getResponseHeader('X-utime'),
                'X-ClientIP': this.ajax.getResponseHeader('X-ClientIP'),
                'Date': this.ajax.getResponseHeader('Date'),
                'Content-Length': this.ajax.getResponseHeader('content-length')
            };
            return headers;
        };

        return AjaxJqObject;

    })();

    if (typeof window !== "undefined" && window !== null) {
        if ((ref = window.cjs) != null) {
            if (ref.AjaxJqObject == null) {
                ref.AjaxJqObject = AjaxJqObject;
            }
        }
    } else {
        if (exports.AjaxJqObject == null) {
            exports.AjaxJqObject = AjaxJqObject;
        }
    }

}).call(this);
(function() {
    var ClientStorage_Driver_StorageAbstract;

    ClientStorage_Driver_StorageAbstract = (function() {
        ClientStorage_Driver_StorageAbstract.prototype.TTL_KEY = 'data_ttl';

        function ClientStorage_Driver_StorageAbstract() {
            this._driverAvailable = this._isDriverAvailable();
        }

        ClientStorage_Driver_StorageAbstract.prototype._getStorageDriver = function() {
            throw new Error('No driver');
        };

        ClientStorage_Driver_StorageAbstract.prototype.get = function(key) {
            if (key === this.TTL_KEY) {
                return null;
            }
            if (!this._checkTtl(key)) {
                return null;
            }
            return this._getStorageDriver().getItem(key);
        };

        ClientStorage_Driver_StorageAbstract.prototype.store = function(key, value, ttl) {
            if (key === this.TTL_KEY) {
                return false;
            }
            this._getStorageDriver().setItem(key, value);
            this._dropTtl(key);
            this._setTtl(key, ttl);
            return true;
        };

        ClientStorage_Driver_StorageAbstract.prototype.drop = function(key) {
            if (key === this.TTL_KEY) {
                return false;
            }
            this._getStorageDriver().removeItem(key);
            this._dropTtl(key);
            return true;
        };

        ClientStorage_Driver_StorageAbstract.prototype.isAvailable = function() {
            return this._driverAvailable;
        };

        ClientStorage_Driver_StorageAbstract.prototype._isDriverAvailable = function() {
            var error, testKey, testValue;
            testKey = 'locTest';
            testValue = 'locTest';
            try {
                this._getStorageDriver().setItem(testKey, testValue);
                if (this._getStorageDriver().getItem(testKey) !== testValue) {
                    return false;
                }
                this._getStorageDriver().removeItem(testKey);
                return true;
            } catch (error1) {
                error = error1;
                return false;
            }
        };

        ClientStorage_Driver_StorageAbstract.prototype._checkTtl = function(key) {
            var ttlKeys;
            ttlKeys = this._loadTtlKeys();
            if ((ttlKeys != null ? ttlKeys[key] : void 0) == null) {
                return true;
            }
            if (ttlKeys[key] < this._getTimestamp()) {
                return false;
            }
            return true;
        };

        ClientStorage_Driver_StorageAbstract.prototype._dropTtl = function(key) {
            var ttlKeys;
            ttlKeys = this._loadTtlKeys();
            if ((ttlKeys != null ? ttlKeys[key] : void 0) != null) {
                delete ttlKeys[key];
            }
            return this._storeTtlKeys(ttlKeys);
        };

        ClientStorage_Driver_StorageAbstract.prototype._setTtl = function(key, ttl) {
            var ttlKeys;
            if (!ttl) {
                return;
            }
            ttlKeys = this._loadTtlKeys();
            ttlKeys[key] = Math.round(ttl) + this._getTimestamp();
            this._storeTtlKeys(ttlKeys);
            return true;
        };

        ClientStorage_Driver_StorageAbstract.prototype._loadTtlKeys = function() {
            var error, ttlJson, ttlKeys;
            ttlJson = this._getStorageDriver().getItem(this.TTL_KEY);
            try {
                if (ttlJson != null) {
                    ttlKeys = JSON.parse(ttlJson);
                }
            } catch (error1) {
                error = error1;
                ttlKeys = {};
            }
            if (ttlKeys == null) {
                ttlKeys = {};
            }
            return ttlKeys;
        };

        ClientStorage_Driver_StorageAbstract.prototype._storeTtlKeys = function(ttlKeys) {
            var ttlJson;
            ttlJson = JSON.stringify(ttlKeys);
            this._getStorageDriver().setItem(this.TTL_KEY, ttlJson);
            return true;
        };

        ClientStorage_Driver_StorageAbstract.prototype._getTimestamp = function() {
            return Math.round((new Date()).getTime() / 1000);
        };

        return ClientStorage_Driver_StorageAbstract;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_StorageAbstract', ClientStorage_Driver_StorageAbstract);

}).call(this);
(function() {
    var ClientStorage_Driver_LocalStorage,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    ClientStorage_Driver_LocalStorage = (function(superClass) {
        extend(ClientStorage_Driver_LocalStorage, superClass);

        function ClientStorage_Driver_LocalStorage() {
            return ClientStorage_Driver_LocalStorage.__super__.constructor.apply(this, arguments);
        }

        ClientStorage_Driver_LocalStorage.prototype.DRIVER_NAME = 'locStorage';

        ClientStorage_Driver_LocalStorage.prototype._getStorageDriver = function() {
            return localStorage;
        };

        return ClientStorage_Driver_LocalStorage;

    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_LocalStorage', ClientStorage_Driver_LocalStorage);

}).call(this);
(function() {
    var ClientStorage_Driver_LocalCookie;

    ClientStorage_Driver_LocalCookie = (function() {
        ClientStorage_Driver_LocalCookie.prototype.DRIVER_NAME = 'localCookie';

        ClientStorage_Driver_LocalCookie.prototype.TTL_KEY = 'data_ttl';

        function ClientStorage_Driver_LocalCookie() {
            this._p3pNeeded = typeof iframe_external !== 'undefined' && iframe_external;
            this._p3pAvailable = this._isBrowserP3pCompatible();
            this._driverAvailable = this._isDriverAvailable();
        }

        ClientStorage_Driver_LocalCookie.prototype.get = function(key, origin) {
            var forceP3p;
            origin = this._getOrigin(origin);
            forceP3p = this._getP3pIsForced(origin);
            if (!(!forceP3p || (forceP3p && this._p3pAvailable))) {
                throw 'Driver error';
            }
            return this._parseCookie(origin.cookie, key);
        };

        ClientStorage_Driver_LocalCookie.prototype.store = function(key, value, ttl, origin, path) {
            var cookie, expiredDate, forceP3p;
            origin = this._getOrigin(origin);
            forceP3p = this._getP3pIsForced(origin);
            if (!(!forceP3p || (forceP3p && this._p3pAvailable))) {
                throw 'Driver error';
            }
            if (value === null || value === '') {
                ttl = -86400;
            }
            if (ttl == null) {
                ttl = 365 * 86400;
            }
            expiredDate = new Date();
            expiredDate.setTime(expiredDate.getTime() + ttl * 1000);
            cookie = key + "=" + escape(value);
            if (ttl) {
                cookie += "; expires=" + expiredDate.toGMTString();
            }
            if (path != null) {
                cookie += '; path=' + path;
            }
            if (typeof domain !== "undefined" && domain !== null) {
                cookie += '; domain=' + domain;
            }
            origin.cookie = cookie;
            return true;
        };

        ClientStorage_Driver_LocalCookie.prototype.drop = function(key) {
            return this.store(key, '');
        };

        ClientStorage_Driver_LocalCookie.prototype.isAvailable = function() {
            return this._driverAvailable;
        };

        ClientStorage_Driver_LocalCookie.prototype._isDriverAvailable = function() {
            return !this._p3pNeeded || (this._p3pNeeded && this._p3pAvailable);
        };

        ClientStorage_Driver_LocalCookie.prototype._isBrowserP3pCompatible = function() {
            var sub, ver;
            if (navigator.userAgent && navigator.userAgent.indexOf("MSIE") !== -1) {
                sub = navigator.appVersion.substr(navigator.appVersion.indexOf("MSIE") + 5);
                ver = parseInt(sub.substr(0, sub.indexOf('.')));
                return ver >= 8;
            }
            return true;
        };

        ClientStorage_Driver_LocalCookie.prototype._getOrigin = function(origin) {
            if (typeof origin === 'undefined' || origin === 'self' || !this._p3pNeeded) {
                origin = document;
            }
            return origin;
        };

        ClientStorage_Driver_LocalCookie.prototype._getP3pIsForced = function(origin) {
            var forceP3p;
            forceP3p = false;
            if (origin !== document || this._p3pNeeded) {
                return forceP3p = true;
            }
        };

        ClientStorage_Driver_LocalCookie.prototype._parseCookie = function(cookieString, key) {
            var cookie, cookies, i, j, name, parts, ref, result;
            result = key ? null : {};
            cookies = cookieString.split('; ');
            for (i = j = 0, ref = cookies.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                parts = cookies[i].split('=');
                name = parts.shift();
                cookie = parts.join('=');
                if (key && key === name) {
                    result = this._decodeCookie(cookie);
                    break;
                }
                if (!key) {
                    result[name] = this._decodeCookie(cookie);
                }
            }
            return result;
        };

        ClientStorage_Driver_LocalCookie.prototype._decodeCookie = function(s) {
            if (s.indexOf('"') === 0) {
                s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
            }
            return s = unescape(s);
        };

        return ClientStorage_Driver_LocalCookie;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_LocalCookie', ClientStorage_Driver_LocalCookie);

}).call(this);
(function() {
    var ClientStorage_Driver_DummyStorage, DummyStorage,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    ClientStorage_Driver_DummyStorage = (function(superClass) {
        extend(ClientStorage_Driver_DummyStorage, superClass);

        function ClientStorage_Driver_DummyStorage() {
            return ClientStorage_Driver_DummyStorage.__super__.constructor.apply(this, arguments);
        }

        ClientStorage_Driver_DummyStorage.prototype.DRIVER_NAME = 'dummyStorage';

        ClientStorage_Driver_DummyStorage.prototype._getStorageDriver = function() {
            return DummyStorage.getInstance();
        };

        return ClientStorage_Driver_DummyStorage;

    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));

    DummyStorage = (function() {
        DummyStorage._instance = null;

        DummyStorage.getInstance = function() {
            if (!this._instance) {
                this._instance = new this;
            }
            return this._instance;
        };

        function DummyStorage() {
            this._data = {};
        }

        DummyStorage.prototype.getItem = function(key) {
            if (typeof this._data[key] === 'undefined') {
                return null;
            }
            return this._data[key];
        };

        DummyStorage.prototype.setItem = function(key, value) {
            value = value + "";
            this._data[key] = value;
            return void 0;
        };

        DummyStorage.prototype.removeItem = function(key) {
            delete this._data[key];
            return void 0;
        };

        return DummyStorage;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_DummyStorage', ClientStorage_Driver_DummyStorage);

}).call(this);
(function() {
    var ClientStorage_Driver_IeUserData, IeUserData,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    ClientStorage_Driver_IeUserData = (function(superClass) {
        extend(ClientStorage_Driver_IeUserData, superClass);

        ClientStorage_Driver_IeUserData.prototype.DRIVER_NAME = 'ieUserData';

        function ClientStorage_Driver_IeUserData(utilBrowser) {
            this.utilBrowser = utilBrowser;
            ClientStorage_Driver_IeUserData.__super__.constructor.call(this);
        }

        ClientStorage_Driver_IeUserData.prototype._isDriverAvailable = function() {
            return ClientStorage_Driver_IeUserData.__super__._isDriverAvailable.call(this);
        };

        ClientStorage_Driver_IeUserData.prototype._getStorageDriver = function() {
            return IeUserData.getInstance();
        };

        return ClientStorage_Driver_IeUserData;

    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));

    IeUserData = (function() {
        IeUserData._instance = null;

        IeUserData.getInstance = function() {
            if (!this._instance) {
                this._instance = new this;
            }
            return this._instance;
        };

        IeUserData.prototype.STORAGE_NAME = "userDataStorage";

        function IeUserData() {
            this._initDriver();
        }

        IeUserData.prototype.getItem = function(key) {
            return this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    return _this._deserialize(_this._storage.getAttribute(key));
                };
            })(this));
        };

        IeUserData.prototype.setItem = function(key, value) {
            this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    value = value + "";
                    if (value == null) {
                        return _this.removeItem(key);
                    }
                    _this._storage.setAttribute(key, _this._serialize(value));
                    return _this._storage.save(IeUserData.prototype.STORAGE_NAME);
                };
            })(this));
            return void 0;
        };

        IeUserData.prototype.removeItem = function(key) {
            this._storageExecuteFunction((function(_this) {
                return function() {
                    key = _this._normalizeKey(key);
                    _this._storage.removeAttribute(key);
                    return _this._storage.save(IeUserData.prototype.STORAGE_NAME);
                };
            })(this));
            return void 0;
        };

        IeUserData.prototype._initDriver = function() {
            var scriptTag;
            try {
                scriptTag = 'script';
                this._storageContainer = new ActiveXObject('htmlfile');
                this._storageContainer.open();
                this._storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
                this._storageContainer.close();
                this._storageOwner = this._storageContainer.w.frames[0].document;
                this._storage = this._storageOwner.createElement('div');
                this._storageOwner.appendChild(this._storage);
                return this._storage.addBehavior('#default#userData');
            } catch (error) {
                throw new Error('IeStorage error');
            }
        };

        IeUserData.prototype._normalizeKey = function(key) {
            var r;
            r = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g");
            return key.replace(/^d/, '___$&').replace(r, '___');
        };

        IeUserData.prototype._serialize = function(value) {
            return JSON.stringify(value);
        };

        IeUserData.prototype._deserialize = function(value) {
            var e;
            if (typeof value !== 'string') {
                return void 0;
            }
            try {
                return JSON.parse(value);
            } catch (error) {
                e = error;
                return value || void 0;
            }
        };

        IeUserData.prototype._storageExecuteFunction = function(func) {
            var result;
            this._storage.load(IeUserData.prototype.STORAGE_NAME);
            result = func();
            return result;
        };

        return IeUserData;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_IeUserData', ClientStorage_Driver_IeUserData);

}).call(this);
(function() {
    var ClientStorage_Driver_SessionStorage,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    ClientStorage_Driver_SessionStorage = (function(superClass) {
        extend(ClientStorage_Driver_SessionStorage, superClass);

        function ClientStorage_Driver_SessionStorage() {
            return ClientStorage_Driver_SessionStorage.__super__.constructor.apply(this, arguments);
        }

        ClientStorage_Driver_SessionStorage.prototype.DRIVER_NAME = 'sessStorage';

        ClientStorage_Driver_SessionStorage.prototype._getStorageDriver = function() {
            return sessionStorage;
        };

        return ClientStorage_Driver_SessionStorage;

    })(cjs.dic.getClass('ClientStorage_Driver_StorageAbstract'));

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('ClientStorage_Driver_SessionStorage', ClientStorage_Driver_SessionStorage);

}).call(this);
(function() {
    var ClientStorage;

    ClientStorage = (function() {
        ClientStorage.INIT = function(ClientStorage_Driver_LocalStorage, ClientStorage_Driver_IeUserData, ClientStorage_Driver_LocalCookie, ClientStorage_Driver_SessionStorage, ClientStorage_Driver_DummyStorage) {
            var clientStorage;
            clientStorage = new ClientStorage();
            clientStorage.addDriver(ClientStorage_Driver_LocalStorage, cjs.dic.getClass('ClientStorage_Driver_IeUserData').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_IeUserData, cjs.dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_LocalCookie, cjs.dic.getClass('ClientStorage_Driver_DummyStorage').prototype.DRIVER_NAME);
            clientStorage.addDriver(ClientStorage_Driver_DummyStorage);
            clientStorage.addDriver(ClientStorage_Driver_SessionStorage, cjs.dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME);
            clientStorage.migrate();
            return clientStorage;
        };

        function ClientStorage(_dic) {
            this._dic = _dic != null ? _dic : cjs.dic;
            this.drivers = {};
        }

        ClientStorage.prototype.addDriver = function(driver, fallbackDriver) {
            var driverName;
            if (fallbackDriver == null) {
                fallbackDriver = null;
            }
            driverName = driver.DRIVER_NAME;
            if (this.drivers[driverName] != null) {
                return false;
            }
            this.drivers[driverName] = {
                'driver': driver,
                'available': driver.isAvailable(),
                'fallbackDriver': fallbackDriver
            };
            return true;
        };

        ClientStorage.prototype.store = function(key, value, ttl, origin, path) {
            return this._store(null, key, value, ttl, origin, path);
        };

        ClientStorage.prototype.get = function(key, origin) {
            return this._get(null, key, origin);
        };

        ClientStorage.prototype.drop = function(key) {
            return this._drop(null, key);
        };

        ClientStorage.prototype.isDriverAvailable = function(driverName) {
            var ref, ref1;
            return ((ref = this.drivers) != null ? (ref1 = ref[driverName]) != null ? ref1.available : void 0 : void 0) === true;
        };

        ClientStorage.prototype._store = function(driverName, key, value, ttl, origin, path) {
            var driver, error;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return false;
            }
            try {
                return driver.store(key, value, ttl, origin, path);
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.store(key, value, ttl, origin, path);
            }
            return false;
        };

        ClientStorage.prototype._get = function(driverName, key, origin) {
            var driver, error;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return null;
            }
            try {
                return driver.get(key, origin);
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.get(key, origin);
            }
            return null;
        };

        ClientStorage.prototype._drop = function(driverName, key) {
            var driver, error;
            driver = this._getDriver(driverName);
            if (driver === false) {
                return false;
            }
            try {
                return driver.drop(key);
            } catch (error1) {
                error = error1;
                this._disableDriver(driver.DRIVER_NAME);
                return this.drop(key);
            }
            return false;
        };

        ClientStorage.prototype._getDriver = function(name) {
            if (!name) {
                name = this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME;
            }
            if (!this.drivers[name]) {
                return false;
            }
            if (!this.drivers[name].available) {
                if (!this.drivers[name].fallbackDriver) {
                    return false;
                }
                return this._getDriver(this.drivers[name].fallbackDriver);
            }
            return this.drivers[name].driver;
        };

        ClientStorage.prototype._disableDriver = function(name) {
            if (!this.drivers[name]) {
                return false;
            }
            this.drivers[name].available = false;
            return true;
        };

        ClientStorage.prototype.migrate = function() {
            var cookieName, cookiePath, cookieValue, cookies, error, fromDriver, paths, toDriver;
            fromDriver = this.drivers[this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME].driver;
            toDriver = this.drivers[this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME].driver;
            if (!(fromDriver.isAvailable() && toDriver.isAvailable())) {
                return false;
            }
            try {
                paths = toDriver.get('paths-migrated-from-cookies') || '';
                cookiePath = '<' + document.location.pathname.replace(/\\/g, '/').replace(/\/[^\/]*$/, '') + '>';
                if (cookiePath === '<>') {
                    cookiePath = '</>';
                }
                if (paths.indexOf(cookiePath) !== -1) {
                    return false;
                }
                cookies = fromDriver._parseCookie(document.cookie);
                for (cookieName in cookies) {
                    cookieValue = cookies[cookieName];
                    toDriver.store(cookieName, cookieValue);
                    fromDriver.drop(cookieName);
                }
                toDriver.store('paths-migrated-from-cookies', paths + cookiePath);
            } catch (error1) {
                error = error1;
                return false;
            }
            return true;
        };

        ClientStorage.prototype.store_cookie = function(key, value, ttl, origin, path) {
            return this._store(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME, key, value, ttl, origin, path);
        };

        ClientStorage.prototype.get_cookie = function(key, origin) {
            return this._get(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME, key, origin);
        };

        ClientStorage.prototype.store_in_session = function(key, value, ttl) {
            return this._store(this._dic.getClass('ClientStorage_Driver_SessionStorage').prototype.DRIVER_NAME, key, value, ttl);
        };

        ClientStorage.prototype.get_from_session = function(key) {
            return this._get(this._dic.getClass('ClientStorage_Driver_SessionStorage').prototype.DRIVER_NAME, key);
        };

        return ClientStorage;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton('ClientStorage', ClientStorage.INIT, ['clientStorage', 'client_storage']);

}).call(this);

/**
	May games - handles mygames settings, storage etc...
 */

(function() {
    var MyGames, base;

    MyGames = (function() {
        MyGames.prototype.LSID_DATA_KEY = 'mygames';

        MyGames.prototype.CATEGORY = 5;

        function MyGames(_storage, _lsid, _name, _path, _changeCallbacks, _sportList, _dayGetter, _jQuery, _getMatchDayFunc, _projectId, _cfg, _getGmtOffsetFunc, _isNoDuelTournament, _eventsUpdatedStartTimeGetter, _dic) {
            this._storage = _storage;
            this._lsid = _lsid;
            this._name = _name;
            this._path = _path;
            this._changeCallbacks = _changeCallbacks;
            this._sportList = _sportList;
            this._dayGetter = _dayGetter;
            this._jQuery = _jQuery;
            this._getMatchDayFunc = _getMatchDayFunc;
            this._projectId = _projectId;
            this._cfg = _cfg;
            this._getGmtOffsetFunc = _getGmtOffsetFunc;
            this._isNoDuelTournament = _isNoDuelTournament;
            this._eventsUpdatedStartTimeGetter = _eventsUpdatedStartTimeGetter;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            this._loaded = false;
            this._count = 0;
            this._sports = null;
            this._sports_count = null;
            this._expired = [];
            this._lastStorageUpdated = this._getStorageTimestamp();
            if (!this._lastStorageUpdated) {
                this._setStorageTimestamp();
            }
        }

        MyGames.prototype._getFutureDays = function() {
            var ref;
            if (((ref = this._cfg) != null ? ref.mygames_future_days : void 0) != null) {
                return parseInt(this._cfg.mygames_future_days);
            }
            return 0;
        };

        MyGames.prototype._getPastDays = function() {
            var ref;
            if (((ref = this._cfg) != null ? ref.mygames_past_days : void 0) != null) {
                return parseInt(this._cfg.mygames_past_days);
            }
            return 0;
        };

        MyGames.prototype._isOk = function(matchDay, matchStatusType) {
            if (matchDay > 0 && matchStatusType === 1 || matchDay < 0 && matchStatusType === 3) {
                return 1;
            }
            return 0;
        };

        MyGames.prototype._getExpireDate = function() {
            var local_date, local_date_start;
            local_date = new Date();
            local_date_start = Date.UTC(local_date.getFullYear(), local_date.getMonth(), local_date.getDate(), 0, 0, 0) / 1000 + this._getGmtOffsetFunc();
            return local_date_start + (24 * 60 * 60);
        };

        MyGames.prototype._isMyGameDataValid = function(myGameData) {
            var local_date;
            local_date = new Date();
            local_date = local_date.getTime() / 1000 + this._getGmtOffsetFunc();
            if (local_date < myGameData.m_expire_date) {
                return 1;
            }
            return 0;
        };

        MyGames.prototype.getContainer = function() {
            return this._container;
        };

        MyGames.prototype.addChangeCallback = function(callback) {
            return this._changeCallbacks.push(callback);
        };

        MyGames.prototype.canBeGameAdded = function(fsDataIndex, fsLablId) {
            var dataHolder, eventItem;
            if (fsLablId == null) {
                fsLablId = null;
            }
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(fsDataIndex);
            if (dataHolder === false) {
                return false;
            }
            eventItem = dataHolder.getEvent(fsDataIndex);
            if ((fsLablId != null) && eventItem.getLeagueId() !== fsLablId) {
                return false;
            }
            return this.canBeAdded(eventItem.getStartUTime(), eventItem.getEndUTime());
        };

        MyGames.prototype.canBeAdded = function(startTime, endTime) {
            return this.canBeAddedByDay(this._getMatchDayFunc(startTime, endTime));
        };

        MyGames.prototype.canBeAddedByDay = function(daysArray) {
            var day1, day2, futureDays, pastDays;
            if (!(daysArray != null ? daysArray.length : void 0)) {
                return false;
            }
            if (this._jQuery.inArray(0, daysArray) !== -1) {
                return true;
            }
            futureDays = this._getFutureDays();
            pastDays = this._getPastDays();
            if (daysArray.length === 1) {
                if (daysArray[0] <= futureDays && daysArray[0] >= -pastDays) {
                    return true;
                }
                return false;
            }
            day1 = daysArray[0];
            day2 = daysArray[daysArray.length - 1];
            if ((day1 <= futureDays && day1 >= -pastDays) || (day2 <= futureDays && day2 >= -pastDays)) {
                return true;
            }
            return false;
        };

        MyGames.prototype.canBeAllMygamesButtonAdded = function(fsLablId, games) {
            var dataHandler, dataIndex, ret;
            if (fsLablId == null) {
                fsLablId = null;
            }
            if (games == null) {
                games = null;
            }
            if (games != null) {
                for (dataIndex in games) {
                    if (this.canBeGameAdded(dataIndex, fsLablId)) {
                        return true;
                    }
                }
                return false;
            }
            dataHandler = this._dic.get('dataEventHolderProxy').getHandler();
            ret = false;
            dataHandler.each((function(_this) {
                return function(index, id) {
                    if (_this.canBeGameAdded(id, fsLablId)) {
                        ret = true;
                        return false;
                    }
                };
            })(this));
            return ret;
        };

        MyGames.prototype.add = function(dataIndex, onlyAddToContainer) {
            var dataHolder, eventItem, leagueId, matchDay, noDuel, redrawLivescore;
            if (onlyAddToContainer == null) {
                onlyAddToContainer = false;
            }
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load();
            }
            if (this._container[dataIndex] == null) {
                dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
                if (dataHolder !== false) {
                    eventItem = dataHolder.getEvent(dataIndex);
                    leagueId = eventItem.getLeagueId();
                    noDuel = this._isNoDuelTournament(leagueId);
                    matchDay = this._getMatchDay(this._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                    if (matchDay === 0) {
                        this._container[dataIndex] = {
                            sport_id: eventItem.getSportId(),
                            labl_id: leagueId,
                            m_day: matchDay,
                            m_ok: 0,
                            m_expire_date: this._getExpireDate(),
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime(),
                            noDuel: noDuel,
                            mgGroup: 0
                        };
                    } else {
                        this._container[dataIndex] = eventItem.getData(true);
                        this._container[dataIndex].m_day = matchDay;
                        this._container[dataIndex].m_ok = this._isOk(this._container[dataIndex].m_day, this._container[dataIndex].AB);
                        this._container[dataIndex].m_expire_date = this._getExpireDate();
                        this._container[dataIndex].noDuel = noDuel;
                        this._addLabel(leagueId);
                    }
                    if (onlyAddToContainer) {
                        return;
                    }
                    this._saveStats(leagueId, dataIndex.split('_')[2]);
                    this._count++;
                    this.store(true);
                    if (redrawLivescore) {
                        this._redrawLivescore();
                    }
                }
            }
            this._callReactUpdates();
            return true;
        };

        MyGames.prototype.isGameFromTournament = function(dataIndex) {
            var dataHolder;
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
            if (dataHolder === false) {
                return false;
            }
            return this.isAddedWholeTournament(dataHolder.getEvent(dataIndex).getLeagueId());
        };

        MyGames.prototype.isAddedWholeTournament = function(fsLabelId) {
            return this._noDuelTournaments[fsLabelId] != null;
        };

        MyGames.prototype.getMatchDayForTournament = function(fsLabelId) {
            if (!this.isAddedWholeTournament(fsLabelId)) {
                return false;
            }
            return this._getMatchDay(this._getMatchDayFunc(this._noDuelTournaments[fsLabelId].AD, this._noDuelTournaments[fsLabelId].AP));
        };

        MyGames.prototype.addNoduelTournament = function(labelId) {
            var addedPlayers, first, maxAddedPlayers, redrawLivescore;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            addedPlayers = 0;
            maxAddedPlayers = cjs.Api.config.get('app', 'noduel_events', 'mygames');
            first = true;
            this._dic.get('dataEventHolderProxy').getHandler().each((function(that) {
                return function(index, id) {
                    var eventItem, matchDay;
                    eventItem = this.getItem(id);
                    if (labelId !== eventItem.getLeagueId()) {
                        return;
                    }
                    if (first) {
                        first = false;
                        matchDay = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                        that._noDuelTournaments[labelId] = {
                            sport_id: eventItem.getSportId(),
                            m_day: matchDay,
                            m_ok: matchDay === 0 ? 0 : 1,
                            m_expire_date: that._getExpireDate(),
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime()
                        };
                    }
                    if (!(addedPlayers < maxAddedPlayers)) {
                        return false;
                    }
                    addedPlayers++;
                    return that.add(id, true);
                };
            })(this));
            this._saveStats(labelId);
            this._count++;
            this.store(true);
            if (redrawLivescore) {
                this._redrawLivescore();
            }
            return true;
        };

        MyGames.prototype.removeAllEvents = function(labelId) {
            var fsDataIndex, gameData, redrawLivescore, ref, removedGames;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load();
            }
            removedGames = [];
            ref = this._container;
            for (fsDataIndex in ref) {
                gameData = ref[fsDataIndex];
                if (labelId !== gameData.labl_id) {
                    continue;
                }
                removedGames.push(fsDataIndex);
                if (this._container[fsDataIndex] != null) {
                    delete this._container[fsDataIndex];
                }
            }
            if (this._noDuelTournaments[labelId] != null) {
                delete this._noDuelTournaments[labelId];
                this._count--;
            }
            this.store(true);
            if (redrawLivescore) {
                this._redrawLivescore();
            }
            return removedGames;
        };

        MyGames.prototype.getCount = function() {
            var count, data, fsDataIndex, fsLablIndex, i, noduelTournaments, ref;
            if (!this._loaded) {
                this.load();
            }
            count = 0;
            noduelTournaments = {};
            for (fsLablIndex in this._noDuelTournaments) {
                noduelTournaments[fsLablIndex] = 1;
            }
            ref = this._container;
            for (fsDataIndex in ref) {
                data = ref[fsDataIndex];
                if ((data.labl_id != null) && this.isAddedWholeTournament(data.labl_id)) {
                    continue;
                }
                if (data.noDuel && data.labl_id) {
                    noduelTournaments[data.labl_id] = 1;
                } else {
                    count++;
                }
            }
            for (i in noduelTournaments) {
                count++;
            }
            return count;
        };

        MyGames.prototype.getSports = function() {
            var dataContainer, dataIndex, j, len, myGameSport, ref;
            if (this._sports != null) {
                return this._sports;
            }
            if (!this._loaded) {
                this.load();
            }
            this._sports = {};
            this._sports_count = 0;
            ref = [this._container, this._noDuelTournaments];
            for (j = 0, len = ref.length; j < len; j++) {
                dataContainer = ref[j];
                for (dataIndex in dataContainer) {
                    myGameSport = dataContainer[dataIndex].sport_id;
                    if (!this._sportList.hasOwnProperty(myGameSport)) {
                        continue;
                    }
                    if (!this._sports.hasOwnProperty(this._sportList[myGameSport])) {
                        this._sports_count++;
                    }
                    this._sports[this._sportList[myGameSport]] = myGameSport;
                }
            }
            return this._sports;
        };

        MyGames.prototype.getFromStorage = function() {
            var myGamesStr;
            myGamesStr = this._storage.get(this._name);
            return this._jQuery.parseJSON(myGamesStr);
        };

        MyGames.prototype.check = function(dataIndex) {
            var dataHolder, eventItem, leagueId;
            if (!this._loaded) {
                this.load();
            }
            if (this._container[dataIndex] != null) {
                return true;
            }
            dataHolder = this._dic.get('dataEventHolderProxy').findEventHolderByEventId(dataIndex);
            if (dataHolder === false) {
                return false;
            }
            eventItem = dataHolder.getEvent(dataIndex);
            leagueId = eventItem.getLeagueId();
            if ((this._noDuelTournaments[leagueId] != null) && this._noDuelTournaments[leagueId].m_day === 0) {
                return true;
            }
            return false;
        };

        MyGames.prototype.remove = function(dataIndex) {
            var redrawLivescore;
            redrawLivescore = this._reloadStorageIfSyncNeeded();
            if (!this._loaded) {
                this.load();
            }
            if (this._container[dataIndex] != null) {
                delete this._container[dataIndex];
                this._count--;
                this.store(true);
            }
            if (redrawLivescore) {
                this._redrawLivescore();
            }
            this._callReactUpdates();
            return false;
        };

        MyGames.prototype.toggle = function(dataIndex) {
            var ret;
            if (!this._loaded) {
                this.load();
            }
            if (this._container[dataIndex] != null) {
                ret = this.remove(dataIndex);
            } else {
                ret = this.add(dataIndex);
            }
            push_update_subscription();
            return ret;
        };

        MyGames.prototype._remoteSync = function(myGamesData, noduelLablData) {
            return this._syncWithLsId(myGamesData, noduelLablData);
        };

        MyGames.prototype.load = function(update, disableLsidSync) {
            var _labl, _noDuelTournaments, addedPlayers, changed, count, countAdded, dataHandler, dataHolder, error, fsData, fsDataIndex, hasMygames, labIndex, labelData, labelId, labelIndex, labl, lablCount, lablCountAdded, lablData, lablId, lablStr, lastMatchDay, matchDay, maxAddedPlayers, myGame, myGames, myGamesStr, noDuelTournaments, noduelTournamentsStr, that, updateNoduelTournamentMatches;
            if (disableLsidSync == null) {
                disableLsidSync = false;
            }
            this._loaded = true;
            myGamesStr = this._storage.get(this._name);
            lablStr = this._storage.get(this._name + "_labl");
            noduelTournamentsStr = this._storage.get(this._name + "_noduel");
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            this._count = 0;
            lablCount = 0;
            lablCountAdded = 0;
            count = 0;
            changed = false;
            that = this;
            try {
                myGames = myGamesStr ? this._jQuery.parseJSON(myGamesStr) : {};
            } catch (error1) {
                error = error1;
                return;
            }
            noDuelTournaments = {};
            if (noduelTournamentsStr !== null) {
                try {
                    noDuelTournaments = this._jQuery.parseJSON(noduelTournamentsStr);
                } catch (error1) {}
            }
            if (!noDuelTournaments) {
                noDuelTournaments = {};
            }
            if (!disableLsidSync) {
                this._remoteSync(myGames, noDuelTournaments);
            }
            for (fsDataIndex in myGames) {
                fsData = myGames[fsDataIndex];
                if (fsData.labl_id) {
                    fsData.labl_id = this._cleanLabelId(fsData.labl_id);
                }
            }
            _noDuelTournaments = {};
            for (lablId in noDuelTournaments) {
                lablData = noDuelTournaments[lablId];
                _noDuelTournaments[this._cleanLabelId(lablId)] = lablData;
            }
            noDuelTournaments = _noDuelTournaments;
            updateNoduelTournamentMatches = false;
            for (labelIndex in noDuelTournaments) {
                labelData = noDuelTournaments[labelIndex];
                count++;
                if (!this.canBeAdded(labelData.AD, labelData.AP)) {
                    changed = true;
                    continue;
                }
                this._count++;
                matchDay = this._getMatchDay(this._getMatchDayFunc(labelData.AD, labelData.AP));
                lastMatchDay = labelData.m_day;
                if (matchDay !== lastMatchDay) {
                    labelData.m_day = matchDay;
                    if (matchDay === 0 || (lastMatchDay > 0 && matchDay < 0)) {
                        labelData.m_ok = 0;
                    } else {
                        labelData.m_ok = 1;
                    }
                    changed = true;
                }
                if (labelData.m_ok === 1) {
                    if (!this._leagueHasMatches(labelIndex, myGames)) {
                        labelData.m_ok = 0;
                    }
                    if (labelData.m_ok === 0) {
                        changed = true;
                    }
                }
                if (matchDay !== 0 && labelData.m_ok === 0) {
                    updateNoduelTournamentMatches = true;
                }
                this._noDuelTournaments[labelIndex] = this._jQuery.extend(true, {}, labelData);
            }
            hasMygames = false;
            for (myGame in myGames) {
                hasMygames = true;
                break;
            }
            if (!(hasMygames || changed || updateNoduelTournamentMatches)) {
                return;
            }
            labl = {};
            if (lablStr !== null) {
                try {
                    labl = this._jQuery.parseJSON(lablStr);
                    for (labIndex in labl) {
                        lablCount++;
                    }
                } catch (error1) {
                    error = error1;
                    labl = {};
                }
            }
            _labl = {};
            for (lablId in labl) {
                lablData = labl[lablId];
                _labl[this._cleanLabelId(lablId)] = lablData;
            }
            labl = _labl;
            if (update && this.canBeAddedByDay([this._dayGetter()])) {
                update = true;
            } else {
                update = false;
            }
            dataHolder = this._dic.get('dataEventHolderProxy').getHolder();
            this._jQuery.each(myGames, (function(that) {
                return function(hash, myGameData) {
                    var added, eventItem, eventUpdatedStartTime, mDay;
                    if (that._noDuelTournaments[myGameData.labl_id] == null) {
                        count++;
                    }
                    if (hash.substr(0, 2) !== 'g_') {
                        return;
                    }
                    if (!myGameData.AD) {
                        return;
                    }
                    if (!myGameData.AP) {
                        myGameData.AP = null;
                    }
                    eventUpdatedStartTime = that._eventsUpdatedStartTimeGetter()[hash];
                    if ((eventUpdatedStartTime != null) && (eventUpdatedStartTime.start_time !== myGameData.AD || eventUpdatedStartTime.end_time !== myGameData.AP)) {
                        myGameData = {
                            sport_id: myGameData.sport_id,
                            labl_id: myGameData.labl_id,
                            m_day: that._getMatchDay(that._getMatchDayFunc(eventUpdatedStartTime.start_time, eventUpdatedStartTime.end_time)),
                            m_ok: 0,
                            m_expire_date: that._getExpireDate(),
                            AD: eventUpdatedStartTime.start_time,
                            AP: eventUpdatedStartTime.end_time,
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true;
                    }
                    if (!that.canBeAdded(myGameData.AD, myGameData.AP)) {
                        return;
                    }
                    matchDay = that._getMatchDay(that._getMatchDayFunc(myGameData.AD, myGameData.AP));
                    if ((that._noDuelTournaments[myGameData.labl_id] != null) && that._noDuelTournaments[myGameData.labl_id].m_ok === 0) {
                        return;
                    }
                    if (matchDay > 0) {
                        if (matchDay !== myGameData.m_day) {
                            myGameData.m_day = matchDay;
                            changed = true;
                        }
                    } else if (matchDay === 0 && myGameData.m_day > 0) {
                        myGameData = {
                            sport_id: myGameData.sport_id,
                            labl_id: myGameData.labl_id,
                            m_day: 0,
                            m_ok: 0,
                            m_expire_date: myGameData.m_expire_date,
                            AD: myGameData.AD,
                            AP: myGameData.AP,
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true;
                    } else if (matchDay < 0 && myGameData.m_day >= 0) {
                        myGameData.m_day = matchDay;
                        myGameData.m_ok = 0;
                        changed = true;
                    } else if (matchDay < 0 && matchDay !== myGameData.m_day) {
                        myGameData.m_day = matchDay;
                        changed = true;
                    }
                    added = that._addLabel(myGameData.labl_id, labl);
                    if (myGameData.m_ok) {
                        if (added === 1) {
                            lablCountAdded++;
                        }
                        if (added === -1) {
                            myGameData.m_ok = 0;
                            changed = true;
                        }
                    }
                    that._container[hash] = that._jQuery.extend(true, {}, myGameData);
                    if (that._noDuelTournaments[myGameData.labl_id] == null) {
                        that._count++;
                    }
                    if (!update) {
                        return;
                    }
                    if (!dataHolder.hasEvent(hash)) {
                        return;
                    }
                    eventItem = dataHolder.getEvent(hash);
                    mDay = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                    if (mDay === 0) {
                        that._container[hash] = {
                            sport_id: eventItem.getSportId(),
                            labl_id: eventItem.getLeagueId(),
                            m_day: 0,
                            m_ok: 0,
                            m_expire_date: myGameData.m_expire_date,
                            AD: eventItem.getStartUTime(),
                            AP: eventItem.getEndUTime(),
                            noDuel: myGameData.noDuel,
                            mgGroup: myGameData.mgGroup
                        };
                        changed = true;
                    } else {
                        that._container[hash] = eventItem.getData(true);
                        that._container[hash].m_day = mDay;
                        that._container[hash].m_ok = that._isOk(that._container[hash].m_day, that._container[hash].AB);
                        that._container[hash].m_expire_date = myGameData.m_expire_date;
                        that._container[hash].noDuel = myGameData.noDuel;
                        that._container[hash].mgGroup = myGameData.mgGroup;
                        added = that._addLabel(that._container[hash].labl_id);
                        changed = true;
                    }
                    if (that._expired[hash] != null) {
                        that._container[hash].m_expire_date = that._getExpireDate();
                        delete that._expired[hash];
                    }
                };
            })(this));
            if (updateNoduelTournamentMatches) {
                addedPlayers = {};
                maxAddedPlayers = cjs.Api.config.get('app', 'noduel_events', 'mygames');
                dataHandler = this._dic.get('dataEventHolderProxy').getHandler();
                dataHandler.each((function(that) {
                    return function(index, id) {
                        var added, eventItem, labelId, leagueItem;
                        eventItem = this.getItem(id);
                        leagueItem = eventItem.getLeague();
                        labelId = leagueItem.getId();
                        if ((that._noDuelTournaments[labelId] == null) || that._noDuelTournaments[labelId].m_day === 0 || that._noDuelTournaments[labelId].m_ok === 1) {
                            return;
                        }
                        if (addedPlayers[labelId] == null) {
                            addedPlayers[labelId] = 0;
                        }
                        addedPlayers[labelId]++;
                        if (addedPlayers[labelId] === 1) {
                            that._noDuelTournaments[labelId].AD = eventItem.getStartUTime();
                            that._noDuelTournaments[labelId].AP = eventItem.getEndUTime();
                            that._noDuelTournaments[labelId].m_expire_date = that._getExpireDate();
                        }
                        if (addedPlayers[labelId] > maxAddedPlayers) {
                            return;
                        }
                        that._container[id] = eventItem.getData(true);
                        that._container[id].m_ok = 1;
                        that._container[id].noDuel = true;
                        that._container[id].m_day = that._getMatchDay(that._getMatchDayFunc(eventItem.getStartUTime(), eventItem.getEndUTime()));
                        that._container[id].m_expire_date = that._getExpireDate();
                        added = that._addLabel(labelId);
                        return changed = true;
                    };
                })(this));
                for (labelId in addedPlayers) {
                    countAdded = addedPlayers[labelId];
                    if (countAdded) {
                        this._noDuelTournaments[labelId].m_ok = 1;
                    }
                }
            }
            if (!update && lablCountAdded !== lablCount) {
                changed = true;
            }
            if (this._count) {
                this._changeCallbacks.forEach(function(callback) {
                    return typeof callback === "function" ? callback() : void 0;
                });
            }
            if (this._count !== count || changed) {
                return this.store();
            }
        };

        MyGames.prototype.getData = function() {
            var _ret;
            if (!this._loaded) {
                this.load();
            }
            _ret = {};
            this._jQuery.each(this._container, (function(that) {
                return function(hash, myGameData) {
                    if (myGameData.m_ok !== 1) {
                        return;
                    }
                    _ret[hash] = that._jQuery.extend(true, {}, myGameData);
                };
            })(this));
            return _ret;
        };

        MyGames.prototype.getLabels = function() {
            if (!this._loaded) {
                this.load();
            }
            return this._labl;
        };

        MyGames.prototype.getNeededFeeds = function(today) {
            var _keys, _ret, neededFeeds;
            if (!this._loaded) {
                this.load();
            }
            _ret = [];
            _keys = [];
            neededFeeds = (function(that) {
                return function(dataContainer) {
                    that._jQuery.each(dataContainer, (function(that) {
                        return function(hash, myGameData) {
                            var key, ref, sportId, valid;
                            valid = true;
                            if (!(myGameData.m_ok === 0 || !(valid = that._isMyGameDataValid(myGameData)))) {
                                return;
                            }
                            if (!valid) {
                                that._expired[hash] = true;
                            }
                            if (today === 1) {
                                if (myGameData.m_day !== 0) {
                                    return;
                                }
                            } else {
                                if (myGameData.m_day === 0) {
                                    return;
                                }
                            }
                            sportId = (ref = that._dic.get('util_sport').getParentSport(myGameData.sport_id)) != null ? ref : myGameData.sport_id;
                            key = sportId + '|' + myGameData.m_day;
                            if (that._jQuery.inArray(key, _keys) !== -1) {
                                return;
                            }
                            _ret.push({
                                sport_id: sportId,
                                day: myGameData.m_day
                            });
                            _keys.push(key);
                        };
                    })(that));
                    return true;
                };
            })(this);
            neededFeeds(this._container);
            neededFeeds(this._noDuelTournaments);
            return _ret;
        };

        MyGames.prototype.store = function(updateStorageTimestamp) {
            var fsDataToStore, fsLablNoduelTournamentsToStore, fsLablToStore, ref;
            if (updateStorageTimestamp == null) {
                updateStorageTimestamp = false;
            }
            this._sports = null;
            this._sports_count = null;
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                this.remoteStore();
            }
            fsDataToStore = JSON.stringify(this._container);
            this._removeUnusedLabels();
            fsLablToStore = JSON.stringify(this._labl);
            fsLablNoduelTournamentsToStore = JSON.stringify(this._noDuelTournaments);
            if (this._storage.get(this._name) === fsDataToStore && this._storage.get(this._name + "_labl") === fsLablToStore && this._storage.get(this._name + "_noduel") === fsLablNoduelTournamentsToStore) {
                return;
            }
            this._storage.store(this._name, fsDataToStore, 2 * 86400, 'self', this._path);
            this._storage.store(this._name + "_labl", fsLablToStore, 2 * 86400, 'self', this._path);
            this._storage.store(this._name + "_noduel", fsLablNoduelTournamentsToStore, 2 * 86400, 'self', this._path);
            if (updateStorageTimestamp) {
                this._setStorageTimestamp();
            }
            return this._changeCallbacks.forEach(function(callback) {
                return typeof callback === "function" ? callback() : void 0;
            });
        };

        MyGames.prototype.addGamesToGroup = function(fsDataIdArr, groupKey, disableStore) {
            var count, fsDataId, groups, j, len;
            if (disableStore == null) {
                disableStore = false;
            }
            groupKey = groupKey.toString();
            count = 0;
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this._container[fsDataId] == null) {
                    continue;
                }
                if (this.isGameFromTournament(fsDataId)) {
                    continue;
                }
                if ((this._container[fsDataId].mgGroup == null) || this._container[fsDataId].mgGroup === '') {
                    this._container[fsDataId].mgGroup = 0;
                }
                groups = this._container[fsDataId].mgGroup.toString().split(',');
                if (this._jQuery.inArray(groupKey, groups) === -1) {
                    groups.push(groupKey);
                    this._container[fsDataId].mgGroup = groups.join(',');
                }
                count++;
            }
            if (count && !disableStore) {
                this.store(true);
            }
        };

        MyGames.prototype.removeGamesFromGroup = function(fsDataIdArr, groupKey) {
            var count, fsDataId, groups, j, len, pos;
            groupKey = groupKey.toString();
            count = 0;
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this._container[fsDataId] == null) {
                    continue;
                }
                if (this.isGameFromTournament(fsDataId)) {
                    continue;
                }
                if ((this._container[fsDataId].mgGroup != null) && this._container[fsDataId].mgGroup !== '') {
                    groups = this._container[fsDataId].mgGroup.toString().split(',');
                    pos = this._jQuery.inArray(groupKey, groups);
                    if (pos !== -1) {
                        groups.splice(pos, 1);
                        this._container[fsDataId].mgGroup = groups.join(',');
                    }
                }
                count++;
            }
            if (count) {
                this.store(true);
            }
        };

        MyGames.prototype.removeLabelFromGroup = function(leagueId, groupKey) {
            var groups, pos;
            groupKey = groupKey.toString();
            if (this._noDuelTournaments[leagueId] == null) {
                return;
            }
            if ((this._noDuelTournaments[leagueId].mgGroup != null) && this._noDuelTournaments[leagueId].mgGroup !== '') {
                groups = this._noDuelTournaments[leagueId].mgGroup.toString().split(',');
                pos = this._jQuery.inArray(groupKey, groups);
                if (pos !== -1) {
                    groups.splice(pos, 1);
                    this._noDuelTournaments[leagueId].mgGroup = groups.join(',');
                    return this.store(true);
                }
            }
        };

        MyGames.prototype.getGameGroup = function(fsDataId) {
            var eventItem, ref;
            if (this.isGameFromTournament(fsDataId)) {
                eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataId);
                return this.getLabelGroup(eventItem.getLeagueId());
            }
            if (!((ref = this._container[fsDataId]) != null ? ref.mgGroup : void 0)) {
                return 0;
            }
            return this._container[fsDataId].mgGroup;
        };

        MyGames.prototype.getGamesGroups = function(fsDataIdArr) {
            var eventItem, fsDataId, group, groups, j, k, leagueId, len, len1, ret;
            ret = {};
            for (j = 0, len = fsDataIdArr.length; j < len; j++) {
                fsDataId = fsDataIdArr[j];
                if (this.isGameFromTournament(fsDataId)) {
                    eventItem = this._dic.get('dataEventHolderProxy').getHolder().getEvent(fsDataId);
                    leagueId = eventItem.getLeagueId();
                    groups = (this._noDuelTournaments[leagueId].mgGroup != null) && this._noDuelTournaments[leagueId].mgGroup !== '' ? this._noDuelTournaments[leagueId].mgGroup : 0;
                } else {
                    if (this._container[fsDataId] == null) {
                        continue;
                    }
                    groups = (this._container[fsDataId].mgGroup != null) && this._container[fsDataId].mgGroup !== '' ? this._container[fsDataId].mgGroup : 0;
                }
                groups = groups.toString().split(',');
                for (k = 0, len1 = groups.length; k < len1; k++) {
                    group = groups[k];
                    if (ret[group] == null) {
                        ret[group] = [];
                    }
                    ret[group].push(fsDataId);
                }
            }
            return ret;
        };

        MyGames.prototype.getLabelGroup = function(fsLablId) {
            var ref;
            if (!((ref = this._noDuelTournaments[fsLablId]) != null ? ref.mgGroup : void 0)) {
                return 0;
            }
            return this._noDuelTournaments[fsLablId].mgGroup;
        };

        MyGames.prototype.getLabelGroups = function(fsLablId) {
            var group, j, len, ref, ref1, ret;
            if (this._noDuelTournaments[fsLablId] == null) {
                return {};
            }
            if (!((ref = this._noDuelTournaments[fsLablId]) != null ? ref.mgGroup : void 0)) {
                return {
                    0: [fsLablId]
                };
            }
            ret = {};
            ref1 = this._noDuelTournaments[fsLablId].mgGroup.toString().split(',');
            for (j = 0, len = ref1.length; j < len; j++) {
                group = ref1[j];
                ret[group] = [fsLablId];
            }
            return ret;
        };

        MyGames.prototype.addLabelToGroup = function(fsLablId, groupKey, disableStore) {
            var groups;
            if (disableStore == null) {
                disableStore = false;
            }
            groupKey = groupKey.toString();
            if (!this.isAddedWholeTournament(fsLablId)) {
                return;
            }
            groups = (this._noDuelTournaments[fsLablId].mgGroup != null) && this._noDuelTournaments[fsLablId].mgGroup !== '' ? this._noDuelTournaments[fsLablId].mgGroup : 0;
            groups = groups.toString().split(',');
            if (this._jQuery.inArray(groupKey, groups) === -1) {
                groups.push(groupKey);
                this._noDuelTournaments[fsLablId].mgGroup = groups.join(',');
            }
            if (!disableStore) {
                return this.store(true);
            }
        };

        MyGames.prototype._setStorageTimestamp = function() {
            if (this._isSyncBetweenTabsAllowed()) {
                this._lastStorageUpdated = (new Date()).getTime();
                return this._storage.store(this._name + "_ts", this._lastStorageUpdated, 2 * 86400, 'self', this._path);
            } else {
                return this._lastStorageUpdated = 0;
            }
        };

        MyGames.prototype._getStorageTimestamp = function() {
            if (!this._isSyncBetweenTabsAllowed()) {
                return 0;
            }
            return parseInt(this._storage.get(this._name + "_ts")) || 0;
        };

        MyGames.prototype.remoteStore = function() {
            return this._remoteStore();
        };

        MyGames.prototype.drop = function() {
            this._container = {};
            this._labl = {};
            this._noDuelTournaments = {};
            return this.store();
        };

        MyGames.prototype._getMatchDay = function(matchDay) {
            if (!(matchDay != null ? matchDay.length : void 0)) {
                return -9999;
            }
            if (this._jQuery.inArray(0, matchDay) !== -1) {
                return 0;
            }
            if (matchDay.length === 1 || matchDay[0] > 0) {
                return matchDay[0];
            }
            return matchDay[matchDay.length - 1];
        };

        MyGames.prototype._addLabel = function(labelIndex, labelData) {
            var leagueHolder;
            if (labelData) {
                if (!labelData.hasOwnProperty(labelIndex)) {
                    return -1;
                }
                if (this._labl.hasOwnProperty(labelIndex)) {
                    return 0;
                }
                this._labl[labelIndex] = this._jQuery.extend(true, {}, labelData[labelIndex]);
                return 1;
            } else {
                leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
                if (!(leagueHolder.hasLeague(labelIndex) && leagueHolder.getLeague(labelIndex).getTitle())) {
                    return -1;
                }
                if (this._labl.hasOwnProperty(labelIndex)) {
                    return 0;
                }
                this._labl[labelIndex] = leagueHolder.getLeague(labelIndex).getData(true);
                return 1;
            }
        };

        MyGames.prototype._isSyncBetweenTabsAllowed = function() {
            var ref;
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                return false;
            }
            return cjs.clientStorage.isDriverAvailable(this._dic.getClass('ClientStorage_Driver_LocalStorage').prototype.DRIVER_NAME) || cjs.clientStorage.isDriverAvailable(this._dic.getClass('ClientStorage_Driver_LocalCookie').prototype.DRIVER_NAME);
        };

        MyGames.prototype._reloadStorageIfSyncNeeded = function() {
            var ref, storageTimestamp;
            if (!this._isSyncBetweenTabsAllowed()) {
                return false;
            }
            storageTimestamp = this._getStorageTimestamp();
            if (this._lastStorageUpdated === storageTimestamp) {
                return false;
            }
            this._lastStorageUpdated = storageTimestamp;
            this.load(false, true);
            if ((ref = this._lsid) != null ? ref.loggedIn() : void 0) {
                this.remoteStore();
            }
            return true;
        };

        MyGames.prototype._startStorageSyncTimer = function(timeout) {
            if (timeout == null) {
                timeout = 500;
            }
            if (!this._isSyncBetweenTabsAllowed()) {
                return;
            }
            if (this._syncTimeoutId) {
                clearTimeout(this._syncTimeoutId);
            }
            return this._syncTimeoutId = setTimeout((function(_this) {
                return function(timeout) {
                    return function() {
                        if (_this._reloadStorageIfSyncNeeded()) {
                            _this._lsid._runCallback('dataSyncChange/' + _this.LSID_DATA_KEY);
                        }
                        return _this._startStorageSyncTimer(timeout);
                    };
                };
            })(this)(timeout), timeout);
        };

        MyGames.prototype._redrawLivescore = function() {
            this._runLocalStorageSyncCB();
            sort_fs_data(this._dic.get('util_enviroment').getFsDetail() === {});
            return this._callReactUpdates(true);
        };

        MyGames.prototype._runLocalStorageSyncCB = function() {
            return typeof this._localStorageSyncCb === "function" ? this._localStorageSyncCb() : void 0;
        };

        MyGames.prototype.registerLocalStorageSyncCB = function(_localStorageSyncCb) {
            this._localStorageSyncCb = _localStorageSyncCb;
        };

        MyGames.prototype._removeUnusedLabels = function() {
            var gameData, gameId, labelData, labelId, ref, ref1, results, usedLabels;
            usedLabels = {};
            ref = this._container;
            for (gameId in ref) {
                gameData = ref[gameId];
                if (gameData.labl_id != null) {
                    usedLabels[gameData.labl_id] = 1;
                }
            }
            ref1 = this._noDuelTournaments;
            for (labelId in ref1) {
                labelData = ref1[labelId];
                usedLabels[labelId] = 1;
            }
            results = [];
            for (labelId in this._labl) {
                if (usedLabels[labelId] == null) {
                    results.push(delete this._labl[labelId]);
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };

        MyGames.prototype._syncWithLsId = function(myGamesData, noduelLablData) {
            var data, gameIndex, lablData, lablIndex, lsidMygamesData, lsidNoduelLablData, lsiddata, myGameData, ref, ref1, results;
            if (!((ref = this._lsid) != null ? ref.loggedIn() : void 0)) {
                return;
            }
            lsidMygamesData = this._lsid.getData(this.LSID_DATA_KEY);
            lsiddata = (ref1 = lsidMygamesData != null ? lsidMygamesData.data : void 0) != null ? ref1 : {};
            lsidNoduelLablData = (lsidMygamesData != null ? lsidMygamesData.noduel : void 0) != null ? lsidMygamesData.noduel : {};
            for (lablIndex in noduelLablData) {
                data = noduelLablData[lablIndex];
                if (!lsidNoduelLablData.hasOwnProperty(lablIndex)) {
                    delete noduelLablData[lablIndex];
                }
            }
            for (lablIndex in lsidNoduelLablData) {
                data = lsidNoduelLablData[lablIndex];
                if (!noduelLablData.hasOwnProperty(lablIndex)) {
                    lablData = {
                        sport_id: parseInt(lablIndex.replace(/([0-9]+)_[a-zA-Z0-9]{8}/, '$1')),
                        m_day: this._getMatchDay(this._getMatchDayFunc(data.AD, data.AP)),
                        AD: data.AD,
                        m_ok: 0
                    };
                    if (data.AP) {
                        lablData.AP = data.AP;
                    }
                    noduelLablData[lablIndex] = lablData;
                }
                noduelLablData[lablIndex].mgGroup = data.MG;
            }
            for (gameIndex in myGamesData) {
                data = myGamesData[gameIndex];
                if (!lsiddata.hasOwnProperty(gameIndex)) {
                    delete myGamesData[gameIndex];
                }
            }
            results = [];
            for (gameIndex in lsiddata) {
                data = lsiddata[gameIndex];
                if (!myGamesData.hasOwnProperty(gameIndex)) {
                    myGameData = {
                        sport_id: parseInt(gameIndex.replace(/g_([0-9]+)_[a-zA-Z0-9]{8}/, '$1')),
                        m_day: 0,
                        m_ok: 0,
                        AD: data.AD,
                        AP: null
                    };
                    if (data.AP) {
                        myGameData.AP = data.AP;
                    }
                    if (data.labl_id) {
                        myGameData.labl_id = data.labl_id;
                    }
                    if (data.LA) {
                        myGameData.labl_id = data.LA;
                    }
                    myGameData.noDuel = data.LA != null;
                    myGameData.mgGroup = data.MG;
                    results.push(myGamesData[gameIndex] = myGameData);
                } else {
                    results.push(myGamesData[gameIndex].mgGroup = data.MG);
                }
            }
            return results;
        };

        MyGames.prototype._remoteStoreChanges = function(getCountOnly) {
            var count, data, dataToStore, gameIndex, labelIndex, localGroup, lsidMygames, lsidMygamesData, lsidNoduelLablData, ref, ref1, ref2, remoteGroup;
            if (getCountOnly == null) {
                getCountOnly = false;
            }
            count = 0;
            lsidMygames = this._lsid.getData(this.LSID_DATA_KEY);
            lsidMygamesData = (ref = lsidMygames != null ? lsidMygames.data : void 0) != null ? ref : {};
            lsidNoduelLablData = (lsidMygames != null ? lsidMygames.noduel : void 0) != null ? lsidMygames.noduel : {};
            ref1 = this._noDuelTournaments;
            for (labelIndex in ref1) {
                data = ref1[labelIndex];
                if (lsidNoduelLablData.hasOwnProperty(labelIndex)) {
                    remoteGroup = lsidNoduelLablData[labelIndex].MG || 0;
                    localGroup = data.mgGroup || 0;
                    if (remoteGroup === localGroup) {
                        continue;
                    }
                }
                count++;
                if (!getCountOnly) {
                    dataToStore = {
                        AD: data.AD
                    };
                    if (data.AP) {
                        dataToStore.AP = data.AP;
                    }
                    if (data.mgGroup) {
                        dataToStore.MG = data.mgGroup;
                    }
                    this._lsid.storeData(dataToStore, this.LSID_DATA_KEY + '.noduel.' + labelIndex);
                }
            }
            for (labelIndex in lsidNoduelLablData) {
                data = lsidNoduelLablData[labelIndex];
                if (!this._noDuelTournaments.hasOwnProperty(labelIndex)) {
                    count++;
                    if (!getCountOnly) {
                        this._lsid.removeData(this.LSID_DATA_KEY + '.noduel.' + labelIndex);
                    }
                }
            }
            ref2 = this._container;
            for (gameIndex in ref2) {
                data = ref2[gameIndex];
                if (lsidMygamesData.hasOwnProperty(gameIndex)) {
                    remoteGroup = lsidMygamesData[gameIndex].MG || 0;
                    localGroup = data.mgGroup || 0;
                    if (remoteGroup === localGroup) {
                        continue;
                    }
                }
                count++;
                if (!getCountOnly) {
                    dataToStore = {
                        AD: data.AD
                    };
                    if (data.noDuel || (this._noDuelTournaments[data.labl_id] != null)) {
                        dataToStore.LA = data.labl_id;
                    }
                    if (data.mgGroup != null) {
                        dataToStore.MG = data.mgGroup;
                    }
                    if (data.AP) {
                        dataToStore.AP = data.AP;
                    }
                    this._lsid.storeData(dataToStore, this.LSID_DATA_KEY + '.data.' + gameIndex);
                }
            }
            for (gameIndex in lsidMygamesData) {
                data = lsidMygamesData[gameIndex];
                if (!this._container.hasOwnProperty(gameIndex)) {
                    count++;
                    if (!getCountOnly) {
                        this._lsid.removeData(this.LSID_DATA_KEY + '.data.' + gameIndex);
                    }
                }
            }
            if (getCountOnly) {
                return count;
            }
            return count;
        };

        MyGames.prototype._remoteStore = function() {
            var changes, data, dataToStore, gameIndex, labelIndex, ref, ref1;
            changes = this._remoteStoreChanges(true);
            if (changes === 0) {
                return;
            }
            if (changes > 1) {
                dataToStore = {};
                ref = this._container;
                for (gameIndex in ref) {
                    data = ref[gameIndex];
                    if (!dataToStore.data) {
                        dataToStore.data = {};
                    }
                    dataToStore.data[gameIndex] = {
                        AD: data.AD
                    };
                    if (data.noDuel || (this._noDuelTournaments[data.labl_id] != null)) {
                        dataToStore.data[gameIndex].LA = data.labl_id;
                    }
                    if (data.AP) {
                        dataToStore.data[gameIndex].AP = data.AP;
                    }
                    if (data.mgGroup != null) {
                        dataToStore.data[gameIndex].MG = data.mgGroup;
                    }
                }
                ref1 = this._noDuelTournaments;
                for (labelIndex in ref1) {
                    data = ref1[labelIndex];
                    if (!dataToStore.noduel) {
                        dataToStore.noduel = {};
                    }
                    dataToStore.noduel[labelIndex] = {
                        AD: data.AD
                    };
                    if (data.AP) {
                        dataToStore.noduel[labelIndex].AP = data.AP;
                    }
                    if (data.mgGroup != null) {
                        dataToStore.noduel[labelIndex].MG = data.mgGroup;
                    }
                }
                if (dataToStore.noduel || dataToStore.data) {
                    return this._lsid.storeMergedData(dataToStore, this.LSID_DATA_KEY);
                } else {
                    return this._lsid.removeData(this.LSID_DATA_KEY);
                }
            } else {
                return this._remoteStoreChanges();
            }
        };

        MyGames.prototype._saveStats = function(labelId, eventId) {
            var dataToSend, leagueHolder, leagueItem;
            if (!(this._cfg.fs_stats_enable === true && this._cfg.fs_stats_url_mygames)) {
                return;
            }
            leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
            if (!leagueHolder.hasLeague(labelId)) {
                return;
            }
            leagueItem = leagueHolder.getLeague(labelId);
            dataToSend = {
                sport_id: leagueItem.getSportId(),
                project_id: this._projectId,
                tournament_stage_id: leagueItem.getTournamentStageId()
            };
            if (eventId) {
                dataToSend.event_id = eventId;
            }
            return this._jQuery.ajax({
                url: location.protocol + '//' + this._cfg.fs_stats_url_mygames,
                data: dataToSend,
                dataType: 'jsonp',
                jsonpCallback: 'jsonp_cb'
            });
        };

        MyGames.prototype._leagueHasMatches = function(labelId, myGamesData) {
            var fsDataIndex, myGameData;
            for (fsDataIndex in myGamesData) {
                myGameData = myGamesData[fsDataIndex];
                if (myGameData.labl_id === labelId) {
                    return true;
                }
            }
            return false;
        };

        MyGames.prototype._cleanLabelId = function(lablId) {
            return lablId.replace(/(.*)-.*/, '$1');
        };

        MyGames.prototype.getCategory = function() {
            return this.CATEGORY;
        };

        MyGames.prototype._callReactUpdates = function(reloadContent) {
            if (reloadContent == null) {
                reloadContent = false;
            }
            return cjs.Api.loader.get('react').call((function(_this) {
                return function(reactCalls) {
                    reactCalls.reloadMyGamesTabCounter();
                    if (reloadContent) {
                        reactCalls.forceRedrawTabContent(category);
                        reactCalls.reloadStaticContent();
                    }
                    if (_this._dic.exists('myTeams')) {
                        return _this._dic.get('myTeams').callReactUpdates();
                    }
                };
            })(this));
        };

        return MyGames;

    })();

    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).MyGames == null) {
            base.MyGames = MyGames;
        }
    } else {
        if (exports.MyGames == null) {
            exports.MyGames = MyGames;
        }
    }

}).call(this);
(function() {
    var MyGamesGroups, ref,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    MyGamesGroups = (function() {
        MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY = 'mg_infobox';

        MyGamesGroups.prototype.INFO_BOX_TTL = 90 * 24 * 60 * 60;

        function MyGamesGroups(_mygamesObj, _conf, _categoryGetter, _clientStorage, _tooltipGetter, _jQuery, _utilTrans) {
            this._mygamesObj = _mygamesObj;
            this._conf = _conf;
            this._categoryGetter = _categoryGetter != null ? _categoryGetter : function() {
                return category;
            };
            this._clientStorage = _clientStorage != null ? _clientStorage : clientStorage;
            this._tooltipGetter = _tooltipGetter != null ? _tooltipGetter : function() {
                return tt;
            };
            this._jQuery = _jQuery != null ? _jQuery : $;
            this._utilTrans = _utilTrans != null ? _utilTrans : cjs.dic.get('utilTrans');
            this._utilConfig = cjs.Api.config;
            this._listHidden = true;
            this._labelIndexToGroupKeyMap = {};
            this._temporaryDisabled = false;
            this._lastUsedDropDownMenuJqElementData = null;
        }

        MyGamesGroups.prototype.setTemporaryDisabled = function(value) {
            return this._temporaryDisabled = value;
        };

        MyGamesGroups.prototype.getHeaderDropDownHtml = function(fsLabelIndex) {
            var groupKey;
            if (!this.showOnPage()) {
                return '';
            }
            if (this._mygamesObj.isAddedWholeTournament(fsLabelIndex)) {
                groupKey = this._mygamesObj.getLabelGroup(fsLabelIndex);
            } else {
                groupKey = this._labelIndexToGroupKeyMap[fsLabelIndex];
            }
            return this._getDropDown('l:' + fsLabelIndex, groupKey);
        };

        MyGamesGroups.prototype.reset = function() {
            this._listHidden = true;
            this.setTemporaryDisabled(false);
            return this._setLastUsedDropDownMenuElementData(null);
        };

        MyGamesGroups.prototype.registerEvents = function() {
            var $on, dropDownSelector;
            if (!this._utilConfig.get('app', 'mygames', 'groups', 'enable')) {
                return;
            }
            $on = this._jQuery("div#fs, div#fs-results, div#fs-summary-results, div#fs-fixtures, div#fs-summary-fixtures");
            dropDownSelector = 'div.mg_dropdown';
            $on.on("click", "table " + dropDownSelector, (function(that) {
                return function(event) {
                    var $table, $target, $targetParent, $this, elementData;
                    $this = that._jQuery(this);
                    that._showOrHideDropDownList($this);
                    $target = that._jQuery(event.target);
                    $targetParent = $target.closest('div');
                    elementData = null;
                    if (!($target.is('div.move') || $target.is('div.copy') || $targetParent.is('div.move') || $targetParent.is('div.copy'))) {
                        $table = $this.closest('table');
                        elementData = {
                            'dataContext': $this.attr('data-context'),
                            'elementSelector': dropDownSelector,
                            'dataGroup': $table.attr('data-group'),
                            'groupClass': $table.attr('class')
                        };
                    }
                    return that._setLastUsedDropDownMenuElementData(elementData);
                };
            })(this));
            $on.on("click", "table div.mg_dropdown ul li div", (function(that) {
                return function(event) {
                    return that._dropDownItemListCallback.call(that, that._jQuery(this));
                };
            })(this));
            return $on.on("mouseenter", "table div.mg_dropdown_wrapper", (function(that) {
                return function(event) {
                    return that._jQuery(this).attr("title", that._utilTrans.translate('TRANS_MY_GAMES_SELECT_GROUP'));
                };
            })(this));
        };

        MyGamesGroups.prototype.showOnPage = function() {
            return this._utilConfig.get('app', 'mygames', 'groups', 'enable') && this._categoryGetter() === 5 && this._conf.mygamesGroups === true && !this._temporaryDisabled;
        };

        MyGamesGroups.prototype.getGameGroup = function(fsDataIndex) {
            if (!this.showOnPage()) {
                return 0;
            }
            return this._mygamesObj.getGameGroup(fsDataIndex);
        };

        MyGamesGroups.prototype.getGroupInfoBox = function() {
            var infoBoxHtml;
            if (!(this._utilConfig.get('app', 'mygames', 'groups', 'enable') && this._categoryGetter() === 5)) {
                return '';
            }
            if (this._conf.mygamesGroups === true) {
                return '';
            }
            if (this._clientStorage.get(MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY) === "1") {
                return '';
            }
            infoBoxHtml = "<div class=\"mg_group_info_box\"> <div class=\"mg_group_info_box_content\"> " + (this._utilTrans.translate('TRANS_MY_GAMES_GROUP_INFO_PART1')) + "<br /> <a href=\"#\" onclick=\"cjs.livescoreSettings.show(); return false;\">" + (this._utilTrans.translate('TRANS_MY_GAMES_GROUP_INFO_PART2')) + "</a> </div> <a class=\"mg_group_info_close\" href=\"#\" onclick=\"cjs.mygamesGroups.closeInfoBox(); return false;\"></a> </div>";
            return infoBoxHtml;
        };

        MyGamesGroups.prototype.closeInfoBox = function() {
            this._jQuery('div.mg_group_info_box').remove();
            return this._clientStorage.store(MyGamesGroups.prototype.INFO_BOX_STORAGE_KEY, "1", MyGamesGroups.prototype.INFO_BOX_TTL);
        };

        MyGamesGroups.prototype.getGroupValue = function(groupKey) {
            return this._keyToValue(groupKey);
        };

        MyGamesGroups.prototype.showLastUsedDropDownMenu = function() {
            if (this._listHidden) {
                return;
            }
            return setTimeout((function(_this) {
                return function() {
                    var $element, ed, selector;
                    ed = _this._getLastUsedDropDownMenuElementData();
                    if (ed != null) {
                        selector = "table." + ed.groupClass + "[data-group='" + ed.dataGroup + "']";
                        selector += " " + ed.elementSelector + "[data-context='" + ed.dataContext + "']";
                        $element = _this._jQuery(selector);
                        if ($element.length) {
                            return _this._showOrHideDropDownList($element);
                        }
                    }
                };
            })(this), 0);
        };

        MyGamesGroups.prototype._dropDownItemListCallback = function($element) {
            var $contextElement, $currentValueElement, $elements, changed, contextId, contextType, gamesToChange, groupKey, groupValue, oldGroup, ref;
            $contextElement = $element.parent().parent().parent();
            ref = $contextElement.data('context').split(':'), contextType = ref[0], contextId = ref[1];
            groupKey = $element.parent().data('key');
            groupValue = this._keyToValue(groupKey);
            changed = false;
            $currentValueElement = $contextElement.find('.mg_dropdown_selected');
            oldGroup = this._valueToKey($currentValueElement.html());
            if ($currentValueElement.html() === (groupValue + "")) {
                return;
            }
            if (contextType === 'g') {
                $currentValueElement.html(groupValue);
                if ($element.data('action') === 'move') {
                    this._mygamesObj.addGamesToGroup([contextId], groupKey, true);
                    this._mygamesObj.removeGamesFromGroup([contextId], oldGroup);
                } else {
                    this._mygamesObj.addGamesToGroup([contextId], groupKey);
                }
                changed = true;
            }
            if (contextType === 'l') {
                $currentValueElement.html(groupValue);
                if (this._mygamesObj.isAddedWholeTournament(contextId)) {
                    if ($element.data('action') === 'move') {
                        this._mygamesObj.addLabelToGroup(contextId, groupKey, true);
                        this._mygamesObj.removeLabelFromGroup(contextId, oldGroup);
                    } else {
                        this._mygamesObj.addLabelToGroup(contextId, groupKey);
                    }
                } else {
                    $elements = $contextElement.closest('thead').next('tbody').find('tr .mg_dropdown');
                    $elements.find('.mg_dropdown_selected').html(groupValue);
                    gamesToChange = $elements.map(function(i, el) {
                        return $(el).data('context').split(':')[1];
                    }).get();
                    if ($element.data('action') === 'move') {
                        this._mygamesObj.addGamesToGroup(gamesToChange, groupKey, true);
                        this._mygamesObj.removeGamesFromGroup(gamesToChange, oldGroup);
                    } else {
                        this._mygamesObj.addGamesToGroup(gamesToChange, groupKey);
                    }
                }
                changed = true;
            }
            if (changed) {
                return this.reset();
            }
        };

        MyGamesGroups.prototype._isDropDownListHidden = function() {
            return this._listHidden;
        };

        MyGamesGroups.prototype._hideDropDownList = function() {
            var $list;
            this._listHidden = true;
            $list = this._jQuery('#mg_dropdown_list');
            $list.hide();
            return $list.parent().removeClass('list_open');
        };

        MyGamesGroups.prototype._showDropDownList = function() {
            var $list;
            this._listHidden = false;
            $list = this._jQuery('#mg_dropdown_list');
            $list.show();
            return $list.parent().addClass('list_open');
        };

        MyGamesGroups.prototype._showOrHideDropDownList = function($element) {
            var hasDropDownList;
            if (typeof this._tooltipGetter === "function") {
                this._tooltipGetter().hide_all();
            }
            hasDropDownList = $element.find('#mg_dropdown_list').length === 1;
            if (hasDropDownList && !this._isDropDownListHidden()) {
                this._hideDropDownList();
                return;
            } else if (hasDropDownList) {
                this._showDropDownList();
                return;
            }
            this._hideDropDownList();
            $element.append(this._getDropDownList());
            return this._showDropDownList();
        };

        MyGamesGroups.prototype._getDropDownList = function() {
            var i, itemsHtml, j;
            if (!this._groupListElement) {
                itemsHtml = "";
                itemsHtml += "<li><div class=\"move\"><span>" + (this._utilTrans.translate('TRANS_MY_GAMES_MOVE_TO')) + "</span></div><div class=\"copy\"><span>" + (this._utilTrans.translate('TRANS_MY_GAMES_COPY_TO')) + "</span></div></li>";
                for (i = j = 0; j <= 9; i = ++j) {
                    itemsHtml += "<li data-key=\"" + i + "\"><div class=\"move\" data-action=\"move\"><span>" + (this._keyToValue(i)) + "</span></div><div class=\"copy\" data-action=\"copy\"><span>" + (this._keyToValue(i)) + "</span></div></li>";
                }
                this._groupListElement = this._jQuery('<ul>', {
                    "class": 'mg_dropdown_list',
                    id: 'mg_dropdown_list',
                    style: 'display: none',
                    html: itemsHtml
                });
                this._listHidden = true;
            }
            return this._groupListElement;
        };

        MyGamesGroups.prototype._getDropDown = function(context, selectedKey) {
            if (selectedKey == null) {
                selectedKey = '-';
            }
            return '<div data-context="' + context + '" class="mg_dropdown"><div class="mg_dropdown_wrapper"><span class="mg_dropdown_selected">' + this._keyToValue(selectedKey) + '</span><span class="down_arrow"></span></div></div>';
        };

        MyGamesGroups.prototype._keyToValue = function(key) {
            if (!key) {
                return '-';
            }
            return key;
        };

        MyGamesGroups.prototype._valueToKey = function(value) {
            if (value === '-') {
                return 0;
            }
            value = parseInt(value);
            if (indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], value) >= 0) {
                return value;
            }
            return 0;
        };

        MyGamesGroups.prototype._setLastUsedDropDownMenuElementData = function(data) {
            return this._lastUsedDropDownMenuJqElementData = data;
        };

        MyGamesGroups.prototype._getLastUsedDropDownMenuElementData = function() {
            return this._lastUsedDropDownMenuJqElementData;
        };

        return MyGamesGroups;

    })();

    if ((ref = typeof window !== "undefined" && window !== null ? window : global) != null) {
        ref.cjs.MyGamesGroups = MyGamesGroups;
    }

}).call(this);
(function() {
    var WindowManager;

    WindowManager = (function() {
        function WindowManager(_$, utilTrans, util_enviroment) {
            this._$ = _$;
            this.utilTrans = utilTrans;
            this.util_enviroment = util_enviroment;
            this._dialogAutocloseTimeout = null;
            this._elementId = 'ls-manager';
            this._dialogPositionTop = 200;
            this._$((function(wm) {
                return function() {
                    return wm._$(window).bind('keyup', function(e) {
                        if (e.keyCode === 27) {
                            return wm.hideDialog();
                        }
                    });
                };
            })(this));
        }

        WindowManager.prototype.trans = function(key) {
            var ref;
            return (ref = this.utilTrans.translate(key)) != null ? ref : "[X]" + key;
        };

        WindowManager.prototype.setHigherTooltipZIndex = function(value) {
            var ref;
            if (value == null) {
                value = '2000';
            }
            return (ref = this.util_enviroment.getTooltipObject()) != null ? ref.setZIndex(value) : void 0;
        };

        WindowManager.prototype.setOnHideDialogCallback = function(_onHideDialogCallback) {
            this._onHideDialogCallback = _onHideDialogCallback != null ? _onHideDialogCallback : function() {};
        };

        WindowManager.prototype.getElementId = function() {
            return this._elementId;
        };

        WindowManager.prototype.showMessage = function(msg, err, time, animTime) {
            var message, msgDiv;
            if (err == null) {
                err = false;
            }
            if (time == null) {
                time = 4;
            }
            if (animTime == null) {
                animTime = 0.2;
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            if (err) {
                message.addClass("err");
            }
            message.html(msg);
            msgDiv.append(message);
            return this.showDialog(msgDiv, null, time);
        };

        WindowManager.prototype.showDialog = function(content, callback, autoCloseTime) {
            var close, contentWrap, contentWrapClone, dialogLeft, doneCallback, hide, mask, myWindow, myWindowClone;
            if (content == null) {
                content = "";
            }
            if (callback == null) {
                callback = null;
            }
            if (autoCloseTime == null) {
                autoCloseTime = null;
            }
            doneCallback = (function(wm) {
                return function() {
                    if (typeof callback === "function") {
                        callback();
                    }
                    return wm.formFocus(wm._$("#" + wm._elementId + "-window div.selected form"));
                };
            })(this);
            myWindow = this._$("#" + this._elementId + "-window");
            close = "<a id=\"" + this._elementId + "-window-close\" class=\"close\" href=\"#\" title=\"" + (this.trans('TRANS_CLOSE_WINDOW')) + "\"></a>";
            hide = (function(wm) {
                return function(e) {
                    if (e != null) {
                        e.preventDefault();
                    }
                    wm.hideDialog();
                    return wm.hideLoading;
                };
            })(this);
            clearTimeout(this._dialogAutocloseTimeout);
            if (autoCloseTime) {
                this._dialogAutocloseTimeout = setTimeout(hide, autoCloseTime * 1000);
            }
            if (myWindow.length) {
                myWindowClone = myWindow.clone();
                myWindowClone.css({
                    'visibility': 'hidden'
                });
                contentWrapClone = myWindowClone.children(".content-wrap");
                contentWrapClone.html(content);
                contentWrapClone.css({
                    'opacity': '0'
                });
                contentWrap = myWindow.children(".content-wrap");
                contentWrap.css({
                    'width': contentWrap.width(),
                    'height': contentWrap.height()
                });
                contentWrap.animate({
                    'opacity': '0'
                }, function() {
                    return myWindow.animate({
                        'left': dialogLeft
                    });
                });
                $('body').append(myWindowClone);
                dialogLeft = (contentWrap.width() - contentWrapClone.width()) / 2;
                dialogLeft = "+=" + dialogLeft;
                return contentWrap.animate({
                    'height': contentWrapClone.height(),
                    'width': contentWrapClone.width()
                }, (function(wm) {
                    return function() {
                        wm._$(this).replaceWith(contentWrapClone);
                        myWindowClone.remove();
                        contentWrapClone.animate({
                            'opacity': '1'
                        });
                        doneCallback();
                        return wm.fixedDialog();
                    };
                })(this));
            } else {
                mask = this._$(document.createElement('div'));
                mask.attr({
                    'id': this._elementId + "-window-mask",
                    'class': "ls-manager-window-mask"
                });
                this._$('body').prepend(mask);
                myWindow = this._$(document.createElement('div'));
                myWindow.attr({
                    'id': this._elementId + "-window",
                    'class': "ls-manager-window"
                });
                contentWrap = document.createElement('div');
                this._$(contentWrap).addClass('content-wrap').html(content);
                myWindow.append(close);
                myWindow.append(contentWrap);
                this._$('body').prepend(myWindow);
                this.repositionDialog();
                myWindow.css({
                    'opacity': '0'
                });
                myWindow.show();
                mask.fadeTo(200, 0.6, (function(wm) {
                    return function() {
                        doneCallback();
                        return myWindow.animate({
                            'opacity': '1'
                        }, 300, function() {
                            return wm.fixedDialog();
                        });
                    };
                })(this));
                mask.click(hide);
                return myWindow.find('.close').click(hide);
            }
        };

        WindowManager.prototype.repositionDialog = function() {
            var headerEl, headerTop, myWindow;
            if (this._repositionDialogBinded == null) {
                this._$(window).resize((function(myObj) {
                    return function() {
                        return myObj.repositionDialog();
                    };
                })(this));
            }
            this._repositionDialogBinded = true;
            headerTop = this._dialogPositionTop;
            headerEl = this._$('.header__content');
            if (headerEl.length) {
                headerTop = headerEl.offset().top + headerEl.height();
            }
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.css({
                'top': headerTop,
                'left': Math.max(this._$('body').width() / 2 - myWindow.width() / 2, 0)
            });
            return this.fixedDialog();
        };

        WindowManager.prototype.fixedDialog = function() {
            var myWindow;
            myWindow = this._$("#" + this._elementId + "-window");
            myWindow.removeClass('long');
            if ((this._$(window).height() < myWindow.height() + 200) || this._$(window).width() < myWindow.width() || /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {
                return myWindow.addClass('long');
            }
        };

        WindowManager.prototype.hideDialog = function() {
            var ref;
            this._repositionDialogBinded = false;
            this._$("#" + this._elementId + "-window").remove();
            this._$("#" + this._elementId + "-window-mask").remove();
            if ((ref = this.util_enviroment.getTooltipObject()) != null) {
                ref.revertZIndex();
            }
            return typeof this._onHideDialogCallback === "function" ? this._onHideDialogCallback() : void 0;
        };

        WindowManager.prototype.showLoading = function() {
            var loading;
            loading = this._$(document.createElement('div'));
            loading.attr('id', this._elementId + "-loading");
            loading.addClass('preload');
            loading.append(this._$(document.createElement('span')).text('Loading ...'));
            return this._$("#" + this._elementId + "-window").prepend(loading);
        };

        WindowManager.prototype.hideLoading = function() {
            return this._$("#" + this._elementId + "-loading").remove();
        };

        WindowManager.prototype.formFocus = function(form) {
            return this._$(form).find('input:not(:disabled)').each((function(jquery) {
                return function() {
                    if (this.type === 'text' || this.type === 'password') {
                        jquery(this).focus();
                        return false;
                    }
                    return true;
                };
            })(this._$));
        };

        WindowManager.prototype.setDialogPositionTop = function(_dialogPositionTop) {
            this._dialogPositionTop = _dialogPositionTop;
        };

        return WindowManager;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('WindowManager', WindowManager, ['windowManager']);

}).call(this);
(function() {
    var SearchWindow_History;

    SearchWindow_History = (function() {
        SearchWindow_History.CLIENT_STORAGE_KEY = 'search_user_history_%LANG%';

        SearchWindow_History.MAX_STORED_ITEMS = 10;

        function SearchWindow_History(clientStorage) {
            this.clientStorage = clientStorage;
            this.utilConfig = cjs.Api.config;
        }

        SearchWindow_History.prototype.getAllItems = function() {
            return this._localStoreRead();
        };

        SearchWindow_History.prototype.getItemData = function(index) {
            var items;
            items = this.getAllItems();
            if (items[index] == null) {
                return null;
            }
            return items[index];
        };

        SearchWindow_History.prototype.storeItem = function(item) {
            return this._localStoreWrite(item);
        };

        SearchWindow_History.prototype._localStoreWrite = function(newItem) {
            var count, data, hash, i, item, len, newHash, storageData;
            storageData = this._localStoreRead();
            data = [];
            newHash = newItem.type + '-' + newItem.id;
            data.push(newItem);
            count = 1;
            for (i = 0, len = storageData.length; i < len; i++) {
                item = storageData[i];
                hash = item.type + '-' + item.id;
                if (hash === newHash) {
                    continue;
                }
                if (count >= SearchWindow_History.MAX_STORED_ITEMS) {
                    break;
                }
                data.push(item);
                count++;
            }
            return this.clientStorage.store(this._getStorageKey(), JSON.stringify(data));
        };

        SearchWindow_History.prototype._localStoreRead = function() {
            var storageData;
            storageData = this.clientStorage.get(this._getStorageKey());
            try {
                storageData = JSON.parse(storageData);
            } catch (error) {}
            if (storageData === null) {
                storageData = [];
            }
            return storageData;
        };

        SearchWindow_History.prototype._getStorageKey = function() {
            return SearchWindow_History.CLIENT_STORAGE_KEY.replace('%LANG%', this.utilConfig.get('app', 'project', 'id'));
        };

        return SearchWindow_History;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow_History', SearchWindow_History);

}).call(this);
(function() {
    var SearchWindow_ProjectHistory;

    SearchWindow_ProjectHistory = (function() {
        SearchWindow_ProjectHistory.URL = 'sl_/';

        SearchWindow_ProjectHistory.CLIENT_STORAGE_KEY = 'search_project_history';

        SearchWindow_ProjectHistory.CLIENT_STORAGE_TTL = 3600;

        function SearchWindow_ProjectHistory(util_enviroment, clientStorage, _$) {
            var storageData;
            this.util_enviroment = util_enviroment;
            this.clientStorage = clientStorage;
            this._$ = _$;
            storageData = this.clientStorage.get(SearchWindow_ProjectHistory.CLIENT_STORAGE_KEY);
            try {
                this._items = JSON.parse(storageData);
            } catch (error) {}
        }

        SearchWindow_ProjectHistory.prototype.getAllItems = function(callback) {
            if (this._items !== null) {
                callback(this._items);
                return;
            }
            return this._loadRemoteData(callback);
        };

        SearchWindow_ProjectHistory.prototype.getItemData = function(index) {
            var ref;
            if (((ref = this._items) != null ? ref[index] : void 0) == null) {
                return null;
            }
            return this._items[index];
        };

        SearchWindow_ProjectHistory.prototype._loadRemoteData = function(callback) {
            var cb, req;
            cb = (function(callback, obj) {
                return function(data) {
                    obj._items = data;
                    return callback(obj._items);
                };
            })(callback, this);
            req = {
                url: this.util_enviroment.getRequestUrl(SearchWindow_ProjectHistory.URL),
                dataType: 'json',
                success: (function(obj, cb) {
                    return function(data, textStatus, jqXHR) {
                        return cb.call(obj, data, jqXHR.status);
                    };
                })(this, cb),
                error: (function(obj, cb) {
                    return function(jqXHR, textStatus, errorThrown) {
                        return cb.call(obj, [], jqXHR.status);
                    };
                })(this, cb)
            };
            return this._$.ajax(req);
        };

        return SearchWindow_ProjectHistory;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow_ProjectHistory', SearchWindow_ProjectHistory);

}).call(this);
(function() {
    var SearchWindow,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    SearchWindow = (function() {
        SearchWindow.MIN_QUERY_CHARS = 3;

        SearchWindow.TIMEOUT = 300;

        SearchWindow.FORM_ELEMENT_QUERY_ID = 'search-form-query';

        SearchWindow.FORM_ELEMENT_SELECT_ID = 'search-form-select';

        SearchWindow.FORM_ELEMENT_SUBMIT_ID = 'search-form-submit-button';

        SearchWindow.RESULTS_ID = 'search-results';

        SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE = 'tournament_templates';

        SearchWindow.RESULT_TYPE_PARTICIPANT = 'participants';

        SearchWindow.STAT_SUBTYPE_TEAM_CLICK = 1;

        SearchWindow.STAT_SUBTYPE_LEAGUE_CLICK = 2;

        function SearchWindow(searchWindowManager, windowManager, utilTrans, util_sport, util_enviroment, util_string, util_url, SearchWindow_History, SearchWindow_ProjectHistory, _$) {
            var dialogTop;
            this.searchWindowManager = searchWindowManager;
            this.windowManager = windowManager;
            this.utilTrans = utilTrans;
            this.util_sport = util_sport;
            this.util_enviroment = util_enviroment;
            this.util_string = util_string;
            this.util_url = util_url;
            this.SearchWindow_History = SearchWindow_History;
            this.SearchWindow_ProjectHistory = SearchWindow_ProjectHistory;
            this._$ = _$;
            if (!this.searchWindowManager) {
                throw Error('SearchWindowManager must be set.');
            }
            this.util_config = cjs.Api.config;
            this._constantsManager = cjs.Api.constantsManager;
            this.searchWindowManager.setOnHideDialogCallback((function(_this) {
                return function() {
                    return _this._isVisible = false;
                };
            })(this));
            this._isVisible = false;
            this._timeoutId = null;
            dialogTop = this.util_config.get('app', 'sphinxsearch', 'dialog', 'top');
            if (dialogTop != null) {
                this.searchWindowManager.setDialogPositionTop(dialogTop);
            }
            this._showResults = true;
            this._registerLinkCallbacks();
            this._requestUrl = this.util_enviroment.getLocation().protocol + '//' + this.util_config.get('app', 'sphinxsearch', 'client_server');
        }

        SearchWindow.prototype.open = function() {
            var callback, content;
            this._init();
            content = this._createContent();
            callback = (function(_this) {
                return function() {
                    _this._bindSearchingQueries();
                    _this.searchWindowManager.setHigherTooltipZIndex();
                    _this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).focus();
                    _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).focus();
                    _this._isVisible = true;
                    return _this.SearchWindow_ProjectHistory.getAllItems(function(data) {
                        var html, index, item, j, len, rows;
                        rows = '';
                        for (index = j = 0, len = data.length; j < len; index = ++j) {
                            item = data[index];
                            rows += _this._createResultRowHtml('P_' + index, item);
                        }
                        if (!rows) {
                            return '';
                        }
                        html = '<div class="search-result-wrapper"><table><thead><tr><th>' + _this.utilTrans.translate('TRANS_SEARCH_MOST_POPULAR_SEARCHES') + '</th></tr></thead><tbody>' + rows + '</tbody></table></div>';
                        return _this._$('#search-results-project-history').html(html);
                    });
                };
            })(this);
            return this.searchWindowManager.showDialog(content, callback);
        };

        SearchWindow.prototype.toggleOpen = function() {
            if (this._isVisible) {
                return this.searchWindowManager.hideDialog();
            } else {
                return this.open();
            }
        };

        SearchWindow.prototype.isVisible = function() {
            return this._isVisible;
        };

        SearchWindow.prototype.showNoLoggedInMessage = function() {
            var $lsidWindow, $lsidWindowMask, $wmWindowMask, base, newTop, newZIndex, wmElementId;
            if (typeof(base = this._loginClient)._showMessage === "function") {
                base._showMessage(this.utilTrans.translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'), true);
            }
            wmElementId = this.searchWindowManager.getElementId();
            $wmWindowMask = this._$("#" + wmElementId + "-window-mask");
            newZIndex = parseInt($wmWindowMask.css('z-index')) + 2;
            $lsidWindowMask = this._$("#lsid-window-mask");
            $lsidWindowMask.css({
                'z-index': "" + newZIndex
            });
            newZIndex += 1;
            $lsidWindow = this._$("#lsid-window");
            newTop = parseInt($lsidWindow.css('top')) + 100;
            return $lsidWindow.css({
                'z-index': "" + newZIndex,
                'top': newTop + "px"
            });
        };

        SearchWindow.prototype.onResponse = function(data) {
            var html;
            if (!this._showResults) {
                return;
            }
            this._data = this._prepareResponseDataToFinalData(data);
            html = this._createResultsHtml();
            return this._setResultsHtml(html);
        };

        SearchWindow.prototype._init = function() {
            this.util_enviroment.getTooltipObject(function() {
                if (!window.tt) {
                    return window.tt = new tooltip();
                }
            });
            this._feedRequest = this.util_enviroment.getFeedRequestObject();
            if (this.util_config.get('app', 'myteams', 'enable')) {
                this._myTeams = this.util_enviroment.getMyTeamsObject(function() {
                    if (cjs.myTeams == null) {
                        window.myTeamsInit(1);
                        return cjs.myTeams.delegateTooltips();
                    }
                });
            }
            if (window.my_leagues_init != null) {
                this._myLeagues = this.util_enviroment.getMyLeaguesObject(function() {
                    if (cjs.myLeagues == null) {
                        window.my_leagues_init(1, {}, true);
                        return cjs.myLeagues.delegateTooltips();
                    }
                });
            }
            return this._loginClient = this.util_enviroment.getLoginClientObject();
        };

        SearchWindow.prototype._bindSearchingQueries = function() {
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('input, keyup').bind('input, keyup', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$(e.currentTarget).val();
                    if (query !== '') {
                        $('#search-results-history, #search-results-project-history').hide();
                    } else {
                        $('#search-results-history, #search-results-project-history').show();
                    }
                    return _this._sendRequest(query, true);
                };
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SUBMIT_ID).unbind('click').bind('click', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).val();
                    return _this._sendRequest(query, true);
                };
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('focus').bind('focus', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper').addClass('has-focus');
                };
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).unbind('blur').bind('blur', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper').removeClass('has-focus');
                };
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('change').bind('change', (function(_this) {
                return function(e) {
                    var query;
                    query = _this._$("#" + SearchWindow.FORM_ELEMENT_QUERY_ID).val();
                    _this._$('#search-input-wrapper .search-input-sport-selected').html(_this._$('#search-form-select option:selected').text());
                    return _this._sendRequest(query);
                };
            })(this));
            this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('mouseenter').bind('mouseenter', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper .search-input-sport-wrapper').addClass('has-hover');
                };
            })(this));
            return this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).unbind('mouseleave').bind('mouseleave', (function(_this) {
                return function(e) {
                    return _this._$('#search-input-wrapper .search-input-sport-wrapper').removeClass('has-hover');
                };
            })(this));
        };

        SearchWindow.prototype._sendRequest = function(query, useTimeout) {
            var requestConfig;
            if (useTimeout == null) {
                useTimeout = false;
            }
            this._showResults = true;
            if (query.length < SearchWindow.MIN_QUERY_CHARS) {
                this._showResults = false;
                this._setResultsHtml(this._getDefaultText());
                return;
            } else if (!/^[^<>\/=\[\]]+$/i.test(query)) {
                return;
            }
            requestConfig = {
                url: this._requestUrl,
                data: {
                    q: encodeURIComponent(query),
                    l: this.util_config.get('app', 'lang', 'dc'),
                    s: this._getSelectedSportId(),
                    f: '1;1',
                    pid: this.util_config.get('app', 'project', 'id'),
                    sid: this.util_enviroment.getProjectTypeId()
                },
                dataType: 'jsonp',
                cache: true,
                jsonp: false
            };
            clearTimeout(this._timeoutId);
            return this._timeoutId = setTimeout((function(_this) {
                return function() {
                    return _this._$.ajax(requestConfig);
                };
            })(this), useTimeout ? SearchWindow.TIMEOUT : 0);
        };

        SearchWindow.prototype._setResultsHtml = function(html) {
            return this._$("#" + SearchWindow.RESULTS_ID).html(html);
        };

        SearchWindow.prototype._getDefaultText = function() {
            return "<div class=\"search-results-inner\" >\n	" + (this.utilTrans.translate('TRANS_SEARCH_DEFAULT_TEXT_EMPTY_QUERY', [String(SearchWindow.MIN_QUERY_CHARS)])) + "\n</div>";
        };

        SearchWindow.prototype._createContent = function() {
            var html;
            html = this._createTabsMenuHtml();
            html += this._createContentHtml();
            return html;
        };

        SearchWindow.prototype._createTabsMenuHtml = function() {
            return "<ul class=\"tabs-menu\">\n	<li class=\"li0 selected\">\n		<span><a class=\"unclickable\" href=\"#\" onclick=\"return false;\">" + (this.utilTrans.translate('TRANS_SEARCH_TITLE')) + "</a></span>\n	</li>\n</ul>";
        };

        SearchWindow.prototype._createContentHtml = function() {
            return "<div class=\"contents\">\n	<div class=\"content\">\n		<form id=\"search-form\" onsubmit=\"return false;\">\n			<div>\n				<div class=\"search-form-label-wrapper\">\n					" + (this._createInputTextHtml()) + "\n				</div>\n			</div>\n		</form>\n		<div id=\"" + SearchWindow.RESULTS_ID + "\">" + (this._getDefaultText()) + "</div>\n		<div id=\"search-results-history\">\n			<div class=\"search-result-wrapper\">" + (this._createHistoryResultsHtml()) + "</div>\n		</div>\n		<div id=\"search-results-project-history\">\n		</div>\n	</div>\n</div>";
        };

        SearchWindow.prototype._createInputTextHtml = function() {
            var defaultValue, placeholderAttr, stylePart;
            defaultValue = this.utilTrans.translate('TRANS_SEARCH_INSERT_TEXT');
            placeholderAttr = 'placeholder="' + defaultValue + '"';
            stylePart = this._getSportsForSelectBox().length === 1 ? ' style="display: none;"' : '';
            return "<div id=\"search-input-wrapper\">\n	<div class=\"search-input-submit\" id=\"" + SearchWindow.FORM_ELEMENT_SUBMIT_ID + "\">\n		" + (this.utilTrans.translate('TRANS_SEARCH_ACTION')) + "\n	</div>\n	<span class=\"search-input-sport-wrapper\"" + stylePart + ">\n		<span class=\"search-input-sport-selected\">\n			" + (this.utilTrans.translate('TRANS_SEARCH_ALL_SPORTS')) + "\n		</span>\n		<span class=\"search-input-sport-downarrow\"></span>\n		" + (this._createSportSelectBoxHtml()) + "\n	</span>\n	<div class=\"search-input-outer\">\n		<div class=\"search-input-inner\">\n			<input id=\"" + SearchWindow.FORM_ELEMENT_QUERY_ID + "\" type=\"text\" " + placeholderAttr + " autofocus=true />\n		</div>\n	</div>\n</div>\n";
        };

        SearchWindow.prototype._createSportSelectBoxHtml = function() {
            var html, j, len, sport, sports;
            sports = this._getSportsForSelectBox();
            html = '<select id="' + SearchWindow.FORM_ELEMENT_SELECT_ID + '">';
            html += '<option value="0" selected="selected">' + this.utilTrans.translate('TRANS_SEARCH_ALL_SPORTS') + '</option>';
            for (j = 0, len = sports.length; j < len; j++) {
                sport = sports[j];
                html += '<option value="' + sport['id'] + '">' + sport['name'] + '</option>';
            }
            html += '</select>';
            return html;
        };

        SearchWindow.prototype._createResultsHtml = function() {
            var html, icon, indexTableTagOpen, indexType, isPlayer, item, j, lastIndexType, lastIsPlayer, lastSportId, len, originalSportName, ref1, ref2, ref3, sortedIndex, sortedIndexes, sportDivTagOpen, sportId, tableHeadTxt, translatedSportName;
            sortedIndexes = this._getSortedIndexes();
            if (!(((ref1 = this._data) != null ? ref1.results : void 0) && this._data.results.length)) {
                return this.utilTrans.translate('TRANS_SEARCH_NO_RESULTS');
            }
            html = '';
            lastSportId = -1;
            lastIndexType = '';
            lastIsPlayer = null;
            sportDivTagOpen = false;
            indexTableTagOpen = false;
            for (j = 0, len = sortedIndexes.length; j < len; j++) {
                sortedIndex = sortedIndexes[j];
                item = this._data.results[sortedIndex.index];
                sportId = item['sport_id'];
                indexType = item['type'];
                isPlayer = (ref2 = item['participant_type_id'], indexOf.call(this._getPlayerParticipantTypes(), ref2) >= 0);
                if (sportId !== lastSportId) {
                    if (indexTableTagOpen) {
                        html += '</tbody></table>';
                    }
                    if (sportDivTagOpen) {
                        html += '</div>';
                    }
                    sportDivTagOpen = true;
                    lastSportId = sportId;
                    lastIndexType = '';
                    originalSportName = this.util_sport.getOriginalNameFromId(sportId);
                    translatedSportName = this.util_sport.getTranslatedName(null, originalSportName);
                    html += '<div class="search-result-wrapper">';
                    if (!(this.util_config.get('app', 'project_type', 'name') === '_ass' && !this.util_sport.isMotorSport(sportId))) {
                        icon = '<div class="sportIcon sportIcon--' + originalSportName + '"></div>';
                        html += '<div class="sport-label ' + originalSportName + '">' + icon + '<span class="sport-icon ' + originalSportName + '"></span>' + translatedSportName + '</div>';
                    }
                }
                if (indexType !== lastIndexType || isPlayer !== lastIsPlayer) {
                    if (indexTableTagOpen) {
                        html += '</tbody></table>';
                    }
                    lastIndexType = indexType;
                    indexTableTagOpen = true;
                    lastIsPlayer = isPlayer;
                    if (indexType === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                        tableHeadTxt = this.utilTrans.translate('TRANS_SEARCH_COMPETITIONS');
                    } else {
                        tableHeadTxt = this.util_enviroment.getSearchParticipantTitle(sportId, isPlayer);
                    }
                    html += '<table><thead><tr><th>' + tableHeadTxt + '</th></tr></thead><tbody>';
                }
                html += this._createResultRowHtml('M_' + sortedIndex.index, item);
            }
            if (indexTableTagOpen) {
                html += '</tbody></table>';
            }
            if (sportDivTagOpen) {
                html += '</div>';
            }
            if (((ref3 = this._data) != null ? ref3.more : void 0) != null) {
                html += '<div class="more-results-wrapper">' + this.utilTrans.translate('TRANS_SEARCH_MORE_RESULTS_AVAILABLE_TEXT') + '</div>';
            }
            return html;
        };

        SearchWindow.prototype._createResultRowHtml = function(ref, indexItemData) {
            var countryName, flagId, indexItemId, indexName, itemTitle, linkUrl, logoUrl, myFavouriteKey, onclickFunc, participantTypeId, ref1, ref2, ref3, ref4, ref5, sportId, toggleIconHtml;
            if (!(indexItemData != null ? indexItemData.id : void 0)) {
                return '';
            }
            indexItemId = indexItemData.id;
            indexName = indexItemData.type;
            sportId = indexItemData.sport_id;
            participantTypeId = indexItemData.participant_type_id;
            logoUrl = (ref1 = indexItemData['logo_url']) != null ? ref1 : null;
            myFavouriteKey = (ref2 = indexItemData['favourite_key']) != null ? ref2 : null;
            flagId = (ref3 = indexItemData['flag_id']) != null ? ref3 : null;
            itemTitle = (ref4 = indexItemData['title']) != null ? ref4 : '';
            countryName = (ref5 = indexItemData['country_name']) != null ? ref5 : '';
            linkUrl = this._createLinkUrl(indexItemId, indexName, participantTypeId);
            toggleIconHtml = '';
            onclickFunc = "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');";
            if (indexName === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                toggleIconHtml = this._createToggleToMyLeaguesHtml(myFavouriteKey, ref);
            } else {
                toggleIconHtml = this._createToggleToMyTeamsHtml(myFavouriteKey, ref);
            }
            if (toggleIconHtml == null) {
                toggleIconHtml = '';
            }
            return '<tr> <td> <div class="cellWrapper"> <a href="' + linkUrl + '" onclick="' + onclickFunc + '">' + this._createFlagOrTeamLogoHtml(logoUrl, flagId, countryName) + '<span>' + itemTitle + '</span> </a>' + toggleIconHtml + '</div> </td> </tr>';
        };

        SearchWindow.prototype._createHistoryResultsHtml = function() {
            var index, item, j, len, ref1, rows;
            rows = '';
            ref1 = this.SearchWindow_History.getAllItems();
            for (index = j = 0, len = ref1.length; j < len; index = ++j) {
                item = ref1[index];
                rows += this._createResultRowHtml('H_' + index, item);
            }
            if (!rows) {
                return '';
            }
            return '<table><thead><tr><th>' + this.utilTrans.translate('TRANS_SEARCH_LAST_SEARCH') + '</th></tr></thead><tbody>' + rows + '</tbody></table>';
        };

        SearchWindow.prototype._createFlagOrTeamLogoHtml = function(logoUrl, flagId, countryName) {
            var title;
            if (logoUrl) {
                return "<span style=\"background-image: url(" + logoUrl + ")\" class=\"team-logo\"></span>";
            } else if (flagId) {
                title = '';
                if (countryName) {
                    title = "title=\"" + countryName + "\"";
                }
                return "<span " + title + " class=\"flag fl_" + flagId + "\"></span>";
            }
            return '';
        };

        SearchWindow.prototype._createToggleToMyTeamsHtml = function(participantKey, ref) {
            var base, noLoggedInCallbackStr;
            if (!(this._myTeams && participantKey)) {
                return '';
            }
            noLoggedInCallbackStr = "function() { cjs.dic.get('SearchWindow').showNoLoggedInMessage(); }";
            return '<div class="tomyteams">' + (typeof(base = this._myTeams).getToggleIcon === "function" ? base.getToggleIcon(participantKey, noLoggedInCallbackStr, null, null, "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');") : void 0) + '</div>';
        };

        SearchWindow.prototype._createToggleToMyLeaguesHtml = function(labelKey, ref) {
            var base, sportId;
            if (!(this._myLeagues && labelKey)) {
                return '';
            }
            sportId = parseInt(labelKey.replace(/([0-9]+)_(.*)/, '$1'));
            if (this.util_sport.isCategorySport(sportId)) {
                labelKey = this._myLeagues.encodeLabelKey(labelKey);
            }
            return typeof(base = this._myLeagues).getToggleIcon === "function" ? base.getToggleIcon(null, labelKey, null, "cjs.dic.get('SearchWindow').linkClickCB('" + ref + "');") : void 0;
        };

        SearchWindow.prototype._createLinkUrl = function(indexItemId, indexName, participantTypeId) {
            var langPart, redirectType, redirectorTypes, url;
            url = this.util_url.getLocationOrigin();
            redirectorTypes = this.util_config.get('app', 'redirector', 'types');
            if (indexName === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE) {
                redirectType = redirectorTypes['tournament_template'];
            } else if (indexName === SearchWindow.RESULT_TYPE_PARTICIPANT) {
                if (indexOf.call(this._getPlayerParticipantTypes(), participantTypeId) >= 0) {
                    redirectType = redirectorTypes['player'];
                } else {
                    redirectType = redirectorTypes['participant'];
                }
            } else {
                return '#';
            }
            if (langPart = this.util_url.getLanguagePart()) {
                url += "/" + langPart;
            }
            url += "/?r=" + redirectType + ":" + indexItemId;
            return url;
        };

        SearchWindow.prototype._getPlayerParticipantTypes = function() {
            var playerParticipantTypes;
            playerParticipantTypes = this._constantsManager.getParticipantTypes();
            return [playerParticipantTypes.PLAYER, playerParticipantTypes.GOALKEEPER, playerParticipantTypes.DEFENDER, playerParticipantTypes.MIDFIELDER, playerParticipantTypes.FORWARD];
        };

        SearchWindow.prototype._getSportsForSelectBox = function() {
            var all, id, ref1, sport, sportName, sports;
            all = [];
            sport = this._constantsManager.getSports();
            sports = this.util_sport.getAllTranslatedSports();
            for (id in sports) {
                sportName = sports[id];
                if (((ref1 = parseInt(id)) === sport.MOTORSPORT_AUTO_RACING || ref1 === sport.MOTORSPORT_MOTO_RACING) || sportName === '') {
                    continue;
                }
                all.push({
                    'id': id,
                    'name': sportName
                });
            }
            all.sort(function(a, b) {
                return a['name'].localeCompare(b['name']);
            });
            return all;
        };

        SearchWindow.prototype.saveStat = function(type, sportId, entryId) {
            var dataToSend, statUrl, subtypeId;
            if (!this.util_config.get('app', 'fs_stats', 'enable')) {
                return;
            }
            statUrl = this.util_config.get('app', 'fs_stats', 'url', 'search_stats');
            subtypeId = SearchWindow['STAT_SUBTYPE_' + type];
            if (!(statUrl && sportId && subtypeId && entryId)) {
                return;
            }
            dataToSend = {
                sport_id: sportId,
                project_id: this.util_config.get('app', 'project', 'id'),
                entry_id: entryId,
                subtype_id: subtypeId
            };
            return this._$.ajax({
                url: location.protocol + '//' + statUrl,
                data: dataToSend,
                dataType: 'jsonp',
                jsonpCallback: 'jsonp_cb'
            });
        };

        SearchWindow.prototype.linkClickCB = function(key) {
            var cb, data, index, j, len, ref1, ref2, results, type;
            key = key + "";
            ref1 = key.split('_'), type = ref1[0], index = ref1[1];
            switch (type) {
                case 'M':
                    if (!((this._data.results[index] != null) && this._data.results[index])) {
                        return;
                    }
                    data = this._data.results[index];
                    break;
                case 'H':
                    data = this.SearchWindow_History.getItemData(index);
                    if ((data != null ? data.id : void 0) == null) {
                        return;
                    }
                    break;
                case 'P':
                    return;
                default:
                    return;
            }
            ref2 = this._linkCB;
            results = [];
            for (j = 0, len = ref2.length; j < len; j++) {
                cb = ref2[j];
                results.push(typeof cb === "function" ? cb(data) : void 0);
            }
            return results;
        };

        SearchWindow.prototype._registerLinkCallbacks = function() {
            this._linkCB = [];
            this._linkCB.push((function(_this) {
                return function(data) {
                    if (data.type === SearchWindow.RESULT_TYPE_PARTICIPANT) {
                        return _this.saveStat('TEAM_CLICK', data.sport_id, data.id);
                    } else {
                        return _this.saveStat('LEAGUE_CLICK', data.sport_id, data.id);
                    }
                };
            })(this));
            return this._linkCB.push((function(_this) {
                return function(data) {
                    return _this.SearchWindow_History.storeItem(data);
                };
            })(this));
        };

        SearchWindow.prototype._getSortedIndexes = function() {
            var i, indexes, item, j, len, rank, ref1, ref2, ref3, sortKey;
            indexes = [];
            if (this._data.results) {
                ref1 = this._data.results;
                for (i = j = 0, len = ref1.length; j < len; i = ++j) {
                    item = ref1[i];
                    sortKey = "S" + this.util_string.lpad(this.util_enviroment.getSearchSportOrder(item.sport_id), 3, 0);
                    sortKey += item.type === SearchWindow.RESULT_TYPE_TOURNAMENT_TEMPLATE ? 1 : 2;
                    sortKey += (ref2 = item.participant_type_id, indexOf.call(this._getPlayerParticipantTypes(), ref2) >= 0) ? 2 : 1;
                    rank = 9999999999 - ((ref3 = item.rank) != null ? ref3 : 0);
                    sortKey += this.util_string.lpad(rank, 10, 0);
                    sortKey += this.util_string.lpad(i, 4, 0);
                    indexes.push({
                        index: i,
                        sortKey: sortKey
                    });
                }
            }
            return indexes.sort(function(a, b) {
                if (a.sortKey === b.sortKey) {
                    return 0;
                } else if (a.sortKey > b.sortKey) {
                    return 1;
                }
                return -1;
            });
        };

        SearchWindow.prototype._prepareResponseDataToFinalData = function(data) {
            var baseImageDataUrl, favouriteKey, id, item, j, len, ref1, replaceSuperTemplateId, superTemplateDefinition;
            baseImageDataUrl = this.util_url.getBaseImageData();
            superTemplateDefinition = this.util_enviroment.getSuperTemplateDefinition();
            replaceSuperTemplateId = function(type, replacePattern, superTemplateId) {
                var ref1;
                if (((ref1 = superTemplateDefinition[superTemplateId]) != null ? ref1[type] : void 0) != null) {
                    return superTemplateDefinition[superTemplateId][type];
                }
                return replacePattern;
            };
            if (data['results'] != null) {
                ref1 = data['results'];
                for (id = j = 0, len = ref1.length; j < len; id = ++j) {
                    item = ref1[id];
                    if ((item['logo_url'] != null) && item['logo_url']) {
                        if (/%%EMPTY_LOGO%%/.test(item['logo_url'])) {
                            item['logo_url'] = item['logo_url'].replace('%%EMPTY_LOGO%%', this.util_url.getEmptyTeamLogo());
                        } else {
                            item['logo_url'] = baseImageDataUrl + item['logo_url'];
                        }
                    }
                    if ((item['favourite_key'] != null) && item['favourite_key']) {
                        favouriteKey = item['favourite_key'].replace(/%%([0-9]+)%%/, function(replacePattern, superTemplateId) {
                            return superTemplateId;
                        });
                        item['favourite_key'] = favouriteKey;
                    }
                    if ((item['flag_id'] != null) && item['flag_id'] && typeof item['flag_id'] === 'string') {
                        item['flag_id'] = item['flag_id'].replace(/%%([0-9]+)%%/, function(replacePattern, superTemplateId) {
                            return replaceSuperTemplateId('flag', replacePattern, superTemplateId);
                        });
                    }
                }
            }
            return data;
        };

        SearchWindow.prototype._getSelectedSportId = function() {
            var sportId, sports;
            sports = this._getSportsForSelectBox();
            if (sports.length === 1) {
                return sports[0].id;
            }
            return sportId = this._$("#" + SearchWindow.FORM_ELEMENT_SELECT_ID).val();
        };

        return SearchWindow;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('SearchWindow', SearchWindow);

}).call(this);
(function() {
    var SearchWindowManager,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    SearchWindowManager = (function(superClass) {
        extend(SearchWindowManager, superClass);

        function SearchWindowManager(_$) {
            this._$ = _$;
            SearchWindowManager.__super__.constructor.call(this, this._$);
            this._elementId = 'ls-search';
        }

        SearchWindowManager.prototype.hideDialog = function() {
            SearchWindowManager.__super__.hideDialog.apply(this, arguments);
            return cjs.dic.get('HighlightWindowManager').changeActive("search", true);
        };

        SearchWindowManager.prototype.showDialog = function(content, callback, autoCloseTime) {
            if (content == null) {
                content = "";
            }
            if (callback == null) {
                callback = null;
            }
            if (autoCloseTime == null) {
                autoCloseTime = null;
            }
            SearchWindowManager.__super__.showDialog.call(this, content, callback, autoCloseTime);
            return cjs.dic.get('HighlightWindowManager').changeActive("search", false);
        };

        return SearchWindowManager;

    })(cjs.dic.getClass('WindowManager'));

    cjs.dic.registerClass('SearchWindowManager', SearchWindowManager, ['searchWindowManager']);

}).call(this);
(function() {
    var LsidWindowManager,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    LsidWindowManager = (function(superClass) {
        extend(LsidWindowManager, superClass);

        function LsidWindowManager(_$) {
            this._$ = _$;
            LsidWindowManager.__super__.constructor.call(this, this._$);
            this._elementId = 'lsid';
        }

        return LsidWindowManager;

    })(cjs.dic.getClass('WindowManager'));

    cjs.dic.registerClass('LsidWindowManager', LsidWindowManager, ['lsidWindowManager']);

}).call(this);
(function() {
    var HighlightWindowManager,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    HighlightWindowManager = (function(superClass) {
        extend(HighlightWindowManager, superClass);

        function HighlightWindowManager(_$, utilTrans, util_enviroment) {
            this._$ = _$;
            this.utilTrans = utilTrans;
            this.util_enviroment = util_enviroment;
            HighlightWindowManager.__super__.constructor.call(this, this._$);
            this.utilConfig = cjs.Api.config;
            this._button = "header__button";
            this._responsiveBreakpoint = this.utilConfig.get('app', 'responsive', 'breakpoint_mobile');
        }

        HighlightWindowManager.prototype._resolveButtonUI = function(modifier, state) {
            var activeClass, modifierClass;
            modifierClass = "." + this._button + "--" + modifier;
            activeClass = this._button + "--active";
            if (state) {
                return this._$(modifierClass).removeClass(activeClass);
            } else {
                return this._$(modifierClass).addClass(activeClass);
            }
        };

        HighlightWindowManager.prototype._stopScroll = function(state) {
            if (state) {
                return this._$("body").addClass("scrollLock");
            } else {
                return this._$("body").removeClass("scrollLock");
            }
        };

        HighlightWindowManager.prototype._shutDownVerticalMenu = function() {
            this._$("body .container__myMenu").removeClass("myMenu--active");
            this._$("body .container__liveTableWrapper").removeClass("container__liveTableWrapper--hidden");
            return this._$(".header__button--switch").removeClass("header__button--active");
        };

        HighlightWindowManager.prototype._shutDownSearch = function() {
            return this._$("body #ls-search-window .close").trigger('click');
        };

        HighlightWindowManager.prototype._shutDownNLI = function() {
            this._$("body #lsid-window .close").trigger('click');
            return this._$(".signAndReg").removeClass("header__button--active");
        };

        HighlightWindowManager.prototype._shutDownLI = function() {
            this._$("body .settings-list").hide();
            return this._$("body #arrow").removeClass("arrow-rotation");
        };

        HighlightWindowManager.prototype._shutDownSettings = function() {
            return this._$("body #lsid-window .close").trigger('click');
        };

        HighlightWindowManager.prototype._shutDownLangBox = function() {
            return this._$("body .header__langBoxWrapper").removeClass("header__langBoxWrapper--active");
        };

        HighlightWindowManager.prototype._shutDownMinorityMenu = function() {
            return window.menuMinorityToggle(true);
        };

        HighlightWindowManager.prototype._resetOthers = function(id, jQ, hwm) {
            var i, len, results, tag, tags;
            this._$ = jQ;
            tags = ["verticalMenu", "search", "notLoggedIn", "loggedIn", "langBox"];
            hwm._shutDownMinorityMenu();
            results = [];
            for (i = 0, len = tags.length; i < len; i++) {
                tag = tags[i];
                results.push((function() {
                    if (tag !== id) {
                        switch (tag) {
                            case "verticalMenu":
                                return hwm._shutDownVerticalMenu();
                            case "search":
                                return hwm._shutDownSearch();
                            case "notLoggedIn":
                                hwm._shutDownNLI();
                                return hwm._$(".signAndReg").removeClass("header__button--active");
                            case "loggedIn":
                                hwm._shutDownLI();
                                return hwm._$(".header__button--lsidBox").removeClass("header__button--active");
                            case "langBox":
                                return hwm._shutDownLangBox();
                        }
                    }
                })());
            }
            return results;
        };

        HighlightWindowManager.prototype.changeActive = function(id, state, additional) {
            var isOn, isOnLangBox, isOnMenu, isOnSettings;
            if (id == null) {
                id = null;
            }
            if (state == null) {
                state = null;
            }
            if (additional == null) {
                additional = null;
            }
            if (id && window.innerWidth < this._responsiveBreakpoint) {
                switch (false) {
                    case id !== "verticalMenu":
                        isOnMenu = this._$(".container__myMenu").is(":visible");
                        isOnSettings = this._$("body #lsid-window #livescore-settings").is(":visible");
                        isOnLangBox = this._$(".header__langBoxWrapper").is(":visible");
                        if (isOnMenu || isOnSettings || isOnLangBox) {
                            this._resolveButtonUI("switch", true);
                            this._shutDownVerticalMenu();
                            this._shutDownSettings();
                            this._shutDownLangBox();
                            return this._stopScroll(false);
                        } else {
                            this._resolveButtonUI("switch", false);
                            this._$(".container__myMenu").addClass("myMenu--active");
                            this._resetOthers(id, this._$, this);
                            return this._stopScroll(true);
                        }
                        break;
                    case id !== "search":
                        this._resolveButtonUI("search", state);
                        if (state) {
                            this._shutDownSearch();
                            return this._stopScroll(false);
                        } else {
                            this._resetOthers(id, this._$, this);
                            return this._stopScroll(true);
                        }
                        break;
                    case id !== "notLoggedIn":
                        if (this._$("body #lsid-window #livescore-settings").is(":visible")) {
                            this._shutDownSettings();
                        }
                        isOn = this._$("body #lsid-window").is(":visible");
                        if (isOn) {
                            this._shutDownNLI();
                            return this._stopScroll(false);
                        } else {
                            additional.showDialog('login');
                            this._$(".signAndReg").addClass("header__button--active");
                            this._resetOthers(id, this._$, this);
                            return this._stopScroll(true);
                        }
                        break;
                    case id !== "loggedIn":
                        if (!state) {
                            this._resetOthers(id, this._$, this);
                            this._stopScroll(true);
                        } else {
                            this._stopScroll(false);
                        }
                        return this._resolveButtonUI("lsidBox", state);
                    case id !== "settings":
                        isOn = this._$("#livescore-settings").is(":visible");
                        this._stopScroll(true);
                        if (isOn) {
                            this._$("body #lsid-window .close").trigger('click');
                            return this._$("body .container__myMenu").addClass("myMenu--active");
                        } else {
                            this._$("body .container__myMenu").removeClass("myMenu--active");
                            return this._resolveButtonUI("switch", isOn);
                        }
                        break;
                    case id !== "langBox":
                        isOn = this._$(".header__langBoxWrapper").is(":visible");
                        this._stopScroll(true);
                        if (isOn) {
                            this._$('.header__langBoxWrapper').removeClass('header__langBoxWrapper--active');
                            return this._$("body .container__myMenu").addClass("myMenu--active");
                        } else {
                            this._$('.header__langBoxWrapper').addClass('header__langBoxWrapper--active');
                            this._$("body .container__myMenu").removeClass("myMenu--active");
                            return this._resolveButtonUI("switch", isOn);
                        }
                        break;
                    case id !== "changePassword":
                        this._$("body #lsid-window .close").trigger('click');
                        return this._$("body #lsid-dropdown").trigger('click');
                    case id !== "changePasswordForm":
                        this._$(".signAndReg").addClass("header__button--active");
                        return this._stopScroll(true);
                    case id !== "loginAfterActivation":
                        this._$(".signAndReg").addClass("header__button--active");
                        return this._stopScroll(true);
                    case id !== "logout":
                        this._$(".header__button--lsidBox").removeClass("header__button--active");
                        return this._stopScroll(false);
                    case id !== "login":
                        return this._stopScroll(false);
                    case id !== "lsidHide":
                        this._$(".header__button--lsidBox").removeClass("header__button--active");
                        this._$(".signAndReg").removeClass("header__button--active");
                        return this._stopScroll(false);
                }
            }
        };

        return HighlightWindowManager;

    })(cjs.dic.getClass('WindowManager'));

    cjs.dic.registerClass('HighlightWindowManager', HighlightWindowManager, ['highlightWindowManager']);

}).call(this);

/**
	TopLeagues - top leagues in livescore
 */

(function() {
    var TopLeagues, base;

    TopLeagues = (function() {
        function TopLeagues(_dic) {
            this._dic = _dic != null ? _dic : cjs.dic;
        }

        TopLeagues.prototype.isTop = function(labelId, labelKey) {
            var ZH, leagueHandler, leagueHolder;
            if (labelKey == null) {
                labelKey = null;
            }
            leagueHolder = this._dic.get('dataLeagueHolderProxy').getHolder();
            leagueHandler = this._dic.get('dataLeagueHolderProxy').getHandler();
            if (!labelId) {
                ZH = labelKey.replace(/[0-9]+_/, '');
                leagueHandler.each(function(index, id) {
                    var leagueItem;
                    leagueItem = this.getItem(id);
                    if (leagueItem.getTournamentTemplateKey() === ZH) {
                        labelId = id;
                        return false;
                    }
                });
            }
            if (!leagueHolder.hasLeague(labelId)) {
                return false;
            }
            if (leagueHolder.getLeague(labelId).isTop()) {
                return true;
            }
            return false;
        };

        TopLeagues.prototype.isEditable = function() {
            return false;
        };

        TopLeagues.prototype.getAll = function() {
            var leagueHandler, leagues;
            leagues = [];
            leagueHandler = this._dic.get('dataLeagueHolderProxy').getHandler();
            leagueHandler.each(function(index, id) {
                var leagueItem;
                leagueItem = this.getItem(id);
                if (leagueItem.isTop()) {
                    return leagues.push(id);
                }
            });
            return leagues;
        };

        return TopLeagues;

    })();

    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).TopLeagues == null) {
            base.TopLeagues = TopLeagues;
        }
    } else {
        if (exports.TopLeagues == null) {
            exports.TopLeagues = TopLeagues;
        }
    }

}).call(this);
(function() {
    var TableSlider, base;

    TableSlider = (function() {
        function TableSlider(settings, jQuery) {
            this.jQuery = jQuery;
            this.table = settings.table;
            this.tableHeight = null;
            this.tableTheadHeight = this.table.find('thead').height();
            this.fixedColumns = settings.fixedColumns;
            this.fixedColumnsTable = null;
            this.fixedColumnsWidth = null;
            this.fixedColumnsWrap = null;
            this.scrollColumnsWrap = null;
            this.navigationOneStepDistance = 150;
            this.navigationOneStepSpeed = 250;
            this.navigationLeftArrow = null;
            this.navigationRightArrow = null;
            this.windowWidth = null;
            this.windowHeight = null;
            this.scrollTop = null;
            this.navigationBar = null;
            this.navigationBarOffset = 25;
            this.currentLeftPosition = 0;
            this.window = this.jQuery(window);
        }

        TableSlider.prototype.init = function() {
            var columns, fixedColumnsWrap, scrollColumnsWrap, wrap;
            columns = this.getFixedColumns();
            this.fixedColumnsTable = this.createTable(columns);
            this.jQuery(this.fixedColumnsTable).addClass(this.jQuery(this.table).get(0).className);
            this.jQuery(this.table).find(columns.join(',')).addClass('ts-hidden-fixed-column');
            wrap = this.jQuery("<div class='ts-table-wrap'>");
            this.jQuery(this.table).wrap(wrap);
            this.jQuery(this.table).closest('.ts-table-wrap').prepend(this.fixedColumnsTable);
            fixedColumnsWrap = this.jQuery('<div class="ts-table-fixed-columns-wrap">');
            this.jQuery(this.fixedColumnsTable).wrap(fixedColumnsWrap);
            this.fixedColumnsWrap = this.jQuery(this.fixedColumnsTable).closest('.ts-table-fixed-columns-wrap');
            scrollColumnsWrap = this.jQuery('<div class="ts-table-scroll-columns-wrap">');
            this.jQuery(this.table).wrap(scrollColumnsWrap);
            this.scrollColumnsWrap = this.jQuery(this.table).closest('.ts-table-scroll-columns-wrap');
            this.tableHeight = this.table.height();
            this.addNavigation();
            this.addWindowResizeHandler();
            this.addWindowScrollHandler();
            return this.keepNavigationBarVisible();
        };

        TableSlider.prototype.addWindowResizeHandler = function() {
            this.windowWidth = this.window.width();
            this.windowHeight = this.window.height();
            return this.window.resize((function(context) {
                return function() {
                    if (context.jQuery(context.table).is(':visible')) {
                        context.windowHeight = context.window.height();
                        context.keepNavigationBarVisible();
                        if (context.windowWidth !== context.window.width()) {
                            context.updateFixedColumns();
                            context.windowWidth = context.window.width();
                            context.resetNavigation();
                            return context.checkNavigationArrows();
                        }
                    }
                };
            })(this));
        };

        TableSlider.prototype.addWindowScrollHandler = function() {
            this.scrollTop = this.window.scrollTop();
            return this.window.scroll((function(context) {
                return function() {
                    return context.keepNavigationBarVisible();
                };
            })(this));
        };

        TableSlider.prototype.keepNavigationBarVisible = function() {
            var barTop, tableHeight, tableTop, tbodyTop, viewHeight, windowHeight;
            if (!this.table.is(':visible')) {
                return;
            }
            tableHeight = this.tableHeight - this.tableTheadHeight;
            tbodyTop = this.table.offset().top + this.tableTheadHeight;
            windowHeight = this.window.height();
            tableTop = tbodyTop - this.window.scrollTop();
            if (tableTop > 0) {
                viewHeight = windowHeight - tableTop;
            } else {
                viewHeight = tableHeight + tableTop;
            }
            if (viewHeight > tableHeight) {
                viewHeight = tableHeight;
            }
            if (viewHeight > windowHeight) {
                viewHeight = windowHeight;
            }
            if (viewHeight < 0) {
                return;
            }
            barTop = viewHeight / 2 - (tableTop < 0 ? tableTop : 0);
            barTop += 20;
            if (barTop < 40) {
                barTop = 40;
            }
            if (barTop > tableHeight) {
                barTop = tableHeight;
            }
            return this.navigationBar.css('top', barTop);
        };

        TableSlider.prototype.updateFixedColumns = function(keepCurrentLeftPosition) {
            var clonedColumns, columns, newFixedColunnsTable;
            if (keepCurrentLeftPosition == null) {
                keepCurrentLeftPosition = false;
            }
            columns = this.getFixedColumns();
            clonedColumns = this.jQuery(this.table).find(columns.join(','));
            this.jQuery(clonedColumns).removeClass('ts-hidden-fixed-column');
            this.jQuery(this.fixedColumnsTable).addClass('ts-hidden-table');
            this.fixedColumnsWidth = null;
            this.getColumnsWidth(columns);
            this.jQuery(this.fixedColumnsTable).removeClass('ts-hidden-table');
            this.jQuery(clonedColumns).addClass('ts-hidden-fixed-column');
            newFixedColunnsTable = this.createTable(columns);
            this.jQuery(this.fixedColumnsTable).replaceWith(newFixedColunnsTable);
            this.fixedColumnsTable = newFixedColunnsTable;
            if (keepCurrentLeftPosition) {
                this.setLeft(this.currentLeftPosition);
            } else {
                this.resetNavigation();
            }
            this.checkNavigationArrows();
            return this.keepNavigationBarVisible();
        };

        TableSlider.prototype.createTable = function(columns) {
            var table, width;
            table = this.jQuery(this.table).clone();
            this.jQuery(table).removeAttr('id').removeAttr('style');
            this.jQuery(table).find('td:not(' + columns.join(',') + '),th:not(' + columns.join(',') + ')').remove();
            width = this.getColumnsWidth(columns);
            this.jQuery(table).find('td,th').each((function(context) {
                return function() {
                    return context.jQuery(this).css('width', width[context.jQuery(this).index()] + "px").removeClass('ts-hidden-fixed-column');
                };
            })(this));
            this.jQuery(table).find('th a').removeAttr('onclick').unbind().click((function(context) {
                return function(e) {
                    e.preventDefault();
                    return context.jQuery(context.table).find('th:eq(' + context.jQuery(this).closest('th').index() + ') a').click();
                };
            })(this));
            this.jQuery(table).css('width', 'auto');
            return table;
        };

        TableSlider.prototype.getColumnsWidth = function(columns) {
            var column, firstColumn, i, len, width;
            if (this.fixedColumnsWidth !== null) {
                return this.fixedColumnsWidth;
            }
            width = [];
            firstColumn = null;
            for (i = 0, len = columns.length; i < len; i++) {
                column = columns[i];
                firstColumn = this.jQuery(this.table).find(column).last();
                if (!width[this.jQuery(firstColumn).index()]) {
                    width[this.jQuery(firstColumn).index()] = this.jQuery(firstColumn).width();
                }
            }
            this.fixedColumnsWidth = width;
            return this.fixedColumnsWidth;
        };

        TableSlider.prototype.getFixedColumns = function() {
            return this.fixedColumns;
        };

        TableSlider.prototype.addNavigation = function() {
            this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').css('margin-left', '0px');
            this.navigationBar = this.jQuery('<span class="ts-navigation-bar"></span>');
            this.navigationLeftArrow = this.jQuery('<span class="ts-left-arrow"></span>');
            this.navigationRightArrow = this.jQuery('<span class="ts-right-arrow"></span>');
            this.jQuery(this.navigationLeftArrow).click((function(context) {
                return function() {
                    return context.moveLeft();
                };
            })(this));
            this.jQuery(this.navigationRightArrow).click((function(context) {
                return function() {
                    return context.moveRight();
                };
            })(this));
            this.checkNavigationArrows();
            this.navigationBar.append(this.navigationLeftArrow).append(this.navigationRightArrow);
            return this.jQuery(this.scrollColumnsWrap).append(this.navigationBar);
        };

        TableSlider.prototype.resetNavigation = function() {
            this.currentLeftPosition = 0;
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', '0px');
        };

        TableSlider.prototype.setLeft = function(left) {
            this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', left + 'px');
            this.checkNavigationArrows();
            this.currentLeftPosition = parseInt(left);
            return this.fixLeftPostion();
        };

        TableSlider.prototype.moveLeft = function() {
            var l;
            l = this.getNavigationStep('left');
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().animate({
                'margin-left': '+=' + l + 'px'
            }, this.navigationOneStepSpeed, (function(context) {
                return function() {
                    context.checkNavigationArrows();
                    return context.currentLeftPosition = parseInt(context.jQuery(this).css('margin-left'));
                };
            })(this));
        };

        TableSlider.prototype.moveRight = function() {
            var r;
            r = this.getNavigationStep('right');
            return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().animate({
                'margin-left': '-=' + r + 'px'
            }, this.navigationOneStepSpeed, (function(context) {
                return function() {
                    context.checkNavigationArrows();
                    return context.currentLeftPosition = parseInt(context.jQuery(this).css('margin-left'));
                };
            })(this));
        };

        TableSlider.prototype.checkNavigationArrows = function() {
            if (this.getNavigationStep('left') > 0) {
                this.navigationLeftArrow.removeClass('disabled');
            } else {
                this.navigationLeftArrow.addClass('disabled');
            }
            if (this.getNavigationStep('right') > 0) {
                return this.navigationRightArrow.removeClass('disabled');
            } else {
                return this.navigationRightArrow.addClass('disabled');
            }
        };

        TableSlider.prototype.fixLeftPostion = function() {
            var currentLeft, scrollColumnsWrapWidth, table, tableWidth;
            table = this.jQuery(this.scrollColumnsWrap).find('table:eq(0)');
            tableWidth = this.jQuery(table).outerWidth();
            scrollColumnsWrapWidth = this.jQuery(this.scrollColumnsWrap).outerWidth();
            currentLeft = parseInt(this.jQuery(table).css('margin-left'));
            if (currentLeft > 0) {
                return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', '0px');
            } else if (currentLeft + tableWidth < scrollColumnsWrapWidth) {
                return this.jQuery(this.scrollColumnsWrap).find('table:eq(0)').stop().css('margin-left', (scrollColumnsWrapWidth - tableWidth) + 'px');
            }
        };

        TableSlider.prototype.getNavigationStep = function(direction) {
            var currentLeft, scrollColumnsWrapWidth, table, tableWidth;
            table = this.jQuery(this.scrollColumnsWrap).find('table:eq(0)');
            tableWidth = this.jQuery(table).outerWidth();
            scrollColumnsWrapWidth = this.jQuery(this.scrollColumnsWrap).outerWidth();
            currentLeft = parseInt(this.jQuery(table).css('margin-left'));
            if (direction === 'left') {
                if (currentLeft === 0) {
                    return 0;
                } else if (currentLeft + this.navigationOneStepDistance >= 0) {
                    return -1 * currentLeft;
                } else {
                    return this.navigationOneStepDistance;
                }
            }
            if (direction === 'right') {
                if (scrollColumnsWrapWidth + -1 * currentLeft + this.navigationOneStepDistance < tableWidth) {
                    return this.navigationOneStepDistance;
                } else {
                    return -1 * (scrollColumnsWrapWidth + -1 * currentLeft - tableWidth);
                }
            }
        };

        return TableSlider;

    })();

    if (typeof window !== "undefined" && window !== null ? window.cjs : void 0) {
        if ((base = window.cjs).TableSlider == null) {
            base.TableSlider = TableSlider;
        }
    } else {
        if (exports.TableSlider == null) {
            exports.TableSlider = TableSlider;
        }
    }

}).call(this);
(function(require) {
    require = (function(cache, modules, cx) {
        var loader = function(r) {
            if (!modules[r]) throw new Error(r + ' is not a module');
            return cache[r] ? cache[r].exports : ((cache[r] = {
                exports: {}
            }, cache[r].exports = modules[r].call(cx, require, cache[r], cache[r].exports)));
        };
        loader.modules = modules;
        return loader;
    })({}, {
        0: function(require, module, exports) {
            (function() {
                var LoginClient, base, shared;
                shared = require(1);
                LoginClient = (function() {
                    LoginClient.prototype.dialogs = {
                        shared: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        forgottenPassword: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        login: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        passwordChange: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        registration: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        socialRegistration: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        settings: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        verification: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        deleteAccount: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        newTermsOfUse1: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        },
                        newTermsOfUse2: {
                            content: null,
                            showTrigger: null,
                            dialogClass: null
                        }
                    };
                    LoginClient.prototype.respCodes = shared.responseCodes.respCodes;
                    LoginClient.prototype.errorCodes = shared.responseCodes.errorCodes;
                    LoginClient.prototype.emptyName = shared.userValues.emptyName;
                    LoginClient.prototype.mailRegexp = shared.regexp.mailRegexp;
                    LoginClient.prototype.passwordRegexp = shared.regexp.passwordRegexp;
                    LoginClient.prototype.nicknameRegexp = shared.regexp.nicknameRegexp;
                    LoginClient.prototype.nonemptyRegexp = shared.regexp.nonemptyRegexp;
                    LoginClient.prototype.verificationCodeRegexp = shared.regexp.verificationCodeRegexp;
                    LoginClient.prototype._dataStorePrefix = 'lsid_';
                    LoginClient.prototype._dataStorageKey = 'innerData';
                    LoginClient.prototype._privateDataStorageKey = 'privateData';
                    LoginClient.prototype._dataStorageSignKey = 'innerDataSign';
                    LoginClient.prototype._persistDataTtl = 365 * 86400;
                    LoginClient.prototype._nonpersistDataTtl = 7 * 86400;
                    LoginClient.prototype._requestTimeout = 3000;
                    LoginClient.prototype._requestLongTimeout = 30000;
                    LoginClient.prototype._dataAutosyncInterval = 10000;
                    LoginClient.prototype._dataAutosyncBrowserInterval = 1000;
                    LoginClient.prototype._dataAutosyncRequestInterval = 5 * 60000;
                    LoginClient.prototype.isFunction = function(fnct) {
                        return Object.prototype.toString.call(fnct) === "[object Function]";
                    };
                    LoginClient.prototype.isObject = function(fnct) {
                        return Object.prototype.toString.call(fnct) === "[object Object]";
                    };
                    LoginClient.prototype.objectsDiff = function(objA, objB) {
                        if (objA == null) {
                            objA = {};
                        }
                        if (objB == null) {
                            objB = {};
                        }
                        return this._objectsDiff(objA, objB);
                    };
                    LoginClient.prototype._objectsDiff = function(objA, objB) {
                        var diff, j, len1, objDiff, objDiffs, p;
                        diff = [];
                        for (p in objA) {
                            if (typeof objB[p] === "undefined") {
                                diff.push("+|" + p);
                                continue;
                            }
                            if (typeof objA[p] !== typeof objB[p]) {
                                diff.push("*|" + p);
                                continue;
                            }
                            if (objA[p]) {
                                switch (typeof objA[p]) {
                                    case "object":
                                        objDiffs = this._objectsDiff(objA[p], objB[p]);
                                        if (objDiffs.length) {
                                            diff.push("*|" + p);
                                        }
                                        for ((j = 0, len1 = objDiffs.length); j < len1; j++) {
                                            objDiff = objDiffs[j];
                                            diff.push("*|" + p + ";" + objDiff);
                                        }
                                        break;
                                    case "function":
                                        if (objA[p].toString() !== objB[p].toString()) {
                                            if (objDiffs.length) {
                                                diff.push("*|" + p);
                                            }
                                        }
                                        break;
                                    default:
                                        if (objA[p] !== objB[p]) {
                                            diff.push("*|" + p);
                                        }
                                }
                            } else {
                                if (objB[p]) {
                                    diff.push("*|" + p);
                                }
                            }
                        }
                        for (p in objB) {
                            if (typeof objA[p] === "undefined") {
                                diff.push("-|" + p);
                            }
                        }
                        return diff;
                    };
                    LoginClient.prototype.objectClone = function(obj) {
                        var attr, copy, i, len;
                        if (null === obj || "object" !== typeof obj) {
                            return obj;
                        }
                        if (obj instanceof Date) {
                            copy = new Date();
                            copy.setTime(obj.getTime());
                            return copy;
                        }
                        if (obj instanceof Array) {
                            copy = [];
                            i = 0;
                            len = obj.length;
                            while (i < len) {
                                copy[i] = this.objectClone(obj[i]);
                                i++;
                            }
                            return copy;
                        }
                        if (obj instanceof Object) {
                            copy = {};
                            for (attr in obj) {
                                if (obj.hasOwnProperty(attr)) {
                                    copy[attr] = this.objectClone(obj[attr]);
                                }
                            }
                            return copy;
                        }
                        throw new Error("Unable to copy obj! Its type isn't supported.");
                    };

                    function LoginClient(_storage, _url, _namespace, _projectIdent, _dic, _socialAPI, trans, _tansportCoding, _getGeoIp, _getTime, _$, _elementId, _keepHashInLocation, _dialogHideDisabled) {
                        var key, label, proxyUrl, service, serviceName;
                        this._storage = _storage;
                        this._url = _url;
                        this._namespace = _namespace;
                        this._projectIdent = _projectIdent;
                        this._dic = _dic;
                        this._socialAPI = _socialAPI != null ? _socialAPI : {};
                        if (trans == null) {
                            trans = {};
                        }
                        this._tansportCoding = _tansportCoding != null ? _tansportCoding : null;
                        this._getGeoIp = _getGeoIp != null ? _getGeoIp : null;
                        this._getTime = _getTime != null ? _getTime : function() {
                            return (new Date()).getTime();
                        };
                        this._$ = _$ != null ? _$ : $;
                        this._elementId = _elementId != null ? _elementId : "lsid";
                        this._keepHashInLocation = _keepHashInLocation != null ? _keepHashInLocation : false;
                        this._dialogHideDisabled = _dialogHideDisabled != null ? _dialogHideDisabled : false;
                        if (!this.isFunction(this._tansportCoding)) {
                            this._tansportCoding = null;
                        }
                        if (!this.isFunction(this._getGeoIp)) {
                            this._getGeoIp = null;
                        }
                        if (this._url.substr(-1) !== '/') {
                            this._url += '/';
                        }
                        this._socialAPIenabled = {};
                        proxyUrl = this._url.substring(6, this._url.length - 1);
                        if (proxyUrl.indexOf(":") !== -1) {
                            proxyUrl = proxyUrl.substr(0, proxyUrl.indexOf(":"));
                        }
                        this._socialAPI.settings.oauth_proxy = this._url.substr(0, 6) + proxyUrl + ':8443/';
                        if (this._socialAPI.services != null) {
                            for (serviceName in this._socialAPI.services) {
                                service = this._socialAPI.services[serviceName];
                                if (service.id != null) {
                                    this._socialAPIenabled[serviceName] = true;
                                }
                            }
                        }
                        this._requestData = null;
                        this._requestForm = null;
                        this._persistent = null;
                        this._email = null;
                        this._name = null;
                        this._id = null;
                        this._hash = null;
                        this._data = {};
                        this._privateData = {};
                        this._submittedForms = {};
                        this._callbacks = {};
                        this._dialogAutocloseTimeout = null;
                        this._dataKeyForLocalUsage = {};
                        this._highlightWindowManager = this._dic.get('HighlightWindowManager');
                        this._utilConfig = cjs.Api.config;
                        this._useOnlyLocal = this._utilConfig.get('app', 'user_functions', 'use_only_local');
                        this._responsiveBreakpoint = this._utilConfig.get('app', 'responsive', 'breakpoint');
                        if (this._useOnlyLocal) {
                            this.persistent(1);
                        }
                        this._loadData();
                        this._dataAutosyncIntervalId = null;
                        this._dataAutosyncLastDataEdit = 0;
                        this._dataAutosyncLastSync = parseInt(this._read('dataAutosyncRequest'));
                        this._dataAutosyncBrowserIntervalId = null;
                        this._browserDataSign = this._read(this._dataStorageSignKey);
                        this._trans = {};
                        for (key in trans) {
                            label = trans[key];
                            this._trans[key] = label;
                        }
                        this._$((function(lsid) {
                            return function() {
                                lsid._transportForm = lsid._$("#" + lsid._elementId + "-remember-login-form").get(0);
                                if (lsid._transportForm) {
                                    lsid._transportFormEmail = lsid._$(lsid._transportForm).find('#email');
                                    lsid._transportFormPasswd = lsid._$(lsid._transportForm).find('#passwd');
                                }
                                lsid._display();
                                lsid._hashExecute();
                                if (!lsid._dialogHideDisabled) {
                                    lsid._$(window).bind('hashchange', function() {
                                        return lsid._hashExecute();
                                    });
                                    lsid._$(window).bind('keyup', function(e) {
                                        if (e.keyCode === 27) {
                                            return lsid._hideDialog('key');
                                        }
                                    });
                                }
                                lsid._startDataAutosync();
                                return lsid._startDataAutosyncBrowser();
                            };
                        })(this));
                        this._init();
                    }
                    LoginClient.prototype._init = function() {};
                    LoginClient.prototype._loadData = function() {
                        this._data = this.loggedIn() || this._useOnlyLocal ? JSON.parse(this._read(this._dataStorageKey)) : {};
                        if (!this._data) {
                            this._data = {};
                        }
                        this._privateData = this.loggedIn() || this._useOnlyLocal ? JSON.parse(this._read(this._privateDataStorageKey)) : {};
                        if (!this._privateData) {
                            this._privateData = {};
                        }
                        this._id = this._read('id');
                        this._email = this._read('email');
                        this._name = this._read('name');
                        return this._hash = this._read('hash');
                    };
                    LoginClient.prototype.email = function(email) {
                        if (email == null) {
                            email = null;
                        }
                        if ((email != null) && this._email !== email) {
                            this._email = email;
                            this._store('email', this._email);
                        }
                        if (this._email === null) {
                            this._email = this._read('email');
                        }
                        return this._email;
                    };
                    LoginClient.prototype.id = function(id) {
                        if (id == null) {
                            id = null;
                        }
                        if ((id != null) && this._id !== id) {
                            this._id = id;
                            this._store('id', this._id);
                        }
                        if (this._id === null) {
                            this._id = this._read('id');
                        }
                        return this._id;
                    };
                    LoginClient.prototype.name = function(name) {
                        if (name == null) {
                            name = null;
                        }
                        if ((name != null) && this._name !== name) {
                            this._name = name;
                            this._store('name', this._name);
                        }
                        if (this._name === null) {
                            this._name = this._read('name');
                        }
                        return this._name;
                    };
                    LoginClient.prototype.nameOrEmail = function() {
                        var email, name;
                        name = this.name();
                        email = this.email();
                        if (name || email) {
                            if (!name || name === this.emptyName) {
                                return email;
                            } else {
                                return name;
                            }
                        }
                        return '';
                    };
                    LoginClient.prototype.namespace = function() {
                        return this._namespace;
                    };
                    LoginClient.prototype.hash = function(hash) {
                        if (hash == null) {
                            hash = null;
                        }
                        if ((hash != null) && this._hash !== hash) {
                            this._hash = hash;
                            this._store('hash', this._hash);
                        }
                        if (this._hash === null) {
                            this._hash = this._read('hash');
                        }
                        return this._hash;
                    };
                    LoginClient.prototype.persistent = function(persistent) {
                        if (typeof persistent !== 'undefined') {
                            this._persistent = persistent;
                            this._storage.store(this._dataStorePrefix + 'persistent', (this._persistent ? 1 : 0), (this._persistent ? this._persistDataTtl : this._nonpersistDataTtl));
                        }
                        if (this._persistent === null) {
                            this._persistent = parseInt(this._storage.get(this._dataStorePrefix + 'persistent'));
                        }
                        return this._persistent;
                    };
                    LoginClient.prototype.trans = function(key) {
                        if (!this._trans.hasOwnProperty(key)) {
                            return "[X]" + key;
                        }
                        return this._trans[key];
                    };
                    LoginClient.prototype.getIdent = function() {
                        if (!(this.loggedIn() && typeof window.btoa === 'function')) {
                            return null;
                        }
                        return this.id();
                    };
                    LoginClient.prototype.responsiveEnabled = function() {
                        return window.innerWidth < this._responsiveBreakpoint;
                    };
                    LoginClient.prototype._store = function(key, data) {
                        var ttl;
                        ttl = this.persistent() ? this._persistDataTtl : this._nonpersistDataTtl;
                        key = this._dataStorePrefix + key;
                        if (this.persistent()) {
                            return this._storage.store(key, data, ttl);
                        } else {
                            return this._storage.store_in_session(key, data, ttl);
                        }
                    };
                    LoginClient.prototype._read = function(key) {
                        key = this._dataStorePrefix + key;
                        if (this.persistent()) {
                            return this._storage.get(key);
                        } else {
                            return this._storage.get_from_session(key);
                        }
                    };
                    LoginClient.prototype._drop = function(key) {
                        if (this['_' + key] != null) {
                            this['_' + key] = null;
                        }
                        key = this._dataStorePrefix + key;
                        if (this.persistent()) {
                            return this._storage.drop(key);
                        } else {
                            return this._storage.store_in_session(key, '', -5000);
                        }
                    };
                    LoginClient.prototype._hashExecute = function() {
                        var cmd, cmdRegexp, elemsContent, hash, params, parsedHash;
                        hash = location.hash;
                        if ((/%7B%22/).test(hash) || (/\{%22/).test(hash)) {
                            hash = decodeURIComponent(hash);
                        }
                        cmdRegexp = /\[lsid:([a-zA-Z0-9]+)(:(\{.*\}))*\]/;
                        if (cmdRegexp.test(hash)) {
                            parsedHash = hash.match(cmdRegexp);
                            cmd = parsedHash[1];
                            params = parsedHash[3] != null ? JSON.parse(parsedHash[3]) : null;
                            if (!this._keepHashInLocation) {
                                location.hash = hash.replace(cmdRegexp, '!');
                            }
                            switch (cmd) {
                                case "login":
                                    return this.showDialog('login');
                                case "registration":
                                    return this.showDialog('registration');
                                case "forgottenPassword":
                                    return this.showDialog('forgottenPassword');
                                case "deleteAccount":
                                    return this.showDialog('deleteAccount', [], true);
                                case "newTermsOfUse1":
                                    return this.showDialog('newTermsOfUse1', [], true);
                                case "newTermsOfUse2":
                                    return this.showDialog('newTermsOfUse2', [], true);
                                case "verification":
                                    if (((params != null ? params.r : void 0) != null) && params.r === this.respCodes.done) {
                                        return this._verificationOkProceed();
                                    }
                                    if (!(((params != null ? params.i : void 0) != null) && (params.c != null) && this._verification({
                                            "id": {
                                                "value": params.i
                                            },
                                            "verificationcode": {
                                                "value": params.c
                                            }
                                        }))) {
                                        elemsContent = ((params != null ? params.i : void 0) != null) && params.m ? [{
                                            "selector": "#email",
                                            "functionName": "val",
                                            "params": [params.i]
                                        }] : [];
                                        if ((params.err != null) && params.err === this.errorCodes.verificationFail) {
                                            elemsContent.push({
                                                "selector": ".verification .error-box",
                                                "functionName": "append",
                                                "params": ['<span class="err-msg">' + this.trans('verificationCodeError') + '</span>']
                                            });
                                            elemsContent.push({
                                                "selector": ".verification .error-box",
                                                "functionName": "show",
                                                "params": []
                                            });
                                        }
                                        return this.showDialog('verification', elemsContent);
                                    }
                                    break;
                                case "passwordChange":
                                    this._highlightWindowManager.changeActive("changePasswordForm");
                                    if (((params != null ? params.i : void 0) != null) && (params.c != null) && this.verificationCodeRegexp.test(params.c)) {
                                        elemsContent = [{
                                            "selector": "#id",
                                            "functionName": "val",
                                            "params": [params.i]
                                        }, {
                                            "selector": ".passwordchange form",
                                            "functionName": "append",
                                            "params": ['<input type="hidden" value="' + params.c + '" id="code" name="code">']
                                        }, {
                                            "selector": ".passwordchange .password-form-element",
                                            "functionName": "remove",
                                            "params": []
                                        }];
                                        return this.showDialog('passwordChange', elemsContent);
                                    }
                                    if (params) {
                                        this._highlightWindowManager.changeActive("lsidHide");
                                        return this._showMessage(this.trans('verificationPassChangeCodeError'), true);
                                    }
                                    if (this.loggedIn()) {
                                        return this.showDialog('passwordChange');
                                    }
                            }
                        }
                    };
                    LoginClient.prototype._display = function() {
                        return null;
                    };
                    LoginClient.prototype._showMessage = function(msg, err, time, animTime) {
                        var message, msgDiv;
                        if (err == null) {
                            err = false;
                        }
                        if (time == null) {
                            time = 4;
                        }
                        if (animTime == null) {
                            animTime = 0.2;
                        }
                        msgDiv = this._$(document.createElement('div'));
                        msgDiv.addClass(this._elementId + "-messages");
                        message = this._$(document.createElement('div'));
                        message.addClass("message");
                        if (err) {
                            message.addClass("err");
                        }
                        message.html(msg);
                        msgDiv.append(message);
                        return this._showDialog(msgDiv, null, time);
                    };
                    LoginClient.prototype._showDialog = function(content, callback, autoCloseTime, useDialogWindowClass, dialogName, dialogHideDisabled) {
                        var close, contentWrap, contentWrapClone, dialogLeft, doneCallback, hide, mask, maxZIndex, myWindow, myWindowClone;
                        if (content == null) {
                            content = "";
                        }
                        if (callback == null) {
                            callback = null;
                        }
                        if (autoCloseTime == null) {
                            autoCloseTime = null;
                        }
                        if (useDialogWindowClass == null) {
                            useDialogWindowClass = true;
                        }
                        if (dialogName == null) {
                            dialogName = null;
                        }
                        if (dialogHideDisabled == null) {
                            dialogHideDisabled = false;
                        }
                        doneCallback = (function(lsid) {
                            return function() {
                                if (typeof callback === "function") {
                                    callback();
                                }
                                return lsid.formFocus(lsid._$("#" + lsid._elementId + "-window div.selected form"));
                            };
                        })(this);
                        myWindow = this._$("#" + this._elementId + "-window");
                        this._$(window).off('keyup');
                        if (this._dialogHideDisabled || dialogHideDisabled) {
                            close = "";
                            hide = (function(_this) {
                                return function(method) {
                                    if (method == null) {
                                        method = null;
                                    }
                                    return function(e) {};
                                };
                            })(this);
                        } else {
                            this._$(window).bind('keyup', (function(_this) {
                                return function(e) {
                                    if (e.keyCode === 27) {
                                        return _this._hideDialog('key');
                                    }
                                };
                            })(this));
                            close = "<a id=\"" + this._elementId + "-window-close\" class=\"close\" href=\"#\" title=\"" + (this.trans('closeWindow')) + "\"></a>";
                            hide = (function(_this) {
                                return function(method) {
                                    if (method == null) {
                                        method = null;
                                    }
                                    return function(e) {
                                        if (e != null) {
                                            e.preventDefault();
                                        }
                                        _this._hideDialog(method);
                                        return _this._hideLoading();
                                    };
                                };
                            })(this);
                        }
                        clearTimeout(this._dialogAutocloseTimeout);
                        if (autoCloseTime) {
                            this._dialogAutocloseTimeout = setTimeout((function() {
                                return hide('timeout')();
                            }), autoCloseTime * 1000);
                        }
                        if (myWindow.length) {
                            mask = this._$("#" + this._elementId + "-window-mask");
                            if (dialogName) {
                                myWindow.attr("data-window-name", dialogName);
                                mask.attr("data-window-name", dialogName);
                            } else {
                                mask.removeAttr("data-window-name");
                                myWindow.removeAttr("data-window-name");
                            }
                            myWindowClone = myWindow.clone();
                            myWindowClone.css({
                                'visibility': 'hidden'
                            });
                            contentWrapClone = myWindowClone.children(".content-wrap");
                            contentWrapClone.html(content);
                            contentWrapClone.css({
                                'opacity': '0'
                            });
                            contentWrap = myWindow.children(".content-wrap");
                            contentWrap.css({
                                'width': contentWrap.width(),
                                'height': contentWrap.height()
                            });
                            contentWrap.animate({
                                'opacity': '0'
                            }, function() {
                                return myWindow.animate({
                                    'left': dialogLeft
                                });
                            });
                            this._$('body').append(myWindowClone);
                            dialogLeft = (contentWrap.width() - contentWrapClone.width()) / 2;
                            dialogLeft = "+=" + dialogLeft;
                            contentWrap.animate({
                                'height': contentWrapClone.height(),
                                'width': contentWrapClone.width()
                            }, (function(lsid) {
                                return function() {
                                    lsid._$(this).replaceWith(contentWrapClone);
                                    contentWrapClone.animate({
                                        'opacity': '1'
                                    });
                                    doneCallback();
                                    if (dialogName) {
                                        lsid._runCallback("showDialog/" + dialogName);
                                    }
                                    return lsid._fixedDialog();
                                };
                            })(this));
                            myWindowClone.remove();
                            mask.off('click').click((function(e) {
                                return hide("clickout")(e);
                            }));
                            myWindow.find("#" + this._elementId + "-window-close").replaceWith(close);
                            return myWindow.find('.close').off('click').click((function(e) {
                                return hide("button")(e);
                            }));
                        } else {
                            maxZIndex = this._findHighestZindex('body > *') + 3;
                            mask = this._$(document.createElement('div'));
                            mask.attr('id', this._elementId + "-window-mask");
                            if (dialogName) {
                                mask.attr("data-window-name", dialogName);
                            }
                            mask.css({
                                'z-index': maxZIndex
                            });
                            this._$('body').prepend(mask);
                            myWindow = this._$(document.createElement('div'));
                            myWindow.attr('id', this._elementId + "-window");
                            if (dialogName) {
                                myWindow.attr("data-window-name", dialogName);
                            }
                            myWindow.css({
                                'z-index': maxZIndex + 1
                            });
                            if (useDialogWindowClass && this._dialogWindowClass) {
                                myWindow.addClass(this._dialogWindowClass);
                            }
                            contentWrap = document.createElement('div');
                            this._$(contentWrap).addClass('content-wrap').html(content);
                            myWindow.append(close);
                            myWindow.append(contentWrap);
                            this._$('body').prepend(myWindow);
                            this._repositionDialog();
                            myWindow.css({
                                'opacity': '0'
                            });
                            myWindow.show();
                            mask.fadeTo(200, 0.6, (function(lsid) {
                                return function() {
                                    doneCallback();
                                    return myWindow.animate({
                                        'opacity': '1'
                                    }, 300, function() {
                                        if (dialogName) {
                                            lsid._runCallback("showDialog/" + dialogName);
                                        }
                                        return lsid._fixedDialog();
                                    });
                                };
                            })(this));
                            mask.click((function(e) {
                                return hide("clickout")(e);
                            }));
                            return myWindow.find('.close').click((function(e) {
                                return hide("button")(e);
                            }));
                        }
                    };
                    LoginClient.prototype._findHighestZindex = function(selector, exceptedSelector) {
                        var INTEGER_MAX_VALUE, highestZIndex;
                        if (selector == null) {
                            selector = '*';
                        }
                        if (exceptedSelector == null) {
                            exceptedSelector = '.preload';
                        }
                        highestZIndex = 0;
                        INTEGER_MAX_VALUE = 2147483647;
                        this._$(selector).not(exceptedSelector).each((function(_this) {
                            return function(index, element) {
                                var newZIndex;
                                newZIndex = parseInt(_this._$(element).css('z-index'));
                                if (newZIndex === 2000000000) {
                                    return true;
                                }
                                if (!isNaN(newZIndex)) {
                                    return highestZIndex = Math.max(highestZIndex, newZIndex);
                                }
                            };
                        })(this));
                        if (highestZIndex === INTEGER_MAX_VALUE) {
                            return INTEGER_MAX_VALUE - 2;
                        }
                        return highestZIndex;
                    };
                    LoginClient.prototype._showDialogTrigger = function(dialogName) {
                        var ref;
                        if ((((ref = this.dialogs[dialogName]) != null ? ref.showTrigger : void 0) != null) && this.isFunction(this.dialogs[dialogName].showTrigger)) {
                            return this.dialogs[dialogName].showTrigger(this);
                        }
                    };
                    LoginClient.prototype._repositionDialog = function() {
                        var headerEl, headerTop, myWindow;
                        if (this._repositionDialogBinded == null) {
                            this._$(window).resize((function(myObj) {
                                return function() {
                                    return myObj._repositionDialog();
                                };
                            })(this));
                        }
                        this._repositionDialogBinded = true;
                        headerTop = 200;
                        headerEl = this._$('.header__content');
                        if (headerEl.length) {
                            headerTop = headerEl.offset().top + headerEl.height();
                        }
                        myWindow = this._$("#" + this._elementId + "-window");
                        myWindow.css({
                            'top': headerTop,
                            'left': Math.max(this._$(window).width() / 2 - myWindow.width() / 2, 0)
                        });
                        return this._fixedDialog();
                    };
                    LoginClient.prototype._fixedDialog = function() {
                        var myWindow;
                        myWindow = this._$("#" + this._elementId + "-window");
                        myWindow.removeClass('long');
                        if ((this._$(window).height() < myWindow.height() + 220) || this._$(window).width() < myWindow.width() || (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i).test(navigator.userAgent)) {
                            return myWindow.addClass('long');
                        }
                    };
                    LoginClient.prototype._hideDialog = function(method) {
                        var dialogName;
                        if (method == null) {
                            method = null;
                        }
                        dialogName = this._$("#" + this._elementId + "-window-mask").attr("data-window-name");
                        if (dialogName) {
                            this._runCallback('hideDialog', {
                                'dialogName': dialogName,
                                'method': method
                            });
                        }
                        this._repositionDialogBinded = false;
                        this._$("#" + this._elementId + "-window").remove();
                        return this._$("#" + this._elementId + "-window-mask").remove();
                    };
                    LoginClient.prototype._showLoading = function() {
                        var loading;
                        loading = this._$(document.createElement('div'));
                        loading.attr('id', this._elementId + "-loading");
                        loading.addClass('preload');
                        loading.append(this._$(document.createElement('span')).text('Loading ...'));
                        return this._$("#" + this._elementId + "-window").prepend(loading);
                    };
                    LoginClient.prototype._hideLoading = function() {
                        return this._$("#" + this._elementId + "-loading").remove();
                    };
                    LoginClient.prototype._transportAutocomplete = function(form) {
                        var e;
                        if (!this._transportForm) {
                            return false;
                        }
                        if (this._$.browser.mozzila != null) {
                            return false;
                        }
                        try {
                            this._$(this._transportForm).find('div').html('');
                            this._$(this._transportForm).find("div").append(this._$(form).find('#email').clone());
                            this._$(this._transportForm).find("div").append(this._$(form).find('#passwd').clone());
                            this._$(this._transportForm).find("div").append(this._$(form).find('#login').clone());
                            this._transportForm.submit();
                            return true;
                        } catch (error1) {
                            e = error1;
                            return false;
                        }
                    };
                    LoginClient.prototype._request = function(callback, url, data, longTimeout) {
                        var req;
                        if (callback == null) {
                            callback = (function() {
                                return null;
                            });
                        }
                        if (data == null) {
                            data = null;
                        }
                        if (longTimeout == null) {
                            longTimeout = false;
                        }
                        if (url.substr(-1) !== '/') {
                            url += '/';
                        }
                        req = {
                            url: this._url + url,
                            timeout: longTimeout ? this._requestLongTimeout : this._requestTimeout,
                            dataType: 'jsonp',
                            jsonpCallback: 'lsid' + Math.random().toString().substr(-8),
                            success: (function(obj, callback) {
                                return function(data, textStatus, jqXHR) {
                                    if (jqXHR.status === 200) {
                                        return callback.call(obj, data);
                                    } else {
                                        return callback.call(obj, data, jqXHR.status);
                                    }
                                };
                            })(this, callback),
                            error: (function(obj, callback) {
                                return function(jqXHR, textStatus, errorThrown) {
                                    return callback.call(obj, null, jqXHR.status);
                                };
                            })(this, callback)
                        };
                        if (data != null) {
                            data.namespace = this._namespace;
                        }
                        if (this._tansportCoding && (data != null)) {
                            data = {
                                lsidcc: this._tansportCoding(data)
                            };
                        }
                        if (data != null) {
                            req.data = data;
                        }
                        return this._$.ajax(req);
                    };
                    LoginClient.prototype._requestPromise = function(callback, url, data, longTimeout) {
                        if (callback == null) {
                            callback = (function() {
                                return null;
                            });
                        }
                        if (data == null) {
                            data = null;
                        }
                        if (longTimeout == null) {
                            longTimeout = false;
                        }
                        return new Promise((function(_this) {
                            return function(resolve, reject) {
                                var req;
                                if (url.substr(-1) !== '/') {
                                    url += '/';
                                }
                                req = {
                                    url: _this._url + url,
                                    timeout: longTimeout ? _this._requestLongTimeout : _this._requestTimeout,
                                    dataType: 'jsonp',
                                    jsonpCallback: 'lsid' + Math.random().toString().substr(-8),
                                    success: (function(obj, callback) {
                                        return function(data, textStatus, jqXHR) {
                                            if (jqXHR.status === 200) {
                                                callback.call(obj, data);
                                                return resolve(obj, data);
                                            } else {
                                                callback.call(obj, data, jqXHR.status);
                                                return reject(obj, data, jqXHR.status);
                                            }
                                        };
                                    })(_this, callback),
                                    error: (function(obj, callback) {
                                        return function(jqXHR, textStatus, errorThrown) {
                                            callback.call(obj, null, jqXHR.status);
                                            return reject(obj, null, jqXHR.status);
                                        };
                                    })(_this, callback)
                                };
                                if (data != null) {
                                    data.namespace = _this._namespace;
                                }
                                if (_this._tansportCoding && (data != null)) {
                                    data = {
                                        lsidcc: _this._tansportCoding(data)
                                    };
                                }
                                if (data != null) {
                                    req.data = data;
                                }
                                return _this._$.ajax(req);
                            };
                        })(this));
                    };
                    LoginClient.prototype._requestCheckTerms = function(url, postData) {
                        var self;
                        self = this;
                        return this._request((function() {
                            return null;
                        }), url, postData, true).then(function(data) {
                            self._hideLoading();
                            if (((data.err != null) && data.err === self.errorCodes.registrationNotConfirmed) && !data.err2) {
                                self._hideDialog();
                                self._showMessage(self.trans('errSignInConfirm'), true, 100000);
                                self._highlightWindowManager.changeActive("lsidHide");
                                return null;
                            }
                            if (data == null) {
                                self.showTechnicalError();
                                return null;
                            }
                            if (data.id && data.hash) {
                                self._id = data.id;
                                self._hash = data.hash;
                            }
                            if (data.err != null) {
                                return data.err !== self.errorCodes.registrationNotConfirmed && data.err2 !== self.errorCodes.termsConfrimationNeeded;
                            }
                            return true;
                        });
                    };
                    LoginClient.prototype._addErrorToForm = function(form, elementSelector, message, hideErrorMessageBox) {
                        var errMsgBox;
                        if (hideErrorMessageBox == null) {
                            hideErrorMessageBox = false;
                        }
                        errMsgBox = this._$(form).find('.error-box');
                        if (hideErrorMessageBox) {
                            this._hideErrorMessageBox(form);
                        }
                        return (errMsgBox.length ? errMsgBox : this._$(form).find('elementSelector').parent()).append('<span class="err-msg">' + message + '</span>');
                    };
                    LoginClient.prototype._showErrorMessageBox = function(form) {
                        return this._$(form).find('.error-box').show();
                    };
                    LoginClient.prototype._hideErrorMessageBox = function(form) {
                        return this._$(form).find('.error-box').hide();
                    };
                    LoginClient.prototype._registration = function(form, grecaptchaWidgetId) {
                        var captchaVal, err, grecaptchaPublicKey, newCaptcha, prePassCheckErrCount, user;
                        if (this._submittedForms.registrationVerificationLogin) {
                            return;
                        }
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        newCaptcha = false;
                        grecaptchaPublicKey = this._utilConfig.get('app', 'registration', 'captcha_sitekey');
                        if (typeof grecaptcha !== "undefined" && grecaptcha !== null) {
                            newCaptcha = true;
                            grecaptchaPublicKey = grecaptchaPublicKey ? grecaptchaPublicKey : '';
                        }
                        user = {
                            email: form.email.value,
                            password: form.passwd.value,
                            name: this.emptyName,
                            project: this._projectIdent,
                            termsofservice: form.termsofservice.checked,
                            cX: newCaptcha ? grecaptcha.getResponse(grecaptchaWidgetId) : null,
                            cPk: newCaptcha ? grecaptchaPublicKey : '',
                            cCh: !newCaptcha ? Recaptcha.get_challenge() : null,
                            cR: !newCaptcha ? Recaptcha.get_response() : null
                        };
                        if (!this.mailRegexp.test(user.email)) {
                            this._$(form).find('#email').addClass('err-input');
                            this._addErrorToForm(form, '#email', this.trans('emailError'));
                            err++;
                        }
                        prePassCheckErrCount = err;
                        if (!this.passwordRegexp.test(user.password)) {
                            this._$(form).find('#passwd').addClass('err-input');
                            this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                            err++;
                        } else {
                            if (user.password !== form.passwdagain.value) {
                                this._$(form).find('#passwd').addClass('err-input');
                                this._$(form).find('#passwdagain').addClass('err-input');
                                this._addErrorToForm(form, '#passwdagain', this.trans('passwordMissmatchError'));
                                err++;
                            }
                        }
                        if (prePassCheckErrCount < err) {
                            form.passwd.value = '';
                            form.passwdagain.value = '';
                        }
                        if (newCaptcha) {
                            captchaVal = user.cX;
                        } else {
                            captchaVal = user.cR;
                        }
                        if (!this.nonemptyRegexp.test(captchaVal)) {
                            this._$(form).find('#recaptcha_response_field').addClass('err-input');
                            this._addErrorToForm(form, '#recaptcha_response_field', this.trans('captchaEmptyError'));
                            err++;
                        }
                        if (!form.termsofservice.checked) {
                            this._$(form).find('#termsofservice').addClass('err-input');
                            this._addErrorToForm(form, '#termsofservice', this.trans('termsError'));
                            err++;
                        }
                        if (!err) {
                            this._submittedForms.registrationVerificationLogin = true;
                            if (this._getGeoIp) {
                                user.geoIp = this._getGeoIp();
                            }
                            this._requestForm = form;
                            this._registrationRequest(user);
                            if (newCaptcha && typeof grecaptchaWidgetId !== "undefined") {
                                return grecaptcha.reset(grecaptchaWidgetId);
                            }
                        } else {
                            return this._showErrorMessageBox(form);
                        }
                    };
                    LoginClient.prototype._registrationRequest = function(user) {
                        this._showLoading();
                        this._requestData = user;
                        return this._request(this._registrationResponse, 'v3/registration', user, true);
                    };
                    LoginClient.prototype._registrationResponse = function(data, err) {
                        var captchaRegenerate;
                        if (err == null) {
                            err = null;
                        }
                        delete this._submittedForms.registrationVerificationLogin;
                        this._hideLoading();
                        if (err || (data == null)) {
                            this.showTechnicalError();
                            return false;
                        }
                        if (data.err != null) {
                            captchaRegenerate = function() {
                                if ((typeof Recaptcha !== "undefined" && Recaptcha !== null ? Recaptcha.reload : void 0) != null) {
                                    return Recaptcha.reload();
                                }
                            };
                            switch (data.err) {
                                case this.errorCodes.captchaMissmatch:
                                    captchaRegenerate();
                                    this._$(this._requestForm).find('#recaptcha_response_field').addClass('err-input');
                                    this._addErrorToForm(this._requestForm, '#recaptcha_response_field', this.trans('captchaError'));
                                    this._showErrorMessageBox(this._requestForm);
                                    break;
                                case this.errorCodes.registrationDuplicate:
                                    captchaRegenerate();
                                    this._$(this._requestForm).find('#email').addClass('err-input');
                                    this._addErrorToForm(this._requestForm, '#email', this.trans('emailUsedError'));
                                    if (typeof grecaptcha === "undefined" || grecaptcha === null) {
                                        this._$(this._requestForm).find('#recaptcha_response_field').addClass('err-input');
                                    }
                                    this._showErrorMessageBox(this._requestForm);
                                    break;
                                default:
                                    this._hideDialog();
                            }
                            return false;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._highlightWindowManager.changeActive("lsidHide");
                            this._registrationOkMessage(this._requestData.email);
                            this._requestData = null;
                            this._display();
                            this._runCallback('registration');
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._registrationOkMessage = function(email) {
                        var header, message, msgDiv;
                        msgDiv = this._$(document.createElement('div'));
                        msgDiv.addClass(this._elementId + "-messages");
                        header = this._$(document.createElement('div'));
                        header.addClass("header-message");
                        msgDiv.append(header);
                        message = this._$(document.createElement('div'));
                        message.addClass("message");
                        message.html(this.trans('registrationOk').replace('%s', email));
                        msgDiv.append(message);
                        message = this._$(document.createElement('div'));
                        message.addClass("message");
                        message.addClass("info");
                        message.html(this.trans('registrationOkNote'));
                        msgDiv.append(message);
                        return this._showDialog(msgDiv);
                    };
                    LoginClient.prototype._verification = function(form) {
                        var err, user;
                        if (this._submittedForms.registrationVerificationLogin) {
                            return;
                        }
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        user = {
                            id: form.id.value,
                            code: form.verificationcode.value
                        };
                        if (!this.verificationCodeRegexp.test(user.code)) {
                            form.verificationcode.value = '';
                            this._$(form).find('#verificationcode').addClass('err-input');
                            this._addErrorToForm(form, '#verificationcode', this.trans('verificationCodeError'));
                            err++;
                        }
                        if (!err) {
                            this._submittedForms.registrationVerificationLogin = true;
                            this._requestForm = form;
                            this._verificationRequest(user);
                            return true;
                        } else {
                            this._showErrorMessageBox(form);
                            return false;
                        }
                    };
                    LoginClient.prototype._verificationRequest = function(user) {
                        this._showLoading();
                        this._requestData = user;
                        return this._request(this._verificationResponse, 'v3/verification', user, true);
                    };
                    LoginClient.prototype._verificationOkProceed = function() {
                        var loginJq, message, msgDiv;
                        msgDiv = this._$(document.createElement('div'));
                        msgDiv.addClass(this._elementId + "-messages");
                        message = this._$(document.createElement('div'));
                        message.addClass("message");
                        message.text(this.trans('verificationOk'));
                        msgDiv.append(message);
                        loginJq = [{
                            "selector": "#login-form",
                            "functionName": "prepend",
                            "params": [msgDiv]
                        }];
                        return this.showDialog('login', loginJq);
                    };
                    LoginClient.prototype._verificationResponse = function(data, err) {
                        var ref, ref1, ref2;
                        if (err == null) {
                            err = null;
                        }
                        delete this._submittedForms.registrationVerificationLogin;
                        this._hideLoading();
                        if (err || (data == null)) {
                            this.showTechnicalError();
                            return false;
                        }
                        if (data.err != null) {
                            switch (data.err) {
                                case this.errorCodes.verificationFail:
                                    if (((ref = this._requestForm) != null ? ref.verification : void 0) != null) {
                                        if ((ref1 = this._requestForm) != null ? (ref2 = ref1.verificationcode) != null ? ref2.value : void 0 : void 0) {
                                            this._requestForm.verificationcode.value = '';
                                        }
                                        this._$(this._requestForm).find('#verificationcode').addClass('err-input');
                                        this._addErrorToForm(this._requestForm, '#verificationcode', this.trans('verificationCodeError'));
                                        this._showErrorMessageBox(this._requestForm);
                                    } else {
                                        this._showMessage(this.trans('verificationCodeError'), true);
                                    }
                                    break;
                                default:
                                    this._hideDialog();
                            }
                            return false;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._requestData = null;
                            this._requestForm = null;
                            this._verificationOkProceed;
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._login = function(form) {
                        var err, user;
                        this._cleanCred();
                        if (this._submittedForms.registrationVerificationLogin) {
                            return;
                        }
                        this._$(form).find('.lsid-messages').remove();
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        user = {
                            email: form.email.value,
                            password: form.passwd.value
                        };
                        if (form.persistentlogin.checked) {
                            user.persistent = 1;
                        }
                        if (!this.mailRegexp.test(user.email)) {
                            this._$(form).find('#email').addClass('err-input');
                            this._addErrorToForm(form, '#email', this.trans('emailError'));
                            err++;
                        }
                        if (!this.passwordRegexp.test(user.password)) {
                            this._$(form).find('#passwd').addClass('err-input');
                            this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                            form.passwd.value = '';
                            err++;
                        }
                        if (!err) {
                            this._submittedForms.registrationVerificationLogin = true;
                            this._transportAutocomplete(form);
                            this._requestForm = form;
                            this.persistent(user.persistent != null ? 1 : 0);
                            return this._loginRequest(user);
                        } else {
                            return this._showErrorMessageBox(form);
                        }
                    };
                    LoginClient.prototype._loginRequest = function(user) {
                        this._showLoading();
                        this._requestData = user;
                        return this._request(this._loginResponse, 'v3/login', user, true);
                    };
                    LoginClient.prototype._loginResponse = function(data, err) {
                        var ref, ref1;
                        if (err == null) {
                            err = null;
                        }
                        delete this._submittedForms.registrationVerificationLogin;
                        this._hideLoading();
                        if (err || (data == null)) {
                            this.showTechnicalError();
                            return false;
                        }
                        if (data.err != null) {
                            switch (data.err) {
                                case this.errorCodes.loginMissmatch:
                                    if ((ref = this._requestForm) != null ? (ref1 = ref.passwd) != null ? ref1.value : void 0 : void 0) {
                                        this._requestForm.passwd.value = '';
                                    }
                                    this._addErrorToForm(this._requestForm, '#email', this.trans('errSignIn'));
                                    this._showErrorMessageBox(this._requestForm);
                                    break;
                                case this.errorCodes.registrationNotConfirmed:
                                    if (this._isLoginOldTerms(data)) {
                                        if (data.id && data.hash) {
                                            this._doLoginFlow(data);
                                            this.showDialog('newTermsOfUse1', [], true);
                                            return true;
                                        }
                                        this.showTechnicalError();
                                        return false;
                                    } else {
                                        this._showMessage(this.trans('errSignInConfirm'), true, 100000);
                                        this._highlightWindowManager.changeActive("lsidHide");
                                    }
                                    break;
                                case this.errorCodes.loginProviderNeedsEmail:
                                    this.showDialog('socialRegistration', [{
                                        "selector": "form#registration-mail-form",
                                        "functionName": "submit",
                                        "params": [(function(lsid) {
                                            return function(e) {
                                                if (e != null) {
                                                    e.preventDefault();
                                                }
                                                lsid._loginUsingProviderWOemail(this);
                                                return false;
                                            };
                                        })(this)]
                                    }]);
                                    break;
                                default:
                                    this._hideDialog();
                            }
                            return false;
                        }
                        if (data.id && data.hash) {
                            this._doLoginFlow(data);
                            this._showMessage(this.trans('signInOK'));
                            this._highlightWindowManager.changeActive("login");
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype.loginAndGetUserData = function(form) {
                        var self;
                        self = this;
                        return this._login(form).then(function() {
                            return self._getUserData();
                        });
                    };
                    LoginClient.prototype.checkTermsAccepted = function(form) {
                        var user;
                        user = {
                            email: form.email.value,
                            password: form.passwd.value
                        };
                        this._requestData = user;
                        return this._checkTermsAcceptedResponse();
                    };
                    LoginClient.prototype.checkTermsAcceptedUsingProvider = function(provider, userData) {
                        var options, self, user;
                        if (provider == null) {
                            provider = null;
                        }
                        if (userData == null) {
                            userData = null;
                        }
                        self = this;
                        user = null;
                        this._showLoading();
                        if (userData) {
                            return this._requestCheckTerms('v3/loginusingprovider', userData);
                        }
                        if (this._socialAPIenabled[provider]) {
                            options = {
                                network: provider,
                                display: 'popup',
                                scope: 'email'
                            };
                            return this._socialAPI.login(provider, options).then(function(response) {
                                var ref;
                                if (((ref = response.authResponse) != null ? ref.access_token : void 0) == null) {
                                    return self._hideDialog();
                                }
                                user = {
                                    accessToken: response.authResponse.access_token,
                                    provider: provider
                                };
                                return self._socialAPI(provider).api('/me').then(function(response) {
                                    if (response.id == null) {
                                        return;
                                    }
                                    self.persistent(true);
                                    user.id = response.id;
                                    if (response.name != null) {
                                        user.name = response.name;
                                    }
                                    if (response.email != null) {
                                        user.email = response.email;
                                    }
                                    user.project = self._projectIdent;
                                    if (self._getGeoIp) {
                                        user.geoIp = self._getGeoIp();
                                    }
                                    self._requestData = user;
                                    return self._requestCheckTerms('v3/loginusingprovider', user);
                                });
                            });
                        }
                    };
                    LoginClient.prototype._checkTermsAcceptedResponse = function() {
                        this._showLoading();
                        return this._requestCheckTerms('v3/login', this._requestData);
                    };
                    LoginClient.prototype.showTermsModal = function(agreeCallback) {
                        var cb, self;
                        if (agreeCallback == null) {
                            agreeCallback = (function() {
                                return null;
                            });
                        }
                        self = this;
                        this.showDialog('newTermsOfUse1', [], true);
                        cb = function() {
                            return $("input#terms-agree").off('click').on('click', function() {
                                var et;
                                agreeCallback();
                                et = self._dic.get('utilEnviroment').getEventTrackingObject();
                                if (et) {
                                    return et.track_click('web-click', 'terms_agree');
                                }
                            });
                        };
                        this.registerCallback('showDialog/newTermsOfUse1', cb);
                        return this.registerCallback('showDialog/newTermsOfUse2', cb);
                    };
                    LoginClient.prototype._getUserData = function() {
                        var user;
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        return this._request(this._getUserDataResponse, 'v3/getdata', user, true);
                    };
                    LoginClient.prototype._getUserDataResponse = function(data) {
                        var ref, ref1;
                        if (data == null) {
                            this._highlightWindowManager.changeActive("lsidHide");
                            this.showTechnicalError();
                            return false;
                        }
                        if (data.err != null) {
                            return false;
                        }
                        this.email(data.profile.email);
                        this._requestData = null;
                        this._requestForm = null;
                        this.name(data.profile.name);
                        this._data = (ref = data.data) != null ? ref : {};
                        this._privateData = (ref1 = data.privateData) != null ? ref1 : {};
                        this._storeDataLocal();
                        this._storePrivateDataLocal();
                        this._display();
                        this._startDataAutosync();
                        this._runCallback('login');
                        return true;
                    };
                    LoginClient.prototype._loginUsingProvider = function(provider, popup) {
                        var options;
                        if (popup == null) {
                            popup = true;
                        }
                        if (this._socialAPIenabled[provider]) {
                            options = {
                                network: provider,
                                display: popup ? 'popup' : 'none',
                                scope: 'email'
                            };
                            return this._socialAPI.login(provider, options).then((function(lsid) {
                                return function(response) {
                                    var ref, user;
                                    if (((ref = response.authResponse) != null ? ref.access_token : void 0) == null) {
                                        return lsid._hideDialog();
                                    }
                                    user = {
                                        accessToken: response.authResponse.access_token,
                                        provider: provider
                                    };
                                    return lsid._socialAPI(provider).api('/me').then(function(response) {
                                        if (response.id == null) {
                                            return;
                                        }
                                        lsid.persistent(true);
                                        user.id = response.id;
                                        if (response.name != null) {
                                            user.name = response.name;
                                        }
                                        if (response.email != null) {
                                            user.email = response.email;
                                        }
                                        user.project = lsid._projectIdent;
                                        if (lsid._getGeoIp) {
                                            user.geoIp = lsid._getGeoIp();
                                        }
                                        return lsid._loginRequestUsingProvider(user);
                                    });
                                };
                            })(this));
                        }
                    };
                    LoginClient.prototype._loginRequestUsingProvider = function(user) {
                        this._cleanCred();
                        this._showLoading();
                        this._requestData = user;
                        return this._requestPromise(this._loginResponse, 'v3/loginusingprovider', user, true);
                    };
                    LoginClient.prototype._loginUsingProviderWOemail = function(form) {
                        var err;
                        if (this._submittedForms.loginUsingProviderWOemail) {
                            return;
                        }
                        if (this._requestData == null) {
                            return this._hideDialog();
                        }
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        this._requestData.realEmail = form.email.value;
                        if (!this.mailRegexp.test(this._requestData.realEmail)) {
                            this._$(form).find('#email').addClass('err-input');
                            this._addErrorToForm(form, '#email', this.trans('emailError'));
                            err++;
                        }
                        if (!err) {
                            this._submittedForms.loginUsingProviderWOemail = true;
                            return this._loginRequestUsingProviderWOemail(this._requestData);
                        } else {
                            return this._showErrorMessageBox(form);
                        }
                    };
                    LoginClient.prototype._loginUsingProviderWOemailResponse = function(data, err) {
                        var message, msgDiv;
                        if (err == null) {
                            err = null;
                        }
                        delete this._submittedForms.loginUsingProviderWOemail;
                        this._hideLoading();
                        if (err || (data == null)) {
                            this.showTechnicalError();
                            return false;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            msgDiv = this._$(document.createElement('div'));
                            msgDiv.addClass(this._elementId + "-messages");
                            message = this._$(document.createElement('div'));
                            message.addClass("message");
                            message.html(this.trans('registrationOk').replace('%s', this._requestData.realEmail));
                            msgDiv.append(message);
                            message = this._$(document.createElement('div'));
                            message.addClass("message");
                            message.addClass("info");
                            message.html(this.trans('registrationOkNote'));
                            msgDiv.append(message);
                            this._showDialog(msgDiv);
                            this._requestData = null;
                            this._display();
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._loginRequestUsingProviderWOemail = function(user) {
                        this._showLoading();
                        this._requestData = user;
                        return this._request(this._loginUsingProviderWOemailResponse, 'loginusingproviderwoemail', user, true);
                    };
                    LoginClient.prototype._logoutProcess = function() {
                        var user;
                        this._drop(this._dataStorageKey);
                        this._drop(this._privateDataStorageKey);
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        this._drop('email');
                        this._drop('name');
                        this._drop('id');
                        this._drop('hash');
                        this._browserDataSign = Math.random() + "";
                        this._store(this._dataStorageSignKey, this._browserDataSign);
                        this._display();
                        if (this._useOnlyLocal) {
                            this._removeDataForLocalUsage();
                        }
                        if (!(user.loggedIn.id || user.loggedIn.hash)) {
                            return;
                        }
                        return this._logoutRequest(user);
                    };
                    LoginClient.prototype._logout = function(confirmation) {
                        if (confirmation == null) {
                            confirmation = true;
                        }
                        if (!confirmation || confirm(this.trans('signOutConfirm'))) {
                            this._logoutProcess();
                            this._highlightWindowManager.changeActive("logout");
                            return this._showMessage(this.trans('signOutOk'));
                        }
                    };
                    LoginClient.prototype._logoutHashMismatch = function() {
                        this._logoutProcess();
                        return this._showMessage(this.trans('serverLogout'), true, 10);
                    };
                    LoginClient.prototype._logoutRequest = function(user) {
                        this._request(null, 'v3/logout', user);
                        return this._runCallback('logout');
                    };
                    LoginClient.prototype._forgottenPassword = function(form) {
                        var err, user;
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        user = {
                            email: form.email.value,
                            p: this._projectIdent
                        };
                        if (!this.mailRegexp.test(user.email)) {
                            this._$(form).find('#email').addClass('err-input');
                            this._addErrorToForm(form, '#email', this.trans('emailError'));
                            err++;
                        }
                        if (!err) {
                            this._requestForm = form;
                            return this._forgottenPasswordRequest(user);
                        } else {
                            return this._showErrorMessageBox(form);
                        }
                    };
                    LoginClient.prototype._forgottenPasswordRequest = function(user) {
                        this._requestData = user;
                        return this._request(this._forgottenPasswordResponse, 'v3/forgottenpassword', user);
                    };
                    LoginClient.prototype._forgottenPasswordResponse = function(data, err) {
                        if (err == null) {
                            err = null;
                        }
                        if (err || (data == null)) {
                            this.showTechnicalError();
                            return false;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._requestData = null;
                            this._requestForm = null;
                            this._highlightWindowManager.changeActive("lsidHide");
                            this._showMessage(this.trans('forgottenPasswordSendOk'));
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._passwordChange = function(form) {
                        var err, prePassCheckErrCount, ref, user;
                        this._$(form).find('.err-msg').remove();
                        this._$(form).find('.err-input').removeClass('err-input');
                        this._hideErrorMessageBox(form);
                        err = 0;
                        user = {
                            id: this.id(),
                            newpassword: form.newpasswd.value
                        };
                        if ((((ref = form.code) != null ? ref.value : void 0) != null) && this.verificationCodeRegexp.test(form.code.value)) {
                            user.code = form.code.value;
                        }
                        if (form.passwd != null) {
                            user.password = form.passwd.value;
                        }
                        if ((user.password == null) && (user.code == null)) {
                            this._showMessage(this.trans('verificationPassChangeCodeError'), true);
                        }
                        if ((user.password != null) && !this.passwordRegexp.test(user.password)) {
                            this._$(form).find('#passwd').addClass('err-input');
                            this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                            form.passwd.value = '';
                        }
                        prePassCheckErrCount = err;
                        if (!this.passwordRegexp.test(user.newpassword)) {
                            this._$(form).find('#newpasswd').addClass('err-input');
                            this._addErrorToForm(form, '#newpasswd', this.trans('passwordError'));
                            err++;
                        } else {
                            if (user.newpassword !== form.passwdagain.value) {
                                this._$(form).find('#newpasswd').addClass('err-input');
                                this._$(form).find('#passwdagain').addClass('err-input');
                                this._addErrorToForm(form, '#passwdagain', this.trans('passwordMissmatchError'));
                                err++;
                            }
                        }
                        if (prePassCheckErrCount < err) {
                            form.newpasswd.value = '';
                            form.passwdagain.value = '';
                        }
                        if (!err) {
                            this._requestForm = form;
                            return this._passwordChangeRequest(user);
                        } else {
                            return this._showErrorMessageBox(form);
                        }
                    };
                    LoginClient.prototype._passwordChangeRequest = function(user) {
                        this._requestData = user;
                        return this._request(this._passwordChangeResponse, 'v3/passwordchange', user);
                    };
                    LoginClient.prototype._passwordChangeResponse = function(data, err) {
                        var ref, ref1;
                        if (err == null) {
                            err = null;
                        }
                        if (err || (data == null)) {
                            this._highlightWindowManager.changeActive("lsidHide");
                            this.showTechnicalError();
                            return false;
                        }
                        if (data.err != null) {
                            switch (data.err) {
                                case this.errorCodes.verificationFail:
                                    if (this._requestData.password) {
                                        if ((ref = this._requestForm) != null ? (ref1 = ref.passwd) != null ? ref1.value : void 0 : void 0) {
                                            this._requestForm.passwd.value = '';
                                        }
                                        this._$(this._requestForm).find('#passwd').addClass('err-input');
                                        this._addErrorToForm(this._requestForm, '#passwd', this.trans('passwordChangeFail'));
                                        this._showErrorMessageBox(this._requestForm);
                                    } else {
                                        this._highlightWindowManager.changeActive("lsidHide");
                                        this._showMessage(this.trans('verificationPassChangeCodeError'), true);
                                    }
                                    break;
                                default:
                                    this._hideDialog();
                            }
                            return false;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._requestData = null;
                            this._requestForm = null;
                            this._highlightWindowManager.changeActive("lsidHide");
                            this._showMessage(this.trans('passwordChangeOk'));
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._isLoginOldTerms = function(data) {
                        return (data.err2 != null) && data.err2 === this.errorCodes.termsConfrimationNeeded;
                    };
                    LoginClient.prototype._doLoginFlow = function(data) {
                        var hash, id;
                        if (data == null) {
                            data = null;
                        }
                        if (data) {
                            this.id(data.id);
                            this.hash(data.hash);
                        } else {
                            this._hideDialog();
                            id = this._id;
                            hash = this._hash;
                            this._cleanCred();
                            this.id(id);
                            this.hash(hash);
                            this._showMessage(this.trans('signInOK'));
                        }
                        if (data && (data.err != null)) {
                            return false;
                        }
                        return true;
                    };
                    LoginClient.prototype._reloadDataRemote = function() {
                        var user;
                        if (!this.loggedIn()) {
                            return null;
                        }
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        return this._request(this._reloadDataRemoteResponse, 'v3/getdata', user, true);
                    };
                    LoginClient.prototype._reloadDataRemoteResponse = function(data, err) {
                        var dataDiff, dataDiffs, diffParts, j, k, len1, len2, privateDataDiffs, results;
                        if (err == null) {
                            err = null;
                        }
                        if (data == null) {
                            return;
                        }
                        if (data.err != null) {
                            if (this._isLoginOldTerms(data)) {
                                this.showDialog('newTermsOfUse1', [], true);
                                return false;
                            } else {
                                return this._logoutHashMismatch();
                            }
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            dataDiffs = this.objectsDiff(data.data, this._data);
                            privateDataDiffs = this.objectsDiff(data.privateData, this._privateData);
                            if (dataDiffs.length) {
                                this._data = data.data;
                                this._storeDataLocal();
                                this._runCallback('dataSyncChange');
                                for ((j = 0, len1 = dataDiffs.length); j < len1; j++) {
                                    dataDiff = dataDiffs[j];
                                    if (dataDiff.indexOf(';') !== -1) {
                                        continue;
                                    }
                                    diffParts = dataDiff.split('|');
                                    if (diffParts[1] != null) {
                                        this._runCallback("dataSyncChange/" + diffParts[1], diffParts[0]);
                                    }
                                }
                            }
                            if (privateDataDiffs.length) {
                                this._privateData = data.privateData;
                                this._storePrivateDataLocal();
                                results = [];
                                for ((k = 0, len2 = privateDataDiffs.length); k < len2; k++) {
                                    dataDiff = privateDataDiffs[k];
                                    if (dataDiff.indexOf(';') !== -1) {
                                        continue;
                                    }
                                    diffParts = dataDiff.split('|');
                                    if (diffParts[1] != null) {
                                        results.push(this._runCallback("dataSyncChange/" + diffParts[1]));
                                    } else {
                                        results.push(void 0);
                                    }
                                }
                                return results;
                            }
                        }
                    };
                    LoginClient.prototype._dataAutosync = function(force) {
                        var timestamp;
                        if (force == null) {
                            force = false;
                        }
                        if (!this.loggedIn()) {
                            return clearInterval(this._dataAutosyncIntervalId);
                        }
                        timestamp = this._getTime();
                        if (!force) {
                            if ((this._dataAutosyncLastDataEdit + this._requestTimeout) > timestamp) {
                                return;
                            }
                            if ((this._dataAutosyncLastSync + this._dataAutosyncRequestInterval) > timestamp) {
                                return;
                            }
                        }
                        this._store('dataAutosyncRequest', timestamp);
                        this._dataAutosyncLastSync = timestamp;
                        return this._reloadDataRemote();
                    };
                    LoginClient.prototype._startDataAutosync = function() {
                        this._dataAutosync();
                        return setTimeout((function(lsid) {
                            return function() {
                                return lsid._dataAutosyncIntervalId = setInterval(function() {
                                    return lsid._dataAutosync();
                                }, lsid._dataAutosyncInterval);
                            };
                        })(this), Math.floor(Math.random() * this._dataAutosyncRequestInterval));
                    };
                    LoginClient.prototype._dataAutosyncBrowser = function() {
                        var dataDiffs, oldData, oldPrivateData, privateDataDiffs;
                        if (this._browserDataSign === this._read(this._dataStorageSignKey)) {
                            return;
                        }
                        this._browserDataSign = this._read(this._dataStorageSignKey);
                        oldData = this._$.extend({}, this._data, true);
                        oldPrivateData = this._$.extend({}, this._privateData, true);
                        this._loadData();
                        dataDiffs = this.objectsDiff(this._data, oldData);
                        privateDataDiffs = this.objectsDiff(this._privateData, oldPrivateData);
                        this._display();
                        if (this._useOnlyLocal || this.loggedIn()) {
                            if (dataDiffs.length || privateDataDiffs.length) {
                                return this._runAutosyncCallbacks(dataDiffs.concat(privateDataDiffs));
                            } else {
                                return this._runCallback('login');
                            }
                        } else {
                            return this._runCallback('logout');
                        }
                    };
                    LoginClient.prototype._runAutosyncCallbacks = function(dataDiffs) {
                        var dataDiff, diffParts, j, len1, results;
                        results = [];
                        for ((j = 0, len1 = dataDiffs.length); j < len1; j++) {
                            dataDiff = dataDiffs[j];
                            if (dataDiff.indexOf(';') !== -1) {
                                continue;
                            }
                            diffParts = dataDiff.split('|');
                            if (diffParts[1] != null) {
                                results.push(this._runCallback("dataSyncChange/" + diffParts[1], diffParts[0]));
                            } else {
                                results.push(void 0);
                            }
                        }
                        return results;
                    };
                    LoginClient.prototype._startDataAutosyncBrowser = function() {
                        return this._dataAutosyncBrowserIntervalId = setInterval((function(_this) {
                            return function() {
                                return _this._dataAutosyncBrowser();
                            };
                        })(this), this._dataAutosyncBrowserInterval);
                    };
                    LoginClient.prototype._storeDataLocal = function() {
                        this._browserDataSign = Math.random() + "";
                        return this._store(this._dataStorageSignKey, this._browserDataSign);
                    };
                    LoginClient.prototype._storePrivateDataLocal = function() {
                        this._store(this._privateDataStorageKey, JSON.stringify(this._privateData));
                        this._browserDataSign = Math.random() + "";
                        return this._store(this._dataStorageSignKey, this._browserDataSign);
                    };
                    LoginClient.prototype._storeMergedDataRemote = function(user, confirmCallback, failCallback) {
                        user.dataDiff = JSON.stringify(user.dataDiff);
                        return this._request(this._storeRemoveDataRemoteResponseCreate(confirmCallback, failCallback), 'v3/storemergeddata', user);
                    };
                    LoginClient.prototype._storeRemoveDataRemoteResponseCreate = function(confirmCallback, failCallback) {
                        if (!this.isFunction(confirmCallback)) {
                            confirmCallback = function() {};
                        }
                        if (!this.isFunction(failCallback)) {
                            failCallback = function() {};
                        }
                        return function(data, err) {
                            if (err == null) {
                                err = null;
                            }
                            if (err || (data == null)) {
                                this._runAsyncCallback(failCallback);
                                return false;
                            }
                            if (data.err != null) {
                                if (this._isLoginOldTerms(data)) {
                                    this.showDialog('newTermsOfUse1', [], true);
                                    return false;
                                } else {
                                    this._logoutHashMismatch();
                                    this._runAsyncCallback(failCallback);
                                    return false;
                                }
                            }
                            if ((data.r != null) && data.r === this.respCodes.done) {
                                this._runAsyncCallback(confirmCallback);
                                return true;
                            }
                        };
                    };
                    LoginClient.prototype.showTechnicalError = function() {
                        return this._showMessage(this.trans('errTechnical'), true);
                    };
                    LoginClient.prototype.showDialog = function(dialogName, elemsSettings, dialogHideDisabled) {
                        var callback, content, ref;
                        if (elemsSettings == null) {
                            elemsSettings = [];
                        }
                        if (dialogHideDisabled == null) {
                            dialogHideDisabled = false;
                        }
                        content = null;
                        if ((((ref = this.dialogs[dialogName]) != null ? ref.content : void 0) != null) && this.dialogs[dialogName].content) {
                            if (this.isFunction(this.dialogs[dialogName].content)) {
                                content = this.dialogs[dialogName].content(this);
                            } else {
                                content = this.dialogs[dialogName].content;
                            }
                        }
                        if (content) {
                            callback = (function(lsid, dialogName) {
                                return function() {
                                    lsid._showDialogTrigger(dialogName);
                                    return lsid._runJqueryOnElems(elemsSettings);
                                };
                            })(this, dialogName);
                            this._showDialog(content, callback, null, true, dialogName, dialogHideDisabled);
                        } else {
                            this._showDialogTrigger(dialogName);
                        }
                        if (!(content || dialogName === 'shared')) {
                            return this.showDialog('shared', elemsSettings);
                        }
                    };
                    LoginClient.prototype.hideDialog = function(method) {
                        if (method == null) {
                            method = null;
                        }
                        return this._hideDialog(method);
                    };
                    LoginClient.prototype.logoutWithoutConfirm = function() {
                        return this._logout(false);
                    };
                    LoginClient.prototype.agreeWithTerms = function(showSuccessMessage) {
                        if (showSuccessMessage == null) {
                            showSuccessMessage = false;
                        }
                        return this._agreeWithTermsRemote(showSuccessMessage);
                    };
                    LoginClient.prototype._agreeWithTermsRemote = function(showSuccessMessage) {
                        var agreeWithTermsResponse, data, self;
                        if (!this.loggedIn()) {
                            return null;
                        }
                        data = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        self = this;
                        agreeWithTermsResponse = function() {
                            var agreed;
                            agreed = self._agreeWithTermsRemoteResponse;
                            if (showSuccessMessage) {
                                if (agreed) {
                                    return self._showMessage(this.trans('newTermsOfUseSuccess'));
                                }
                            }
                        };
                        return this._request(agreeWithTermsResponse, 'v3/termsagree', data, true);
                    };
                    LoginClient.prototype._agreeWithTermsRemoteResponse = function(data, err) {
                        if (err == null) {
                            err = null;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._highlightWindowManager.changeActive("lsidHide");
                            this._getUserData();
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype.deleteAccount = function() {
                        return this._deleteAccountRemote();
                    };
                    LoginClient.prototype._deleteAccountRemote = function() {
                        var user;
                        if (!this.loggedIn()) {
                            return null;
                        }
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        return this._request(this._deleteAccountRemoteResponse, 'v3/deleteaccount', user, true);
                    };
                    LoginClient.prototype._deleteAccountRemoteResponse = function(data, err) {
                        if (err == null) {
                            err = null;
                        }
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._showMessage(this.trans('deleteAccountSuccessful'));
                            this._highlightWindowManager.changeActive("lsidHide");
                            this._logoutProcess();
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype.loginFill = function(form) {
                        if (!form) {
                            return false;
                        }
                        this._$(form).find("#email").replaceWith(this._transportFormEmail);
                        this._$(form).find("#passwd").replaceWith(this._transportFormPasswd);
                        return true;
                    };
                    LoginClient.prototype.formFocus = function(form) {
                        return this._$(form).find('input:not(:disabled)').each((function(jquery) {
                            return function() {
                                if (this.type === 'text' || this.type === 'password') {
                                    jquery(this).focus();
                                    return false;
                                }
                                return true;
                            };
                        })(this._$));
                    };
                    LoginClient.prototype._runJqueryOnElems = function(elemsSettings) {
                        var elemSetting, j, len1, results;
                        if (elemsSettings == null) {
                            elemsSettings = [];
                        }
                        results = [];
                        for ((j = 0, len1 = elemsSettings.length); j < len1; j++) {
                            elemSetting = elemsSettings[j];
                            if (!((elemSetting.selector != null) && (elemSetting.functionName != null) && (elemSetting.params != null))) {
                                continue;
                            }
                            if ($()[elemSetting.functionName] != null) {
                                results.push($()[elemSetting.functionName].apply($(elemSetting.selector), elemSetting.params));
                            } else {
                                results.push(void 0);
                            }
                        }
                        return results;
                    };
                    LoginClient.prototype._runAsyncCallback = function(callback, params) {
                        if (params == null) {
                            params = [];
                        }
                        if (!this.isFunction(callback)) {
                            callback = function() {};
                        }
                        return setTimeout((function(lsid, callbackFunction) {
                            return function() {
                                return callbackFunction.apply(lsid, params);
                            };
                        })(this, callback), 0);
                    };
                    LoginClient.prototype._runCallback = function(triggerName, param) {
                        var callback, j, len1, ref, results;
                        if (triggerName == null) {
                            triggerName = '';
                        }
                        if (param == null) {
                            param = null;
                        }
                        if (this._callbacks[triggerName] != null) {
                            ref = this._callbacks[triggerName];
                            results = [];
                            for ((j = 0, len1 = ref.length); j < len1; j++) {
                                callback = ref[j];
                                results.push(this._runAsyncCallback(callback, [param]));
                            }
                            return results;
                        }
                    };
                    LoginClient.prototype.loggedIn = function() {
                        return this.id() && this.hash();
                    };
                    LoginClient.prototype.getData = function(key) {
                        var dataPart, j, keyPart, keyParts, len1;
                        if (key == null) {
                            key = false;
                        }
                        if (!this.userFunctionsAreAvailable(key)) {
                            return null;
                        }
                        if (!key) {
                            return this._data;
                        }
                        dataPart = this._data;
                        keyParts = key.split('.');
                        for ((j = 0, len1 = keyParts.length); j < len1; j++) {
                            keyPart = keyParts[j];
                            if (dataPart == null) {
                                break;
                            }
                            dataPart = dataPart[keyPart] != null ? dataPart[keyPart] : null;
                        }
                        return dataPart;
                    };
                    LoginClient.prototype.storeData = function(data, key, confirmCallback, failCallback) {
                        var keyParts, subKey, upperData;
                        if (data == null) {
                            data = {};
                        }
                        if (key == null) {
                            key = false;
                        }
                        if ((!this.isObject(data)) && key) {
                            if (!this.userFunctionsAreAvailable(key)) {
                                return null;
                            }
                            this._forceDataAutosyncBrowser();
                            keyParts = key.split('.');
                            subKey = keyParts.pop();
                            key = keyParts.join('.');
                            upperData = this.getData(key);
                            if (this.isObject(upperData)) {
                                upperData = this.objectClone(upperData);
                            } else {
                                upperData = {};
                            }
                            upperData[subKey] = data;
                            data = upperData;
                        }
                        return this.storeMergedData(data, key, confirmCallback, failCallback);
                    };
                    LoginClient.prototype._removeDataTree = function(key, data) {
                        var actualKey, anyKey, deletedKey, firstDotIndex, restOfKey;
                        if (data == null) {
                            data = {
                                part: this._data
                            };
                        }
                        if (key == null) {
                            return;
                        }
                        firstDotIndex = key.indexOf('.');
                        if (firstDotIndex === -1) {
                            delete data.part[key];
                            return key;
                        } else {
                            actualKey = key.substring(0, firstDotIndex);
                            if (data.part[actualKey] == null) {
                                return key;
                            }
                            restOfKey = key.substring(firstDotIndex + 1);
                            deletedKey = this._removeDataTree(restOfKey, {
                                part: data.part[actualKey]
                            });
                            for (anyKey in data.part[actualKey]) {
                                return deletedKey;
                            }
                            delete data.part[actualKey];
                            return actualKey + '.' + deletedKey;
                        }
                    };
                    LoginClient.prototype.tryDataAutosync = function(lastSyncObject) {
                        var lastSyncTimestamp;
                        lastSyncTimestamp = 0;
                        if (typeof lastSyncObject === "number") {
                            lastSyncTimestamp = lastSyncObject;
                        } else if ((lastSyncObject.hash != null) && (lastSyncObject.time != null)) {
                            if (this.hash() === lastSyncObject.hash) {
                                return;
                            }
                            lastSyncTimestamp = lastSyncObject.time;
                        }
                        if (this._dataAutosyncLastSync < lastSyncTimestamp) {
                            return this._dataAutosync(true);
                        }
                    };
                    LoginClient.prototype.removeData = function(key, confirmCallback, failCallback, onlyLocal) {
                        var firstDotIndex, loggedOut, removedTree, useOnlyLocal, user;
                        if (key == null) {
                            key = false;
                        }
                        if (onlyLocal == null) {
                            onlyLocal = false;
                        }
                        useOnlyLocal = this._existsForLocalUsage(key);
                        loggedOut = !this.loggedIn();
                        if (!useOnlyLocal && loggedOut) {
                            return null;
                        }
                        this._forceDataAutosyncBrowser();
                        if (!key) {
                            this._data = {};
                        } else {
                            removedTree = this._removeDataTree(key);
                            if (removedTree) {
                                firstDotIndex = removedTree.indexOf('.');
                                if (firstDotIndex !== -1) {
                                    removedTree = removedTree.substring(firstDotIndex);
                                    key = key.replace(RegExp(removedTree + "$"), '');
                                }
                            }
                        }
                        this._storeDataLocal();
                        if (useOnlyLocal && loggedOut) {
                            confirmCallback();
                            return true;
                        }
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            },
                            dataDiff: {
                                merge: {},
                                unmerge: [key]
                            },
                            key: ''
                        };
                        this._storeMergedDataRemote(user, confirmCallback, failCallback);
                        return true;
                    };
                    LoginClient.prototype.storeMergedData = function(data, key, confirmCallback, failCallback) {
                        var dataDiff, dataDiffObj, diff, j, keyDiff, len1, loggedOut, oldData, useOnlyLocal, user;
                        if (confirmCallback == null) {
                            confirmCallback = function() {};
                        }
                        if (failCallback == null) {
                            failCallback = function() {};
                        }
                        useOnlyLocal = this._existsForLocalUsage(key);
                        loggedOut = !this.loggedIn();
                        if (!useOnlyLocal && loggedOut) {
                            return false;
                        }
                        this._forceDataAutosyncBrowser();
                        oldData = this.getData(key);
                        dataDiff = this.objectsDiff(data, oldData);
                        this._updateLocalData(data, key);
                        if (useOnlyLocal && loggedOut) {
                            confirmCallback();
                            return true;
                        }
                        dataDiffObj = {};
                        for ((j = 0, len1 = dataDiff.length); j < len1; j++) {
                            diff = dataDiff[j];
                            dataDiffObj[diff] = diff.substr(2).replace(/;[\+\-\*]\|/g, ".");
                        }
                        for (keyDiff in dataDiffObj) {
                            if (keyDiff.indexOf("*") !== -1) {
                                keyDiff = keyDiff.replace(/(^|;)[^;]+$/, "");
                                delete dataDiffObj[keyDiff];
                            }
                        }
                        user = {
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            },
                            dataDiff: {
                                merge: {},
                                unmerge: []
                            },
                            key: key
                        };
                        for (keyDiff in dataDiffObj) {
                            diff = dataDiffObj[keyDiff];
                            if (keyDiff.indexOf('-|') !== -1) {
                                user.dataDiff.unmerge.push(diff);
                            } else {
                                user.dataDiff.merge[diff] = this.getData(key ? key + '.' + diff : diff);
                            }
                        }
                        this._storeMergedDataRemote(user, confirmCallback, failCallback);
                        return true;
                    };
                    LoginClient.prototype.updateUser = function(email) {
                        var user;
                        if (!this.loggedIn()) {
                            return null;
                        }
                        user = {
                            email: email,
                            loggedIn: {
                                id: this.id(),
                                hash: this.hash()
                            }
                        };
                        return this._request(this._updateUserResponse, 'v3/update-user', user, true);
                    };
                    LoginClient.prototype._updateUserResponse = function(data) {
                        if ((data.r != null) && data.r === this.respCodes.done) {
                            this._getUserData();
                            return true;
                        }
                        this.showTechnicalError();
                        return false;
                    };
                    LoginClient.prototype._updateLocalData = function(data, key) {
                        var dataPart, depth, j, keyPart, keyParts, len1, prevKeyPart, storeDepth;
                        if (data == null) {
                            data = {};
                        }
                        if (key == null) {
                            key = false;
                        }
                        if (!this.userFunctionsAreAvailable(key)) {
                            return false;
                        }
                        if (!key) {
                            this._data = data;
                        } else {
                            dataPart = null;
                            keyParts = key.split('.');
                            storeDepth = keyParts.length - 1;
                            if (storeDepth === 0) {
                                this._data[key] = data;
                            } else {
                                for ((depth = j = 0, len1 = keyParts.length); j < len1; depth = ++j) {
                                    keyPart = keyParts[depth];
                                    if (dataPart == null) {
                                        if (this._data[keyPart] == null) {
                                            this._data[keyPart] = {};
                                        }
                                        prevKeyPart = keyPart;
                                        dataPart = this._data;
                                    } else {
                                        if (dataPart[prevKeyPart][keyPart] == null) {
                                            dataPart[prevKeyPart][keyPart] = {};
                                        }
                                        if (storeDepth === depth) {
                                            dataPart[prevKeyPart][keyPart] = data;
                                        }
                                        dataPart = dataPart[prevKeyPart];
                                        prevKeyPart = keyPart;
                                    }
                                }
                            }
                        }
                        this._storeDataLocal();
                        return true;
                    };
                    LoginClient.prototype._forceDataAutosyncBrowser = function() {
                        this._dataAutosyncLastDataEdit = this._getTime();
                        return this._dataAutosyncBrowser();
                    };
                    LoginClient.prototype.registerCallback = function(triggerName, callback) {
                        if (triggerName == null) {
                            triggerName = '';
                        }
                        if (!this.isFunction(callback)) {
                            return false;
                        }
                        if (this._callbacks[triggerName] == null) {
                            this._callbacks[triggerName] = [];
                        }
                        return this._callbacks[triggerName].push(callback);
                    };
                    LoginClient.prototype.unregisterCallback = function(triggerName) {
                        if (this._callbacks[triggerName] != null) {
                            return this._callbacks[triggerName] = [];
                        }
                    };
                    LoginClient.prototype._setDialogWindowClass = function(_dialogWindowClass) {
                        this._dialogWindowClass = _dialogWindowClass;
                    };
                    LoginClient.prototype.addDataKeyToLocalUsage = function(dataKey) {
                        return this._dataKeyForLocalUsage[dataKey] = true;
                    };
                    LoginClient.prototype._existsForLocalUsage = function(dataKey) {
                        var dataKeyFirstPart;
                        if (!dataKey) {
                            return false;
                        }
                        dataKeyFirstPart = dataKey.split('.')[0];
                        return Object.keys(this._dataKeyForLocalUsage).indexOf(dataKeyFirstPart) !== -1;
                    };
                    LoginClient.prototype.userFunctionsAreAvailable = function(dataKey) {
                        if (dataKey == null) {
                            dataKey = null;
                        }
                        return this._existsForLocalUsage(dataKey) || !!this.loggedIn();
                    };
                    LoginClient.prototype._removeDataForLocalUsage = function() {
                        return Object.keys(this._dataKeyForLocalUsage).forEach((function(_this) {
                            return function(key) {
                                return _this._removeDataTree(key);
                            };
                        })(this));
                    };
                    LoginClient.prototype._cleanCred = function() {
                        if ((this._id != null) || (this._hash != null)) {
                            this._id = null;
                            return this._hash = null;
                        }
                    };
                    LoginClient.prototype.callLoginFlowUsingProvider = function(provider, userData, callback) {
                        var self;
                        if (provider == null) {
                            provider = null;
                        }
                        if (userData == null) {
                            userData = null;
                        }
                        if (callback == null) {
                            callback = null;
                        }
                        self = this;
                        return this.checkTermsAcceptedUsingProvider(provider, userData).then(function(isAccepted) {
                            if (isAccepted === null) {
                                return;
                            }
                            if (!isAccepted) {
                                return self.showTermsModal(function() {
                                    return self.agreeWithTerms().then(function() {
                                        self._doLoginFlow();
                                        return self._getUserData().then(function() {
                                            return typeof callback === "function" ? callback() : void 0;
                                        });
                                    });
                                });
                            } else {
                                self._doLoginFlow();
                                return self._getUserData().then(function() {
                                    return typeof callback === "function" ? callback() : void 0;
                                });
                            }
                        });
                    };
                    return LoginClient;
                })();
                if (typeof window !== "undefined" && window !== null) {
                    if (window.ls == null) {
                        window.ls = {};
                    }
                    window.lsid = function() {
                        return 0;
                    };
                    if ((base = window.ls).LoginClient == null) {
                        base.LoginClient = LoginClient;
                    }
                } else {
                    if (exports.LoginClient == null) {
                        exports.LoginClient = LoginClient;
                    }
                }
            }).call(this);
            return module.exports;
        },
        1: function(require, module, exports) {
            module.exports = {
                responseCodes: {
                    respCodes: {
                        done: 'XY1'
                    },
                    errorCodes: {
                        internalError: 'XE0',
                        loginMissmatch: 'XE1',
                        captchaMissmatch: 'XE2',
                        registrationDuplicate: 'XE3',
                        registrationNotConfirmed: 'XE4',
                        verificationFail: 'XE5',
                        loginProviderNotImplemented: 'XE6',
                        loginProviderNeedsEmail: 'XE7',
                        termsConfrimationNeeded: 'XE8',
                        appleRegistrationFail: 'XE9',
                        connectionAlreadyUsed: 'XE10'
                    }
                },
                regexp: {
                    mailRegexp: /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/,
                    passwordRegexp: /^.{5,}$/,
                    nicknameRegexp: /^([A-Za-z0-9_\-\.]){5,}$/,
                    nonemptyRegexp: /^.*([^\s]+).*$/,
                    verificationCodeRegexp: /^[a-f0-9]{40}$/
                },
                userValues: {
                    emptyNickname: '_____'
                }
            };
            return module.exports;
        }
    }, this);
    return require(0);
}).call(this, null);

/**
	RegistrationLoginClient - JS client for lsid server
 */

(function() {
    var RegistrationLoginClient,
        extend = function(child, parent) {
            for (var key in parent) {
                if (hasProp.call(parent, key)) child[key] = parent[key];
            }

            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        },
        hasProp = {}.hasOwnProperty;

    RegistrationLoginClient = (function(superClass) {
        extend(RegistrationLoginClient, superClass);

        RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY = 'registration-form';

        function RegistrationLoginClient() {
            RegistrationLoginClient.__super__.constructor.apply(this, arguments);
            this._setDialogWindowClass('registration');
            if (this.isEventTrackingEnabled()) {
                this._eventTracking = this._dic.get('utilEnviroment').getEventTrackingObject();
            }
        }

        RegistrationLoginClient.prototype.isEventTrackingEnabled = function() {
            return this._utilConfig.get('app', 'google_analytics', 'event_tracking');
        };

        RegistrationLoginClient.prototype._addErrorToForm = function(form, elementSelector, message, hideErrorMessageBox) {
            var $div;
            if (hideErrorMessageBox == null) {
                hideErrorMessageBox = false;
            }
            if (hideErrorMessageBox) {
                this._hideErrorMessageBox(form);
            }
            $div = $('<div>').attr({
                'class': 'err-msg-wrapper'
            });
            $div.html(message);
            return this._$(form).find(elementSelector).after($div);
        };

        RegistrationLoginClient.prototype._registration = function(form, grecaptchaWidgetId) {
            var err, grecaptchaPublicKey, prePassCheckErrCount, user;
            if (this._submittedForms.registrationVerificationLogin) {
                return;
            }
            this._hideErrorMessageBox(form);
            err = 0;
            grecaptchaPublicKey = this._utilConfig.get('app', 'registration', 'captcha_sitekey');
            user = {
                email: form.email.value,
                password: form.passwd.value,
                name: this.emptyName,
                project: this._projectIdent,
                termsofservice: form.termsofservice.checked,
                cX: grecaptcha.getResponse(grecaptchaWidgetId),
                cPk: grecaptchaPublicKey ? grecaptchaPublicKey : ''
            };
            grecaptcha.reset(grecaptchaWidgetId);
            if (!this.mailRegexp.test(user.email)) {
                this._$(form).find('#email').addClass('err-input');
                this._addErrorToForm(form, '#email', this.trans('emailError'));
                err++;
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                err++;
            }
            if (prePassCheckErrCount < err) {
                form.passwd.value = '';
            }
            if (!this.nonemptyRegexp.test(user.cX)) {
                this._$(form).find('#recaptcha_response_field').addClass('err-input');
                this._addErrorToForm(form, '#recaptcha_response_field', this.trans('captchaEmptyError'));
                err++;
            }
            if (!err) {
                this._submittedForms.registrationVerificationLogin = true;
                if (this._getGeoIp) {
                    user.geoIp = this._getGeoIp();
                }
                this._requestForm = form;
                return this._registrationRequest(user);
            } else {
                return this._showErrorMessageBox(form);
            }
        };

        RegistrationLoginClient.prototype._passwordChange = function(form) {
            var err, prePassCheckErrCount, ref, user;
            this._$(form).find('.err-msg').remove();
            this._$(form).find('.err-input').removeClass('err-input');
            this._hideErrorMessageBox(form);
            err = 0;
            user = {
                id: form.id.value,
                newpassword: form.newpasswd.value
            };
            if ((((ref = form.code) != null ? ref.value : void 0) != null) && this.verificationCodeRegexp.test(form.code.value)) {
                user.code = form.code.value;
            }
            if (form.passwd != null) {
                user.password = form.passwd.value;
            }
            if ((user.password == null) && (user.code == null)) {
                this._showMessage(this.trans('verificationPassChangeCodeError'), true);
            }
            if ((user.password != null) && !this.passwordRegexp.test(user.password)) {
                this._$(form).find('#passwd').addClass('err-input');
                this._addErrorToForm(form, '#passwd', this.trans('passwordError'));
                form.passwd.value = '';
            }
            prePassCheckErrCount = err;
            if (!this.passwordRegexp.test(user.newpassword)) {
                this._$(form).find('#newpasswd').addClass('err-input');
                this._addErrorToForm(form, '#newpasswd', this.trans('passwordError'));
                err++;
            }
            if (prePassCheckErrCount < err) {
                form.newpasswd.value = '';
            }
            if (!err) {
                this._requestForm = form;
                return this._passwordChangeRequest(user);
            } else {
                return this._showErrorMessageBox(form);
            }
        };

        RegistrationLoginClient.prototype._hideErrorMessageBox = function(form) {
            return this._$(form).find('.err-msg-wrapper').remove();
        };

        RegistrationLoginClient.prototype._showErrorMessageBox = function(form) {};

        RegistrationLoginClient.prototype._showMessage = function(msg, err, time, animTime) {
            var header, message, msgDiv;
            if (err == null) {
                err = false;
            }
            if (time == null) {
                time = 4;
            }
            if (animTime == null) {
                animTime = 0.2;
            }
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            header = this._$(document.createElement('div'));
            header.addClass("header-message");
            if (err) {
                header.addClass("err");
            }
            msgDiv.append(header);
            message = this._$(document.createElement('div'));
            message.addClass("message");
            if (err) {
                message.addClass("err");
            }
            message.html(msg);
            msgDiv.append(message);
            return this._showDialog(msgDiv, null, time);
        };

        RegistrationLoginClient.prototype._registrationOkMessage = function(email) {
            var createMessageBlock, header, message, msgDiv;
            createMessageBlock = (function(_this) {
                return function(text, extraClass) {
                    var message;
                    if (extraClass == null) {
                        extraClass = '';
                    }
                    message = _this._$(document.createElement('div'));
                    message.addClass("message");
                    if (extraClass) {
                        message.addClass(extraClass);
                    }
                    message.html(text);
                    return message;
                };
            })(this);
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            header = this._$(document.createElement('div'));
            header.addClass("header-message");
            msgDiv.append(header);
            message = createMessageBlock(this.trans('registrationOkLabel'), 'headline');
            msgDiv.append(message);
            message = createMessageBlock(this.trans('registrationOkInfo1').replace('%s', email));
            msgDiv.append(message);
            message = createMessageBlock(this.trans('registrationOkInfo2'));
            msgDiv.append(message);
            return this._showDialog(msgDiv, null, null, true, 'registration-ok-message');
        };

        RegistrationLoginClient.prototype._verificationOkProceed = function() {
            var loginJq, message, msgDiv;
            msgDiv = this._$(document.createElement('div'));
            msgDiv.addClass(this._elementId + "-messages");
            msgDiv.addClass("reg-version-two");
            message = this._$(document.createElement('div'));
            message.addClass("message");
            message.text(this.trans('verificationOk'));
            msgDiv.append(message);
            loginJq = [{
                "selector": "#login-content",
                "functionName": "prepend",
                "params": [msgDiv]
            }];
            loginJq.push({
                "selector": "#login-form #email",
                "functionName": "focus",
                "params": []
            });
            loginJq.push({
                "selector": "#login-form #passwd",
                "functionName": "val",
                "params": []
            });
            this._highlightWindowManager.changeActive("loginAfterActivation");
            return this.showDialog('login', loginJq);
        };

        RegistrationLoginClient.prototype.showDialog = function(dialogName, elemsSettings) {
            if (elemsSettings == null) {
                elemsSettings = [];
            }
            RegistrationLoginClient.__super__.showDialog.apply(this, arguments);
            if (this.isEventTrackingEnabled()) {
                return this._setEventTrackAttributes();
            }
        };

        RegistrationLoginClient.prototype._successLoginCallback = function() {
            var base;
            if (this.isEventTrackingEnabled()) {
                return typeof(base = this._eventTracking).track_click === "function" ? base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'log-login-no-errors') : void 0;
            }
        };

        RegistrationLoginClient.prototype._successRegistrationCallback = function() {
            var base;
            if (this.isEventTrackingEnabled()) {
                return typeof(base = this._eventTracking).track_click === "function" ? base.track_click(this.GA_EVENT_TRACKING_CATEGORY, 'reg-signup-no-errors') : void 0;
            }
        };

        RegistrationLoginClient.prototype._setEventTrackAttributes = function() {
            if (!this._callbackRegistred) {
                this._callbackRegistred = true;
                this.registerCallback('login', this._successLoginCallback);
                this.registerCallback('registration', this._successRegistrationCallback);
                this.registerCallback('hideDialog', (function(_this) {
                    return function(param) {
                        var base, base1, eventMethod;
                        eventMethod = '';
                        if (param.method) {
                            eventMethod = '-' + param.method;
                        }
                        if (param.dialogName === 'registration') {
                            if (typeof(base = _this._eventTracking).track_click === "function") {
                                base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-close-form' + eventMethod);
                            }
                        }
                        if (param.dialogName === 'login') {
                            return typeof(base1 = _this._eventTracking).track_click === "function" ? base1.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-close-form' + eventMethod) : void 0;
                        }
                    };
                })(this));
            }
            $('#registration-log-in-link a, #login-log-in-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-login-click') : void 0;
                };
            })(this));
            $('#terms-link a').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-terms') : void 0;
                };
            })(this));
            $('#lsid-window #registration').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'reg-signup-click') : void 0;
                };
            })(this));
            $('#lsid-window #login').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-login-click') : void 0;
                };
            })(this));
            return $('#lsid-window .lost-password').click((function(_this) {
                return function(e) {
                    var base;
                    return typeof(base = _this._eventTracking).track_click === "function" ? base.track_click(RegistrationLoginClient.prototype.GA_EVENT_TRACKING_CATEGORY, 'log-forgot-pass') : void 0;
                };
            })(this));
        };

        return RegistrationLoginClient;

    })(ls.LoginClient);

    if (typeof window !== "undefined" && window !== null) {
        if (window.ls == null) {
            window.ls = {};
        }
        window.lsid = function() {
            return 0;
        };
        window.ls.LoginClient = RegistrationLoginClient;
    } else {
        exports.LoginClient = RegistrationLoginClient;
    }

}).call(this);
(function() {
    var base, base1, base2, twoWayCrypt, urlDecode, urlEncode;

    twoWayCrypt = function(data, key) {
        var i, iter, j, mod, output, ref;
        iter = 0;
        mod = key.length;
        output = '';
        for (i = j = 0, ref = data.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            output += String.fromCharCode(key.charCodeAt(i % mod) ^ data.charCodeAt(i));
        }
        return output;
    };

    urlEncode = function(data) {
        var code, i, j, transportKey;
        transportKey = '';
        for (i = j = 1; j <= 8; i = ++j) {
            code = Math.floor(Math.random() * 113 - 15);
            transportKey += String.fromCharCode(code);
        }
        return encodeURIComponent(transportKey + twoWayCrypt(JSON.stringify(data), transportKey));
    };

    urlDecode = function(data) {
        var crypted, transportKey;
        data = decodeURIComponent(data);
        crypted = data.substr(8);
        transportKey = data.substr(0, 8);
        return JSON.parse(twoWayCrypt(crypted, transportKey));
    };

    if (typeof window !== "undefined" && window !== null) {
        if (window.ls == null) {
            window.ls = {};
        }
        if ((base = window.ls).twoWayCrypt == null) {
            base.twoWayCrypt = twoWayCrypt;
        }
        if ((base1 = window.ls).urlEncode == null) {
            base1.urlEncode = urlEncode;
        }
        if ((base2 = window.ls).urlDecode == null) {
            base2.urlDecode = urlDecode;
        }
    } else {
        if (exports.twoWayCrypt == null) {
            exports.twoWayCrypt = twoWayCrypt;
        }
        if (exports.urlEncode == null) {
            exports.urlEncode = urlEncode;
        }
        if (exports.urlDecode == null) {
            exports.urlDecode = urlDecode;
        }
    }

}).call(this);
(function() {
    var registeredCallbacks = {};
    var registerCallbackOnce = function(lsid, dialogName, callback) {
        if (typeof registeredCallbacks[dialogName] === 'undefined') {
            lsid.registerCallback(dialogName, callback);
            registeredCallbacks[dialogName] = 1;
        }
    };

    var trackEvent = function(eventName) {
        var et = cjs.dic.get('utilEnviroment').getEventTrackingObject();
        if (et) {
            et.track_click('web-click', eventName);
        }
    };

    var trackEventCheckbox = function(eventName, value) {
        var et = cjs.dic.get('utilEnviroment').getEventTrackingObject();
        if (et) {
            eventName += '_' + (value ? 'on' : 'off');
            et.track_click('checkbox-click', eventName, null, null, 'GDPR');
        }
    };

    ls.LoginClient.prototype.dialogs.deleteAccount.content = function(lsid) {
        var templateData = {
            "headerText": "Cierre de cuenta",
            "infoText": "Â¿EstÃ¡ seguro de que desea eliminar su cuenta %s permanentemente y perder todos sus ajustes?".replace('%s', '<strong>' + lsid.nameOrEmail() + '</strong>'),
            "buttonYesText": "SÃ­",
            "buttonNoText": "No",
        };
        return cjs.dic.get('HtmlTemplate').render(cjs.HtmlTemplate.TPL_LSID_DIALOGS_DELETE_ACCOUNT, templateData);
    };
    ls.LoginClient.prototype.dialogs.deleteAccount.showTrigger = function(lsid) {
        registerCallbackOnce(lsid, 'showDialog/deleteAccount', function() {
            var $form = $("form#deleteAccountForm");
            $form.find("input#delete-account-yes").off('click').on('click', function() {
                lsid.deleteAccount();
                trackEvent('delete_account_yes');
            });
            $form.find("input#delete-account-no").off('click').on('click', function() {
                if ($("#lsid-window-close").length) {
                    lsid.hideDialog();
                } else {
                    lsid.showDialog('newTermsOfUse2', [], true);
                    trackEvent('delete_account_no');
                }
            });
        });
    };

    var templateData = {
        "headerText": "Nuevos tÃ©rminos de uso",
        "infoText": "Por favor, preste atenciÃ³n a nuestros nuevos <a href=\"/condiciones/\" target=\"_blank\">tÃ©rminos de uso</a>. No hay grandes cambios para usted; hemos actualizado los tÃ©rminos a fin de cumplir las condiciones de la nueva legislaciÃ³n europea. Le solicitamos aceptarlos.",
        "buttonAgreeText": "Acepto los tÃ©rminos de uso",
        "buttonDisagreeText": "No acepto",
    };
    ls.LoginClient.prototype.dialogs.newTermsOfUse1.content = cjs.dic.get('HtmlTemplate').render(cjs.HtmlTemplate.TPL_LSID_DIALOGS_NEW_TERMS_OF_USE_1, templateData);
    ls.LoginClient.prototype.dialogs.newTermsOfUse1.showTrigger = function(lsid) {
        registerCallbackOnce(lsid, 'showDialog/newTermsOfUse1', function() {
            var $form = $("form#newTermsOfUse1Form");
            $form.find("input#terms-disagree").off('click').on('click', function() {
                lsid.showDialog('newTermsOfUse2', [], true);
                trackEvent('terms_disagree');
            });
            $form.find("input#terms-agree").on('click', function() {
                lsid.agreeWithTerms(true);
                trackEvent('terms_agree');
            });
        });
    };

    var templateData = {
        "headerText": "Nuevos tÃ©rminos de uso",
        "infoText": "Lo sentimos, pero debe aceptar los nuevos <a href=\"/condiciones/\" target=\"_blank\">tÃ©rminos de uso</a> si desea disfrutar de las funciones exclusivas para usuarios registrados.",
        "buttonAgreeText": "Acepto los tÃ©rminos de uso",
        "buttonLogoutText": "Cerrar sesiÃ³n",
        "deleteAccountText": "Cerrar cuenta",
    };
    ls.LoginClient.prototype.dialogs.newTermsOfUse2.content = cjs.dic.get('HtmlTemplate').render(cjs.HtmlTemplate.TPL_LSID_DIALOGS_NEW_TERMS_OF_USE_2, templateData);
    ls.LoginClient.prototype.dialogs.newTermsOfUse2.showTrigger = function(lsid) {
        registerCallbackOnce(lsid, 'showDialog/newTermsOfUse2', function() {
            var $form = $("form#newTermsOfUse2Form");
            $form.find("input#terms-agree").on('click', function() {
                lsid.agreeWithTerms(true);
                trackEvent('terms_agree');
            });
            $form.find("input#terms-logout").off('click').on('click', function() {
                lsid.logoutWithoutConfirm();
                trackEvent('logout');
            });
            $form.find("#delete-account-link").off('click').on('click', function() {
                lsid.showDialog("deleteAccount", [], true);
                trackEvent('delete_account_link');
            });
        });
    };

    var templateData = {
        "headerText": "Ajustes de privacidad",
        "infoText": "Nuestro sitio web usa cookies y otras tecnologÃ­as a fin de mejorar su experiencia personalizando el contenido y la publicidad, y para analizar nuestro trÃ¡fico. Marque las casillas de abajo y haga clic en el botÃ³n \"Acepto\" para dar su consentimiento al uso de estas tecnologÃ­as. Puede cambiar sus elecciones en cualquier momento en los ajustes de privacidad.",
        "infoAnalyticsTitle": "AnalÃ­tica",
        "infoAnalyticsText": "Las cookies y herramientas de analÃ­tica web nos ayudan a entender mejor cÃ³mo los usuarios interactÃºan con nuestra web. Gracias a ello, podemos desarrollar la web de acuerdo con las preferencias de nuestros usuarios.",
        "infoAdsTitle": "Publicidad personalizada",
        "infoAdsText": "Las cookies nos permiten mostrar anuncios personalizados y mÃ¡s pertinentes para cada usuario individual a la audiencia de nuestra web.",
        "buttonAgreeText": "Aceptar",
        "closeWindow": "Cerrar ventana"
    };
})();

var captchaOnLoad;

(function() {
    var grecaptchaWidgetCanBeLoaded = false;
    var grecaptchaWidgetId;
    var hasFacebook = true;
    var hasGoogle = true;
    var hasApple = true;
    var appleClientId = "com.flashscore.siwa";
    var appleRedirectUri = "https://www.www.apurogol.net:8443/apple-proxy/";
    var projectId = 1;
    var hasSocials = hasFacebook || hasGoogle || hasApple;
    var appendAsyncScript = function(url) {
        var firstScript, script;
        script = document.createElement('script');
        firstScript = document.getElementsByTagName('script')[0];
        script.async = 1;
        script.defer = 1;
        script.src = url;
        firstScript.parentNode.insertBefore(script, firstScript);
    };

    var scriptUrl = "https://www.google.com/recaptcha/api.js?hl=es&onload=captchaOnLoad&render=explicit";
    appendAsyncScript(scriptUrl);

    var delegateSocialButtons = function(lsid) {
        $("#lsid-main-dialog .contents div.facebook").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault();
                }
                lsid.callLoginFlowUsingProvider("facebook");
                return false;
            }
        }(this));
        $("#lsid-main-dialog .contents div.google").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault();
                }
                lsid.callLoginFlowUsingProvider("google");
                return false;
            }
        }(this));
        $("#lsid-main-dialog .contents div.apple").off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault();
                }

                var child = window.open(
                    location.protocol + '//' + location.host + '/apple-bridge',
                    'signInWithApple',
                    'height=600,width=650,resizable=yes,scrollbars=yes,toolbar=yes,menubar=no,location=no,directories=no, status=yes'

                );
                var timer = setInterval(checkChild, 500);

                function checkChild() {
                    if (child.closed) {
                        const apple = JSON.parse(localStorage.getItem("apple"));
                        if (apple === null) {
                            return false;
                        }

                        if (apple.code.length === 0 || apple.id.length === 0) {
                            return false;
                        }

                        var user = {
                            accessToken: apple.code,
                            clientId: appleClientId,
                            provider: 'apple',
                            id: apple.id,
                            project: projectId,
                            geoIp: cjs.geoIP,
                            namespace: 'fs/1_1',
                        };

                        if (apple.user.email !== undefined && apple.user.name !== undefined) {
                            user.name = apple.user.name.firstName + " " + apple.user.name.lastName;
                            user.email = apple.user.email;
                        }

                        localStorage.removeItem("apple");
                        lsid.callLoginFlowUsingProvider(null, user);
                        clearInterval(timer);
                    }
                }
                return false;
            }
        }(this));
    };

    var delegateDialog = function(name, selector, lsid) {
        $(selector).off('click').on('click', function(dialogObj) {
            return function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault();
                }
                lsid.showDialog(name);
                return false;
            }
        }(this));
    };

    var toggleShowPasswordButton = function($showButton, isPasswdType) {
        var label = isPasswdType ? 'Ocultar' : 'Mostrar';
        $showButton.toggleClass('on', isPasswdType);
        $showButton.html(label);
    };

    var delegateShowPassword = function() {
        $('.password-form-element span.show, .newpassword-form-element span.show').off('click').on('click', function() {
            var $showButton = $(this);
            var $password = $showButton.next('#passwd, #newpasswd');
            var isPasswdType = $password.attr('type') === 'password';

            $password.attr('type', isPasswdType ? 'text' : 'password');
            toggleShowPasswordButton($showButton, isPasswdType);
        });
    };

    var delegateShowPasswordButton = function() {
        var $elements = $('.password-form-element #passwd, .newpassword-form-element #newpasswd');

        $elements.each(function() {
            var $password = $(this);
            if ($password.val()) {
                var $showButton = $password.prev('span.show');
                toggleShowPasswordButton($showButton, false);
                $showButton.css('display', 'inline');
            }
        });

        $elements.unbind('input', 'keyup').bind('input', 'keyup', function(e) {
            var password = $(e.currentTarget).val();
            var $showButton = $(this).siblings('span.show');
            $showButton.toggle(password.length > 0);
        });
    };

    var delegateGeoIp = function() {
        if (typeof cjs != 'undefined' && typeof cjs.prepareGeoIP == 'function') {
            cjs.prepareGeoIP();
        }
    };

    var delegateLoginFill = function(lsid) {
        var $form = $("#login-form");
        lsid.loginFill($form.get(0));
        $form.find('#passwd').attr('type', 'password');
    };

    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">',
        '<div class="contents">',
        '<div class="registration selected">',
        '<h1>RegÃ­strate GRATIS</h1>',
        '<div class="content">',
        '<div class="form">',
        '<form id="registration-form" method="post" action="">',
        (hasSocials ? '<div class="social-buttons border-bottom">' : ''),
        (hasFacebook ? '<a href="#fb"><div id="#registration-fb" class="facebook"><span class="icon"></span><span>FACEBOOK</span></div></a>' : ''),
        (hasGoogle ? '<a href="#google"><div id="#registration-google" class="google"><span class="icon"></span><span>GOOGLE</span></div></a>' : ''),
        (hasApple ? '<a href="#apple" target="signInWithApple"><div id="#registration-apple" class="apple"><span class="icon"></span><span>APPLE</span></div></a>' : ''),
        (hasSocials ? '</div>' : ''),

        '<div class="email-form-element border-bottom">',
        '<input type="text" style="display: none;"/>',
        '<input type="text" id="email" name="email" tabindex="1" placeholder="E-mail" />',
        '</div>',
        '<div class="password-form-element border-bottom">',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="passwd" name="password" tabindex="2" placeholder="ContraseÃ±a"/>',
        '</div>',
        '<div class="password-confirm-form-element">',
        '<input type="hidden" id="passwdagain" name="passwdagain">',
        '<input type="checkbox" id="termsofservice" name="termsofservice" checked="checked" style="visibility: hidden; display: none;" />',
        '</div>',
        '<div class="captcha">',
        '<div id="recaptcha_response_field" class="g-recaptcha captcha-preload"><span>Loading ...</span></div>',
        '',
        '</div>',
        '<div class="sign-up-form-element">',
        '<input type="submit" value="RegÃ­strate  " id="registration" name="registration"/>',
        '<div id="registration-log-in-link" class="log-in">',
        '<div class="content">o <a href=\"/#[lsid:login]\">Inicia sesiÃ³n</a></div>',
        '</div>',
        '<div id="terms-link" class="terms">Al crear una cuenta, usted acepta nuestras <a href=\"/condiciones/\" target=\"_blank\">Condiciones de Uso</a></div>',
        '</div>',

        '</form>',
        '</div>',
        '</div>',
        '</div>',
        '<div id="benefits-link" class="benefits">',
        '<ul>',
        '<li><span class="benefit-item sync"></span><span class="content">Sincroniza tus preferencias en todos tus dispositivos</span></li>',
        '<li><span class="benefit-item favourite"></span><span class="content">Sigue mÃ¡s fÃ¡cilmente tus ligas y equipos favoritos</span></li>',
        '<li><span class="benefit-item news"></span><span class="content">Mantente al dÃ­a de todas las nuevas funciones</span></li>',
        '</ul>',
        '</div>',
        '</div>',
        '</div>');
    ls.LoginClient.prototype.dialogs.registration.content = dialogHtml.join('');

    ls.LoginClient.prototype.dialogs.registration.showTrigger = function(lsid) {
        grecaptchaWidgetCanBeLoaded = true;
        $("#registration-form .sign-up-form-element").hide();
    };

    var grecaptchaWidgetIdGetter = function() {
        return grecaptchaWidgetId;
    };

    captchaOnLoad = function() {
        $("#registration-form .sign-up-form-element").show();

        ls.LoginClient.prototype.dialogs.registration.showTrigger = function(lsid, disableGrecaptchaReload) {
            var recaptchaElementId = "recaptcha_response_field";
            $("#" + recaptchaElementId)
                .removeClass('captchaPreload')
                .hide()
                .empty()
                .css({
                    "transform": "scale(0.8)",
                    "transform-origin": "0 0",
                    "-webkit-transform": "scale(0.8)",
                    "-webkit-transform-origin": "0 0"
                })
                .show();

            if (grecaptchaWidgetCanBeLoaded || !disableGrecaptchaReload) {
                grecaptchaWidgetId = grecaptcha.render(recaptchaElementId, {
                    "sitekey": "6LdnlAoTAAAAAIzaLLR8ezPKKnLeM2LozP6OQKj_"
                });
            }

            delegateSocialButtons(lsid);
            delegateDialog("login", "#registration-log-in-link a", lsid);
            delegateShowPassword();
            delegateShowPasswordButton();
            delegateGeoIp();

            $("#registration-form").off('submit').on('submit', function(e) {
                if (typeof e != 'undefined') {
                    e.preventDefault();
                }
                lsid._registration(this, grecaptchaWidgetIdGetter());
                return false;
            });

            grecaptchaWidgetCanBeLoaded = false;

            $(document).ready(function() {
                $("#email").focus();
            });
        };

        if ($("#lsid-window").is(":visible")) {
            ls.LoginClient.prototype.dialogs.registration.showTrigger(ls.loginClient, true);
        }
    };

    dialogHtml = new Array();
    dialogHtml.push('<div class="lsid-messages">',
        '<div class="header-message err"></div>',
        '<div class="message err">Tu cÃ³digo de activaciÃ³n no es vÃ¡lido.</div>',
        '</div>');
    ls.LoginClient.prototype.dialogs.verification.content = dialogHtml.join('');

    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">',
        '<div class="contents">',
        '<div class="login selected">',
        '<h1>Inicio de sesiÃ³n</h1>',
        '<div class="content" id="login-content">',
        '<div class="form">',
        '<form id="login-form" method="post" action="">',
        (hasSocials ? '<div class="social-buttons border-bottom">' : ''),
        (hasFacebook ? '<a id="#login-fb" href="#fb"><div class="facebook"><span class="icon"></span><span>FACEBOOK</span></div></a>' : ''),
        (hasGoogle ? '<a id="#login-google" href="#google"><div class="google"><span class="icon"></span><span>GOOGLE</span></div></a>' : ''),
        (hasApple ? '<a href="#apple" target="signInWithApple"><div id="#registration-apple" class="apple"><span class="icon"></span><span>APPLE</span></div></a>' : ''),
        (hasSocials ? '</div>' : ''),

        '<div class="email-form-element border-bottom">',
        '<input type="text" style="display: none;"/>',
        '<input type="text" id="email" name="email" tabindex="1" placeholder="E-mail" />',
        '</div>',
        '<div class="password-form-element border-bottom">',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="passwd" name="password" tabindex="2" placeholder="ContraseÃ±a"/>',
        '</div>',
        '<div class="password-confirm-form-element">',
        '<input type="hidden" id="passwdagain" name="passwdagain">',
        '<input type="checkbox" id="persistentlogin" name="persistentlogin" checked="checked" style="visibility: hidden; display: none;" />',
        '</div>',
        '<div class="sign-up-form-element">',
        '<input type="submit" value="Inicia sesiÃ³n" id="login" name="login"/>',
        '<div id="login-log-in-link" class="log-in">',
        '<div class="content">o <a href=\"#[lsid:registration]\">RegÃ­strate</a></div>',
        '</div>',
        '<div class="terms"><a href="/#[lsid:forgottenPassword]" class="lost-password">Â¿Has olvidado tu contraseÃ±a?</a></div>',
        '</div>',
        '</form>',
        '</div>',
        '</div>',
        '</div>',
        '</div>',
        '</div>');
    ls.LoginClient.prototype.dialogs.login.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.login.showTrigger = function(lsid) {
        delegateSocialButtons(lsid);
        delegateDialog("registration", "#login-log-in-link a", lsid);
        delegateDialog("forgottenPassword", "#login-form .sign-up-form-element .terms a", lsid);
        delegateLoginFill(lsid);
        delegateShowPassword();
        delegateShowPasswordButton();

        $(document).ready(function() {
            $("#email").focus();
        });

        $("#login-form").off('submit').on('submit', function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault();
            }

            lsid.checkTermsAccepted(this)
                .then((isAccepted) => {
                    if (isAccepted == null) return;
                    if (!isAccepted) {
                        lsid.showTermsModal(() => {
                            lsid.agreeWithTerms().then(() => {
                                lsid.loginAndGetUserData(this)
                            });
                        })
                    } else {
                        lsid.loginAndGetUserData(this)
                    }
                });
            return false;
        });
    };

    var dialogHtml = new Array();
    dialogHtml.push('<div id="lsid-main-dialog">',
        '<div class="contents">',
        '<div class="forgottenPassword selected">',
        '<h1>Restablecer ContraseÃ±a</h1>',
        '<div class="content">',
        '<div class="text">No te preocupes. Escribe tu direcciÃ³n de e-mail abajo y te enviaremos algunas instrucciones.</div>',
        '<div class="form">',
        '<form id="forgotten-password-form" method="post" action="">',
        '<div class="email-form-element border-bottom">',
        '<input type="text" style="display: none;"/>',
        '<input type="text" id="email" name="email" tabindex="1" placeholder="E-mail" />',
        '</div>',
        '<div class="sign-up-form-element">',
        '<input type="submit" value="Enviar" id="send" name="send"/>',
        '</div>',
        '</form>',
        '</div>',
        '</div>',
        '</div>',
        '</div>',
        '</div>');
    ls.LoginClient.prototype.dialogs.forgottenPassword.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.forgottenPassword.showTrigger = function(lsid) {
        delegateDialog("login", "#forgotten-password-form .sign-up-form-element .terms a", lsid);
        $("#forgotten-password-form").off('submit').on('submit', function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault();
            }
            lsid._forgottenPassword(this);
            return false;
        });

        $(document).ready(function() {
            $("#email").focus();
        });
    };

    dialogHtml = new Array();
    dialogHtml.push(
        '<div class="contents">',
        '<div class="passwordchange selected">',
        '<h1>Cambiar contraseÃ±a</h1>',
        '<div class="content">',
        '<div class="form">',
        '<form id="passwordchange-form" method="post" action="">',
        '<div class="password-form-element border-bottom">',
        '<input type="text" style="display: none;"/>',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="passwd" name="password" tabindex="1" placeholder="ContraseÃ±a actual">',
        '</div>',
        '<div class="newpassword-form-element border-bottom">',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="newpasswd" name="newpasswd" tabindex="2" placeholder="Nueva contraseÃ±a">',
        '</div>',
        '<div class="sign-up-form-element">',
        '<input type="submit" value="Cambiar configuraciÃ³n" id="passwordchange" name="settings" tabindex="3">',
        '</div>',
        '</form>',
        '</div>',
        '</div>',
        '</div>',
        '</div>');

    ls.LoginClient.prototype.dialogs.passwordChange.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.passwordChange.showTrigger = function(lsid) {
        var form = $("form#passwordchange-form");
        if (!form.find("input#email").length)
            form.append('<input type="hidden" value="' + lsid._id + '" id="id" name="id">');
        form.submit(function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault();
            }
            lsid._passwordChange(this);
            return false;
        });
        delegateShowPassword();
        delegateShowPasswordButton();

        $(document).ready(function() {
            $("#passwd").focus();
        });
    };

    dialogHtml = new Array();
    dialogHtml.push('<div class="contents contents__passwordChange">',
        '<div class="backButton" onclick="">',
        '<div class="backButton__arrow"></div>',
        '<div class="backButton__text">AtrÃ¡s</div>',
        '</div>',
        '<div class="settings selected">',
        '<h1>Cambiar contraseÃ±a</h1>',
        '<div class="content">',
        '<div class="form">',
        '<form id="settings-form" method="post" action="">',
        '<div class="password-form-element border-bottom">',
        '<input type="text" style="display: none;"/>',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="passwd" name="password" tabindex="1" placeholder="ContraseÃ±a actual">',
        '</div>',
        '<div class="newpassword-form-element border-bottom">',
        '<span class="show" title="Mostrar"></span>',
        '<input type="password" id="newpasswd" name="newpasswd" tabindex="2" placeholder="Nueva contraseÃ±a">',
        '</div>',
        '<div class="sign-up-form-element">',
        '<input type="submit" value="Cambiar configuraciÃ³n" id="settings" name="settings" tabindex="3">',
        '</div>',
        '</form>',
        '</div>',
        '</div>',
        '</div>',
        '</div>');
    ls.LoginClient.prototype.dialogs.settings.content = dialogHtml.join('');
    ls.LoginClient.prototype.dialogs.settings.showTrigger = function(lsid) {
        var form = $("form#settings-form");
        if (!form.find("input#email").length)
            form.append('<input type="hidden" value="' + lsid._id + '" id="id" name="id">');
        form.submit(function(e) {
            if (typeof e != 'undefined') {
                e.preventDefault();
            }
            lsid._passwordChange(this);
            return false;
        });
        delegateShowPassword();
        delegateShowPasswordButton();

        $(document).ready(function() {
            $("#passwd").focus();
        });
    };

})();
cjs.fromGlobalScope.ls = ls;
/**
	MyLeaguesMenu - side menu with link to my leagues
 */

(function() {
    var MyLeaguesMenu, base;

    MyLeaguesMenu = (function() {
        MyLeaguesMenu.prototype.BANNER_POSITION = 10;

        MyLeaguesMenu.prototype.ITEMS_LIMIT_BANNER_POSITION = 12;

        function MyLeaguesMenu(_storage, _myLeagues, _dataUrl, emptyContent, language, _$) {
            var _data;
            this._storage = _storage;
            this._myLeagues = _myLeagues;
            this._dataUrl = _dataUrl;
            this._$ = _$;
            this._ulId = 'my-leagues-list';
            this._headCountSelector = '.my-leagues .head .count';
            this._dataKey = 'myLeaguesMenu_' + language;
            _data = this._storage.get(this._dataKey);
            if (_data === '[]') {
                _data = '{}';
            }
            this._storage.drop('myLeaguesMenu');
            this._data = _data ? JSON.parse(_data) : this._$.extend({}, this._myLeagues._topLeagues, true);
            this._requestedDataList = {};
            this._empty = "<li class=\"last myLeagueInfo\">" + (emptyContent.replace('[*]', '<span class="toggleMyLeague--text toggleMyLeague"></span>')) + "</li>";
            this.draw();
        }

        MyLeaguesMenu.prototype._getListItem = function(data) {
            if (!/\/$/.test(data.url)) {
                data.url = data.url + '/';
            }
            if ((data.title != null) && (data.url != null) && (data.flagId != null) && (data.name != null)) {
                return this._$("<li title=\"" + data.title + "\"><a href=\"" + data.url + "\"><span class=\"flag fl_" + data.flagId + "\"></span>" + data.name + "</a></li>");
            } else {
                return null;
            }
        };

        MyLeaguesMenu.prototype._now = function() {
            return Math.round((new Date()).getTime() / 1000);
        };

        MyLeaguesMenu.prototype._request = function(callback, url, trigger) {
            var req;
            if (callback == null) {
                callback = (function() {
                    return null;
                });
            }
            if (trigger == null) {
                trigger = null;
            }
            req = {
                url: this._dataUrl + url,
                dataType: 'json',
                success: (function(obj, callback) {
                    return function(data, textStatus, jqXHR) {
                        if (jqXHR.status === 200) {
                            return callback.call(obj, data, trigger);
                        } else {
                            return callback.call(obj, data, trigger, jqXHR.status);
                        }
                    };
                })(this, callback),
                error: (function(obj, callback) {
                    return function(jqXHR, textStatus, errorThrown) {
                        return callback.call(obj, {}, trigger, jqXHR.status);
                    };
                })(this, callback)
            };
            return this._$.ajax(req);
        };

        MyLeaguesMenu.prototype._loadData = function(dataKey) {
            if (this._requestedDataList.hasOwnProperty(dataKey)) {
                return;
            }
            this._requestedDataList[dataKey] = true;
            return this._request(this._loadDataResponse, dataKey, dataKey);
        };

        MyLeaguesMenu.prototype._loadDataResponse = function(data, trigger, err) {
            if (err == null) {
                err = null;
            }
            delete this._requestedDataList[trigger];
            if (err !== null || err === 0) {
                if (err === 404) {
                    this._myLeagues.toggleTop(trigger);
                }
                return;
            }
            data.from = this._now();
            this._data[trigger] = data;
            this.draw();
            return this._storage.store(this._dataKey, JSON.stringify(this._data));
        };

        MyLeaguesMenu.prototype._deleteListItems = function() {
            return this._$("#" + this._ulId + " li").not('.banner').remove();
        };

        MyLeaguesMenu.prototype._drawEmpty = function() {
            this._deleteListItems();
            this._$("" + this._headCountSelector).text('(0)');
            this._$("#" + this._ulId).prepend(this._empty);
            if (this._$("#" + this._ulId + " li.banner").is(":empty")) {
                return this._$("#" + this._ulId + " li.banner").addClass("empty-banner").addClass("last-item-banner");
            }
        };

        MyLeaguesMenu.prototype.draw = function() {
            var cacheValidation, count, dataKey, i, len, li, menuOrder, ul;
            this._deleteListItems();
            menuOrder = this._myLeagues.getTopLabelKeys();
            if (!menuOrder.length) {
                return this._drawEmpty();
            }
            menuOrder.sort((function(data) {
                return function(a, b) {
                    var sportA, sportB;
                    if (!data.hasOwnProperty(a)) {
                        return -1;
                    }
                    if (!data.hasOwnProperty(b)) {
                        return 1;
                    }
                    sportA = a.split('_')[0];
                    sportB = b.split('_')[0];
                    if (sportA < sportB) {
                        return -1;
                    }
                    if (sportA > sportB) {
                        return 1;
                    }
                    if (data[a].menuOrder < data[b].menuOrder) {
                        return -1;
                    }
                    if (data[a].menuOrder > data[b].menuOrder) {
                        return 1;
                    }
                    return 0;
                };
            })(this._data));
            ul = this._$('<ul>');
            cacheValidation = this._now() - (60 * 60 * 24);
            for (i = 0, len = menuOrder.length; i < len; i++) {
                dataKey = menuOrder[i];
                if (this._data.hasOwnProperty(dataKey)) {
                    li = this._getListItem(this._data[dataKey]);
                    if (li != null) {
                        li.prepend(this._myLeagues.getToggleIcon(null, dataKey));
                        ul.append(li);
                    } else {
                        this._data[dataKey].from = 0;
                    }
                    if (!(this._data[dataKey].from > cacheValidation)) {
                        this._loadData(dataKey);
                    }
                } else {
                    this._loadData(dataKey);
                }
            }
            count = ul.find('li').length;
            this._$("#" + this._ulId + " li.banner").removeClass('empty-banner').removeClass('last-item-banner');
            if (li) {
                li.addClass('last');
                if (this._$("#" + this._ulId + " li.banner").height() === 0) {
                    this._$("#" + this._ulId + " li.banner").addClass('empty-banner');
                }
                if (count >= this.ITEMS_LIMIT_BANNER_POSITION) {
                    this._$("#" + this._ulId).prepend(ul.find('li').slice(0, this.BANNER_POSITION));
                    this._$("#" + this._ulId).append(ul.find('li'));
                } else {
                    this._$("#" + this._ulId).prepend(ul.html());
                    this._$("#" + this._ulId + " li.banner").addClass('last-item-banner');
                }
            } else {
                this._drawEmpty();
            }
            return this._$("" + this._headCountSelector).text("(" + count + ")");
        };

        return MyLeaguesMenu;

    })();

    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).MyLeaguesMenu == null) {
            base.MyLeaguesMenu = MyLeaguesMenu;
        }
    }

    if (typeof exports !== "undefined" && exports !== null) {
        if (exports.MyLeaguesMenu == null) {
            exports.MyLeaguesMenu = MyLeaguesMenu;
        }
    }

}).call(this);
(function() {
    var MyLeaguesAnimation, base;

    MyLeaguesAnimation = (function() {
        MyLeaguesAnimation.prototype.easing = 'ease';

        MyLeaguesAnimation.prototype.duration = 1250;

        MyLeaguesAnimation.prototype.shorterDuration = 500;

        MyLeaguesAnimation.prototype.additionalTablesSelector = '.table-link-more-games, .noduel-info';

        function MyLeaguesAnimation(isMovingTop, $origTable, transition, transitionProperty, tooltip, lablId) {
            this.isMovingTop = isMovingTop;
            this.$origTable = $origTable;
            this.transition = transition;
            this.transitionProperty = transitionProperty;
            this.tooltip = tooltip;
            this.lablId = lablId;
            this.border = null;
            this.$wrapper = null;
            this.$phOut = null;
            this.$gameRows = null;
            this.$outWrapper = null;
        }

        MyLeaguesAnimation.prototype.pre = function() {
            var $outTable, $table, origTablePos;
            this.stripMovingTable(this.$origTable);
            if (this.isMovingTop) {
                this.border = this.getBorder();
                origTablePos = this.$origTable.position();
                this.$wrapper = $('<div/>').css({
                    zIndex: 1e20,
                    opacity: 1,
                    position: 'absolute',
                    overflow: 'hidden',
                    width: this.$origTable.outerWidth(),
                    height: this.$origTable.outerHeight(),
                    top: origTablePos.top,
                    left: origTablePos.left,
                    boxShadow: '0px 0px 15px rgba(0, 0, 0, 1)',
                    borderBottom: this.border
                });
                $table = this.$origTable.clone();
                $table.find('thead tr.league').removeClass("l_" + this.lablId).addClass('primary-top');
                $table.appendTo(this.$wrapper);
                this.appendAdditionalRowsToWrapper(this.$origTable, this.$wrapper);
                this.transition(this.$wrapper, 'top', this.duration, this.easing);
                this.transition(this.$wrapper, 'opacity', this.shorterDuration, 'linear', this.duration);
                this.$phOut = $('<div class=ph-out />').css({
                    width: '100%',
                    height: this.$wrapper.height()
                });
                this.$phOut.insertBefore(this.$origTable);
                this.transition(this.$phOut, 'height', this.duration, this.easing);
            } else {
                $outTable = this.$origTable.clone();
                $outTable.find('thead tr.league').removeClass("l_" + this.lablId);
                $outTable.css('zIndex', 0);
                this.$outWrapper = $('<div/>');
                this.$outWrapper.append($outTable);
                this.$outWrapper.insertBefore(this.$origTable);
                this.$outWrapper.height(this.$origTable.outerHeight());
                this.appendAdditionalRowsToWrapper(this.$origTable, this.$outWrapper);
                this.transition(this.$outWrapper.find('tbody tr'), 'background-color', this.shorterDuration, 'linear', this.duration);
            }
            this.$gameRows = $('#fs tr[id^="g_"], #fs tr[id^="x_"]');
            return this.transition(this.$gameRows, 'background-color', this.shorterDuration, 'linear', this.duration);
        };

        MyLeaguesAnimation.prototype.post = function($newTable) {
            var $inTable, $inWrapper, $phIn, $placeholders, $tables, inWrapperHeight, phInHeight, tableTop;
            this.tooltip.hide_all();
            if (this.isMovingTop) {
                this.$phOut.nextUntil(':visible:not(.ph-out)', '.ph-out').empty();
                if (this.$phOut.prevUntil(':visible:not(.ph-out)', '.ph-out').length === 0) {
                    this.appendFakeBorder(this.$phOut, this.border);
                }
                this.$phOut.height(0);
                setTimeout(((function(_this) {
                    return function() {
                        return _this.$phOut.remove();
                    };
                })(this)), this.duration);
                tableTop = $newTable.position().top;
                $placeholders = $newTable.prevUntil(':visible:not(.ph-in)', '.ph-in');
                if ($placeholders.length) {
                    tableTop = $placeholders.last().position().top;
                    $placeholders.each(function() {
                        return tableTop += $(this).next('table').outerHeight();
                    });
                }
                $tables = $newTable.next(this.additionalTablesSelector).addBack();
                phInHeight = 0;
                $tables.each(function() {
                    return phInHeight += $(this).outerHeight();
                });
                $phIn = $('<div class=ph-in />').css({
                    width: '100%',
                    height: 0
                });
                $phIn.insertBefore($newTable);
                this.transition($phIn, 'height', this.duration, this.easing);
                $phIn.height(phInHeight);
                setTimeout((function() {
                    return $phIn.remove();
                }), this.duration);
                $phIn.nextUntil(':visible:not(.ph-in)', '.ph-in').empty();
                if ($phIn.prevUntil(':visible:not(.ph-in)', '.ph-in').length === 0) {
                    this.appendFakeBorder($phIn, this.border);
                }
                this.$wrapper.appendTo($newTable.parent());
                $tables.hide();
                setTimeout(((function(_this) {
                    return function() {
                        return _this.$wrapper.css({
                            top: tableTop,
                            opacity: 0
                        });
                    };
                })(this)), 0);
                setTimeout(((function(_this) {
                    return function() {
                        $phIn.remove();
                        $tables.show();
                        return setTimeout((function() {
                            return _this.$wrapper.remove();
                        }), _this.shorterDuration);
                    };
                })(this)), this.duration);
            } else {
                $inTable = $newTable.clone();
                $inTable.css('zIndex', 0);
                $inTable.find('tr').css('opacity', 1);
                this.stripMovingTable($inTable);
                $tables = $newTable.next(this.additionalTablesSelector).addBack();
                $inWrapper = $('<div/>').height($newTable.outerHeight());
                $inWrapper.append($inTable);
                this.appendAdditionalRowsToWrapper($newTable, $inWrapper);
                inWrapperHeight = $inWrapper.outerHeight();
                $inWrapper.insertAfter($newTable);
                $inWrapper.height(0);
                $inWrapper.css('overflow', 'hidden');
                $tables.hide();
                setTimeout(((function(_this) {
                    return function() {
                        _this.transition(_this.$outWrapper, 'height', _this.duration, _this.easing);
                        _this.$outWrapper.height(0);
                        _this.transition($inWrapper, 'height', _this.duration, _this.easing);
                        $inWrapper.height(inWrapperHeight);
                        return setTimeout((function() {
                            $inWrapper.remove();
                            $tables.show();
                            return _this.$outWrapper.remove();
                        }), _this.duration);
                    };
                })(this)), 0);
            }
            return setTimeout(((function(_this) {
                return function() {
                    return _this.removeGameRowsTransition();
                };
            })(this)), this.duration + this.shorterDuration);
        };

        MyLeaguesAnimation.prototype.cancel = function() {
            if (this.isMovingTop) {
                this.$phOut.remove();
            } else {
                this.$outWrapper.remove();
            }
            return this.removeGameRowsTransition();
        };

        MyLeaguesAnimation.prototype.removeGameRowsTransition = function() {
            return this.$gameRows.css(this.transitionProperty(), '');
        };

        MyLeaguesAnimation.prototype.getBorder = function() {
            var $blankLineTd, $tableTd, css;
            css = '';
            $blankLineTd = $('#fs .blank-line td');
            $tableTd = $('div#fs tr[id^="g_"] td:first-child');
            if ($blankLineTd.length) {
                css = ($blankLineTd.height()) + "px solid " + ($blankLineTd.css('backgroundColor'));
            } else if ($tableTd.length) {
                css = ($tableTd.css('borderLeftWidth')) + " solid " + ($tableTd.css('borderLeftColor'));
            }
            return css;
        };

        MyLeaguesAnimation.prototype.appendFakeBorder = function($element, border) {
            return $element.append($('<div/>').css({
                margin: 0,
                padding: 0,
                width: '100%',
                height: 0,
                borderTop: border
            }));
        };

        MyLeaguesAnimation.prototype.stripMovingTable = function($element) {
            $element.removeAttr('title').find('[title]').removeAttr('title');
            return $element.removeAttr('onclick').find('[onclick]').removeAttr('onclick');
        };

        MyLeaguesAnimation.prototype.appendAdditionalRowsToWrapper = function($table, $wrapper) {
            return $table.next(this.additionalTablesSelector).each(function() {
                var $additionalTable;
                $additionalTable = $(this);
                $additionalTable.clone().appendTo($wrapper);
                return $wrapper.height("+=" + ($additionalTable.outerHeight()));
            });
        };

        return MyLeaguesAnimation;

    })();

    if (typeof window !== "undefined" && window !== null) {
        if ((base = window.cjs).MyLeaguesAnimation == null) {
            base.MyLeaguesAnimation = MyLeaguesAnimation;
        }
    } else {
        if (exports.MyLeaguesAnimation == null) {
            exports.MyLeaguesAnimation = MyLeaguesAnimation;
        }
    }

}).call(this);

/**
	MyLeagues - editable top leagues in livescore
 */

(function() {
    var MyLeagues, base,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    MyLeagues = (function() {
        MyLeagues.prototype.isFunction = function(fnct) {
            return Object.prototype.toString.call(fnct === "[object Function]");
        };

        function MyLeagues(_lsid, _topLeagues, _defaultTopLeagues, _topLeaguesGetter, _contextId, _showLoginNeedMsgOnly, _addMyleagueStr, _removeMyleagueStr, _loginNeededStr, _$, _dic) {
            this._lsid = _lsid;
            this._topLeagues = _topLeagues != null ? _topLeagues : {};
            this._defaultTopLeagues = _defaultTopLeagues;
            this._topLeaguesGetter = _topLeaguesGetter;
            this._contextId = _contextId;
            this._showLoginNeedMsgOnly = _showLoginNeedMsgOnly;
            this._addMyleagueStr = _addMyleagueStr;
            this._removeMyleagueStr = _removeMyleagueStr;
            this._loginNeededStr = _loginNeededStr;
            this._$ = _$ != null ? _$ : $;
            this._dic = _dic != null ? _dic : cjs.dic;
            this._callbacks = {};
            this._dataKey = 'myLeagues';
            this._toggleButtonClass = 'toggleMyLeague';
            this._unconfirmedToggles = {};
            this._tooltipGetter = this._dic.get('util_enviroment').getTooltipObject;
            this._parentSelectorsForTooltip = {
                '#ls-search-window': true,
                '#fscountry': true,
                '.tournament-page #my-leagues-list': false,
                '.tournament-page': true
            };
            this._superTemplateDefinition = this._dic.get('util_enviroment').getSuperTemplateDefinition();
            this._useOnlyLocal = cjs.Api.config.get('app', 'user_functions', 'use_only_local');
            if (this._useOnlyLocal) {
                this._lsid.addDataKeyToLocalUsage(this._dataKey);
            }
        }

        MyLeagues.prototype._getLabelKey = function(labelId) {
            var labelKey, leagueHolder, leagueItem, sportId;
            leagueHolder = this._dic.get('dataLeagueHolderProxy').findLeagueHolderByLeagueId(labelId);
            if (leagueHolder === false) {
                return null;
            }
            leagueItem = leagueHolder.getLeague(labelId);
            sportId = parseInt(leagueItem.getValue('sport_id'));
            labelKey = sportId + "_" + (leagueItem.getTournamentTemplateKey());
            return labelKey;
        };

        MyLeagues.prototype.encodeLabelKey = function(labelKey) {
            var encodedLabelKey;
            encodedLabelKey = labelKey.replace(/^([0-9]+)_([0-9]+)_(.*)$/, (function(_this) {
                return function(full, sportId, superTemplateId, tail) {
                    var categoryId;
                    if ((_this._superTemplateDefinition[superTemplateId] != null) && (_this._superTemplateDefinition[superTemplateId]['category_id'] != null)) {
                        categoryId = _this._superTemplateDefinition[superTemplateId]['category_id'];
                    } else {
                        categoryId = 10 * superTemplateId;
                    }
                    return sportId + '_' + categoryId + '_' + tail;
                };
            })(this));
            return encodedLabelKey;
        };

        MyLeagues.prototype.decodeLabelKey = function(labelKey) {
            var decodedLabelKey;
            decodedLabelKey = labelKey.replace(/^([0-9]+)_([0-9]+)_(.*)$/, (function(_this) {
                return function(full, sportId, categoryKey, tail) {
                    var item, ref, superTemplateId;
                    sportId = parseInt(sportId);
                    if (_this._dic.get('util_sport').isCategorySport(sportId)) {
                        if (categoryKey.length === 4) {
                            categoryKey = parseInt(categoryKey);
                            ref = _this._superTemplateDefinition;
                            for (superTemplateId in ref) {
                                item = ref[superTemplateId];
                                if (parseInt(item['sport_id']) === sportId && parseInt(item['category_id']) === categoryKey) {
                                    return sportId + '_' + superTemplateId + '_' + tail;
                                }
                            }
                            return '';
                        } else if (categoryKey.length > 4 && categoryKey.substr(-1) === '0') {
                            return sportId + '_' + categoryKey.substr(0, categoryKey.length - 1) + '_' + tail;
                        } else {
                            return '';
                        }
                    } else {
                        return sportId + '_' + categoryKey + '_' + tail;
                    }
                };
            })(this));
            return decodedLabelKey;
        };

        MyLeagues.prototype._getDataKey = function(labelKey) {
            var context;
            if (labelKey != null) {
                context = labelKey.replace(/^([0-9]+)_.*/, '$1');
            }
            if (!context) {
                context = this._contextId;
            }
            return this._dataKey + "." + context;
        };

        MyLeagues.prototype._getToggleConfirmCallback = function(labelKey) {
            return (function(myLeagues) {
                return function() {
                    return delete myLeagues._unconfirmedToggles[labelKey];
                };
            })(this);
        };

        MyLeagues.prototype._getToggleRollbackCallback = function(labelKey, adding) {
            if (adding == null) {
                adding = false;
            }
            return (function(myLeagues) {
                return function() {
                    if (myLeagues._useOnlyLocal) {
                        return;
                    }
                    if (myLeagues._lsid.loggedIn()) {
                        myLeagues._lsid.showTechnicalError();
                    }
                    myLeagues._runCallback((adding ? 'remove' : 'add'), [labelKey]);
                    return myLeagues.reloadToggleIcons(labelKey);
                };
            })(this);
        };

        MyLeagues.prototype._createCallbackGroup = function(callbacks, params) {
            var myLeagues;
            if (callbacks == null) {
                callbacks = [];
            }
            if (params == null) {
                params = [];
            }
            myLeagues = this;
            return function() {
                var callback, i, len, results;
                if (!params.length) {
                    params = arguments;
                }
                results = [];
                for (i = 0, len = callbacks.length; i < len; i++) {
                    callback = callbacks[i];
                    results.push(setTimeout((function(callbackFunction) {
                        return function() {
                            return callbackFunction.apply(myLeagues, params);
                        };
                    })(callback), 0));
                }
                return results;
            };
        };

        MyLeagues.prototype._runCallback = function(triggerName, params) {
            if (triggerName == null) {
                triggerName = '';
            }
            if (this._callbacks[triggerName] != null) {
                return this._createCallbackGroup(this._callbacks[triggerName], params)();
            }
        };

        MyLeagues.prototype.registerCallback = function(triggerName, callback) {
            if (triggerName == null) {
                triggerName = '';
            }
            if (!this.isFunction(callback)) {
                return false;
            }
            if (this._callbacks[triggerName] == null) {
                this._callbacks[triggerName] = [];
            }
            return this._callbacks[triggerName].push(callback);
        };

        MyLeagues.prototype.isTop = function(labelId, labelKey) {
            var topLeagues;
            if (labelId == null) {
                labelId = null;
            }
            if (labelKey == null) {
                labelKey = null;
            }
            if (labelKey == null) {
                labelKey = this._getLabelKey(labelId);
            }
            if (!labelKey) {
                return false;
            }
            topLeagues = this._lsid.getData(this._getDataKey(labelKey));
            if (topLeagues != null) {
                return topLeagues.hasOwnProperty(labelKey);
            }
            if (this._topLeagues.hasOwnProperty(labelKey)) {
                return true;
            }
            return this._defaultTopLeagues.isTop(labelId, labelKey);
        };

        MyLeagues.prototype.getLabelIdsForKey = function(labelKey) {
            var ZH, labelIds, sportId;
            sportId = labelKey.replace(/([0-9]+)_(.*)/, '$1');
            ZH = labelKey.replace(/([0-9]+)_(.*)/, '$2');
            labelIds = {};
            this._dic.get('dataLeagueHolderProxy').eachHandler(function(scopeName, leagueHandler) {
                return leagueHandler.each(function(index, id) {
                    var leagueItem;
                    leagueItem = this.getItem(id);
                    if (leagueItem.getValue('sport_id') === sportId && leagueItem.getTournamentTemplateKey() === ZH) {
                        return labelIds[id] = id;
                    }
                });
            });
            return Object.keys(labelIds);
        };

        MyLeagues.prototype.getTopLabelKeys = function() {
            var dataKey, i, len, sportId, sportIds, topLabelKey, topLabelKeys, topLeagues, used, utilSport;
            utilSport = this._dic.get('util_sport');
            sportId = utilSport.getMainSport(this._contextId);
            if (utilSport.isGroupSport(sportId)) {
                sportIds = utilSport.getSportIdsInParentSport(sportId);
            } else {
                sportIds = [sportId];
            }
            topLabelKeys = [];
            used = false;
            for (i = 0, len = sportIds.length; i < len; i++) {
                sportId = sportIds[i];
                dataKey = this._dataKey + "." + sportId;
                topLeagues = this._lsid.getData(dataKey);
                if ((topLeagues != null ? topLeagues.used : void 0) != null) {
                    used = true;
                }
                if (topLeagues == null) {
                    continue;
                }
                for (topLabelKey in topLeagues) {
                    if (topLabelKey !== 'used') {
                        topLabelKeys.push(topLabelKey);
                    }
                }
            }
            if (topLabelKeys.length === 0 && !used) {
                for (topLabelKey in this._topLeagues) {
                    if (topLabelKey !== 'used') {
                        topLabelKeys.push(topLabelKey);
                    }
                }
            }
            return topLabelKeys;
        };

        MyLeagues.prototype.isEditable = function() {
            return true;
        };

        MyLeagues.prototype.getToggleIconKey = function(labelId) {
            var labelKey;
            if (labelId == null) {
                labelId = null;
            }
            labelKey = this._getLabelKey(labelId);
            if (!labelKey) {
                labelKey = '';
            }
            return labelKey;
        };

        MyLeagues.prototype.getToggleIconClass = function(labelId, labelKey) {
            var iconClass;
            if (labelId == null) {
                labelId = null;
            }
            if (labelKey == null) {
                labelKey = null;
            }
            if (labelKey) {
                iconClass += ' ' + labelKey;
            }
            return iconClass;
        };

        MyLeagues.prototype.getToggleIconTitle = function(labelId, labelKey) {
            var iconTitle;
            if (labelId == null) {
                labelId = null;
            }
            if (labelKey == null) {
                labelKey = null;
            }
            if (this.isTop(labelId, labelKey)) {
                iconTitle = this._removeMyleagueStr;
            } else {
                iconTitle = this._addMyleagueStr;
            }
            return iconTitle;
        };

        MyLeagues.prototype.getToggleIcon = function(labelId, labelKey, strObj, appendJs) {
           return '';
        };

        MyLeagues.prototype.toggleTop = function(labelKey, event, withoutToggleIcons) {
            var confirmToggleCallback, dataKey, elementIndex, elementSelector, labelKeySportId, loginJq, msgDiv, searchWindow, topLabelKey, topLeagueToggler, topLeagues;
            if (event == null) {
                event = null;
            }
            if (withoutToggleIcons == null) {
                withoutToggleIcons = false;
            }
            if (!this._lsid.userFunctionsAreAvailable(this._dataKey)) {
                if (this._showLoginNeedMsgOnly) {
                    this._lsid._showMessage(this._loginNeededStr, true);
                } else {
                    msgDiv = this._$(document.createElement('div'));
                    msgDiv.addClass("lsid-messages");
                    msgDiv.addClass("reg-version-two");
                    msgDiv.append(this._$(document.createElement('div')).addClass("message").addClass("err").html(this._loginNeededStr));
                    loginJq = [{
                        "selector": "#login-content",
                        "functionName": "prepend",
                        "params": [msgDiv]
                    }];
                    if (this._dic.exists('SearchWindow')) {
                        searchWindow = this._dic.get('SearchWindow');
                    }
                    if (searchWindow != null ? searchWindow.isVisible() : void 0) {
                        searchWindow.showNoLoggedInMessage();
                    } else {
                        this._lsid.showDialog('login', loginJq);
                    }
                }
                return false;
            }
            if (!labelKey) {
                return false;
            }
            if (this._unconfirmedToggles.hasOwnProperty(labelKey) || this._unconfirmedToggles.hasOwnProperty('ALL')) {
                return false;
            }
            if (event) {
                elementSelector = this._createSelectorFromEvent(event, ['active']);
            }
            elementIndex = this._getIndexFromSelectorAndEvent(elementSelector, event);
            this._unconfirmedToggles[labelKey] = true;
            confirmToggleCallback = this._getToggleConfirmCallback(labelKey);
            dataKey = this._getDataKey(labelKey);
            topLeagues = false;
            topLeagueToggler = (function(_this) {
                return function(topLeagues) {
                    var $element, isTop;
                    if (topLeagues == null) {
                        topLeagues = null;
                    }
                    if (elementSelector) {
                        _this._tooltipGetter().hide(_this._$(elementSelector).get(elementIndex));
                    }
                    isTop = _this.isTop(null, labelKey);
                    if (isTop) {
                        _this._remove(labelKey, dataKey, topLeagues, confirmToggleCallback);
                    } else {
                        _this._add(labelKey, dataKey, topLeagues, confirmToggleCallback);
                    }
                    _this._trackClick(labelKey, isTop ? 'remove' : 'add');
                    if (!withoutToggleIcons) {
                        _this.reloadToggleIcons(labelKey);
                    }
                    if (_this._tooltipOnElementCanBeDisplayed(elementSelector)) {
                        $element = _this._$(elementSelector);
                        if ($element.length) {
                            return _this._tooltipGetter().show($element.get(elementIndex), event, true);
                        }
                    }
                };
            })(this);
            if (this._lsid.getData(dataKey) == null) {
                topLeagues = {};
                for (topLabelKey in this._topLeagues) {
                    topLeagues[topLabelKey] = true;
                }
                this._unconfirmedToggles['ALL'] = true;
                confirmToggleCallback = this._getToggleConfirmCallback('ALL');
                delete this._unconfirmedToggles[labelKey];
                labelKeySportId = labelKey.replace(/^([0-9]+)_.*/, '$1');
                if (("" + this._contextId) === labelKeySportId) {
                    topLeagueToggler(topLeagues);
                } else {
                    this._topLeaguesGetter(labelKeySportId, topLeagueToggler);
                }
            } else {
                topLeagueToggler(topLeagues);
            }
            return true;
        };

        MyLeagues.prototype._add = function(labelKey, dataKey, topLeagues, confirmToggleCallback) {
            var toggleRollbackCallback;
            toggleRollbackCallback = this._getToggleRollbackCallback(labelKey, true);
            if (topLeagues) {
                topLeagues[labelKey] = true;
                topLeagues.used = true;
                this._lsid.storeData(topLeagues, dataKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
            } else {
                this._lsid.storeData(true, dataKey + "." + labelKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
            }
            return this._runCallback('add', [labelKey]);
        };

        MyLeagues.prototype._remove = function(labelKey, dataKey, topLeagues, confirmToggleCallback) {
            var toggleRollbackCallback;
            toggleRollbackCallback = this._getToggleRollbackCallback(labelKey);
            if (topLeagues) {
                delete topLeagues[labelKey];
                topLeagues.used = true;
                this._lsid.storeData(topLeagues, dataKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
            } else {
                this._lsid.removeData(dataKey + "." + labelKey, confirmToggleCallback, this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
            }
            return this._runCallback('remove', [labelKey]);
        };

        MyLeagues.prototype._tooltipOnElementCanBeDisplayed = function(elementSelector) {
            var hasParent, isAllowed, parentSelector, ref;
            ref = this._parentSelectorsForTooltip;
            for (parentSelector in ref) {
                isAllowed = ref[parentSelector];
                hasParent = this._$(elementSelector).parents(parentSelector).length > 0;
                if (hasParent) {
                    return isAllowed;
                }
            }
            return false;
        };

        MyLeagues.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave;
            mouseenter = (function(_this) {
                return function(e) {
                    var ref;
                    if (((ref = e.relatedTarget) != null ? ref.parentNode : void 0) != null) {
                        return _this._tooltipGetter().show(e.currentTarget, e, true);
                    }
                };
            })(this);
            mouseleave = (function(_this) {
                return function(e) {
                    return _this._tooltipGetter().hide(e.currentTarget);
                };
            })(this);
            this._$('body').delegate(".event__title--myLeagueIcon", 'mouseenter', mouseenter);
            return this._$('body').delegate(".event__title--myLeagueIcon", 'mouseleave', mouseleave);
        };

        MyLeagues.prototype._trackClick = function(labelKey, method) {
            var countryId, et, participantId, ref, sportId, sportName;
            et = this._dic.get('util_enviroment').getEventTrackingObject();
            if (et) {
                ref = labelKey.split('_'), sportId = ref[0], countryId = ref[1], participantId = ref[2];
                sportName = this._dic.get('util_sport').getOriginalNameFromId(sportId);
                return et.track_click(method + "-my-league", participantId, null, null, null, sportName);
            }
        };

        MyLeagues.prototype._createSelectorFromEvent = function(event, skippedClasses) {
            var createPathFromTarget, element, elementClass, elementClasses, elementId, elementName, elementSelector, elements, i, index, j, len, len1, path, ref, ref1;
            if (skippedClasses == null) {
                skippedClasses = [];
            }
            if (!((event != null) && Object.keys(event).length)) {
                return '';
            }
            createPathFromTarget = function() {
                var node, path;
                path = [];
                node = event.target;
                while (true) {
                    path.push(node);
                    node = node.parentNode;
                    if (node.nodeName.toLowerCase() === "body") {
                        path.push(node);
                        break;
                    }
                }
                return path;
            };
            path = (ref = event.path) != null ? ref : createPathFromTarget();
            elements = [];
            for (index = i = 0, len = path.length; i < len; index = ++i) {
                element = path[index];
                elementName = element.nodeName.toLowerCase();
                elementSelector = "" + elementName;
                elementId = element.id;
                if (elementId) {
                    elementSelector += "#" + elementId;
                }
                elementClasses = [];
                ref1 = element.classList;
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                    elementClass = ref1[j];
                    if (indexOf.call(skippedClasses, elementClass) < 0) {
                        elementClasses.push(elementClass);
                    }
                }
                if (elementClasses.length) {
                    elementSelector += "." + (elementClasses.join('.'));
                }
                if (elementSelector) {
                    elements.unshift(elementSelector);
                }
                if (elementName === "body") {
                    break;
                }
            }
            return elements.join(' ');
        };

        MyLeagues.prototype._getIndexFromSelectorAndEvent = function(selector, event) {
            var $element, i, index, nodesAreEqual, ref;
            if (!(selector && event)) {
                return 0;
            }
            index = 0;
            $element = this._$(selector);
            for (index = i = 0, ref = Math.max(0, $element.length - 1); 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
                nodesAreEqual = $element.get(index) === event.currentTarget;
                if (nodesAreEqual) {
                    break;
                }
            }
            return index;
        };

        return MyLeagues;

    })();

    if (typeof window !== "undefined" && window !== null) {
        window.cjs !== {};
        if ((base = window.cjs).MyLeagues == null) {
            base.MyLeagues = MyLeagues;
        }
    } else {
        if (exports.MyLeagues == null) {
            exports.MyLeagues = MyLeagues;
        }
    }

}).call(this);
(function() {
    var MyTeamsMenu;

    MyTeamsMenu = (function() {
        MyTeamsMenu.prototype.UL_ID = 'my-teams-list';

        MyTeamsMenu.prototype.HEAD_COUNT_SELECTOR = '.my-teams .head .count';

        MyTeamsMenu.prototype.LOGO_FILENAME_MIN_LENGTH = 16;

        MyTeamsMenu.prototype.PARTICIPANT_NAME_MAX_CHARS = 17;

        function MyTeamsMenu(myTeams, util_enviroment, util_trans, util_string, util_sport, util_url, HtmlTemplate, $) {
            this.myTeams = myTeams;
            this.util_enviroment = util_enviroment;
            this.util_trans = util_trans;
            this.util_string = util_string;
            this.util_sport = util_sport;
            this.util_url = util_url;
            this.HtmlTemplate = HtmlTemplate;
            this.$ = $;
            this._sportId = this.util_sport.getId();
            this._data = null;
            this._loadData();
            this.myTeams.registerCallback('dataLoaded', (function(_this) {
                return function() {
                    return _this.reload();
                };
            })(this));
            this.myTeams.registerCallback('remove', (function(_this) {
                return function() {
                    return _this.reload();
                };
            })(this));
            this.draw();
        }

        MyTeamsMenu.prototype._loadData = function() {
            var childSPortId, childSportIds, key, myTeamData, myTeamKey, results, sportData;
            this._data = {};
            childSportIds = this.util_sport.getSportIdsInParentSport(this._sportId);
            if (childSportIds.length) {
                results = [];
                for (key in childSportIds) {
                    childSPortId = childSportIds[key];
                    sportData = this.myTeams.getParticipantsData(Number(childSPortId));
                    if (sportData) {
                        results.push((function() {
                            var results1;
                            results1 = [];
                            for (myTeamKey in sportData) {
                                myTeamData = sportData[myTeamKey];
                                results1.push(this._data[myTeamKey] = myTeamData);
                            }
                            return results1;
                        }).call(this));
                    } else {
                        results.push(void 0);
                    }
                }
                return results;
            } else {
                return this._data = this.myTeams.getParticipantsData(this._sportId);
            }
        };

        MyTeamsMenu.prototype._drawCount = function(count) {
            return this.$("" + this.HEAD_COUNT_SELECTOR).text(count != null ? '(' + count + ')' : '');
        };

        MyTeamsMenu.prototype._drawEmpty = function() {
            var html, htmlTemplates;
            this._drawCount(0);
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU_EMPTY, {
                htmlContent: this.util_trans.translate('TRANS_MY_TEAMS_LEFT_MENU_TEXT').replace('[*]', '<span class="toggleMyTeam--text toggleMyTeam"></span>')
            });
            return this.$("#" + this.UL_ID).html(html);
        };

        MyTeamsMenu.prototype._drawLoading = function() {
            var html, htmlTemplates;
            this._drawCount(null);
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU_LOADING, {});
            return this.$("#" + this.UL_ID).html(html);
        };

        MyTeamsMenu.prototype.reload = function() {
            this._loadData();
            return this.draw();
        };

        MyTeamsMenu.prototype.draw = function() {
            var data, html, htmlTemplates, i, len, participantData, participantKey, templateData, tmpData;
            if (this._data == null) {
                return this._drawEmpty();
            }
            tmpData = this.$.extend(true, {}, this._data);
            data = [];
            for (participantKey in tmpData) {
                participantData = tmpData[participantKey];
                participantData['participantKey'] = participantKey;
                data.push(participantData);
            }
            if (this._getDrawnMyTeamsCount(this._sportId) !== data.length) {
                return this._drawLoading();
            } else if (data.length === 0) {
                return this._drawEmpty();
            }
            data.sort((function(data, utilString) {
                return function(a, b) {
                    if (!a.hasOwnProperty('name')) {
                        return -1;
                    }
                    if (!b.hasOwnProperty('name')) {
                        return 1;
                    }
                    return utilString.compare(a.name, b.name);
                };
            })(data, this.util_string));
            templateData = [];
            for (i = 0, len = data.length; i < len; i++) {
                participantData = data[i];
                participantKey = participantData['participantKey'];
                templateData.push({
                    logo: this.getLogo(participantKey),
                    countryId: this.getCountryId(participantKey),
                    title: this.getTitle(participantKey),
                    url: this.getUrl(participantKey),
                    name: this.getName(participantKey),
                    htmlToggleIcon: this.myTeams.getToggleIcon(participantKey)
                });
            }
            htmlTemplates = this.util_enviroment.getHtmlTemplate();
            html = this.HtmlTemplate.render(htmlTemplates.TPL_MY_TEAMS_MY_TEAMS_MENU, {
                items: templateData
            });
            this._drawCount(templateData.length);
            return this.$("#" + this.UL_ID).html(html);
        };

        MyTeamsMenu.prototype._getDrawnMyTeamsCount = function() {
            var childSportIds, count, i, len, sport, sports;
            count = 0;
            childSportIds = this.util_sport.getSportIdsInParentSport(this._sportId);
            sports = [this._sportId];
            if (childSportIds.length) {
                sports = childSportIds;
            }
            for (i = 0, len = sports.length; i < len; i++) {
                sport = sports[i];
                count += this.myTeams.getCount(Number(sport));
            }
            return count;
        };

        MyTeamsMenu.prototype.getCountryId = function(participantKey) {
            return this._getDataValue(participantKey, 'countryId');
        };

        MyTeamsMenu.prototype.getName = function(participantKey) {
            return this._getDataValue(participantKey, 'name');
        };

        MyTeamsMenu.prototype.getTitle = function(participantKey) {
            return this._getDataValue(participantKey, 'title');
        };

        MyTeamsMenu.prototype.getUrl = function(participantKey) {
            return this._getDataValue(participantKey, 'url');
        };

        MyTeamsMenu.prototype.getLogo = function(participantKey) {
            var baseImageDataUrl, logo;
            logo = this._getDataValue(participantKey, 'logo');
            if (logo === 'team') {
                return this.util_url.getEmptyTeamLogo();
            } else if ((logo != null ? logo.length : void 0) > this.LOGO_FILENAME_MIN_LENGTH) {
                baseImageDataUrl = this.util_url.getBaseImageData();
                return "" + baseImageDataUrl + logo;
            }
            return null;
        };

        MyTeamsMenu.prototype._getDataValue = function(participantKey, value) {
            var ref;
            if (((ref = this._data[participantKey]) != null ? ref[value] : void 0) != null) {
                return this._data[participantKey][value];
            } else {
                return null;
            }
        };

        return MyTeamsMenu;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('MyTeamsMenu', MyTeamsMenu, ['myTeamsMenu']);

}).call(this);
(function() {
    var MyTeams,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    MyTeams = (function() {
        MyTeams.prototype.DATA_KEY = 'myTeams';

        MyTeams.prototype.EVENTS_KEY = 'events2';

        MyTeams.prototype.PARTICIPANTS_KEY = 'participants2';

        MyTeams.prototype.DATA_AUTOSYNC_KEY = 'dataAutosyncParticipantRequest2';

        MyTeams.prototype.DATA_AUTOSYNC_INTERVAL = 86400000;

        MyTeams.prototype.TOGGLE_BUTTON_CLASS = 'toggleMyTeam';

        MyTeams.prototype.FEED_ACTION = 'my-teams-events-data-merged';

        MyTeams.prototype.CATEGORY = 10;

        function MyTeams(util_enviroment, util_browser, util_trans, util_page, util_sport, dataEventHolderProxy, dataLeagueHolderProxy, dataParticipantHolder, clientStorage, $, DicProxy) {
            this.util_enviroment = util_enviroment;
            this.util_browser = util_browser;
            this.util_trans = util_trans;
            this.util_page = util_page;
            this.util_sport = util_sport;
            this.dataEventHolderProxy = dataEventHolderProxy;
            this.dataLeagueHolderProxy = dataLeagueHolderProxy;
            this.dataParticipantHolder = dataParticipantHolder;
            this.clientStorage = clientStorage;
            this.$ = $;
            this.DicProxy = DicProxy;
            this.util_config = cjs.Api.config;
            this._useOnlyLocal = this.util_config.get('app', 'user_functions', 'use_only_local');
            this._lsid = this.util_enviroment.getLoginClientObject();
            if (this._useOnlyLocal) {
                this._lsid.addDataKeyToLocalUsage(this.DATA_KEY);
            }
            this._cutAndSaveAllLsidData(this._lsid.getData(this.DATA_KEY));
            this._contextId = this.util_sport.getId();
            this._callbacks = {};
            this._dataAutosyncLastSync = this._read(this.DATA_AUTOSYNC_KEY);
            if (!this._dataAutosyncLastSync) {
                this._dataAutosyncLastSync = {};
            }
            this._dataAutosyncIntervalId = null;
            this._unconfirmedToggles = {};
            this._loadData();
            this.startDataAutosync();
        }

        MyTeams.prototype.reload = function() {
            this._loadData();
            this.restartDataAutosync();
            this.callReactUpdates();
            return this.reloadParticipants();
        };

        MyTeams.prototype._loadData = function() {
            this._participants = this._read(this.PARTICIPANTS_KEY);
            if (!this._participants) {
                this._participants = {};
            }
            this._events = this._read(this.EVENTS_KEY);
            if (!this._events) {
                return this._events = {};
            }
        };

        MyTeams.prototype.stopDataAutosync = function() {
            if (this._dataAutosyncIntervalId != null) {
                return clearInterval(this._dataAutosyncIntervalId);
            }
        };

        MyTeams.prototype.startDataAutosync = function() {
            this._dataAutosync();
            return this._dataAutosyncIntervalId = setInterval((function(_this) {
                return function() {
                    return _this._dataAutosync();
                };
            })(this), this.DATA_AUTOSYNC_INTERVAL);
        };

        MyTeams.prototype.restartDataAutosync = function() {
            this.stopDataAutosync();
            return this.startDataAutosync();
        };

        MyTeams.prototype._isParticipantInSync = function(participantKey, timestamp) {
            var ref;
            if (!timestamp) {
                timestamp = this._now();
            }
            return (((ref = this._dataAutosyncLastSync) != null ? ref[participantKey] : void 0) != null) && (this._dataAutosyncLastSync[participantKey] + this.DATA_AUTOSYNC_INTERVAL > timestamp);
        };

        MyTeams.prototype._getParticipantId = function(participantKey) {
            return participantKey.replace(/^[0-9]+_/, '');
        };

        MyTeams.prototype._dataAutosync = function() {
            var i, len, participantIds, participantKey, participantKeysAll;
            participantIds = [];
            participantKeysAll = this.getSelectedParticipantKeysAll();
            if (participantKeysAll != null) {
                for (i = 0, len = participantKeysAll.length; i < len; i++) {
                    participantKey = participantKeysAll[i];
                    if (!this._isParticipantInSync(participantKey, this._now())) {
                        participantIds.push(this._getParticipantId(participantKey));
                    }
                }
            }
            if (participantIds.length > 0) {
                return this._dataAutosyncRequest(participantIds);
            }
        };

        MyTeams.prototype._dataAutosyncRequest = function(participantIds) {
            var feedRequest, maximumCount;
            if (!participantIds.length) {
                return false;
            }
            maximumCount = this.util_config.get('app', 'myteams', 'maximum_count');
            if (this._isOverMaximumCount(participantIds.length, maximumCount)) {
                participantIds.splice(maximumCount - participantIds.length);
            }
            feedRequest = this.util_enviroment.getFeedRequestObject();
            return this.DicProxy.onReady((function(_this) {
                return function() {
                    if (_this.util_enviroment.getCategory() === 5) {
                        _this.util_enviroment.getLoader().get('react').call(function(reactCalls) {
                            reactCalls.loadingStateReset();
                            return reactCalls.loadingState("myteams", true);
                        });
                    }
                    return feedRequest.execute(_this.FEED_ACTION, null, function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
                        _this.util_enviroment.getLoader().get('react').call(function(reactCalls) {
                            return reactCalls.loadingState("myteams", false);
                        });
                        return _this._dataAutosyncCallback(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders, participantIds);
                    }, {
                        participantIds: participantIds
                    });
                };
            })(this));
        };

        MyTeams.prototype.reloadParticipants = function(participantIds) {
            var i, len, participantKey, participantKeysAll;
            if (participantIds == null) {
                participantIds = null;
            }
            if (participantIds == null) {
                participantIds = [];
                participantKeysAll = this.getSelectedParticipantKeysAll();
                if (participantKeysAll != null) {
                    for (i = 0, len = participantKeysAll.length; i < len; i++) {
                        participantKey = participantKeysAll[i];
                        participantIds.push(this._getParticipantId(participantKey));
                    }
                }
            }
            if (participantIds.length > 0) {
                this._dataAutosyncRequest(participantIds);
                return true;
            }
            return false;
        };

        MyTeams.prototype._getSportIdByEventId = function(eventId) {
            var part;
            if (eventId == null) {
                return null;
            }
            part = eventId.match(/^g_([0-9]+)_.*/);
            if ((part != null ? part[1] : void 0) != null) {
                return parseInt(part[1]);
            } else {
                return null;
            }
        };

        MyTeams.prototype._getDataKey = function(participantKey) {
            var context;
            if (participantKey != null) {
                context = participantKey.replace(/^([0-9]+)_.*/, '$1');
            }
            if (!context) {
                context = this._contextId;
            }
            return this._getDataKeyBySport(context);
        };

        MyTeams.prototype._getDataKeyBySport = function(context) {
            return this.DATA_KEY + "." + context;
        };

        MyTeams.prototype._getDataKeyAll = function() {
            return this.DATA_KEY;
        };

        MyTeams.prototype._getToggleConfirmCallback = function(participantKey) {
            return (function(myTeams) {
                return function() {
                    return delete myTeams._unconfirmedToggles[participantKey];
                };
            })(this);
        };

        MyTeams.prototype._getToggleRollbackCallback = function(participantKey, adding) {
            if (adding == null) {
                adding = false;
            }
            return (function(myTeams) {
                return function() {
                    if (myTeams._useOnlyLocal) {
                        return;
                    }
                    if (myTeams._lsid.loggedIn()) {
                        myTeams._lsid.showTechnicalError();
                    }
                    myTeams._runCallback((adding ? 'remove' : 'add'), [participantKey]);
                    return myTeams.reloadToggleIcons(participantKey);
                };
            })(this);
        };

        MyTeams.prototype.isSelected = function(participantKey) {
            var selectedTeams;
            selectedTeams = this._lsid.getData(this._getDataKey(participantKey));
            if (selectedTeams != null) {
                return selectedTeams.hasOwnProperty(participantKey);
            }
            return false;
        };

        MyTeams.prototype.getParticipantData = function(participantKey) {
            var ref, sport, sportId;
            ref = this._participants;
            for (sportId in ref) {
                sport = ref[sportId];
                if (sport[participantKey] != null) {
                    return sport[participantKey];
                }
            }
            return null;
        };

        MyTeams.prototype.getParticipantsData = function(sportId) {
            var data, participantData, participantKey, participants;
            if (!this._lsid.userFunctionsAreAvailable(this.DATA_KEY)) {
                return null;
            }
            participants = this._participants[sportId] != null ? this._participants[sportId] : {};
            data = {};
            for (participantKey in participants) {
                participantData = participants[participantKey];
                if (this.isSelected(participantKey)) {
                    data[participantKey] = participantData;
                }
            }
            return data;
        };

        MyTeams.prototype.getParticipantsDataAll = function() {
            var participant, participantKey, participants, ref, sport, sportId;
            if (!this._lsid.userFunctionsAreAvailable(this.DATA_KEY)) {
                return null;
            }
            participants = {};
            ref = this._participants;
            for (sportId in ref) {
                sport = ref[sportId];
                for (participantKey in sport) {
                    participant = sport[participantKey];
                    participants[participantKey] = participant;
                }
            }
            return participants;
        };

        MyTeams.prototype.getParticipantsEvents = function() {
            var data, events, participantKey, ref;
            if (!this._lsid.userFunctionsAreAvailable(this.DATA_KEY)) {
                return {};
            }
            data = {};
            ref = this._events;
            for (participantKey in ref) {
                events = ref[participantKey];
                if (this.isSelected(participantKey)) {
                    data[participantKey] = events;
                }
            }
            return data;
        };

        MyTeams.prototype.getSports = function() {
            var eventKey, events, i, len, participantKey, participantsEvents, sports;
            sports = {};
            participantsEvents = this.getParticipantsEvents();
            for (participantKey in participantsEvents) {
                events = participantsEvents[participantKey];
                for (i = 0, len = events.length; i < len; i++) {
                    eventKey = events[i];
                    sports[eventKey.split('_')[1]] = true;
                }
            }
            return Object.getOwnPropertyNames(sports);
        };

        MyTeams.prototype.getParticipantEvents = function(participantKey) {
            var events;
            events = this.getParticipantsEvents();
            if ((events[participantKey] != null) && events[participantKey].length > 0) {
                return events[participantKey];
            } else {
                return [];
            }
        };

        MyTeams.prototype.getSelectedParticipantKeysAll = function(contextId) {
            var selectedParticipantKey, selectedParticipantKeys, selectedTeams, sportId, sports;
            if (contextId == null) {
                contextId = null;
            }
            sports = this._lsid.getData(this._getDataKeyAll());
            if (sports === null) {
                return null;
            }
            sports = this._cutAndSaveAllLsidData(sports);
            selectedParticipantKeys = [];
            for (sportId in sports) {
                selectedTeams = sports[sportId];
                if (contextId && parseInt(sportId) !== contextId) {
                    continue;
                }
                for (selectedParticipantKey in selectedTeams) {
                    if (selectedParticipantKey !== 'used') {
                        selectedParticipantKeys.push(selectedParticipantKey);
                    }
                }
            }
            return selectedParticipantKeys;
        };

        MyTeams.prototype.getToggleIconClass = function(participantKey) {
            var iconClasses;
            iconClasses = [this.TOGGLE_BUTTON_CLASS];
            if (this.isSelected(participantKey)) {
                iconClasses.push('active');
            }
            iconClasses.push(participantKey);
            return iconClasses.join(' ');
        };

        MyTeams.prototype.getToggleIcon = function(participantKey, noLoggedInCallbackStr, selected, strObj, appendJs) {
            var iconClass, iconClasses, iconTitle;
            if (noLoggedInCallbackStr == null) {
                noLoggedInCallbackStr = null;
            }
            if (selected == null) {
                selected = null;
            }
            if (strObj == null) {
                strObj = 'cjs.myTeams';
            }
            if (appendJs == null) {
                appendJs = '';
            }
            iconClasses = [this.TOGGLE_BUTTON_CLASS];
            if (selected == null) {
                selected = this.isSelected(participantKey);
            }
            if (selected) {
                iconClasses.push('active');
                iconTitle = this.util_trans.translate('TRANS_MY_TEAMS_REMOVE');
            } else {
                iconTitle = this.util_trans.translate('TRANS_MY_TEAMS_ADD');
            }
            noLoggedInCallbackStr = noLoggedInCallbackStr != null ? ", " + noLoggedInCallbackStr : '';
            iconClasses.push(participantKey);
            iconClass = iconClasses.join(' ');
            return "<span class=\"" + iconClass + "\" title=\"" + iconTitle + "\" onclick=\"tt.hide(this); " + strObj + ".toggle('" + participantKey + "'" + noLoggedInCallbackStr + ");" + appendJs + " event.stopPropagation();\"></span>";
        };

        MyTeams.prototype.reloadToggleIcons = function(participantKey) {
            var i, keys, len, results;
            if ((participantKey != null) && participantKey) {
                this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).removeClass('active');
                return this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).replaceWith(this.getToggleIcon(participantKey));
            } else {
                this.$("." + this.TOGGLE_BUTTON_CLASS).removeClass('active');
                keys = this.getSelectedParticipantKeysAll();
                if ((keys != null) && keys.length) {
                    results = [];
                    for (i = 0, len = keys.length; i < len; i++) {
                        participantKey = keys[i];
                        results.push(this.$("." + this.TOGGLE_BUTTON_CLASS + "." + participantKey).replaceWith(this.getToggleIcon(participantKey)));
                    }
                    return results;
                }
            }
        };

        MyTeams.prototype.toggle = function(participantKey, noLoggedInCallback) {
            if (noLoggedInCallback == null) {
                noLoggedInCallback = null;
            }
            if (!this._lsid.userFunctionsAreAvailable(this.DATA_KEY)) {
                return this._toggleWhenNotLoggedIn(noLoggedInCallback);
            }
            if (!participantKey) {
                return false;
            }
            return this._toggleWhenLoggedIn(participantKey);
        };

        MyTeams.prototype._toggleWhenNotLoggedIn = function(callback) {
            var loginJq, msgDiv;
            if (callback == null) {
                callback = null;
            }
            if (callback != null) {
                callback();
                return false;
            }
            if (this.util_page.isFullPage()) {
                msgDiv = this.$('<div>');
                msgDiv.addClass("lsid-messages");
                msgDiv.addClass("reg-version-two");
                msgDiv.append(this.$('<div>').addClass("message").addClass("err").html(this.util_trans.translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER')));
                loginJq = [{
                    "selector": "#login-content",
                    "functionName": "prepend",
                    "params": [msgDiv]
                }];
                this._lsid.showDialog('login', loginJq);
            } else {
                this._lsid._showMessage(this.util_trans.translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'), true);
            }
            return false;
        };

        MyTeams.prototype._toggleWhenLoggedIn = function(participantKey) {
            var confirmToggleCallback, dataKey, selectedTeamToggler, selectedTeams;
            if ((participantKey == null) || this._unconfirmedToggles.hasOwnProperty(participantKey)) {
                return false;
            }
            this._unconfirmedToggles[participantKey] = true;
            confirmToggleCallback = this._getToggleConfirmCallback(participantKey);
            dataKey = this._getDataKey(participantKey);
            selectedTeams = false;
            selectedTeamToggler = (function(_this) {
                return function(selectedTeams) {
                    var isSelected, toggleRollbackCallback;
                    if (selectedTeams == null) {
                        selectedTeams = null;
                    }
                    isSelected = _this.isSelected(participantKey);
                    if (isSelected) {
                        toggleRollbackCallback = _this._getToggleRollbackCallback(participantKey);
                        if (selectedTeams) {
                            selectedTeams.used = true;
                            _this._lsid.storeData(selectedTeams, dataKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
                        } else {
                            _this._lsid.removeData(dataKey + "." + participantKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
                        }
                        _this._runCallback('remove', [participantKey]);
                    } else {
                        if (_this._isOverMaximumCount(_this.getCount() + 1)) {
                            _this._lsid._showMessage(_this.util_trans.translate('TRANS_MY_TEAMS_LIMIT_REACHED'), true);
                            _this._unconfirmedToggles = {};
                            return;
                        }
                        toggleRollbackCallback = _this._getToggleRollbackCallback(participantKey, true);
                        if (selectedTeams) {
                            selectedTeams[participantKey] = true;
                            selectedTeams.used = true;
                            _this._lsid.storeData(selectedTeams, dataKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
                        } else {
                            _this._lsid.storeData(true, dataKey + "." + participantKey, confirmToggleCallback, _this._createCallbackGroup([toggleRollbackCallback, confirmToggleCallback]));
                        }
                        _this.reloadParticipants([_this._getParticipantId(participantKey)]);
                        _this._runCallback('add', [participantKey]);
                    }
                    _this._trackClick(participantKey, isSelected ? 'remove' : 'add');
                    _this.reloadToggleIcons(participantKey);
                    return _this.callReactUpdates();
                };
            })(this);
            if (this._lsid.getData(dataKey) == null) {
                selectedTeams = {};
                delete this._unconfirmedToggles[participantKey];
            }
            selectedTeamToggler(selectedTeams);
            return true;
        };

        MyTeams.prototype.delegateTooltips = function() {
            var mouseenter, mouseleave, ttGetter;
            ttGetter = this.util_enviroment.getTooltipObject;
            mouseenter = function(event) {
                return ttGetter().show(this, event);
            };
            mouseleave = function() {
                return ttGetter().hide(this);
            };
            this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'mouseenter', mouseenter);
            this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'click', mouseleave);
            return this.$('body').delegate("." + this.TOGGLE_BUTTON_CLASS, 'mouseleave', mouseleave);
        };

        MyTeams.prototype._dataAutosyncCallback = function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders, requestParticipantIds) {
            var eventId, i, j, k, len, len1, len2, parse, participant, participantId, participantKey, ref, ref1, ref2, sportId, sportIds, waste;
            parse = this.util_enviroment.getParse();
            parse(responseContent, false, false, this.FEED_ACTION);
            ref = this.dataParticipantHolder.getAllContainerIds();
            for (i = 0, len = ref.length; i < len; i++) {
                participantId = ref[i];
                participant = this.dataParticipantHolder.getParticipant(participantId);
                if (participant.isDeleted()) {
                    ref1 = this.getSelectedParticipantKeysAll();
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                        participantKey = ref1[j];
                        if (this._getParticipantId(participantKey) === participantId) {
                            this.toggle(participantKey);
                        }
                    }
                    continue;
                }
                sportId = participant.getSportId();
                sportIds = sportId instanceof Array ? sportId : [sportId];
                for (k = 0, len2 = sportIds.length; k < len2; k++) {
                    sportId = sportIds[k];
                    participantKey = sportId + '_' + participantId;
                    this._dataAutosyncLastSync[participantKey] = this._now();
                    if (this._participants[sportId] == null) {
                        this._participants[sportId] = {};
                    }
                    this._participants[sportId][participantKey] = {
                        'countryId': participant.getCountryId(),
                        'title': participant.getTitle(),
                        'name': participant.getShortName(),
                        'url': participant.getUrl(),
                        'logo': participant.getTableImage(),
                        'sportId': participant.getSportId()
                    };
                    this._events[participantKey] = [];
                    ref2 = participant.getEventIds();
                    for (eventId in ref2) {
                        waste = ref2[eventId];
                        if (this._getSportIdByEventId(eventId) === sportId) {
                            this._events[participantKey].push(eventId);
                        }
                    }
                }
            }
            this._store(this.DATA_AUTOSYNC_KEY, this._dataAutosyncLastSync);
            this._store(this.PARTICIPANTS_KEY, this._participants);
            this._store(this.EVENTS_KEY, this._events);
            this.callReactUpdates();
            return this._runCallback('dataLoaded');
        };

        MyTeams.prototype._read = function(key) {
            key = this.DATA_KEY + '_' + key;
            return JSON.parse(this.clientStorage.get(key));
        };

        MyTeams.prototype._store = function(key, value) {
            key = this.DATA_KEY + '_' + key;
            return this.clientStorage.store(key, JSON.stringify(value));
        };

        MyTeams.prototype._drop = function(key) {
            key = this.DATA_KEY + '_' + key;
            return this.clientStorage.drop(key);
        };

        MyTeams.prototype.printToggleIcons = function() {
            return this.$('div[id^=\"tomyteams_\"]').each((function(_this) {
                return function(index, obj) {
                    var participant;
                    participant = _this.$(obj).attr('id').match('^tomyteams_([0-9]+_[a-zA-Z0-9]+)');
                    if (participant != null) {
                        return _this.$(obj).append(_this.getToggleIcon(participant[1]));
                    }
                };
            })(this));
        };

        MyTeams.prototype.registerCallback = function(triggerName, callback) {
            if (this._callbacks[triggerName] == null) {
                this._callbacks[triggerName] = [];
            }
            return this._callbacks[triggerName].push(callback);
        };

        MyTeams.prototype._createCallbackGroup = function(callbacks, params) {
            var myTeams;
            if (callbacks == null) {
                callbacks = [];
            }
            if (params == null) {
                params = [];
            }
            myTeams = this;
            return function() {
                var callback, i, len, results;
                if (!params.length) {
                    params = arguments;
                }
                results = [];
                for (i = 0, len = callbacks.length; i < len; i++) {
                    callback = callbacks[i];
                    results.push(setTimeout((function(callbackFunction) {
                        return function() {
                            return callbackFunction.apply(myTeams, params);
                        };
                    })(callback), 0));
                }
                return results;
            };
        };

        MyTeams.prototype._runCallback = function(triggerName, params) {
            if (triggerName == null) {
                triggerName = '';
            }
            if (this._callbacks[triggerName] != null) {
                this._createCallbackGroup(this._callbacks[triggerName], params)();
                return true;
            }
            return false;
        };

        MyTeams.prototype._now = function() {
            return (new Date()).getTime();
        };

        MyTeams.prototype._cutAndSaveAllLsidData = function(data) {
            var currentCount, newData, selectedParticipantKey, selectedTeams, sportId, value;
            if (data == null) {
                return {};
            }
            currentCount = 0;
            newData = {};
            for (sportId in data) {
                selectedTeams = data[sportId];
                for (selectedParticipantKey in selectedTeams) {
                    value = selectedTeams[selectedParticipantKey];
                    if (/^([0-9]+)_.*/.test(selectedParticipantKey)) {
                        currentCount++;
                    }
                    if (this._isOverMaximumCount(currentCount)) {
                        this._drop(this.DATA_AUTOSYNC_KEY);
                        this._dataAutosyncLastSync = {};
                        this._drop(this.PARTICIPANTS_KEY);
                        this._participants = {};
                        this._drop(this.EVENTS_KEY);
                        this._events = {};
                        this._lsid.storeData(newData, this._getDataKeyAll());
                        return newData;
                    }
                    if (newData[sportId] == null) {
                        newData[sportId] = {};
                    }
                    newData[sportId][selectedParticipantKey] = value;
                }
            }
            return data;
        };

        MyTeams.prototype._isOverMaximumCount = function(count, maximumCount) {
            if (maximumCount == null) {
                maximumCount = this.util_config.get('app', 'myteams', 'maximum_count');
            }
            if (maximumCount == null) {
                return false;
            }
            return count > maximumCount;
        };

        MyTeams.prototype.getCount = function(sportId) {
            var participantKeysAll;
            if (sportId == null) {
                sportId = null;
            }
            participantKeysAll = this.getSelectedParticipantKeysAll(sportId);
            if (participantKeysAll != null) {
                return participantKeysAll.length;
            } else {
                return 0;
            }
        };

        MyTeams.prototype.eventExists = function(eventId) {
            var events, participantId, ref;
            ref = this.getParticipantsEvents();
            for (participantId in ref) {
                events = ref[participantId];
                if (indexOf.call(events, eventId) >= 0) {
                    return true;
                }
            }
            return false;
        };

        MyTeams.prototype._trackClick = function(participantKey, method) {
            var et, participantId, ref, sportId, sportName;
            et = this.util_enviroment.getEventTrackingObject();
            if (et) {
                ref = participantKey.split('_'), sportId = ref[0], participantId = ref[1];
                sportName = this.util_sport.getOriginalNameFromId(parseInt(sportId));
                return et.track_click(method + "-my-team", participantId, null, null, null, sportName);
            }
        };

        MyTeams.prototype.callReactUpdates = function() {
            return this.util_enviroment.getLoader().get('react').call((function(_this) {
                return function(reactCalls) {
                    return reactCalls.forceRedrawTabContent(_this.CATEGORY);
                };
            })(this));
        };

        return MyTeams;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('MyTeams', MyTeams, ['myTeams']);

    if (typeof exports !== "undefined" && exports !== null) {
        if (exports.MyTeams == null) {
            exports.MyTeams = MyTeams;
        }
    }

}).call(this);
var AdblockPlus = new function() {
    var usesABP;
    var isInProgress;
    var waitingCallbacks = [];
    this.detect = function(px, callback) {
        if (typeof usesABP !== 'undefined') {
            return callback(usesABP);
        } else {
            waitingCallbacks.push(callback);
            if (isInProgress) return;
        }

        isInProgress = true;
        var detected = false;

        var checksRemain = 2;
        var error1 = false;
        var error2 = false;
        if (typeof callback != "function") return;

        px += "?ch=*&rn=*";

        function beforeCheck(callback, timeout) {
            if (checksRemain === 0 || timeout > 1E3) {
                usesABP = checksRemain === 0 && detected;
                isInProgress = false;
                waitingCallbacks.forEach(function(cb) {
                    cb(usesABP);
                });
                waitingCallbacks = [];
            } else
                setTimeout(function() {
                    beforeCheck(callback, timeout * 2)
                }, timeout * 2);
        }

        function checkImages() {
            if (--checksRemain) {
                return;
            }
            detected = !error1 && error2;
        }

        var random = Math.random() * 11;
        var img1 = new Image;
        img1.onload = checkImages;
        img1.onerror =
            function() {
                error1 = true;
                checkImages()
            };
        img1.src = px.replace(/\*/, 1).replace(/\*/, random);
        var img2 = new Image;
        img2.onload = checkImages;
        img2.onerror = function() {
            error2 = true;
            checkImages();
        };
        img2.src = px.replace(/\*/, 2).replace(/\*/, random);
        beforeCheck(callback, 250);
    }
};
/*!
Waypoints - 4.0.0
Copyright Â© 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
! function() {
    "use strict";

    function t(o) {
        if (!o) throw new Error("No options passed to Waypoint constructor");
        if (!o.element) throw new Error("No element option passed to Waypoint constructor");
        if (!o.handler) throw new Error("No handler option passed to Waypoint constructor");
        this.key = "waypoint-" + e, this.options = t.Adapter.extend({}, t.defaults, o), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = o.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1
    }
    var e = 0,
        i = {};
    t.prototype.queueTrigger = function(t) {
        this.group.queueTrigger(this, t)
    }, t.prototype.trigger = function(t) {
        this.enabled && this.callback && this.callback.apply(this, t)
    }, t.prototype.destroy = function() {
        this.context.remove(this), this.group.remove(this), delete i[this.key]
    }, t.prototype.disable = function() {
        return this.enabled = !1, this
    }, t.prototype.enable = function() {
        return this.context.refresh(), this.enabled = !0, this
    }, t.prototype.next = function() {
        return this.group.next(this)
    }, t.prototype.previous = function() {
        return this.group.previous(this)
    }, t.invokeAll = function(t) {
        var e = [];
        for (var o in i) e.push(i[o]);
        for (var n = 0, r = e.length; r > n; n++) e[n][t]()
    }, t.destroyAll = function() {
        t.invokeAll("destroy")
    }, t.disableAll = function() {
        t.invokeAll("disable")
    }, t.enableAll = function() {
        t.invokeAll("enable")
    }, t.refreshAll = function() {
        t.Context.refreshAll()
    }, t.viewportHeight = function() {
        return window.innerHeight || document.documentElement.clientHeight
    }, t.viewportWidth = function() {
        return document.documentElement.clientWidth
    }, t.adapters = [], t.defaults = {
        context: window,
        continuous: !0,
        enabled: !0,
        group: "default",
        horizontal: !1,
        offset: 0
    }, t.offsetAliases = {
        "bottom-in-view": function() {
            return this.context.innerHeight() - this.adapter.outerHeight()
        },
        "right-in-view": function() {
            return this.context.innerWidth() - this.adapter.outerWidth()
        }
    }, window.Waypoint = t
}(),
function() {
    "use strict";

    function t(t) {
        window.setTimeout(t, 1e3 / 60)
    }

    function e(t) {
        this.element = t, this.Adapter = n.Adapter, this.adapter = new this.Adapter(t), this.key = "waypoint-context-" + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = {
            x: this.adapter.scrollLeft(),
            y: this.adapter.scrollTop()
        }, this.waypoints = {
            vertical: {},
            horizontal: {}
        }, t.waypointContextKey = this.key, o[t.waypointContextKey] = this, i += 1, this.createThrottledScrollHandler(), this.createThrottledResizeHandler()
    }
    var i = 0,
        o = {},
        n = window.Waypoint,
        r = window.onload;
    e.prototype.add = function(t) {
        var e = t.options.horizontal ? "horizontal" : "vertical";
        this.waypoints[e][t.key] = t, this.refresh()
    }, e.prototype.checkEmpty = function() {
        var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),
            e = this.Adapter.isEmptyObject(this.waypoints.vertical);
        t && e && (this.adapter.off(".waypoints"), delete o[this.key])
    }, e.prototype.createThrottledResizeHandler = function() {
        function t() {
            e.handleResize(), e.didResize = !1
        }
        var e = this;
        this.adapter.on("resize.waypoints", function() {
            e.didResize || (e.didResize = !0, n.requestAnimationFrame(t))
        })
    }, e.prototype.createThrottledScrollHandler = function() {
        function t() {
            e.handleScroll(), e.didScroll = !1
        }
        var e = this;
        this.adapter.on("scroll.waypoints", function() {
            (!e.didScroll || n.isTouch) && (e.didScroll = !0, n.requestAnimationFrame(t))
        })
    }, e.prototype.handleResize = function() {
        n.Context.refreshAll()
    }, e.prototype.handleScroll = function() {
        var t = {},
            e = {
                horizontal: {
                    newScroll: this.adapter.scrollLeft(),
                    oldScroll: this.oldScroll.x,
                    forward: "right",
                    backward: "left"
                },
                vertical: {
                    newScroll: this.adapter.scrollTop(),
                    oldScroll: this.oldScroll.y,
                    forward: "down",
                    backward: "up"
                }
            };
        for (var i in e) {
            var o = e[i],
                n = o.newScroll > o.oldScroll,
                r = n ? o.forward : o.backward;
            for (var s in this.waypoints[i]) {
                var a = this.waypoints[i][s],
                    l = o.oldScroll < a.triggerPoint,
                    h = o.newScroll >= a.triggerPoint,
                    p = l && h,
                    u = !l && !h;
                (p || u) && (a.queueTrigger(r), t[a.group.id] = a.group)
            }
        }
        for (var c in t) t[c].flushTriggers();
        this.oldScroll = {
            x: e.horizontal.newScroll,
            y: e.vertical.newScroll
        }
    }, e.prototype.innerHeight = function() {
        return this.element == this.element.window ? n.viewportHeight() : this.adapter.innerHeight()
    }, e.prototype.remove = function(t) {
        delete this.waypoints[t.axis][t.key], this.checkEmpty()
    }, e.prototype.innerWidth = function() {
        return this.element == this.element.window ? n.viewportWidth() : this.adapter.innerWidth()
    }, e.prototype.destroy = function() {
        var t = [];
        for (var e in this.waypoints)
            for (var i in this.waypoints[e]) t.push(this.waypoints[e][i]);
        for (var o = 0, n = t.length; n > o; o++) t[o].destroy()
    }, e.prototype.refresh = function() {
        var t, e = this.element == this.element.window,
            i = e ? void 0 : this.adapter.offset(),
            o = {};
        this.handleScroll(), t = {
            horizontal: {
                contextOffset: e ? 0 : i.left,
                contextScroll: e ? 0 : this.oldScroll.x,
                contextDimension: this.innerWidth(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left",
                offsetProp: "left"
            },
            vertical: {
                contextOffset: e ? 0 : i.top,
                contextScroll: e ? 0 : this.oldScroll.y,
                contextDimension: this.innerHeight(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up",
                offsetProp: "top"
            }
        };
        for (var r in t) {
            var s = t[r];
            for (var a in this.waypoints[r]) {
                var l, h, p, u, c, d = this.waypoints[r][a],
                    f = d.options.offset,
                    w = d.triggerPoint,
                    y = 0,
                    g = null == w;
                d.element !== d.element.window && (y = d.adapter.offset()[s.offsetProp]), "function" == typeof f ? f = f.apply(d) : "string" == typeof f && (f = parseFloat(f), d.options.offset.indexOf("%") > -1 && (f = Math.ceil(s.contextDimension * f / 100))), l = s.contextScroll - s.contextOffset, d.triggerPoint = y + l - f, h = w < s.oldScroll, p = d.triggerPoint >= s.oldScroll, u = h && p, c = !h && !p, !g && u ? (d.queueTrigger(s.backward), o[d.group.id] = d.group) : !g && c ? (d.queueTrigger(s.forward), o[d.group.id] = d.group) : g && s.oldScroll >= d.triggerPoint && (d.queueTrigger(s.forward), o[d.group.id] = d.group)
            }
        }
        return n.requestAnimationFrame(function() {
            for (var t in o) o[t].flushTriggers()
        }), this
    }, e.findOrCreateByElement = function(t) {
        return e.findByElement(t) || new e(t)
    }, e.refreshAll = function() {
        for (var t in o) o[t].refresh()
    }, e.findByElement = function(t) {
        return o[t.waypointContextKey]
    }, window.onload = function() {
        r && r(), e.refreshAll()
    }, n.requestAnimationFrame = function(e) {
        var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;
        i.call(window, e)
    }, n.Context = e
}(),
function() {
    "use strict";

    function t(t, e) {
        return t.triggerPoint - e.triggerPoint
    }

    function e(t, e) {
        return e.triggerPoint - t.triggerPoint
    }

    function i(t) {
        this.name = t.name, this.axis = t.axis, this.id = this.name + "-" + this.axis, this.waypoints = [], this.clearTriggerQueues(), o[this.axis][this.name] = this
    }
    var o = {
            vertical: {},
            horizontal: {}
        },
        n = window.Waypoint;
    i.prototype.add = function(t) {
        this.waypoints.push(t)
    }, i.prototype.clearTriggerQueues = function() {
        this.triggerQueues = {
            up: [],
            down: [],
            left: [],
            right: []
        }
    }, i.prototype.flushTriggers = function() {
        for (var i in this.triggerQueues) {
            var o = this.triggerQueues[i],
                n = "up" === i || "left" === i;
            o.sort(n ? e : t);
            for (var r = 0, s = o.length; s > r; r += 1) {
                var a = o[r];
                (a.options.continuous || r === o.length - 1) && a.trigger([i])
            }
        }
        this.clearTriggerQueues()
    }, i.prototype.next = function(e) {
        this.waypoints.sort(t);
        var i = n.Adapter.inArray(e, this.waypoints),
            o = i === this.waypoints.length - 1;
        return o ? null : this.waypoints[i + 1]
    }, i.prototype.previous = function(e) {
        this.waypoints.sort(t);
        var i = n.Adapter.inArray(e, this.waypoints);
        return i ? this.waypoints[i - 1] : null
    }, i.prototype.queueTrigger = function(t, e) {
        this.triggerQueues[e].push(t)
    }, i.prototype.remove = function(t) {
        var e = n.Adapter.inArray(t, this.waypoints);
        e > -1 && this.waypoints.splice(e, 1)
    }, i.prototype.first = function() {
        return this.waypoints[0]
    }, i.prototype.last = function() {
        return this.waypoints[this.waypoints.length - 1]
    }, i.findOrCreate = function(t) {
        return o[t.axis][t.name] || new i(t)
    }, n.Group = i
}(),
function() {
    "use strict";

    function t(t) {
        this.$element = e(t)
    }
    var e = window.jQuery,
        i = window.Waypoint;
    e.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function(e, i) {
        t.prototype[i] = function() {
            var t = Array.prototype.slice.call(arguments);
            return this.$element[i].apply(this.$element, t)
        }
    }), e.each(["extend", "inArray", "isEmptyObject"], function(i, o) {
        t[o] = e[o]
    }), i.adapters.push({
        name: "jquery",
        Adapter: t
    }), i.Adapter = t
}(),
function() {
    "use strict";

    function t(t) {
        return function() {
            var i = [],
                o = arguments[0];
            return t.isFunction(arguments[0]) && (o = t.extend({}, arguments[1]), o.handler = arguments[0]), this.each(function() {
                var n = t.extend({}, o, {
                    element: this
                });
                "string" == typeof n.context && (n.context = t(this).closest(n.context)[0]), i.push(new e(n))
            }), i
        }
    }
    var e = window.Waypoint;
    window.jQuery && (window.jQuery.fn.waypoint = t(window.jQuery)), window.Zepto && (window.Zepto.fn.waypoint = t(window.Zepto))
}();
/*!
Waypoints Sticky Element Shortcut - 4.0.0
Copyright Â© 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blog/master/licenses.txt
*/
! function() {
    "use strict";

    function t(s) {
        this.options = e.extend({}, i.defaults, t.defaults, s), this.element = this.options.element, this.$element = e(this.element), this.createWrapper(), this.createWaypoint()
    }
    var e = window.jQuery,
        i = window.Waypoint;
    t.prototype.createWaypoint = function() {
        var t = this.options.handler;
        this.waypoint = new i(e.extend({}, this.options, {
            element: this.wrapper,
            handler: e.proxy(function(e) {
                var i = this.options.direction.indexOf(e) > -1,
                    s = i ? this.$element.outerHeight(!0) : "";
                this.$wrapper.height(s), this.$element.toggleClass(this.options.stuckClass, i), t && t.call(this, e)
            }, this)
        }))
    }, t.prototype.createWrapper = function() {
        this.options.wrapper && this.$element.wrap(this.options.wrapper), this.$wrapper = this.$element.parent(), this.wrapper = this.$wrapper[0]
    }, t.prototype.destroy = function() {
        this.$element.parent()[0] === this.wrapper && (this.waypoint.destroy(), this.$element.removeClass(this.options.stuckClass), this.options.wrapper && this.$element.unwrap())
    }, t.defaults = {
        wrapper: '<div class="sticky-wrapper" />',
        stuckClass: "stuck",
        direction: "down right"
    }, i.Sticky = t
}();
/**
 * jQuery iframe click tracking plugin
 *
 * @author Vincent ParÃ© (www.finalclap.com)
 * @copyright Â© 2013-2015 Vincent ParÃ©
 * @license http://opensource.org/licenses/Apache-2.0
 * @version 1.1.0
 */
(function($) {
    // Tracking handler manager
    $.fn.iframeTracker = function(handler) {
        var target = this.get();
        if (handler === null || handler === false) {
            $.iframeTracker.untrack(target);
        } else if (typeof handler == "object") {
            $.iframeTracker.track(target, handler);
        } else {
            throw new Error("Wrong handler type (must be an object, or null|false to untrack)");
        }
    };

    // Iframe tracker common object
    $.iframeTracker = {
        // State
        focusRetriever: null, // Element used for restoring focus on window (element)
        focusRetrieved: false, // Says if the focus was retrived on the current page (bool)
        handlersList: [], // Store a list of every trakers (created by calling $(selector).iframeTracker...)
        isIE8AndOlder: false, // true for Internet Explorer 8 and older

        // Init (called once on document ready)
        init: function() {
            // Determine browser version (IE8-) ($.browser.msie is deprecated since jQuery 1.9)
            try {
                if ($.browser.msie == true && $.browser.version < 9) {
                    this.isIE8AndOlder = true;
                }
            } catch (ex) {
                try {
                    var matches = navigator.userAgent.match(/(msie) ([\w.]+)/i);
                    if (matches[2] < 9) {
                        this.isIE8AndOlder = true;
                    }
                } catch (ex2) {}
            }

            // Listening window blur
            $(window).focus();
            $(window).blur(function(e) {
                $.iframeTracker.windowLoseFocus(e);
            });

            // Focus retriever (get the focus back to the page, on mouse move)
            $('body').append('<div style="position:fixed; top:0; left:0; overflow:hidden;"><input style="position:absolute; left:-300px;" type="text" value="" id="focus_retriever" readonly="true" /></div>');
            this.focusRetriever = $('#focus_retriever');
            this.focusRetrieved = false;
            $(document).mousemove(function(e) {
                if (document.activeElement && document.activeElement.tagName == 'IFRAME') {
                    $.iframeTracker.focusRetriever.focus();
                    $.iframeTracker.focusRetrieved = true;
                }
            });

            // Special processing to make it work with my old friend IE8 (and older) ;)
            if (this.isIE8AndOlder) {
                // Blur doesn't works correctly on IE8-, so we need to trigger it manually
                this.focusRetriever.blur(function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                    $.iframeTracker.windowLoseFocus(e);
                });

                // Keep focus on window (fix bug IE8-, focusable elements)
                $('body').click(function(e) {
                    $(window).focus();
                });
                $('form').click(function(e) {
                    e.stopPropagation();
                });

                // Same thing for "post-DOMready" created forms (issue #6)
                try {
                    $('body').on('click', 'form', function(e) {
                        e.stopPropagation();
                    });
                } catch (ex) {
                    console.log("[iframeTracker] Please update jQuery to 1.7 or newer. (exception: " + ex.message + ")");
                }
            }
        },


        // Add tracker to target using handler (bind boundary listener + register handler)
        // target: Array of target elements (native DOM elements)
        // handler: User handler object
        track: function(target, handler) {
            // Adding target elements references into handler
            handler.target = target;

            // Storing the new handler into handler list
            $.iframeTracker.handlersList.push(handler);

            // Binding boundary listener
            $(target)
                .bind('mouseover', {
                    handler: handler
                }, $.iframeTracker.mouseoverListener)
                .bind('mouseout', {
                    handler: handler
                }, $.iframeTracker.mouseoutListener);
        },

        // Remove tracking on target elements
        // target: Array of target elements (native DOM elements)
        untrack: function(target) {
            if (typeof Array.prototype.filter != "function") {
                console.log("Your browser doesn't support Array filter, untrack disabled");
                return;
            }

            // Unbinding boundary listener
            $(target).each(function(index) {
                $(this)
                    .unbind('mouseover', $.iframeTracker.mouseoverListener)
                    .unbind('mouseout', $.iframeTracker.mouseoutListener);
            });

            // Handler garbage collector
            var nullFilter = function(value) {
                return value === null ? false : true;
            };
            for (var i in this.handlersList) {
                // Prune target
                for (var j in this.handlersList[i].target) {
                    if ($.inArray(this.handlersList[i].target[j], target) !== -1) {
                        this.handlersList[i].target[j] = null;
                    }
                }
                this.handlersList[i].target = this.handlersList[i].target.filter(nullFilter);

                // Delete handler if unused
                if (this.handlersList[i].target.length == 0) {
                    this.handlersList[i] = null;
                }
            }
            this.handlersList = this.handlersList.filter(nullFilter);
        },

        // Target mouseover event listener
        mouseoverListener: function(e) {
            e.data.handler.over = true;
            try {
                e.data.handler.overCallback(this);
            } catch (ex) {}
        },

        // Target mouseout event listener
        mouseoutListener: function(e) {
            e.data.handler.over = false;
            $.iframeTracker.focusRetriever.focus();
            try {
                e.data.handler.outCallback(this);
            } catch (ex) {}
        },

        // Calls blurCallback for every handler with over=true on window blur
        windowLoseFocus: function(event) {
            for (var i in this.handlersList) {
                if (this.handlersList[i].over == true) {
                    try {
                        this.handlersList[i].blurCallback();
                    } catch (ex) {}
                }
            }
        }
    };

    // Init the iframeTracker on document ready
    $(document).ready(function() {
        $.iframeTracker.init();
    });
})(jQuery);
"use strict";
(function() {
    var type = function(obj) {
        if (obj === undefined || obj === null) {
            return String(obj);
        }
        var classToType = {};
        var ref = "Boolean Number String Function Array Date RegExp".split(" ");
        for (var i = 0, len = ref.length; i < len; i++) {
            var name_1 = ref[i];
            classToType["[object " + name_1 + "]"] = name_1.toLowerCase();
        }
        var myClass = Object.prototype.toString.call(obj);
        if (myClass in classToType) {
            return classToType[myClass];
        }
        return "object";
    };
    var log = function(msg, ident) {
        if (ident === void 0) {
            ident = "";
        }
        if (ident != "") {
            ident = ident + ": ";
        }
        if ((typeof console !== "undefined" && console !== null ?
                console.log :
                null) != null) {
            return console.log("" + ident + msg);
        }
    };
    var dir = function(obj) {
        if ((typeof console !== "undefined" && console !== null ?
                console.dir :
                null) != null) {
            return console.dir(obj);
        }
    };
    if (typeof window !== "undefined" && window !== null) {
        if (window.cjs == null) {
            window.cjs = {};
        }
        if (window.cjs.type == null) {
            window.cjs.type = type;
        }
        if (window.cjs.log == null) {
            window.cjs.log = log;
        }
        if (window.cjs.dir == null) {
            window.cjs.dir = dir;
        }
    } else {
        if (exports.type == null) {
            exports.type = type;
        }
        if (exports.log == null) {
            exports.log = log;
        }
        if (exports.dir == null) {
            exports.dir = dir;
        }
    }
})();
"use strict";
(function() {
    var BannerScroll = (function() {
        function BannerScroll(wrapElement, jQuery) {
            this.originTop = 0;
            this._position = null;
            this._isManaged = false;
            this._remanageCallback = function() {};
            this._remanageCallbackEmpty = true;
            this._wrapElement = wrapElement;
            this._$ = jQuery;
            this._originWrapElement = jQuery(wrapElement).clone();
            this.originTop = this.getOffsetTop();
        }
        BannerScroll.prototype.getOriginWrapElement = function() {
            return this._originWrapElement;
        };
        BannerScroll.prototype.getWrapElement = function() {
            return this._wrapElement;
        };
        BannerScroll.prototype.getPosition = function() {
            return this._position;
        };
        BannerScroll.prototype.resetPosition = function() {
            this._$(this.getWrapElement()).css("top", "");
            this._$(this.getWrapElement()).removeClass("fixed-position");
            this._$(this.getWrapElement()).removeClass("absolute-position");
            this._$(this.getWrapElement()).addClass("static-position");
            return (this._position = BannerScroll.POSITION_STATIC);
        };
        BannerScroll.prototype.setToFixedPosition = function() {
            this.setRemanageCallback((function(context) {
                return function() {
                    context.setToFixedPosition();
                };
            })(this));
            if (!this.getIsManaged()) {
                return;
            }
            this.resetPosition();
            this.setPosition(BannerScroll.POSITION_FIXED);
            return this._$(this.getWrapElement()).addClass("fixed-position");
        };
        BannerScroll.prototype.setToStaticPosition = function() {
            this.setRemanageCallback((function(context) {
                return function() {
                    context.setToStaticPosition();
                };
            })(this));
            if (!this.getIsManaged()) {
                return;
            }
            this.resetPosition();
            this.setPosition(BannerScroll.POSITION_STATIC);
            return this._$(this.getWrapElement()).removeClass("fixed-position");
        };
        BannerScroll.prototype.setToAbsolutePosition = function(top) {
            top = this._calculateAbsoluteTopPosition(top);
            this._$(this.getWrapElement()).css("left", "");
            this.resetPosition();
            this._$(this.getWrapElement()).addClass("absolute-position");
            this.setPosition(BannerScroll.POSITION_ABSOLUTE);
            return this._$(this.getWrapElement()).css("top", top + "px");
        };
        BannerScroll.prototype.setToAbsolutePositionAnimated = function(top, callback) {
            if (callback === void 0) {
                callback = function() {};
            }
            top = top + 10;
            var $wrapElement = this._$(this.getWrapElement());
            $wrapElement.css("left", "");
            $wrapElement.removeClass("static-position");
            $wrapElement.addClass("absolute-position");
            this.setPosition(BannerScroll.POSITION_ABSOLUTE);
            top = this._calculateAbsoluteTopPosition(top);
            var cb = function() {
                return typeof callback === "function" ? callback() : undefined;
            };
            $wrapElement.css("top", top + "px");
            return cb();
        };
        BannerScroll.prototype._calculateAbsoluteTopPosition = function(top) {
            if (this.getWrapElement()
                .parent()
                .css("position") === "relative" ||
                this.getWrapElement()
                .parent()
                .css("position") === "absolute") {
                top -= this.getWrapElement()
                    .parent()
                    .offset().top;
            }
            return top;
        };
        BannerScroll.prototype.getOffsetTop = function() {
            return this._$(this.getWrapElement()).offset().top;
        };
        BannerScroll.prototype.getHeight = function() {
            var height = this._$(this.getWrapElement()).outerHeight(true);
            var criteoTotalHeight = 0;
            this._$(this.getWrapElement())
                .find('div[id^="crt-"].ban_envelope:visible')
                .each((function(self) {
                    return function(i, e) {
                        criteoTotalHeight += self._$(e).outerHeight(true);
                    };
                })(this));
            return height - criteoTotalHeight;
        };
        BannerScroll.prototype.setPosition = function(position) {
            this._position = position;
            return this;
        };
        BannerScroll.prototype.getIsAbsolutePosition = function() {
            return this._position === BannerScroll.POSITION_ABSOLUTE;
        };
        BannerScroll.prototype.getIsFixedPosition = function() {
            return this._position === BannerScroll.POSITION_FIXED;
        };
        BannerScroll.prototype.getIsStaticPosition = function() {
            return this._position === BannerScroll.POSITION_STATIC;
        };
        BannerScroll.prototype.getIsManaged = function() {
            return this._isManaged;
        };
        BannerScroll.prototype.setIsManaged = function(isManaged) {
            this._isManaged = isManaged;
            return this;
        };
        BannerScroll.prototype.remanage = function() {
            this.setIsManaged(true);
            return this.callRemanageCallback();
        };
        BannerScroll.prototype.setRemanageCallback = function(remanageCallback) {
            this._remanageCallback = remanageCallback;
            return (this._remanageCallbackEmpty = false);
        };
        BannerScroll.prototype.getRemanageCallbackEmpty = function() {
            return this._remanageCallbackEmpty;
        };
        BannerScroll.prototype.callRemanageCallback = function() {
            this._remanageCallbackEmpty = true;
            return this._remanageCallback();
        };
        BannerScroll.prototype.disableScrolling = function() {
            this.setIsManaged(false);
            return this.resetPosition();
        };
        BannerScroll.POSITION_FIXED = "fixed";
        BannerScroll.POSITION_ABSOLUTE = "absolute";
        BannerScroll.POSITION_STATIC = "static";
        return BannerScroll;
    }());
    if (typeof window !== "undefined" && window !== null ?
        window.cjs :
        undefined) {
        if (window.cjs.BannerScroll == null) {
            window.cjs.BannerScroll = BannerScroll;
        }
    } else {
        if (exports.BannerScroll == null) {
            exports.BannerScroll = BannerScroll;
        }
    }
})();
"use strict";
(function() {
    var BannerScrollManager = (function() {
        function BannerScrollManager(jQuery, isMobileDeviceGetter, waypointGetter) {
            if (isMobileDeviceGetter === void 0) {
                isMobileDeviceGetter = function() {
                    return false;
                };
            }
            this.banners = [];
            this._$ = jQuery;
            this._isMobileDeviceGetter = isMobileDeviceGetter;
            this._waypointGetter = waypointGetter;
        }
        BannerScrollManager.prototype.addBanner = function(banner) {
            return this.banners.push(banner);
        };
        BannerScrollManager.prototype.getBanners = function() {
            return this.banners;
        };
        BannerScrollManager.prototype.isMobileDevice = function() {
            return this._isMobileDeviceGetter();
        };
        BannerScrollManager.prototype.manage = function() {
            var ref = this.banners;
            for (var i = 0, len = ref.length; i < len; i++) {
                var banner = ref[i];
                this.manageBanner(banner);
            }
        };
        BannerScrollManager.prototype.manageBanner = function(banner) {
            if (banner.bannerObject.getIsManaged()) {
                return;
            }
            banner.bannerObject.setIsManaged(true);
            if (banner.stopElementsOnUpHitTopOfView != null) {
                this.manageStopElementsOnUpHitTopOfView(banner);
            }
            if (banner.startElementsOnDownHitTopOfView != null) {
                this.manageStartElementsOnDownHitTopOfView(banner);
            }
            if (!this.isMobileDevice() &&
                banner.stopElementsOnHitByBottom != null) {
                this.manageStopElementsOnHitByBottom(banner);
            } else {
                this.manageMobileAnimation(banner);
            }
            if (banner.fullBannerHeightVisibleOrDisable === true &&
                (banner.minWindowHeight === undefined ||
                    banner.minWindowHeight < banner.bannerObject.getHeight())) {
                banner.minWindowHeight = banner.bannerObject.getHeight();
            }
            if (banner.minWindowHeight != null) {
                this.manageMinWindowHeight(banner);
            }
            if (!this.isMobileDevice() &&
                banner.leftPositionHandleElement != null) {
                this.manageLeftPosition(banner);
            }
            this.manageMinWindowHeightOnResize(banner);
        };
        BannerScrollManager.prototype.manageLeftPosition = function(banner) {
            var m = function(b, context) {
                if (b.bannerObject.getPosition() !==
                    window.cjs.BannerScroll.POSITION_ABSOLUTE) {
                    context
                        ._$(b.bannerObject.getWrapElement())
                        .css("left", context
                            ._$(banner.leftPositionHandleElement)
                            .offset().left -
                            context._$(window).scrollLeft());
                }
            };
            m(banner, this);
            this._$(window).scroll((function(b, context) {
                return function() {
                    return m(b, context);
                };
            })(banner, this));
        };
        BannerScrollManager.prototype.unmanageBanner = function(banner) {
            banner.bannerObject.setIsManaged(false);
        };
        BannerScrollManager.prototype.manageMinWindowHeight = function(banner) {
            this._$(window).resize((function(b, context) {
                return function() {
                    return context.manageMinWindowHeightOnResize(b);
                };
            })(banner, this));
        };
        BannerScrollManager.prototype.manageMinWindowHeightOnResize = function(banner) {
            if (this._$(window).height() < banner.minWindowHeight &&
                banner.bannerObject.getIsManaged()) {
                var currentPosition = banner.bannerObject.getPosition();
                if (currentPosition === null) {
                    banner.bannerObject.setIsManaged(false);
                    return;
                }
                var offsetTop = banner.bannerObject.getOffsetTop();
                banner.bannerObject.setToStaticPosition();
                banner.bannerObject.setRemanageCallback((function(banner, currentPosition, offsetTop) {
                    return function() {
                        switch (currentPosition) {
                            case window.cjs.BannerScroll
                            .POSITION_FIXED:
                                return banner.bannerObject.setToFixedPosition();
                            case window.cjs.BannerScroll
                            .POSITION_STATIC:
                                return banner.bannerObject.setToStaticPosition();
                            case window.cjs.BannerScroll
                            .POSITION_ABSOLUTE:
                                return banner.bannerObject.setToAbsolutePosition(offsetTop);
                        }
                    };
                })(banner, currentPosition, offsetTop));
                banner.bannerObject.setIsManaged(false);
            } else if (this._$(window).height() > banner.minWindowHeight &&
                !banner.bannerObject.getIsManaged()) {
                banner.bannerObject.remanage();
            }
            this._$(window).scroll();
        };
        BannerScrollManager.prototype.manageStopElementsOnUpHitTopOfView = function(banner) {
            var ref = banner.stopElementsOnUpHitTopOfView;
            for (var i = 0, len = ref.length; i < len; i++) {
                var element = ref[i];
                this._$(element).waypoint((function(self, banner) {
                    return function(direction) {
                        if (direction === "up") {
                            self._$(banner.bannerObject.getWrapElement()).stop();
                            return banner.bannerObject.setToStaticPosition();
                        }
                    };
                })(this, banner));
            }
        };
        BannerScrollManager.prototype.manageStartElementsOnDownHitTopOfView = function(banner) {
            var ref = banner.startElementsOnDownHitTopOfView;
            for (var i = 0, len = ref.length; i < len; i++) {
                var element = ref[i];
                this._$(element).waypoint((function(self, banner) {
                    return function(direction) {
                        if (direction === "down" && self.canMove(banner)) {
                            if (!self.isMobileDevice()) {
                                banner.bannerObject.setToFixedPosition();
                                return self.correctPosition(banner);
                            } else if (banner.bannerObject.getIsManaged()) {
                                var offsetTop = self._getOffsetTopForAbsolutePosition(banner);
                                return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop);
                            }
                        }
                    };
                })(this, banner));
            }
        };
        BannerScrollManager.prototype.manageStopElementsOnHitByBottom = function(banner) {
            var ref = banner.stopElementsOnHitByBottom;
            for (var i = 0, len = ref.length; i < len; i++) {
                var element = ref[i];
                this._$(window).scroll((function(stopElementOnHitByBottom, self, banner) {
                    return function() {
                        if (banner.bannerObject.getIsFixedPosition()) {
                            if (self
                                ._$(stopElementOnHitByBottom)
                                .offset().top <=
                                banner.bannerObject.getOffsetTop() +
                                banner.bannerObject.getHeight()) {
                                banner.bannerObject.setToAbsolutePosition(self
                                    ._$(stopElementOnHitByBottom)
                                    .offset()
                                    .top -
                                    banner.bannerObject.getHeight());
                                return self.correctPosition(banner);
                            }
                        } else if (banner.bannerObject.getIsAbsolutePosition() &&
                            self
                            ._$(stopElementOnHitByBottom)
                            .offset().top >
                            self._$(window).scrollTop() +
                            banner.bannerObject.getHeight()) {
                            return banner.bannerObject.setToFixedPosition();
                        }
                    };
                })(element, this, banner));
            }
        };
        BannerScrollManager.prototype.manageMobileAnimation = function(banner) {
            var timer;
            var offsetTop = banner.bannerObject.getOffsetTop();
            this._$(window).scroll((function(self, banner) {
                return function() {
                    clearTimeout(timer);
                    return (timer = setTimeout(function() {
                        if (!banner.bannerObject.getIsAbsolutePosition()) {
                            return;
                        }
                        offsetTop = self._getOffsetTopForAbsolutePosition(banner);
                        return banner.bannerObject.setToAbsolutePositionAnimated(offsetTop);
                    }, 250));
                };
            })(this, banner));
        };
        BannerScrollManager.prototype.canMove = function(banner) {
            if (banner.stopElementsOnHitByBottom) {
                var ref = banner.stopElementsOnHitByBottom;
                for (var i = 0, len = ref.length; i < len; i++) {
                    if (this._$(ref[i]).offset().top <=
                        banner.bannerObject.getOffsetTop() +
                        banner.bannerObject.getHeight()) {
                        return false;
                    }
                }
            }
            return true;
        };
        BannerScrollManager.prototype.correctPosition = function(banner) {
            if (banner.stopElementsOnHitByBottom) {
                var ref = banner.stopElementsOnHitByBottom;
                for (var i = 0, len = ref.length; i < len; i++) {
                    var element = ref[i];
                    if (this._$(element).offset().top <
                        banner.bannerObject.getOffsetTop() +
                        banner.bannerObject.getHeight()) {
                        banner.bannerObject.setToAbsolutePosition(this._$(element).offset()
                            .top - banner.bannerObject.getHeight());
                    }
                }
            }
        };
        BannerScrollManager.prototype.correctPositionsOfAllBanners = function() {
            var ref = this.getBanners();
            for (var i = 0, len = ref.length; i < len; i++) {
                this.correctPosition(ref[i]);
            }
        };
        BannerScrollManager.prototype.disableScrollingOfAllBanners = function() {
            var ref = this.getBanners();
            for (var i = 0, len = ref.length; i < len; i++) {
                var banner = ref[i];
                if (typeof banner.bannerObject.disableScrolling === "function") {
                    banner.bannerObject.disableScrolling();
                }
            }
        };
        BannerScrollManager.prototype._getBottomBoundaryOffsetTop = function(banner) {
            var minOffsetTop = this._$("body").height();
            if (banner.stopElementsOnHitByBottom) {
                var ref = banner.stopElementsOnHitByBottom;
                for (var i = 0, len = ref.length; i < len; i++) {
                    var elementOffsetTop = this._$(ref[i]).offset().top;
                    if (elementOffsetTop < minOffsetTop) {
                        minOffsetTop = elementOffsetTop;
                    }
                }
            }
            return minOffsetTop;
        };
        BannerScrollManager.prototype._getOffsetTopForAbsolutePosition = function(banner) {
            var offsetTop = this._$(window).scrollTop();
            var bottomBoundary = this._getBottomBoundaryOffsetTop(banner);
            if (bottomBoundary < offsetTop + banner.bannerObject.getHeight()) {
                offsetTop = bottomBoundary - banner.bannerObject.getHeight();
            }
            return offsetTop;
        };
        BannerScrollManager.prototype.refreshWaypoints = function() {
            var Waypoint = this._waypointGetter();
            if (Waypoint != null) {
                return typeof Waypoint.refreshAll === "function" ?
                    Waypoint.refreshAll() :
                    void 0;
            } else {
                return typeof this._$.waypoints === "function" ?
                    this._$.waypoints("refresh") :
                    undefined;
            }
        };
        return BannerScrollManager;
    }());
    if (typeof window !== "undefined" && window !== null ?
        window.cjs :
        undefined) {
        if (window.cjs.BannerScrollManager == null) {
            window.cjs.BannerScrollManager = BannerScrollManager;
        }
    } else {
        if (exports.BannerScrollManager == null) {
            exports.BannerScrollManager = BannerScrollManager;
        }
    }
})();
(function() {
    var Detail_TimeCounter,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    Detail_TimeCounter = (function() {
        function Detail_TimeCounter(inject, jQuery) {
            if (inject == null) {
                inject = {};
            }
            this.jQuery = jQuery != null ? jQuery : $;
            this._sportList = cjs.Api.constantsManager.getSports();
            this._eventStageList = cjs.Api.constantsManager.getEventStages();
            this._config = {
                allowed: [this._sportList.SOCCER, this._sportList.BANDY, this._sportList.RUGBY_LEAGUE, this._sportList.RUGBY_UNION, this._sportList.AUSSIE_RULES],
                hasSeconds: [this._sportList.SOCCER]
            };
            this.sportIdGetter = inject.sportIdGetter, this.pageUtimeGetter = inject.pageUtimeGetter, this.gameStageUtimeGetter = inject.gameStageUtimeGetter, this.hasLiveCenterGetter = inject.hasLiveCenterGetter, this.eventStageIdGetter = inject.eventStageIdGetter, this.isRugby7Getter = inject.isRugby7Getter;
        }

        Detail_TimeCounter.prototype.setTime = function() {
            var clockTimerJq, time;
            clockTimerJq = this._getClockTimerJq();
            if (!clockTimerJq.length) {
                return false;
            }
            if ((time = this.getTime()) === false) {
                return false;
            }
            clockTimerJq.find('span[id^="part-top"]').html(time);
            if (!this._hasSeconds()) {
                this._addMinuteTicker(clockTimerJq);
            }
            return true;
        };

        Detail_TimeCounter.prototype.getTime = function() {
            var content, part, partDuration, ref;
            if (ref = this.sportIdGetter(), indexOf.call(this._config.allowed, ref) < 0) {
                return false;
            }
            part = this._getGamePart();
            if (!part) {
                return false;
            }
            partDuration = this._getSportPartDuration(part);
            if (!partDuration) {
                return false;
            }
            content = this._getTimerContent(part, partDuration);
            if (content === false) {
                return false;
            }
            return content;
        };

        Detail_TimeCounter.prototype.start = function() {
            var ref;
            if (ref = this.sportIdGetter(), indexOf.call(this._config.allowed, ref) < 0) {
                return false;
            }
            return this.counterInterval = setInterval((function(_this) {
                return function() {
                    return _this.setTime();
                };
            })(this), 1000);
        };

        Detail_TimeCounter.prototype.stop = function() {
            if (this.counterInterval != null) {
                return clearInterval(this.counterInterval);
            }
        };

        Detail_TimeCounter.prototype._getTimerContent = function(part, partDuration) {
            var hasSeconds, minutes, minutesDiff, seconds, time;
            minutes = (this.pageUtimeGetter() - this.gameStageUtimeGetter()) / 60;
            seconds = (this.pageUtimeGetter() - this.gameStageUtimeGetter()) % 60;
            if (seconds < 0) {
                seconds = 0;
            }
            minutes = minutes < 0 ? 0 : Math.floor(minutes);
            minutes += (function() {
                switch (part) {
                    case 'secondHalf':
                        return this._getSportPartDuration('firstHalf');
                    case 'extraTime':
                        return this._getSportPartDuration('secondHalf');
                    default:
                        return 0;
                }
            }).call(this);
            minutesDiff = this.sportIdGetter() === this._sportList.SOCCER && (part === 'firstHalf' || part === 'secondHalf' || part === 'extraTime') ? minutes - partDuration : 0;
            hasSeconds = this._hasSeconds();
            if (!hasSeconds) {
                minutes += 1;
            }
            time = minutes;
            if (!hasSeconds && minutes > partDuration) {
                time = partDuration + '+';
            }
            if (hasSeconds) {
                if (minutesDiff >= 10) {
                    time = partDuration + '+';
                } else {
                    time = minutes + ':' + this._addZero(seconds);
                }
            }
            return time;
        };

        Detail_TimeCounter.prototype._getClockTimerJq = function() {
            return this.jQuery('.info-status:visible').find('#atomclock');
        };

        Detail_TimeCounter.prototype._getSportPartDuration = function(part) {
            var ref, ref1, ref2;
            switch (part) {
                case 'firstHalf':
                    if ((ref = this.sportIdGetter()) === this._sportList.SOCCER || ref === this._sportList.BANDY) {
                        return 45;
                    } else if (this.sportIdGetter() === this._sportList.RUGBY_UNION && this.isRugby7Getter()) {
                        return 7;
                    } else {
                        return 40;
                    }
                    break;
                case 'secondHalf':
                    if ((ref1 = this.sportIdGetter()) === this._sportList.SOCCER || ref1 === this._sportList.BANDY) {
                        return 90;
                    } else if (this.sportIdGetter() === this._sportList.RUGBY_UNION && this.isRugby7Getter()) {
                        return 14;
                    } else {
                        return 80;
                    }
                    break;
                case 'firstQuarter':
                case 'secondQuarter':
                case 'thirdQuarter':
                case 'fourthQuarter':
                    if ((ref2 = this.sportIdGetter()) === this._sportList.AUSSIE_RULES) {
                        return 20;
                    }
                    break;
                case 'extraTime':
                    if (this.sportIdGetter() === this._sportList.SOCCER) {
                        return 120;
                    } else {
                        return 0;
                    }
                    break;
                default:
                    return 0;
            }
        };

        Detail_TimeCounter.prototype._addMinuteTicker = function(element) {
            if (this.jQuery('.info-status:visible').find('#atomcounter').length) {
                return;
            }
            return element.append(this.jQuery('<span>', {
                id: 'atomcounter',
                "class": 'blink',
                html: '&nbsp;'
            }));
        };

        Detail_TimeCounter.prototype._getGamePart = function() {
            var eventStageId;
            eventStageId = this.eventStageIdGetter();
            if (eventStageId === this._eventStageList.FIRST_HALF) {
                return 'firstHalf';
            }
            if (eventStageId === this._eventStageList.SECOND_HALF) {
                return 'secondHalf';
            }
            if (eventStageId === this._eventStageList.FIRST_QUARTER) {
                return 'firstQuarter';
            }
            if (eventStageId === this._eventStageList.SECOND_QUARTER) {
                return 'secondQuarter';
            }
            if (eventStageId === this._eventStageList.THIRD_QUARTER) {
                return 'thirdQuarter';
            }
            if (eventStageId === this._eventStageList.FOURTH_QUARTER) {
                return 'fourthQuarter';
            }
            if (eventStageId === this._eventStageList.EXTRA_TIME) {
                return 'extraTime';
            }
        };

        Detail_TimeCounter.prototype._hasSeconds = function() {
            var ref;
            return this.hasLiveCenterGetter() && (ref = this.sportIdGetter(), indexOf.call(this._config.hasSeconds, ref) >= 0);
        };

        Detail_TimeCounter.prototype._addZero = function(str) {
            if (/^[0-9]{1}$/.test(str)) {
                str = '0' + str;
            }
            return str;
        };

        return Detail_TimeCounter;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.Detail_TimeCounter = Detail_TimeCounter;

}).call(this);
(function() {
    var Detail_FsDetail;

    Detail_FsDetail = (function() {
        Detail_FsDetail.prototype.detailResultElementId = 'event_detail_current_result';

        function Detail_FsDetail(utilEnviroment) {
            this.utilEnviroment = utilEnviroment;
            this.data = this.utilEnviroment.getFsDetail();
            this.feedIndexes = this.utilEnviroment.getFeedIndexes();
            this._constantsManager = cjs.Api.constantsManager;
        }

        Detail_FsDetail.prototype.getHashes = function() {
            if (this.hashes != null) {
                return this._clone(this.hashes);
            } else {
                return {};
            }
        };

        Detail_FsDetail.prototype.hasHash = function(hashKey) {
            return this.getHash(hashKey) != null;
        };

        Detail_FsDetail.prototype.getHash = function(hashKey) {
            var hashes;
            hashes = this.getHashes();
            if (hashes[hashKey] != null) {
                return hashes[hashKey];
            }
            return null;
        };

        Detail_FsDetail.prototype.getHashKeyBySport = function(sportId, defaultHashKey, statsHashKey) {
            var hashKey;
            hashKey = defaultHashKey;
            if (sportId === this._constantsManager.getSports().DARTS) {
                hashKey = statsHashKey;
            }
            return hashKey;
        };

        Detail_FsDetail.prototype.getEventStatisticsHashKey = function(sportId) {
            return this.getHashKeyBySport(sportId, this.feedIndexes.DETAILHASHINDEXES_INCIDENT_STATISTICS_HASH, this.feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_HASH);
        };

        Detail_FsDetail.prototype.getMatchHistoryHashKey = function(sportId) {
            return this.getHashKeyBySport(sportId, this.feedIndexes.DETAILHASHINDEXES_MATCH_HISTORY_HASH, this.feedIndexes.DETAILHASHINDEXES_STATS_MATCH_HISTORY_HASH);
        };

        Detail_FsDetail.prototype.setHashes = function(hashes) {
            this.hashes = this._clone(hashes);
            return this;
        };

        Detail_FsDetail.prototype.setHash = function(hashKey, hashVal) {
            var hashes;
            hashes = this.getHashes();
            hashes[hashKey] = hashVal;
            this.setHashes(hashes);
            return this;
        };

        Detail_FsDetail.prototype.isHashChanged = function(hashKey, oldHashes) {
            return this.isHashValueChange(hashKey, oldHashes[hashKey]);
        };

        Detail_FsDetail.prototype.isHashValueChange = function(hashKey, newHash) {
            var currentHash;
            currentHash = this.getHash(hashKey);
            if (newHash == null) {
                newHash = null;
            }
            return currentHash !== newHash;
        };

        Detail_FsDetail.prototype._clone = function(obj) {
            return JSON.parse(JSON.stringify(obj));
        };

        Detail_FsDetail.prototype.setOverrideData = function(data) {
            this.data = data;
        };

        Detail_FsDetail.prototype.getAvailableTabs = function() {
            if (this.data['DX'] != null) {
                return this.data['DX'];
            } else {
                return null;
            }
        };

        Detail_FsDetail.prototype.getGeoBookmakerSettings = function() {
            if (this.data['GB'] != null) {
                return this.data['GB'];
            } else {
                return null;
            }
        };

        Detail_FsDetail.prototype.removeTab = function(tab) {
            var tabs;
            tabs = [];
            if (this.data['DX'] != null) {
                tabs = this.data['DX'].split(',');
                if (tabs.length > 0) {
                    if (tabs.indexOf(tab) > -1) {
                        tabs.splice(tabs.indexOf(tab), 1);
                        return this.data['DX'] = tabs.join();
                    }
                }
            }
        };

        Detail_FsDetail.prototype.getSummaryHtml = function(html) {
            var awayScoreHtml, boundary, cricketDetailSummaryPart, cricketScore, cricketScoreDataObj, homeScoreHtml, i, newIndexValue, parsedFeedData;
            cricketDetailSummaryPart = html.match(/{{.*Â¬}}/i);
            if (cricketDetailSummaryPart) {
                cricketDetailSummaryPart = cricketDetailSummaryPart[0].replace('{{', '').replace('}}', '');
                parsedFeedData = cjs.dic.get('Feed_Parser').parse(cricketDetailSummaryPart).data[0];
                for (i in parsedFeedData) {
                    newIndexValue = parsedFeedData[i][0];
                    newIndexValue -= 0;
                    if (isNaN(newIndexValue)) {
                        parsedFeedData[i] = parsedFeedData[i][0];
                    } else {
                        parsedFeedData[i] = Number(parsedFeedData[i][0]);
                    }
                }
                boundary = cjs.dic.getNewInstance('Helper_CricketScoreInputBoundaryForDetail');
                cricketScoreDataObj = boundary.setData(parsedFeedData).getDataInputCricketScore();
                cricketScore = cjs.dic.getNewInstance('Helper_CricketScoreBuilder').build();
                homeScoreHtml = cricketScore.renderHome(cricketScoreDataObj);
                awayScoreHtml = cricketScore.renderAway(cricketScoreDataObj);
                return html.replace(/{{.*Â¬}}/i, homeScoreHtml).replace(/{{.*}}/i, awayScoreHtml);
            } else {
                return html;
            }
        };

        Detail_FsDetail.prototype.repaintScore = function() {
            var boundary, cricketScore, cricketScoreDataObj, scoreHtml;
            if (this.data['DV'] === this._constantsManager.getSports().CRICKET) {
                boundary = cjs.dic.getNewInstance('Helper_CricketScoreInputBoundaryForDetail');
                cricketScoreDataObj = boundary.setData(this.data).getDataInputCricketScore();
                cricketScore = cjs.dic.getNewInstance('Helper_CricketScoreBuilder').build();
                cricketScore.setRenderer('htmlDetailHeader');
                scoreHtml = cricketScore.render(cricketScoreDataObj);
                $('#' + this.detailResultElementId).html(scoreHtml);
                return true;
            }
            return false;
        };

        Detail_FsDetail.prototype.repaintEventStage = function() {
            var dartsHelper, defaultTdText, detailSportCricket, eventStages, gameTime, isCricket, part, red, score_top, sports, td_text, winner;
            eventStages = this._constantsManager.getEventStages();
            sports = this._constantsManager.getSports();
            score_top = $(".mstat");
            if (!score_top.length) {
                return;
            }
            td_text = '';
            red = fs_detail.DA === eventStages.LIVE || fs_detail.DB === eventStages.PENDING;
            td_text += red ? '<span class="r">' : '';
            gameTime = cjs.dic.get('Helper_GameTime');
            switch (fs_detail.DB) {
                case eventStages.FIRST_HALF:
                case eventStages.SECOND_HALF:
                    td_text += event_stage_trans[fs_detail.DB];
                    if (typeof fs_detail.DI !== 'undefined' && fs_detail.DI > 0) {
                        td_text += gameTime.getBlinkingTime(get_sport_time(fs_detail.DI, sport_id, fs_detail.DB, fs_detail.CK));
                    }
                    td_text += gameTime.getTopPart(mid_s, fs_detail.DB);
                    td_text += '</span>';
                    break;
                case eventStages.FIRST_PERIOD:
                case eventStages.SECOND_PERIOD:
                case eventStages.THIRD_PERIOD:
                case eventStages.FIRST_QUARTER:
                case eventStages.SECOND_QUARTER:
                case eventStages.THIRD_QUARTER:
                case eventStages.FOURTH_QUARTER:
                case eventStages.EXTRA_TIME:
                    td_text += event_stage_trans[fs_detail.DB];
                    if (typeof fs_detail.DI !== 'undefined' && fs_detail.DI > 0) {
                        td_text += gameTime.getBlinkingTime(get_sport_time(fs_detail.DI, sport_id, fs_detail.DB, fs_detail.CK));
                    } else if (mid_s === sports.AUSSIE_RULES) {
                        switch (fs_detail.DB) {
                            case eventStages.FIRST_QUARTER:
                                part = 1;
                                break;
                            case eventStages.SECOND_QUARTER:
                                part = 2;
                                break;
                            case eventStages.THIRD_QUARTER:
                                part = 3;
                                break;
                            case eventStages.FOURTH_QUARTER:
                                part = 4;
                                break;
                            case eventStages.EXTRA_TIME:
                                part = 5;
                        }
                        td_text += ' - </span><span class="r" id="atomclock"><span id="part-top' + part + '"></span>';
                    }
                    if (mid_s === sports.SOCCER) {
                        td_text += ' - </span><span class="r" id="atomclock"><span id="part-top3"></span>';
                    }
                    break;
                case eventStages.WALKOVER:
                case eventStages.RETIRED:
                    td_text += event_stage_trans[fs_detail.DB];
                    if (typeof fs_detail.DJ !== 'undefined') {
                        winner = '';
                        if (fs_detail.DB === eventStages.WALKOVER) {
                            winner = fs_detail.DJ === 'H' ? 'H' : 'A';
                        } else {
                            winner = fs_detail.DJ === 'H' ? 'A' : 'H';
                        }
                        if (winner === 'H') {
                            td_text += ' - ' + $("#flashscore .tname-home .tname").get(0).innerHTML;
                        } else if (winner === 'A') {
                            td_text += ' - ' + $("#flashscore .tname-away .tname").get(0).innerHTML;
                        }
                    }
                    break;
                case eventStages.SCHEDULED:
                    if (typeof fs_detail[cjs.constants.FEED.COMMONINDEXES_RESULT_TYPE] !== 'undefined' && fs_detail[cjs.constants.FEED.COMMONINDEXES_RESULT_TYPE] === 1) {
                        td_text = '<span class="final_result_only">' + cjs.dic.get('utilTrans').translate('TRANS_FINAL_RESULT_ONLY_SHORT') + ' - ' + cjs.dic.get('utilTrans').translate('TRANS_FINAL_RESULT_ONLY') + '</span>';
                    }
                    break;
                default:
                    isCricket = sport_id === sports.CRICKET;
                    defaultTdText = event_stage_trans[this.data[cjs.constants.FEED.COMMONINDEXES_EVENT_STAGE_ID]];
                    if (isCricket) {
                        detailSportCricket = cjs.dic.get('Detail_Sport_Cricket');
                        td_text += detailSportCricket.getStageText();
                    } else {
                        td_text += defaultTdText;
                    }
                    if (fs_detail.DA === eventStages.LIVE) {
                        switch (sport_id) {
                            case sports.TENNIS:
                            case sports.BADMINTON:
                            case sports.VOLLEYBALL:
                            case sports.BEACH_VOLLEYBALL:
                                if (typeof fs_detail.DN !== 'undefined' && typeof fs_detail.DO !== 'undefined') {
                                    td_text += "<br />" + fs_detail.DN + " : " + fs_detail.DO;
                                    if (typeof fs_detail.DP !== 'undefined' && typeof fs_detail.DQ !== 'undefined') {
                                        td_text += " ( " + fs_detail.DP + " : " + fs_detail.DQ + " )";
                                    }
                                }
                                break;
                            case sports.SNOOKER:
                                if (typeof fs_detail.DE !== 'undefined' && typeof fs_detail.DF !== 'undefined') {
                                    td_text += " - " + cjs.dic.get('utilTrans').translate('TRANS_SNOOKER_FRAME_NUMBER').replace('%s', cjs.dic.get("util_number").toNumber(fs_detail.DE) + cjs.dic.get("util_number").toNumber(fs_detail.DF) + 1);
                                }
                                break;
                            case sports.DARTS:
                                if (typeof fs_detail.DE !== 'undefined' && typeof fs_detail.DF !== 'undefined') {
                                    dartsHelper = cjs.dic.get('Helper_Darts');
                                    td_text = dartsHelper.getStatus(td_text, fs_detail.DA, fs_detail.DE, fs_detail.DF, playingOnSets);
                                    td_text += dartsHelper.getCurrentScore(playingOnSets, fs_detail.DN, fs_detail.DO, fs_detail.DP, fs_detail.DQ);
                                }
                        }
                    }
            }
            td_text += red ? '</span>' : '';
            return score_top.html(td_text);
        };

        return Detail_FsDetail;

    })();

    (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass('detail_fsdetail', Detail_FsDetail);

}).call(this);
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Feed;
(function(Feed) {
    var Table;
    (function(Table) {
        var FeedParser = (function() {
            function FeedParser(Feed_Table_StatsParser) {
                this.DELIMITER_ROW = "~";
                this.DELIMITER_CELL = "Â¬";
                this.DELIMITER_VALUE = "Ã·";
                this.statsParser = Feed_Table_StatsParser;
            }
            FeedParser.prototype.parse = function(feed) {
                var e_1, _a, e_2, _b;
                var statsParser = this.statsParser;
                statsParser.startFeed();
                var rows = feed.split(this.DELIMITER_ROW);
                try {
                    for (var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                        var row = rows_1_1.value;
                        statsParser.startRow();
                        var cells = row.split(this.DELIMITER_CELL);
                        try {
                            for (var cells_1 = (e_2 = void 0, __values(cells)), cells_1_1 = cells_1.next(); !cells_1_1.done; cells_1_1 = cells_1.next()) {
                                var cell = cells_1_1.value;
                                var keyValue = cell.split(this.DELIMITER_VALUE);
                                statsParser.parse(keyValue[0], keyValue[1]);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (cells_1_1 && !cells_1_1.done && (_b = cells_1.return)) _b.call(cells_1);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        statsParser.endRow();
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                statsParser.endFeed();
                return statsParser.getParsedModel();
            };
            return FeedParser;
        }());
        Table.FeedParser = FeedParser;
        var StatsParser = (function() {
            function StatsParser(Feed_Table_BuilderTree, util_enviroment) {
                this.allowedNodeTypes = [];
                this.allowedPropertyTypes = [];
                this.builderTree = Feed_Table_BuilderTree;
                this._constants = util_enviroment.getFeedIndexes();
                this.allowedNodeTypes = [
                    this._constants.COMMONINDEXES_GROUP,
                    this._constants.COMMONINDEXES_TABLE,
                    this._constants.COMMONINDEXES_HEADER,
                    this._constants.COMMONINDEXES_UNKNOWN,
                    this._constants.COMMONINDEXES_ROOT,
                    this._constants.COMMONINDEXES_MENU,
                    this._constants.COMMONINDEXES_TAB,
                    this._constants.COMMONINDEXES_ROW,
                    this._constants.COMMONINDEXES_COL,
                    this._constants.COMMONINDEXES_ROW_SCORE,
                    this._constants.COMMONINDEXES_ROW_POINTS,
                    this._constants.COMMONINDEXES_ROW_CURRENT,
                    this._constants.COMMONINDEXES_SCORE,
                    this._constants.COMMONINDEXES_TEXT_SPEC,
                    this._constants.COMMONINDEXES_ROW_NEWS_EVENT,
                    this._constants.COMMONINDEXES_ROW_NEWS_MORE,
                ];
                this.allowedPropertyTypes = [
                    this._constants.COMMONINDEXES_UNKNOWN_PROPERTY,
                    this._constants.COMMONINDEXES_TEXT,
                    this._constants.TEAMSQUADINDEXES_FLAG_ID,
                    this._constants.NEWSFEEDINDEXES_NAME,
                    this._constants.STATSINDEXES_SCORE,
                    this._constants.STATSINDEXES_ASSISTS,
                    this._constants.STATSINDEXES_POINTS,
                    this._constants.COMMONINDEXES_VALUE,
                    this._constants.COMMONINDEXES_TAB_ID,
                    this._constants.STATSINDEXES_BALL_NUMBER,
                    this._constants.STATSINDEXES_BALL_TYPE,
                    this._constants.STATSINDEXES_BALL_VALUE,
                    this._constants.COMMONINDEXES_COMMENT,
                    this._constants.STATSINDEXES_OVER_SENTENCE,
                    this._constants.STATSINDEXES_IS_ADDITIONAL,
                    this._constants.STATSINDEXES_IS_CHANGED,
                    this._constants.STATSINDEXES_PARTICIPANT_TYPE,
                    this._constants.STATSINDEXES_SERVICE_PARTICIPANT_TYPE,
                    this._constants.STATSINDEXES_SERVICE_LOST_PARTICIPANT_TYPE,
                    this._constants.NEWSFEEDINDEXES_TITLE,
                    this._constants.NEWSFEEDINDEXES_LINK,
                    this._constants.NEWSFEEDINDEXES_IMAGE_URL,
                    this._constants.NEWSFEEDINDEXES_PEREX,
                    this._constants.NEWSFEEDINDEXES_PUBLISHED,
                    this._constants.NEWSFEEDINDEXES_CATEGORY_ID,
                    this._constants.NEWSFEEDINDEXES_CATEGORY,
                    this._constants.NEWSFEEDINDEXES_PARTICIPANT_NAME,
                    this._constants.NEWSFEEDINDEXES_PARTICIPANT_SHORTNAME,
                    this._constants.NEWSFEEDINDEXES_PARTICIPANT_TYPE,
                    this._constants.NEWSFEEDINDEXES_PARTICIPANT_SIDE,
                    this._constants.NEWSFEEDINDEXES_PARTICIPANT_IS_WINNER,
                    this._constants.NEWSFEEDPORTABLEINDEXES_FINAL_SCORE,
                    this._constants.NEWSFEEDPORTABLEINDEXES_HOME_SCORE,
                    this._constants.NEWSFEEDPORTABLEINDEXES_AWAY_SCORE,
                    this._constants.NEWSFEEDPORTABLEINDEXES_EVENT_START,
                    this._constants.NEWSFEEDPORTABLEINDEXES_EVENT_START,
                    "ID",
                    "PI",
                    "PID",
                    "PN",
                    "PU",
                    "TI",
                    "TN",
                    "CI",
                    "CN",
                    "RA",
                    "RAP",
                    "PO",
                    "POA",
                    "PON",
                    "POW",
                    "CTN",
                    "CTU",
                    "CTA",
                    "CTW",
                    "TP",
                    "PM",
                    "DA",
                    "ESI",
                ];
            }
            StatsParser.prototype.startFeed = function() {
                this.nodeBuilder = this.builderTree.startFeed();
            };
            StatsParser.prototype.endFeed = function() {
                this.builderTree.endFeed();
            };
            StatsParser.prototype.startRow = function() {};
            StatsParser.prototype.endRow = function() {};
            StatsParser.prototype.parse = function(key, value) {
                var builderTree = this.builderTree;
                switch (key) {
                    case this._constants.FSCORE_TABLEDATAINDEXES_NODE_START:
                        this.nodeBuilder = builderTree.startNode(NodeType.getByIdent(this._isNodeTypeAllowed(value)));
                        break;
                    case this._constants.FSCORE_TABLEDATAINDEXES_NODE_ID:
                        this.nodeBuilder.setId(value);
                        break;
                    case this._constants.FSCORE_TABLEDATAINDEXES_NODE_END:
                        this.nodeBuilder = builderTree.endNode();
                        break;
                    case this._constants.FSCORE_TABLEDATAINDEXES_PROPERTY_TYPE:
                        this.propertyType = this._isPropertyAllowed(value);
                        break;
                    case this._constants.FSCORE_TABLEDATAINDEXES_PROPERTY_VALUE:
                        if (this.propertyType === this._constants.COMMONINDEXES_UNKNOWN_PROPERTY) {
                            return;
                        }
                        this.nodeBuilder.setProperty(this.propertyType, value);
                        this.propertyType = this._constants.COMMONINDEXES_UNKNOWN_PROPERTY;
                        break;
                }
            };
            StatsParser.prototype.getParsedModel = function() {
                return this.nodeBuilder.build();
            };
            StatsParser.prototype._isPropertyAllowed = function(property) {
                if (this.allowedPropertyTypes.indexOf(property) === -1) {
                    throw new Error("Not valid property type: " + property);
                }
                return property;
            };
            StatsParser.prototype._isNodeTypeAllowed = function(nodeType) {
                if (this.allowedNodeTypes.indexOf(nodeType) === -1) {
                    return "";
                }
                return nodeType;
            };
            return StatsParser;
        }());
        Table.StatsParser = StatsParser;
        var BuilderTree = (function() {
            function BuilderTree(util_enviroment) {
                this.builderStack = [];
                this.childToParent = [];
                this._constants = util_enviroment.getFeedIndexes();
            }
            BuilderTree.prototype.startFeed = function() {
                this.builderStack = [];
                this.childToParent = [];
                this.nodeBuilder = new NodeBuilder();
                this.nodeBuilder.setNodeType(NodeType.getByIdent(this._constants.COMMONINDEXES_ROOT));
                return this.nodeBuilder;
            };
            BuilderTree.prototype.startNode = function(nodeType) {
                var parentBuilder = this.nodeBuilder;
                this.builderStack.push(this.nodeBuilder);
                this.nodeBuilder = new NodeBuilder();
                this.nodeBuilder.setNodeType(nodeType);
                this.childToParent.push({
                    child: this.nodeBuilder,
                    parent: parentBuilder
                });
                return this.nodeBuilder;
            };
            BuilderTree.prototype.endNode = function() {
                var parentBuilder = this.builderStack[this.builderStack.length - 1];
                this.builderStack.pop();
                if (!this.nodeBuilder.checkType(NodeType.getByIdent(this._constants.COMMONINDEXES_UNKNOWN))) {
                    this.addChildToParent();
                }
                for (var i = 0; i <= this.childToParent.length; i++) {
                    var childToParent = this.childToParent[i];
                    if (childToParent.child === this.nodeBuilder) {
                        this.childToParent.splice(i, 1);
                        break;
                    }
                }
                this.nodeBuilder = parentBuilder;
                return this.nodeBuilder;
            };
            BuilderTree.prototype.endFeed = function() {};
            BuilderTree.prototype.addChildToParent = function() {
                var e_3, _a;
                var parentBuilder = this.nodeBuilder;
                try {
                    for (var _b = __values(this.childToParent), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var childParent = _c.value;
                        if (childParent.child === this.nodeBuilder) {
                            parentBuilder = childParent.parent;
                            break;
                        }
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
                if (!parentBuilder.checkType(NodeType.getByIdent(this._constants.COMMONINDEXES_UNKNOWN))) {
                    parentBuilder.addChild(this.nodeBuilder.build());
                }
            };
            return BuilderTree;
        }());
        Table.BuilderTree = BuilderTree;
        var NodeImpl = (function() {
            function NodeImpl(nodeType, id, children, childrenById, properties) {
                this.nodeType = nodeType;
                this.id = id;
                this.children = children;
                this.childrenById = childrenById;
                this.properties = properties;
            }
            NodeImpl.prototype.getType = function() {
                return this.nodeType;
            };
            NodeImpl.prototype.getId = function() {
                return this.id;
            };
            NodeImpl.prototype.getChildren = function() {
                return this.children;
            };
            NodeImpl.prototype.getProperties = function() {
                return this.properties;
            };
            NodeImpl.prototype.getProperty = function(type, exception) {
                if (typeof this.properties[type] != "undefined") {
                    return this.properties[type];
                }
                if (exception) {
                    throw "Property " + type + " not found";
                } else {
                    return "";
                }
            };
            return NodeImpl;
        }());
        var Property = (function() {
            function Property(propertyType, propertyValue) {
                this.propertyType = propertyType;
                this.propertyValue = propertyValue;
            }
            Property.prototype.getType = function() {
                return this.propertyType;
            };
            Property.prototype.getValue = function() {
                return this.propertyValue;
            };
            return Property;
        }());
        Table.Property = Property;
        var NodeBuilder = (function() {
            function NodeBuilder() {
                this.nodeType = NodeType.getByIdent("");
                this.children = [];
                this.childrenById = {};
                this.properties = {};
            }
            NodeBuilder.prototype.setNodeType = function(nodeType) {
                this.nodeType = nodeType;
                return this;
            };
            NodeBuilder.prototype.addChild = function(child) {
                this.children.push(child);
                var id = child.getId();
                if (id != null) {
                    this.childrenById[id] = child;
                }
                return this;
            };
            NodeBuilder.prototype.setId = function(id) {
                this.id = id;
            };
            NodeBuilder.prototype.setProperty = function(type, value) {
                this.properties[type] = value;
                return this;
            };
            NodeBuilder.prototype.build = function() {
                return new NodeImpl(this.nodeType, this.id, this.children, this.childrenById, this.properties);
            };
            NodeBuilder.prototype.checkType = function(nodeType) {
                return this.nodeType == nodeType;
            };
            return NodeBuilder;
        }());
        Table.NodeBuilder = NodeBuilder;
        var NodeType = (function() {
            function NodeType(nodeType) {
                this.type = nodeType;
            }
            NodeType.prototype.getType = function() {
                return this.type;
            };
            NodeType.getByIdent = function(ident) {
                return new NodeType(ident);
            };
            return NodeType;
        }());
        Table.NodeType = NodeType;
    })(Table = Feed.Table || (Feed.Table = {}));
})(Feed || (Feed = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_FeedParser", Feed.Table.FeedParser);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_StatsParser", Feed.Table.StatsParser);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_BuilderTree", Feed.Table.BuilderTree);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_NodeBuilder", Feed.Table.NodeBuilder);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_NodeType", Feed.Table.NodeType);
"use strict";
var Feed;
(function(Feed) {
    var Table;
    (function(Table) {
        var ParserHelper = (function() {
            function ParserHelper() {}
            ParserHelper.checkNodeType = function(node, expectedType, exception) {
                if (exception === void 0) {
                    exception = true;
                }
                var nodeType = node.getType().getType();
                var res = nodeType === expectedType;
                if (exception && !res) {
                    throw "Invalid node type. Have to be '" + expectedType + "' but '" + nodeType + "' given";
                }
                return res;
            };
            return ParserHelper;
        }());
        Table.ParserHelper = ParserHelper;
        var ContainerBuilderImpl = (function() {
            function ContainerBuilderImpl() {
                this._feedParser = cjs.dic.getNewInstance("Feed_Table_FeedParser");
            }
            ContainerBuilderImpl.prototype.setSpecificParser = function(specificParser) {
                this._specificParser = specificParser;
                return this;
            };
            ContainerBuilderImpl.prototype.build = function(content) {
                return this._specificParser.build(this._feedParser.parse(content));
            };
            return ContainerBuilderImpl;
        }());
        Table.ContainerBuilderImpl = ContainerBuilderImpl;
    })(Table = Feed.Table || (Feed.Table = {}));
})(Feed || (Feed = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_ParserHelper", Feed.Table.ParserHelper);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_ContainerBuilder", Feed.Table.ContainerBuilderImpl);
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Feed;
(function(Feed) {
    var Table;
    (function(Table) {
        var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
        var CricketLiveCommentParser = (function() {
            function CricketLiveCommentParser(util_enviroment) {
                this._constants = util_enviroment.getFeedIndexes();
            }
            CricketLiveCommentParser.prototype.build = function(rootNode) {
                var e_1, _a;
                this._tabContainer = new TabContainerImpl();
                var children = rootNode.getChildren();
                try {
                    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                        var child = children_1_1.value;
                        var childType = child.getType().getType();
                        if (childType === this._constants.COMMONINDEXES_MENU) {
                            this.setTab(child.getChildren());
                        }
                        if (childType === this._constants.COMMONINDEXES_GROUP) {
                            var firstTable = child.getChildren()[0];
                            var tabId = child.getProperty(this._constants.COMMONINDEXES_TAB_ID, true);
                            this.setTabData(firstTable, tabId);
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return this._tabContainer;
            };
            CricketLiveCommentParser.prototype.setTab = function(nodes) {
                var e_2, _a;
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var tab = nodes_1_1.value;
                        var tabItem = new TabContainerItemBuilder()
                            .setId(tab.getId())
                            .setLabel(tab.getProperty(this._constants.COMMONINDEXES_VALUE, true))
                            .build();
                        this._tabContainer.addItem(tabItem);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
            };
            CricketLiveCommentParser.prototype.setTabData = function(tabNode, tabId) {
                var e_3, _a, e_4, _b;
                ParserHelper.checkNodeType(tabNode, this._constants.COMMONINDEXES_TABLE);
                var tabContainerItem = this.getTabContainerById(tabId);
                try {
                    for (var _c = __values(tabNode.getChildren()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var row = _d.value;
                        var rowBuilder = cjs.dic.getNewInstance("Detail_CricketLiveComments_Container_ItemBuilder");
                        try {
                            for (var _e = (e_4 = void 0, __values(row.getChildren())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var col = _f.value;
                                ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_COL);
                                this.setRowVal(rowBuilder, col.getProperties());
                            }
                        } catch (e_4_1) {
                            e_4 = {
                                error: e_4_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_4) throw e_4.error;
                            }
                        }
                        tabContainerItem.addItem(rowBuilder.build());
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
            };
            CricketLiveCommentParser.prototype.getTabContainerById = function(tabId) {
                var e_5, _a;
                try {
                    for (var _b = __values(this._tabContainer.getItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.getId() === tabId) {
                            return item;
                        }
                    }
                } catch (e_5_1) {
                    e_5 = {
                        error: e_5_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                }
                throw "Data for nonexistent tab. Requested tab: " + tabId;
            };
            CricketLiveCommentParser.prototype.setRowVal = function(rowBuilder, properties) {
                for (var propKey in properties) {
                    var propVal = properties[propKey];
                    switch (propKey) {
                        case this._constants.STATSINDEXES_BALL_NUMBER:
                            rowBuilder.setBallNumber(propVal);
                            break;
                        case this._constants.STATSINDEXES_BALL_TYPE:
                            rowBuilder.setBallType(propVal);
                            break;
                        case this._constants.STATSINDEXES_BALL_VALUE:
                            rowBuilder.setBallValue(propVal);
                            break;
                        case this._constants.COMMONINDEXES_COMMENT:
                            rowBuilder.setComment(propVal);
                            break;
                        case this._constants.STATSINDEXES_OVER_SENTENCE:
                            rowBuilder.setOverSentence(propVal);
                            break;
                        case this._constants.STATSINDEXES_IS_ADDITIONAL:
                            rowBuilder.setIsAdditional(propVal);
                            break;
                    }
                }
            };
            return CricketLiveCommentParser;
        }());
        Table.CricketLiveCommentParser = CricketLiveCommentParser;
        var TabContainerImpl = (function() {
            function TabContainerImpl() {
                this._items = [];
            }
            TabContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            TabContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return TabContainerImpl;
        }());
        Table.TabContainerImpl = TabContainerImpl;
        var TabContainerItemImpl = (function() {
            function TabContainerItemImpl(id, label, items) {
                this._id = "";
                this._label = "";
                this._items = [];
                this._id = id;
                this._label = label;
                this._items = items;
            }
            TabContainerItemImpl.prototype.getId = function() {
                return this._id;
            };
            TabContainerItemImpl.prototype.getLabel = function() {
                return this._label;
            };
            TabContainerItemImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            TabContainerItemImpl.prototype.getItems = function() {
                return this._items;
            };
            return TabContainerItemImpl;
        }());
        Table.TabContainerItemImpl = TabContainerItemImpl;
        var TabContainerItemBuilder = (function() {
            function TabContainerItemBuilder() {
                this._id = "";
                this._label = "";
                this._items = [];
            }
            TabContainerItemBuilder.prototype.setId = function(id) {
                this._id = id;
                return this;
            };
            TabContainerItemBuilder.prototype.setLabel = function(label) {
                this._label = label;
                return this;
            };
            TabContainerItemBuilder.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            TabContainerItemBuilder.prototype.build = function() {
                return new TabContainerItemImpl(this._id, this._label, this._items);
            };
            return TabContainerItemBuilder;
        }());
        Table.TabContainerItemBuilder = TabContainerItemBuilder;
    })(Table = Feed.Table || (Feed.Table = {}));
})(Feed || (Feed = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_CricketLiveCommentParser", Feed.Table.CricketLiveCommentParser);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_TabContainerImpl", Feed.Table.TabContainerImpl);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_TabContainerItemBuilder", Feed.Table.TabContainerItemBuilder);
"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Feed;
(function(Feed) {
    var Table;
    (function(Table) {
        var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
        var MatchCommentParser = (function() {
            function MatchCommentParser(util_enviroment) {
                this._constants = util_enviroment.getFeedIndexes();
            }
            MatchCommentParser.prototype.build = function(rootNode) {
                this._matchCommentTableContainer = new MatchCommentTableContainerImpl();
                var tableNode = rootNode.getChildren();
                if (tableNode[0] && tableNode[0].getType().getType() === this._constants.COMMONINDEXES_TABLE) {
                    this.setTableItems(tableNode[0]);
                }
                return this._matchCommentTableContainer;
            };
            MatchCommentParser.prototype.setTableItems = function(tabNode) {
                var e_1, _a, e_2, _b;
                try {
                    for (var _c = __values(tabNode.getChildren()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var row = _d.value;
                        var isHeader = false;
                        var itemBuilder = cjs.dic.getNewInstance("Detail_MatchComments_Container_ItemBuilder");
                        if (row.getType().getType() === this._constants.COMMONINDEXES_HEADER) {
                            isHeader = true;
                        }
                        try {
                            for (var _e = (e_2 = void 0, __values(row.getChildren())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var col = _f.value;
                                ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_COL);
                                var properties = col.getProperties();
                                if (properties[this._constants.COMMONINDEXES_COMMENT]) {
                                    var propertyValue = properties[this._constants.COMMONINDEXES_COMMENT];
                                    if (isHeader) {
                                        this._matchCommentTableContainer.setLabel(propertyValue);
                                    } else {
                                        itemBuilder.setComment(propertyValue);
                                    }
                                }
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        if (!isHeader) {
                            this._matchCommentTableContainer.addItem(itemBuilder.build());
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
            };
            return MatchCommentParser;
        }());
        Table.MatchCommentParser = MatchCommentParser;
        var MatchCommentTableContainerImpl = (function() {
            function MatchCommentTableContainerImpl() {
                this._label = "";
                this._items = [];
            }
            MatchCommentTableContainerImpl.prototype.setLabel = function(label) {
                this._label = label;
                return this;
            };
            MatchCommentTableContainerImpl.prototype.getLabel = function() {
                return this._label;
            };
            MatchCommentTableContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            MatchCommentTableContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return MatchCommentTableContainerImpl;
        }());
        Table.MatchCommentTableContainerImpl = MatchCommentTableContainerImpl;
    })(Table = Feed.Table || (Feed.Table = {}));
})(Feed || (Feed = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_MatchCommentParser", Feed.Table.MatchCommentParser);
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Feed_Table_MatchCommentTableContainerImpl", Feed.Table.MatchCommentTableContainerImpl);
"use strict";
var Application;
(function(Application) {
    var ApplicationImpl = (function() {
        function ApplicationImpl(utilEnviroment) {
            this._utilConfig = cjs.Api.config;
            this._utilEnviroment = utilEnviroment;
            this._mainBookmakerIds = [];
            this._externalProjectId = 0;
        }
        ApplicationImpl.prototype.isExternalProject = function() {
            return this.getExternalProjectId() !== 0;
        };
        ApplicationImpl.prototype.getExternalProjectId = function() {
            return this._externalProjectId;
        };
        ApplicationImpl.prototype.setExternalProjectId = function(externalProjectId) {
            this._externalProjectId = externalProjectId;
        };
        ApplicationImpl.prototype.setMainBookmakerIds = function(mainBookmakerIds) {
            this._mainBookmakerIds = mainBookmakerIds;
        };
        ApplicationImpl.prototype.getMainBookmakerId = function() {
            return this._mainBookmakerIds[0];
        };
        ApplicationImpl.prototype.getMainBookmakerIds = function() {
            return this._mainBookmakerIds;
        };
        ApplicationImpl.prototype.getGeoIpWithSubdivision = function(geoIp, geoIpIsoSubdivisionCode) {
            if (!geoIp) {
                geoIp = this._utilEnviroment.getGlobalGeoIp();
            }
            if (!geoIpIsoSubdivisionCode) {
                geoIpIsoSubdivisionCode = this._utilEnviroment.getGeoIpIsoSubdivisionCode0();
            }
            var mergedGeoIp = "";
            if (!geoIp) {
                mergedGeoIp = "default";
            } else if (geoIpIsoSubdivisionCode) {
                mergedGeoIp = geoIp + ":" + geoIpIsoSubdivisionCode;
            }
            return mergedGeoIp;
        };
        return ApplicationImpl;
    }());
    Application.ApplicationImpl = ApplicationImpl;
})(Application || (Application = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Application", Application.ApplicationImpl, ["application"]);
"use strict";
var Helper;
(function(Helper) {
    var TimeMeasurerImpl = (function() {
        function TimeMeasurerImpl($, util_number) {
            this._queue = {};
            this._$ = $;
            this._utilConfig = cjs.Api.config;
            this._utilNumber = util_number;
        }
        TimeMeasurerImpl.prototype.start = function(namespace, chance) {
            var _this = this;
            if (chance === void 0) {
                chance = 100;
            }
            if (!this._isOkToMeasure(chance)) {
                return;
            }
            if (!this._queue[namespace]) {
                this._queue[namespace] = [];
            }
            this._queue[namespace].push((function(startTime) {
                return function(callback) {
                    var duration = Date.now() - startTime;
                    var statsCallback = function(url, statsData) {
                        if (_this._utilConfig.get("app", "fs_stats", "enable")) {
                            _this._$.ajax({
                                url: url,
                                data: statsData,
                                dataType: "jsonp",
                                jsonpCallback: "jsonp_cb",
                            });
                        }
                    };
                    if (typeof callback == "function") {
                        callback(duration, statsCallback);
                    }
                };
            })(Date.now()));
        };
        TimeMeasurerImpl.prototype.stop = function(namespace, callback) {
            if (this._queue[namespace] && this._queue[namespace].length) {
                var simpleCallback = this._queue[namespace].pop();
                simpleCallback(callback);
            }
        };
        TimeMeasurerImpl.prototype._isOkToMeasure = function(chance) {
            if (!chance) {
                return false;
            }
            var min = 1;
            var max = 100;
            while (chance < 1) {
                max *= 10;
                chance *= 10;
            }
            chance = Math.round(chance);
            return this._utilNumber.getRandomInt(min, max) <= chance;
        };
        return TimeMeasurerImpl;
    }());
    Helper.TimeMeasurerImpl = TimeMeasurerImpl;
})(Helper || (Helper = {}));
(typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerClass("Helper_TimeMeasurer", Helper.TimeMeasurerImpl);
/******/
(function(modules) { // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ // define getter function for harmony exports
    /******/
    __webpack_require__.d = function(exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
            /******/
        }
        /******/
    };
    /******/
    /******/ // define __esModule on exports
    /******/
    __webpack_require__.r = function(exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/
            Object.defineProperty(exports, Symbol.toStringTag, {
                value: 'Module'
            });
            /******/
        }
        /******/
        Object.defineProperty(exports, '__esModule', {
            value: true
        });
        /******/
    };
    /******/
    /******/ // create a fake namespace object
    /******/ // mode & 1: value is a module id, require it
    /******/ // mode & 2: merge all properties of value into the ns
    /******/ // mode & 4: return value when already ns object
    /******/ // mode & 8|1: behave like require
    /******/
    __webpack_require__.t = function(value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/
        if (mode & 8) return value;
        /******/
        if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
        /******/
        var ns = Object.create(null);
        /******/
        __webpack_require__.r(ns);
        /******/
        Object.defineProperty(ns, 'default', {
            enumerable: true,
            value: value
        });
        /******/
        if (mode & 2 && typeof value != 'string')
            for (var key in value) __webpack_require__.d(ns, key, function(key) {
                return value[key];
            }.bind(null, key));
        /******/
        return ns;
        /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function(module) {
        /******/
        var getter = module && module.__esModule ?
            /******/
            function getDefault() {
                return module['default'];
            } :
            /******/
            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "";
    /******/
    /******/
    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 52);
    /******/
})
/************************************************************************/
/******/
([
    /* 0 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */
        var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);


        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

        /** Used as a reference to the global object. */
        var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__[ /* default */ "a"] || freeSelf || Function('return this')();

        /* harmony default export */
        __webpack_exports__["a"] = (root);


        /***/
    }),
    /* 1 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventStageList;
        });
        /* unused harmony export stagesWithoutWinner */
        var EventStageList;
        (function(EventStageList) {
            EventStageList[EventStageList["SCHEDULED"] = 1] = "SCHEDULED";
            EventStageList[EventStageList["LIVE"] = 2] = "LIVE";
            EventStageList[EventStageList["FINISHED"] = 3] = "FINISHED";
            EventStageList[EventStageList["POSTPONED"] = 4] = "POSTPONED";
            EventStageList[EventStageList["CANCELED"] = 5] = "CANCELED";
            EventStageList[EventStageList["EXTRA_TIME"] = 6] = "EXTRA_TIME";
            EventStageList[EventStageList["PENALTIES"] = 7] = "PENALTIES";
            EventStageList[EventStageList["RETIRED"] = 8] = "RETIRED";
            EventStageList[EventStageList["WALKOVER"] = 9] = "WALKOVER";
            EventStageList[EventStageList["AFTER_EXTRA_TIME"] = 10] = "AFTER_EXTRA_TIME";
            EventStageList[EventStageList["AFTER_PENALTIES"] = 11] = "AFTER_PENALTIES";
            EventStageList[EventStageList["FIRST_HALF"] = 12] = "FIRST_HALF";
            EventStageList[EventStageList["SECOND_HALF"] = 13] = "SECOND_HALF";
            EventStageList[EventStageList["FIRST_PERIOD"] = 14] = "FIRST_PERIOD";
            EventStageList[EventStageList["SECOND_PERIOD"] = 15] = "SECOND_PERIOD";
            EventStageList[EventStageList["THIRD_PERIOD"] = 16] = "THIRD_PERIOD";
            EventStageList[EventStageList["FIRST_SET"] = 17] = "FIRST_SET";
            EventStageList[EventStageList["SECOND_SET"] = 18] = "SECOND_SET";
            EventStageList[EventStageList["THIRD_SET"] = 19] = "THIRD_SET";
            EventStageList[EventStageList["FOURTH_SET"] = 20] = "FOURTH_SET";
            EventStageList[EventStageList["FIFTH_SET"] = 21] = "FIFTH_SET";
            EventStageList[EventStageList["FIRST_QUARTER"] = 22] = "FIRST_QUARTER";
            EventStageList[EventStageList["SECOND_QUARTER"] = 23] = "SECOND_QUARTER";
            EventStageList[EventStageList["THIRD_QUARTER"] = 24] = "THIRD_QUARTER";
            EventStageList[EventStageList["FOURTH_QUARTER"] = 25] = "FOURTH_QUARTER";
            EventStageList[EventStageList["FIRST_INNING"] = 26] = "FIRST_INNING";
            EventStageList[EventStageList["SECOND_INNING"] = 27] = "SECOND_INNING";
            EventStageList[EventStageList["THIRD_INNING"] = 28] = "THIRD_INNING";
            EventStageList[EventStageList["FOURTH_INNING"] = 29] = "FOURTH_INNING";
            EventStageList[EventStageList["FIFTH_INNING"] = 30] = "FIFTH_INNING";
            EventStageList[EventStageList["SIXTH_INNING"] = 31] = "SIXTH_INNING";
            EventStageList[EventStageList["SEVENTH_INNING"] = 32] = "SEVENTH_INNING";
            EventStageList[EventStageList["EIGHTH_INNING"] = 33] = "EIGHTH_INNING";
            EventStageList[EventStageList["NINTH_INNING"] = 34] = "NINTH_INNING";
            EventStageList[EventStageList["EXTRA_INNING"] = 35] = "EXTRA_INNING";
            EventStageList[EventStageList["INTERRUPTED"] = 36] = "INTERRUPTED";
            EventStageList[EventStageList["ABANDONED"] = 37] = "ABANDONED";
            EventStageList[EventStageList["HALF_TIME"] = 38] = "HALF_TIME";
            EventStageList[EventStageList["TIME_OUT"] = 39] = "TIME_OUT";
            EventStageList[EventStageList["FIRST_EXTRA_TIME"] = 40] = "FIRST_EXTRA_TIME";
            EventStageList[EventStageList["SECOND_EXTRA_TIME"] = 41] = "SECOND_EXTRA_TIME";
            EventStageList[EventStageList["PENDING"] = 42] = "PENDING";
            EventStageList[EventStageList["DELAYED"] = 43] = "DELAYED";
            EventStageList[EventStageList["SUSPENDED"] = 44] = "SUSPENDED";
            EventStageList[EventStageList["TO_FINISH"] = 45] = "TO_FINISH";
            EventStageList[EventStageList["PAUSE"] = 46] = "PAUSE";
            EventStageList[EventStageList["FIRST_SET_TIEBREAK"] = 47] = "FIRST_SET_TIEBREAK";
            EventStageList[EventStageList["SECOND_SET_TIEBREAK"] = 48] = "SECOND_SET_TIEBREAK";
            EventStageList[EventStageList["THIRD_SET_TIEBREAK"] = 49] = "THIRD_SET_TIEBREAK";
            EventStageList[EventStageList["FOURTH_SET_TIEBREAK"] = 50] = "FOURTH_SET_TIEBREAK";
            EventStageList[EventStageList["FIFTH_SET_TIEBREAK"] = 51] = "FIFTH_SET_TIEBREAK";
            EventStageList[EventStageList["GAME"] = 52] = "GAME";
            EventStageList[EventStageList["SECOND_PLACE"] = 53] = "SECOND_PLACE";
            EventStageList[EventStageList["AWARDED"] = 54] = "AWARDED";
            EventStageList[EventStageList["SIXTH_SET"] = 55] = "SIXTH_SET";
            EventStageList[EventStageList["SEVENTH_SET"] = 56] = "SEVENTH_SET";
            EventStageList[EventStageList["AFTER_DAY1"] = 57] = "AFTER_DAY1";
            EventStageList[EventStageList["AFTER_DAY2"] = 58] = "AFTER_DAY2";
            EventStageList[EventStageList["AFTER_DAY3"] = 59] = "AFTER_DAY3";
            EventStageList[EventStageList["AFTER_DAY4"] = 60] = "AFTER_DAY4";
            EventStageList[EventStageList["AFTER_DAY5"] = 61] = "AFTER_DAY5";
            EventStageList[EventStageList["AFTER_DAY6"] = 257] = "AFTER_DAY6";
            EventStageList[EventStageList["AFTER_DAY7"] = 258] = "AFTER_DAY7";
            EventStageList[EventStageList["AFTER_DAY8"] = 259] = "AFTER_DAY8";
            EventStageList[EventStageList["AFTER_DAY9"] = 260] = "AFTER_DAY9";
            EventStageList[EventStageList["AFTER_DAY10"] = 261] = "AFTER_DAY10";
            EventStageList[EventStageList["AFTER_ROUND1"] = 62] = "AFTER_ROUND1";
            EventStageList[EventStageList["AFTER_ROUND2"] = 63] = "AFTER_ROUND2";
            EventStageList[EventStageList["AFTER_ROUND3"] = 64] = "AFTER_ROUND3";
            EventStageList[EventStageList["FIRST_ROUND"] = 65] = "FIRST_ROUND";
            EventStageList[EventStageList["SECOND_ROUND"] = 66] = "SECOND_ROUND";
            EventStageList[EventStageList["THIRD_ROUND"] = 67] = "THIRD_ROUND";
            EventStageList[EventStageList["FOURTH_ROUND"] = 68] = "FOURTH_ROUND";
            EventStageList[EventStageList["AFTER_EXTRA_INNING"] = 69] = "AFTER_EXTRA_INNING";
            EventStageList[EventStageList["PRACTICE"] = 70] = "PRACTICE";
            EventStageList[EventStageList["QUALIFICATION"] = 71] = "QUALIFICATION";
            EventStageList[EventStageList["WARM_UP"] = 72] = "WARM_UP";
            EventStageList[EventStageList["WARM_UP_2"] = 234] = "WARM_UP_2";
            EventStageList[EventStageList["WARM_UP_1"] = 235] = "WARM_UP_1";
            EventStageList[EventStageList["RACE"] = 73] = "RACE";
            EventStageList[EventStageList["MAIN"] = 74] = "MAIN";
            EventStageList[EventStageList["PLAY_OFFS"] = 75] = "PLAY_OFFS";
            EventStageList[EventStageList["PRACTICE_1"] = 76] = "PRACTICE_1";
            EventStageList[EventStageList["PRACTICE_2"] = 77] = "PRACTICE_2";
            EventStageList[EventStageList["PRACTICE_3"] = 78] = "PRACTICE_3";
            EventStageList[EventStageList["PRACTICE_4"] = 79] = "PRACTICE_4";
            EventStageList[EventStageList["PRACTICE_5"] = 80] = "PRACTICE_5";
            EventStageList[EventStageList["PRACTICE_6"] = 81] = "PRACTICE_6";
            EventStageList[EventStageList["PRACTICE_7"] = 82] = "PRACTICE_7";
            EventStageList[EventStageList["PRACTICE_8"] = 229] = "PRACTICE_8";
            EventStageList[EventStageList["PRACTICE_9"] = 236] = "PRACTICE_9";
            EventStageList[EventStageList["QUALIFICATION_FIRST_STAGE"] = 83] = "QUALIFICATION_FIRST_STAGE";
            EventStageList[EventStageList["QUALIFICATION_SECOND_STAGE"] = 84] = "QUALIFICATION_SECOND_STAGE";
            EventStageList[EventStageList["QUALIFICATION_THIRD_STAGE"] = 85] = "QUALIFICATION_THIRD_STAGE";
            EventStageList[EventStageList["QUALIFICATION_1"] = 86] = "QUALIFICATION_1";
            EventStageList[EventStageList["QUALIFICATION_2"] = 87] = "QUALIFICATION_2";
            EventStageList[EventStageList["QUALIFICATION_3"] = 88] = "QUALIFICATION_3";
            EventStageList[EventStageList["QUALIFICATION_4"] = 243] = "QUALIFICATION_4";
            EventStageList[EventStageList["QUALIFICATION_5"] = 244] = "QUALIFICATION_5";
            EventStageList[EventStageList["RACE_1"] = 89] = "RACE_1";
            EventStageList[EventStageList["RACE_2"] = 90] = "RACE_2";
            EventStageList[EventStageList["RACE_3"] = 207] = "RACE_3";
            EventStageList[EventStageList["RACE_4"] = 208] = "RACE_4";
            EventStageList[EventStageList["RACE_5"] = 209] = "RACE_5";
            EventStageList[EventStageList["RACE_6"] = 210] = "RACE_6";
            EventStageList[EventStageList["RACE_7"] = 211] = "RACE_7";
            EventStageList[EventStageList["RACE_8"] = 212] = "RACE_8";
            EventStageList[EventStageList["RACE_9"] = 213] = "RACE_9";
            EventStageList[EventStageList["RACE_10"] = 214] = "RACE_10";
            EventStageList[EventStageList["RACE_11"] = 215] = "RACE_11";
            EventStageList[EventStageList["RACE_12"] = 216] = "RACE_12";
            EventStageList[EventStageList["RACE_13"] = 217] = "RACE_13";
            EventStageList[EventStageList["RACE_14"] = 218] = "RACE_14";
            EventStageList[EventStageList["RACE_15"] = 219] = "RACE_15";
            EventStageList[EventStageList["RACE_16"] = 237] = "RACE_16";
            EventStageList[EventStageList["RACE_17"] = 238] = "RACE_17";
            EventStageList[EventStageList["RACE_18"] = 239] = "RACE_18";
            EventStageList[EventStageList["TESTING"] = 91] = "TESTING";
            EventStageList[EventStageList["SPECIAL_STAGE_1"] = 92] = "SPECIAL_STAGE_1";
            EventStageList[EventStageList["SPECIAL_STAGE_2"] = 93] = "SPECIAL_STAGE_2";
            EventStageList[EventStageList["SPECIAL_STAGE_3"] = 94] = "SPECIAL_STAGE_3";
            EventStageList[EventStageList["SPECIAL_STAGE_4"] = 95] = "SPECIAL_STAGE_4";
            EventStageList[EventStageList["SPECIAL_STAGE_5"] = 96] = "SPECIAL_STAGE_5";
            EventStageList[EventStageList["SPECIAL_STAGE_6"] = 97] = "SPECIAL_STAGE_6";
            EventStageList[EventStageList["SPECIAL_STAGE_7"] = 99] = "SPECIAL_STAGE_7";
            EventStageList[EventStageList["SPECIAL_STAGE_8"] = 100] = "SPECIAL_STAGE_8";
            EventStageList[EventStageList["SPECIAL_STAGE_9"] = 101] = "SPECIAL_STAGE_9";
            EventStageList[EventStageList["SPECIAL_STAGE_10"] = 102] = "SPECIAL_STAGE_10";
            EventStageList[EventStageList["SPECIAL_STAGE_11"] = 103] = "SPECIAL_STAGE_11";
            EventStageList[EventStageList["SPECIAL_STAGE_12"] = 104] = "SPECIAL_STAGE_12";
            EventStageList[EventStageList["SPECIAL_STAGE_13"] = 105] = "SPECIAL_STAGE_13";
            EventStageList[EventStageList["SPECIAL_STAGE_14"] = 106] = "SPECIAL_STAGE_14";
            EventStageList[EventStageList["SPECIAL_STAGE_15"] = 107] = "SPECIAL_STAGE_15";
            EventStageList[EventStageList["SPECIAL_STAGE_16"] = 108] = "SPECIAL_STAGE_16";
            EventStageList[EventStageList["SPECIAL_STAGE_17"] = 109] = "SPECIAL_STAGE_17";
            EventStageList[EventStageList["SPECIAL_STAGE_18"] = 110] = "SPECIAL_STAGE_18";
            EventStageList[EventStageList["SPECIAL_STAGE_19"] = 111] = "SPECIAL_STAGE_19";
            EventStageList[EventStageList["SPECIAL_STAGE_20"] = 112] = "SPECIAL_STAGE_20";
            EventStageList[EventStageList["SPECIAL_STAGE_21"] = 113] = "SPECIAL_STAGE_21";
            EventStageList[EventStageList["SPECIAL_STAGE_22"] = 114] = "SPECIAL_STAGE_22";
            EventStageList[EventStageList["SPECIAL_STAGE_23"] = 115] = "SPECIAL_STAGE_23";
            EventStageList[EventStageList["SPECIAL_STAGE_24"] = 116] = "SPECIAL_STAGE_24";
            EventStageList[EventStageList["SPECIAL_STAGE_25"] = 117] = "SPECIAL_STAGE_25";
            EventStageList[EventStageList["SPECIAL_STAGE_26"] = 118] = "SPECIAL_STAGE_26";
            EventStageList[EventStageList["HEAT_1"] = 119] = "HEAT_1";
            EventStageList[EventStageList["HEAT_2"] = 120] = "HEAT_2";
            EventStageList[EventStageList["HEAT_3"] = 121] = "HEAT_3";
            EventStageList[EventStageList["HEAT_4"] = 122] = "HEAT_4";
            EventStageList[EventStageList["HEAT_5"] = 123] = "HEAT_5";
            EventStageList[EventStageList["HEAT_6"] = 124] = "HEAT_6";
            EventStageList[EventStageList["HEAT_7"] = 125] = "HEAT_7";
            EventStageList[EventStageList["HEAT_8"] = 126] = "HEAT_8";
            EventStageList[EventStageList["HEAT_9"] = 127] = "HEAT_9";
            EventStageList[EventStageList["HEAT_10"] = 128] = "HEAT_10";
            EventStageList[EventStageList["HEAT_11"] = 129] = "HEAT_11";
            EventStageList[EventStageList["HEAT_12"] = 130] = "HEAT_12";
            EventStageList[EventStageList["HEAT_13"] = 131] = "HEAT_13";
            EventStageList[EventStageList["HEAT_14"] = 132] = "HEAT_14";
            EventStageList[EventStageList["HEAT_15"] = 133] = "HEAT_15";
            EventStageList[EventStageList["HEAT_16"] = 134] = "HEAT_16";
            EventStageList[EventStageList["HEAT_17"] = 135] = "HEAT_17";
            EventStageList[EventStageList["HEAT_18"] = 136] = "HEAT_18";
            EventStageList[EventStageList["HEAT_19"] = 137] = "HEAT_19";
            EventStageList[EventStageList["HEAT_20"] = 138] = "HEAT_20";
            EventStageList[EventStageList["HEAT_21"] = 139] = "HEAT_21";
            EventStageList[EventStageList["HEAT_22"] = 140] = "HEAT_22";
            EventStageList[EventStageList["HEAT_23"] = 141] = "HEAT_23";
            EventStageList[EventStageList["HEAT_24"] = 142] = "HEAT_24";
            EventStageList[EventStageList["HEAT_25"] = 143] = "HEAT_25";
            EventStageList[EventStageList["TEST_DAY_1"] = 144] = "TEST_DAY_1";
            EventStageList[EventStageList["TEST_DAY_2"] = 145] = "TEST_DAY_2";
            EventStageList[EventStageList["TEST_DAY_3"] = 146] = "TEST_DAY_3";
            EventStageList[EventStageList["TEST_DAY_4"] = 147] = "TEST_DAY_4";
            EventStageList[EventStageList["TEST_DAY_5"] = 148] = "TEST_DAY_5";
            EventStageList[EventStageList["AFTER_STAGE_1"] = 149] = "AFTER_STAGE_1";
            EventStageList[EventStageList["AFTER_STAGE_2"] = 150] = "AFTER_STAGE_2";
            EventStageList[EventStageList["AFTER_STAGE_3"] = 151] = "AFTER_STAGE_3";
            EventStageList[EventStageList["AFTER_STAGE_4"] = 152] = "AFTER_STAGE_4";
            EventStageList[EventStageList["AFTER_STAGE_5"] = 153] = "AFTER_STAGE_5";
            EventStageList[EventStageList["AFTER_STAGE_6"] = 154] = "AFTER_STAGE_6";
            EventStageList[EventStageList["AFTER_STAGE_7"] = 155] = "AFTER_STAGE_7";
            EventStageList[EventStageList["AFTER_STAGE_8"] = 156] = "AFTER_STAGE_8";
            EventStageList[EventStageList["AFTER_STAGE_9"] = 157] = "AFTER_STAGE_9";
            EventStageList[EventStageList["AFTER_STAGE_10"] = 158] = "AFTER_STAGE_10";
            EventStageList[EventStageList["AFTER_STAGE_11"] = 159] = "AFTER_STAGE_11";
            EventStageList[EventStageList["AFTER_STAGE_12"] = 160] = "AFTER_STAGE_12";
            EventStageList[EventStageList["AFTER_STAGE_13"] = 161] = "AFTER_STAGE_13";
            EventStageList[EventStageList["AFTER_STAGE_14"] = 162] = "AFTER_STAGE_14";
            EventStageList[EventStageList["AFTER_STAGE_15"] = 163] = "AFTER_STAGE_15";
            EventStageList[EventStageList["AFTER_STAGE_16"] = 164] = "AFTER_STAGE_16";
            EventStageList[EventStageList["AFTER_STAGE_17"] = 165] = "AFTER_STAGE_17";
            EventStageList[EventStageList["AFTER_STAGE_18"] = 166] = "AFTER_STAGE_18";
            EventStageList[EventStageList["AFTER_STAGE_19"] = 167] = "AFTER_STAGE_19";
            EventStageList[EventStageList["AFTER_STAGE_20"] = 168] = "AFTER_STAGE_20";
            EventStageList[EventStageList["AFTER_STAGE_21"] = 169] = "AFTER_STAGE_21";
            EventStageList[EventStageList["AFTER_STAGE_22"] = 170] = "AFTER_STAGE_22";
            EventStageList[EventStageList["AFTER_STAGE_23"] = 171] = "AFTER_STAGE_23";
            EventStageList[EventStageList["AFTER_STAGE_24"] = 172] = "AFTER_STAGE_24";
            EventStageList[EventStageList["AFTER_STAGE_25"] = 173] = "AFTER_STAGE_25";
            EventStageList[EventStageList["AFTER_STAGE_26"] = 174] = "AFTER_STAGE_26";
            EventStageList[EventStageList["AFTER_STAGE_27"] = 175] = "AFTER_STAGE_27";
            EventStageList[EventStageList["AFTER_STAGE_28"] = 176] = "AFTER_STAGE_28";
            EventStageList[EventStageList["AFTER_STAGE_29"] = 177] = "AFTER_STAGE_29";
            EventStageList[EventStageList["AFTER_STAGE_30"] = 178] = "AFTER_STAGE_30";
            EventStageList[EventStageList["STAGE_1"] = 179] = "STAGE_1";
            EventStageList[EventStageList["STAGE_2"] = 180] = "STAGE_2";
            EventStageList[EventStageList["STAGE_3"] = 181] = "STAGE_3";
            EventStageList[EventStageList["STAGE_4"] = 182] = "STAGE_4";
            EventStageList[EventStageList["STAGE_5"] = 183] = "STAGE_5";
            EventStageList[EventStageList["STAGE_6"] = 184] = "STAGE_6";
            EventStageList[EventStageList["STAGE_7"] = 185] = "STAGE_7";
            EventStageList[EventStageList["STAGE_8"] = 186] = "STAGE_8";
            EventStageList[EventStageList["STAGE_9"] = 187] = "STAGE_9";
            EventStageList[EventStageList["STAGE_10"] = 188] = "STAGE_10";
            EventStageList[EventStageList["STAGE_11"] = 189] = "STAGE_11";
            EventStageList[EventStageList["STAGE_12"] = 190] = "STAGE_12";
            EventStageList[EventStageList["STAGE_13"] = 191] = "STAGE_13";
            EventStageList[EventStageList["STAGE_14"] = 192] = "STAGE_14";
            EventStageList[EventStageList["STAGE_15"] = 193] = "STAGE_15";
            EventStageList[EventStageList["STAGE_16"] = 194] = "STAGE_16";
            EventStageList[EventStageList["STAGE_17"] = 195] = "STAGE_17";
            EventStageList[EventStageList["STAGE_18"] = 196] = "STAGE_18";
            EventStageList[EventStageList["STAGE_19"] = 197] = "STAGE_19";
            EventStageList[EventStageList["STAGE_20"] = 198] = "STAGE_20";
            EventStageList[EventStageList["STAGE_21"] = 199] = "STAGE_21";
            EventStageList[EventStageList["STAGE_22"] = 200] = "STAGE_22";
            EventStageList[EventStageList["STAGE_23"] = 201] = "STAGE_23";
            EventStageList[EventStageList["STAGE_24"] = 202] = "STAGE_24";
            EventStageList[EventStageList["STAGE_25"] = 203] = "STAGE_25";
            EventStageList[EventStageList["SEMIFINAL"] = 251] = "SEMIFINAL";
            EventStageList[EventStageList["SEMIFINAL_1"] = 204] = "SEMIFINAL_1";
            EventStageList[EventStageList["SEMIFINAL_2"] = 205] = "SEMIFINAL_2";
            EventStageList[EventStageList["SEMIFINAL_3"] = 253] = "SEMIFINAL_3";
            EventStageList[EventStageList["FINAL_ROUND"] = 206] = "FINAL_ROUND";
            EventStageList[EventStageList["FIFTH_ROUND"] = 220] = "FIFTH_ROUND";
            EventStageList[EventStageList["SIXTH_ROUND"] = 221] = "SIXTH_ROUND";
            EventStageList[EventStageList["SEVENTH_ROUND"] = 222] = "SEVENTH_ROUND";
            EventStageList[EventStageList["EIGHTH_ROUND"] = 223] = "EIGHTH_ROUND";
            EventStageList[EventStageList["NINTH_ROUND"] = 224] = "NINTH_ROUND";
            EventStageList[EventStageList["TENTH_ROUND"] = 225] = "TENTH_ROUND";
            EventStageList[EventStageList["ELEVENTH_ROUND"] = 226] = "ELEVENTH_ROUND";
            EventStageList[EventStageList["TWELFTH_ROUND"] = 227] = "TWELFTH_ROUND";
            EventStageList[EventStageList["AFTER_RACE_1"] = 262] = "AFTER_RACE_1";
            EventStageList[EventStageList["AFTER_RACE_2"] = 263] = "AFTER_RACE_2";
            EventStageList[EventStageList["AFTER_RACE_3"] = 264] = "AFTER_RACE_3";
            EventStageList[EventStageList["AFTER_RACE_4"] = 265] = "AFTER_RACE_4";
            EventStageList[EventStageList["CURRENT"] = 228] = "CURRENT";
            EventStageList[EventStageList["QUALIFICATION_1_FIRST_STAGE"] = 230] = "QUALIFICATION_1_FIRST_STAGE";
            EventStageList[EventStageList["QUALIFICATION_2_FIRST_STAGE"] = 231] = "QUALIFICATION_2_FIRST_STAGE";
            EventStageList[EventStageList["QUALIFICATION_1_SECOND_STAGE"] = 232] = "QUALIFICATION_1_SECOND_STAGE";
            EventStageList[EventStageList["QUALIFICATION_2_SECOND_STAGE"] = 233] = "QUALIFICATION_2_SECOND_STAGE";
            EventStageList[EventStageList["FULL_TIME"] = 242] = "FULL_TIME";
            EventStageList[EventStageList["QUARTER_FINAL_1"] = 245] = "QUARTER_FINAL_1";
            EventStageList[EventStageList["QUARTER_FINAL_2"] = 246] = "QUARTER_FINAL_2";
            EventStageList[EventStageList["QUARTER_FINAL_3"] = 247] = "QUARTER_FINAL_3";
            EventStageList[EventStageList["QUARTER_FINAL_4"] = 248] = "QUARTER_FINAL_4";
            EventStageList[EventStageList["QUARTER_FINAL_5"] = 249] = "QUARTER_FINAL_5";
            EventStageList[EventStageList["QUARTER_FINAL_6"] = 250] = "QUARTER_FINAL_6";
            EventStageList[EventStageList["QUARTER_FINAL"] = 252] = "QUARTER_FINAL";
            EventStageList[EventStageList["FINAL_B"] = 254] = "FINAL_B";
            EventStageList[EventStageList["SPECIAL_STAGE_1_B"] = 256] = "SPECIAL_STAGE_1_B";
            EventStageList[EventStageList["AFTER_QUALIFICATION"] = 255] = "AFTER_QUALIFICATION";
            EventStageList[EventStageList["AFTER_QUALIFICATION_1"] = 266] = "AFTER_QUALIFICATION_1";
            EventStageList[EventStageList["AFTER_QUALIFICATION_2"] = 267] = "AFTER_QUALIFICATION_2";
            EventStageList[EventStageList["AFTER_QUALIFICATION_3"] = 268] = "AFTER_QUALIFICATION_3";
            EventStageList[EventStageList["AFTER_QUALIFICATION_4"] = 269] = "AFTER_QUALIFICATION_4";
            EventStageList[EventStageList["AFTER_QUALIFICATION_5"] = 270] = "AFTER_QUALIFICATION_5";
            EventStageList[EventStageList["AFTER_QUALIFICATION_FIRST_STAGE"] = 271] = "AFTER_QUALIFICATION_FIRST_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_SECOND_STAGE"] = 272] = "AFTER_QUALIFICATION_SECOND_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_THIRD_STAGE"] = 273] = "AFTER_QUALIFICATION_THIRD_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_1_FIRST_STAGE"] = 274] = "AFTER_QUALIFICATION_1_FIRST_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_1_SECOND_STAGE"] = 275] = "AFTER_QUALIFICATION_1_SECOND_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_2_FIRST_STAGE"] = 276] = "AFTER_QUALIFICATION_2_FIRST_STAGE";
            EventStageList[EventStageList["AFTER_QUALIFICATION_2_SECOND_STAGE"] = 277] = "AFTER_QUALIFICATION_2_SECOND_STAGE";
            EventStageList[EventStageList["AFTER_PRACTICE_1"] = 278] = "AFTER_PRACTICE_1";
            EventStageList[EventStageList["AFTER_PRACTICE_2"] = 279] = "AFTER_PRACTICE_2";
            EventStageList[EventStageList["AFTER_PRACTICE_3"] = 280] = "AFTER_PRACTICE_3";
            EventStageList[EventStageList["AFTER_PRACTICE_4"] = 281] = "AFTER_PRACTICE_4";
            EventStageList[EventStageList["AFTER_PRACTICE_5"] = 282] = "AFTER_PRACTICE_5";
            EventStageList[EventStageList["AFTER_PRACTICE_6"] = 283] = "AFTER_PRACTICE_6";
            EventStageList[EventStageList["AFTER_PRACTICE_7"] = 284] = "AFTER_PRACTICE_7";
            EventStageList[EventStageList["AFTER_PRACTICE_8"] = 285] = "AFTER_PRACTICE_8";
            EventStageList[EventStageList["AFTER_PRACTICE_9"] = 286] = "AFTER_PRACTICE_9";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_1"] = 287] = "AFTER_SPECIAL_STAGE_1";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_2"] = 288] = "AFTER_SPECIAL_STAGE_2";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_3"] = 289] = "AFTER_SPECIAL_STAGE_3";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_4"] = 290] = "AFTER_SPECIAL_STAGE_4";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_5"] = 291] = "AFTER_SPECIAL_STAGE_5";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_6"] = 292] = "AFTER_SPECIAL_STAGE_6";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_7"] = 293] = "AFTER_SPECIAL_STAGE_7";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_8"] = 294] = "AFTER_SPECIAL_STAGE_8";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_9"] = 295] = "AFTER_SPECIAL_STAGE_9";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_10"] = 296] = "AFTER_SPECIAL_STAGE_10";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_11"] = 297] = "AFTER_SPECIAL_STAGE_11";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_12"] = 298] = "AFTER_SPECIAL_STAGE_12";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_13"] = 299] = "AFTER_SPECIAL_STAGE_13";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_14"] = 300] = "AFTER_SPECIAL_STAGE_14";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_15"] = 301] = "AFTER_SPECIAL_STAGE_15";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_16"] = 302] = "AFTER_SPECIAL_STAGE_16";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_17"] = 303] = "AFTER_SPECIAL_STAGE_17";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_18"] = 304] = "AFTER_SPECIAL_STAGE_18";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_19"] = 305] = "AFTER_SPECIAL_STAGE_19";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_20"] = 306] = "AFTER_SPECIAL_STAGE_20";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_21"] = 307] = "AFTER_SPECIAL_STAGE_21";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_22"] = 308] = "AFTER_SPECIAL_STAGE_22";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_23"] = 309] = "AFTER_SPECIAL_STAGE_23";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_24"] = 310] = "AFTER_SPECIAL_STAGE_24";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_25"] = 311] = "AFTER_SPECIAL_STAGE_25";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_26"] = 312] = "AFTER_SPECIAL_STAGE_26";
            EventStageList[EventStageList["AFTER_SPECIAL_STAGE_1_B"] = 313] = "AFTER_SPECIAL_STAGE_1_B";
            EventStageList[EventStageList["AFTER_WARM_UP"] = 314] = "AFTER_WARM_UP";
            EventStageList[EventStageList["AFTER_WARM_UP_1"] = 315] = "AFTER_WARM_UP_1";
            EventStageList[EventStageList["AFTER_WARM_UP_2"] = 316] = "AFTER_WARM_UP_2";
            EventStageList[EventStageList["AFTER_HEAT_1"] = 317] = "AFTER_HEAT_1";
            EventStageList[EventStageList["AFTER_HEAT_2"] = 318] = "AFTER_HEAT_2";
            EventStageList[EventStageList["AFTER_HEAT_3"] = 319] = "AFTER_HEAT_3";
            EventStageList[EventStageList["AFTER_HEAT_4"] = 320] = "AFTER_HEAT_4";
            EventStageList[EventStageList["AFTER_HEAT_5"] = 321] = "AFTER_HEAT_5";
            EventStageList[EventStageList["EIGHTH_SET"] = 324] = "EIGHTH_SET";
            EventStageList[EventStageList["NINTH_SET"] = 325] = "NINTH_SET";
            EventStageList[EventStageList["TENTH_SET"] = 326] = "TENTH_SET";
            EventStageList[EventStageList["ELEVENTH_SET"] = 327] = "ELEVENTH_SET";
            EventStageList[EventStageList["TWELFTH_SET"] = 328] = "TWELFTH_SET";
            EventStageList[EventStageList["THIRTEENTH_SET"] = 329] = "THIRTEENTH_SET";
            EventStageList[EventStageList["LUNCH"] = 333] = "LUNCH";
            EventStageList[EventStageList["TEA"] = 334] = "TEA";
            EventStageList[EventStageList["MEDICAL_TIMEOUT"] = 335] = "MEDICAL_TIMEOUT";
            EventStageList[EventStageList["FIRST_AND_SECOND_HALF"] = 9999] = "FIRST_AND_SECOND_HALF";
            EventStageList[EventStageList["OVERALL"] = 74] = "OVERALL";
        })(EventStageList || (EventStageList = {}));
        var stagesWithoutWinner = [
            EventStageList.SCHEDULED,
            EventStageList.POSTPONED,
            EventStageList.CANCELED,
            EventStageList.RETIRED,
            EventStageList.WALKOVER,
            EventStageList.INTERRUPTED,
            EventStageList.ABANDONED,
            EventStageList.AFTER_DAY1,
            EventStageList.AFTER_DAY2,
            EventStageList.AFTER_DAY3,
            EventStageList.AFTER_DAY4,
            EventStageList.AFTER_DAY5,
            EventStageList.AFTER_DAY6,
            EventStageList.AFTER_DAY7,
            EventStageList.AFTER_DAY8,
            EventStageList.AFTER_DAY9,
            EventStageList.AFTER_DAY10,
        ];


        /***/
    }),
    /* 2 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(module) {
            /* harmony import */
            var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);


            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__[ /* default */ "a"].process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function() {
                try {
                    // Use `util.types` for Node.js 10+.
                    var types = freeModule && freeModule.require && freeModule.require('util').types;

                    if (types) {
                        return types;
                    }

                    // Legacy `process.binding('util')` for Node.js < 10.
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
            }());

            /* harmony default export */
            __webpack_exports__["a"] = (nodeUtil);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(14)(module)))

        /***/
    }),
    /* 3 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CricketTypesList;
        });
        var CricketTypesList;
        (function(CricketTypesList) {
            CricketTypesList[CricketTypesList["TEST"] = 5149866] = "TEST";
            CricketTypesList[CricketTypesList["ODI"] = 5149867] = "ODI";
            CricketTypesList[CricketTypesList["T20"] = 5149868] = "T20";
        })(CricketTypesList || (CricketTypesList = {}));


        /***/
    }),
    /* 4 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export NewsfeedImpl */
        /* unused harmony export ContainerImpl */
        /* unused harmony export ItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return ItemBuilder;
        });
        /* unused harmony export EventItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventItemBuilder;
        });
        /* unused harmony export ParticipantEventItem */
        /* unused harmony export ParticipantEventItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "e", function() {
            return ParticipantEventItemBuilder;
        });
        /* unused harmony export MoreEventItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "c", function() {
            return MoreEventItemBuilder;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "d", function() {
            return NewsfeedFactory;
        });
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        var CategoryIds;
        (function(CategoryIds) {
            CategoryIds[CategoryIds["Default"] = -1] = "Default";
            CategoryIds[CategoryIds["Pre_Match"] = 1] = "Pre_Match";
            CategoryIds[CategoryIds["Report"] = 2] = "Report";
            CategoryIds[CategoryIds["Reaction"] = 3] = "Reaction";
        })(CategoryIds || (CategoryIds = {}));
        var NewsfeedImpl = /** @class */ (function() {
            function NewsfeedImpl(htmlTemplate, htmlTemplateName, newsfeedContainer, utilEnviroment, utilDate, utilConfig, utilTrans, expandedCategories) {
                this._htmlTemplate = htmlTemplate;
                this._htmlTemplateName = htmlTemplateName;
                this._newsfeedContainer = newsfeedContainer;
                this._utilEnviroment = utilEnviroment;
                this._utilDate = utilDate;
                this._utilConfig = utilConfig;
                this._utilTrans = utilTrans;
                this._expandedCategories = expandedCategories;
            }
            NewsfeedImpl.prototype.getItems = function() {
                return this._newsfeedContainer.getItems();
            };
            NewsfeedImpl.prototype.render = function() {
                var items = this.getItems();
                if (items.length === 0) {
                    return "";
                }
                return this._htmlTemplate.render(this._htmlTemplateName, this.createHtmlTemplateData());
            };
            NewsfeedImpl.prototype.createHtmlTemplateData = function() {
                var e_1, _a;
                var MAX_IN_CATEGORY = 5;
                var items = this.getItems();
                var itemsCount = items.length;
                var GAeventTracking = this._utilConfig.get("app", "google_analytics", "event_tracking");
                var categoryFiller = new CategoryFiller(this._utilTrans.translate("TRANS_SHOW_MORE"), MAX_IN_CATEGORY, this._expandedCategories);
                categoryFiller
                    .addCategory({
                        id: CategoryIds.Default,
                        title: "",
                        analyticsName: "default"
                    })
                    .addCategory({
                        id: CategoryIds.Reaction,
                        title: this._utilTrans.translate("TRANS_NEWSFEED_CATEGORY_REACTION"),
                        analyticsName: "reaction",
                    })
                    .addCategory({
                        id: CategoryIds.Report,
                        title: this._utilTrans.translate("TRANS_NEWSFEED_CATEGORY_REPORT"),
                        analyticsName: "report",
                    })
                    .addCategory({
                        id: CategoryIds.Pre_Match,
                        title: this._utilTrans.translate("TRANS_NEWSFEED_CATEGORY_PREMATCH"),
                        analyticsName: "prematch",
                    });
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        if (item instanceof ItemImpl) {
                            var simpleItem = {
                                title: item.getTitle(),
                                link: item.getLink(),
                                imageUrl: item.getImageUrl(),
                                perex: item.getPerex(),
                                published: this._utilDate.timestamp2date(this._utilEnviroment.fullDateTimeFormat(), item.getPublished(), this._utilEnviroment.getGmtOffset()()),
                                providerName: item.getProviderName(),
                                GAeventTracking: GAeventTracking,
                                itemCount: itemsCount,
                                hidden: true,
                            };
                            categoryFiller.categorize(simpleItem, item.getCategoryId());
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return {
                    categories: categoryFiller.getTemplateData([
                        CategoryIds.Default,
                        CategoryIds.Reaction,
                        CategoryIds.Report,
                        CategoryIds.Pre_Match,
                    ]),
                };
            };
            return NewsfeedImpl;
        }());

        var CategoryFiller = /** @class */ (function() {
            function CategoryFiller(showMoreText, maxInCategory, expandedCategories) {
                this._container = {};
                this._showMoreText = showMoreText;
                this._maxInCategory = maxInCategory;
                this._expandedCategories = expandedCategories;
            }
            CategoryFiller.prototype.addCategory = function(category) {
                var categoryIsExpanded = false;
                if (this._expandedCategories.indexOf(category.id) > -1) {
                    categoryIsExpanded = true;
                }
                this._container[category.id] = new CategoryTemplate(category.id, category.title, category.analyticsName, this._showMoreText, this._maxInCategory, categoryIsExpanded);
                return this;
            };
            CategoryFiller.prototype.categorize = function(simpleItem, categoryId) {
                if (!(categoryId in this._container)) {
                    categoryId = CategoryIds.Default;
                }
                this._container[categoryId].addItem(simpleItem);
            };
            CategoryFiller.prototype.getTemplateData = function(orderKey) {
                var e_2, _a;
                var output = [];
                try {
                    for (var orderKey_1 = __values(orderKey), orderKey_1_1 = orderKey_1.next(); !orderKey_1_1.done; orderKey_1_1 = orderKey_1.next()) {
                        var categoryTemplateKey = orderKey_1_1.value;
                        if (categoryTemplateKey in this._container) {
                            var categoryTemplate = this._container[categoryTemplateKey];
                            output.push(categoryTemplate.getTemplateData());
                        }
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (orderKey_1_1 && !orderKey_1_1.done && (_a = orderKey_1.return)) _a.call(orderKey_1);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
                output = CategoryFiller._appendItemNumber(output);
                output = CategoryFiller._filterEmptyCategories(output);
                return output;
            };
            CategoryFiller._appendItemNumber = function(categoriesCrate) {
                var e_3, _a;
                var counter = 1;
                try {
                    for (var categoriesCrate_1 = __values(categoriesCrate), categoriesCrate_1_1 = categoriesCrate_1.next(); !categoriesCrate_1_1.done; categoriesCrate_1_1 = categoriesCrate_1.next()) {
                        var category = categoriesCrate_1_1.value;
                        category.rows.map(function(value) {
                            value["itemNumber"] = counter++;
                        });
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (categoriesCrate_1_1 && !categoriesCrate_1_1.done && (_a = categoriesCrate_1.return)) _a.call(categoriesCrate_1);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
                return categoriesCrate;
            };
            CategoryFiller._filterEmptyCategories = function(categoriesCrate) {
                return categoriesCrate.filter(function(item) {
                    return item.rows && Number(item.rows.length) !== 0;
                });
            };
            return CategoryFiller;
        }());
        var CategoryTemplate = /** @class */ (function() {
            function CategoryTemplate(id, title, analyticsName, showMoreText, maxInCategory, categoryIsExpanded) {
                this._rows = [];
                this._title = "";
                this._showMoreText = "";
                this._analyticsName = "";
                this._maxInCategory = 0;
                this._id = id;
                this._title = title;
                this._analyticsName = analyticsName;
                this._showMoreText = showMoreText;
                this._maxInCategory = maxInCategory;
                this._categoryIsExpanded = categoryIsExpanded;
            }
            CategoryTemplate.prototype.addItem = function(simpleItem) {
                var hidden;
                if (this._categoryIsExpanded) {
                    hidden = false;
                } else {
                    hidden = this._rows.length >= this._maxInCategory;
                }
                simpleItem["hidden"] = hidden;
                simpleItem["category"] = this._analyticsName;
                this._rows.push(simpleItem);
            };
            CategoryTemplate.prototype.getTemplateData = function() {
                return {
                    title: this._title,
                    rows: this._rows,
                    showMore: this._getShowMore(),
                    categoryId: this._id,
                };
            };
            CategoryTemplate.prototype._getShowMore = function() {
                if (this._categoryIsExpanded) {
                    return "";
                }
                return this._rows.length > this._maxInCategory ? this._showMoreText : "";
            };
            return CategoryTemplate;
        }());
        var ContainerImpl = /** @class */ (function() {
            function ContainerImpl() {
                this._items = [];
            }
            ContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            ContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return ContainerImpl;
        }());

        var ItemImpl = /** @class */ (function() {
            function ItemImpl(title, link, imageUrl, perex, published, providerName, categoryId, category) {
                this.title = title;
                this.link = link;
                this.imageUrl = imageUrl;
                this.perex = perex;
                this.published = published;
                this.providerName = providerName;
                this.categoryId = categoryId;
                this.category = category;
            }
            ItemImpl.prototype.getTitle = function() {
                return this.title;
            };
            ItemImpl.prototype.getLink = function() {
                return this.link;
            };
            ItemImpl.prototype.getImageUrl = function() {
                if (!this.imageUrl) {
                    return "";
                }
                return this.imageUrl;
            };
            ItemImpl.prototype.getPerex = function() {
                if (!this.perex) {
                    return "";
                }
                return this.perex;
            };
            ItemImpl.prototype.getPublished = function() {
                return this.published;
            };
            ItemImpl.prototype.getProviderName = function() {
                return this.providerName;
            };
            ItemImpl.prototype.getCategoryId = function() {
                return this.categoryId;
            };
            ItemImpl.prototype.getCategory = function() {
                return this.category;
            };
            ItemImpl.prototype.isEventItem = function() {
                return false;
            };
            return ItemImpl;
        }());

        var ItemBuilder = /** @class */ (function() {
            function ItemBuilder() {
                this._title = "";
                this._link = "";
                this._imageUrl = "";
                this._perex = "";
                this._published = 0;
                this._providerName = "";
                this._categoryId = -1;
                this._category = "";
            }
            ItemBuilder.prototype.setTitle = function(value) {
                this._title = value;
                return this;
            };
            ItemBuilder.prototype.setLink = function(value) {
                this._link = value;
                return this;
            };
            ItemBuilder.prototype.setImageUrl = function(value) {
                this._imageUrl = value;
                return this;
            };
            ItemBuilder.prototype.setPerex = function(value) {
                this._perex = value;
                return this;
            };
            ItemBuilder.prototype.setPublished = function(value) {
                this._published = value;
                return this;
            };
            ItemBuilder.prototype.setProviderName = function(value) {
                this._providerName = value;
                return this;
            };
            ItemBuilder.prototype.setCategoryId = function(value) {
                this._categoryId = value;
                return this;
            };
            ItemBuilder.prototype.setCategory = function(value) {
                this._category = value;
                return this;
            };
            ItemBuilder.prototype.build = function() {
                return new ItemImpl(this._title, this._link, this._imageUrl, this._perex, this._published, this._providerName, this._categoryId, this._category);
            };
            return ItemBuilder;
        }());

        var EventItemImpl = /** @class */ (function() {
            function EventItemImpl(finalScore, startTime, participants) {
                this._items = [];
                this.finalScore = finalScore;
                this.startTime = startTime;
                this.participants = participants;
            }
            EventItemImpl.prototype.getFinalScore = function() {
                return this.finalScore;
            };
            EventItemImpl.prototype.getStartTime = function() {
                return this.startTime;
            };
            EventItemImpl.prototype.getParticipants = function() {
                return this.participants;
            };
            EventItemImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            EventItemImpl.prototype.getItems = function() {
                return this._items;
            };
            EventItemImpl.prototype.setMoreEventItem = function(value) {
                this.moreEventItem = value;
                return this;
            };
            EventItemImpl.prototype.getMoreEventItem = function() {
                return this.moreEventItem;
            };
            EventItemImpl.prototype.isEventItem = function() {
                return true;
            };
            return EventItemImpl;
        }());

        var EventItemBuilder = /** @class */ (function() {
            function EventItemBuilder() {
                this.finalScore = "";
                this.homeScore = "";
                this.awayScore = "";
                this.startTime = 0;
                this.participants = [];
            }
            EventItemBuilder.prototype.setFinalScore = function(value) {
                this.finalScore = value;
                return this;
            };
            EventItemBuilder.prototype.setHomeScore = function(value) {
                this.homeScore = value;
                return this;
            };
            EventItemBuilder.prototype.setAwayScore = function(value) {
                this.awayScore = value;
                return this;
            };
            EventItemBuilder.prototype.setStartTime = function(value) {
                this.startTime = value;
                return this;
            };
            EventItemBuilder.prototype.addParticipant = function(value) {
                this.participants.push(value);
                return this;
            };
            EventItemBuilder.prototype.build = function() {
                var score = this.finalScore || this.homeScore + " - " + this.awayScore;
                return new EventItemImpl(score, this.startTime, this.participants);
            };
            return EventItemBuilder;
        }());

        var ParticipantEventItem;
        (function(ParticipantEventItem) {
            ParticipantEventItem.SIDE_HOME = "H";
            ParticipantEventItem.SIDE_AWAY = "A";
        })(ParticipantEventItem || (ParticipantEventItem = {}));
        var ParticipantEventItemImpl = /** @class */ (function() {
            function ParticipantEventItemImpl(type, side, imageUrl, name, winner) {
                this.type = type;
                this.side = side;
                this.imageUrl = imageUrl;
                this.name = name;
                this.winner = winner;
            }
            ParticipantEventItemImpl.prototype.getType = function() {
                return this.type;
            };
            ParticipantEventItemImpl.prototype.getSide = function() {
                return this.side;
            };
            ParticipantEventItemImpl.prototype.getImageUrl = function() {
                return this.imageUrl;
            };
            ParticipantEventItemImpl.prototype.getName = function() {
                return this.name;
            };
            ParticipantEventItemImpl.prototype.isWinner = function() {
                return this.winner;
            };
            return ParticipantEventItemImpl;
        }());

        var ParticipantEventItemBuilder = /** @class */ (function() {
            function ParticipantEventItemBuilder() {
                this.type = "";
                this.side = "";
                this.imageUrl = "";
                this.name = "";
                this.winner = false;
            }
            ParticipantEventItemBuilder.prototype.setType = function(value) {
                this.type = value;
                return this;
            };
            ParticipantEventItemBuilder.prototype.setSide = function(value) {
                this.side = value;
                return this;
            };
            ParticipantEventItemBuilder.prototype.setImageUrl = function(value) {
                this.imageUrl = value;
                return this;
            };
            ParticipantEventItemBuilder.prototype.setName = function(value) {
                this.name = value;
                return this;
            };
            ParticipantEventItemBuilder.prototype.setWinner = function(value) {
                this.winner = value;
                return this;
            };
            ParticipantEventItemBuilder.prototype.build = function() {
                return new ParticipantEventItemImpl(this.type, this.side, this.imageUrl, this.name, this.winner);
            };
            return ParticipantEventItemBuilder;
        }());

        var MoreEventItemImpl = /** @class */ (function() {
            function MoreEventItemImpl(id) {
                this.id = id;
            }
            MoreEventItemImpl.prototype.getId = function() {
                return this.id;
            };
            return MoreEventItemImpl;
        }());

        var MoreEventItemBuilder = /** @class */ (function() {
            function MoreEventItemBuilder() {
                this.id = "";
            }
            MoreEventItemBuilder.prototype.setId = function(value) {
                this.id = value;
                return this;
            };
            MoreEventItemBuilder.prototype.build = function() {
                return new MoreEventItemImpl(this.id);
            };
            return MoreEventItemBuilder;
        }());

        var NewsfeedFactory = /** @class */ (function() {
            function NewsfeedFactory() {}
            NewsfeedFactory.prototype.create = function(htmlTemplate, htmlTemplateName, newsfeedContainer, utilEnviroment, utilDate, utilConfig, utilTrans, expandedCategories) {
                return new NewsfeedImpl(htmlTemplate, htmlTemplateName, newsfeedContainer, utilEnviroment, utilDate, utilConfig, utilTrans, expandedCategories);
            };
            return NewsfeedFactory;
        }());



        /***/
    }),
    /* 5 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export MatchHistoryImpl */
        /* unused harmony export ContainerImpl */
        /* unused harmony export ScoreItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "c", function() {
            return ScoreItemBuilder;
        });
        /* unused harmony export RowItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return RowItemBuilder;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return MatchHistoryFactory;
        });
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        var DARTS_VALUE_180 = 180;
        var DARTS_VALUE_140 = 140;
        var MatchHistoryImpl = /** @class */ (function() {
            function MatchHistoryImpl(htmlTemplate, htmlTemplateName, tabContainer, sportId, utilTrans, sportList) {
                this._transLostServe = "";
                this._transCurrent = "";
                this._htmlTemplate = htmlTemplate;
                this._htmlTemplateName = htmlTemplateName;
                this._tabContainer = tabContainer;
                this._sportId = sportId;
                this._utilTrans = utilTrans;
                this._sportList = sportList;
                this._setTranslates();
            }
            MatchHistoryImpl.prototype.getItems = function() {
                return this._tabContainer.getItems();
            };
            MatchHistoryImpl.prototype.render = function() {
                var items = this.getItems();
                var isPreview = this._htmlTemplateName ===
                    cjs.dic.get("util_enviroment").getHtmlTemplate().TPL_DETAIL_MATCH_HISTORY_PREVIEW;
                if (items.length === 0) {
                    var content = "";
                    if (!isPreview) {
                        var contentTitle = this._utilTrans.translate("TRANS_DETAIL_INFORMATION_AVAILABLE_LATER");
                        content = '<div class="nodata-block">' + contentTitle + '</div><div class="spacer-block">&nbsp;</div>';
                    }
                    return content;
                }
                return this._htmlTemplate.render(this._htmlTemplateName, this._createHtmlTemplateData());
            };
            MatchHistoryImpl.prototype._setTranslates = function() {
                if (this._sportId == this._sportList.DARTS) {
                    this._transLostServe = this._utilTrans.translate("TRANS_DARTS_LOST_SERVE");
                    this._transCurrent = this._utilTrans.translate("TRANS_DARTS_CURRENT_LEG");
                }
                return this;
            };
            MatchHistoryImpl.prototype._getTextSpanHtml = function(text) {
                var roundPoints = Number(text);
                var titleString = "";
                var classString = "";
                var htmlText = "";
                var isSpecialText = false;
                if (this._sportId == this._sportList.DARTS) {
                    if (roundPoints == DARTS_VALUE_180) {
                        titleString = "TRANS_DARTS_STATISTICS_" + DARTS_VALUE_180;
                        classString = "darts-" + DARTS_VALUE_180;
                        htmlText = text;
                        isSpecialText = true;
                    } else if (roundPoints == DARTS_VALUE_140) {
                        titleString = "TRANS_DARTS_STATISTICS_" + DARTS_VALUE_140;
                        classString = "darts-" + DARTS_VALUE_140;
                        htmlText = text + "+";
                        isSpecialText = true;
                    }
                }
                if (isSpecialText) {
                    return ('<span class="ball-type-text ' +
                        classString +
                        '" title="' +
                        this._utilTrans.translate(titleString) +
                        '">' +
                        htmlText +
                        "</span>");
                } else {
                    return "";
                }
            };
            MatchHistoryImpl.prototype._createHtmlTemplateData = function() {
                var e_1, _a, e_2, _b;
                var tabs = [];
                var showMenu = false;
                try {
                    for (var _c = __values(this.getItems()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var tabContainerItem = _d.value;
                        var tab = {
                            index: tabContainerItem.getIndex(),
                            title: tabContainerItem.getLabel(),
                            tableTitle: tabContainerItem.getTableLabel(),
                            items: [],
                        };
                        if (tabContainerItem.getLabel() !== "") {
                            showMenu = true;
                        }
                        try {
                            for (var _e = (e_2 = void 0, __values(tabContainerItem.getRowItems())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var item = _f.value;
                                var row = {
                                    id: item.getId(),
                                    homeServe: item.getHomeServe(),
                                    awayServe: item.getAwayServe(),
                                    homeLostService: item.getHomeLostService(),
                                    awayLostService: item.getAwayLostService(),
                                    isCurrent: item.getIsCurrent(),
                                    isScore: item.getIsScore(),
                                    isPoints: item.getIsPoints(),
                                    homeScore: "",
                                    awayScore: "",
                                    homeIsChanged: false,
                                    awayIsChanged: false,
                                    scoreItems: [],
                                };
                                var scoreItems = item.getScoreItems();
                                if (item.getIsScore()) {
                                    var scoreItem = scoreItems.pop();
                                    if (scoreItem) {
                                        row["homeScore"] = scoreItem.getHomeScore();
                                        row["awayScore"] = scoreItem.getAwayScore();
                                        row["homeIsChanged"] = scoreItem.getHomeIsChanged();
                                        row["awayIsChanged"] = scoreItem.getAwayIsChanged();
                                    }
                                }
                                if (item.getIsPoints()) {
                                    for (var i in item.getScoreItems()) {
                                        var scoreItem = scoreItems[i];
                                        var score = {
                                            id: scoreItem.getId(),
                                            homeScore: scoreItem.getHomeScore(),
                                            awayScore: scoreItem.getAwayScore(),
                                            homeIsChanged: scoreItem.getHomeIsChanged(),
                                            awayIsChanged: scoreItem.getAwayIsChanged(),
                                            text: scoreItem.getText(),
                                            textSpanHtml: this._getTextSpanHtml(scoreItem.getText()),
                                            isLast: Number(i) == scoreItems.length - 1,
                                        };
                                        row.scoreItems.push(score);
                                    }
                                }
                                tab.items.push(row);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        tabs.push(tab);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                var data = {
                    tabs: tabs,
                    showMenu: showMenu,
                    transLostServe: this._transLostServe.toUpperCase(),
                    transCurrent: this._transCurrent.toUpperCase(),
                };
                return data;
            };
            return MatchHistoryImpl;
        }());

        var ContainerImpl = /** @class */ (function() {
            function ContainerImpl() {
                this._items = [];
            }
            ContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            ContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return ContainerImpl;
        }());

        var ScoreItemImpl = /** @class */ (function() {
            function ScoreItemImpl(id, homeScore, awayScore, homeIsChanged, awayIsChanged, text) {
                this._id = 1;
                this._homeScore = "";
                this._awayScore = "";
                this._homeIsChanged = false;
                this._awayIsChanged = false;
                this._text = "";
                this._id = id;
                this._homeScore = homeScore;
                this._awayScore = awayScore;
                this._homeIsChanged = homeIsChanged;
                this._awayIsChanged = awayIsChanged;
                this._text = text;
            }
            ScoreItemImpl.prototype.getId = function() {
                return this._id;
            };
            ScoreItemImpl.prototype.getHomeScore = function() {
                return this._homeScore;
            };
            ScoreItemImpl.prototype.getAwayScore = function() {
                return this._awayScore;
            };
            ScoreItemImpl.prototype.getHomeIsChanged = function() {
                return this._homeIsChanged;
            };
            ScoreItemImpl.prototype.getAwayIsChanged = function() {
                return this._awayIsChanged;
            };
            ScoreItemImpl.prototype.getText = function() {
                return this._text;
            };
            return ScoreItemImpl;
        }());

        var ScoreItemBuilder = /** @class */ (function() {
            function ScoreItemBuilder() {
                this._id = 1;
                this._homeScore = "";
                this._awayScore = "";
                this._homeIsChanged = false;
                this._awayIsChanged = false;
                this._text = "";
            }
            ScoreItemBuilder.prototype.setId = function(value) {
                this._id = value;
                return this;
            };
            ScoreItemBuilder.prototype.setScore = function(side, value, isChanged) {
                switch (side) {
                    case "1":
                        this._homeScore = value;
                        if (isChanged == "1") {
                            this._homeIsChanged = true;
                        }
                        break;
                    case "2":
                        this._awayScore = value;
                        if (isChanged == "1") {
                            this._awayIsChanged = true;
                        }
                        break;
                }
                return this;
            };
            ScoreItemBuilder.prototype.setText = function(value) {
                this._text = value;
                return this;
            };
            ScoreItemBuilder.prototype.build = function() {
                return new ScoreItemImpl(this._id, this._homeScore, this._awayScore, this._homeIsChanged, this._awayIsChanged, this._text);
            };
            return ScoreItemBuilder;
        }());

        var RowItemImpl = /** @class */ (function() {
            function RowItemImpl(id, homeServe, awayServe, homeLostService, awayLostService, isCurrent, isScore, isPoints) {
                this._id = 1;
                this._homeServe = false;
                this._awayServe = false;
                this._homeLostService = false;
                this._awayLostService = false;
                this._isCurrent = false;
                this._isPoints = false;
                this._isScore = false;
                this._scoreItems = [];
                this._id = id;
                this._homeServe = homeServe;
                this._awayServe = awayServe;
                this._homeLostService = homeLostService;
                this._awayLostService = awayLostService;
                this._isCurrent = isCurrent;
                this._isScore = isScore;
                this._isPoints = isPoints;
            }
            RowItemImpl.prototype.getId = function() {
                return this._id;
            };
            RowItemImpl.prototype.getHomeServe = function() {
                return this._homeServe;
            };
            RowItemImpl.prototype.getAwayServe = function() {
                return this._awayServe;
            };
            RowItemImpl.prototype.getHomeLostService = function() {
                return this._homeLostService;
            };
            RowItemImpl.prototype.getAwayLostService = function() {
                return this._awayLostService;
            };
            RowItemImpl.prototype.getIsCurrent = function() {
                return this._isCurrent;
            };
            RowItemImpl.prototype.getIsScore = function() {
                return this._isScore;
            };
            RowItemImpl.prototype.getIsPoints = function() {
                return this._isPoints;
            };
            RowItemImpl.prototype.addScoreItem = function(item) {
                this._scoreItems.push(item);
                return this;
            };
            RowItemImpl.prototype.getScoreItems = function() {
                return this._scoreItems;
            };
            return RowItemImpl;
        }());

        var RowItemBuilder = /** @class */ (function() {
            function RowItemBuilder() {
                this._id = 1;
                this._homeServe = false;
                this._awayServe = false;
                this._homeLostService = false;
                this._awayLostService = false;
                this._isCurrent = false;
                this._isScore = false;
                this._isPoints = false;
            }
            RowItemBuilder.prototype.setId = function(value) {
                this._id = value;
                return this;
            };
            RowItemBuilder.prototype.setService = function(value) {
                switch (value) {
                    case "1":
                        this._homeServe = true;
                        break;
                    case "2":
                        this._awayServe = true;
                        break;
                }
                return this;
            };
            RowItemBuilder.prototype.setLostService = function(value) {
                switch (value) {
                    case "1":
                        this._homeLostService = true;
                        break;
                    case "2":
                        this._awayLostService = true;
                        break;
                }
                return this;
            };
            RowItemBuilder.prototype.setIsCurrent = function(value) {
                this._isCurrent = value;
                return this;
            };
            RowItemBuilder.prototype.setIsScore = function(value) {
                this._isScore = value;
                return this;
            };
            RowItemBuilder.prototype.setIsPoints = function(value) {
                this._isPoints = value;
                return this;
            };
            RowItemBuilder.prototype.build = function() {
                return new RowItemImpl(this._id, this._homeServe, this._awayServe, this._homeLostService, this._awayLostService, this._isCurrent, this._isScore, this._isPoints);
            };
            return RowItemBuilder;
        }());

        var MatchHistoryFactory = /** @class */ (function() {
            function MatchHistoryFactory() {}
            MatchHistoryFactory.prototype.create = function(htmlTemplate, htmlTemplateName, tabContainer, sportId, utilTrans, sportList) {
                return new MatchHistoryImpl(htmlTemplate, htmlTemplateName, tabContainer, sportId, utilTrans, sportList);
            };
            return MatchHistoryFactory;
        }());



        /***/
    }),
    /* 6 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CommentHtmlFormatterImpl;
        });
        var __extends = (undefined && undefined.__extends) || (function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({
                            __proto__: []
                        }
                        instanceof Array && function(d, b) {
                            d.__proto__ = b;
                        }) ||
                    function(d, b) {
                        for (var p in b)
                            if (b.hasOwnProperty(p)) d[p] = b[p];
                    };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);

                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        })();
        var CommentHtmlFormatterImpl = /** @class */ (function() {
            function CommentHtmlFormatterImpl() {
                this._rules = {
                    b: new BasicElementFormatter("span", {
                        class: "text--bold"
                    }),
                    i: new BasicElementFormatter("span", {
                        class: "text--italic"
                    }),
                    s: new BasicElementFormatter("span", {
                        class: "text--strike"
                    }),
                    ul: new BasicElementFormatter("ul"),
                    li: new BasicElementFormatter("li"),
                    br: new EmptyElementFormatter("br"),
                    hr: new EmptyElementFormatter("hr"),
                    youtube: new YoutubeFormatter(),
                    url: new UrlFormatter(),
                };
            }
            CommentHtmlFormatterImpl.prototype.getComment = function(text) {
                for (var from in this._rules) {
                    text = this._rules[from].format(from, text);
                }
                return text;
            };
            return CommentHtmlFormatterImpl;
        }());

        var BaseFormatter = /** @class */ (function() {
            function BaseFormatter(element, attributes) {
                if (attributes === void 0) {
                    attributes = {};
                }
                this._element = element;
                this._attributes = attributes;
            }
            BaseFormatter.prototype._getMergedAttributes = function() {
                var attrToComment = "";
                var attr = "";
                for (var attr_1 in this._attributes) {
                    attrToComment += attr_1 + '="' + this._attributes[attr_1] + '" ';
                }
                if (attrToComment.trim().length > 0) {
                    attr = " " + attrToComment.trim();
                }
                return attr;
            };
            return BaseFormatter;
        }());
        var BasicElementFormatter = /** @class */ (function(_super) {
            __extends(BasicElementFormatter, _super);

            function BasicElementFormatter() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            BasicElementFormatter.prototype.format = function(sourceElement, text) {
                return text
                    .replace(new RegExp("\\[" + sourceElement + "\\]", "g"), "<" + (this._element + this._getMergedAttributes()) + ">")
                    .replace(new RegExp("\\[\\/" + sourceElement + "\\]", "g"), "</" + this._element + ">");
            };
            return BasicElementFormatter;
        }(BaseFormatter));
        var EmptyElementFormatter = /** @class */ (function(_super) {
            __extends(EmptyElementFormatter, _super);

            function EmptyElementFormatter() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            EmptyElementFormatter.prototype.format = function(sourceElement, text) {
                return text.replace(new RegExp("\\[" + sourceElement + "\\]", "g"), "<" + this._element + "/>");
            };
            return EmptyElementFormatter;
        }(BaseFormatter));
        var YoutubeFormatter = /** @class */ (function(_super) {
            __extends(YoutubeFormatter, _super);

            function YoutubeFormatter(element, attributes) {
                if (attributes === void 0) {
                    attributes = {};
                }
                var _this = this;
                element = "iframe";
                _this = _super.call(this, element, attributes) || this;
                _this._attributes.width = "100%";
                _this._attributes.height = "100%";
                _this._attributes.frameborder = "0";
                _this._attributes.allow = "autoplay; encrypted-media";
                _this._attributes.allowfullscreen = "";
                _this._attributes.src = "https://www.youtube.com/embed/##VIDEOID##?rel=0";
                return _this;
            }
            YoutubeFormatter.prototype.format = function(sourceElement, text) {
                return text.replace(new RegExp("(\\[" + sourceElement + "\\])(.*)(\\[\\/" + sourceElement + "\\])", "g"), "<div class=\"youtube-wrapper\"><" + (this._element +
                    this._getMergedAttributes().replace("##VIDEOID##", "$2")) + "></" + this._element + "></div>");
            };
            return YoutubeFormatter;
        }(BaseFormatter));
        var UrlFormatter = /** @class */ (function(_super) {
            __extends(UrlFormatter, _super);

            function UrlFormatter(element, attributes) {
                if (attributes === void 0) {
                    attributes = {};
                }
                var _this = this;
                element = "a";
                _this = _super.call(this, element, attributes) || this;
                _this._attributes.href = "##LINK##";
                _this._attributes.target = "_blank";
                return _this;
            }
            UrlFormatter.prototype.format = function(sourceElement, text) {
                return text.replace(new RegExp("(\\[" + sourceElement + "=([^\\]]+)\\])(.*)(\\[\\/" + sourceElement + "\\])", "g"), "<" + (this._element + this._getMergedAttributes().replace("##LINK##", "$2")) + ">$3</" + this._element + ">");
            };
            return UrlFormatter;
        }(BaseFormatter));


        /***/
    }),
    /* 7 */
    /***/
    (function(module, exports) {

        var g;

        // This works in non-strict mode
        g = (function() {
            return this;
        })();

        try {
            // This works if eval is allowed (see CSP)
            g = g || new Function("return this")();
        } catch (e) {
            // This works if the window reference is available
            if (typeof window === "object") g = window;
        }

        // g can still be undefined, but nothing to do about it...
        // We return undefined, instead of nothing here, so it's
        // easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/
    }),
    /* 8 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventStageTypeList;
        });
        var EventStageTypeList;
        (function(EventStageTypeList) {
            EventStageTypeList[EventStageTypeList["SCHEDULED"] = 1] = "SCHEDULED";
            EventStageTypeList[EventStageTypeList["LIVE"] = 2] = "LIVE";
            EventStageTypeList[EventStageTypeList["FINISHED"] = 3] = "FINISHED";
            EventStageTypeList["TYPE_MAIN"] = "main";
            EventStageTypeList["TYPE_ALTER"] = "alter";
            EventStageTypeList["TYPE_MERGED"] = "merged";
        })(EventStageTypeList || (EventStageTypeList = {}));


        /***/
    }),
    /* 9 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(global) {
            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

            /* harmony default export */
            __webpack_exports__["a"] = (freeGlobal);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(7)))

        /***/
    }),
    /* 10 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(module) {
            /* harmony import */
            var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
            /* harmony import */
            var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38);



            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__[ /* default */ "a"].Buffer : undefined;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__[ /* default */ "a"];

            /* harmony default export */
            __webpack_exports__["a"] = (isBuffer);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(14)(module)))

        /***/
    }),
    /* 11 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export EventStatisticsImpl */
        /* unused harmony export ContainerImpl */
        /* unused harmony export ItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return ItemBuilder;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventStatisticsFactory;
        });
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        var EventStatisticsImpl = /** @class */ (function() {
            function EventStatisticsImpl(htmlTemplate, htmlTemplateName, tabContainer, utilTrans) {
                this._htmlTemplate = htmlTemplate;
                this._htmlTemplateName = htmlTemplateName;
                this._tabContainer = tabContainer;
                this._utilTrans = utilTrans;
            }
            EventStatisticsImpl.prototype.getItems = function() {
                return this._tabContainer.getItems();
            };
            EventStatisticsImpl.prototype.render = function() {
                var items = this.getItems();
                var isPreview = this._htmlTemplateName ===
                    cjs.dic.get("util_enviroment").getHtmlTemplate().TPL_DETAIL_EVENT_STATISTICS_PREVIEW;
                if (items.length === 0) {
                    var content = "";
                    if (!isPreview) {
                        var contentTitle = this._utilTrans.translate("TRANS_DETAIL_INFORMATION_AVAILABLE_LATER");
                        content = '<div class="nodata-block">' + contentTitle + '</div><div class="spacer-block">&nbsp;</div>';
                    }
                    return content;
                }
                return this._htmlTemplate.render(this._htmlTemplateName, this._createHtmlTemplateData());
            };
            EventStatisticsImpl.prototype._createHtmlTemplateData = function() {
                var e_1, _a, e_2, _b;
                var tabs = [];
                var showMenu = false;
                try {
                    for (var _c = __values(this.getItems()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var tabContainerItem = _d.value;
                        var tab = {
                            title: tabContainerItem.getLabel(),
                            items: [],
                        };
                        if (tabContainerItem.getLabel() != "") {
                            showMenu = true;
                        }
                        try {
                            for (var _e = (e_2 = void 0, __values(tabContainerItem.getItems())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var item = _f.value;
                                var simpleItem = {
                                    id: item.getId(),
                                    name: item.getName(),
                                    home: item.getHome(),
                                    away: item.getAway(),
                                    homePercent: item.getHomePercent(),
                                    awayPercent: item.getAwayPercent(),
                                    homeClass: item.getHomeClass(),
                                    awayClass: item.getAwayClass(),
                                };
                                tab.items.push(simpleItem);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        tabs.push(tab);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                var data = {
                    tabs: tabs,
                    showMenu: showMenu,
                    transMore: this._utilTrans.translate("TRANS_SHOW_MORE"),
                };
                return data;
            };
            return EventStatisticsImpl;
        }());

        var ContainerImpl = /** @class */ (function() {
            function ContainerImpl() {
                this._items = [];
            }
            ContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            ContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return ContainerImpl;
        }());

        var ItemImpl = /** @class */ (function() {
            function ItemImpl(id, name, home, away) {
                this._homePercent = 0;
                this._awayPercent = 0;
                this._homeClass = "stats-less";
                this._awayClass = "stats-less";
                this._id = id;
                this._name = name;
                this._home = home;
                this._away = away;
                this._prepareData();
            }
            ItemImpl.prototype._prepareData = function() {
                var re = new RegExp("^([0-9]+)(\\.*[0-9]*).*", "g");
                var homePercent = Number(this._home.replace(re, "$1$2"));
                var awayPercent = Number(this._away.replace(re, "$1$2"));
                if (homePercent == 0 && awayPercent == 0) {
                    homePercent = 50;
                    awayPercent = 50;
                    this._homeClass = "stats-none";
                    this._awayClass = "stats-none";
                }
                this._homePercent = Math.round(Number((homePercent / (homePercent + awayPercent)) * 100 * 100)) / 100;
                this._awayPercent = Math.round(Number((awayPercent / (homePercent + awayPercent)) * 100 * 100)) / 100;
                if (this._homePercent > this._awayPercent) {
                    this._homeClass = "stats-greater";
                }
                if (this._homePercent < this._awayPercent) {
                    this._awayClass = "stats-greater";
                }
            };
            ItemImpl.prototype.getId = function() {
                return this._id;
            };
            ItemImpl.prototype.getName = function() {
                return this._name;
            };
            ItemImpl.prototype.getHome = function() {
                return this._home;
            };
            ItemImpl.prototype.getAway = function() {
                return this._away;
            };
            ItemImpl.prototype.getHomePercent = function() {
                return this._homePercent;
            };
            ItemImpl.prototype.getAwayPercent = function() {
                return this._awayPercent;
            };
            ItemImpl.prototype.getHomeClass = function() {
                return this._homeClass;
            };
            ItemImpl.prototype.getAwayClass = function() {
                return this._awayClass;
            };
            return ItemImpl;
        }());

        var ItemBuilder = /** @class */ (function() {
            function ItemBuilder() {
                this._id = "";
                this._name = "";
                this._home = "";
                this._away = "";
            }
            ItemBuilder.prototype.setId = function(value) {
                this._id = value;
                return this;
            };
            ItemBuilder.prototype.setName = function(value) {
                this._name = value;
                return this;
            };
            ItemBuilder.prototype.setHome = function(value) {
                this._home = value;
                return this;
            };
            ItemBuilder.prototype.setAway = function(value) {
                this._away = value;
                return this;
            };
            ItemBuilder.prototype.build = function() {
                return new ItemImpl(this._id, this._name, this._home, this._away);
            };
            return ItemBuilder;
        }());

        var EventStatisticsFactory = /** @class */ (function() {
            function EventStatisticsFactory() {}
            EventStatisticsFactory.prototype.create = function(htmlTemplate, htmlTemplateName, tabContainer, utilTrans) {
                return new EventStatisticsImpl(htmlTemplate, htmlTemplateName, tabContainer, utilTrans);
            };
            return EventStatisticsFactory;
        }());



        /***/
    }),
    /* 12 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return Cricket;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return HtmlElementFactoryBuilder;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "c", function() {
            return TabRenderedCheckerBuilder;
        });
        var Cricket = /** @class */ (function() {
            function Cricket() {}
            Cricket.prototype.getModifiedConfigs = function(selectedTab, tabConfigs, tmpSelectedTab, tabRenderedChecker, htmlElementFactory) {
                var tabConfigsClone = tabConfigs.clone();
                var tabsWithSubtab = ["fall-of-wickets", "overs", "player-statistics", "commentary"];
                var tabConfig = tabConfigsClone.getConfigByTabIdent(tmpSelectedTab);
                if (tabsWithSubtab.indexOf(selectedTab) !== -1 && tabConfig) {
                    var subtabCount = Object.keys(tabConfig.getTabsRawData()).length;
                    var activeSubtab = subtabCount - 1;
                    // vybrana zalozka neexistuje, najdeme posledni k dispozici
                    var isCalculatedTabExist = tabRenderedChecker.isRendered(selectedTab, activeSubtab);
                    if (!isCalculatedTabExist) {
                        for (var lastExistTab = subtabCount; lastExistTab >= 0; lastExistTab--) {
                            var isTabExist = tabRenderedChecker.isRendered(selectedTab, lastExistTab);
                            if (isTabExist) {
                                activeSubtab = lastExistTab;
                                break;
                            }
                        }
                    }
                    var selectedTabIdent = tabConfig.getSelectedTabIdent();
                    var userSelectedTab = selectedTabIdent.replace("player_statistic", "statistic").replace("_", "-");
                    var isUserSelectedTab = htmlElementFactory.hasTab(selectedTab, userSelectedTab);
                    if (!isUserSelectedTab) {
                        tabConfig.setSelectedTabIdent(selectedTabIdent.replace(/[0-9]+_/, activeSubtab + "_"));
                    }
                }
                return tabConfigsClone;
            };
            return Cricket;
        }());

        var HtmlElementFactoryBuilder = /** @class */ (function() {
            function HtmlElementFactoryBuilder() {}
            HtmlElementFactoryBuilder.prototype.build = function() {
                return new HtmlElementFactoryImpl();
            };
            return HtmlElementFactoryBuilder;
        }());

        var HtmlElementFactoryImpl = /** @class */ (function() {
            function HtmlElementFactoryImpl() {}
            HtmlElementFactoryImpl.prototype.hasTab = function(tabName, subtabName) {
                return document.querySelectorAll("li[id^=" + tabName + "-" + subtabName + "]").length != 0;
            };
            HtmlElementFactoryImpl.prototype.getText = function(selectorPart) {
                var _a, _b;
                return (_b = (_a = document.querySelector("li[id^=" + selectorPart + "-0] span a")) === null || _a === void 0 ? void 0 : _a.textContent) !== null && _b !== void 0 ? _b : "";
            };
            return HtmlElementFactoryImpl;
        }());
        var TabRenderedCheckerBuilder = /** @class */ (function() {
            function TabRenderedCheckerBuilder() {}
            TabRenderedCheckerBuilder.prototype.build = function() {
                return new TabRenderedCheckerImpl();
            };
            return TabRenderedCheckerBuilder;
        }());

        var TabRenderedCheckerImpl = /** @class */ (function() {
            function TabRenderedCheckerImpl() {}
            TabRenderedCheckerImpl.prototype.isRendered = function(tab, subtab) {
                return document.querySelectorAll("li[id^=" + tab + "-" + subtab + "]").length != 0;
            };
            return TabRenderedCheckerImpl;
        }());


        /***/
    }),
    /* 13 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export ScoreImpl */
        /* unused harmony export ScorePartImpl */
        /* unused harmony export HtmlRenderer */
        /* unused harmony export HtmlDetailHeaderRenderer */
        /* unused harmony export DataInputCricketScore */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "c", function() {
            return InputBoundaryForEventItem;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return InputBoundaryForDetail;
        });
        /* unused harmony export CricketScoreImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CricketScoreBuilder;
        });
        /* harmony import */
        var _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
        /* harmony import */
        var _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);


        var ScoreImpl = /** @class */ (function() {
            function ScoreImpl() {}
            ScoreImpl.prototype.setFirstPart = function(value) {
                this._firstPart = value;
                return this;
            };
            ScoreImpl.prototype.getFirstPart = function() {
                return this._firstPart;
            };
            ScoreImpl.prototype.setSecondPart = function(value) {
                this._secondPart = value;
                return this;
            };
            ScoreImpl.prototype.getSecondPart = function() {
                return this._secondPart;
            };
            ScoreImpl.prototype.setIsEventStageFinished = function(value) {
                this._isEventStageFinished = value;
                return this;
            };
            ScoreImpl.prototype.isEventStageFinished = function() {
                return this._isEventStageFinished;
            };
            return ScoreImpl;
        }());

        var ScorePartImpl = /** @class */ (function() {
            function ScorePartImpl() {
                this._runs = 0;
                this._wickets = null;
                this._declared = false;
                this._oversAndBalls = null;
                this._cssClass = "";
            }
            ScorePartImpl.prototype.setRuns = function(runs) {
                this._runs = runs;
                return this;
            };
            ScorePartImpl.prototype.setIsDeclared = function(value) {
                this._declared = value;
                return this;
            };
            ScorePartImpl.prototype.setOversAndBalls = function(value) {
                this._oversAndBalls = value;
                return this;
            };
            ScorePartImpl.prototype.setWickets = function(value) {
                this._wickets = value;
                return this;
            };
            ScorePartImpl.prototype.setCssClass = function(value) {
                this._cssClass = value;
                return this;
            };
            ScorePartImpl.prototype.getRuns = function() {
                return this._runs;
            };
            ScorePartImpl.prototype.getWickets = function() {
                return this._wickets;
            };
            ScorePartImpl.prototype.isDeclared = function() {
                return this._declared;
            };
            ScorePartImpl.prototype.getDeclared = function() {
                return this.isDeclared() ? "d" : "";
            };
            ScorePartImpl.prototype.getOversAndBalls = function() {
                return this._oversAndBalls;
            };
            ScorePartImpl.prototype.getOversAndBallsWithOv = function() {
                var oversAndBalls = this.getOversAndBalls();
                return oversAndBalls ? oversAndBalls + " ov" : "";
            };
            ScorePartImpl.prototype.getCssClass = function() {
                return this._cssClass;
            };
            ScorePartImpl.prototype.isValid = function() {
                var value = this.getRuns() || this.getOversAndBalls();
                return !!value;
            };
            return ScorePartImpl;
        }());

        var HtmlRenderer = /** @class */ (function() {
            function HtmlRenderer() {}
            HtmlRenderer.prototype.getName = function() {
                return HtmlRenderer.NAME;
            };
            HtmlRenderer.prototype.render = function(cricketScore) {
                var firstPart = this._renderPart(cricketScore.getFirstPart());
                var secondPart = this._renderPart(cricketScore.getSecondPart());
                var html = firstPart;
                if (secondPart) {
                    html += " & " + secondPart;
                }
                return html;
            };
            HtmlRenderer.prototype._renderPart = function(cricketScorePart) {
                var fullScore = "";
                if (cricketScorePart.isValid()) {
                    var cssClass = cricketScorePart.getCssClass();
                    var runs = cricketScorePart.getRuns();
                    var wickets = cricketScorePart.getWickets();
                    var wicketsFormatted = wickets !== null ? "/" + wickets : "";
                    var declared = cricketScorePart.getDeclared();
                    var oversAndBalls = cricketScorePart.getOversAndBalls();
                    fullScore += "<span class=\"" + cssClass.trim() + "\">" + runs + wicketsFormatted + declared;
                    fullScore += oversAndBalls ? " (" + oversAndBalls + ")" : "";
                    fullScore += "</span>";
                }
                return fullScore;
            };
            HtmlRenderer.NAME = "html";
            return HtmlRenderer;
        }());

        var HtmlDetailHeaderRenderer = /** @class */ (function() {
            function HtmlDetailHeaderRenderer() {}
            HtmlDetailHeaderRenderer.prototype.getName = function() {
                return HtmlDetailHeaderRenderer.NAME;
            };
            HtmlDetailHeaderRenderer.prototype.render = function(cricketScore) {
                var firstPart = this._renderPart(cricketScore.getFirstPart());
                var secondPart = this._renderPart(cricketScore.getSecondPart());
                var noScoreAvailable = !firstPart && !secondPart;
                var html;
                if (cricketScore.isEventStageFinished() || noScoreAvailable) {
                    html = '<span class="scoreboard-divider">-</span>';
                } else if (secondPart) {
                    html = secondPart;
                } else {
                    html = firstPart;
                }
                return html;
            };
            HtmlDetailHeaderRenderer.prototype._renderPart = function(cricketScorePart) {
                var fullScore = "";
                if (cricketScorePart.isValid()) {
                    var cssClass = cricketScorePart.getCssClass();
                    var runs = cricketScorePart.getRuns();
                    var wickets = cricketScorePart.getWickets();
                    var wicketsFormatted = wickets !== null ? "/" + wickets : "";
                    var declared = cricketScorePart.getDeclared();
                    var oversAndBalls = cricketScorePart.getOversAndBallsWithOv();
                    fullScore += "<span class=\"scoreboard " + cssClass.trim() + "\">" + runs + wicketsFormatted + declared + "</span>";
                    fullScore += "<br />";
                    fullScore += "<span class=\"scoreboard-overs " + cssClass.trim() + "\">" + (oversAndBalls ? "(" + oversAndBalls + ")" : "") + "</span>";
                }
                return fullScore;
            };
            HtmlDetailHeaderRenderer.NAME = "htmlDetailHeader";
            return HtmlDetailHeaderRenderer;
        }());

        var DataInputCricketScore = /** @class */ (function() {
            function DataInputCricketScore() {}
            DataInputCricketScore.prototype.setEventStage = function(value) {
                this._eventStage = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeRunsFirstInning = function(value) {
                this._homeRunsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeRunsSecondInning = function(value) {
                this._homeRunsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeWicketsFirstInning = function(value) {
                this._homeWicketsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeWicketsSecondInning = function(value) {
                this._homeWicketsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeDeclaredFirstInning = function(value) {
                this._homeDeclaredFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeDeclaredSecondInning = function(value) {
                this._homeDeclaredSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeOversAndBallsFirstInning = function(value) {
                this._homeOversAndBallsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setHomeOversAndBallsSecondInning = function(value) {
                this._homeOversAndBallsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayRunsFirstInning = function(value) {
                this._awayRunsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayRunsSecondInning = function(value) {
                this._awayRunsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayWicketsFirstInning = function(value) {
                this._awayWicketsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayWicketsSecondInning = function(value) {
                this._awayWicketsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayDeclaredFirstInning = function(value) {
                this._awayDeclaredFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayDeclaredSecondInning = function(value) {
                this._awayDeclaredSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayOversAndBallsFirstInning = function(value) {
                this._awayOversAndBallsFirstInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setAwayOversAndBallsSecondInning = function(value) {
                this._awayOversAndBallsSecondInning = value;
                return this;
            };
            DataInputCricketScore.prototype.setCricketTypeId = function(value) {
                this._cricketTypeId = value;
                return this;
            };
            DataInputCricketScore.prototype.setService = function(value) {
                this._service = value;
                return this;
            };
            DataInputCricketScore.prototype.getEventStage = function() {
                return this._eventStage;
            };
            DataInputCricketScore.prototype.getHomeRunsFirstInning = function() {
                return this._homeRunsFirstInning;
            };
            DataInputCricketScore.prototype.getHomeRunsSecondInning = function() {
                return this._homeRunsSecondInning;
            };
            DataInputCricketScore.prototype.getHomeWicketsFirstInning = function() {
                return this._homeWicketsFirstInning;
            };
            DataInputCricketScore.prototype.getHomeWicketsSecondInning = function() {
                return this._homeWicketsSecondInning;
            };
            DataInputCricketScore.prototype.getHomeDeclaredFirstInning = function() {
                return this._homeDeclaredFirstInning;
            };
            DataInputCricketScore.prototype.getHomeDeclaredSecondInning = function() {
                return this._homeDeclaredSecondInning;
            };
            DataInputCricketScore.prototype.getHomeOversAndBallsFirstInning = function() {
                return this._homeOversAndBallsFirstInning;
            };
            DataInputCricketScore.prototype.getHomeOversAndBallsSecondInning = function() {
                return this._homeOversAndBallsSecondInning;
            };
            DataInputCricketScore.prototype.getAwayRunsFirstInning = function() {
                return this._awayRunsFirstInning;
            };
            DataInputCricketScore.prototype.getAwayRunsSecondInning = function() {
                return this._awayRunsSecondInning;
            };
            DataInputCricketScore.prototype.getAwayWicketsFirstInning = function() {
                return this._awayWicketsFirstInning;
            };
            DataInputCricketScore.prototype.getAwayWicketsSecondInning = function() {
                return this._awayWicketsSecondInning;
            };
            DataInputCricketScore.prototype.getAwayDeclaredFirstInning = function() {
                return this._awayDeclaredFirstInning;
            };
            DataInputCricketScore.prototype.getAwayDeclaredSecondInning = function() {
                return this._awayDeclaredSecondInning;
            };
            DataInputCricketScore.prototype.getAwayOversAndBallsFirstInning = function() {
                return this._awayOversAndBallsFirstInning;
            };
            DataInputCricketScore.prototype.getAwayOversAndBallsSecondInning = function() {
                return this._awayOversAndBallsSecondInning;
            };
            DataInputCricketScore.prototype.getCricketTypeId = function() {
                return this._cricketTypeId;
            };
            DataInputCricketScore.prototype.getService = function() {
                return this._service;
            };
            return DataInputCricketScore;
        }());

        var InputBoundaryForEventItem = /** @class */ (function() {
            function InputBoundaryForEventItem(utilEnviroment) {
                this._utilEnviroment = utilEnviroment;
            }
            InputBoundaryForEventItem.prototype.setData = function(data) {
                this._dataInputCricketScore = new DataInputCricketScore();
                var feedIndexes = this._utilEnviroment.getFeedIndexes();
                this._dataInputCricketScore
                    .setEventStage(data.getStage())
                    .setHomeRunsFirstInning(data.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1))
                    .setHomeRunsSecondInning(data.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2))
                    .setHomeWicketsFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_FIRST_INNING))
                    .setHomeWicketsSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_SECOND_INNING))
                    .setHomeDeclaredFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING))
                    .setHomeDeclaredSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING))
                    .setHomeOversAndBallsFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_OVERS_FIRST_INNING))
                    .setHomeOversAndBallsSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_OVERS_SECOND_INNING))
                    .setAwayRunsFirstInning(data.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1))
                    .setAwayRunsSecondInning(data.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2))
                    .setAwayWicketsFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_FIRST_INNING))
                    .setAwayWicketsSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_SECOND_INNING))
                    .setAwayDeclaredFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING))
                    .setAwayDeclaredSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING))
                    .setAwayOversAndBallsFirstInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING))
                    .setAwayOversAndBallsSecondInning(data.getValue(feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING))
                    .setService(data.getService())
                    .setCricketTypeId(data.getCricketGameTypeId());
                return this;
            };
            InputBoundaryForEventItem.prototype.getDataInputCricketScore = function() {
                return this._dataInputCricketScore;
            };
            return InputBoundaryForEventItem;
        }());

        var InputBoundaryForDetail = /** @class */ (function() {
            function InputBoundaryForDetail(utilEnviroment) {
                this._utilEnviroment = utilEnviroment;
            }
            InputBoundaryForDetail.prototype.setData = function(data) {
                this.data = data;
                this._dataInputCricketScore = new DataInputCricketScore();
                var feedIndexes = this._utilEnviroment.getFeedIndexes();
                this._dataInputCricketScore
                    .setEventStage(this.getValue(feedIndexes.COMMONINDEXES_EVENT_STAGE_ID))
                    .setHomeRunsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_FIRST_INNING))
                    .setHomeRunsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_SECOND_INNING))
                    .setHomeWicketsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_FIRST_OUTS))
                    .setHomeWicketsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_SECOND_OUTS))
                    .setHomeDeclaredFirstInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING))
                    .setHomeDeclaredSecondInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING))
                    .setHomeOversAndBallsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_OVERS_FIRST_INNING))
                    .setHomeOversAndBallsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_HOME_CRICKET_OVERS_SECOND_INNING))
                    .setAwayRunsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_FIRST_INNING))
                    .setAwayRunsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_SECOND_INNING))
                    .setAwayWicketsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_FIRST_OUTS))
                    .setAwayWicketsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_SECOND_OUTS))
                    .setAwayDeclaredFirstInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING))
                    .setAwayDeclaredSecondInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING))
                    .setAwayOversAndBallsFirstInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING))
                    .setAwayOversAndBallsSecondInning(this.getValue(feedIndexes.COMMONINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING))
                    .setService(this.getValue(feedIndexes.COMMONINDEXES_CURRENT_SERVICE_SIDE))
                    .setCricketTypeId(this.getValue(feedIndexes.SHAREDINDEXES_CRICKET_TYPE));
                return this;
            };
            InputBoundaryForDetail.prototype.getDataInputCricketScore = function() {
                return this._dataInputCricketScore;
            };
            InputBoundaryForDetail.prototype.getValue = function(paramName) {
                if (typeof this.data[paramName] !== "undefined") {
                    return this.data[paramName];
                }
                return null;
            };
            return InputBoundaryForDetail;
        }());

        var CricketScoreImpl = /** @class */ (function() {
            function CricketScoreImpl(utilTrans, utilSport, utilEnviroment) {
                this.utilTrans = utilTrans;
                this.utilSport = utilSport;
                this.utilEnviroment = utilEnviroment;
                this._availableRenderers = {};
                this.addRenderer(new HtmlRenderer());
                this.addRenderer(new HtmlDetailHeaderRenderer());
                this.setRenderer(HtmlRenderer.NAME);
            }
            CricketScoreImpl.prototype.setRenderer = function(rendererName) {
                if (this._availableRenderers[rendererName]) {
                    this._renderer = this._availableRenderers[rendererName];
                } else {
                    throw new ReferenceError("Renderer is not available.");
                }
            };
            CricketScoreImpl.prototype.addRenderer = function(renderer) {
                this._availableRenderers[renderer.getName()] = renderer;
            };
            CricketScoreImpl.prototype.render = function(dataInputCricketScore, away) {
                if (away === void 0) {
                    away = false;
                }
                if (this._renderer.getName() === HtmlDetailHeaderRenderer.NAME) {
                    away = dataInputCricketScore.getService() === 1;
                }
                var score = this.getScore(dataInputCricketScore, away);
                return this._renderer.render(score);
            };
            CricketScoreImpl.prototype.renderHome = function(dataInputCricketScore) {
                return this.render(dataInputCricketScore);
            };
            CricketScoreImpl.prototype.renderAway = function(dataInputCricketScore) {
                return this.render(dataInputCricketScore, true);
            };
            CricketScoreImpl.prototype.getScore = function(dataInputCricketScore, away) {
                this._dataInputCricketScore = dataInputCricketScore;
                var score = new ScoreImpl();
                score.setFirstPart(this._getDataPart(away));
                score.setSecondPart(this._getDataPart(away, false));
                score.setIsEventStageFinished(this._isEventStageFinished());
                return score;
            };
            CricketScoreImpl.prototype._getRuns = function(away, isFirstInning) {
                var runs;
                if (isFirstInning) {
                    runs = away ?
                        this._dataInputCricketScore.getAwayRunsFirstInning() :
                        this._dataInputCricketScore.getHomeRunsFirstInning();
                } else {
                    runs = away ?
                        this._dataInputCricketScore.getAwayRunsSecondInning() :
                        this._dataInputCricketScore.getHomeRunsSecondInning();
                }
                return runs !== null ? runs : 0;
            };
            CricketScoreImpl.prototype._getWickets = function(away, isFirstInning) {
                var wickets;
                var showNullWickets = false;
                var showTenWickets = false;
                if (isFirstInning) {
                    wickets = away ?
                        this._dataInputCricketScore.getAwayWicketsFirstInning() :
                        this._dataInputCricketScore.getHomeWicketsFirstInning();
                } else {
                    wickets = away ?
                        this._dataInputCricketScore.getAwayWicketsSecondInning() :
                        this._dataInputCricketScore.getHomeWicketsSecondInning();
                }
                if (this._isCricketTypeOdi() || this._isCricketTypeT20()) {
                    showTenWickets = true;
                    showNullWickets = true;
                } else {
                    showNullWickets = this._hasInningResultData(away, isFirstInning);
                }
                if (!wickets && showNullWickets) {
                    wickets = 0;
                } else if (wickets == 10 && !showTenWickets) {
                    wickets = null;
                }
                return wickets;
            };
            CricketScoreImpl.prototype._getOversAndBalls = function(away, isFirstInning) {
                var oversAndBalls = null;
                var showOversAndBalls = false;
                var isSameInning = this._isSameInning(isFirstInning);
                var isEventStageFinished = this._isEventStageFinished();
                if (this._isCricketTypeTest()) {
                    var isOnTheBat = this._isOnTheBat(away);
                    showOversAndBalls = isSameInning && isOnTheBat;
                    if (!showOversAndBalls && !isEventStageFinished && isOnTheBat) {
                        if (!isFirstInning || (isFirstInning && !this._hasSecondInningResult(away))) {
                            showOversAndBalls = true;
                        }
                    }
                } else if (this._isCricketTypeOdi() || this._isCricketTypeT20()) {
                    showOversAndBalls = true;
                }
                if (showOversAndBalls) {
                    oversAndBalls = this._getOversAndBallsRawData(isFirstInning, away);
                }
                return oversAndBalls;
            };
            CricketScoreImpl.prototype._isDeclared = function(away, isFirstInning) {
                var isDeclaredValue;
                if (isFirstInning) {
                    isDeclaredValue = away ?
                        this._dataInputCricketScore.getAwayDeclaredFirstInning() :
                        this._dataInputCricketScore.getHomeDeclaredFirstInning();
                } else {
                    isDeclaredValue = away ?
                        this._dataInputCricketScore.getAwayDeclaredSecondInning() :
                        this._dataInputCricketScore.getHomeDeclaredSecondInning();
                }
                return parseInt(isDeclaredValue) == 1;
            };
            CricketScoreImpl.prototype._isPlaying = function(away, isFirstInning) {
                var isPlaying = false;
                var isSameInning = this._isSameInning(isFirstInning);
                var isLiveStage = this._isFirstInning() || this._isSecondInning();
                var isPause = this._isEventStagePause();
                if (isLiveStage || isPause) {
                    var isOnTheBat = this._isOnTheBat(away);
                    var isTest = this._isCricketTypeTest();
                    var sameInningInTest = isTest && isSameInning;
                    if (sameInningInTest || !isTest) {
                        isPlaying = isOnTheBat;
                    } else if (isPause) {
                        if (!isFirstInning || (isFirstInning && !this._hasSecondInningResult(away))) {
                            isPlaying = isOnTheBat;
                        }
                    }
                }
                return isPlaying;
            };
            CricketScoreImpl.prototype._isOnTheBat = function(away) {
                return away ? this._hasHomeService() : this._hasAwayService();
            };
            CricketScoreImpl.prototype._isSameInning = function(isFirstInning) {
                return (isFirstInning && this._isFirstInning()) || (!isFirstInning && this._isSecondInning());
            };
            CricketScoreImpl.prototype._hasSecondInningResult = function(away) {
                var oversAndBalls = this._getOversAndBalls(away, false);
                return oversAndBalls !== null;
            };
            CricketScoreImpl.prototype._hasInningResultData = function(away, isFirstInning) {
                var oversAndBalls = this._getOversAndBallsRawData(isFirstInning, away);
                return oversAndBalls !== null;
            };
            CricketScoreImpl.prototype._getOversAndBallsRawData = function(isFirstInning, away) {
                var oversAndBalls = null;
                if (isFirstInning) {
                    oversAndBalls = away ?
                        this._dataInputCricketScore.getAwayOversAndBallsFirstInning() :
                        this._dataInputCricketScore.getHomeOversAndBallsFirstInning();
                } else {
                    oversAndBalls = away ?
                        this._dataInputCricketScore.getAwayOversAndBallsSecondInning() :
                        this._dataInputCricketScore.getHomeOversAndBallsSecondInning();
                }
                return oversAndBalls;
            };
            CricketScoreImpl.prototype._getDataPart = function(away, isFirstInning) {
                if (isFirstInning === void 0) {
                    isFirstInning = true;
                }
                var dataPart = new ScorePartImpl();
                if (!this._isScheduled()) {
                    dataPart.setRuns(this._getRuns(away, isFirstInning));
                    dataPart.setOversAndBalls(this._getOversAndBalls(away, isFirstInning));
                    dataPart.setCssClass(this._isPlaying(away, isFirstInning) ? "playing" : "");
                    dataPart.setIsDeclared(this._isDeclared(away, isFirstInning));
                    dataPart.setWickets(this._getWickets(away, isFirstInning));
                }
                return dataPart;
            };
            CricketScoreImpl.prototype._isFirstInning = function() {
                return this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].FIRST_INNING;
            };
            CricketScoreImpl.prototype._isSecondInning = function() {
                return this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].SECOND_INNING;
            };
            CricketScoreImpl.prototype._isPause = function() {
                return this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].PAUSE;
            };
            CricketScoreImpl.prototype._hasHomeService = function() {
                return this._dataInputCricketScore.getService() === 1;
            };
            CricketScoreImpl.prototype._hasAwayService = function() {
                return this._dataInputCricketScore.getService() === 2;
            };
            CricketScoreImpl.prototype._isCricketTypeTest = function() {
                return this._dataInputCricketScore.getCricketTypeId() === _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__[ /* CricketTypesList */ "a"].TEST;
            };
            CricketScoreImpl.prototype._isCricketTypeOdi = function() {
                return this._dataInputCricketScore.getCricketTypeId() === _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__[ /* CricketTypesList */ "a"].ODI;
            };
            CricketScoreImpl.prototype._isCricketTypeT20 = function() {
                return this._dataInputCricketScore.getCricketTypeId() === _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__[ /* CricketTypesList */ "a"].T20;
            };
            CricketScoreImpl.prototype._isEventStageFinished = function() {
                return this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].FINISHED;
            };
            CricketScoreImpl.prototype._isEventStagePause = function() {
                return (this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].PAUSE ||
                    this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].TEA ||
                    this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].LUNCH);
            };
            CricketScoreImpl.prototype._isScheduled = function() {
                return this._dataInputCricketScore.getEventStage() === _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].SCHEDULED;
            };
            return CricketScoreImpl;
        }());

        var CricketScoreBuilder = /** @class */ (function() {
            function CricketScoreBuilder(utilTrans, utilSport, utilEnviroment) {
                this._utilTrans = utilTrans;
                this._utilSport = utilSport;
                this._utilEnviroment = utilEnviroment;
            }
            CricketScoreBuilder.prototype.build = function() {
                return new CricketScoreImpl(this._utilTrans, this._utilSport, this._utilEnviroment);
            };
            return CricketScoreBuilder;
        }());



        /***/
    }),
    /* 14 */
    /***/
    (function(module, exports) {

        module.exports = function(originalModule) {
            if (!originalModule.webpackPolyfill) {
                var module = Object.create(originalModule);
                // module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function() {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function() {
                        return module.i;
                    }
                });
                Object.defineProperty(module, "exports", {
                    enumerable: true
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };


        /***/
    }),
    /* 15 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export BaseballExtraRowDataImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return BaseballExtraRowDataImplBuilder;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return BaseballExtraRow;
        });
        /* harmony import */
        var _react_lib_lists_EventStageTypeList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

        var BaseballExtraRowDataImpl = /** @class */ (function() {
            function BaseballExtraRowDataImpl(usStyleWinLossMark, eventStageType, winner, ftWinner, homePitcher, awayPitcher, home3CharName, away3CharName) {
                this._usStyleWinLossMark = usStyleWinLossMark;
                this._eventStageType = eventStageType;
                this._winner = winner;
                this._ftWinner = ftWinner;
                this._homePitcher = homePitcher;
                this._awayPitcher = awayPitcher;
                this._home3CharName = home3CharName;
                this._away3CharName = away3CharName;
            }
            BaseballExtraRowDataImpl.prototype.getUsStyleWinLossMark = function() {
                return this._usStyleWinLossMark;
            };
            BaseballExtraRowDataImpl.prototype.getEventStageType = function() {
                return this._eventStageType;
            };
            BaseballExtraRowDataImpl.prototype.getWinner = function() {
                return this._winner;
            };
            BaseballExtraRowDataImpl.prototype.getFtWinner = function() {
                return this._ftWinner;
            };
            BaseballExtraRowDataImpl.prototype.getHomePitcher = function() {
                return this._homePitcher;
            };
            BaseballExtraRowDataImpl.prototype.getAwayPitcher = function() {
                return this._awayPitcher;
            };
            BaseballExtraRowDataImpl.prototype.getHome3CharName = function() {
                return this._home3CharName;
            };
            BaseballExtraRowDataImpl.prototype.getAway3CharName = function() {
                return this._away3CharName;
            };
            return BaseballExtraRowDataImpl;
        }());

        var BaseballExtraRowDataImplBuilder = /** @class */ (function() {
            function BaseballExtraRowDataImplBuilder() {
                this._usStyleWinLossMark = false;
                this._eventStageType = 0;
                this._winner = 0;
                this._ftWinner = 0;
                this._homePitcher = "";
                this._awayPitcher = "";
                this._home3CharName = "";
                this._away3CharName = "";
            }
            BaseballExtraRowDataImplBuilder.prototype.setUsStyleWinLossMark = function(usStyleWinLossMark) {
                this._usStyleWinLossMark = usStyleWinLossMark;
                return this;
            };
            BaseballExtraRowDataImplBuilder.prototype.setEventItemData = function(eventItem) {
                this._eventStageType = eventItem.getStageType();
                this._winner = eventItem.getWinner();
                this._ftWinner = eventItem.getFtWinner();
                this._homePitcher = eventItem.getHomePitcher();
                this._awayPitcher = eventItem.getAwayPitcher();
                this._home3CharName = eventItem.getHome3CharName();
                this._away3CharName = eventItem.getAway3CharName();
                return this;
            };
            BaseballExtraRowDataImplBuilder.prototype.build = function() {
                return new BaseballExtraRowDataImpl(this._usStyleWinLossMark, this._eventStageType, this._winner, this._ftWinner, this._homePitcher, this._awayPitcher, this._home3CharName, this._away3CharName);
            };
            return BaseballExtraRowDataImplBuilder;
        }());

        var BaseballExtraRow = /** @class */ (function() {
            function BaseballExtraRow(utilTrans) {
                this._utilTrans = utilTrans;
            }
            BaseballExtraRow.prototype.getSentence = function(baseballExtraRowData) {
                var homePitcherExtraInfo = "";
                var awayPitcherExtraInfo = "";
                var homePitcherIndex = 0;
                var awayPitcherIndex = 1;
                var winMark = this._utilTrans.translate("TRANS_WIN_SHORT");
                var lossMark = this._utilTrans.translate("TRANS_LOST_SHORT");
                var homeWin = "";
                var awayWin = "";
                var content = [];
                if (baseballExtraRowData.getEventStageType() == _react_lib_lists_EventStageTypeList__WEBPACK_IMPORTED_MODULE_0__[ /* EventStageTypeList */ "a"].FINISHED) {
                    if (baseballExtraRowData.getUsStyleWinLossMark()) {
                        if (baseballExtraRowData.getWinner() == 1) {
                            homePitcherExtraInfo = winMark + ": ";
                            awayPitcherExtraInfo = lossMark + ": ";
                        } else if (baseballExtraRowData.getWinner() == 2) {
                            homePitcherExtraInfo = lossMark + ": ";
                            awayPitcherExtraInfo = winMark + ": ";
                            homePitcherIndex = 1;
                            awayPitcherIndex = 0;
                        }
                    } else {
                        if (baseballExtraRowData.getFtWinner() == 1) {
                            homeWin = winMark + ", ";
                            awayWin = lossMark + ", ";
                        } else if (baseballExtraRowData.getFtWinner() == 2) {
                            awayWin = winMark + ", ";
                            homeWin = lossMark + ", ";
                        }
                    }
                }
                var homePitcher = baseballExtraRowData.getHomePitcher();
                var awayPitcher = baseballExtraRowData.getAwayPitcher();
                if (homePitcher) {
                    var pitcher_data = JSON.parse(homePitcher);
                    if (!awayPitcher) {
                        homePitcherIndex = 0;
                    }
                    content[homePitcherIndex] =
                        homePitcherExtraInfo +
                        pitcher_data[0] +
                        " [" +
                        baseballExtraRowData.getHome3CharName() +
                        "] (" +
                        homeWin +
                        pitcher_data[1] +
                        "-" +
                        pitcher_data[2] +
                        ")";
                }
                if (awayPitcher) {
                    var pitcher_data = JSON.parse(awayPitcher);
                    if (!homePitcher) {
                        awayPitcherIndex = 0;
                    }
                    content[awayPitcherIndex] =
                        awayPitcherExtraInfo +
                        pitcher_data[0] +
                        " [" +
                        baseballExtraRowData.getAway3CharName() +
                        "] (" +
                        awayWin +
                        pitcher_data[1] +
                        "-" +
                        pitcher_data[2] +
                        ")";
                }
                return content.length ? this._utilTrans.translate("TRANS_BASEBALL_PITCHERS") + ": " + content.join(", ") : "";
            };
            return BaseballExtraRow;
        }());



        /***/
    }),
    /* 16 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CricketLiveCommentsFactory;
        });
        /* unused harmony export CricketLiveCommentsImpl */
        /* unused harmony export BallImpl */
        /* unused harmony export ContainerImpl */
        /* unused harmony export ItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return ItemBuilder;
        });
        /* harmony import */
        var _CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var CricketLiveCommentsFactory = /** @class */ (function() {
            function CricketLiveCommentsFactory() {}
            CricketLiveCommentsFactory.prototype.create = function(htmlTemplate, htmlTemplateName, tabContainer, utilTrans) {
                return new CricketLiveCommentsImpl(htmlTemplate, htmlTemplateName, tabContainer, utilTrans);
            };
            return CricketLiveCommentsFactory;
        }());

        var CricketLiveCommentsImpl = /** @class */ (function() {
            function CricketLiveCommentsImpl(htmlTemplate, htmlTemplateName, tabContainer, utilTrans) {
                this._htmlTemplate = htmlTemplate;
                this._htmlTemplateName = htmlTemplateName;
                this._tabContainer = tabContainer;
                this._utilTrans = utilTrans;
            }
            CricketLiveCommentsImpl.prototype.getItems = function() {
                return this._tabContainer.getItems();
            };
            CricketLiveCommentsImpl.prototype.render = function() {
                return this._htmlTemplate.render(this._htmlTemplateName, this._createHtmlTemplateData());
            };
            CricketLiveCommentsImpl.prototype._createHtmlTemplateData = function() {
                var e_1, _a, e_2, _b;
                var tabs = [];
                var noDataTitle = this._utilTrans.translate("TRANS_DETAIL_INFORMATION_AVAILABLE_LATER");
                var items = this.getItems();
                var hasData = items.length !== 0;
                try {
                    for (var _c = __values(this.getItems()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var tabContainerItem = _d.value;
                        var tab = {
                            title: tabContainerItem.getLabel(),
                            items: [],
                        };
                        try {
                            for (var _e = (e_2 = void 0, __values(tabContainerItem.getItems())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var item = _f.value;
                                var ball = item.getBall();
                                var simpleItem = {
                                    isSimpleComment: ball.isEmpty() || item.getIsAdditional(),
                                    number: ball.getNumber(),
                                    type: ball.getType(),
                                    value: ball.getValue(),
                                    comment: item.getFormattedComment(),
                                    overSentence: item.getOverSentence(),
                                };
                                tab.items.push(simpleItem);
                            }
                        } catch (e_2_1) {
                            e_2 = {
                                error: e_2_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_2) throw e_2.error;
                            }
                        }
                        tab.items = tab.items.reverse();
                        tabs.push(tab);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return {
                    tabs: tabs,
                    noDataTitle: noDataTitle,
                    hasData: hasData
                };
            };
            return CricketLiveCommentsImpl;
        }());

        var BallImpl = /** @class */ (function() {
            function BallImpl(number, type, value) {
                this._number = "";
                this._type = "";
                this._value = "";
                this._number = number;
                this._type = type;
                this._value = value;
            }
            BallImpl.prototype.getNumber = function() {
                return this._number;
            };
            BallImpl.prototype.getType = function() {
                return this._type;
            };
            BallImpl.prototype.getValue = function() {
                return this._value;
            };
            BallImpl.prototype.isEmpty = function() {
                return this._number === "" && this._type === "" && this._value === "";
            };
            return BallImpl;
        }());

        var ContainerImpl = /** @class */ (function() {
            function ContainerImpl() {
                this._items = [];
            }
            ContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            ContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return ContainerImpl;
        }());

        var ItemImpl = /** @class */ (function() {
            function ItemImpl(ball, comment, overSentence, isAdditional, commentFormatter) {
                this._comment = "";
                this._overSentence = "";
                this._isAdditional = "";
                this._ball = ball;
                this._comment = comment;
                this._overSentence = overSentence;
                this._isAdditional = isAdditional;
                this._commentFormatter = commentFormatter;
            }
            ItemImpl.prototype.getBall = function() {
                return this._ball;
            };
            ItemImpl.prototype.getComment = function() {
                return this._comment;
            };
            ItemImpl.prototype.getFormattedComment = function() {
                return this._commentFormatter.getComment(this.getComment());
            };
            ItemImpl.prototype.getOverSentence = function() {
                return this._overSentence;
            };
            ItemImpl.prototype.hasBall = function() {
                return this._ball.isEmpty() == false;
            };
            ItemImpl.prototype.getIsAdditional = function() {
                return this._isAdditional === "1";
            };
            return ItemImpl;
        }());

        var ItemBuilder = /** @class */ (function() {
            function ItemBuilder() {
                this._ballNumber = "";
                this._ballType = "";
                this._ballValue = "";
                this._comment = "";
                this._overSentence = "";
                this._isAdditional = "";
            }
            ItemBuilder.prototype.setBallNumber = function(value) {
                this._ballNumber = value;
                return this;
            };
            ItemBuilder.prototype.setBallType = function(value) {
                this._ballType = value;
                return this;
            };
            ItemBuilder.prototype.setBallValue = function(value) {
                this._ballValue = value;
                return this;
            };
            ItemBuilder.prototype.setComment = function(value) {
                this._comment = value;
                return this;
            };
            ItemBuilder.prototype.setOverSentence = function(value) {
                this._overSentence = value;
                return this;
            };
            ItemBuilder.prototype.setIsAdditional = function(value) {
                this._isAdditional = value;
                return this;
            };
            ItemBuilder.prototype.build = function() {
                return new ItemImpl(new BallImpl(this._ballNumber, this._ballType, this._ballValue), this._comment, this._overSentence, this._isAdditional, new _CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_0__[ /* CommentHtmlFormatterImpl */ "a"]());
            };
            return ItemBuilder;
        }());



        /***/
    }),
    /* 17 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return MatchCommentsFactory;
        });
        /* unused harmony export MatchCommentsImpl */
        /* unused harmony export ContainerImpl */
        /* unused harmony export ItemImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return ItemBuilder;
        });
        /* harmony import */
        var _CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var MatchCommentsFactory = /** @class */ (function() {
            function MatchCommentsFactory() {}
            MatchCommentsFactory.prototype.create = function(htmlTemplate, htmlTemplateName, tableContainer, utilTran) {
                return new MatchCommentsImpl(htmlTemplate, htmlTemplateName, tableContainer, utilTran);
            };
            return MatchCommentsFactory;
        }());

        var MatchCommentsImpl = /** @class */ (function() {
            function MatchCommentsImpl(htmlTemplate, htmlTemplateName, tableContainer, utilTran) {
                this._htmlTemplate = htmlTemplate;
                this._htmlTemplateName = htmlTemplateName;
                this._matchCommentTableContainer = tableContainer;
                this._utilTrans = utilTran;
            }
            MatchCommentsImpl.prototype.getItems = function() {
                return this._matchCommentTableContainer.getItems();
            };
            MatchCommentsImpl.prototype.render = function() {
                var items = this.getItems();
                if (items.length === 0) {
                    return "";
                }
                return this._htmlTemplate.render(this._htmlTemplateName, this._createHtmlTemplateData());
            };
            MatchCommentsImpl.prototype._createHtmlTemplateData = function() {
                var e_1, _a;
                var table = {
                    label: this._matchCommentTableContainer.getLabel(),
                    showMore: this._utilTrans.translate("TRANS_MATCH_PREVIEW_SHOW_MORE"),
                    rows: [],
                };
                try {
                    for (var _b = __values(this.getItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var tableContainerItem = _c.value;
                        var simpleItem = {
                            comment: tableContainerItem.getFormattedComment(),
                        };
                        table.rows.push(simpleItem);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return {
                    table: table
                };
            };
            return MatchCommentsImpl;
        }());

        var ContainerImpl = /** @class */ (function() {
            function ContainerImpl() {
                this._items = [];
            }
            ContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            ContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return ContainerImpl;
        }());

        var ItemImpl = /** @class */ (function() {
            function ItemImpl(comment, commentFormatter) {
                this._comment = "";
                this._comment = comment;
                this._commentFormatter = commentFormatter;
            }
            ItemImpl.prototype.getComment = function() {
                return this._comment;
            };
            ItemImpl.prototype.getFormattedComment = function() {
                return this._commentFormatter.getComment(this.getComment());
            };
            return ItemImpl;
        }());

        var ItemBuilder = /** @class */ (function() {
            function ItemBuilder() {
                this._comment = "";
            }
            ItemBuilder.prototype.setComment = function(value) {
                this._comment = value;
                return this;
            };
            ItemBuilder.prototype.build = function() {
                return new ItemImpl(this._comment, new _CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_0__[ /* CommentHtmlFormatterImpl */ "a"]());
            };
            return ItemBuilder;
        }());



        /***/
    }),
    /* 18 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export DataInputCricketExtraRow */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "b", function() {
            return InputBoundaryImpl;
        });
        /* unused harmony export CricketExtraRowImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return CricketExtraRowBuilder;
        });
        /* harmony import */
        var _react_lib_lists_EventStageTypeList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

        var DataInputCricketExtraRow = /** @class */ (function() {
            function DataInputCricketExtraRow() {}
            DataInputCricketExtraRow.prototype.setStageType = function(value) {
                this._stageType = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setBatsman = function(value) {
                this._batsman = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setBowler = function(value) {
                this._bowler = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setRecentOvers = function(value) {
                this._recentOvers = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setCricketSentence = function(value) {
                this._cricketSentence = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setLiveSentence = function(value) {
                this._liveSentence = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setHomeParticipantName = function(value) {
                this._homeParticipantName = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.setAwayParticipantName = function(value) {
                this._awayParticipantName = value;
                return this;
            };
            DataInputCricketExtraRow.prototype.getStageType = function() {
                return this._stageType;
            };
            DataInputCricketExtraRow.prototype.getBatsman = function() {
                return this._batsman;
            };
            DataInputCricketExtraRow.prototype.getBowler = function() {
                return this._bowler;
            };
            DataInputCricketExtraRow.prototype.getRecentOvers = function() {
                return this._recentOvers;
            };
            DataInputCricketExtraRow.prototype.getCricketSentence = function() {
                return this._cricketSentence;
            };
            DataInputCricketExtraRow.prototype.getLiveSentence = function() {
                return this._liveSentence;
            };
            DataInputCricketExtraRow.prototype.getHomeParticipantName = function() {
                return this._homeParticipantName;
            };
            DataInputCricketExtraRow.prototype.getAwayParticipantName = function() {
                return this._awayParticipantName;
            };
            return DataInputCricketExtraRow;
        }());

        var InputBoundaryImpl = /** @class */ (function() {
            function InputBoundaryImpl(utilEnviroment) {
                this._utilEnviroment = utilEnviroment;
            }
            InputBoundaryImpl.prototype.setCricketExtraRowRightData = function(data) {
                if (!this._dataInputDataInputCricketExtraRow) {
                    this._dataInputDataInputCricketExtraRow = new DataInputCricketExtraRow();
                }
                this._dataInputDataInputCricketExtraRow
                    .setStageType(data.getStageType())
                    .setBatsman(data.getBatsman())
                    .setBowler(data.getBowler())
                    .setRecentOvers(data.getRecentOvers());
                return this;
            };
            InputBoundaryImpl.prototype.setCricketSentenceData = function(data, homeParticipantName, awayParticipantName) {
                this.data = data;
                var feedIndexes = this._utilEnviroment.getFeedIndexes();
                if (!this._dataInputDataInputCricketExtraRow) {
                    this._dataInputDataInputCricketExtraRow = new DataInputCricketExtraRow();
                }
                this._dataInputDataInputCricketExtraRow
                    .setCricketSentence(this.getValue(feedIndexes.SHAREDINDEXES_CRICKET_SENTENCE))
                    .setLiveSentence(this.getValue(feedIndexes.SHAREDINDEXES_CRICKET_LIVE_SENTENCE))
                    .setHomeParticipantName(homeParticipantName)
                    .setAwayParticipantName(awayParticipantName);
                return this;
            };
            InputBoundaryImpl.prototype.getDataInputCricketExtraRow = function() {
                return this._dataInputDataInputCricketExtraRow;
            };
            InputBoundaryImpl.prototype.getValue = function(paramName) {
                if (typeof this.data[paramName] !== "undefined") {
                    return this.data[paramName];
                }
                return null;
            };
            return InputBoundaryImpl;
        }());

        var CricketExtraRowImpl = /** @class */ (function() {
            function CricketExtraRowImpl(utilTrans, utilSport, utilEnviroment) {
                this.utilTrans = utilTrans;
                this.utilSport = utilSport;
                this.utilEnviroment = utilEnviroment;
            }
            CricketExtraRowImpl.prototype.renderBatsman = function(dataInputCricketExtraRow) {
                if (dataInputCricketExtraRow.getBatsman()) {
                    return this.utilTrans.translate("TRANS_CRICKET_BATSMAN") + ": " + dataInputCricketExtraRow.getBatsman();
                } else {
                    return "";
                }
            };
            CricketExtraRowImpl.prototype.renderBowler = function(dataInputCricketExtraRow) {
                if (dataInputCricketExtraRow.getBowler()) {
                    return this.utilTrans.translate("TRANS_CRICKET_BOWLER") + ": " + dataInputCricketExtraRow.getBowler();
                } else {
                    return "";
                }
            };
            CricketExtraRowImpl.prototype.renderRecentOvers = function(dataInputCricketExtraRow) {
                if (dataInputCricketExtraRow.getRecentOvers()) {
                    var recentOvers = dataInputCricketExtraRow.getRecentOvers() + "";
                    return (this.utilTrans.translate("TRANS_CRICKET_RECENT_OVERS") +
                        ": " +
                        recentOvers.replace(/;/g, " ").replace(/\|/g, " | "));
                } else {
                    return "";
                }
            };
            CricketExtraRowImpl.prototype.renderCricketSentence = function(dataInputCricketExtraRow) {
                if (typeof dataInputCricketExtraRow.getCricketSentence() == "undefined") {
                    return "";
                }
                var sentence = String(dataInputCricketExtraRow.getCricketSentence()).split(";");
                if (sentence[0] == "e") {
                    return "";
                }
                var sentences = this.utilEnviroment.getSentences();
                var sentenceIndex = parseInt(sentence[0]);
                var content = sentences[sentenceIndex];
                if (typeof content != "string") {
                    return "";
                }
                delete sentence[0];
                var sentencesParts = this.utilEnviroment.getSentencesParts();
                for (var i in sentence) {
                    var part = sentence[i].split(":");
                    var partType = part[0];
                    switch (partType) {
                        case "team": {
                            var team = part[1] == "1" ?
                                dataInputCricketExtraRow.getHomeParticipantName() :
                                dataInputCricketExtraRow.getAwayParticipantName();
                            content = content.replace("[:" + partType + "]", team);
                            break;
                        }
                        case "num":
                            content = content.replace("[:" + partType + "]", part[1]);
                            break;
                        case "wonby": {
                            var partNumber = parseInt(part[1]);
                            content = content.replace("[:" + partType + "]", sentencesParts[partNumber]);
                            break;
                        }
                    }
                }
                return content;
            };
            CricketExtraRowImpl.prototype.renderLiveSentence = function(dataInputCricketExtraRow) {
                var liveSentence = dataInputCricketExtraRow.getLiveSentence();
                if (typeof liveSentence == "undefined" || liveSentence == "e" || liveSentence === null) {
                    return "";
                } else {
                    return liveSentence;
                }
            };
            CricketExtraRowImpl.prototype.renderCricketSentencePart = function(dataInputCricketExtraRow) {
                this._dataInputCricketExtraRow = dataInputCricketExtraRow;
                var sentence = this.renderCricketSentence(this._dataInputCricketExtraRow);
                if (!sentence) {
                    sentence = this.renderLiveSentence(this._dataInputCricketExtraRow);
                }
                return sentence ? "<span class=\"extra-info-left\">" + sentence + "</span>" : "";
            };
            CricketExtraRowImpl.prototype.renderRightPart = function(dataInputCricketExtraRow) {
                this._dataInputCricketExtraRow = dataInputCricketExtraRow;
                var content = "";
                if (this._isEventStageNotFinished()) {
                    content += this.renderBatsman(this._dataInputCricketExtraRow);
                    content += content && this._dataInputCricketExtraRow.getBowler() ? " | " : "";
                    content += this.renderBowler(this._dataInputCricketExtraRow);
                    content = this._getExtraRowRightHtml(content);
                    if (this.renderRecentOvers(this._dataInputCricketExtraRow)) {
                        content += content ? '<span class="extra-info-new-line"></span>' : "";
                        content += this._getExtraRowRightHtml(this.renderRecentOvers(this._dataInputCricketExtraRow));
                    }
                    return content;
                } else {
                    return this._getExtraRowRightHtml(content);
                }
            };
            CricketExtraRowImpl.prototype.renderFullPart = function(dataInputCricketExtraRow) {
                return (this.renderCricketSentencePart(dataInputCricketExtraRow) + this.renderRightPart(dataInputCricketExtraRow));
            };
            CricketExtraRowImpl.prototype._isEventStageNotFinished = function() {
                return this._dataInputCricketExtraRow.getStageType() !== _react_lib_lists_EventStageTypeList__WEBPACK_IMPORTED_MODULE_0__[ /* EventStageTypeList */ "a"].FINISHED;
            };
            CricketExtraRowImpl.prototype._getExtraRowRightHtml = function(content) {
                return content ? "<span class=\"extra-info-right\">" + content + "</span>" : "";
            };
            return CricketExtraRowImpl;
        }());

        var CricketExtraRowBuilder = /** @class */ (function() {
            function CricketExtraRowBuilder(utilTrans, utilSport, utilEnviroment) {
                this._utilTrans = utilTrans;
                this._utilSport = utilSport;
                this._utilEnviroment = utilEnviroment;
            }
            CricketExtraRowBuilder.prototype.build = function() {
                return new CricketExtraRowImpl(this._utilTrans, this._utilSport, this._utilEnviroment);
            };
            return CricketExtraRowBuilder;
        }());



        /***/
    }),
    /* 19 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TabsConfigImpl;
        });
        /* unused harmony export TabItemBuilder */
        var EVENT_TRACKING_ID = "detail-bookmark-click";
        var SUMMARY = "summary";
        var MATCH_SUMMARY = "match-summary";
        var MATCH_STATISTICS = "match-statistics";
        var LINEUPS = "lineups";
        var MATCH_HISTORY = "match-history";
        var ODDS_COMPARISON = "odds-comparison";
        var PLAYER_STATISTICS = "player-statistics";
        var H2H = "h2h";
        var HEAD_2_HEAD = "head-2-head";
        var STATS_DETAIL = "stats-detail";
        var VIDEO_DETAIL = "video-detail";
        var PHOTOREPORT = "photoreport";
        var PHOTOREPORT_DETAIL = "photoreport-detail";
        var NEWSFEED = "newsfeed";
        var LIVE_COMMENTARY = "live-comentary";
        var LIVE_TABLE = "live-table";
        var LIVE = "live";
        var FALL_OF_WICKETS = "fall-of-wickets";
        var OVERS = "overs";
        var STANDINGS = "standings";
        var DRAW = "draw";
        var HIGHLIGHTS = "highlights";
        var TIMELINE = "timeline";
        var STATISTICS = "statistics";
        var HISTORY = "history";
        var COMMENTARY = "commentary";
        var TRANS_FALL_OF_WICKETS = "TRANS_DETAIL_BOOKMARK_FALL_OF_WICKETS";
        var TRANS_H2H = "TRANS_DETAIL_BOOKMARK_H2H";
        var TRANS_HIGHLIGHTS = "TRANS_DETAIL_BOOKMARK_VIDEO_HIGHLIGHTS";
        var TRANS_LINEUPS = "TRANS_DETAIL_BOOKMARK_LINEUPS";
        var TRANS_LIVE_COMMENTARY = "TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY";
        var TRANS_LIVE_TABLE = "TRANS_DETAIL_BOOKMARK_LIVE_TABLE";
        var TRANS_MATCH_HISTORY = "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY";
        var TRANS_MATCH_HISTORY_DARTS = "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_DARTS";
        var TRANS_MATCH_HISTORY_TENNIS = "TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_TENNIS";
        var TRANS_MATCH_SUMMARY_2 = "TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY_2";
        var TRANS_NEWS_FEED = "TRANS_DETAIL_BOOKMARK_NEWS_FEED";
        var TRANS_ODDS = "TRANS_DETAIL_BOOKMARK_ODDS";
        var TRANS_OVERS = "TRANS_DETAIL_BOOKMARK_OVERS";
        var TRANS_PHOTOREPORT = "TRANS_DETAIL_BOOKMARK_PHOTOREPORT";
        var TRANS_PLAYER_STATISTICS = "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS";
        var TRANS_PLAYER_STATISTICS_CRICKET = "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_CRICKET";
        var TRANS_PLAYER_STATISTICS_GOLF = "TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS_GOLF";
        var TRANS_ROUND_RESULTS = "TRANS_DETAIL_BOOKMARK_ROUND_RESULTS";
        var TRANS_STANDINGS_DRAW = "TRANS_DETAIL_BOOKMARK_STANDINGS_DRAW";
        var TRANS_STANDINGS_TABLE = "TRANS_DETAIL_BOOKMARK_STANDINGS_TABLE";
        var TRANS_STATISTICS = "TRANS_DETAIL_BOOKMARK_STATISTICS";
        var TabsConfigImpl = /** @class */ (function() {
            function TabsConfigImpl() {
                this._list = [
                    new TabItemBuilder()
                    .setId(SUMMARY)
                    .setClass("li0")
                    .setTranslationKey("")
                    .setEventTrackingName(MATCH_SUMMARY)
                    .build(),
                    new TabItemBuilder()
                    .setId(ODDS_COMPARISON)
                    .setClass("li1")
                    .setTranslationKey(TRANS_ODDS)
                    .build(),
                    new TabItemBuilder()
                    .setId(HEAD_2_HEAD)
                    .setClass("li2")
                    .setTranslationKey(TRANS_H2H)
                    .setEventTrackingName(H2H)
                    .build(),
                    new TabItemBuilder()
                    .setId(LIVE_TABLE)
                    .setClass("li3")
                    .setName(LIVE)
                    .setTranslationKey(TRANS_LIVE_TABLE)
                    .setEventTrackingName(STATS_DETAIL)
                    .build(),
                    new TabItemBuilder()
                    .setId(STANDINGS)
                    .setClass("li4")
                    .setTranslationKey(TRANS_STANDINGS_TABLE)
                    .setEventTrackingName(STATS_DETAIL)
                    .build(),
                    new TabItemBuilder()
                    .setId(DRAW)
                    .setClass("li4")
                    .setTranslationKey(TRANS_STANDINGS_DRAW)
                    .setOpenStats(true)
                    .setEventTrackingName(STATS_DETAIL)
                    .build(),
                    new TabItemBuilder()
                    .setId(HIGHLIGHTS)
                    .setClass("li6")
                    .setTranslationKey(TRANS_HIGHLIGHTS)
                    .setEventTrackingName(VIDEO_DETAIL)
                    .build(),
                    new TabItemBuilder()
                    .setId(PHOTOREPORT)
                    .setClass("li7")
                    .setTranslationKey(TRANS_PHOTOREPORT)
                    .setEventTrackingName(PHOTOREPORT_DETAIL)
                    .build(),
                    new TabItemBuilder()
                    .setId(NEWSFEED)
                    .setClass("li8")
                    .setTranslationKey(TRANS_NEWS_FEED)
                    .build(),
                ];
                this._sportList = [
                    new TabConfigItemBuilder()
                    .setId("american-football")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("aussie-rules")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("baseball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS)
                        .setClass("li3")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("basketball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("cricket")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(COMMENTARY).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS)
                        .setClass("li2")
                        .setTranslationKey([TRANS_PLAYER_STATISTICS_CRICKET, TRANS_PLAYER_STATISTICS])
                        .build())
                    .addTabItem(TabItemBuilderFactory.make(FALL_OF_WICKETS).build())
                    .addTabItem(TabItemBuilderFactory.make(OVERS).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS)
                        .setClass("li5")
                        .build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS)
                        .setClass("li6")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("darts")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .setTranslationKey(TRANS_MATCH_HISTORY_DARTS)
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("hockey")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(COMMENTARY)
                        .setClass("li3")
                        .build())
                    .addTabItem(TabItemBuilderFactory.make(LIVE_TABLE).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("rugby-league")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("rugby-union")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("soccer")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(COMMENTARY)
                        .setClass("li3")
                        .build())
                    .addTabItem(TabItemBuilderFactory.make(LIVE_TABLE).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("handball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("badminton")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("futsal")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("floorball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("volleyball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("beach-volleyball")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("tennis")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY)
                        .setClass("li5")
                        .setTranslationKey(TRANS_MATCH_HISTORY_TENNIS)
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("snooker")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(HISTORY).build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("golf")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE)
                        .setTranslationKey(TRANS_ROUND_RESULTS)
                        .setDisplayTab("summary-player-card")
                        .build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS)
                        .setTranslationKey(TRANS_PLAYER_STATISTICS_GOLF)
                        .build())
                    .build(),
                    new TabConfigItemBuilder()
                    .setId("kabaddi")
                    .addTabItem(TabItemBuilderFactory.make(TIMELINE).build())
                    .addTabItem(TabItemBuilderFactory.make(STATISTICS).build())
                    .addTabItem(TabItemBuilderFactory.make(LINEUPS).build())
                    .addTabItem(TabItemBuilderFactory.make(PLAYER_STATISTICS).build())
                    .build(),
                ];
            }
            TabsConfigImpl.prototype.getList = function() {
                return this._list;
            };
            TabsConfigImpl.prototype.getSportList = function() {
                var list = {};
                this._sportList.forEach(function(tabSportItem) {
                    list[tabSportItem.getId()] = tabSportItem;
                });
                return list;
            };
            return TabsConfigImpl;
        }());

        var TabItemBuilderFactory = /** @class */ (function() {
            function TabItemBuilderFactory() {}
            TabItemBuilderFactory.make = function(tabItemId) {
                var tabItemBuilder = new TabItemBuilder().setId(tabItemId);
                switch (tabItemId) {
                    case TIMELINE:
                        tabItemBuilder
                            .setClass("li0")
                            .setName(SUMMARY)
                            .setTranslationKey(TRANS_MATCH_SUMMARY_2)
                            .setEventTrackingName(MATCH_SUMMARY);
                        break;
                    case STATISTICS:
                        tabItemBuilder
                            .setClass("li1")
                            .setTranslationKey(TRANS_STATISTICS)
                            .setEventTrackingName(MATCH_STATISTICS);
                        break;
                    case LINEUPS:
                        tabItemBuilder.setClass("li2").setTranslationKey(TRANS_LINEUPS);
                        break;
                    case HISTORY:
                        tabItemBuilder
                            .setClass("li2")
                            .setName(MATCH_HISTORY)
                            .setTranslationKey(TRANS_MATCH_HISTORY)
                            .setEventTrackingName(MATCH_HISTORY);
                        break;
                    case PLAYER_STATISTICS:
                        tabItemBuilder.setClass("li1").setTranslationKey(TRANS_PLAYER_STATISTICS);
                        break;
                    case COMMENTARY:
                        tabItemBuilder
                            .setClass("li1")
                            .setTranslationKey(TRANS_LIVE_COMMENTARY)
                            .setEventTrackingName(LIVE_COMMENTARY);
                        break;
                    case LIVE_TABLE:
                        tabItemBuilder
                            .setClass("li4")
                            .setName(LIVE)
                            .setTranslationKey(TRANS_LIVE_TABLE);
                        break;
                    case FALL_OF_WICKETS:
                        tabItemBuilder
                            .setClass("li3")
                            .setTranslationKey([TRANS_FALL_OF_WICKETS])
                            .build();
                        break;
                    case OVERS:
                        tabItemBuilder
                            .setClass("li4")
                            .setTranslationKey([TRANS_OVERS])
                            .build();
                        break;
                }
                return tabItemBuilder;
            };
            return TabItemBuilderFactory;
        }());
        var TabItemImpl = /** @class */ (function() {
            function TabItemImpl(_id, _class, _name, _translationKey, _displayTab, _openStats, _eventTracking, _newFeature) {
                this._id = _id;
                this._class = _class;
                this._name = _name;
                this._translationKey = _translationKey;
                this._displayTab = _displayTab;
                this._openStats = _openStats;
                this._eventTracking = _eventTracking;
                this._isNewFeature = _newFeature;
            }
            TabItemImpl.prototype.getClass = function() {
                return this._class;
            };
            TabItemImpl.prototype.getEventTracking = function() {
                return this._eventTracking;
            };
            TabItemImpl.prototype.getId = function() {
                return this._id;
            };
            TabItemImpl.prototype.getName = function() {
                return this._name;
            };
            TabItemImpl.prototype.getDisplayTab = function() {
                return this._displayTab;
            };
            TabItemImpl.prototype.openStats = function() {
                return this._openStats;
            };
            TabItemImpl.prototype.getTranslationKey = function() {
                return this._translationKey;
            };
            TabItemImpl.prototype.isNewFeature = function() {
                return this._isNewFeature;
            };
            return TabItemImpl;
        }());
        var TabItemBuilder = /** @class */ (function() {
            function TabItemBuilder() {
                this._id = "";
                this._class = "";
                this._name = "";
                this._translationKey = "";
                this._displayTab = "";
                this._openStats = false;
                this._eventTrackingName = "";
                this._isNewFeature = false;
            }
            TabItemBuilder.prototype.setId = function(id) {
                this._id = id;
                return this;
            };
            TabItemBuilder.prototype.setClass = function(_class) {
                this._class = _class;
                return this;
            };
            TabItemBuilder.prototype.setName = function(name) {
                this._name = name;
                return this;
            };
            TabItemBuilder.prototype.setTranslationKey = function(translationKey) {
                this._translationKey = translationKey;
                return this;
            };
            TabItemBuilder.prototype.setEventTrackingName = function(eventTrackingName) {
                this._eventTrackingName = eventTrackingName;
                return this;
            };
            TabItemBuilder.prototype.setDisplayTab = function(displayTab) {
                this._displayTab = displayTab;
                return this;
            };
            TabItemBuilder.prototype.setOpenStats = function(openStats) {
                this._openStats = openStats;
                return this;
            };
            TabItemBuilder.prototype.setIsNewFeature = function(isNewFeature) {
                this._isNewFeature = isNewFeature;
                return this;
            };
            TabItemBuilder.prototype.build = function() {
                if (!this._name) {
                    this.setName(this._id);
                }
                if (!this._eventTrackingName) {
                    this.setEventTrackingName(this._id);
                }
                return new TabItemImpl(this._id, this._class, this._name, this._translationKey, this._displayTab, this._openStats, EventTrackingFactory.make(this._eventTrackingName), this._isNewFeature);
            };
            return TabItemBuilder;
        }());

        var EventTrackingImpl = /** @class */ (function() {
            function EventTrackingImpl(id, name) {
                this._id = id;
                this._name = name;
            }
            EventTrackingImpl.prototype.getId = function() {
                return this._id;
            };
            EventTrackingImpl.prototype.getName = function() {
                return this._name;
            };
            return EventTrackingImpl;
        }());
        var EventTrackingFactory = /** @class */ (function() {
            function EventTrackingFactory() {}
            EventTrackingFactory.make = function(name) {
                if (!this._instances[name]) {
                    this._instances[name] = new EventTrackingImpl(EVENT_TRACKING_ID, name);
                }
                return this._instances[name];
            };
            EventTrackingFactory._instances = {};
            return EventTrackingFactory;
        }());
        var TabConfigItemImpl = /** @class */ (function() {
            function TabConfigItemImpl(id, tabItems) {
                this._id = id;
                this._tabItems = tabItems;
            }
            TabConfigItemImpl.prototype.getId = function() {
                return this._id;
            };
            TabConfigItemImpl.prototype.getTabItemByIndex = function(index) {
                return this._tabItems[index] ? this._tabItems[index] : null;
            };
            TabConfigItemImpl.prototype.getTabItems = function() {
                return this._tabItems;
            };
            return TabConfigItemImpl;
        }());
        var TabConfigItemBuilder = /** @class */ (function() {
            function TabConfigItemBuilder() {
                this._id = "";
                this._tabItems = [];
            }
            TabConfigItemBuilder.prototype.setId = function(id) {
                this._id = id;
                return this;
            };
            TabConfigItemBuilder.prototype.addTabItem = function(tabItem) {
                this._tabItems.push(tabItem);
                return this;
            };
            TabConfigItemBuilder.prototype.build = function() {
                return new TabConfigItemImpl(this._id, this._tabItems);
            };
            return TabConfigItemBuilder;
        }());


        /***/
    }),
    /* 20 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return AussieRulesFormatter;
        });
        var AussieRulesFormatter = /** @class */ (function() {
            function AussieRulesFormatter(utilTrans) {
                this._trans = utilTrans;
            }
            AussieRulesFormatter.prototype._getScore = function(score) {
                if (!score) {
                    return null;
                }
                var scoreParts = score.split(".");
                if (scoreParts.length != 4) {
                    return null;
                }
                var goals = scoreParts[1] ? scoreParts[1] : "0";
                var behinds = scoreParts[2] ? scoreParts[2] : "0";
                var points = scoreParts[3] ? scoreParts[3] : "0";
                return {
                    superGoals: scoreParts[0],
                    goals: goals,
                    behinds: behinds,
                    points: points,
                };
            };
            AussieRulesFormatter.prototype._formatMainScore = function(score) {
                var output = "";
                if (score.superGoals !== "") {
                    output += score.superGoals + ".";
                }
                return output + score.goals + "." + score.behinds;
            };
            AussieRulesFormatter.prototype.formatScore = function(score) {
                var aussieRulesScore = this._getScore(score);
                if (!aussieRulesScore) {
                    return "";
                }
                return this._formatMainScore(aussieRulesScore) + " (" + aussieRulesScore.points + ")";
            };
            AussieRulesFormatter.prototype.formatScorePart = function(part) {
                var aussieRulesScore = this._getScore(part);
                if (!aussieRulesScore) {
                    return "";
                }
                return this._formatMainScore(aussieRulesScore);
            };
            AussieRulesFormatter.prototype.formatScoreTooltip = function(score) {
                var aussieRulesScore = this._getScore(score);
                if (!aussieRulesScore) {
                    return "";
                }
                var title = aussieRulesScore.superGoals !== "" ?
                    this._trans.translate("TRANS_AUSSIE_RULES_SUPER_GOALS") + ": " + aussieRulesScore.superGoals + ". " :
                    "";
                title += this._trans.translate("TRANS_AUSSIE_RULES_GOALS") + ": " + aussieRulesScore.goals;
                title += ". " + this._trans.translate("TRANS_AUSSIE_RULES_BEHINDS") + ": " + aussieRulesScore.behinds;
                title += " (" + this._trans.translate("TRANS_AUSSIE_RULES_POINTS") + ": " + aussieRulesScore.points + ")";
                return title;
            };
            AussieRulesFormatter.prototype.formatScoreWithTooltip = function(score) {
                if (score == "0") {
                    return "";
                }
                if (score === "-") {
                    return score;
                }
                return '<span title="' + this.formatScoreTooltip(score) + '">' + this.formatScore(score) + "</span>";
            };
            return AussieRulesFormatter;
        }());



        /***/
    }),
    /* 21 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return IndexFeedConstants;
        });
        var IndexFeedConstants = /** @class */ (function() {
            function IndexFeedConstants() {}
            IndexFeedConstants.ADVERTINDEXES_WRAPPER = "\t\tvar banners;\n\t\tcjs.Api.loader.get('cjs').call(function(_cjs) {\n\t\t\t%s\n\t\t});\n";
            IndexFeedConstants.APPLINKSINDEXES_INDEX_EVENT_ID = 'SAE';
            IndexFeedConstants.APPLINKSINDEXES_INDEX_SPORT_ID = 'SAI';
            IndexFeedConstants.APPLINKSINDEXES_INDEX_TOURNAMENT_ID = 'SAU';
            IndexFeedConstants.APPLINKSINDEXES_INDEX_TOURNAMENT_TEMPLATE_ID = 'SAT';
            IndexFeedConstants.APPLINKSINDEXES_INDEX_VALID = 'VVV';
            IndexFeedConstants.BALLBYBALLINDEXES_BALL_TYPE = 'BBF';
            IndexFeedConstants.BALLBYBALLINDEXES_BALL_VALUE = 'BBG';
            IndexFeedConstants.BALLBYBALLINDEXES_BOWLER_TO_BATSMAN_INFO = 'BBE';
            IndexFeedConstants.BALLBYBALLINDEXES_NUMBER = 'BBB';
            IndexFeedConstants.BALLBYBALLINDEXES_RUNS = 'BBC';
            IndexFeedConstants.BALLBYBALLINDEXES_SCORE = 'BBD';
            IndexFeedConstants.BALLBYBALLINDEXES_TAB_NAME = 'BBA';
            IndexFeedConstants.COMMONINDEXES_ACTIVE_LIVE_ODDS = 'CO';
            IndexFeedConstants.COMMONINDEXES_ACTIVE_LIVE_ODDS_BOOKMAKERS = 'CQ';
            IndexFeedConstants.COMMONINDEXES_AVAILABLE_TABS = 'DU';
            IndexFeedConstants.COMMONINDEXES_AVAILABLE_TABS_NEW = 'DX';
            IndexFeedConstants.COMMONINDEXES_AWAY_3CHAR_NAME = 'IZ';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING = 'EN';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING = 'EP';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_FIRST_INNING = 'EY';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING = 'FB';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING = 'EZ';
            IndexFeedConstants.COMMONINDEXES_AWAY_CRICKET_SECOND_INNING = 'EV';
            IndexFeedConstants.COMMONINDEXES_AWAY_FIRST_OUTS = 'ER';
            IndexFeedConstants.COMMONINDEXES_AWAY_FT_SCORE = 'DH';
            IndexFeedConstants.COMMONINDEXES_AWAY_GAME_SCORE = 'DQ';
            IndexFeedConstants.COMMONINDEXES_AWAY_LOGO = 'ED';
            IndexFeedConstants.COMMONINDEXES_AWAY_NAME = 'EB';
            IndexFeedConstants.COMMONINDEXES_AWAY_PARTICIPANT_RANK = 'EL';
            IndexFeedConstants.COMMONINDEXES_AWAY_RUN_RATE = 'ARR';
            IndexFeedConstants.COMMONINDEXES_AWAY_SCORE = 'DF';
            IndexFeedConstants.COMMONINDEXES_AWAY_SECOND_OUTS = 'EQ';
            IndexFeedConstants.COMMONINDEXES_AWAY_SET_SCORE = 'DO';
            IndexFeedConstants.COMMONINDEXES_BETTING_TYPE = 'DL';
            IndexFeedConstants.COMMONINDEXES_COL = 'CO';
            IndexFeedConstants.COMMONINDEXES_COMMENT = 'CO';
            IndexFeedConstants.COMMONINDEXES_CRICKET_SENTENCE = 'FD';
            IndexFeedConstants.COMMONINDEXES_CURRENT_SERVICE_SIDE = 'DR';
            IndexFeedConstants.COMMONINDEXES_EVENT_END_TIME = 'DS';
            IndexFeedConstants.COMMONINDEXES_EVENT_GAME_TIME = 'DI';
            IndexFeedConstants.COMMONINDEXES_EVENT_IMAGE = 'DEI';
            IndexFeedConstants.COMMONINDEXES_EVENT_INFO = 'DM';
            IndexFeedConstants.COMMONINDEXES_EVENT_STAGE_ID = 'DB';
            IndexFeedConstants.COMMONINDEXES_EVENT_STAGE_START_TIME = 'DD';
            IndexFeedConstants.COMMONINDEXES_EVENT_STAGE_TYPE_ID = 'DA';
            IndexFeedConstants.COMMONINDEXES_EVENT_START_TIME = 'DC';
            IndexFeedConstants.COMMONINDEXES_FLAG_ID = 'EG';
            IndexFeedConstants.COMMONINDEXES_FT_WINNER = 'AZ';
            IndexFeedConstants.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED = 'EJ';
            IndexFeedConstants.COMMONINDEXES_GROUP = 'GR';
            IndexFeedConstants.COMMONINDEXES_HASHTAG = 'DY';
            IndexFeedConstants.COMMONINDEXES_HEADER = 'HD';
            IndexFeedConstants.COMMONINDEXES_HIGHLIGHTS_RESTRICTIONS = 'HR';
            IndexFeedConstants.COMMONINDEXES_HOME_3CHAR_NAME = 'IY';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING = 'EM';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING = 'EO';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_FIRST_INNING = 'EW';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_OVERS_FIRST_INNING = 'FA';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_OVERS_SECOND_INNING = 'FC';
            IndexFeedConstants.COMMONINDEXES_HOME_CRICKET_SECOND_INNING = 'ET';
            IndexFeedConstants.COMMONINDEXES_HOME_FIRST_OUTS = 'EX';
            IndexFeedConstants.COMMONINDEXES_HOME_FT_SCORE = 'DG';
            IndexFeedConstants.COMMONINDEXES_HOME_GAME_SCORE = 'DP';
            IndexFeedConstants.COMMONINDEXES_HOME_LOGO = 'EC';
            IndexFeedConstants.COMMONINDEXES_HOME_NAME = 'EA';
            IndexFeedConstants.COMMONINDEXES_HOME_PARTICIPANT_RANK = 'EK';
            IndexFeedConstants.COMMONINDEXES_HOME_RUN_RATE = 'HRR';
            IndexFeedConstants.COMMONINDEXES_HOME_SCORE = 'DE';
            IndexFeedConstants.COMMONINDEXES_HOME_SECOND_OUTS = 'EU';
            IndexFeedConstants.COMMONINDEXES_HOME_SET_SCORE = 'DN';
            IndexFeedConstants.COMMONINDEXES_IS_7_RUGBY = 'EI';
            IndexFeedConstants.COMMONINDEXES_LAST_SCORE_UPDATE = 'DK';
            IndexFeedConstants.COMMONINDEXES_MENU = 'ME';
            IndexFeedConstants.COMMONINDEXES_RESULT_TYPE = 'DT';
            IndexFeedConstants.COMMONINDEXES_ROOT = 'RO';
            IndexFeedConstants.COMMONINDEXES_ROW = 'RW';
            IndexFeedConstants.COMMONINDEXES_ROW_CURRENT = 'RWC';
            IndexFeedConstants.COMMONINDEXES_ROW_NEWS_EVENT = 'RNE';
            IndexFeedConstants.COMMONINDEXES_ROW_NEWS_ITEM = 'RNI';
            IndexFeedConstants.COMMONINDEXES_ROW_NEWS_MORE = 'RNM';
            IndexFeedConstants.COMMONINDEXES_ROW_POINTS = 'RWP';
            IndexFeedConstants.COMMONINDEXES_ROW_SCORE = 'RWS';
            IndexFeedConstants.COMMONINDEXES_SCORE = 'SC';
            IndexFeedConstants.COMMONINDEXES_SPORT_ID = 'DV';
            IndexFeedConstants.COMMONINDEXES_TAB = 'TAB';
            IndexFeedConstants.COMMONINDEXES_TABLE = 'TA';
            IndexFeedConstants.COMMONINDEXES_TAB_ID = 'TI';
            IndexFeedConstants.COMMONINDEXES_TEXT = 'TE';
            IndexFeedConstants.COMMONINDEXES_TEXT_SPEC = 'TXS';
            IndexFeedConstants.COMMONINDEXES_TOURNAMENT_FULL_NAME = 'EE';
            IndexFeedConstants.COMMONINDEXES_TOURNAMENT_STAGE_ID = 'DW';
            IndexFeedConstants.COMMONINDEXES_TOURNAMENT_TEMPLATE_NAME = 'EF';
            IndexFeedConstants.COMMONINDEXES_TOURNAMENT_TEMPLATE_URL = 'EH';
            IndexFeedConstants.COMMONINDEXES_UNKNOWN = '';
            IndexFeedConstants.COMMONINDEXES_UNKNOWN_PROPERTY = '';
            IndexFeedConstants.COMMONINDEXES_VALUE = 'VA';
            IndexFeedConstants.COMMONINDEXES_WINNER = 'DJ';
            IndexFeedConstants.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_BIRTH_DATE = 'PD';
            IndexFeedConstants.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_COUNTRY_ID = 'CY';
            IndexFeedConstants.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_COUNTRY_NAME = 'PC';
            IndexFeedConstants.COMMONPARTICIPANTINDEXES_EVENT_PARTICIPANT_RANKING = 'PE';
            IndexFeedConstants.DCAPIPARTICIPANTINDEXES_TEAM_INFO = 'PR';
            IndexFeedConstants.DCAPIPARTICIPANTINDEXES_TEAM_INFO_DELETED = 'PRD';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_BROADCASTING = 'TV';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_CURRENT_GAME_SUMMARY = 'MHS';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_CURRENT_GAME_SUMMARY_NEW = 'MHSN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_DRAW = 'DR';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_FALL_OF_WICKETS = 'FOW';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HEAD_TO_HEAD = 'HH';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HIGHLIGHTS = 'HI';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_ANY_AVAILABLE = 'HIN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_OFFICIAL_AVAILABLE = 'HIO';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_TOP_AVAILABLE = 'HIT';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_HIGHLIGHTS_HAS_TOP_OFFICIAL_AVAILABLE = 'HITO';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_LINEUPS = 'LI';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_LIVE_COMMENTS = 'LC';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_LIVE_COMMENTS_NEW = 'LCN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_LIVE_TABLE = 'LT';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_MATCH_COMMENTS = 'MC';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_MATCH_HISTORY = 'MH';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_MATCH_HISTORY_NEW = 'MHN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_NEWS_FEED = 'NF';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_ODDS = 'OD';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_OVERS = 'OV';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_PHOTO_REPORT = 'PR';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_PITCHERS = 'PI';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_PLAYER_STATISTICS = 'PS';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_PLAYER_STATISTICS_NEW = 'PSN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_SCRATCHES = 'SCR';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_STANDINGS = 'TA';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_STATISTICS = 'ST';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_STATISTICS_NEW = 'STN';
            IndexFeedConstants.DETAILCOMMONTABSINDEXES_TOP_SCORERS = 'TS';
            IndexFeedConstants.DETAILHASHINDEXES_ALL_RESULTS_HASH = 'CD';
            IndexFeedConstants.DETAILHASHINDEXES_COMMON_HASH = 'CA';
            IndexFeedConstants.DETAILHASHINDEXES_DRAW_HASH = 'CM';
            IndexFeedConstants.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH = 'FOW';
            IndexFeedConstants.DETAILHASHINDEXES_INCIDENT_STATISTICS_HASH = 'CE';
            IndexFeedConstants.DETAILHASHINDEXES_LINEUP_HASH = 'CG';
            IndexFeedConstants.DETAILHASHINDEXES_LIVE_ODDS_HASH = 'CN';
            IndexFeedConstants.DETAILHASHINDEXES_MATCH_COMMENT_HASH = 'CV';
            IndexFeedConstants.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH = 'CL';
            IndexFeedConstants.DETAILHASHINDEXES_MATCH_HISTORY_HASH = 'CJ';
            IndexFeedConstants.DETAILHASHINDEXES_MISSING_PLAYERS_HASH = 'MP';
            IndexFeedConstants.DETAILHASHINDEXES_NEWSFEED_HASH = 'NF';
            IndexFeedConstants.DETAILHASHINDEXES_NEW_COMMENT_HASH = 'CU';
            IndexFeedConstants.DETAILHASHINDEXES_OVERS_HASH = 'OV';
            IndexFeedConstants.DETAILHASHINDEXES_PITCHER_STATISTICS_HASH = 'PI';
            IndexFeedConstants.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH = 'CZ';
            IndexFeedConstants.DETAILHASHINDEXES_PROPERTIES_HASH = 'CH';
            IndexFeedConstants.DETAILHASHINDEXES_SETTINGS_HASH = 'CS';
            IndexFeedConstants.DETAILHASHINDEXES_STANDINGS_HASH = 'CI';
            IndexFeedConstants.DETAILHASHINDEXES_STATIC_COMMENT_HASH = 'CF';
            IndexFeedConstants.DETAILHASHINDEXES_STATS_MATCH_HISTORY_HASH = 'CJS';
            IndexFeedConstants.DETAILHASHINDEXES_STATS_STATISTICS_HASH = 'CES';
            IndexFeedConstants.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH = 'CEP';
            IndexFeedConstants.DETAILHASHINDEXES_TV_STREAM_HASH = 'TVS';
            IndexFeedConstants.FALLOFWICKETSINDEXES_BALLS_AND_OVERS = 'FOF';
            IndexFeedConstants.FALLOFWICKETSINDEXES_BATSMAN_COUNTRY_ID = 'FOC';
            IndexFeedConstants.FALLOFWICKETSINDEXES_BATSMAN_NAME = 'FOB';
            IndexFeedConstants.FALLOFWICKETSINDEXES_SCORE = 'FOE';
            IndexFeedConstants.FALLOFWICKETSINDEXES_STATUS = 'FOD';
            IndexFeedConstants.FALLOFWICKETSINDEXES_TAB_TITLE = 'FOA';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_CELL = 'Â¬';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_INDEX = 'Ã·';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_INNER_FEED_CELL = 'â';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_INNER_FEED_INDEX = 'â';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_INNER_FEED_ROW = 'â¾';
            IndexFeedConstants.FEEDSEPARATORSINDEXES_ROW = '~';
            IndexFeedConstants.FSCORE_CODEBOOKINDEXES_CRICKET_SENTENCES_STR = 'SH';
            IndexFeedConstants.FSCORE_CODEBOOKINDEXES_CRICKET_SENTENCE_PARTS_STR = 'SI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_AWAY_PARTICIPANT_ID = 'EA';
            IndexFeedConstants.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_ID = 'AP';
            IndexFeedConstants.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_INFO = 'AI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_AWAY_ROUND_PARTICIPANT_RESULT = 'RT';
            IndexFeedConstants.FSCORE_DRAWINDEXES_HOME_PARTICIPANT_ID = 'EH';
            IndexFeedConstants.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_ID = 'HP';
            IndexFeedConstants.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_INFO = 'HI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_HOME_ROUND_PARTICIPANT_RESULT = 'RE';
            IndexFeedConstants.FSCORE_DRAWINDEXES_IMAGE_PARTICIPANT_ID = 'IPI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_IMAGE_PARTICIPANT_URL = 'IPU';
            IndexFeedConstants.FSCORE_DRAWINDEXES_IMAGE_URL = 'DI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_PARTICIPANTS = 'PA';
            IndexFeedConstants.FSCORE_DRAWINDEXES_PARTICIPANTS_IDS = 'PID';
            IndexFeedConstants.FSCORE_DRAWINDEXES_PARTICIPANTS_SHORT_NAMES = 'PS';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUNDS = 'RN';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUND_ADVANCING_PARTICIPANT = 'AE';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUND_EVENT_INFO = 'RQ';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUND_ID = 'RI';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUND_PAIR_MATCHES = 'RK';
            IndexFeedConstants.FSCORE_DRAWINDEXES_ROUND_PARENT_ID = 'RP';
            IndexFeedConstants.FSCORE_DRAWINDEXES_UPCOMING_DRAW_START_TIME = 'US';
            IndexFeedConstants.FSCORE_GOLFPARTINDEXES_IS_GOLF_PLAY_OFF = 'GP';
            IndexFeedConstants.FSCORE_GOLFPARTINDEXES_IS_GOLF_STABLEFORD = 'ZT';
            IndexFeedConstants.FSCORE_GOLFPARTINDEXES_PAR = 'ZQ';
            IndexFeedConstants.FSCORE_GOLFPARTINDEXES_PRIZE_MONEY = 'ZP';
            IndexFeedConstants.FSCORE_HORSERACINGINDEXES_STAGE_START_TIME = 'ZVR';
            IndexFeedConstants.FSCORE_HORSERACINGINDEXES_STAGE_TABS = 'ZV';
            IndexFeedConstants.FSCORE_MEETINGINDEXES_MEETING_END = 'MTE';
            IndexFeedConstants.FSCORE_MEETINGINDEXES_MEETING_ID = 'MID';
            IndexFeedConstants.FSCORE_MEETINGINDEXES_MEETING_NAME = 'MNM';
            IndexFeedConstants.FSCORE_MEETINGINDEXES_MEETING_START = 'MTS';
            IndexFeedConstants.FSCORE_NODUELINDEXES_IS_DUEL = 'ZW';
            IndexFeedConstants.FSCORE_NODUELINDEXES_NO_DUEL_EVENT_ID = 'ZZ';
            IndexFeedConstants.FSCORE_NODUELINDEXES_STAGE_INFO = 'ZN';
            IndexFeedConstants.FSCORE_NODUELSTAGEINDEXES_STAGE_IS_MAIN = 'ZSM';
            IndexFeedConstants.FSCORE_NODUELSTAGEINDEXES_STAGE_STATUS_ID = 'ZSS';
            IndexFeedConstants.FSCORE_NODUELSTAGEINDEXES_STAGE_STATUS_TYPE_ID = 'ZST';
            IndexFeedConstants.FSCORE_ONCOURSETRACKINDEXES_EVENT_STAGE_ID = 'OAA';
            IndexFeedConstants.FSCORE_ONCOURSETRACKINDEXES_VALUE = 'OAB';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TOURNAMENT_ID = 'TRB';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TOURNAMENT_STAGE_ID = 'TRC';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_ACTUAL_TOURNAMENT_TYPE = 'TRA';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_AVAILABLE_TABS = 'TAB';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_BIRTHDAY_TIME = 'PAI';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_COUNTRY_ID = 'PAD';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_COUNTRY_NAME = 'PAM';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_DEATH_TIME = 'DEA';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_GENDER_ID = 'PAC';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_ID = 'PAA';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_IMAGE_MOBILE_PATH = 'PAF';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_IMAGE_TABLE_PATH = 'PAG';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_LAYOUT = 'PAL';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_NAME = 'PAH';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_PARENT_NAME = 'PAK';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_PARTICIPANT_TYPE_ID = 'PAJ';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_PARTICIPANT_TYPE_NAME = 'PAO';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_RANK_TEXT = 'PAN';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_SHORT_NAME = 'PAB';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_SPORT_ID = 'PAE';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_TEAM_ID = 'TID';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_TEAM_IMAGE = 'TIM';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_TEAM_NAME = 'TIN';
            IndexFeedConstants.FSCORE_PARTICIPANTINFOINDEXES_TEAM_PARTICIPANT_TYPE = 'TPT';
            IndexFeedConstants.FSCORE_PITCHERINDEXES_PITCHER_LOSSES = 'PIL';
            IndexFeedConstants.FSCORE_PITCHERINDEXES_PITCHER_NAME = 'PIN';
            IndexFeedConstants.FSCORE_PITCHERINDEXES_PITCHER_TYPE = 'PIT';
            IndexFeedConstants.FSCORE_PITCHERINDEXES_PITCHER_WINS = 'PIW';
            IndexFeedConstants.FSCORE_STAGEINDEXES_BROADCASTS = 'TA';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_NODE_END = 'TE';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_NODE_ID = 'ID';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_NODE_START = 'TS';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_OPTIONAL_TYPE = 'OPT';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_PROPERTY_TYPE = 'PT';
            IndexFeedConstants.FSCORE_TABLEDATAINDEXES_PROPERTY_VALUE = 'PV';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_ACTIVE_DRAW_LEVEL = 'OAK';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_COUNTRY_ID = 'OAD';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_COUNTRY_NAME = 'OAE';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_IMAGE_URL = 'OAJ';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_LEAGUE_NAME = 'OAF';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_SEASON_ID = 'OAG';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_STANDINGS_TYPE = 'OAC';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_TEMPLATE_ID = 'OAH';
            IndexFeedConstants.FSCORE_TOURNAMENTSTAGEINFOINDEXES_TOURNAMENT_ID = 'OAI';
            IndexFeedConstants.FULLFEEDINDEXES_AGE = 'NN';
            IndexFeedConstants.FULLFEEDINDEXES_ANDROID_VERSION_STR = 'VA';
            IndexFeedConstants.FULLFEEDINDEXES_APP_STORE_VERSION = 'VJ';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_3CHAR_NAME = 'WN';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_FIRST_INNING = 'FE';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_DECLARED_SECOND_INNING = 'FF';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING = 'DP';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_SECOND_INNING = 'DR';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_FIRST_INNING = 'DL';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_CRICKET_WICKETS_SECOND_INNING = 'DN';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_EVENT_PARTICIPANT_ID = 'JB';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_PARTICIPANT_COUNTRY_ID = 'CB';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_PARTICIPANT_IDS = 'PY';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_PARTICIPANT_NAME = 'AF';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_PARTICIPANT_NAME_URL = 'WV';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_PARTICIPANT_TYPE = 'APT';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_1 = 'DB';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_2 = 'DD';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3 = 'DF';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4 = 'DH';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_5 = 'DJ';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_FIRST_HALF = 'BT';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_PENALTIES = 'FB';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_SECOND_HALF = 'BV';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_TEAM_LOGO = 'OB';
            IndexFeedConstants.FULLFEEDINDEXES_AWAY_TENNIS_GAME = 'WB';
            IndexFeedConstants.FULLFEEDINDEXES_BANNED_LEAGUES_STR = 'VK';
            IndexFeedConstants.FULLFEEDINDEXES_BEST_OF_FRAMES = 'WD';
            IndexFeedConstants.FULLFEEDINDEXES_BOOKMAKER_LIST_LIVE_IN_OFFER = 'MW';
            IndexFeedConstants.FULLFEEDINDEXES_CATEGORY_CAPTION = 'ZAF';
            IndexFeedConstants.FULLFEEDINDEXES_CRICKET_VISIBLE_RUN_RATE = 'RW';
            IndexFeedConstants.FULLFEEDINDEXES_DATACORE_TRANSLATES = 'DT';
            IndexFeedConstants.FULLFEEDINDEXES_EVENT_LIST_LAYOUT_TYPE = 'ELT';
            IndexFeedConstants.FULLFEEDINDEXES_EVENT_STAGE_TIME = 'CK';
            IndexFeedConstants.FULLFEEDINDEXES_EVENT_START_UTIME = 'ADE';
            IndexFeedConstants.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START = 'QB';
            IndexFeedConstants.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START_AND_END_TIME = 'QC';
            IndexFeedConstants.FULLFEEDINDEXES_HAS_LIVE_BETTING = 'AN';
            IndexFeedConstants.FULLFEEDINDEXES_HAS_MATCH_COMMENTS = 'HMC';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_3CHAR_NAME = 'WM';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_FIRST_INNING = 'FC';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_DECLARED_SECOND_INNING = 'FD';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_OVERS_FIRST_INNING = 'DO';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_OVERS_SECOND_INNING = 'DQ';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_FIRST_INNING = 'DK';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_CRICKET_WICKETS_SECOND_INNING = 'DM';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_EVENT_PARTICIPANT_ID = 'JA';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_PARTICIPANT_COUNTRY_ID = 'CA';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_PARTICIPANT_IDS = 'PX';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_PARTICIPANT_NAME = 'AE';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_PARTICIPANT_NAME_URL = 'WU';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_PARTICIPANT_TYPE = 'HPT';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_1 = 'DA';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_2 = 'DC';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3 = 'DE';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4 = 'DG';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_5 = 'DI';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_FIRST_HALF = 'BS';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_PENALTIES = 'FA';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_SECOND_HALF = 'BU';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_TEAM_LOGO = 'OA';
            IndexFeedConstants.FULLFEEDINDEXES_HOME_TENNIS_GAME = 'WA';
            IndexFeedConstants.FULLFEEDINDEXES_IOS_VERSION_STR = 'VI';
            IndexFeedConstants.FULLFEEDINDEXES_IS_NATIONAL_EVENT = 'GN';
            IndexFeedConstants.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_1 = 'ZAA';
            IndexFeedConstants.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_2 = 'ZAB';
            IndexFeedConstants.FULLFEEDINDEXES_LEAGUE_CAPTION_PART_STAGE_NAME = 'ZAE';
            IndexFeedConstants.FULLFEEDINDEXES_MOVED_EVENTS_ID = 'QA';
            IndexFeedConstants.FULLFEEDINDEXES_NO_DUEL_REMOVED_PARTICIPANT = 'QD';
            IndexFeedConstants.FULLFEEDINDEXES_ODDS_WINNING_OUTCOMES = 'CS';
            IndexFeedConstants.FULLFEEDINDEXES_PARTICIPANT_COUNTRY = 'CC';
            IndexFeedConstants.FULLFEEDINDEXES_PARTICIPANT_COUNTRY_IDS = 'CY';
            IndexFeedConstants.FULLFEEDINDEXES_PAST_FUTURE_GAMES = 'FG';
            IndexFeedConstants.FULLFEEDINDEXES_PAST_FUTURE_GAMES_NEW_PORTABLE = 'FGN';
            IndexFeedConstants.FULLFEEDINDEXES_PLAYING_ON_SETS = 'WL';
            IndexFeedConstants.FULLFEEDINDEXES_RANKING_LINK_ID = 'ZRA';
            IndexFeedConstants.FULLFEEDINDEXES_RANKING_LINK_NAME = 'ZRB';
            IndexFeedConstants.FULLFEEDINDEXES_SHOW_IN_MY_TEAMS_ON_PORTABLE = 'ES';
            IndexFeedConstants.FULLFEEDINDEXES_SORT_PARTICIPANT = 'CX';
            IndexFeedConstants.FULLFEEDINDEXES_STAGE_EVENT_STAGE_ID = 'ZAD';
            IndexFeedConstants.FULLFEEDINDEXES_STAGE_SORT_KEY = 'SX';
            IndexFeedConstants.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS = 'WE';
            IndexFeedConstants.FULLFEEDINDEXES_TEAM_3CHAR_NAME = 'NB';
            IndexFeedConstants.FULLFEEDINDEXES_TEAM_NAME = 'NA';
            IndexFeedConstants.FULLFEEDINDEXES_TOP_LEAGUES_STR = 'SG';
            IndexFeedConstants.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ACRONYM = 'ZAC';
            IndexFeedConstants.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_ID = 'ZEE';
            IndexFeedConstants.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_LOGO = 'ZKL';
            IndexFeedConstants.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_NAME = 'ZK';
            IndexFeedConstants.FULLFEEDINDEXES_TOURNAMENT_TEMPLATE_RAW_URL = 'ZKU';
            IndexFeedConstants.FULLFEEDINDEXES_WINNER = 'AS';
            IndexFeedConstants.GEORESTRICTIONSINDEXES_MESSAGE = 'II';
            IndexFeedConstants.H2HINDEXES_AWAY_NAME = 'KK';
            IndexFeedConstants.H2HINDEXES_COUNTRY_NAME = 'KH';
            IndexFeedConstants.H2HINDEXES_CURRENT_RESULT = 'KL';
            IndexFeedConstants.H2HINDEXES_DATA = 'KO';
            IndexFeedConstants.H2HINDEXES_DATE = 'KC';
            IndexFeedConstants.H2HINDEXES_ENCODED_ID = 'KP';
            IndexFeedConstants.H2HINDEXES_EVENT_ACRONYM = 'KI';
            IndexFeedConstants.H2HINDEXES_EVENT_NAME = 'KF';
            IndexFeedConstants.H2HINDEXES_FLAG_ID = 'KG';
            IndexFeedConstants.H2HINDEXES_FULLTIME_RESULT = 'KM';
            IndexFeedConstants.H2HINDEXES_HEADER_NAME = 'KB';
            IndexFeedConstants.H2HINDEXES_HOME_NAME = 'KJ';
            IndexFeedConstants.H2HINDEXES_INCIDENT_RESULT = 'KR';
            IndexFeedConstants.H2HINDEXES_SIDE_HIGHLIGHTED = 'KS';
            IndexFeedConstants.H2HINDEXES_SURFACE_CODE = 'KD';
            IndexFeedConstants.H2HINDEXES_SURFACE_NAME = 'KE';
            IndexFeedConstants.H2HINDEXES_TAB_NAME = 'KA';
            IndexFeedConstants.H2HINDEXES_WIN_OR_LOSE = 'KN';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_ENABLE_INTERVAL = 'HEI';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_FORCE_IFRAME = 'HFI';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_INCIDENT_TITLE = 'HIN';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_INCIDENT_TYPE = 'HIT';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_OPEN_IN_POPUP = 'HPP';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_RESTRICTION = 'HRE';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_RESULT = 'HTR';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_SUBTITLE1 = 'HS1';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_SUBTITLE2 = 'HS2';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_TIME = 'HTM';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_TITLE = 'HTI';
            IndexFeedConstants.HIGHLIGHTINDEXES_HIGHLIGHT_URL = 'HUR';
            IndexFeedConstants.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_ID = 'HPI';
            IndexFeedConstants.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_INDEX = 'HP';
            IndexFeedConstants.HIGHLIGHTPROVIDERINDEXES_HIGHLIGHT_PROVIDER_NAME = 'HPN';
            IndexFeedConstants.LEAGUEINDEXES_CAPTION_SEASON_STAGE_ID = 'ZU';
            IndexFeedConstants.LEAGUEINDEXES_COUNTRY_ID = 'ZB';
            IndexFeedConstants.LEAGUEINDEXES_COUNTRY_NAME = 'ZY';
            IndexFeedConstants.LEAGUEINDEXES_IS_SEVEN_RUGBY = 'ZR';
            IndexFeedConstants.LEAGUEINDEXES_MEETING_ID = 'QM';
            IndexFeedConstants.LEAGUEINDEXES_MEETING_NAME = 'QMN';
            IndexFeedConstants.LEAGUEINDEXES_MEETING_TIME_END = 'QME';
            IndexFeedConstants.LEAGUEINDEXES_MEETING_TIME_START = 'QMS';
            IndexFeedConstants.LEAGUEINDEXES_RACE_TYPE = 'ZM';
            IndexFeedConstants.LEAGUEINDEXES_SEASON_URL = 'ZS';
            IndexFeedConstants.LEAGUEINDEXES_SORT_KEY = 'ZX';
            IndexFeedConstants.LEAGUEINDEXES_SOURCE_TYPE = 'ZF';
            IndexFeedConstants.LEAGUEINDEXES_STAGES_COUNT = 'ZCC';
            IndexFeedConstants.LEAGUEINDEXES_STATS_TYPE = 'ZG';
            IndexFeedConstants.LEAGUEINDEXES_SUPER_TEMPLATE_ID = 'ZHS';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_CATEGORY_ID = 'TCI';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_ID = 'ZE';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_ID_EVERYTIME = 'ZEF';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_STAGE_TYPE = 'ZJ';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_TEMPLATE_KEY = 'ZH';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_TEMPLATE_URL = 'ZL';
            IndexFeedConstants.LEAGUEINDEXES_TOURNAMENT_TYPE = 'ZD';
            IndexFeedConstants.LINEUPSINDEXES_FORMATION_LABEL = 'LA';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_FORMATION = 'LD';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_GROUP = 'LB';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_GROUP_TYPE = 'LGT';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_INCIDENT = 'LII';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_INCIDENT_TOOLTIP = 'LIT';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_INCIDENT_TYPE_NAME = 'LIN';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_LINE = 'LM';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_COUNTRY_ID = 'LO';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_COUNTRY_NAME = 'LQ';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_ID = 'LP';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_NAME = 'LI';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_NUMBER = 'LJ';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_SPECIAL_POSITION_NAME = 'LR';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_SPECIAL_POSITION_NAME_TOOLTIP = 'LS';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PARTICIPANT_SURNAME = 'LN';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_PLAYER_TYPE = 'LG';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_POSITION_ID = 'LK';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_POSITION_KEY = 'LL';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_ROW_INDEX = 'LH';
            IndexFeedConstants.LINEUPSINDEXES_LINEUP_SIDE = 'LC';
            IndexFeedConstants.LIVECOMMENTSINDEXES_HIGHLIGHT_IMAGE_RESOLUTION = 'MG';
            IndexFeedConstants.LIVECOMMENTSINDEXES_HIGHLIGHT_IMAGE_URL = 'MH';
            IndexFeedConstants.LIVECOMMENTSINDEXES_HIGHLIGHT_PROVIDER_NOTE = 'MJ';
            IndexFeedConstants.LIVECOMMENTSINDEXES_HTML_CLASS = 'MC';
            IndexFeedConstants.LIVECOMMENTSINDEXES_IS_BOLD = 'ME';
            IndexFeedConstants.LIVECOMMENTSINDEXES_IS_IMPORTANT_BY_HTML_CLASS = 'MF';
            IndexFeedConstants.LIVECOMMENTSINDEXES_TAB_NAME = 'MA';
            IndexFeedConstants.LIVECOMMENTSINDEXES_TEXT = 'MD';
            IndexFeedConstants.LIVECOMMENTSINDEXES_TIME = 'MB';
            IndexFeedConstants.LOCALIZEKEYINDEXES_BOOKMAKER = 'BI';
            IndexFeedConstants.LOCALIZEKEYINDEXES_BOOKMAKER_BETTING_TYPE_FOR_SPORT = 'TS';
            IndexFeedConstants.LOCALIZEKEYINDEXES_BOOKMAKER_ID = 'ID';
            IndexFeedConstants.LOCALIZEKEYINDEXES_BOOKMAKER_NAME = 'NA';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT = 'EL';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_BROADCAST = 'EB';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_HIGHLIGTS = 'EH';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_MEETING_NAME = 'MNA';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_PARTICIPANT_SORT = 'PS';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_SORT_KEY = 'ES';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_SWAPPED_PARTICIPANTS = 'EW';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_COUNTRY_NAME = 'TP';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_NAME = 'TN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION = 'TC';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION_PART_1 = 'TK';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_STAGE_CAPTION_PART_2 = 'TL';
            IndexFeedConstants.LOCALIZEKEYINDEXES_EVENT_TOURNAMENT_URL = 'TU';
            IndexFeedConstants.LOCALIZEKEYINDEXES_ODDS = 'ODQ';
            IndexFeedConstants.LOCALIZEKEYINDEXES_ODDS_PART = 'OP';
            IndexFeedConstants.LOCALIZEKEYINDEXES_ODDS_PART_ODDS = 'OD';
            IndexFeedConstants.LOCALIZEKEYINDEXES_ODDS_PART_ODDS_BOOKMAKER_INFO = 'ODI';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT = 'PD';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_EVENTS_CLASS_LOCALIZED_VAR = 'LV';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_NAME = 'FN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_NAME_URL = 'NU';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_NAME_WITHOUT_COUNTRY = 'FNWC';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_PARENT_NAME = 'PN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_PARENT_THREE_CHAR_NAME = 'PSN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_SHORT_NAME = 'SN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_PARTICIPANT_SURNAME = 'SUN';
            IndexFeedConstants.LOCALIZEKEYINDEXES_STAGE_EVENT = 'SL';
            IndexFeedConstants.LOCALIZEKEYINDEXES_TV_ID = 'TVI';
            IndexFeedConstants.MATCHCOUNTINDEXES_IS_MAJORITY_SPORT = 'SM';
            IndexFeedConstants.MATCHCOUNTINDEXES_LIVE_MATCH_COUNT = 'LC';
            IndexFeedConstants.MATCHCOUNTINDEXES_MATCH_COUNT = 'EC';
            IndexFeedConstants.MATCHCOUNTINDEXES_SPORT_ID_FOR_EXTENDED_INFO = 'SAA';
            IndexFeedConstants.MATCHCOUNTINDEXES_SPORT_SORT = 'SAS';
            IndexFeedConstants.MATCHHISTORYINDEXES_AWAY_AHEAD = 'HJ';
            IndexFeedConstants.MATCHHISTORYINDEXES_AWAY_SCORE = 'HE';
            IndexFeedConstants.MATCHHISTORYINDEXES_AWAY_TIEBREAK_SCORE = 'HF';
            IndexFeedConstants.MATCHHISTORYINDEXES_FIFTEENS_CONTENT = 'HL';
            IndexFeedConstants.MATCHHISTORYINDEXES_FIFTEENS_CONTENT_CURRENT_GAME = 'HO';
            IndexFeedConstants.MATCHHISTORYINDEXES_HEADER_NAME = 'HB';
            IndexFeedConstants.MATCHHISTORYINDEXES_HOME_AHEAD = 'HI';
            IndexFeedConstants.MATCHHISTORYINDEXES_HOME_SCORE = 'HC';
            IndexFeedConstants.MATCHHISTORYINDEXES_HOME_TIEBREAK_SCORE = 'HD';
            IndexFeedConstants.MATCHHISTORYINDEXES_LOST_SERVE = 'HH';
            IndexFeedConstants.MATCHHISTORYINDEXES_SERVING = 'HG';
            IndexFeedConstants.MATCHHISTORYINDEXES_SERVING_CURRENT_GAME = 'HN';
            IndexFeedConstants.MATCHHISTORYINDEXES_TAB_NAME = 'HA';
            IndexFeedConstants.MATCHHISTORYINDEXES_TIEBREAK_BALL_TYPE_ID_FOR_PLAYER = 'HM';
            IndexFeedConstants.MATCHHISTORYINDEXES_WINNER = 'HK';
            IndexFeedConstants.MATCHINFO_INDEXES_ATTENDANCE = 'ATT';
            IndexFeedConstants.MATCHINFO_INDEXES_REFEREE_COUNTRY = 'RCO';
            IndexFeedConstants.MATCHINFO_INDEXES_REFEREE_COUNTRY_CODE = 'RCC';
            IndexFeedConstants.MATCHINFO_INDEXES_REFEREE_NAME = 'REF';
            IndexFeedConstants.MATCHINFO_INDEXES_VENUE = 'VEN';
            IndexFeedConstants.MENUINDEXES_COUNTRY_ID = 'MC';
            IndexFeedConstants.MENUINDEXES_COUNTRY_URL = 'ML';
            IndexFeedConstants.MENUINDEXES_TOURNAMENT_TEMPLATE_LEAGUE_KEY = 'MT';
            IndexFeedConstants.MENUINDEXES_TOURNAMENT_TEMPLATE_NAME = 'MN';
            IndexFeedConstants.MENUINDEXES_TOURNAMENT_TEMPLATE_SHORT_URL = 'MV';
            IndexFeedConstants.MENUINDEXES_TOURNAMENT_TEMPLATE_URL = 'MU';
            IndexFeedConstants.MYTEAMSEVENTSINDEXES_PARTICIPANT_ENCODED_ID = 'PI';
            IndexFeedConstants.NEWSFEEDINDEXES_CATEGORY = 'CAT';
            IndexFeedConstants.NEWSFEEDINDEXES_CATEGORY_ID = 'CI';
            IndexFeedConstants.NEWSFEEDINDEXES_COLUMN_PARTICIPANT = 'PLA';
            IndexFeedConstants.NEWSFEEDINDEXES_IMAGE_URL = 'IU';
            IndexFeedConstants.NEWSFEEDINDEXES_LINK = 'LI';
            IndexFeedConstants.NEWSFEEDINDEXES_NAME = 'NA';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_ID = 'PID';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_IMAGE = 'PI';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_IS_WINNER = 'PW';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_NAME = 'PN';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_SHORTNAME = 'PSN';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_SIDE = 'PS';
            IndexFeedConstants.NEWSFEEDINDEXES_PARTICIPANT_TYPE = 'PT';
            IndexFeedConstants.NEWSFEEDINDEXES_PEREX = 'PE';
            IndexFeedConstants.NEWSFEEDINDEXES_PUBLISHED = 'PU';
            IndexFeedConstants.NEWSFEEDINDEXES_TITLE = 'TL';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_AWAY_SCORE = 'AS';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_CATEGORY = 'CAT';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_EVENT_STAGE_ID = 'ESI';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_EVENT_START = 'ES';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_FEED_TYPE_ID = 'FTI';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_FINAL_SCORE = 'FS';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_HOME_SCORE = 'HS';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_ID = 'ID';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_IMAGE_VARIANT_ID = 'IVI';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_IMAGE_VARIANT_URL = 'IVU';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_LINK = 'LINK';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_PROVIDER_NAME = 'PNAME';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_PUBLISHED = 'PUB';
            IndexFeedConstants.NEWSFEEDPORTABLEINDEXES_TITLE = 'TITLE';
            IndexFeedConstants.ODDSINDEXES_BETTING_TYPE = 'OA';
            IndexFeedConstants.ODDSINDEXES_BETTING_TYPE_ID = 'OAI';
            IndexFeedConstants.ODDSINDEXES_BETTING_TYPE_URL = 'OAU';
            IndexFeedConstants.ODDSINDEXES_BONUS_TEXTS_LONG = 'MY';
            IndexFeedConstants.ODDSINDEXES_BONUS_TEXTS_SHORT = 'MZ';
            IndexFeedConstants.ODDSINDEXES_BOOKMAKER_ID = 'ODA';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BETTING_TYPE = 'SB';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BONUS = 'MO';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BONUS_LIMIT = 'OO';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BOOKMAKER_ID = 'SC';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BOOKMAKER_NAME = 'SD';
            IndexFeedConstants.ODDSINDEXES_DETAIL_BROADCASTS = 'AL';
            IndexFeedConstants.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_ID = 'OE';
            IndexFeedConstants.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IMAGE_URL = 'OPI';
            IndexFeedConstants.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_IS_PREMIUM = 'BIP';
            IndexFeedConstants.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_NAME = 'OD';
            IndexFeedConstants.ODDSINDEXES_DETAIL_FEED_BOOKMAKER_SHOW_TEXT_NOT_LOGO = 'OPN';
            IndexFeedConstants.ODDSINDEXES_EACH_WAY_HANDICAP = 'XI';
            IndexFeedConstants.ODDSINDEXES_HANDICAP = 'XH';
            IndexFeedConstants.ODDSINDEXES_HAS_ODDS_COMPARISON = 'AY';
            IndexFeedConstants.ODDSINDEXES_INACTIVE_ODDS = 'XX';
            IndexFeedConstants.ODDSINDEXES_INFO_BOOKMAKER_BETTING_TYPE = 'AAB';
            IndexFeedConstants.ODDSINDEXES_INFO_BOOKMAKER_ID = 'AAA';
            IndexFeedConstants.ODDSINDEXES_INFO_BOOKMAKER_NAME = 'AAD';
            IndexFeedConstants.ODDSINDEXES_LIVE_BETTING_STRIP_TEXT = 'OH';
            IndexFeedConstants.ODDSINDEXES_LIVE_BETTING_STRIP_URL = 'OG';
            IndexFeedConstants.ODDSINDEXES_LIVE_HANDICAP_TYPE = 'OHT';
            IndexFeedConstants.ODDSINDEXES_LIVE_HANDICAP_VALUE = 'OHV';
            IndexFeedConstants.ODDSINDEXES_LIVE_IN_OFFER_BOOKMAKER_ID = 'ODE';
            IndexFeedConstants.ODDSINDEXES_LIVE_IN_OFFER_STATUS = 'ODF';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_BONUS_ID = 'OOB';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_ID = 'OQ';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_IMAGE_URL = 'OPI';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LINK_HTML = 'ON';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LIVE_IN_OFFER_ACTIVE = 'OOA';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_LIVE_IN_OFFER_NAME = 'OON';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_SHOW_TEXT_NOT_LOGO = 'ONN';
            IndexFeedConstants.ODDSINDEXES_LIVE_MAIN_BOOKMAKER_URL = 'OP';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_ACTIVE = 'OK';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_BETSLIP = 'OR';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_MOVEMENTS = 'OL';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_PREVIOUS_VALUES = 'OJ';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_VALUES = 'OI';
            IndexFeedConstants.ODDSINDEXES_LIVE_ODDS_WRAPPER_CLASSES = 'OM';
            IndexFeedConstants.ODDSINDEXES_MAIN_BOOKMAKER_ID = 'MX';
            IndexFeedConstants.ODDSINDEXES_ODDS_0 = 'XB';
            IndexFeedConstants.ODDSINDEXES_ODDS_02 = 'XE';
            IndexFeedConstants.ODDSINDEXES_ODDS_02_PREVIOUS = 'YE';
            IndexFeedConstants.ODDSINDEXES_ODDS_0_PREVIOUS = 'YB';
            IndexFeedConstants.ODDSINDEXES_ODDS_1 = 'XA';
            IndexFeedConstants.ODDSINDEXES_ODDS_10 = 'XD';
            IndexFeedConstants.ODDSINDEXES_ODDS_10_PREVIOUS = 'YD';
            IndexFeedConstants.ODDSINDEXES_ODDS_1_PREVIOUS = 'YA';
            IndexFeedConstants.ODDSINDEXES_ODDS_2 = 'XC';
            IndexFeedConstants.ODDSINDEXES_ODDS_2_PREVIOUS = 'YC';
            IndexFeedConstants.ODDSINDEXES_ODDS_AH1 = 'XF';
            IndexFeedConstants.ODDSINDEXES_ODDS_AH1_PREVIOUS = 'YF';
            IndexFeedConstants.ODDSINDEXES_ODDS_AH2 = 'XG';
            IndexFeedConstants.ODDSINDEXES_ODDS_AH2_PREVIOUS = 'YG';
            IndexFeedConstants.ODDSINDEXES_ODDS_AVAILABLE = 'OG';
            IndexFeedConstants.ODDSINDEXES_ODDS_EACH_WAY = 'XB';
            IndexFeedConstants.ODDSINDEXES_ODDS_EACH_WAY_PREVIOUS = 'YB';
            IndexFeedConstants.ODDSINDEXES_ODDS_GROUP_TITLE = 'OCT';
            IndexFeedConstants.ODDSINDEXES_ODDS_GROUP_VALUE = 'OC';
            IndexFeedConstants.ODDSINDEXES_ODDS_LABEL_1 = 'LX';
            IndexFeedConstants.ODDSINDEXES_ODDS_LABEL_2 = 'LY';
            IndexFeedConstants.ODDSINDEXES_ODDS_LABEL_3 = 'LZ';
            IndexFeedConstants.ODDSINDEXES_ODDS_ML1 = 'XL';
            IndexFeedConstants.ODDSINDEXES_ODDS_ML1_PREVIOUS = 'YL';
            IndexFeedConstants.ODDSINDEXES_ODDS_ML2 = 'XM';
            IndexFeedConstants.ODDSINDEXES_ODDS_ML2_PREVIOUS = 'YM';
            IndexFeedConstants.ODDSINDEXES_ODDS_OU1 = 'XI';
            IndexFeedConstants.ODDSINDEXES_ODDS_OU1_PREVIOUS = 'YI';
            IndexFeedConstants.ODDSINDEXES_ODDS_OU2 = 'XJ';
            IndexFeedConstants.ODDSINDEXES_ODDS_OU2_PREVIOUS = 'YJ';
            IndexFeedConstants.ODDSINDEXES_ODDS_SCOPE = 'OB';
            IndexFeedConstants.ODDSINDEXES_ODDS_SCOPE_ID = 'OBI';
            IndexFeedConstants.ODDSINDEXES_ODDS_SCOPE_URL = 'OBU';
            IndexFeedConstants.ODDSINDEXES_ODDS_SETTINGS_ALLOW_ODD_HIGHLIGHTING = 'AOH';
            IndexFeedConstants.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_COMPARISON = 'SAC';
            IndexFeedConstants.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH = 'SAP';
            IndexFeedConstants.ODDSINDEXES_ODDS_SETTINGS_SHOW_ALL_BOOKMAKERS_PREMATCH_LIVE = 'SAL';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_10 = 'XC';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_10_PREVIOUS = 'YC';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_20 = 'XN';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_20_PREVIOUS = 'YN';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_3 = 'XO';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_3_PREVIOUS = 'YO';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_5 = 'XB';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_5_PREVIOUS = 'YB';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_6 = 'XP';
            IndexFeedConstants.ODDSINDEXES_ODDS_TOP_6_PREVIOUS = 'YP';
            IndexFeedConstants.ODDSINDEXES_ODDS_TO_WIN = 'XA';
            IndexFeedConstants.ODDSINDEXES_ODDS_TO_WIN_PREVIOUS = 'YA';
            IndexFeedConstants.ODDSINDEXES_ODDS_WINNER = 'XA';
            IndexFeedConstants.ODDSINDEXES_ODDS_WINNER_PREVIOUS = 'YA';
            IndexFeedConstants.ODDSINDEXES_OUTCOME_CHANGE = 'ODD';
            IndexFeedConstants.ODDSINDEXES_OUTCOME_IS_AVAILABLE = 'ODC';
            IndexFeedConstants.ODDSINDEXES_OUTCOME_VALUE = 'ODB';
            IndexFeedConstants.ODDSINDEXES_OVER_UNDER_HANDICAP = 'XK';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_HANDICAP_TYPE = 'MHT';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_HANDICAP_VALUE = 'MHV';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_BONUS_ID = 'MOB';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_IMAGE_URL = 'MPI';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LINK_HTML = 'MN';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LIVE_IN_OFFER_ACTIVE = 'MOA';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_LIVE_IN_OFFER_NAME = 'MON';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_SHOW_TEXT_NOT_LOGO = 'MNN';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_MAIN_BOOKMAKER_URL = 'MP';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_ACTIVE = 'MK';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_BETSLIP = 'MG';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_MOVEMENTS = 'ML';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_PREVIOUS_VALUES = 'MJ';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_VALUES = 'MI';
            IndexFeedConstants.ODDSINDEXES_PREMATCH_ODDS_WRAPPER_CLASSES = 'MM';
            IndexFeedConstants.ODDSINDEXES_SELECTED_BETTING_TYPE = 'SOA';
            IndexFeedConstants.ODDSINDEXES_SELECTED_ODDS_SCOPE = 'SOB';
            IndexFeedConstants.ODDSINDEXES_TEXT_BEHIND_ODDS = 'OF';
            IndexFeedConstants.ONCOURSETRACKINDEXES_EVENT_STAGE_ID = 'OAA';
            IndexFeedConstants.ONCOURSETRACKINDEXES_VALUE = 'OAB';
            IndexFeedConstants.PARTICIPANTEVENTLISTINDEXES_END_TIME = 'YY';
            IndexFeedConstants.PARTICIPANTEVENTLISTINDEXES_MYTEAMS_ID = 'YW';
            IndexFeedConstants.PARTICIPANTEVENTLISTINDEXES_STAGE_ID = 'YZ';
            IndexFeedConstants.PARTICIPANTEVENTLISTINDEXES_START_TIME = 'YX';
            IndexFeedConstants.PLAYERPROFILEINDEXES_EVENT_ID = 'EID';
            IndexFeedConstants.PLAYERPROFILEINDEXES_EVENT_START_TIME = 'ES';
            IndexFeedConstants.PLAYERPROFILEINDEXES_IMAGE_ID = 'IH';
            IndexFeedConstants.PLAYERPROFILEINDEXES_SCORE = 'SH';
            IndexFeedConstants.PLAYERPROFILEINDEXES_SCORE_FT = 'SFH';
            IndexFeedConstants.PLAYERPROFILEINDEXES_SEASON_LABEL = 'PAC';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TAB_ID = 'PAA';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TAB_LABEL = 'PAB';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TAB_TYPE = 'PAP';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_ID = 'PAQ';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_ID_AWAY = 'PAO';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_ID_HOME = 'PAN';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_IMAGE_URL = 'PAE';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_NAME = 'PAD';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_TRANSFER_FROM_ID = 'PAL';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TEAM_TRANSFER_TO_ID = 'PAM';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TOURNAMENT_FLAG_ID = 'PAG';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TOURNAMENT_NAME = 'PAF';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TRANSFER_REASON = 'PAJ';
            IndexFeedConstants.PLAYERPROFILEINDEXES_TRANSFER_YEAR = 'PAK';
            IndexFeedConstants.PLAYERPROFILEINDEXES_VALUE = 'PAI';
            IndexFeedConstants.PLAYERPROFILEINDEXES_VALUE_TYPE = 'PAH';
            IndexFeedConstants.PLAYERPROFILEINDEXES_WINNER = 'WIN';
            IndexFeedConstants.PLAYERPROFILEINDEXES_WINNER_FT = 'WF';
            IndexFeedConstants.PLAYERPROFILEINDEXES_WINNER_ICON_SUFFIX = 'WIS';
            IndexFeedConstants.PLAYERSTATSINDEXES_HEADER_ROW = 'PB';
            IndexFeedConstants.PLAYERSTATSINDEXES_ROW = 'PC';
            IndexFeedConstants.PLAYERSTATSINDEXES_ROW_FORMAT = 'PD';
            IndexFeedConstants.PLAYERSTATSINDEXES_ROW_ICON = 'PE';
            IndexFeedConstants.PLAYERSTATSINDEXES_ROW_STATUS = 'PS';
            IndexFeedConstants.PLAYERSTATSINDEXES_TAB_LABEL = 'PA';
            IndexFeedConstants.PORTABLECONFIGINDEXES_DATA_FOR_FEED = 'CD';
            IndexFeedConstants.PORTABLECONFIGINDEXES_MAX_SDK_VERSION = 'CSA';
            IndexFeedConstants.PORTABLECONFIGINDEXES_MAX_VERSION = 'CA';
            IndexFeedConstants.PORTABLECONFIGINDEXES_MIN_SDK_VERSION = 'CSI';
            IndexFeedConstants.PORTABLECONFIGINDEXES_MIN_VERSION = 'CI';
            IndexFeedConstants.PORTABLECONFIGINDEXES_PACKAGE = 'CP';
            IndexFeedConstants.PORTABLECONFIGINDEXES_TYPE = 'CT';
            IndexFeedConstants.RANKINGINDEXES_RANKING_NAME = 'RAN';
            IndexFeedConstants.RANKINGINDEXES_RANKING_STATS_TABLE = 'RST';
            IndexFeedConstants.RANKINGSFEEDINDEXES_DATE = 'RRC';
            IndexFeedConstants.RANKINGSFEEDINDEXES_NAME = 'RRN';
            IndexFeedConstants.RANKINGSFEEDINDEXES_PARTICIPANT_ID = 'RPI';
            IndexFeedConstants.RANKINGSFEEDINDEXES_PARTICIPANT_IMAGE = 'RRI';
            IndexFeedConstants.RANKINGSFEEDINDEXES_PARTICIPANT_NAME = 'RRP';
            IndexFeedConstants.RANKINGSFEEDINDEXES_PARTICIPANT_TYPE_ID = 'RPT';
            IndexFeedConstants.RANKINGSFEEDINDEXES_RANK = 'RRR';
            IndexFeedConstants.RANKINGSFEEDINDEXES_RESULT = 'RRL';
            IndexFeedConstants.RANKINGSFEEDINDEXES_RESULT_LABEL = 'RRB';
            IndexFeedConstants.RANKINGSFEEDINDEXES_TITLE = 'RRT';
            IndexFeedConstants.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID = 'RAC';
            IndexFeedConstants.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID_END = 'RAD';
            IndexFeedConstants.RESULTSINDEXES_ROW_VALUE = 'RAB';
            IndexFeedConstants.RESULTSINDEXES_ROW_VALUE_TYPE_ID = 'RAA';
            IndexFeedConstants.RESULTSINDEXES_ROW_VALUE_UPDATED = 'RAU';
            IndexFeedConstants.SEASONLISTINDEXES_NAME = 'THN';
            IndexFeedConstants.SEASONLISTINDEXES_STATS_TYPE = 'THT';
            IndexFeedConstants.SEASONLISTINDEXES_TOURNAMENT_ID = 'THI';
            IndexFeedConstants.SEASONLISTINDEXES_TOURNAMENT_STAGE_ID = 'THS';
            IndexFeedConstants.SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID = 'DZ';
            IndexFeedConstants.SHAREDINDEXES_AUDIO_COMMENTS = 'QQ';
            IndexFeedConstants.SHAREDINDEXES_AWAY_CRICKET_RUN_RATE = 'RV';
            IndexFeedConstants.SHAREDINDEXES_AWAY_CURRENT_RESULT = 'AH';
            IndexFeedConstants.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER = 'BZ';
            IndexFeedConstants.SHAREDINDEXES_AWAY_ERRORS = 'WI';
            IndexFeedConstants.SHAREDINDEXES_AWAY_FULL_TIME_RESULT = 'AU';
            IndexFeedConstants.SHAREDINDEXES_AWAY_GOAL_UNDER_REVIEW = 'GRB';
            IndexFeedConstants.SHAREDINDEXES_AWAY_HITS = 'WG';
            IndexFeedConstants.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED = 'IB';
            IndexFeedConstants.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND = 'ID';
            IndexFeedConstants.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_SUB = 'IF';
            IndexFeedConstants.SHAREDINDEXES_AWAY_PITCHER = 'WP';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RED_CARD_COUNT = 'AK';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_1 = 'BB';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_2 = 'BD';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_3 = 'BF';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_4 = 'BH';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_5 = 'BJ';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_6 = 'BL';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_7 = 'BN';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_8 = 'BP';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_9 = 'BR';
            IndexFeedConstants.SHAREDINDEXES_AWAY_RESULT_PERIOD_X = 'BT';
            IndexFeedConstants.SHAREDINDEXES_BLOCKED_GEOIP_STREAMING = 'BGS';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_BATSMAN = 'WJ';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_BOWLER = 'WK';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_LIVE_SENTENCE = 'LS';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_RECENT_OVERS = 'WQ';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_SENTENCE = 'AQ';
            IndexFeedConstants.SHAREDINDEXES_CRICKET_TYPE = 'WX';
            IndexFeedConstants.SHAREDINDEXES_CURRENT_DISTANCE = 'NJ';
            IndexFeedConstants.SHAREDINDEXES_CURRENT_LAP = 'NJL';
            IndexFeedConstants.SHAREDINDEXES_DISTANCE = 'NK';
            IndexFeedConstants.SHAREDINDEXES_EVENT_ID = 'AA';
            IndexFeedConstants.SHAREDINDEXES_EVENT_ROUND_NAME = 'ER';
            IndexFeedConstants.SHAREDINDEXES_EVENT_ROUND_NUMBER = 'ERN';
            IndexFeedConstants.SHAREDINDEXES_EVENT_STAGE_ID = 'AC';
            IndexFeedConstants.SHAREDINDEXES_EVENT_STAGE_TYPE_FROM_EVENT_STAGE_ID = 'CR';
            IndexFeedConstants.SHAREDINDEXES_EVENT_STAGE_TYPE_ID = 'AB';
            IndexFeedConstants.SHAREDINDEXES_FEED_SIGNATURE = 'A1';
            IndexFeedConstants.SHAREDINDEXES_FINAL_SCORE = 'DX';
            IndexFeedConstants.SHAREDINDEXES_GAME_TIME = 'BX';
            IndexFeedConstants.SHAREDINDEXES_GAP = 'NG';
            IndexFeedConstants.SHAREDINDEXES_GOLF_FINAL_RESULT = 'GR';
            IndexFeedConstants.SHAREDINDEXES_GOLF_HOLE_RESULT = 'GH';
            IndexFeedConstants.SHAREDINDEXES_GOLF_PAR_TODAY = 'GI';
            IndexFeedConstants.SHAREDINDEXES_GOLF_TOTAL_HOLES_PLAYED = 'GS';
            IndexFeedConstants.SHAREDINDEXES_GRID = 'NE';
            IndexFeedConstants.SHAREDINDEXES_HAS_LINEUPS = 'AX';
            IndexFeedConstants.SHAREDINDEXES_HAS_LIVE_CENTRE = 'AW';
            IndexFeedConstants.SHAREDINDEXES_HIGHLIGHTS = 'AV';
            IndexFeedConstants.SHAREDINDEXES_HOME_CRICKET_RUN_RATE = 'RU';
            IndexFeedConstants.SHAREDINDEXES_HOME_CURRENT_RESULT = 'AG';
            IndexFeedConstants.SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER = 'BY';
            IndexFeedConstants.SHAREDINDEXES_HOME_ERRORS = 'WH';
            IndexFeedConstants.SHAREDINDEXES_HOME_FULL_TIME_RESULT = 'AT';
            IndexFeedConstants.SHAREDINDEXES_HOME_GOAL_UNDER_REVIEW = 'GRA';
            IndexFeedConstants.SHAREDINDEXES_HOME_HITS = 'WF';
            IndexFeedConstants.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED = 'IA';
            IndexFeedConstants.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND = 'IC';
            IndexFeedConstants.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_SUB = 'IE';
            IndexFeedConstants.SHAREDINDEXES_HOME_PITCHER = 'WO';
            IndexFeedConstants.SHAREDINDEXES_HOME_RED_CARD_COUNT = 'AJ';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_1 = 'BA';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_2 = 'BC';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_3 = 'BE';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_4 = 'BG';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_5 = 'BI';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_6 = 'BK';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_7 = 'BM';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_8 = 'BO';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_9 = 'BQ';
            IndexFeedConstants.SHAREDINDEXES_HOME_RESULT_PERIOD_X = 'BS';
            IndexFeedConstants.SHAREDINDEXES_LAPS = 'NC';
            IndexFeedConstants.SHAREDINDEXES_LAPS_DISTANCE = 'NH';
            IndexFeedConstants.SHAREDINDEXES_LIVE = 'AI';
            IndexFeedConstants.SHAREDINDEXES_MATCH_END_UTIME = 'AP';
            IndexFeedConstants.SHAREDINDEXES_MATCH_START_UTIME = 'AD';
            IndexFeedConstants.SHAREDINDEXES_ON_TRACK = 'WZ';
            IndexFeedConstants.SHAREDINDEXES_PARTICIPANT_CYCLING_JERSEY = 'WY';
            IndexFeedConstants.SHAREDINDEXES_PARTICIPANT_STATUS = 'WT';
            IndexFeedConstants.SHAREDINDEXES_PARTICIPANT_STATUS_SUBTYPE = 'VX';
            IndexFeedConstants.SHAREDINDEXES_PERIOD_START_UTIME = 'AO';
            IndexFeedConstants.SHAREDINDEXES_PITSTOPS = 'NF';
            IndexFeedConstants.SHAREDINDEXES_RANK = 'WS';
            IndexFeedConstants.SHAREDINDEXES_RANK_TIED = 'WW';
            IndexFeedConstants.SHAREDINDEXES_REFRESH_UTIME = 'A2';
            IndexFeedConstants.SHAREDINDEXES_SERVICE = 'WC';
            IndexFeedConstants.SHAREDINDEXES_SOURCE_TYPE_OF_GAME = 'BW';
            IndexFeedConstants.SHAREDINDEXES_SPORT_ID = 'SA';
            IndexFeedConstants.SHAREDINDEXES_STARTING_PRICE = 'NM';
            IndexFeedConstants.SHAREDINDEXES_STATS_SORT_KEY = 'NI';
            IndexFeedConstants.SHAREDINDEXES_TIME = 'ND';
            IndexFeedConstants.SHAREDINDEXES_TOTAL_RESULT = 'BI';
            IndexFeedConstants.SHAREDINDEXES_TOURNAMENT_NAME = 'ZA';
            IndexFeedConstants.SHAREDINDEXES_TOURNAMENT_STAGE_ID = 'ZC';
            IndexFeedConstants.SHAREDINDEXES_UPCOMING_DRAW_ID = 'UD';
            IndexFeedConstants.SHAREDINDEXES_UPDATE_LOCAL_FEED_UPDATED_TIME = 'UL';
            IndexFeedConstants.SHAREDINDEXES_WEIGHT = 'NL';
            IndexFeedConstants.STANDINGSINDEXES_AGAINST_PERCENTAGE = 'TAP';
            IndexFeedConstants.STANDINGSINDEXES_COUNTRY = 'TC';
            IndexFeedConstants.STANDINGSINDEXES_COUNTRY_ID = 'TB';
            IndexFeedConstants.STANDINGSINDEXES_COUNTRY_TYPE = 'TT';
            IndexFeedConstants.STANDINGSINDEXES_COUNTRY_TYPE_ID = 'TA';
            IndexFeedConstants.STANDINGSINDEXES_CRICKET_LIVE_TABLE_NET_RUN_RATE = 'LG';
            IndexFeedConstants.STANDINGSINDEXES_CRICKET_LIVE_TABLE_WINS_WITH_ABANDONED = 'LM';
            IndexFeedConstants.STANDINGSINDEXES_CRICKET_NET_RUN_RATE = 'TG';
            IndexFeedConstants.STANDINGSINDEXES_CRICKET_RUNS = 'TGR';
            IndexFeedConstants.STANDINGSINDEXES_CRICKET_WINS_WITH_ABANDONED = 'TM';
            IndexFeedConstants.STANDINGSINDEXES_DRAWS = 'TDR';
            IndexFeedConstants.STANDINGSINDEXES_DYNAMIC_COLUMNS_DATA = 'DCD';
            IndexFeedConstants.STANDINGSINDEXES_DYNAMIC_COLUMNS_DATA_LIVE = 'DCDL';
            IndexFeedConstants.STANDINGSINDEXES_DYNAMIC_COLUMNS_LEGEND = 'DCL';
            IndexFeedConstants.STANDINGSINDEXES_DYNAMIC_COLUMNS_SIZES = 'DCS';
            IndexFeedConstants.STANDINGSINDEXES_EXTENDED_TYPE = 'ETN';
            IndexFeedConstants.STANDINGSINDEXES_EXTENDED_TYPE_ID = 'ETI';
            IndexFeedConstants.STANDINGSINDEXES_EXTRA_INFO_RANK_LEGEND = 'TV';
            IndexFeedConstants.STANDINGSINDEXES_EXTRA_INFO_TEXT = 'TQ';
            IndexFeedConstants.STANDINGSINDEXES_GOALS = 'TG';
            IndexFeedConstants.STANDINGSINDEXES_GOALS_PER_MATCH = 'TGM';
            IndexFeedConstants.STANDINGSINDEXES_HAS_SPACE_AFTER_EXTRA_INFO = 'TX';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_DRAW_DRAW = 'HDD';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_DRAW_LOSS = 'HDL';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_DRAW_WIN = 'HDW';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_LOSS_DRAW = 'HLD';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_LOSS_LOSS = 'HLL';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_LOSS_WIN = 'HLW';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_WIN_DRAW = 'HWD';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_WIN_LOSS = 'HWL';
            IndexFeedConstants.STANDINGSINDEXES_HTFT_WIN_WIN = 'HWW';
            IndexFeedConstants.STANDINGSINDEXES_INFO_TEXT = 'TIT';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_AWAY_PARTICIPANT_ID_ENCODED = 'LMA';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_AWAY_URL = 'LMB';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_EVENT_ID_ENCODED = 'LME';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_HOME_PARTICIPANT_ID_ENCODED = 'LMH';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_HOME_URL = 'LMI';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_LINK = 'LML';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_SYMBOL = 'LMS';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_TITLE = 'LMT';
            IndexFeedConstants.STANDINGSINDEXES_LAST_MATCH_TYPE = 'LMU';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_GOALS = 'LG';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_LIVE_EVENT_ID = 'LE';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_MATCHES = 'LM';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_PCT_OR_POINTS = 'LC';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_POSITION_CHANGE = 'LK';
            IndexFeedConstants.STANDINGSINDEXES_LIVE_TABLE_SCORE = 'LS';
            IndexFeedConstants.STANDINGSINDEXES_LOSSES = 'TL';
            IndexFeedConstants.STANDINGSINDEXES_LOSSES_IN_OVERTIME = 'TLO';
            IndexFeedConstants.STANDINGSINDEXES_LOSSES_REGULAR = 'TLR';
            IndexFeedConstants.STANDINGSINDEXES_MAIN_MENU_TRANS = 'TZ';
            IndexFeedConstants.STANDINGSINDEXES_MATCHES = 'TM';
            IndexFeedConstants.STANDINGSINDEXES_NO_RESULT_MATCHES = 'NRM';
            IndexFeedConstants.STANDINGSINDEXES_OVERALL_LEGEND = 'TO';
            IndexFeedConstants.STANDINGSINDEXES_OVERALL_LEGEND_STATIC = 'TOS';
            IndexFeedConstants.STANDINGSINDEXES_OVER_UNDER_OVER = 'OUO';
            IndexFeedConstants.STANDINGSINDEXES_OVER_UNDER_UNDER = 'OUU';
            IndexFeedConstants.STANDINGSINDEXES_PARTICIPANTS_IMAGE_MAP_URL = 'TZI';
            IndexFeedConstants.STANDINGSINDEXES_PARTICIPANTS_IMAGE_OFFSET = 'IM';
            IndexFeedConstants.STANDINGSINDEXES_PARTICIPANT_IDS = 'TI';
            IndexFeedConstants.STANDINGSINDEXES_PARTICIPANT_NAMES = 'TN';
            IndexFeedConstants.STANDINGSINDEXES_PCT = 'PC';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_0_POINT_MATCHES = 'TPD';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_1_POINT_MATCHES = 'TPC';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_2_POINT_MATCHES = 'TPB';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_3_POINT_MATCHES = 'TPA';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_GOALS_FOR_AGAINST_DIFF = 'TPF';
            IndexFeedConstants.STANDINGSINDEXES_PESAPALLO_POINTS_PER_EVENT = 'TPP';
            IndexFeedConstants.STANDINGSINDEXES_POINTS = 'TP';
            IndexFeedConstants.STANDINGSINDEXES_RANK = 'TR';
            IndexFeedConstants.STANDINGSINDEXES_RANK_CLASS = 'TU';
            IndexFeedConstants.STANDINGSINDEXES_RANK_COLOR = 'TUC';
            IndexFeedConstants.STANDINGSINDEXES_ROUND_TYPE = 'TE';
            IndexFeedConstants.STANDINGSINDEXES_ROUND_TYPE_ID = 'TD';
            IndexFeedConstants.STANDINGSINDEXES_SELECTED_PARTICIPANT = 'TS';
            IndexFeedConstants.STANDINGSINDEXES_SUB_MENU_TRANS = 'TZS';
            IndexFeedConstants.STANDINGSINDEXES_WINS = 'TW';
            IndexFeedConstants.STANDINGSINDEXES_WINS_IN_OVERTIME = 'TWO';
            IndexFeedConstants.STANDINGSINDEXES_WINS_REGULAR = 'TWR';
            IndexFeedConstants.STANDINGSLISTINDEXES_CATEGORY_ID = 'TF';
            IndexFeedConstants.STANDINGSLISTINDEXES_COUNTRY = 'TB';
            IndexFeedConstants.STANDINGSLISTINDEXES_COUNTRY_ID = 'TC';
            IndexFeedConstants.STANDINGSLISTINDEXES_SEASON_ID = 'TT';
            IndexFeedConstants.STANDINGSLISTINDEXES_STAGE = 'TS';
            IndexFeedConstants.STANDINGSLISTINDEXES_TOP_LEAGUE_KEY = 'TG';
            IndexFeedConstants.STANDINGSLISTINDEXES_TOURNAMENT_ID = 'TD';
            IndexFeedConstants.STANDINGSLISTINDEXES_TOURNAMENT_NAME = 'TA';
            IndexFeedConstants.STANDINGSLISTINDEXES_TOURNAMENT_TEMPLATE_ID = 'TE';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_AWAY_TABLE_HASH = 'STA';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_DRAW_HASH = 'SD';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_FORM_TABLE_HASH = 'STF';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_HOME_TABLE_HASH = 'STH';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_LIVE_TABLE_HASH = 'SL';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_TABLE_HASH = 'ST';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_TABS = 'TB';
            IndexFeedConstants.STANDINGSSIGNSINDEXES_TOP_SCORERS_HASH = 'SS';
            IndexFeedConstants.STANDINGSTABSINDEXES_ADVANCED_HASH = 'SD';
            IndexFeedConstants.STANDINGSTABSINDEXES_AVAILABLE_TABLES = 'TB';
            IndexFeedConstants.STANDINGSTABSINDEXES_AWAY_FORM_HASH = 'SI';
            IndexFeedConstants.STANDINGSTABSINDEXES_AWAY_HALF_TIME_FULL_TIME_HASH = 'SO';
            IndexFeedConstants.STANDINGSTABSINDEXES_AWAY_HASH = 'SC';
            IndexFeedConstants.STANDINGSTABSINDEXES_AWAY_OVER_UNDER_HASH = 'SL';
            IndexFeedConstants.STANDINGSTABSINDEXES_HOME_FORM_HASH = 'SH';
            IndexFeedConstants.STANDINGSTABSINDEXES_HOME_HALF_TIME_FULL_TIME_HASH = 'SN';
            IndexFeedConstants.STANDINGSTABSINDEXES_HOME_HASH = 'SB';
            IndexFeedConstants.STANDINGSTABSINDEXES_HOME_OVER_UNDER_HASH = 'SK';
            IndexFeedConstants.STANDINGSTABSINDEXES_OVERALL_FORM_HASH = 'SE';
            IndexFeedConstants.STANDINGSTABSINDEXES_OVERALL_HALF_TIME_FULL_TIME_HASH = 'SM';
            IndexFeedConstants.STANDINGSTABSINDEXES_OVERALL_HASH = 'SA';
            IndexFeedConstants.STANDINGSTABSINDEXES_OVERALL_LIVE_HASH = 'ST';
            IndexFeedConstants.STANDINGSTABSINDEXES_OVERALL_OVER_UNDER_HASH = 'SF';
            IndexFeedConstants.STANDINGSTABSINDEXES_STREAKS_HASH = 'SG';
            IndexFeedConstants.STANDINGSTABSINDEXES_TOP_SCORERS_HASH = 'SJ';
            IndexFeedConstants.STATISTICSINDEXES_AWAY_VALUE = 'SI';
            IndexFeedConstants.STATISTICSINDEXES_GROUP_LABEL = 'SF';
            IndexFeedConstants.STATISTICSINDEXES_HOME_VALUE = 'SH';
            IndexFeedConstants.STATISTICSINDEXES_NAME = 'SG';
            IndexFeedConstants.STATISTICSINDEXES_TAB_LABEL = 'SE';
            IndexFeedConstants.STATSINDEXES_ASSISTS = 'AS';
            IndexFeedConstants.STATSINDEXES_BALL_NUMBER = 'BN';
            IndexFeedConstants.STATSINDEXES_BALL_TYPE = 'BT';
            IndexFeedConstants.STATSINDEXES_BALL_VALUE = 'BV';
            IndexFeedConstants.STATSINDEXES_IS_ADDITIONAL = 'AL';
            IndexFeedConstants.STATSINDEXES_IS_CHANGED = 'CH';
            IndexFeedConstants.STATSINDEXES_OVER_SENTENCE = 'OS';
            IndexFeedConstants.STATSINDEXES_PARTICIPANT_TYPE = 'PT';
            IndexFeedConstants.STATSINDEXES_POINTS = 'PT';
            IndexFeedConstants.STATSINDEXES_SCORE = 'SC';
            IndexFeedConstants.STATSINDEXES_SERVICE_LOST_PARTICIPANT_TYPE = 'SLPT';
            IndexFeedConstants.STATSINDEXES_SERVICE_PARTICIPANT_TYPE = 'SPT';
            IndexFeedConstants.SUMMARYINDEXES_AWAY_RESULT = 'IH';
            IndexFeedConstants.SUMMARYINDEXES_BATSMAN = 'SIA';
            IndexFeedConstants.SUMMARYINDEXES_BEST_OF_FRAMES = 'DY';
            IndexFeedConstants.SUMMARYINDEXES_BOWLER = 'SIB';
            IndexFeedConstants.SUMMARYINDEXES_BROADCASTS = 'TA';
            IndexFeedConstants.SUMMARYINDEXES_BROADCASTS_BOOKMAKERS = 'TVB';
            IndexFeedConstants.SUMMARYINDEXES_BROADCASTS_TV = 'TVT';
            IndexFeedConstants.SUMMARYINDEXES_EVENT_STAGE_STATUS_TYPE_ID = 'STT';
            IndexFeedConstants.SUMMARYINDEXES_FIFTH_SET = 'RG';
            IndexFeedConstants.SUMMARYINDEXES_FIRST_SET = 'RC';
            IndexFeedConstants.SUMMARYINDEXES_FOURTH_SET = 'RF';
            IndexFeedConstants.SUMMARYINDEXES_HOME_RESULT = 'IG';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_ADDED_TIME = 'ID';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_ADDED_TIME_NEW = 'IDX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_ID = 'III';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_ID_NEW = 'IIIX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_PLAYER_ID = 'IM';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_PLAYER_ID_NEW = 'IMX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_PLAYER_NAME = 'IF';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_PLAYER_NAME_NEW = 'IFX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SIDE = 'IA';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SIDE_NEW = 'IAX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SUBTYPE = 'IJ';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SUBTYPE_NAME = 'IL';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SUBTYPE_NAME_NEW = 'ILX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_SUBTYPE_NEW = 'IJX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TIME = 'IB';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TIME_NEW = 'IBX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TIME_SEC = 'IC';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TIME_SEC_NEW = 'ICX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TYPE = 'IE';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TYPE_NAME = 'IK';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TYPE_NAME_NEW = 'IKX';
            IndexFeedConstants.SUMMARYINDEXES_INCIDENT_TYPE_NEW = 'IEX';
            IndexFeedConstants.SUMMARYINDEXES_IS_MAIN_STAGE = 'RM';
            IndexFeedConstants.SUMMARYINDEXES_MATCH_INFO_TYPE = 'MIT';
            IndexFeedConstants.SUMMARYINDEXES_MATCH_INFO_VALUE = 'MIV';
            IndexFeedConstants.SUMMARYINDEXES_MATCH_OVERALL_TIME = 'RB';
            IndexFeedConstants.SUMMARYINDEXES_RECENT_OVERS = 'SIC';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_CATEGORY = 'SPC';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_LABEL = 'SPE';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_COUNTRY_ID = 'SPF';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_COUNTRY_NAME = 'SPG';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_ID = 'SPI';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_IS_UNSURE = 'SPU';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_NAME = 'SPN';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_TEAM = 'SPT';
            IndexFeedConstants.SUMMARYINDEXES_SCRATCH_PLAYER_UNSURE_LABEL = 'SPD';
            IndexFeedConstants.SUMMARYINDEXES_SECOND_SET = 'RD';
            IndexFeedConstants.SUMMARYINDEXES_STAGE_IS_CANCELLED = 'RX';
            IndexFeedConstants.SUMMARYINDEXES_STAGE_TEXT = 'RN';
            IndexFeedConstants.SUMMARYINDEXES_TEAM_MEMBER_COUNTRY_ID = 'TMC';
            IndexFeedConstants.SUMMARYINDEXES_TEAM_MEMBER_ID = 'TMI';
            IndexFeedConstants.SUMMARYINDEXES_TEAM_MEMBER_NAME = 'TMN';
            IndexFeedConstants.SUMMARYINDEXES_TEAM_MEMBER_SIDE = 'TMS';
            IndexFeedConstants.SUMMARYINDEXES_THIRD_SET = 'RE';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_CYCLING_JERSEY_TRANSLATE = 'RK';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_CYCLING_JERSEY_TYPE = 'RJ';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_GOLF_AWAY_RESULT = 'RA';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_GOLF_HOLE_DATA = 'RR';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_GOLF_HOME_RESULT = 'RH';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_GOLF_ROUND_NAME = 'RL';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_RACING_GAP = 'RO';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_RACING_IS_LIVE = 'RI';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_RACING_RANK = 'RP';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_RACING_STATUS_SHORT_NAME = 'RS';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_RACING_TIME = 'RT';
            IndexFeedConstants.SUMMARYPARTICIPANTINDEXES_STAGE_ID = 'RY';
            IndexFeedConstants.TEAMSQUADINDEXES_FLAG_ID = 'FI';
            IndexFeedConstants.TEAMSQUADINDEXES_GROUP_NAME = 'GN';
            IndexFeedConstants.TEAMSQUADINDEXES_GROUP_PLAYER_TYPE = 'GT';
            IndexFeedConstants.TEAMSQUADINDEXES_PLAYER_COUNTRY_ID = 'PC';
            IndexFeedConstants.TEAMSQUADINDEXES_PLAYER_ID = 'PI';
            IndexFeedConstants.TEAMSQUADINDEXES_PLAYER_JERSEY_NUM = 'PJ';
            IndexFeedConstants.TEAMSQUADINDEXES_PLAYER_NAME = 'PN';
            IndexFeedConstants.TEAMSQUADINDEXES_PLAYER_TYPE_ID = 'TI';
            IndexFeedConstants.TOPSCORERSINDEXES_ACTIVE_PLAYER = 'UB';
            IndexFeedConstants.TOPSCORERSINDEXES_ASISTS_SECOND = 'UL';
            IndexFeedConstants.TOPSCORERSINDEXES_ASSISTS = 'UK';
            IndexFeedConstants.TOPSCORERSINDEXES_GOALS = 'UJ';
            IndexFeedConstants.TOPSCORERSINDEXES_LEGEND = 'UM';
            IndexFeedConstants.TOPSCORERSINDEXES_MENU_TRANS = 'TZ';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_COUNTRY_ID = 'UC';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_ID = 'UP';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_NAME = 'UF';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_POSITION_NAME = 'UPN';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_POSITION_ORDER = 'UPO';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_TEAM_ID = 'UT';
            IndexFeedConstants.TOPSCORERSINDEXES_PLAYER_TYPE_ID = 'UH';
            IndexFeedConstants.TOPSCORERSINDEXES_POINTS = 'UI';
            IndexFeedConstants.TOPSCORERSINDEXES_RANK = 'UA';
            IndexFeedConstants.TOPSCORERSINDEXES_TEAM_NAME = 'UU';
            IndexFeedConstants.TOURNAMENTSTAGEEVENTSINDEXES_NUMBER_OF_PAGES = 'PW';
            IndexFeedConstants.TRANSFERSINDEXES_AFFECTED_TEAM = 'TEAT';
            IndexFeedConstants.TRANSFERSINDEXES_COUNTRY_NAME = 'CRNA';
            IndexFeedConstants.TRANSFERSINDEXES_DATE = 'DATE';
            IndexFeedConstants.TRANSFERSINDEXES_PARTICIPANT_ICON = 'PI';
            IndexFeedConstants.TRANSFERSINDEXES_PLAYER_URL = 'PURL';
            IndexFeedConstants.TRANSFERSINDEXES_PROPERTY_ID = 'PID';
            IndexFeedConstants.TRANSFERSINDEXES_TEAM_URL = 'TURL';
            IndexFeedConstants.TRANSFERSINDEXES_TRANSFER_DIRECTION = 'TD';
            IndexFeedConstants.TRANSFERSINDEXES_TRANSFER_TYPE = 'TT';
            IndexFeedConstants.TVINDEXES_BUNDLE_APPLE_PRODUCT_ID = 'TAP';
            IndexFeedConstants.TVINDEXES_BUNDLE_EXPIRATION_PERIOD = 'TBD';
            IndexFeedConstants.TVINDEXES_BUNDLE_FOR_FREE = 'TFB';
            IndexFeedConstants.TVINDEXES_BUNDLE_IS_ACTIVE = 'TIA';
            IndexFeedConstants.TVINDEXES_BUNDLE_IS_PURCHASABLE = 'TIP';
            IndexFeedConstants.TVINDEXES_BUNDLE_NAME = 'TBN';
            IndexFeedConstants.TVINDEXES_BUNDLE_PRICE_CURRENCY_CODE = 'TCC';
            IndexFeedConstants.TVINDEXES_BUNDLE_PRICE_CURRENCY_VALUE = 'TCV';
            IndexFeedConstants.TVINDEXES_BUNDLE_UUID = 'TUI';
            IndexFeedConstants.TVINDEXES_CHANNELS_STREAM_TYPE_ID = 'CST';
            IndexFeedConstants.TVINDEXES_CHANNEL_ID = 'CIT';
            IndexFeedConstants.TVINDEXES_CHANNEL_IMAGE_BIG = 'CIB';
            IndexFeedConstants.TVINDEXES_CHANNEL_IMAGE_SMALL = 'CIS';
            IndexFeedConstants.TVINDEXES_CHANNEL_NAME = 'CNT';
            IndexFeedConstants.TVINDEXES_END_POINTER = 'TIE';
            IndexFeedConstants.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_IS_FINAL = 'UF';
            IndexFeedConstants.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_LEVEL = 'UL';
            IndexFeedConstants.UPCOMINGDRAWINDEXES_UPCOMING_DRAW_ROUND_NAME = 'UN';
            IndexFeedConstants.UPDATEINDEXES_AWAY_GOAL_DISALLOWED = 'GDB';
            IndexFeedConstants.UPDATEINDEXES_AWAY_GOLF_PAR_DIFF = 'PG';
            IndexFeedConstants.UPDATEINDEXES_AWAY_PENALTY_MISSED = 'ED';
            IndexFeedConstants.UPDATEINDEXES_AWAY_PENALTY_SHOT = 'EB';
            IndexFeedConstants.UPDATEINDEXES_AWAY_SCORES_CHANGED = 'SCB';
            IndexFeedConstants.UPDATEINDEXES_HAS_LIVE_TABLE = 'ZO';
            IndexFeedConstants.UPDATEINDEXES_HOME_GOAL_DISALLOWED = 'GDA';
            IndexFeedConstants.UPDATEINDEXES_HOME_GOLF_PAR_DIFF = 'PF';
            IndexFeedConstants.UPDATEINDEXES_HOME_PENALTY_MISSED = 'EC';
            IndexFeedConstants.UPDATEINDEXES_HOME_PENALTY_SHOT = 'EA';
            IndexFeedConstants.UPDATEINDEXES_HOME_SCORES_CHANGED = 'SCA';
            IndexFeedConstants.UPDATEINDEXES_IS_IN_TIEBREAK_TO_10 = 'ZI';
            IndexFeedConstants.UPDATEINDEXES_PERIOD_UPDATE_UTIME = 'AR';
            IndexFeedConstants.UPDATELOCALINDEXES_EVENT_ID = 'AA';
            IndexFeedConstants.UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING = 'AL';
            IndexFeedConstants.UPDATELOCALINDEXES_INFO_NOTICE = 'AM';
            IndexFeedConstants.UPDATELOCALINDEXES_SPORT_ID = 'SA';
            return IndexFeedConstants;
        }());



        /***/
    }),
    /* 22 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export SortKeyGeneratorImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return SortKeyGeneratorBuilder;
        });
        var SortKeyGeneratorImpl = /** @class */ (function() {
            function SortKeyGeneratorImpl(leagueSortKey, isStatsResults, statsResultsSortKey, statsSortKey, isNoDuelTournament, isWinterSport, participantStatus, homeScorePart, rank, golfHoleResult, isLeagueTop, isSecondary, isStageSport, endUtime, startUtime, sortByDesc, sortByTime, eventStageTypes, sports, sportId, categoryId, eventStageType, participant, isSeasonPage, homeName, awayName, leagueTitle, utilString, sortKeyHelper, topLeaguesPartBuilder, timePartBuilder, labelPartBuilder, rankPartBuilder) {
                this._leagueSortKey = leagueSortKey;
                this._isStatsResults = isStatsResults;
                this._statsResultsSortKey = statsResultsSortKey;
                this._statsSortKey = statsSortKey;
                this._isNoDuelTournament = isNoDuelTournament;
                this._isWinterSport = isWinterSport;
                this._participantStatus = participantStatus;
                this._homeScorePart = homeScorePart;
                this._rank = rank;
                this._golfHoleResult = golfHoleResult;
                this._isLeagueTop = isLeagueTop;
                this._isSecondary = isSecondary;
                this._isStageSport = isStageSport;
                this._endUtime = endUtime;
                this._startUtime = startUtime;
                this._sortByDesc = sortByDesc;
                this._sortByTime = sortByTime;
                this._eventStageTypes = eventStageTypes;
                this._sports = sports;
                this._sportId = sportId;
                this._categoryId = categoryId;
                this._eventStageType = eventStageType;
                this._participant = participant;
                this._isSeasonPage = isSeasonPage;
                this._homeName = homeName;
                this._awayName = awayName;
                this._leagueTitle = leagueTitle;
                this._utilString = utilString;
                this._sortKeyHelper = sortKeyHelper;
                this._topLeaguesPartBuilder = topLeaguesPartBuilder;
                this._timePartBuilder = timePartBuilder;
                this._labelPartBuilder = labelPartBuilder;
                this._rankPartBuilder = rankPartBuilder;
            }
            SortKeyGeneratorImpl.prototype.generate = function() {
                var sortKey = [];
                //SPORT
                sortKey.push(this._sortKeyHelper.sportPart(this._leagueSortKey));
                //TOP LEAGUES FIRST
                var topLeaguesPart = this._topLeaguesPartBuilder
                    .setParticipant(this._participant)
                    .setIsSeasonPage(this._isSeasonPage)
                    .setIsLeagueTop(this._isLeagueTop)
                    .build();
                sortKey.push(topLeaguesPart.getValue());
                //COUNRTY AND TOURNAMENT TEMPLATE NAME
                sortKey.push(this._sortKeyHelper.horseRacingCountryAndTournamentTemplatePart(this._sports, this._sportId, this._leagueTitle));
                //TIME
                var timePart = this._timePartBuilder
                    .setIsWinterSport(this._isWinterSport)
                    .setIsStageSport(this._isStageSport)
                    .setEndUtime(this._endUtime)
                    .setStartUtime(this._startUtime)
                    .setSortByDesc(this._sortByDesc)
                    .setSortByTime(this._sortByTime)
                    .setSports(this._sports)
                    .setSportId(this._sportId)
                    .setCategoryId(this._categoryId)
                    .setLeagueSortKey(this._leagueSortKey)
                    .setEventStageType(this._eventStageType)
                    .setEventStageTypes(this._eventStageTypes)
                    .setIsNoDuelTournament(this._isNoDuelTournament)
                    .setIsSeasonPage(this._isSeasonPage)
                    .build();
                sortKey.push(timePart.getValue());
                //LABEL
                var labelPart = this._labelPartBuilder
                    .setLeagueSortKey(this._leagueSortKey)
                    .setIsNoDuelTournament(this._isNoDuelTournament)
                    .setIsStatsResults(this._isStatsResults)
                    .setStatsResultsSortKey(this._statsResultsSortKey)
                    .setStatsSortKey(this._statsSortKey)
                    .build();
                sortKey.push(labelPart.getValue());
                //RANK
                var rankPartBuilder = this._rankPartBuilder;
                var rankPart = rankPartBuilder
                    .setIsNoDuelTournament(this._isNoDuelTournament)
                    .setIsWinterSport(this._isWinterSport)
                    .setParticipantStatus(this._participantStatus)
                    .setHomeScorePart(this._homeScorePart)
                    .setRank(this._rank)
                    .setEventStageType(this._eventStageType)
                    .setEventStageTypes(this._eventStageTypes)
                    .setGolfHoleResult(this._golfHoleResult)
                    .build();
                sortKey.push(rankPart.getValue());
                //STARTTIME
                sortKey.push(this._sortKeyHelper.startTimePart(this._sortByTime, this._startUtime));
                //PLAYER NAMES
                sortKey.push(this._sortKeyHelper.playerNamesPart(this._homeName, this._awayName));
                return sortKey.join("");
            };
            return SortKeyGeneratorImpl;
        }());

        var SortKeyGeneratorBuilder = /** @class */ (function() {
            function SortKeyGeneratorBuilder(utilString) {
                this._leagueSortKey = "";
                this._isStatsResults = false;
                this._isNoDuelTournament = false;
                this._isWinterSport = false;
                this._participantStatus = null;
                this._homeScorePart = null;
                this._rank = null;
                this._golfHoleResult = "";
                this._isLeagueTop = false;
                this._isSecondary = false;
                this._isStageSport = false;
                this._sortByDesc = false;
                this._sortByTime = false;
                this._participant = null;
                this._isSeasonPage = false;
                this._homeName = null;
                this._awayName = null;
                this._leagueTitle = "";
                this._utilString = utilString;
            }
            SortKeyGeneratorBuilder.prototype.setLeagueSortKey = function(value) {
                this._leagueSortKey = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsStatsResults = function(value) {
                this._isStatsResults = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setStatsResultsSortKey = function(value) {
                this._statsResultsSortKey = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setStatsSortKey = function(value) {
                this._statsSortKey = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsNoDuelTournament = function(value) {
                this._isNoDuelTournament = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsWinterSport = function(value) {
                this._isWinterSport = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setParticipantStatus = function(value) {
                this._participantStatus = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setHomeScorePart = function(value) {
                this._homeScorePart = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setRank = function(value) {
                this._rank = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setGolfHoleResult = function(value) {
                this._golfHoleResult = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsLeagueTop = function(value) {
                this._isLeagueTop = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsSecondary = function(value) {
                this._isSecondary = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsStageSport = function(value) {
                this._isStageSport = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setEndUtime = function(value) {
                this._endUtime = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setStartUtime = function(value) {
                this._startUtime = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setSortByDesc = function(value) {
                this._sortByDesc = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setSortByTime = function(value) {
                this._sortByTime = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setEventStageTypes = function(value) {
                this._eventStageTypes = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setSports = function(value) {
                this._sports = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setSportId = function(value) {
                this._sportId = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setCategoryId = function(value) {
                this._categoryId = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setEventStageType = function(value) {
                this._eventStageType = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setParticipant = function(value) {
                this._participant = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setIsSeasonPage = function(value) {
                this._isSeasonPage = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setHomeName = function(value) {
                this._homeName = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setAwayName = function(value) {
                this._awayName = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setLeagueTitle = function(value) {
                this._leagueTitle = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setSortKeyHelper = function(value) {
                this._sortKeyHelper = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setTopLeaguesPartBuilder = function(value) {
                this._topLeaguesPartBuilder = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setTimePartBuilder = function(value) {
                this._timePartBuilder = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setLabelPartBuilder = function(value) {
                this._labelPartBuilder = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.setRankPartBuilder = function(value) {
                this._rankPartBuilder = value;
                return this;
            };
            SortKeyGeneratorBuilder.prototype.build = function() {
                return new SortKeyGeneratorImpl(this._leagueSortKey, this._isStatsResults, this._statsResultsSortKey, this._statsSortKey, this._isNoDuelTournament, this._isWinterSport, this._participantStatus, this._homeScorePart, this._rank, this._golfHoleResult, this._isLeagueTop, this._isSecondary, this._isStageSport, this._endUtime, this._startUtime, this._sortByDesc, this._sortByTime, this._eventStageTypes, this._sports, this._sportId, this._categoryId, this._eventStageType, this._participant, this._isSeasonPage, this._homeName, this._awayName, this._leagueTitle, this._utilString, this._sortKeyHelper, this._topLeaguesPartBuilder, this._timePartBuilder, this._labelPartBuilder, this._rankPartBuilder);
            };
            return SortKeyGeneratorBuilder;
        }());



        /***/
    }),
    /* 23 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export LabelPartImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return LabelPartBuilder;
        });
        var LabelPartImpl = /** @class */ (function() {
            function LabelPartImpl(leagueSortKey, isStatsResults, statsResultsSortKey, statsSortKey, isNoDuelTournament) {
                this._leagueSortKey = leagueSortKey;
                this._isStatsResults = isStatsResults;
                this._statsResultsSortKey = statsResultsSortKey;
                this._statsSortKey = statsSortKey;
                this._isNoDuelTournament = isNoDuelTournament;
            }
            LabelPartImpl.prototype.getValue = function() {
                return this._leagueSortKey + this._getStatsPart();
            };
            LabelPartImpl.prototype._getStatsPart = function() {
                var keyPart = [];
                if (this._isStatsResults) {
                    keyPart.push(1000 + this._statsResultsSortKey);
                } else {
                    if (this._statsSortKey && this._isNoDuelTournament) {
                        keyPart.push(1000 + this._statsSortKey);
                    } else {
                        keyPart.push(9999);
                    }
                }
                return keyPart.join("");
            };
            return LabelPartImpl;
        }());

        var LabelPartBuilder = /** @class */ (function() {
            function LabelPartBuilder() {
                this._leagueSortKey = "";
                this._isStatsResults = false;
                this._isNoDuelTournament = false;
            }
            LabelPartBuilder.prototype.setLeagueSortKey = function(value) {
                this._leagueSortKey = value;
                return this;
            };
            LabelPartBuilder.prototype.setIsStatsResults = function(value) {
                this._isStatsResults = value;
                return this;
            };
            LabelPartBuilder.prototype.setStatsResultsSortKey = function(value) {
                this._statsResultsSortKey = value;
                return this;
            };
            LabelPartBuilder.prototype.setStatsSortKey = function(value) {
                this._statsSortKey = value;
                return this;
            };
            LabelPartBuilder.prototype.setIsNoDuelTournament = function(value) {
                this._isNoDuelTournament = value;
                return this;
            };
            LabelPartBuilder.prototype.build = function() {
                return new LabelPartImpl(this._leagueSortKey, this._isStatsResults, this._statsResultsSortKey, this._statsSortKey, this._isNoDuelTournament);
            };
            return LabelPartBuilder;
        }());



        /***/
    }),
    /* 24 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export RankPartImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return RankPartBuilder;
        });
        var RankPartImpl = /** @class */ (function() {
            function RankPartImpl(isNoDuelTournament, isWinterSport, participantStatus, homeScorePart, rank, eventStageType, eventStageTypes, golfHoleResult, utilString) {
                this._isNoDuelTournament = isNoDuelTournament;
                this._isWinterSport = isWinterSport;
                this._participantStatus = participantStatus;
                this._homeScorePart = homeScorePart;
                this._rank = rank;
                this._eventStageType = eventStageType;
                this._eventStageTypes = eventStageTypes;
                this._golfHoleResult = golfHoleResult;
                this._utilString = utilString;
            }
            RankPartImpl.prototype.getValue = function() {
                var keyPart = [];
                if (this._isNoDuelTournament && !this._isWinterSport) {
                    if (this._participantStatus) {
                        keyPart.push("9");
                    } else {
                        keyPart.push("0");
                    }
                    if (this._homeScorePart === "") {
                        keyPart.push("99999999");
                    } else {
                        keyPart.push("9999" + this._utilString.lpad(String(this._rank), 4, "0"));
                    }
                    if (this._eventStageType === this._eventStageTypes.SCHEDULED || this._homeScorePart === "") {
                        var holeStartTime = "9999999999";
                        if (/^[0-9]{3,}$/.test(this._golfHoleResult)) {
                            holeStartTime = String(Number(holeStartTime) + Number(this._golfHoleResult));
                        }
                        keyPart.push(this._utilString.lpad(holeStartTime, 10, "0"));
                    } else {
                        keyPart.push("0000000000");
                    }
                } else {
                    keyPart.push("0000");
                }
                return keyPart.join("");
            };
            return RankPartImpl;
        }());

        var RankPartBuilder = /** @class */ (function() {
            function RankPartBuilder(utilString) {
                this._isNoDuelTournament = false;
                this._isWinterSport = false;
                this._participantStatus = null;
                this._homeScorePart = null;
                this._rank = null;
                this._golfHoleResult = "";
                this._utilString = utilString;
            }
            RankPartBuilder.prototype.setIsNoDuelTournament = function(value) {
                this._isNoDuelTournament = value;
                return this;
            };
            RankPartBuilder.prototype.setIsWinterSport = function(value) {
                this._isWinterSport = value;
                return this;
            };
            RankPartBuilder.prototype.setParticipantStatus = function(value) {
                this._participantStatus = value;
                return this;
            };
            RankPartBuilder.prototype.setHomeScorePart = function(value) {
                this._homeScorePart = value;
                return this;
            };
            RankPartBuilder.prototype.setRank = function(value) {
                this._rank = value;
                return this;
            };
            RankPartBuilder.prototype.setEventStageType = function(value) {
                this._eventStageType = value;
                return this;
            };
            RankPartBuilder.prototype.setEventStageTypes = function(value) {
                this._eventStageTypes = value;
                return this;
            };
            RankPartBuilder.prototype.setGolfHoleResult = function(value) {
                this._golfHoleResult = value;
                return this;
            };
            RankPartBuilder.prototype.build = function() {
                return new RankPartImpl(this._isNoDuelTournament, this._isWinterSport, this._participantStatus, this._homeScorePart, this._rank, this._eventStageType, this._eventStageTypes, this._golfHoleResult, this._utilString);
            };
            return RankPartBuilder;
        }());



        /***/
    }),
    /* 25 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return SortKeyHelperImpl;
        });
        var __read = (undefined && undefined.__read) || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r, ar = [],
                e;
            try {
                while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally {
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally {
                    if (e) throw e.error;
                }
            }
            return ar;
        };
        var SortKeyHelperImpl = /** @class */ (function() {
            function SortKeyHelperImpl(utilString) {
                this._utilString = utilString;
            }
            SortKeyHelperImpl.prototype.sportPart = function(leagueSortKey) {
                return leagueSortKey.substr(0, 2);
            };
            SortKeyHelperImpl.prototype.startTimePart = function(sortByTime, startUTime) {
                if (!sortByTime) {
                    return String(9999999999 + startUTime);
                }
                return "";
            };
            SortKeyHelperImpl.prototype.playerNamesPart = function(homeName, awayName) {
                return this._utilString.rpad(homeName + "", 10, " ") + this._utilString.rpad(awayName + "", 10, " ");
            };
            SortKeyHelperImpl.prototype.horseRacingCountryAndTournamentTemplatePart = function(sports, sportId, title) {
                if (sportId == sports.HORSE_RACING) {
                    var _a = __read(title.split(":"), 2),
                        country = _a[0],
                        tournamentTemplate = _a[1];
                    return this._getReplacedStringPart(country) + this._getReplacedStringPart(tournamentTemplate);
                }
                return "";
            };
            SortKeyHelperImpl.prototype._getReplacedStringPart = function(replacedString) {
                return this._utilString.rpad(replacedString.replace(/\ /g, ""), 15, "0");
            };
            return SortKeyHelperImpl;
        }());



        /***/
    }),
    /* 26 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export TimePartImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TimePartBuilder;
        });
        var TimePartImpl = /** @class */ (function() {
            function TimePartImpl(isWinterSport, isStageSport, endUtime, startUtime, sortByDesc, sortByTime, sports, sportId, categoryId, eventStageType, eventStageTypes, leagueSortKey, isNoDuelTournament, isSeasonPage) {
                this._isWinterSport = isWinterSport;
                this._isStageSport = isStageSport;
                this._endUtime = endUtime;
                this._startUtime = startUtime;
                this._sortByDesc = sortByDesc;
                this._sortByTime = sortByTime;
                this._sports = sports;
                this._sportId = sportId;
                this._categoryId = categoryId;
                this._eventStageType = eventStageType;
                this._eventStageTypes = eventStageTypes;
                this._leagueSortKey = leagueSortKey;
                this._isNoDuelTournament = isNoDuelTournament;
                this._isSeasonPage = isSeasonPage;
            }
            TimePartImpl.prototype.getValue = function() {
                if (this._sortByTime) {
                    return this._getTimePart();
                } else {
                    return this._getStageSportPart();
                }
            };
            TimePartImpl.prototype._getStageSportPart = function() {
                var keyPart = [];
                if (this._isStageSport && (this._isNoDuelTournament || this._isSeasonPage)) {
                    if (this._sportId === this._sports.CYCLING) {
                        keyPart.push(String(this._categoryId) + this._leagueSortKey.substr(this._leagueSortKey.indexOf(".") + 4, 12));
                    }
                    keyPart.push(this._leagueSortKey.substr(2, this._leagueSortKey.indexOf(".") + 2));
                    if (this._sportId === this._sports.HORSE_RACING) {
                        keyPart.push(String(9999999999 - this._startUtime));
                    } else {
                        if (this._eventStageType === this._eventStageTypes.SCHEDULED) {
                            keyPart.push("9");
                            keyPart.push(String(this._startUtime));
                        } else {
                            keyPart.push("00000000000");
                        }
                        var stageTypeSortArray = [0, 3, 1, 2];
                        keyPart.push(String(stageTypeSortArray[this._eventStageType]));
                        keyPart.push(String(9999999999 - this._startUtime));
                    }
                }
                return keyPart.join("");
            };
            TimePartImpl.prototype._getTimePart = function() {
                var uTimePart;
                var descPart = 1;
                if (this._isWinterSport && this._endUtime) {
                    uTimePart = this._endUtime;
                } else {
                    uTimePart = this._startUtime;
                }
                if (this._sortByDesc) {
                    descPart = -1;
                }
                return String(5555555555 + descPart * uTimePart);
            };
            return TimePartImpl;
        }());

        var TimePartBuilder = /** @class */ (function() {
            function TimePartBuilder() {
                this._isWinterSport = false;
                this._isStageSport = false;
                this._sortByDesc = false;
                this._sortByTime = false;
                this._leagueSortKey = "";
                this._isNoDuelTournament = true;
                this._isSeasonPage = false;
            }
            TimePartBuilder.prototype.setIsWinterSport = function(value) {
                this._isWinterSport = value;
                return this;
            };
            TimePartBuilder.prototype.setIsStageSport = function(value) {
                this._isStageSport = value;
                return this;
            };
            TimePartBuilder.prototype.setEndUtime = function(value) {
                this._endUtime = value;
                return this;
            };
            TimePartBuilder.prototype.setStartUtime = function(value) {
                this._startUtime = value;
                return this;
            };
            TimePartBuilder.prototype.setSortByDesc = function(value) {
                this._sortByDesc = value;
                return this;
            };
            TimePartBuilder.prototype.setSortByTime = function(value) {
                this._sortByTime = value;
                return this;
            };
            TimePartBuilder.prototype.setSports = function(value) {
                this._sports = value;
                return this;
            };
            TimePartBuilder.prototype.setSportId = function(value) {
                this._sportId = value;
                return this;
            };
            TimePartBuilder.prototype.setCategoryId = function(value) {
                this._categoryId = value;
                return this;
            };
            TimePartBuilder.prototype.setEventStageType = function(value) {
                this._eventStageType = value;
                return this;
            };
            TimePartBuilder.prototype.setEventStageTypes = function(value) {
                this._eventStageTypes = value;
                return this;
            };
            TimePartBuilder.prototype.setLeagueSortKey = function(value) {
                this._leagueSortKey = value;
                return this;
            };
            TimePartBuilder.prototype.setIsNoDuelTournament = function(value) {
                this._isNoDuelTournament = value;
                return this;
            };
            TimePartBuilder.prototype.setIsSeasonPage = function(value) {
                this._isSeasonPage = value;
                return this;
            };
            TimePartBuilder.prototype.build = function() {
                return new TimePartImpl(this._isWinterSport, this._isStageSport, this._endUtime, this._startUtime, this._sortByDesc, this._sortByTime, this._sports, this._sportId, this._categoryId, this._eventStageType, this._eventStageTypes, this._leagueSortKey, this._isNoDuelTournament, this._isSeasonPage);
            };
            return TimePartBuilder;
        }());



        /***/
    }),
    /* 27 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export TopLeaguesPartImpl */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return TopLeaguesPartBuilder;
        });
        var TopLeaguesPartImpl = /** @class */ (function() {
            function TopLeaguesPartImpl(participant, isSeasonPage, isLeagueTop) {
                this._participant = participant;
                this._isSeasonPage = isSeasonPage;
                this._isLeagueTop = isLeagueTop;
            }
            TopLeaguesPartImpl.prototype.getValue = function() {
                if (this._participant != null) {
                    return "";
                }
                if (!this._isSeasonPage && this._isLeagueTop) {
                    return "a";
                }
                return "b";
            };
            return TopLeaguesPartImpl;
        }());

        var TopLeaguesPartBuilder = /** @class */ (function() {
            function TopLeaguesPartBuilder() {
                this._participant = null;
                this._isSeasonPage = false;
                this._isLeagueTop = false;
            }
            TopLeaguesPartBuilder.prototype.setParticipant = function(value) {
                this._participant = value;
                return this;
            };
            TopLeaguesPartBuilder.prototype.setIsSeasonPage = function(value) {
                this._isSeasonPage = value;
                return this;
            };
            TopLeaguesPartBuilder.prototype.setIsLeagueTop = function(value) {
                this._isLeagueTop = value;
                return this;
            };
            TopLeaguesPartBuilder.prototype.build = function() {
                return new TopLeaguesPartImpl(this._participant, this._isSeasonPage, this._isLeagueTop);
            };
            return TopLeaguesPartBuilder;
        }());



        /***/
    }),
    /* 28 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return ClickableBookmakerImpl;
        });
        var ClickableBookmakerImpl = /** @class */ (function() {
            function ClickableBookmakerImpl(util_trans, Helper_BookmakersDataStorage) {
                this._utilTrans = util_trans;
                this._helperBookmakersDataStorage = Helper_BookmakersDataStorage;
            }
            ClickableBookmakerImpl.prototype.setBookmakerGeoGroupsData = function(data) {
                this._helperBookmakersDataStorage.setBookmakerGeoGroupsData(data);
            };
            ClickableBookmakerImpl.prototype.isClickable = function(geoIp, geoIpIsoSubdivisionCode) {
                return this._helperBookmakersDataStorage.isClickable(geoIp, geoIpIsoSubdivisionCode);
            };
            ClickableBookmakerImpl.prototype.renamePrematchOddsTab = function(geoIp, geoIpIsoSubdivisionCode) {
                if (!this._helperBookmakersDataStorage.isClickable(geoIp, geoIpIsoSubdivisionCode)) {
                    var parentElement = document.getElementById("odds-tab-prematch");
                    if (parentElement) {
                        var element = parentElement.getElementsByTagName("a")[0];
                        element.textContent = this._utilTrans.translate("TRANS_DETAIL_BOOKMARK_PRE_MATCH_ODDS_UNCLICKABLE");
                    }
                }
            };
            return ClickableBookmakerImpl;
        }());



        /***/
    }),
    /* 29 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return BookmakersDataStorageImpl;
        });
        var GEO_IP_DEFAULT = "default";
        var BookmakersDataStorageImpl = /** @class */ (function() {
            function BookmakersDataStorageImpl() {}
            BookmakersDataStorageImpl.prototype.isAvailableBookmaker = function(geoIp, geoIpIsoSubdivisionCode, bookmakersData) {
                return this.getBookmakersDataByGeo(geoIp, geoIpIsoSubdivisionCode, bookmakersData).length > 0;
            };
            BookmakersDataStorageImpl.prototype.setBookmakerGeoGroupsData = function(data) {
                this._bookmakerGeoGroups = data;
            };
            BookmakersDataStorageImpl.prototype.setBookmakerData = function(data) {
                this._bookmakers = data;
            };
            BookmakersDataStorageImpl.prototype.getBookmakersDataByGeo = function(geoIp, geoIpIsoSubdivisionCode, bookmakersData) {
                if (typeof geoIp !== "string") {
                    geoIp = "";
                }
                if (typeof geoIpIsoSubdivisionCode !== "string") {
                    geoIpIsoSubdivisionCode = "";
                }
                var mergedGeoIp = this._getGeoIpWithSubdivision(geoIp, geoIpIsoSubdivisionCode);
                if (bookmakersData && typeof bookmakersData[mergedGeoIp] != "undefined" && mergedGeoIp !== geoIp) {
                    return bookmakersData[mergedGeoIp];
                } else if (bookmakersData && typeof bookmakersData[geoIp] != "undefined") {
                    return bookmakersData[geoIp];
                } else if (bookmakersData && typeof bookmakersData[GEO_IP_DEFAULT] != "undefined") {
                    return bookmakersData[GEO_IP_DEFAULT];
                }
                return {};
            };
            BookmakersDataStorageImpl.prototype.getCurrentGeoGroupData = function(geoIp, geoIpIsoSubdivisionCode) {
                if (typeof geoIp !== "string") {
                    geoIp = "";
                }
                if (typeof geoIpIsoSubdivisionCode !== "string") {
                    geoIpIsoSubdivisionCode = "";
                }
                var mergedGeoIp = this._getGeoIpWithSubdivision(geoIp, geoIpIsoSubdivisionCode);
                if (this._bookmakerGeoGroups &&
                    typeof this._bookmakerGeoGroups[mergedGeoIp] != "undefined" &&
                    mergedGeoIp !== geoIp) {
                    return this._bookmakerGeoGroups[mergedGeoIp];
                } else if (this._bookmakerGeoGroups && typeof this._bookmakerGeoGroups[geoIp] != "undefined") {
                    return this._bookmakerGeoGroups[geoIp];
                } else if (this._bookmakerGeoGroups && typeof this._bookmakerGeoGroups[GEO_IP_DEFAULT] != "undefined") {
                    return this._bookmakerGeoGroups[GEO_IP_DEFAULT];
                }
                return {};
            };
            BookmakersDataStorageImpl.prototype.isClickable = function(geoIp, geoIpIsoSubdivisionCode) {
                var groupData = this.getCurrentGeoGroupData(geoIp, geoIpIsoSubdivisionCode);
                if (typeof groupData.clickable != "undefined" && String(groupData.clickable) == "0") {
                    return false;
                }
                return true;
            };
            BookmakersDataStorageImpl.prototype._getGeoIpWithSubdivision = function(geoIp, geoIpIsoSubdivisionCode) {
                var mergedGeoIp = geoIp;
                if (!geoIp) {
                    mergedGeoIp = "default";
                } else if (geoIpIsoSubdivisionCode) {
                    mergedGeoIp = geoIp + ":" + geoIpIsoSubdivisionCode;
                }
                return mergedGeoIp;
            };
            return BookmakersDataStorageImpl;
        }());



        /***/
    }),
    /* 30 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return GambleResponsiblyImpl;
        });
        var GambleResponsiblyImpl = /** @class */ (function() {
            function GambleResponsiblyImpl(Helper_BookmakersDataStorage) {
                this._helperBookmakersDataStorage = Helper_BookmakersDataStorage;
            }
            GambleResponsiblyImpl.prototype.isNoticeHidden = function(geoIp, geoIpIsoSubdivisionCode, bookmakersData) {
                return (!this._helperBookmakersDataStorage.isAvailableBookmaker(geoIp, geoIpIsoSubdivisionCode, bookmakersData) ||
                    !this._helperBookmakersDataStorage.isClickable(geoIp, geoIpIsoSubdivisionCode));
            };
            GambleResponsiblyImpl.prototype.removeNotice = function(geoIp, geoIpIsoSubdivisionCode, bookmakersData) {
                if (this.isNoticeHidden(geoIp, geoIpIsoSubdivisionCode, bookmakersData)) {
                    var elements = window.document.querySelectorAll(".footerAdvertGambling");
                    [].forEach.call(elements, function(element) {
                        element.remove();
                    });
                }
            };
            GambleResponsiblyImpl.prototype.setBookmakerGeoGroupsData = function(data) {
                this._helperBookmakersDataStorage.setBookmakerGeoGroupsData(data);
            };
            return GambleResponsiblyImpl;
        }());



        /***/
    }),
    /* 31 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* unused harmony export HandicapFormat */
        /* unused harmony export OddsFormat */
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return FormatterImpl;
        });
        var EMPTY_CELL_CHAR = "-";
        var HandicapFormat = Object.freeze({
            // feel free to improve those names
            DECIMAL: 1,
            HALVES: 2,
            SPREAD: 3,
            HALVES_QUARTERS: 4,
            US: 5,
            HA: 6,
        });
        var OddsFormat = Object.freeze({
            EU: 1,
            UK: 2,
            US: 3,
            HK: 4,
            MA: 5,
            IN: 6,
            UK_SHORT: 10,
        });

        function convertFormatNameToFormatId(formatName) {
            switch (formatName) {
                case "eu":
                    return OddsFormat.EU;
                case "us":
                    return OddsFormat.US;
                case "hk":
                    return OddsFormat.HK;
                case "ma":
                    return OddsFormat.MA;
                case "in":
                    return OddsFormat.IN;
                case "uk":
                    return OddsFormat.UK_SHORT;
                default:
                    return null;
            }
        }

        function convertHandicapNameToHandicapId(handicapName) {
            switch (handicapName) {
                case "eu":
                    return HandicapFormat.DECIMAL;
                case "us":
                    return HandicapFormat.US;
                case "ha":
                    return HandicapFormat.HA;
                default:
                    return null;
            }
        }
        var FormatterImpl = /** @class */ (function() {
            function FormatterImpl() {
                this.oddsFormat = OddsFormat.EU;
                this.handicapFormat = HandicapFormat.DECIMAL;
                this.isString = function(value) {
                    return typeof value === "string";
                };
            }
            FormatterImpl.prototype.setOddsFormatByName = function(oddsFormatName) {
                this.oddsFormat = convertFormatNameToFormatId(oddsFormatName);
            };
            FormatterImpl.prototype.setHandicapFormatByName = function(oddsFormatName) {
                this.handicapFormat = convertHandicapNameToHandicapId(oddsFormatName);
            };
            FormatterImpl.prototype.setOddsFormat = function(oddsFormat) {
                this.oddsFormat = oddsFormat;
            };
            FormatterImpl.prototype.setHandicapFormat = function(handicapFormat) {
                this.handicapFormat = handicapFormat;
            };
            FormatterImpl.prototype.parseNumber = function(value) {
                return this.isString(value) ? parseFloat(value) : value;
            };
            FormatterImpl.prototype.formatHandicap = function(handicap) {
                var handicapVal = this.parseNumber(handicap);
                switch (this.handicapFormat) {
                    case HandicapFormat.HALVES:
                        return this.formatHandicapHalves(handicapVal);
                    case HandicapFormat.SPREAD:
                    case HandicapFormat.US:
                        return this.formatHandicapUs(handicapVal);
                    case HandicapFormat.HALVES_QUARTERS:
                    case HandicapFormat.HA:
                        return this.formatHandicapHalvesQuarterOnly(handicapVal);
                    default:
                        return handicap;
                }
            };
            FormatterImpl.prototype.usFloat = function(num) {
                var ret = "";
                var whole = parseInt(String(num));
                var dec = Math.abs(num - whole);
                if (num > 0)
                    ret += "+";
                if (num < 0)
                    ret += "-";
                if (whole != 0 || this.handicapFormat == 5) {
                    ret += Math.abs(whole);
                }
                switch (dec) {
                    case 0.25:
                        ret += "Â¼";
                        break;
                    case 0.5:
                        ret += "Â½";
                        break;
                    case 0.75:
                        ret += "Â¾";
                        break;
                }
                return ret;
            };
            FormatterImpl.prototype.formatHandicapHalves = function(handicap) {
                var tmpHandicap = 2 * handicap;
                var dwn = Math.floor(tmpHandicap);
                var up = Math.ceil(tmpHandicap);
                // negative handicaps have reversed order
                if (dwn < 0 || up < 0) {
                    if (this.handicapFormat == 6) {
                        return this.addSign(up / 2) + ", " + this.addSign(dwn / 2);
                    } else {
                        return up / 2 + ", " + dwn / 2;
                    }
                } else {
                    if (this.handicapFormat == 6) {
                        return this.addSign(dwn / 2) + ", " + this.addSign(up / 2);
                    } else {
                        return dwn / 2 + ", " + up / 2;
                    }
                }
            };
            FormatterImpl.prototype.addSign = function(num, positive_only) {
                if (num > 0) {
                    return "+" + num;
                }
                if (num < 0 && positive_only) {
                    return "-" + num;
                }
                return num;
            };
            FormatterImpl.prototype.formatHandicapHalvesQuarterOnly = function(handicap) {
                var whole = parseInt(String(handicap));
                var dec = Math.abs(handicap - whole);
                if (dec == 0.25 || dec == 0.75) {
                    return this.formatHandicapHalves(handicap);
                } else {
                    if (this.handicapFormat == 6) {
                        return this.addSign(handicap);
                    } else {
                        return handicap;
                    }
                }
            };
            FormatterImpl.prototype.formatHandicapUs = function(handicap) {
                return this.usFloat(handicap) + "/" + this.usFloat(-1 * handicap);
            };
            FormatterImpl.prototype.formatOdd = function(num, returnOne) {
                if (!num)
                    return "";
                var odd = this.parseNumber(num);
                if (isNaN(odd))
                    return num;
                if (odd > 0.999 && odd < 1.001 && !returnOne) {
                    return EMPTY_CELL_CHAR;
                }
                switch (this.oddsFormat) {
                    case OddsFormat.EU:
                        return this.formatTwoDigits(odd);
                    case OddsFormat.UK:
                        return this.formatUk(odd);
                    case OddsFormat.US:
                        return this.formatUs(odd);
                    case OddsFormat.HK:
                        return this.formatHk(odd);
                    case OddsFormat.MA:
                        return this.formatMa(odd);
                    case OddsFormat.IN:
                        return this.formatIn(odd);
                    case OddsFormat.UK_SHORT:
                        return this.formatUkShort(odd);
                    default:
                        return num;
                }
            };
            FormatterImpl.prototype.formatUs = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return "-25000";
                }
                if (decimal >= 2) {
                    return "+" + Math.floor((decimal - 1) * 100);
                } else if (decimal != 1) {
                    return -Math.round(100 / (decimal - 1));
                } else {
                    return null;
                }
            };
            FormatterImpl.prototype.formatUk = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return "0/1";
                }
                var numerator = Math.round(decimal * 100);
                var denominator = 100;
                var gcd = this.GCD(numerator, denominator);
                if (gcd < -1) {
                    gcd *= -1;
                }
                if (gcd > 1) {
                    numerator /= gcd;
                    denominator /= gcd;
                }
                if (numerator > denominator) {
                    return Math.round(numerator) - Math.round(denominator) + "/" + Math.round(denominator);
                } else {
                    return Math.round(numerator) + "/" + Math.round(denominator);
                }
            };
            FormatterImpl.prototype.formatUkShort = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return "0/1";
                }
                var numerator = Math.round(decimal * 1000) / 10 - 100;
                var denominator = 100;
                var minDelta = 100;
                var numeratorFinal = -1;
                var denominatorFinal = -1;
                var denominatorTmp = denominator;
                var numeratorTmp;
                for (var i = 1; i <= 11; i++) {
                    denominatorTmp = i;
                    numeratorTmp = (numerator * denominatorTmp) / denominator;
                    var delta = Math.abs(Math.round(numeratorTmp) / Math.round(denominatorTmp) - numerator / denominator);
                    if (delta < minDelta) {
                        minDelta = delta;
                        numeratorFinal = numeratorTmp;
                        denominatorFinal = denominatorTmp;
                    }
                }
                return Math.round(numeratorFinal) + "/" + Math.round(denominatorFinal);
            };
            FormatterImpl.prototype.formatHk = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return this.formatTwoDigits(0);
                }
                return this.formatTwoDigits(decimal - 1);
            };
            FormatterImpl.prototype.formatMa = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return this.formatTwoDigits(0);
                }
                if (decimal <= 2) {
                    decimal -= 1;
                } else {
                    decimal = (1 / (decimal - 1)) * -1;
                }
                return this.formatTwoDigits(decimal);
            };
            FormatterImpl.prototype.formatIn = function(decimal) {
                if (decimal > 0.999 && decimal < 1.001) {
                    return "-250.00";
                }
                if (decimal <= 2) {
                    decimal = (1 / (decimal - 1)) * -1;
                } else {
                    decimal -= 1;
                }
                return this.formatTwoDigits(decimal);
            };
            FormatterImpl.prototype.GCD = function(numerator, denominator) {
                var x = numerator;
                var y = denominator;
                while (y != 0) {
                    var w = x % y;
                    x = y;
                    y = w;
                }
                return x;
            };
            FormatterImpl.prototype.formatTwoDigits = function(num) {
                var dnum = Math.round(num * 100) / 100;
                var twoDPString = dnum + "";
                if (twoDPString.indexOf(".") == -1) {
                    twoDPString += ".00";
                }
                if (twoDPString.indexOf(".") == twoDPString.length - 2) {
                    twoDPString += "0";
                }
                return twoDPString;
            };
            return FormatterImpl;
        }());



        /***/
    }),
    /* 32 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return Evaluator;
        });
        var Evaluator = /** @class */ (function() {
            function Evaluator(config, statusReturnBet) {
                // -- init const
                this.NAMESPACE_DC = 1;
                this.NAMESPACE_OP = 2;
                this.BT_1X2 = config.BT_1X2;
                this.BT_OU = config.BT_OU;
                this.BT_ML = config.BT_ML;
                this.BT_DC = config.BT_DC;
                this.BT_AH = config.BT_AH;
                this.BT_DNB = config.BT_DNB;
                this.BT_TQ = config.BT_TQ;
                this.BT_CS = config.BT_CS;
                this.BT_HTFT = config.BT_HTFT;
                this.BT_OE = config.BT_OE;
                this.BT_LW = config.BT_LW;
                this.OUTCOME_HOME = config.OUTCOME_HOME;
                this.OUTCOME_AWAY = config.OUTCOME_AWAY;
                this.OUTCOME_DRAW = config.OUTCOME_DRAW;
                this.OUTCOME_OVER = config.OUTCOME_OVER;
                this.OUTCOME_UNDER = config.OUTCOME_UNDER;
                this.OUTCOME_AWAYDRAW = config.OUTCOME_AWAYDRAW;
                this.OUTCOME_HOMEDRAW = config.OUTCOME_HOMEDRAW;
                this.OUTCOME_HOMEAWAY = config.OUTCOME_HOMEAWAY;
                this.OUTCOME_YES = config.OUTCOME_YES;
                this.OUTCOME_NO = config.OUTCOME_NO;
                this.RESULT_LOST = config.RESULT_LOST;
                this.RESULT_WON = config.RESULT_WON;
                this.RESULT_RETURN = config.RESULT_RETURN;
                this.RESULT_50RETURN50WON = config.RESULT_50RETURN50WON;
                this.RESULT_50RETURN50LOST = config.RESULT_50RETURN50LOST;
                this._statusReturnBet = statusReturnBet;
            }
            Evaluator.prototype.evaluate = function(eventParams, outcomeParams) {
                if (!outcomeParams || !eventParams)
                    return null;
                if (!outcomeParams["scopeId"]) {
                    throw new Error("outcome scope not defined");
                }
                var scope = outcomeParams["scopeId"];
                var status = eventParams["statusId"];
                if (status && this._statusReturnBet[status]) {
                    return this.RESULT_RETURN;
                }
                var sportId = eventParams["sportId"];
                var oddsTypeId = outcomeParams["type"];
                var isHandicap = outcomeParams["handicapTypeId"];
                var homeScore = 0;
                var awayScore = 0;
                if (oddsTypeId == this.BT_1X2 ||
                    oddsTypeId == this.BT_DC ||
                    oddsTypeId == this.BT_ML ||
                    oddsTypeId == this.BT_DNB) {
                    try {
                        homeScore = eventParams["score"][scope][0] * 1;
                        awayScore = eventParams["score"][scope][1] * 1;
                    } catch (e) {
                        throw new Error("score not available for this scope");
                    }
                }
                // cricket nelze vyhodnotit pouze podle skore
                if (sportId == 13) {
                    throw new Error("Not implemented for this sport");
                }
                switch (oddsTypeId) {
                    case this.BT_1X2:
                        if (isHandicap)
                            return null;
                        return this.evaluate_1x2(sportId, homeScore, awayScore, outcomeParams["outcome"]);
                        break;
                    case this.BT_DC:
                        if (isHandicap)
                            return null;
                        return this.evaluate_dc(sportId, homeScore, awayScore, outcomeParams["outcome"]);
                        break;
                    case this.BT_ML:
                        if (isHandicap)
                            return null;
                        return this.evaluate_moneyline(sportId, homeScore, awayScore, outcomeParams["outcome"]);
                        break;
                    case this.BT_DNB:
                        if (isHandicap)
                            return null;
                        return this.evaluate_drawnobet(sportId, homeScore, awayScore, outcomeParams["outcome"]);
                        break;
                    case this.BT_OU:
                        return this.evaluate_overunder(eventParams, outcomeParams, scope);
                        break;
                    case this.BT_AH:
                        return this.evaluate_asianhandicap(eventParams, outcomeParams, scope);
                        break;
                    default:
                        throw new Error("Cannot evaluate with JS");
                        break;
                }
            };
            Evaluator.prototype.evaluate_1x2 = function(sportId, homeScore, awayScore, outcome) {
                if (outcome == this.OUTCOME_DRAW) {
                    if (homeScore == awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else if (outcome == this.OUTCOME_HOME) {
                    if (homeScore > awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else if (outcome == this.OUTCOME_AWAY) {
                    if (homeScore < awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else {
                    throw new Error("invalid outcome for BT_1X2");
                }
            };
            Evaluator.prototype.evaluate_dc = function(sportId, homeScore, awayScore, outcome) {
                if (outcome == this.OUTCOME_HOMEDRAW) {
                    if (homeScore < awayScore) {
                        return this.RESULT_LOST;
                    } else {
                        return this.RESULT_WON;
                    }
                } else if (outcome == this.OUTCOME_HOMEAWAY) {
                    if (homeScore > awayScore) {
                        return this.RESULT_LOST;
                    } else {
                        return this.RESULT_WON;
                    }
                } else if (outcome == this.OUTCOME_AWAYDRAW) {
                    if (homeScore == awayScore) {
                        return this.RESULT_LOST;
                    } else {
                        return this.RESULT_WON;
                    }
                } else {
                    throw new Error("invalid outcome for BT_DC");
                }
            };
            Evaluator.prototype.evaluate_moneyline = function(sportId, homeScore, awayScore, outcome) {
                if (homeScore == awayScore) {
                    return this.RESULT_RETURN;
                } else if (outcome == this.OUTCOME_HOME) {
                    if (homeScore > awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else if (outcome == this.OUTCOME_AWAY) {
                    if (homeScore < awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else {
                    throw new Error("invalid outcome for BT_ML");
                }
            };
            Evaluator.prototype.evaluate_drawnobet = function(sportId, homeScore, awayScore, outcome) {
                if (homeScore == awayScore) {
                    return this.RESULT_RETURN;
                } else if (outcome == this.OUTCOME_HOME) {
                    if (homeScore > awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else if (outcome == this.OUTCOME_AWAY) {
                    if (homeScore < awayScore) {
                        return this.RESULT_WON;
                    } else {
                        return this.RESULT_LOST;
                    }
                } else {
                    throw new Error("invalid outcome for BT_DNB");
                }
            };
            Evaluator.prototype.evaluate_overunder = function(eventParams, outcomeParams, scope) {
                var sportId = eventParams["sportId"];
                var handicapType = outcomeParams["handicapTypeId"];
                var outcome = outcomeParams["outcome"];
                var handicapValue = outcomeParams["handicapValue"];
                // sipky, bez dalsich dat z DC nejsme schopni vyhodnotit
                if (sportId == 14) {
                    throw new Error("Not implemented for this sport");
                }
                var total = null;
                try {
                    // tennis
                    if (sportId == 2) {
                        // FT sets
                        if (scope == 2 && handicapType == 1) {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        }
                        // FT games
                        else if (scope == 2 && handicapType == 2) {
                            total = 0;
                            if (typeof eventParams["score"][12] !== "undefined") {
                                total += eventParams["score"][12][0] + eventParams["score"][12][1];
                            }
                            if (typeof eventParams["score"][13] !== "undefined") {
                                total += eventParams["score"][13][0] + eventParams["score"][13][1];
                            }
                            if (typeof eventParams["score"][14] !== "undefined") {
                                total += eventParams["score"][14][0] + eventParams["score"][14][1];
                            }
                            if (typeof eventParams["score"][15] !== "undefined") {
                                total += eventParams["score"][15][0] + eventParams["score"][15][1];
                            }
                            if (typeof eventParams["score"][16] !== "undefined") {
                                total += eventParams["score"][16][0] + eventParams["score"][16][1];
                            }
                        }
                        // games
                        else if (scope > 2 && handicapType == 2) {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        } else {
                            throw new Error("invalid handicap type");
                        }
                    }
                    // volleyball, beach volleyball, badminton
                    else if (sportId == 12 || sportId == 17 || sportId == 21) {
                        // FT sets
                        if (scope == 2 && handicapType == 1) {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        }
                        // FT points
                        else if (scope == 2 && handicapType == 3) {
                            total = 0;
                            if (typeof eventParams["score"][12] !== "undefined") {
                                total += eventParams["score"][12][0] + eventParams["score"][12][1];
                            }
                            if (typeof eventParams["score"][13] !== "undefined") {
                                total += eventParams["score"][13][0] + eventParams["score"][13][1];
                            }
                            if (typeof eventParams["score"][14] !== "undefined") {
                                total += eventParams["score"][14][0] + eventParams["score"][14][1];
                            }
                            if (typeof eventParams["score"][15] !== "undefined") {
                                total += eventParams["score"][15][0] + eventParams["score"][15][1];
                            }
                            if (typeof eventParams["score"][16] !== "undefined") {
                                total += eventParams["score"][16][0] + eventParams["score"][16][1];
                            }
                        }
                        // points
                        else if (scope > 2 && handicapType == 3) {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        } else {
                            throw new Error("invalid handicap type");
                        }
                    }
                    // baseball
                    else if (sportId == 6) {
                        // 1st half
                        if (scope == 3 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][17] !== "undefined") {
                                total += eventParams["score"][17][0] + eventParams["score"][17][1];
                            }
                            if (typeof eventParams["score"][18] !== "undefined") {
                                total += eventParams["score"][18][0] + eventParams["score"][18][1];
                            }
                            if (typeof eventParams["score"][19] !== "undefined") {
                                total += eventParams["score"][19][0] + eventParams["score"][19][1];
                            }
                            if (typeof eventParams["score"][20] !== "undefined") {
                                total += eventParams["score"][20][0] + eventParams["score"][20][1];
                            }
                            if (typeof eventParams["score"][21] !== "undefined") {
                                total += eventParams["score"][21][0] + eventParams["score"][21][1];
                            }
                        }
                        // 2nd half
                        else if (scope == 4 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][22] !== "undefined") {
                                total += eventParams["score"][22][0] + eventParams["score"][22][1];
                            }
                            if (typeof eventParams["score"][23] !== "undefined") {
                                total += eventParams["score"][23][0] + eventParams["score"][23][1];
                            }
                            if (typeof eventParams["score"][24] !== "undefined") {
                                total += eventParams["score"][24][0] + eventParams["score"][24][1];
                            }
                            if (typeof eventParams["score"][25] !== "undefined") {
                                total += eventParams["score"][25][0] + eventParams["score"][25][1];
                            }
                        } else {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        }
                    }
                    // Basketball, am football, aussie rules, water polo
                    else if (sportId == 3 || sportId == 5 || sportId == 18 || sportId == 22) {
                        // 1st half
                        if (scope == 3 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][8] !== "undefined") {
                                total += eventParams["score"][8][0] + eventParams["score"][8][1];
                            }
                            if (typeof eventParams["score"][9] !== "undefined") {
                                total += eventParams["score"][9][0] + eventParams["score"][9][1];
                            }
                        }
                        // 2nd half
                        else if (scope == 4 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][10] !== "undefined") {
                                total += eventParams["score"][10][0] + eventParams["score"][10][1];
                            }
                            if (typeof eventParams["score"][11] !== "undefined") {
                                total += eventParams["score"][11][0] + eventParams["score"][11][1];
                            }
                        } else {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        }
                    } else {
                        total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                    }
                } catch (e) {
                    throw new Error("UO: score not valid");
                }
                if (total == handicapValue) {
                    return this.RESULT_RETURN;
                }
                // quarter O/U
                if (Math.round(handicapValue) != handicapValue && Math.round(handicapValue * 10) != handicapValue * 10) {
                    // quarter handicap has 2 parts
                    var part1 = Math.ceil(handicapValue * 2) / 2;
                    var part2 = Math.floor(handicapValue * 2) / 2;
                    var won = 0;
                    var lost = 0;
                    var ret = 0;
                    if (outcome == this.OUTCOME_OVER) {
                        if (part1 > total)
                            won++;
                        if (part2 > total)
                            won++;
                        if (part1 < total)
                            lost++;
                        if (part2 < total)
                            lost++;
                    } else if (outcome == this.OUTCOME_UNDER) {
                        if (part1 < total)
                            won++;
                        if (part2 < total)
                            won++;
                        if (part1 > total)
                            lost++;
                        if (part2 > total)
                            lost++;
                    } else {
                        throw new Error("invalid outcome for BT_OU (" + outcome + ")");
                    }
                    if (part1 == total)
                        ret++;
                    if (part2 == total)
                        ret++;
                    if (won == 2) {
                        return this.RESULT_WON;
                    }
                    if (lost == 2) {
                        return this.RESULT_LOST;
                    }
                    if (ret == 2) {
                        return this.RESULT_RETURN;
                    }
                    if (ret == 1) {
                        if (won == 1) {
                            return this.RESULT_50RETURN50WON;
                        }
                        if (lost == 1) {
                            return this.RESULT_50RETURN50LOST;
                        }
                    }
                    throw new Error("Undefined state for handicap resolution");
                } else {
                    if (outcome == this.OUTCOME_OVER) {
                        return total > handicapValue ? this.RESULT_WON : this.RESULT_LOST;
                    } else if (outcome == this.OUTCOME_UNDER) {
                        return total < handicapValue ? this.RESULT_WON : this.RESULT_LOST;
                    } else {
                        throw new Error("invalid outcome for BT_OU (" + outcome + ")");
                    }
                }
            };
            Evaluator.prototype.evaluate_asianhandicap = function(eventParams, outcomeParams, scope) {
                var sportId = eventParams["sportId"];
                var outcome = outcomeParams["outcome"];
                var handicapValue = outcomeParams["handicapValue"];
                var handicapType = outcomeParams["handicapTypeId"];
                var total = 0;
                // sipky, bez dalsich dat z DC nejsme schopni vyhodnotit
                if (sportId == 14) {
                    throw new Error("Not implemented for this sport");
                }
                try {
                    // tennis
                    if (sportId == 2) {
                        // FT sets
                        if (scope == 2 && handicapType == 1) {
                            total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                        }
                        // FT games
                        else if (scope == 2 && handicapType == 2) {
                            total = 0;
                            if (typeof eventParams["score"][12] !== "undefined") {
                                total += eventParams["score"][12][0] - eventParams["score"][12][1];
                            }
                            if (typeof eventParams["score"][13] !== "undefined") {
                                total += eventParams["score"][13][0] - eventParams["score"][13][1];
                            }
                            if (typeof eventParams["score"][14] !== "undefined") {
                                total += eventParams["score"][14][0] - eventParams["score"][14][1];
                            }
                            if (typeof eventParams["score"][15] !== "undefined") {
                                total += eventParams["score"][15][0] - eventParams["score"][15][1];
                            }
                            if (typeof eventParams["score"][16] !== "undefined") {
                                total += eventParams["score"][16][0] - eventParams["score"][16][1];
                            }
                        }
                        // games
                        else if (scope > 2 && handicapType == 2) {
                            total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                        } else {
                            throw new Error("invalid handicap type");
                        }
                    }
                    // volleyball, beach volleyball, badminton
                    else if (sportId == 12 || sportId == 17 || sportId == 21) {
                        // FT sets
                        if (scope == 2 && handicapType == 1) {
                            total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                        }
                        // FT points
                        else if (scope == 2 && handicapType == 3) {
                            total = 0;
                            if (typeof eventParams["score"][12] !== "undefined") {
                                total += eventParams["score"][12][0] - eventParams["score"][12][1];
                            }
                            if (typeof eventParams["score"][13] !== "undefined") {
                                total += eventParams["score"][13][0] - eventParams["score"][13][1];
                            }
                            if (typeof eventParams["score"][14] !== "undefined") {
                                total += eventParams["score"][14][0] - eventParams["score"][14][1];
                            }
                            if (typeof eventParams["score"][15] !== "undefined") {
                                total += eventParams["score"][15][0] - eventParams["score"][15][1];
                            }
                            if (typeof eventParams["score"][16] !== "undefined") {
                                total += eventParams["score"][16][0] - eventParams["score"][16][1];
                            }
                        }
                        // points
                        else if (scope > 2 && handicapType == 3) {
                            total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                        } else {
                            throw new Error("invalid handicap type");
                        }
                    }
                    // baseball
                    else if (sportId == 6) {
                        // 1st half
                        if (scope == 3 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][17] !== "undefined") {
                                total += eventParams["score"][17][0] - eventParams["score"][17][1];
                            }
                            if (typeof eventParams["score"][18] !== "undefined") {
                                total += eventParams["score"][18][0] - eventParams["score"][18][1];
                            }
                            if (typeof eventParams["score"][19] !== "undefined") {
                                total += eventParams["score"][19][0] - eventParams["score"][19][1];
                            }
                            if (typeof eventParams["score"][20] !== "undefined") {
                                total += eventParams["score"][20][0] - eventParams["score"][20][1];
                            }
                            if (typeof eventParams["score"][21] !== "undefined") {
                                total += eventParams["score"][21][0] - eventParams["score"][21][1];
                            }
                        }
                        // 2nd half
                        else if (scope == 4 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][22] !== "undefined") {
                                total += eventParams["score"][22][0] - eventParams["score"][22][1];
                            }
                            if (typeof eventParams["score"][23] !== "undefined") {
                                total += eventParams["score"][23][0] - eventParams["score"][23][1];
                            }
                            if (typeof eventParams["score"][24] !== "undefined") {
                                total += eventParams["score"][24][0] - eventParams["score"][24][1];
                            }
                            if (typeof eventParams["score"][25] !== "undefined") {
                                total += eventParams["score"][25][0] - eventParams["score"][25][1];
                            }
                        } else {
                            total = eventParams["score"][scope][0] + eventParams["score"][scope][1];
                        }
                    }
                    // Basketball, am football, aussie rules, water polo
                    else if (sportId == 3 || sportId == 5 || sportId == 18 || sportId == 22) {
                        // 1st half
                        if (scope == 3 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][8] !== "undefined") {
                                total += eventParams["score"][8][0] - eventParams["score"][8][1];
                            }
                            if (typeof eventParams["score"][9] !== "undefined") {
                                total += eventParams["score"][9][0] - eventParams["score"][9][1];
                            }
                        }
                        // 2nd half
                        else if (scope == 4 && typeof eventParams["score"][scope] === "undefined") {
                            total = 0;
                            if (typeof eventParams["score"][10] !== "undefined") {
                                total += eventParams["score"][10][0] - eventParams["score"][10][1];
                            }
                            if (typeof eventParams["score"][11] !== "undefined") {
                                total += eventParams["score"][11][0] - eventParams["score"][11][1];
                            }
                        } else {
                            total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                        }
                    } else {
                        total = eventParams["score"][scope][0] - eventParams["score"][scope][1];
                    }
                } catch (e) {
                    throw new Error("AH: score not valid");
                }
                // quarter AH
                if (Math.round(handicapValue) != 1 * handicapValue && Math.round(handicapValue * 10) != handicapValue * 10) {
                    // quarter handicap has 2 parts
                    var part1 = Math.ceil((total + handicapValue) * 2) / 2;
                    var part2 = Math.floor((total + handicapValue) * 2) / 2;
                    var won = 0;
                    var lost = 0;
                    var ret = 0;
                    if (outcome == this.OUTCOME_HOME) {
                        if (part1 > 0)
                            won++;
                        if (part2 > 0)
                            won++;
                        if (part1 < 0)
                            lost++;
                        if (part2 < 0)
                            lost++;
                    } else if (outcome == this.OUTCOME_AWAY) {
                        if (part1 < 0)
                            won++;
                        if (part2 < 0)
                            won++;
                        if (part1 > 0)
                            lost++;
                        if (part2 > 0)
                            lost++;
                    } else {
                        throw new Error("invalid outcome for BT_AH");
                    }
                    if (part1 == 0)
                        ret++;
                    if (part2 == 0)
                        ret++;
                    if (won == 2) {
                        return this.RESULT_WON;
                    }
                    if (lost == 2) {
                        return this.RESULT_LOST;
                    }
                    if (ret == 2) {
                        return this.RESULT_RETURN;
                    }
                    if (ret == 1) {
                        if (won == 1) {
                            return this.RESULT_50RETURN50WON;
                        }
                        if (lost == 1) {
                            return this.RESULT_50RETURN50LOST;
                        }
                    }
                    throw new Error("Undefined state for handicap resolution");
                } else {
                    total += handicapValue;
                    if (total == 0) {
                        return this.RESULT_RETURN;
                    } else if (outcome == this.OUTCOME_HOME) {
                        return total > 0 ? this.RESULT_WON : this.RESULT_LOST;
                    } else if (outcome == this.OUTCOME_AWAY) {
                        return total < 0 ? this.RESULT_WON : this.RESULT_LOST;
                    } else {
                        throw new Error("invalid outcome for BT_AH");
                    }
                }
            };
            return Evaluator;
        }());



        /***/
    }),
    /* 33 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return ReversedSportTimeImpl;
        });
        var ReversedSportTimeImpl = /** @class */ (function() {
            function ReversedSportTimeImpl(utilEnviroment) {
                this._sportReversedList = utilEnviroment.getSportReversedList();
            }
            ReversedSportTimeImpl.prototype.getTime = function(time, sportId, eventStageId, dataStageTime) {
                if (!(sportId in this._sportReversedList)) {
                    return time;
                }
                var dataStageTimeParsed = ReversedSportTimeImpl._parseDataStageTime(dataStageTime);
                if (typeof this._sportReversedList[sportId].stages != "undefined" &&
                    this._sportReversedList[sportId].stages.includes(eventStageId)) {
                    var stageTime = dataStageTimeParsed[0] ?
                        dataStageTimeParsed[0] :
                        this._sportReversedList[sportId].stage_time;
                    time = ReversedSportTimeImpl._countReverseTime(stageTime, time);
                }
                if (typeof this._sportReversedList[sportId].extra_time_stages != "undefined" &&
                    this._sportReversedList[sportId].extra_time_stages.includes(eventStageId)) {
                    var stageTime = dataStageTimeParsed[1] ?
                        dataStageTimeParsed[1] :
                        this._sportReversedList[sportId].extra_time;
                    time = ReversedSportTimeImpl._countReverseTime(stageTime, time);
                }
                return time;
            };
            ReversedSportTimeImpl._countReverseTime = function(stageTime, time) {
                if (time != 0) {
                    //ak sa hra 1. minuta a stage ma napr. 20min => bude sa ukazovat 20.min
                    time = time - 1;
                }
                time = stageTime - time;
                if (time < 0) {
                    time = 0;
                }
                return time;
            };
            ReversedSportTimeImpl._parseDataStageTime = function(dataStageTime) {
                if (typeof dataStageTime == "undefined" || dataStageTime === null) {
                    return [0, 0];
                }
                return dataStageTime.split(":").map(function(value) {
                    return parseInt(value, 10);
                });
            };
            return ReversedSportTimeImpl;
        }());



        /***/
    }),
    /* 34 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return ParticipantNoDuelImpl;
        });
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        var ParticipantNoDuelImpl = /** @class */ (function() {
            function ParticipantNoDuelImpl(util_enviroment, util_string, util_trans, util_sport, DicProxy, dataEventHolderProxy, dataLeagueHolderProxy, dataParticipantHolder, HtmlTemplate) {
                this.FEED_ACTION = "participants-events-data-merged";
                this._callbacks = {};
                this._preferedSportId = -1;
                this._utilConfig = cjs.Api.config;
                this._utilEnviroment = util_enviroment;
                this._utilString = util_string;
                this._utilTrans = util_trans;
                this._utilSport = util_sport;
                this._dicProxy = DicProxy;
                this._dataEventHolderProxy = dataEventHolderProxy;
                this._dataLeagueHolderProxy = dataLeagueHolderProxy;
                this._dataParticipantHolder = dataParticipantHolder;
                this._htmlTemplate = HtmlTemplate;
            }
            ParticipantNoDuelImpl.prototype.load = function(participantKey, preferedSportId) {
                if (preferedSportId === void 0) {
                    preferedSportId = -1;
                }
                var feedRequest = this._utilEnviroment.getFeedRequestObject();
                this._preferedSportId = preferedSportId;
                cjs.Api.loader.get("react").call(function(reactCalls) {
                    return reactCalls.loadingState("noDuel", true);
                });
                this._dicProxy.onReady((function(_this) {
                    return function() {
                        return feedRequest.execute(_this.FEED_ACTION, null, function(responseStatus, responseHeaders, responseContent, responseTrigger, responseCustomHeaders) {
                            cjs.Api.loader
                                .get("react")
                                .call(function(reactCalls) {
                                    return reactCalls.loadingState("noDuel", false);
                                });
                            return _this._saveContentToDom(responseContent);
                        }, {
                            participantIds: [participantKey],
                            dataPart: "x",
                        }, null);
                    };
                })(this));
            };
            ParticipantNoDuelImpl.prototype._appendHiddenDivContent = function(id, content) {
                var div = document.createElement("div");
                div.id = id;
                div.style.display = "none";
                div.innerHTML = content;
                document.body.append(div);
            };
            ParticipantNoDuelImpl.prototype._appendMoreLinkElement = function() {
                var div = document.createElement("div");
                div.id = "participant-page-summary-results-more";
                var linkHref = document.createElement("a");
                linkHref.href = "#";
                div.append(linkHref);
                document.body.append(div);
            };
            ParticipantNoDuelImpl.prototype._saveContentToDom = function(responseContent) {
                this._appendHiddenDivContent("participant-page-data-summary-results", responseContent);
                this._appendMoreLinkElement();
                return this._runCallback("dataLoaded");
            };
            ParticipantNoDuelImpl.prototype.registerCallback = function(triggerName, callback) {
                if (this._callbacks[triggerName] == null) {
                    this._callbacks[triggerName] = [];
                }
                return this._callbacks[triggerName].push(callback);
            };
            ParticipantNoDuelImpl.prototype._runCallback = function(triggerName) {
                var e_1, _a;
                if (triggerName == null) {
                    triggerName = "";
                }
                if (this._callbacks[triggerName] != null) {
                    try {
                        for (var _b = __values(this._callbacks[triggerName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var callback = _c.value;
                            callback();
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        } finally {
                            if (e_1) throw e_1.error;
                        }
                    }
                    return true;
                }
                return false;
            };
            ParticipantNoDuelImpl.prototype.getHtml = function() {
                var htmlTemplates = this._utilEnviroment.getHtmlTemplate();
                return this._htmlTemplate.render(htmlTemplates.TPL_PAGE_PARTICIPANT_NO_DUEL_RESULTS, this._data);
            };
            ParticipantNoDuelImpl.prototype.getMeetingName = function(leagueItem) {
                var leagueTitle = leagueItem.getTitle();
                return leagueTitle.replace(/(.+): (.+)( \(.+\))/, "$1$3");
            };
            return ParticipantNoDuelImpl;
        }());



        /***/
    }),
    /* 35 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return ScoresChanged;
        });
        var ScoresChanged = /** @class */ (function() {
            function ScoresChanged() {}
            ScoresChanged.prototype.getHighlightHtml = function(message) {
                var html = message ?
                    "<div class=\"scoresChanged\">\n\t\t\t\t  <div class=\"scoresChanged__ring\"></div>\n\t\t\t\t  <div class=\"scoresChanged__circle\"></div>\n\t\t\t\t  </div>" :
                    "";
                return "<span class=\"highlight-message scores-changed\" onmouseover=\"tt.show(this, event)\" onmouseout=\"tt.hide(this)\" title=\"" + message + "\">" + html + "</span>";
            };
            return ScoresChanged;
        }());



        /***/
    }),
    /* 36 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventTrackingImpl;
        });
        var EventTrackingImpl = /** @class */ (function() {
            function EventTrackingImpl(eventStageTypeIdGetter, matchTimeGetter, sport, darkModeLocal) {
                this.event_timeout = null;
                this.currentElement = null;
                this.eventStageTypeIdGetter = eventStageTypeIdGetter;
                this.matchTimeGetter = matchTimeGetter;
                this.sport = sport;
                this.darkModeLocal = darkModeLocal;
            }
            EventTrackingImpl.prototype.track_save = function(data) {
                (window.dataLayer || []).push(data);
            };
            EventTrackingImpl.prototype.track_click = function(event, eventName, eventValue, eventSource, eventCategory, sportName, eventStageTypeId, matchTime) {
                var data = {
                    "event-value": eventValue,
                    "event-name": eventName,
                    event: event,
                    "event-sport": sportName || this.sport || window.sport,
                    "event-source": eventSource,
                    "event-cat": eventCategory,
                    "event-time": this.formatEventStageTypeId(eventStageTypeId || this.eventStageTypeIdGetter()),
                    "match-time": matchTime || this.matchTimeGetter() || undefined,
                };
                this.track_save(data);
                return true;
            };
            EventTrackingImpl.prototype.track_click_banner = function(bannerZoneId, bannerPosition, bannerId) {
                var data = {
                    event: "click-banner",
                    bannerZoneId: bannerZoneId,
                    bannerPosition: bannerPosition,
                    "event-sport": this.sport || window.sport,
                    bannerId: bannerId,
                };
                this.track_save(data);
            };
            EventTrackingImpl.prototype.track_over = function(event, eventName) {
                var _this = this;
                if (this.event_timeout) {
                    clearTimeout(this.event_timeout);
                }
                this.event_timeout = setTimeout(function() {
                    _this.track_click(event, eventName);
                }, 500);
            };
            EventTrackingImpl.prototype.track_out = function() {
                if (this.event_timeout) {
                    clearTimeout(this.event_timeout);
                }
            };
            EventTrackingImpl.prototype.setEventStageTypeIdGetter = function(value) {
                this.eventStageTypeIdGetter = value;
            };
            EventTrackingImpl.prototype.setMatchTimeGetter = function(value) {
                this.matchTimeGetter = value;
            };
            EventTrackingImpl.prototype.lsAdsTracking = function(element) {
                var _a, _b, _c;
                if (element) {
                    this.track_click_banner(element.getAttribute("id") || "", ((_a = element.closest(".adscontent")) === null || _a === void 0 ? void 0 : _a.getAttribute("id")) || "", ((_c = (_b = element
                        .getElementsByClassName("adscontent")[0]) === null || _b === void 0 ? void 0 : _b.getElementsByTagName("iframe")[0]) === null || _c === void 0 ? void 0 : _c.getAttribute("banner-id")) || "");
                }
            };
            EventTrackingImpl.prototype.bindAdsCallbackClick = function() {
                var _this = this;
                var adsClickElements = document.getElementsByClassName("adsclick");
                for (var i = 0; i < adsClickElements.length; i++) {
                    var element = adsClickElements.item(i);
                    if (element) {
                        element.addEventListener("click", function(e) {
                            if (e.target instanceof Element) {
                                _this.lsAdsTracking(e.target.closest(".adsenvelope"));
                            }
                        });
                    }
                }
                var adsElements = document.getElementsByClassName("adscontent");
                for (var i = 0; i < adsElements.length; i++) {
                    var element = adsElements.item(i);
                    if (element) {
                        element.addEventListener("mouseenter", function(e) {
                            _this.currentElement = e.target;
                        });
                        element.addEventListener("mouseleave", function(e) {
                            _this.currentElement = null;
                        });
                    }
                }
                window.addEventListener("blur", function(e) {
                    if (_this.currentElement instanceof Element) {
                        _this.lsAdsTracking(_this.currentElement.closest(".adsenvelope"));
                    }
                });
            };
            EventTrackingImpl.prototype.formatEventStageTypeId = function(eventStageTypeId) {
                switch (eventStageTypeId) {
                    case 1:
                        return "scheduled";
                    case 2:
                        return "live";
                    case 3:
                        return "finished";
                }
                return undefined;
            };
            EventTrackingImpl.prototype.trackPageInfo = function(pageInfo) {
                if (this.darkModeLocal) {
                    pageInfo["theme"] = this.darkModeLocal.isDarkModeEnabled() ? "dark" : "default";
                    pageInfo["theme-user"] = this.darkModeLocal.isUserDefinedTheme();
                    pageInfo["theme-browser"] = this.darkModeLocal.getPreferredDarkModeBasedOnBrowser() ? "dark" : "default";
                }
                this.track_save(pageInfo);
            };
            return EventTrackingImpl;
        }());



        /***/
    }),
    /* 37 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return Cricket;
        });
        /* harmony import */
        var _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
        /* harmony import */
        var _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);


        var Cricket = /** @class */ (function() {
            function Cricket(utilEnviroment, utilTrans) {
                this.utilEnviroment = utilEnviroment;
                this.utilTrans = utilTrans;
                this._data = utilEnviroment.getFsDetail();
                this._feedIndexes = utilEnviroment.getFeedIndexes();
            }
            Cricket.prototype.getStageText = function() {
                var eventStageId = this._data[this._feedIndexes.COMMONINDEXES_EVENT_STAGE_ID];
                var eventStageTrans = this.utilEnviroment.getEventStageTrans();
                var stageText = eventStageTrans[eventStageId.toString()];
                switch (eventStageId) {
                    case _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].FINISHED: {
                        var cricketSentenceText = this.getCricketSentense();
                        if (cricketSentenceText != "") {
                            stageText = cricketSentenceText;
                        }
                        break;
                    }
                    case _react_lib_lists_EventStageList__WEBPACK_IMPORTED_MODULE_1__[ /* EventStageList */ "a"].FIRST_INNING: {
                        var participant3CharName = "";
                        var serving = this._data[this._feedIndexes.COMMONINDEXES_CURRENT_SERVICE_SIDE];
                        var isCricketOdiOrT20 = [_react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__[ /* CricketTypesList */ "a"].T20, _react_lib_lists_CricketTypesList__WEBPACK_IMPORTED_MODULE_0__[ /* CricketTypesList */ "a"].ODI].indexOf(this._data[this._feedIndexes.SHAREDINDEXES_CRICKET_TYPE]) > -1;
                        if (isCricketOdiOrT20 && [1, 2].indexOf(serving) > -1) {
                            if (serving === 1) {
                                participant3CharName = this._data[this._feedIndexes.COMMONINDEXES_AWAY_3CHAR_NAME];
                            } else {
                                participant3CharName = this._data[this._feedIndexes.COMMONINDEXES_HOME_3CHAR_NAME];
                            }
                            stageText = this.utilTrans.translate("TRANS_CRICKET_MATCH_STATUS_3CHARINN", [participant3CharName]);
                        }
                        break;
                    }
                }
                return stageText;
            };
            Cricket.prototype.getCricketSentense = function() {
                var cricketSentense = "";
                if (this._data[this._feedIndexes.COMMONINDEXES_CRICKET_SENTENCE]) {
                    return this._data[this._feedIndexes.COMMONINDEXES_CRICKET_SENTENCE];
                }
                return cricketSentense;
            };
            return Cricket;
        }());



        /***/
    }),
    /* 38 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
            return false;
        }

        /* harmony default export */
        __webpack_exports__["a"] = (stubFalse);


        /***/
    }),
    /* 39 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function(module) {
            /* harmony import */
            var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);


            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__[ /* default */ "a"].Buffer : undefined,
                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length,
                    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                buffer.copy(result);
                return result;
            }

            /* harmony default export */
            __webpack_exports__["a"] = (cloneBuffer);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(14)(module)))

        /***/
    }),
    /* 40 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return FetchProxy;
        });
        var FetchProxy = /** @class */ (function() {
            function FetchProxy(iframeUrl) {
                this.fetchPromise = new Promise(function(resolve, reject) {
                    var iframe = document.createElement("iframe");
                    iframe.src = iframeUrl;
                    iframe.onload = function() {
                        if (iframe.contentWindow) {
                            resolve(iframe.contentWindow.fetch);
                        } else {
                            reject("iframe.contentWindow not found in FeedProxy");
                        }
                    };
                    document.getElementsByTagName("head")[0].appendChild(iframe);
                });
            }
            FetchProxy.prototype.fetch = function() {
                return this.fetchPromise;
            };
            return FetchProxy;
        }());



        /***/
    }),
    /* 41 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return NewsfeedParser;
        });
        /* unused harmony export NewsfeedContainerImpl */
        /* harmony import */
        var _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var NewsfeedParser = /** @class */ (function() {
            function NewsfeedParser(util_enviroment) {
                this._constants = util_enviroment.getFeedIndexes();
            }
            NewsfeedParser.prototype.build = function(rootNode) {
                this._newsfeedContainer = new NewsfeedContainerImpl();
                var tableNode = rootNode.getChildren();
                if (tableNode[0] && tableNode[0].getType().getType() === this._constants.COMMONINDEXES_TABLE) {
                    this.setTableItems(tableNode[0]);
                }
                return this._newsfeedContainer;
            };
            NewsfeedParser.prototype.setTableItems = function(tabNode) {
                var e_1, _a;
                var eventItem;
                var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
                ParserHelper.checkNodeType(tabNode, this._constants.COMMONINDEXES_TABLE);
                try {
                    for (var _b = __values(tabNode.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        switch (node.getType().getType()) {
                            case this._constants.COMMONINDEXES_ROW:
                                if (eventItem) {
                                    eventItem.addItem(this.setRowItems(node.getChildren()));
                                } else {
                                    this._newsfeedContainer.addItem(this.setRowItems(node.getChildren()));
                                }
                                break;
                            case this._constants.COMMONINDEXES_ROW_NEWS_EVENT:
                                eventItem = this.setEventItem(node);
                                break;
                            case this._constants.COMMONINDEXES_ROW_NEWS_MORE:
                                if (eventItem) {
                                    eventItem.setMoreEventItem(this.setMoreEventItem(node));
                                    this._newsfeedContainer.addItem(eventItem);
                                    eventItem = undefined;
                                }
                                break;
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
            };
            NewsfeedParser.prototype.setRowItems = function(rowNodes) {
                var e_2, _a;
                var rowBuilder = new _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_0__[ /* ItemBuilder */ "b"]();
                try {
                    for (var rowNodes_1 = __values(rowNodes), rowNodes_1_1 = rowNodes_1.next(); !rowNodes_1_1.done; rowNodes_1_1 = rowNodes_1.next()) {
                        var col = rowNodes_1_1.value;
                        var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
                        ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_COL);
                        this.setRowVal(rowBuilder, col.getProperties());
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (rowNodes_1_1 && !rowNodes_1_1.done && (_a = rowNodes_1.return)) _a.call(rowNodes_1);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
                return rowBuilder.build();
            };
            NewsfeedParser.prototype.setEventItem = function(eventNode) {
                var e_3, _a;
                var eventItemBuilder = new _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_0__[ /* EventItemBuilder */ "a"]();
                var properties = eventNode.getProperties();
                for (var propKey in properties) {
                    var propVal = properties[propKey];
                    switch (propKey) {
                        case this._constants.NEWSFEEDPORTABLEINDEXES_FINAL_SCORE:
                            eventItemBuilder.setFinalScore(propVal);
                            break;
                        case this._constants.NEWSFEEDPORTABLEINDEXES_HOME_SCORE:
                            eventItemBuilder.setHomeScore(propVal);
                            break;
                        case this._constants.NEWSFEEDPORTABLEINDEXES_AWAY_SCORE:
                            eventItemBuilder.setAwayScore(propVal);
                            break;
                        case this._constants.NEWSFEEDPORTABLEINDEXES_EVENT_START:
                            eventItemBuilder.setStartTime(parseInt(propVal));
                            break;
                    }
                }
                var participantNodes = eventNode.getChildren();
                try {
                    for (var participantNodes_1 = __values(participantNodes), participantNodes_1_1 = participantNodes_1.next(); !participantNodes_1_1.done; participantNodes_1_1 = participantNodes_1.next()) {
                        var participantNode = participantNodes_1_1.value;
                        eventItemBuilder.addParticipant(this.parseEventParticipant(participantNode));
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (participantNodes_1_1 && !participantNodes_1_1.done && (_a = participantNodes_1.return)) _a.call(participantNodes_1);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
                return eventItemBuilder.build();
            };
            NewsfeedParser.prototype.parseEventParticipant = function(participantNode) {
                var pariticipantEventItemBuilder = new _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_0__[ /* ParticipantEventItemBuilder */ "e"]();
                var participantProperties = participantNode.getProperties();
                for (var propKey in participantProperties) {
                    var propVal = participantProperties[propKey];
                    switch (propKey) {
                        case this._constants.NEWSFEEDINDEXES_PARTICIPANT_TYPE:
                            pariticipantEventItemBuilder.setType(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PARTICIPANT_SIDE:
                            pariticipantEventItemBuilder.setSide(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PARTICIPANT_IMAGE:
                            pariticipantEventItemBuilder.setImageUrl(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PARTICIPANT_NAME:
                            pariticipantEventItemBuilder.setName(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PARTICIPANT_IS_WINNER:
                            pariticipantEventItemBuilder.setWinner(propVal == "1");
                            break;
                    }
                }
                return pariticipantEventItemBuilder.build();
            };
            NewsfeedParser.prototype.setMoreEventItem = function(moreEventNode) {
                var moreEventItemBuilder = new _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_0__[ /* MoreEventItemBuilder */ "c"]();
                var properties = moreEventNode.getProperties();
                for (var propKey in properties) {
                    var propVal = properties[propKey];
                    switch (propKey) {
                        case this._constants.NEWSFEEDPORTABLEINDEXES_ID:
                            moreEventItemBuilder.setId(propVal);
                            break;
                    }
                }
                return moreEventItemBuilder.build();
            };
            NewsfeedParser.prototype.setRowVal = function(rowBuilder, properties) {
                for (var propKey in properties) {
                    var propVal = properties[propKey];
                    switch (propKey) {
                        case this._constants.NEWSFEEDINDEXES_TITLE:
                            rowBuilder.setTitle(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_LINK:
                            rowBuilder.setLink(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_IMAGE_URL:
                            rowBuilder.setImageUrl(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PEREX:
                            rowBuilder.setPerex(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_PUBLISHED:
                            rowBuilder.setPublished(parseInt(propVal));
                            break;
                        case this._constants.NEWSFEEDINDEXES_NAME:
                            rowBuilder.setProviderName(propVal);
                            break;
                        case this._constants.NEWSFEEDINDEXES_CATEGORY_ID:
                            rowBuilder.setCategoryId(parseInt(propVal));
                        case this._constants.NEWSFEEDINDEXES_CATEGORY:
                            rowBuilder.setCategory(propVal);
                    }
                }
            };
            return NewsfeedParser;
        }());

        var NewsfeedContainerImpl = /** @class */ (function() {
            function NewsfeedContainerImpl() {
                this._items = [];
            }
            NewsfeedContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            NewsfeedContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return NewsfeedContainerImpl;
        }());



        /***/
    }),
    /* 42 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return StringsImpl;
        });
        var StringsImpl = /** @class */ (function() {
            function StringsImpl(charset, webLanguage) {
                this.charset = charset;
                this.webLanguage = webLanguage;
                this._accents = {};
                this._letters = {};
                this._lettersUpper = {};
                this._localeCompareSupported = null;
                this._globalReplaceRegexCache = {};
                this.LANG_GREEK = "el";
                this._fillAccents();
                this._fillLetters();
                this._setLocaleAndLanguage();
            }
            StringsImpl.prototype._fillLetters = function() {
                this._letters = {
                    tr: ["i"],
                    el: ["Î¬", "Î­", "Î®", "Î¯", "Ï", "Ï", "Ï", "Ï", "Ï", "Ï"],
                };
                this._lettersUpper = {
                    tr: ["Ä°"],
                    el: ["Î", "Î", "Î", "Î", "Î", "Î¥", "Î©", "Î", "Î¥", "Î£"],
                };
            };
            StringsImpl.prototype._setLocaleAndLanguage = function() {
                this._locale = (this.charset + "").replace("_", "-");
                this._language = this.webLanguage;
            };
            StringsImpl.prototype._fillAccents = function() {
                this._accents = {
                    default: {
                        Ã: "A",
                        Ã: "A",
                        Ã: "A",
                        Ã: "A",
                        Ã: "A",
                        Ã: "A",
                        Ã: "AE",
                        Ã: "C",
                        Ã: "E",
                        Ã: "E",
                        Ã: "E",
                        Ã: "E",
                        Ã: "I",
                        Ã: "I",
                        Ã: "I",
                        Ã: "I",
                        Ã: "D",
                        Ã: "N",
                        Ã: "O",
                        Ã: "O",
                        Ã: "O",
                        Ã: "O",
                        Ã: "O",
                        Ã: "O",
                        Ã: "U",
                        Ã: "U",
                        Ã: "U",
                        Ã: "U",
                        Ã: "Y",
                        Ã: "s",
                        Ã : "a",
                        Ã¡: "a",
                        Ã¢: "a",
                        Ã£: "a",
                        Ã¤: "a",
                        Ã¥: "a",
                        Ã¦: "ae",
                        Ã§: "c",
                        Ã¨: "e",
                        Ã©: "e",
                        Ãª: "e",
                        Ã«: "e",
                        Ã¬: "i",
                        Ã­: "i",
                        Ã®: "i",
                        Ã¯: "i",
                        Ã±: "n",
                        Ã²: "o",
                        Ã³: "o",
                        Ã´: "o",
                        Ãµ: "o",
                        Ã¶: "o",
                        Ã¸: "o",
                        Ã¹: "u",
                        Ãº: "u",
                        Ã»: "u",
                        Ã¼: "u",
                        Ã½: "y",
                        Ã¿: "y",
                        Ä: "A",
                        Ä: "a",
                        Ä: "A",
                        Ä: "a",
                        Ä: "A",
                        Ä: "a",
                        Ä: "C",
                        Ä: "c",
                        Ä: "C",
                        Ä: "c",
                        Ä: "C",
                        Ä: "c",
                        Ä: "C",
                        Ä: "c",
                        Ä: "D",
                        Ä: "d",
                        Ä: "D",
                        Ä: "d",
                        Ä: "E",
                        Ä: "e",
                        Ä: "E",
                        Ä: "e",
                        Ä: "E",
                        Ä: "e",
                        Ä: "E",
                        Ä: "e",
                        Ä: "E",
                        Ä: "e",
                        Ä: "G",
                        Ä: "g",
                        Ä: "G",
                        Ä: "g",
                        Ä : "G",
                        Ä¡: "g",
                        Ä¢: "G",
                        Ä£: "g",
                        Ä¤: "H",
                        Ä¥: "h",
                        Ä¦: "H",
                        Ä§: "h",
                        Ä¨: "I",
                        Ä©: "i",
                        Äª: "I",
                        Ä«: "i",
                        Ä¬: "I",
                        Ä­: "i",
                        Ä®: "I",
                        Ä¯: "i",
                        Ä±: "i",
                        Ä²: "IJ",
                        Ä³: "ij",
                        Ä´: "J",
                        Äµ: "j",
                        Ä¶: "K",
                        Ä·: "k",
                        Ä¹: "L",
                        Äº: "l",
                        Ä»: "L",
                        Ä¼: "l",
                        Ä½: "L",
                        Ä¾: "l",
                        Ä¿: "L",
                        Å: "l",
                        Å: "L",
                        Å: "l",
                        Å: "N",
                        Å: "n",
                        Å: "N",
                        Å: "n",
                        Å: "N",
                        Å: "n",
                        Å: "n",
                        Å: "O",
                        Å: "o",
                        Å: "O",
                        Å: "o",
                        Å: "O",
                        Å: "o",
                        Å: "OE",
                        Å: "oe",
                        Å: "R",
                        Å: "r",
                        Å: "R",
                        Å: "r",
                        Å: "R",
                        Å: "r",
                        Å: "S",
                        Å: "s",
                        Å: "S",
                        Å: "s",
                        Å: "S",
                        Å: "s",
                        Å : "S",
                        Å¡: "s",
                        Å¢: "T",
                        Å£: "t",
                        Å¤: "T",
                        Å¥: "t",
                        Å¦: "T",
                        Å§: "t",
                        Å¨: "U",
                        Å©: "u",
                        Åª: "U",
                        Å«: "u",
                        Å¬: "U",
                        Å­: "u",
                        Å®: "U",
                        Å¯: "u",
                        Å°: "U",
                        Å±: "u",
                        Å²: "U",
                        Å³: "u",
                        Å´: "W",
                        Åµ: "w",
                        Å¶: "Y",
                        Å·: "y",
                        Å¸: "Y",
                        Å¹: "Z",
                        Åº: "z",
                        Å»: "Z",
                        Å¼: "z",
                        Å½: "Z",
                        Å¾: "z",
                        Å¿: "s",
                        Æ: "f",
                        Æ : "O",
                        Æ¡: "o",
                        Æ¯: "U",
                        Æ°: "u",
                        Ç: "A",
                        Ç: "a",
                        Ç: "I",
                        Ç: "i",
                        Ç: "O",
                        Ç: "o",
                        Ç: "U",
                        Ç: "u",
                        Ç: "U",
                        Ç: "u",
                        Ç: "U",
                        Ç: "u",
                        Ç: "U",
                        Ç: "u",
                        Ç: "U",
                        Ç: "u",
                        Çº: "A",
                        Ç»: "a",
                        Ç¼: "AE",
                        Ç½: "ae",
                        Ç¾: "O",
                        Ç¿: "o",
                    },
                    cs: {
                        Ã: "A\xFF",
                        Ä: "C\xFF",
                        Ä: "D\xFF",
                        Ã: "E\xFE",
                        Ä: "E\xFF",
                        CH: "H\xFE",
                        Ch: "H\xFF",
                        Ã: "I\xFF",
                        Å: "N\xFF",
                        Ã: "O\xFF",
                        Å: "R\xFF",
                        Å : "S\xFF",
                        Å¤: "T\xFF",
                        Ã: "U\xFE",
                        Å®: "U\xFF",
                        Ã: "Y\xFF",
                        Å½: "Z\xFF",
                        Ã¡: "a\xFF",
                        Ä: "c\xFF",
                        ch: "h\xFF",
                        Ä: "d\xFF",
                        Ã©: "e\xEF",
                        Ä: "e\xFF",
                        Ã­: "i\xFF",
                        Å: "n\xFF",
                        Ã³: "o\xFF",
                        Å: "r\xFF",
                        Å¡: "s\xFF",
                        Å¥: "t\xFF",
                        Ãº: "u\xEF",
                        Å¯: "u\xFF",
                        Ã½: "y\xFF",
                        Å¾: "z\xFF",
                    },
                    da: {
                        Ã: "Z\xFD",
                        Ã: "Z\xFE",
                        Ã: "Z\xFF",
                        Ã¦: "z\xFD",
                        Ã¸: "z\xFE",
                        Ã¥: "z\xFF",
                    },
                    de: {
                        Ã: "A\xFF",
                        Ã: "O\xFF",
                        Ã: "U\xFF",
                        Ã¤: "a\xFF",
                        Ã¶: "o\xFF",
                        Ã¼: "u\xFF",
                    },
                    en: {},
                    "en-africa": {},
                    "en-asia": {},
                    "en-au": {},
                    "en-ca": {},
                    "en-india": {},
                    "en-uk": {},
                    "en-usa": {},
                    el: {
                        Î: "A\xFF",
                        Î: "B\xFF",
                        Î: "C\xFF",
                        Î: "DxFF",
                        Î: "E\xFF",
                        Î: "F\xFF",
                        Î: "H\xFF",
                        Î: "I\xFE",
                        Î: "I\xFF",
                        Î: "K\xFF",
                        Î: "L\xFF",
                        Î: "M\xFF",
                        Î: "N\xFF",
                        Î: "O\xFE",
                        Î: "O\xFF",
                        Î : "P\xFE",
                        Î¡: "P\xFF",
                        Î£: "R\xFF",
                        Î¤: "T\xFF",
                        Î¥: "Y\xFE",
                        Î¦: "Y\xFF",
                        Î§: "Z\xFD",
                        Î¨: "Z\xFE",
                        Î©: "Z\xFF",
                        Î: "A\xFD",
                        Î: "E\xFD",
                        Î: "H\xFE",
                        Î: "I\xFF",
                        Î: "O\xFD",
                        Î: "V\xFE",
                        Î: "Z\xFF",
                        Î¬: "a\xFE",
                        Î±: "a\xFF",
                        Î²: "b\xFF",
                        Î³: "c\xFF",
                        Î´: "d\xFF",
                        Î­: "e\xFE",
                        Îµ: "e\xFF",
                        Î¶: "f\xFF",
                        Î·: "g\xFF",
                        Î®: "h\xFE",
                        Î¸: "h\xFF",
                        Î¹: "i\xFE",
                        Î¯: "i\xFF",
                        Îº: "k\xFF",
                        Î»: "l\xFF",
                        Î¼: "m\xFF",
                        Î½: "n\xFF",
                        Î¾: "o\xFD",
                        Ï: "o\xFE",
                        Î¿: "o\xFF",
                        Ï: "p\xFF",
                        Ï: "r\xFF",
                        Ï: "s\xFF",
                        Ï: "t\xFF",
                        Ï: "u\xFF",
                        Ï: "v\xEF",
                        Ï: "v\xFF",
                        Ï: "x\xFF",
                        Ï: "y\xFF",
                        Ï: "z\xEF",
                        Ï: "z\xFF",
                    },
                    es: {
                        Ã: "N\xFF",
                        Ã±: "n\xFF",
                    },
                    fi: {
                        Ã: "Z\xFD",
                        Ã: "Z\xFE",
                        Ã: "Z\xFF",
                        Ã¥: "z\xFD",
                        Ã¤: "z\xFE",
                        Ã¶: "z\xFF",
                    },
                    fr: {
                        Ã: "E\xFD",
                        Ã: "E\xFE",
                        Ã: "E\xFF",
                        Ã : "a\xFF",
                        Ã§: "c\xFF",
                        Ã©: "e\xFD",
                        Ã¨: "e\xFE",
                        Ãª: "e\xFF",
                    },
                    hr: {
                        Ä: "C\xFE",
                        Ä: "C\xFF",
                        DÅ½: "D\xFE",
                        DÅ¾: "D\xFE",
                        Ä: "D\xFF",
                        LJ: "L\xFF",
                        Lj: "L\xFF",
                        NJ: "N\xFF",
                        Nj: "N\xFF",
                        Å : "S\xFF",
                        Å½: "Z\xFF",
                        Ä: "c\xFE",
                        Ä: "c\xFF",
                        dÅ¾: "d\xFE",
                        Ä: "d\xFF",
                        lj: "l\xFF",
                        nj: "n\xFF",
                        Å¡: "s\xFF",
                        Å¾: "z\xFF",
                    },
                    hu: {
                        Ã: "A\xFE",
                        "ÃÂ": "A\xFE",
                        CS: "C\xFF",
                        Cs: "C\xFF",
                        Dz: "D\xFE",
                        DZ: "D\xFE",
                        Dzs: "D\xFF",
                        Ã: "E\xFF",
                        Gy: "G\xFF",
                        GY: "G\xFF",
                        Ã: "I\xFF",
                        Ly: "L\xFF",
                        LY: "L\xFF",
                        Ny: "N\xFF",
                        NY: "N\xFF",
                        Ã: "O\xFD",
                        Ã: "O\xFE",
                        Å: "O\xFF",
                        Sz: "S\xFF",
                        SZ: "S\xFF",
                        Ty: "T\xFF",
                        TY: "T\xFF",
                        Ã: "U\xFD",
                        Ã: "U\xFE",
                        Å°: "U\xFF",
                        Zs: "Z\xFF",
                        ZS: "Z\xFF",
                        Ã¡: "a\xFF",
                        cs: "c\xFF",
                        dz: "d\xFE",
                        dzs: "dFF",
                        Ã©: "e\xFF",
                        gy: "g\xFF",
                        Ã­: "i\xFF",
                        ly: "l\xFF",
                        ny: "n\xFF",
                        Ã³: "o\xFD",
                        Ã¶: "o\xFE",
                        Å: "o\xFF",
                        sz: "s\xFF",
                        ty: "t\xFF",
                        Ãº: "u\xFD",
                        Ã¼: "u\xFE",
                        Å±: "u\xFF",
                        zs: "z\xFF",
                    },
                    it: {
                        Ã: "A\xFF",
                        Ã: "E\xFF",
                        Ã: "I\xFF",
                        Ã: "O\xFF",
                        Ã: "U\xFF",
                        Ã¡: "a\xFF",
                        Ã©: "e\xFF",
                        Ã­: "i\xFF",
                        Ã³: "o\xFF",
                        Ãº: "u\xFF",
                    },
                    lt: {
                        Ä: "A\xFF",
                        Ä: "C\xFF",
                        Ä: "E\xFE",
                        Ä: "E\xFF",
                        Ä®: "I\xFE",
                        Y: "I\xFF",
                        Å : "S\xFF",
                        Å²: "U\xFE",
                        Åª: "U\xFF",
                        Å½: "Z\xFF",
                        Ä: "a\xFF",
                        Ä: "c\xFF",
                        Ä: "e\xFE",
                        Ä: "e\xFF",
                        Ä¯: "i\xFE",
                        y: "i\xFF",
                        Å¡: "s\xFF",
                        Å³: "u\xFE",
                        Å«: "u\xFF",
                        Å¾: "z\xFF",
                    },
                    nl: {
                        Ã: "A\xFE",
                        Ã: "A\xFF",
                        Ã: "E\xFE",
                        Ã: "E\xFF",
                        Ã: "I\xFF",
                        Ã: "O\xFE",
                        Ã: "O\xFF",
                        Ã: "U\xFE",
                        Ã: "U\xFF",
                        Ã¡: "a\xFE",
                        Ã¤: "a\xFF",
                        Ã©: "e\xFE",
                        Ã«: "e\xFF",
                        Ã¯: "i\xFF",
                        Ã³: "o\xFE",
                        Ã¶: "o\xFF",
                        Ãº: "u\xFE",
                        Ã¼: "u\xFF",
                    },
                    no: {
                        Ã: "Z\xFD",
                        Ã: "Z\xFE",
                        Ã: "Z\xFF",
                        Ã¦: "z\xFD",
                        Ã¸: "z\xFE",
                        Ã¥: "z\xFF",
                    },
                    pl: {
                        Ä: "A\xFF",
                        Ä: "C\xFF",
                        Ä: "E\xFF",
                        Å: "L\xFF",
                        Å: "N\xFF",
                        Ã: "O\xFF",
                        Å: "S\xFF",
                        Å¹: "Z\xFE",
                        Å»: "Z\xFF",
                        Ä: "a\xFF",
                        Ä: "c\xFF",
                        Ä: "e\xFF",
                        Å: "l\xFF",
                        Å: "n\xFF",
                        Ã³: "o\xFF",
                        Å: "s\xFF",
                        Åº: "z\xFE",
                        Å¼: "z\xFF",
                    },
                    pt: {
                        Ã: "A\xFF",
                        Ã: "E\xFF",
                        Ã: "I\xFF",
                        Ã: "O\xFF",
                        Ã: "U\xFF",
                        Ã¡: "a\xFF",
                        Ã©: "e\xFF",
                        Ã­: "i\xFF",
                        Ã³: "o\xFF",
                        Ãº: "u\xFF",
                    },
                    "pt-br": {
                        Ã: "A\xFC",
                        Ã: "A\xFD",
                        Ã: "A\xFE",
                        Ã: "A\xFF",
                        Ã: "C\xFF",
                        Ã: "E\xFE",
                        Ã: "E\xFF",
                        Ã: "I\xFF",
                        Ã: "O\xFD",
                        Ã: "O\xFE",
                        Ã: "O\xFF",
                        Ã: "U\xFE",
                        Ã: "U\xFF",
                        Ã : "a\xFC",
                        Ã¡: "a\xFD",
                        Ã¢: "a\xFE",
                        Ã£: "a\xFF",
                        Ã§: "c\xFF",
                        Ã©: "e\xFE",
                        Ãª: "e\xFF",
                        Ã­: "i\xFF",
                        Ã³: "o\xFD",
                        Ã´: "o\xFE",
                        Ãµ: "o\xFF",
                        Ãº: "u\xFE",
                        Ã¼: "u\xFF",
                    },
                    ro: {
                        Ä: "A\xFE",
                        Ã: "A\xFF",
                        Ã: "I\xFF",
                        È: "S\xFF",
                        È: "T\xFE",
                        Å¢: "T\xFF",
                        Ä: "a\xFE",
                        Ã¢: "a\xFF",
                        È: "s\xFF",
                        È: "t\xFF",
                    },
                    ru: {
                        Ð: "A\xFA",
                        Ð: "A\xFB",
                        Ð: "A\xFC",
                        Ð: "A\xFD",
                        Ð: "A\xFE",
                        Ð: "A\xFF",
                        Ð: "B\xFA",
                        Ð: "B\xFB",
                        Ð: "B\xFC",
                        Ð: "B\xFD",
                        Ð: "B\xFE",
                        Ð: "B\xFF",
                        Ð: "C\xFA",
                        Ð: "C\xFB",
                        Ð: "C\xFC",
                        Ð: "C\xFD",
                        Ð: "C\xFE",
                        Ð : "C\xFF",
                        Ð¡: "D\xFA",
                        Ð¢: "D\xFB",
                        Ð£: "D\xFC",
                        Ð¤: "D\xFD",
                        Ð¥: "D\xFE",
                        Ð¦: "D\xFF",
                        Ð§: "E\xFA",
                        Ð¨: "E\xFB",
                        Ð©: "E\xFC",
                        Ðª: "E\xFD",
                        Ð«: "E\xFE",
                        Ð¬: "E\xFF",
                        Ð­: "F\xFD",
                        Ð®: "F\xFE",
                        Ð¯: "F\xFF",
                        Ð°: "a\xFA",
                        Ð±: "a\xFB",
                        Ð²: "a\xFC",
                        Ð³: "a\xFD",
                        Ð´: "a\xFE",
                        Ðµ: "a\xFF",
                        Ñ: "b\xFA",
                        Ð¶: "b\xFB",
                        Ð·: "b\xFC",
                        Ð¸: "b\xFD",
                        Ð¹: "b\xFE",
                        Ðº: "b\xFF",
                        Ð»: "c\xFA",
                        Ð¼: "c\xFB",
                        Ð½: "c\xFC",
                        Ð¾: "c\xFD",
                        Ð¿: "c\xFE",
                        Ñ: "c\xFF",
                        Ñ: "d\xFA",
                        Ñ: "d\xFB",
                        Ñ: "d\xFC",
                        Ñ: "d\xFD",
                        Ñ: "d\xFE",
                        Ñ: "d\xFF",
                        Ñ: "e\xFA",
                        Ñ: "e\xFB",
                        Ñ: "e\xFC",
                        Ñ: "e\xFD",
                        Ñ: "e\xFE",
                        Ñ: "e\xFF",
                        Ñ: "f\xFD",
                        Ñ: "f\xFE",
                        Ñ: "f\xFF",
                    },
                    sk: {
                        Ã: "A\xFE",
                        Ã: "A\xFF",
                        Ä: "C\xFF",
                        Ä: "D\xFD",
                        DZ: "D\xFE",
                        DÅ½: "D\xFF",
                        Dz: "D\xFE",
                        DÅ¾: "D\xFF",
                        Ã: "E\xFF",
                        CH: "H\xFE",
                        Ch: "H\xFF",
                        Ã: "I\xFF",
                        Ä¹: "L\xFE",
                        Ä½: "L\xFF",
                        Å: "N\xFF",
                        Ã: "O\xFE",
                        Ã: "O\xFF",
                        Å: "R\xFF",
                        Å : "S\xFF",
                        Å¤: "T\xFF",
                        Ã: "U\xFF",
                        Ã: "Y\xFF",
                        Å½: "Z\xFF",
                        Ã¡: "a\xFE",
                        Ã¤: "a\xFF",
                        Ä: "c\xFF",
                        Ä: "d\xFD",
                        dz: "d\xFE",
                        dÅ¾: "d\xFF",
                        Ã©: "e\xFF",
                        ch: "h\xFF",
                        Ã­: "i\xFF",
                        Äº: "l\xFE",
                        Ä¾: "l\xFF",
                        Å: "n\xFF",
                        Ã³: "o\xFE",
                        Ã´: "o\xFF",
                        Å: "r\xFF",
                        Å¡: "s\xFF",
                        Å¥: "t\xFF",
                        Ãº: "u\xFF",
                        Ã½: "y\xFF",
                        Å¾: "z\xFF",
                    },
                    sl: {
                        Ä: "C\xFF",
                        Å : "S\xFF",
                        Å½: "Z\xFF",
                        Ä: "c\xFF",
                        Å¡: "s\xFF",
                        Å¾: "z\xFF",
                    },
                    sr: {
                        Ä: "C\xFE",
                        Ä: "C\xFF",
                        DÅ½: "D\xFE",
                        Ä: "D\xFF",
                        LJ: "L\xFF",
                        NJ: "N\xFF",
                        Lj: "L\xFF",
                        Nj: "N\xFF",
                        Å : "S\xFF",
                        Å½: "Z\xFF",
                        Ä: "c\xFE",
                        Ä: "c\xFF",
                        dÅ¾: "d\xFE",
                        Ä: "d\xFF",
                        lj: "l\xFF",
                        nj: "n\xFF",
                        Å¡: "s\xFF",
                        Å¾: "z\xFF",
                    },
                    sv: {
                        Ã: "Z\xFD",
                        Ã: "Z\xFE",
                        Ã: "Z\xFF",
                        Ã¥: "z\xFD",
                        Ã¤: "z\xFE",
                        Ã¶: "z\xFF",
                    },
                    tr: {
                        Ã: "C\xFF",
                        Ä: "G\xFF",
                        Ä°: "I\xFF",
                        Ã: "O\xFF",
                        Å: "S\xFF",
                        Ã: "U\xFF",
                        Ã§: "c\xFF",
                        Ä: "g\xFF",
                        Ä±: "h\xFF",
                        Ã¶: "o\xFF",
                        Å: "s\xFF",
                        Ã¼: "u\xFF",
                    },
                    vi: {
                        Ä: "A\xFE",
                        Ã: "A\xFF",
                        Ä: "D\xFF",
                        Ã: "E\xFF",
                        Ã: "O\xFE",
                        Æ : "O\xFF",
                        Æ¯: "U\xFF",
                        Ä: "a\xFE",
                        Ã¢: "a\xFF",
                        Ä: "d\xFF",
                        Ãª: "e\xFF",
                        Ã´: "o\xFE",
                        Æ¡: "o\xFF",
                        Æ°: "u\xFF",
                    },
                };
                this._accents["de-at"] = this._accents.de;
                this._accents["in"] = this._accents.en;
                this._accents["ms"] = this._accents.en;
                this._fillMissingAccentsFromDefault();
            };
            StringsImpl.prototype._fillMissingAccentsFromDefault = function() {
                var accentKey = "";
                var lang = "";
                var accentVal = "";
                for (lang in this._accents) {
                    if (lang === "default") {
                        continue;
                    }
                    for (accentKey in this._accents["default"]) {
                        accentVal = this._accents["default"][accentKey];
                        if (this._accents[lang][accentKey] == null) {
                            this._accents[lang][accentKey] = accentVal;
                        }
                    }
                }
            };
            StringsImpl.prototype._globalReplace = function(input, replacePairs, type) {
                if (!this._globalReplaceRegexCache.hasOwnProperty(type)) {
                    var keys = [];
                    for (var key in replacePairs) {
                        keys.push(key);
                    }
                    if (!keys.length) {
                        return input;
                    }
                    this._globalReplaceRegexCache[type] = new RegExp(keys.join("|"), "g");
                }
                return input.replace(this._globalReplaceRegexCache[type], function(key) {
                    return replacePairs[key];
                });
            };
            StringsImpl.prototype.toUpperFirstChar = function(input) {
                return input.charAt(0).toUpperCase() + input.slice(1);
            };
            StringsImpl.prototype.toUpper = function(input) {
                var firstPart;
                var secondPart;
                if (this._language === this.LANG_GREEK) {
                    firstPart = input.charAt(0).toUpperCase();
                    secondPart = input.slice(1);
                } else {
                    firstPart = "";
                    secondPart = input;
                }
                if (this._letters[this._language] &&
                    this._letters[this._language].length === this._lettersUpper[this._language].length) {
                    for (var i = 0; i <= this._letters[this._language].length - 1; i++) {
                        var re = new RegExp(this._letters[this._language][i], "g");
                        secondPart = secondPart.replace(re, this._lettersUpper[this._language][i]);
                    }
                }
                return firstPart + secondPart.toUpperCase();
            };
            StringsImpl.prototype.ltrim = function(input, char) {
                if (char === void 0) {
                    char = "\\s";
                }
                return input.replace(new RegExp("^" + char + "+", "g"), "");
            };
            StringsImpl.prototype.rtrim = function(input, char) {
                if (char === void 0) {
                    char = "\\s";
                }
                return input.replace(new RegExp(char + "+$", "g"), "");
            };
            StringsImpl.prototype.trim = function(input, char) {
                if (char === void 0) {
                    char = "\\s";
                }
                return input.replace(new RegExp("^" + char + "+|" + char + "+$", "g"), "");
            };
            StringsImpl.prototype.pad = function(input, maxStringLength, fillWithChar, leftSide) {
                if (fillWithChar === void 0) {
                    fillWithChar = " ";
                }
                if (leftSide === void 0) {
                    leftSide = false;
                }
                var outputString = input;
                var stringDiff = maxStringLength - input.length;
                var fillString = "";
                if (stringDiff < 0) {
                    outputString = input.substr(0, maxStringLength);
                } else if (stringDiff > 0 && fillWithChar.length > 0) {
                    for (var i = 1; i <= stringDiff / fillWithChar.length; i++) {
                        fillString += fillWithChar;
                    }
                }
                outputString = leftSide ? fillString + outputString : outputString + fillString;
                return outputString;
            };
            StringsImpl.prototype.lpad = function(input, maxStringLength, fillWithChar) {
                if (fillWithChar === void 0) {
                    fillWithChar = " ";
                }
                return this.pad(input, maxStringLength, fillWithChar, true);
            };
            StringsImpl.prototype.rpad = function(input, maxStringLength, fillWithChar) {
                if (fillWithChar === void 0) {
                    fillWithChar = " ";
                }
                return this.pad(input, maxStringLength, fillWithChar);
            };
            StringsImpl.prototype.fastCompare = function(a, b) {
                if (a === b) {
                    return 0;
                } else if (a < b) {
                    return -1;
                } else {
                    return 1;
                }
            };
            StringsImpl.prototype.compare = function(a, b) {
                if (this.isLocaleCompareSupported()) {
                    return a.localeCompare(b, this._locale);
                }
                return this.fastCompare(a, b);
            };
            StringsImpl.prototype.isLocaleCompareSupported = function() {
                if (typeof this._localeCompareSupported !== "boolean") {
                    this._localeCompareSupported = false;
                    if (this._locale && typeof "".localeCompare === "function") {
                        try {
                            "".localeCompare("", this._locale);
                            this._localeCompareSupported = true;
                            // eslint-disable-next-line no-empty
                        } catch (e) {}
                    }
                }
                return this._localeCompareSupported;
            };
            // TOUCH ONLY
            StringsImpl.prototype.sportToTransIndex = function(sportName) {
                return sportName.replace(/-/, "_").toUpperCase();
            };
            StringsImpl.prototype.replaceAccents = function(input) {
                var type = this.hasAccentsForLanguage() ? this._language : "default";
                return this._globalReplace(input, this._accents[type], type);
            };
            StringsImpl.prototype.hasAccentsForLanguage = function() {
                if (this._accents && this._accents[this._language]) {
                    return true;
                }
                return false;
            };
            return StringsImpl;
        }());



        /***/
    }),
    /* 43 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return MatchHistoryParser;
        });
        /* unused harmony export MatchHistoryTabContainerImpl */
        /* unused harmony export MatchHistoryTabContainerItemImpl */
        /* harmony import */
        var _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var NOTAB = "notab";
        var MatchHistoryParser = /** @class */ (function() {
            function MatchHistoryParser(util_enviroment) {
                this._constants = util_enviroment.getFeedIndexes();
            }
            MatchHistoryParser.prototype.build = function(rootNode) {
                var e_1, _a;
                this._tabContainer = new MatchHistoryTabContainerImpl();
                var children = rootNode.getChildren();
                try {
                    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                        var child = children_1_1.value;
                        var childType = child.getType().getType();
                        if (childType === this._constants.COMMONINDEXES_MENU) {
                            this.setTab(child.getChildren());
                        }
                        if (childType === this._constants.COMMONINDEXES_GROUP) {
                            var tabId = child.getProperty(this._constants.COMMONINDEXES_TAB_ID, true);
                            var firstTable = child.getChildren()[0];
                            if (tabId == NOTAB) {
                                this.setNotab(tabId);
                            }
                            this.setTabData(firstTable, tabId);
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return this._tabContainer;
            };
            MatchHistoryParser.prototype.setTab = function(nodes) {
                var e_2, _a;
                var index = 1;
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var tab = nodes_1_1.value;
                        var tabItem = new MatchHistoryTabContainerItemImpl(tab.getId(), index, tab.getProperty(this._constants.COMMONINDEXES_VALUE, true));
                        this._tabContainer.addItem(tabItem);
                        index++;
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
            };
            MatchHistoryParser.prototype.setNotab = function(tabId) {
                var tabItem = new MatchHistoryTabContainerItemImpl(tabId, 1, "");
                this._tabContainer.addItem(tabItem);
            };
            MatchHistoryParser.prototype.setTabData = function(tabNode, tabId) {
                var e_3, _a;
                var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
                ParserHelper.checkNodeType(tabNode, this._constants.COMMONINDEXES_TABLE);
                var tabContainerItem = this.getTabContainerById(tabId);
                var rowId = 1;
                try {
                    for (var _b = __values(tabNode.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        var isCurrent = ParserHelper.checkNodeType(row, this._constants.COMMONINDEXES_ROW_CURRENT, false);
                        var isScore = ParserHelper.checkNodeType(row, this._constants.COMMONINDEXES_ROW_SCORE, false);
                        var isPoints = ParserHelper.checkNodeType(row, this._constants.COMMONINDEXES_ROW_POINTS, false);
                        if (ParserHelper.checkNodeType(row, this._constants.COMMONINDEXES_HEADER, false)) {
                            tabContainerItem.setTableLabel(row.getProperty(this._constants.COMMONINDEXES_VALUE, true));
                        } else if (isCurrent || isScore || isPoints) {
                            var rowItem = new _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_0__[ /* RowItemBuilder */ "b"]()
                                .setService(row.getProperty(this._constants.STATSINDEXES_SERVICE_PARTICIPANT_TYPE, false))
                                .setLostService(row.getProperty(this._constants.STATSINDEXES_SERVICE_LOST_PARTICIPANT_TYPE, false))
                                .setId(rowId)
                                .setIsCurrent(isCurrent)
                                .setIsScore(isScore)
                                .setIsPoints(isPoints)
                                .build();
                            this.setScoreItems(rowItem, row.getChildren());
                            tabContainerItem.addRowItem(rowItem);
                            rowId++;
                        }
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
            };
            MatchHistoryParser.prototype.getTabContainerById = function(tabId) {
                var e_4, _a;
                try {
                    for (var _b = __values(this._tabContainer.getItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.getId() === tabId) {
                            return item;
                        }
                    }
                } catch (e_4_1) {
                    e_4 = {
                        error: e_4_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_4) throw e_4.error;
                    }
                }
                throw "Data for nonexistent tab. Requested tab: " + tabId;
            };
            MatchHistoryParser.prototype.setScoreItems = function(rowItem, rowCols) {
                var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
                var scoreBuilder = new _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_0__[ /* ScoreItemBuilder */ "c"]();
                var pointsId = 1;
                var scoreParticipantTypes = [];
                for (var i in rowCols) {
                    var col = rowCols[i];
                    if (ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_SCORE, false)) {
                        scoreBuilder.setScore(col.getProperty(this._constants.STATSINDEXES_PARTICIPANT_TYPE, true), col.getProperty(this._constants.COMMONINDEXES_VALUE, true), col.getProperty(this._constants.STATSINDEXES_IS_CHANGED, false));
                        scoreParticipantTypes.push(col.getProperty(this._constants.STATSINDEXES_PARTICIPANT_TYPE, true));
                        if (scoreParticipantTypes.indexOf("1") != -1 && scoreParticipantTypes.indexOf("2") != -1) {
                            if (Number(i) == rowCols.length - 1) {
                                scoreBuilder.setId(pointsId);
                                rowItem.addScoreItem(scoreBuilder.build());
                                pointsId++;
                            } else {
                                var nextCol = rowCols[Number(i) + 1];
                                if (ParserHelper.checkNodeType(nextCol, this._constants.COMMONINDEXES_SCORE, false)) {
                                    scoreBuilder.setId(pointsId);
                                    rowItem.addScoreItem(scoreBuilder.build());
                                    pointsId++;
                                    scoreParticipantTypes = [];
                                    scoreBuilder = new _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_0__[ /* ScoreItemBuilder */ "c"]();
                                }
                            }
                        }
                    } else if (ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_TEXT_SPEC, false)) {
                        scoreBuilder.setId(pointsId);
                        scoreBuilder.setText(col.getProperty(this._constants.COMMONINDEXES_VALUE, true));
                        rowItem.addScoreItem(scoreBuilder.build());
                        pointsId++;
                        scoreParticipantTypes = [];
                        scoreBuilder = new _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_0__[ /* ScoreItemBuilder */ "c"]();
                    }
                }
            };
            return MatchHistoryParser;
        }());

        var MatchHistoryTabContainerImpl = /** @class */ (function() {
            function MatchHistoryTabContainerImpl() {
                this._items = [];
            }
            MatchHistoryTabContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            MatchHistoryTabContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return MatchHistoryTabContainerImpl;
        }());

        var MatchHistoryTabContainerItemImpl = /** @class */ (function() {
            function MatchHistoryTabContainerItemImpl(id, index, label) {
                this._id = "";
                this._index = 1;
                this._label = "";
                this._tableLabel = "";
                this._items = [];
                this._id = id;
                this._index = index;
                this._label = label;
            }
            MatchHistoryTabContainerItemImpl.prototype.getId = function() {
                return this._id;
            };
            MatchHistoryTabContainerItemImpl.prototype.getIndex = function() {
                return this._index;
            };
            MatchHistoryTabContainerItemImpl.prototype.getLabel = function() {
                return this._label;
            };
            MatchHistoryTabContainerItemImpl.prototype.getTableLabel = function() {
                return this._tableLabel;
            };
            MatchHistoryTabContainerItemImpl.prototype.setTableLabel = function(tableLabel) {
                this._tableLabel = tableLabel;
                return this;
            };
            MatchHistoryTabContainerItemImpl.prototype.addRowItem = function(item) {
                this._items.push(item);
                return this;
            };
            MatchHistoryTabContainerItemImpl.prototype.getRowItems = function() {
                return this._items;
            };
            return MatchHistoryTabContainerItemImpl;
        }());



        /***/
    }),
    /* 44 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return Darts;
        });
        var Darts = /** @class */ (function() {
            function Darts(utilTrans) {
                this.utilTrans = utilTrans;
                this._constantsManager = cjs.Api.constantsManager;
            }
            Darts.prototype.getStatus = function(status, eventStageTypeId, homeScore, awayScore, isPlayingOnSets) {
                if (!isPlayingOnSets && eventStageTypeId == this._constantsManager.getEventStages().LIVE) {
                    var firstSetTrans = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_SET1");
                    var liveTrans = this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_LIVE");
                    var firstSetTransShort = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SET1");
                    var firstSetTransShortMobile = this.utilTrans.translate("TRANS_DARTS_DEFAULT_MATCH_STATUS_IFRAME_SHORT_SET1");
                    var liveTransShort = this.utilTrans.translate("TRANS_DEFAULT_MATCH_STATUS_IFRAME_LIVE");
                    var legNumber = "" + (Number(homeScore) + Number(awayScore) + 1);
                    var legNumberTrans = this.utilTrans.translate("TRANS_DARTS_LEG_NUMBER").replace("%s", legNumber);
                    var transToReplace = "";
                    if (status.indexOf(firstSetTrans) > -1) {
                        transToReplace = firstSetTrans;
                    } else if (status.indexOf(firstSetTransShort) > -1) {
                        transToReplace = firstSetTransShort;
                    } else if (status.indexOf(firstSetTransShortMobile) > -1) {
                        transToReplace = firstSetTransShortMobile;
                    } else if (status.indexOf(liveTrans) > -1) {
                        transToReplace = liveTrans;
                    } else if (status.indexOf(liveTransShort) > -1) {
                        transToReplace = liveTransShort;
                    }
                    if (transToReplace) {
                        status = status.replace(transToReplace, legNumberTrans);
                    }
                }
                return status;
            };
            Darts.prototype.getCurrentScore = function(isPlayingOnSets, homeLegs, awayLegs, homePoints, awayPoints) {
                var text = "";
                if (isPlayingOnSets) {
                    if (typeof homeLegs != "undefined" &&
                        homeLegs !== "" &&
                        typeof awayLegs != "undefined" &&
                        awayLegs !== "") {
                        text += "<br />" + homeLegs + " : " + awayLegs;
                    }
                    if (typeof homePoints != "undefined" &&
                        homePoints !== "" &&
                        typeof awayPoints != "undefined" &&
                        awayPoints !== "") {
                        text += " ( " + homePoints + " : " + awayPoints + " )";
                    }
                } else if (typeof homePoints != "undefined" &&
                    homePoints !== "" &&
                    typeof awayPoints != "undefined" &&
                    awayPoints !== "") {
                    text += "<br />" + homePoints + " : " + awayPoints;
                }
                return text;
            };
            Darts.prototype.getBestOf = function(isPlayingOnSets, bestOfFrames, iframe) {
                var bestOfTrans = "";
                var text = "";
                if (bestOfFrames) {
                    if (isPlayingOnSets) {
                        bestOfTrans = iframe ?
                            this.utilTrans.translate("TRANS_DARTS_BEST_OF_SETS_IFRAME") :
                            this.utilTrans.translate("TRANS_DARTS_BEST_OF_SETS");
                    } else {
                        bestOfTrans = iframe ?
                            this.utilTrans.translate("TRANS_DARTS_BEST_OF_LEGS_IFRAME") :
                            this.utilTrans.translate("TRANS_DARTS_BEST_OF_LEGS");
                    }
                    text = bestOfTrans.replace("%s", bestOfFrames);
                }
                return text;
            };
            return Darts;
        }());



        /***/
    }),
    /* 45 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return EventStatisticsParser;
        });
        /* unused harmony export EventStatisticsTabContainerImpl */
        /* unused harmony export EventStatisticsTabContainerItemImpl */
        /* unused harmony export EventStatisticsTabContainerItemBuilder */
        /* harmony import */
        var _Detail_EventStatistics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
        var __values = (undefined && undefined.__values) || function(o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
                next: function() {
                    if (o && i >= o.length) o = void 0;
                    return {
                        value: o && o[i++],
                        done: !o
                    };
                }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };

        var ID_STAT_NAME = "sN";
        var ID_STAT_HOME = "sH";
        var ID_STAT_AWAY = "sA";
        var EventStatisticsParser = /** @class */ (function() {
            function EventStatisticsParser(util_enviroment) {
                this._constants = util_enviroment.getFeedIndexes();
            }
            EventStatisticsParser.prototype.build = function(rootNode) {
                var e_1, _a;
                this._tabContainer = new EventStatisticsTabContainerImpl();
                var children = rootNode.getChildren();
                try {
                    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                        var child = children_1_1.value;
                        var childType = child.getType().getType();
                        if (childType === this._constants.COMMONINDEXES_MENU) {
                            this.setTab(child.getChildren());
                        }
                        if (childType === this._constants.COMMONINDEXES_GROUP) {
                            var firstTable = child.getChildren()[0];
                            var tabId = child.getProperty(this._constants.COMMONINDEXES_TAB_ID, true);
                            if (this._tabContainer.getItems().length == 0) {
                                var tabItem = new EventStatisticsTabContainerItemBuilder()
                                    .setId(tabId)
                                    .setLabel("")
                                    .build();
                                this._tabContainer.addItem(tabItem);
                            }
                            this.setTabData(firstTable, tabId);
                        }
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally {
                    try {
                        if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                    } finally {
                        if (e_1) throw e_1.error;
                    }
                }
                return this._tabContainer;
            };
            EventStatisticsParser.prototype.setTab = function(nodes) {
                var e_2, _a;
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var tab = nodes_1_1.value;
                        var tabItem = new EventStatisticsTabContainerItemBuilder()
                            .setId(tab.getId())
                            .setLabel(tab.getProperty(this._constants.COMMONINDEXES_VALUE, true))
                            .build();
                        this._tabContainer.addItem(tabItem);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
                    } finally {
                        if (e_2) throw e_2.error;
                    }
                }
            };
            EventStatisticsParser.prototype.setTabData = function(tabNode, tabId) {
                var e_3, _a, e_4, _b;
                var ParserHelper = cjs.dic.getClass("Feed_Table_ParserHelper");
                ParserHelper.checkNodeType(tabNode, this._constants.COMMONINDEXES_TABLE);
                var tabContainerItem = this.getTabContainerById(tabId);
                try {
                    for (var _c = __values(tabNode.getChildren()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var row = _d.value;
                        var rowBuilder = new _Detail_EventStatistics__WEBPACK_IMPORTED_MODULE_0__[ /* ItemBuilder */ "b"]();
                        rowBuilder.setId(row.getId());
                        try {
                            for (var _e = (e_4 = void 0, __values(row.getChildren())), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var col = _f.value;
                                ParserHelper.checkNodeType(col, this._constants.COMMONINDEXES_COL);
                                this.setRowVal(rowBuilder, col.getId(), col.getProperty("VA", true));
                            }
                        } catch (e_4_1) {
                            e_4 = {
                                error: e_4_1
                            };
                        } finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            } finally {
                                if (e_4) throw e_4.error;
                            }
                        }
                        tabContainerItem.addItem(rowBuilder.build());
                    }
                } catch (e_3_1) {
                    e_3 = {
                        error: e_3_1
                    };
                } finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    } finally {
                        if (e_3) throw e_3.error;
                    }
                }
            };
            EventStatisticsParser.prototype.getTabContainerById = function(tabId) {
                var e_5, _a;
                try {
                    for (var _b = __values(this._tabContainer.getItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.getId() === tabId) {
                            return item;
                        }
                    }
                } catch (e_5_1) {
                    e_5 = {
                        error: e_5_1
                    };
                } finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally {
                        if (e_5) throw e_5.error;
                    }
                }
                throw "Data for nonexistent tab. Requested tab: " + tabId;
            };
            EventStatisticsParser.prototype.setRowVal = function(rowBuilder, id, value) {
                switch (id) {
                    case ID_STAT_NAME:
                        rowBuilder.setName(value);
                        break;
                    case ID_STAT_HOME:
                        rowBuilder.setHome(value);
                        break;
                    case ID_STAT_AWAY:
                        rowBuilder.setAway(value);
                        break;
                }
            };
            return EventStatisticsParser;
        }());

        var EventStatisticsTabContainerImpl = /** @class */ (function() {
            function EventStatisticsTabContainerImpl() {
                this._items = [];
            }
            EventStatisticsTabContainerImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            EventStatisticsTabContainerImpl.prototype.getItems = function() {
                return this._items;
            };
            return EventStatisticsTabContainerImpl;
        }());

        var EventStatisticsTabContainerItemImpl = /** @class */ (function() {
            function EventStatisticsTabContainerItemImpl(id, label, items) {
                this._id = "";
                this._label = "";
                this._items = [];
                this._id = id;
                this._label = label;
                this._items = items;
            }
            EventStatisticsTabContainerItemImpl.prototype.getId = function() {
                return this._id;
            };
            EventStatisticsTabContainerItemImpl.prototype.getLabel = function() {
                return this._label;
            };
            EventStatisticsTabContainerItemImpl.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            EventStatisticsTabContainerItemImpl.prototype.getItems = function() {
                return this._items;
            };
            return EventStatisticsTabContainerItemImpl;
        }());

        var EventStatisticsTabContainerItemBuilder = /** @class */ (function() {
            function EventStatisticsTabContainerItemBuilder() {
                this._id = "";
                this._label = "";
                this._items = [];
            }
            EventStatisticsTabContainerItemBuilder.prototype.setId = function(id) {
                this._id = id;
                return this;
            };
            EventStatisticsTabContainerItemBuilder.prototype.setLabel = function(label) {
                this._label = label;
                return this;
            };
            EventStatisticsTabContainerItemBuilder.prototype.addItem = function(item) {
                this._items.push(item);
                return this;
            };
            EventStatisticsTabContainerItemBuilder.prototype.build = function() {
                return new EventStatisticsTabContainerItemImpl(this._id, this._label, this._items);
            };
            return EventStatisticsTabContainerItemBuilder;
        }());



        /***/
    }),
    /* 46 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return StatsResultsParser;
        });
        var StatsResultsParser = /** @class */ (function() {
            function StatsResultsParser(utilEnviroment) {
                this.utilEnviroment = utilEnviroment;
                this._statsResults = {};
                this._feedIndexes = utilEnviroment.getFeedIndexes();
                this._statsResultsIndexGenerator = window.cjs.Api.statsResultsIndexGenerator;
            }
            StatsResultsParser.prototype._setStatsResultsIsForDuel = function(index, value) {
                if (index == this._feedIndexes.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID) {
                    this._statsResultsIsForDuel = true;
                    this._rowEncodedEventParticipantId = value;
                } else if (index == this._feedIndexes.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID_END) {
                    this._statsResultsIsForDuel = false;
                }
                return this._statsResultsIsForDuel;
            };
            StatsResultsParser.prototype._setStatsResult = function(index, value) {
                if (index == this._feedIndexes.RESULTSINDEXES_ROW_VALUE) {
                    if (this._statsResultsTypeId !== null) {
                        if (this._statsResultsIsForDuel) {
                            if (this._homeEncodedEventParticipantId || this._awayEncodedEventParticipantId) {
                                var isHomeParticipant = this._isHomeParticipant(this._rowEncodedEventParticipantId);
                                var statsResultsKey = this._statsResultsIndexGenerator.get(this._statsResultsTypeId, isHomeParticipant);
                                if (statsResultsKey) {
                                    this._statsResults[statsResultsKey] = value;
                                }
                            }
                        } else {
                            var statsResultsKey = this._statsResultsIndexGenerator.get(this._statsResultsTypeId, true);
                            if (statsResultsKey) {
                                this._statsResults[statsResultsKey] = value;
                            }
                        }
                    }
                    this._statsResultsTypeId = null;
                }
                return this;
            };
            StatsResultsParser.prototype._isHomeParticipant = function(encodedEventParticipantId) {
                return this._homeEncodedEventParticipantId == encodedEventParticipantId;
            };
            StatsResultsParser.prototype._setStatsResultsTypeId = function(index, value) {
                if (index == this._feedIndexes.RESULTSINDEXES_ROW_VALUE_TYPE_ID) {
                    this._statsResultsTypeId = value;
                }
                return this;
            };
            StatsResultsParser.prototype.setHomeAndAwayParticipantIdsFromEventItem = function(eventItem) {
                var homeEncodedEventParticipantId = eventItem.getValue(this._feedIndexes.FULLFEEDINDEXES_HOME_EVENT_PARTICIPANT_ID);
                var awayEncodedEventParticipantId = eventItem.getValue(this._feedIndexes.FULLFEEDINDEXES_AWAY_EVENT_PARTICIPANT_ID);
                if (homeEncodedEventParticipantId) {
                    this._homeEncodedEventParticipantId = homeEncodedEventParticipantId;
                }
                if (awayEncodedEventParticipantId) {
                    this._awayEncodedEventParticipantId = awayEncodedEventParticipantId;
                }
                return this;
            };
            StatsResultsParser.prototype.isStatsResultsIndex = function(index) {
                var statsResultIndexes = [
                    this._feedIndexes.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID,
                    this._feedIndexes.RESULTSINDEXES_ROW_VALUE_TYPE_ID,
                    this._feedIndexes.RESULTSINDEXES_ROW_VALUE,
                    this._feedIndexes.RESULTSINDEXES_ROW_EVENT_PARTICIPANT_ID_END,
                ];
                return statsResultIndexes.indexOf(index) > -1;
            };
            StatsResultsParser.prototype.processKeyAndValue = function(key, value) {
                this._setStatsResultsIsForDuel(key, value);
                this._setStatsResultsTypeId(key, value);
                this._setStatsResult(key, value);
                return this;
            };
            StatsResultsParser.prototype.getStatsResults = function() {
                return this._statsResults;
            };
            return StatsResultsParser;
        }());



        /***/
    }),
    /* 47 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return /* binding */ Config_TabConfigs;
        });

        // UNUSED EXPORTS: TabConfig

        // CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js
        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }

        /* harmony default export */
        var _listCacheClear = (listCacheClear);

        // CONCATENATED MODULE: ./node_modules/lodash-es/eq.js
        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
            return value === other || (value !== value && other !== other);
        }

        /* harmony default export */
        var lodash_es_eq = (eq);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js


        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (lodash_es_eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }

        /* harmony default export */
        var _assocIndexOf = (assocIndexOf);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheDelete.js


        /** Used for built-in method references. */
        var arrayProto = Array.prototype;

        /** Built-in value references. */
        var splice = arrayProto.splice;

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
            var data = this.__data__,
                index = _assocIndexOf(data, key);

            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }

        /* harmony default export */
        var _listCacheDelete = (listCacheDelete);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js


        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
            var data = this.__data__,
                index = _assocIndexOf(data, key);

            return index < 0 ? undefined : data[index][1];
        }

        /* harmony default export */
        var _listCacheGet = (listCacheGet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js


        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
            return _assocIndexOf(this.__data__, key) > -1;
        }

        /* harmony default export */
        var _listCacheHas = (listCacheHas);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js


        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
            var data = this.__data__,
                index = _assocIndexOf(data, key);

            if (index < 0) {
                ++this.size;
                data.push([key, value]);
            } else {
                data[index][1] = value;
            }
            return this;
        }

        /* harmony default export */
        var _listCacheSet = (listCacheSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js




        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = _listCacheClear;
        ListCache.prototype['delete'] = _listCacheDelete;
        ListCache.prototype.get = _listCacheGet;
        ListCache.prototype.has = _listCacheHas;
        ListCache.prototype.set = _listCacheSet;

        /* harmony default export */
        var _ListCache = (ListCache);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js


        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
            this.__data__ = new _ListCache;
            this.size = 0;
        }

        /* harmony default export */
        var _stackClear = (stackClear);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js
        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
            var data = this.__data__,
                result = data['delete'](key);

            this.size = data.size;
            return result;
        }

        /* harmony default export */
        var _stackDelete = (stackDelete);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js
        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
            return this.__data__.get(key);
        }

        /* harmony default export */
        var _stackGet = (stackGet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js
        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
            return this.__data__.has(key);
        }

        /* harmony default export */
        var _stackHas = (stackHas);

        // EXTERNAL MODULE: ./node_modules/lodash-es/_root.js
        var _root = __webpack_require__(0);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Symbol.js


        /** Built-in value references. */
        var Symbol = _root["a" /* default */ ].Symbol;

        /* harmony default export */
        var _Symbol = (Symbol);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js


        /** Used for built-in method references. */
        var objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Built-in value references. */
        var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
            var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}

            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }

        /* harmony default export */
        var _getRawTag = (getRawTag);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js
        /** Used for built-in method references. */
        var _objectToString_objectProto = Object.prototype;

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var _objectToString_nativeObjectToString = _objectToString_objectProto.toString;

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
            return _objectToString_nativeObjectToString.call(value);
        }

        /* harmony default export */
        var _objectToString = (objectToString);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js




        /** `Object#toString` result references. */
        var nullTag = '[object Null]',
            undefinedTag = '[object Undefined]';

        /** Built-in value references. */
        var _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value)) ?
                _getRawTag(value) :
                _objectToString(value);
        }

        /* harmony default export */
        var _baseGetTag = (baseGetTag);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isObject.js
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }

        /* harmony default export */
        var lodash_es_isObject = (isObject);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isFunction.js



        /** `Object#toString` result references. */
        var asyncTag = '[object AsyncFunction]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            proxyTag = '[object Proxy]';

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
            if (!lodash_es_isObject(value)) {
                return false;
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = _baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        /* harmony default export */
        var lodash_es_isFunction = (isFunction);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_coreJsData.js


        /** Used to detect overreaching core-js shims. */
        var coreJsData = _root["a" /* default */ ]['__core-js_shared__'];

        /* harmony default export */
        var _coreJsData = (coreJsData);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_isMasked.js


        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
            var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
            return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
            return !!maskSrcKey && (maskSrcKey in func);
        }

        /* harmony default export */
        var _isMasked = (isMasked);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_toSource.js
        /** Used for built-in method references. */
        var funcProto = Function.prototype;

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return (func + '');
                } catch (e) {}
            }
            return '';
        }

        /* harmony default export */
        var _toSource = (toSource);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsNative.js




        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;

        /** Used for built-in method references. */
        var _baseIsNative_funcProto = Function.prototype,
            _baseIsNative_objectProto = Object.prototype;

        /** Used to resolve the decompiled source of functions. */
        var _baseIsNative_funcToString = _baseIsNative_funcProto.toString;

        /** Used to check objects for own properties. */
        var _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
            _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
            if (!lodash_es_isObject(value) || _isMasked(value)) {
                return false;
            }
            var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(_toSource(value));
        }

        /* harmony default export */
        var _baseIsNative = (baseIsNative);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined : object[key];
        }

        /* harmony default export */
        var _getValue = (getValue);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js



        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
            var value = _getValue(object, key);
            return _baseIsNative(value) ? value : undefined;
        }

        /* harmony default export */
        var _getNative = (getNative);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Map.js



        /* Built-in method references that are verified to be native. */
        var Map = _getNative(_root["a" /* default */ ], 'Map');

        /* harmony default export */
        var _Map = (Map);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_nativeCreate.js


        /* Built-in method references that are verified to be native. */
        var nativeCreate = _getNative(Object, 'create');

        /* harmony default export */
        var _nativeCreate = (nativeCreate);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js


        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
            this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
            this.size = 0;
        }

        /* harmony default export */
        var _hashClear = (hashClear);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js
        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }

        /* harmony default export */
        var _hashDelete = (hashDelete);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_hashGet.js


        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';

        /** Used for built-in method references. */
        var _hashGet_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
            var data = this.__data__;
            if (_nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        /* harmony default export */
        var _hashGet = (hashGet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_hashHas.js


        /** Used for built-in method references. */
        var _hashHas_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
            var data = this.__data__;
            return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);
        }

        /* harmony default export */
        var _hashHas = (hashHas);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_hashSet.js


        /** Used to stand-in for `undefined` hash values. */
        var _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;
            return this;
        }

        /* harmony default export */
        var _hashSet = (hashSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js




        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = _hashClear;
        Hash.prototype['delete'] = _hashDelete;
        Hash.prototype.get = _hashGet;
        Hash.prototype.has = _hashHas;
        Hash.prototype.set = _hashSet;

        /* harmony default export */
        var _Hash = (Hash);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js




        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new _Hash,
                'map': new(_Map || _ListCache),
                'string': new _Hash
            };
        }

        /* harmony default export */
        var _mapCacheClear = (mapCacheClear);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js
        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
            var type = typeof value;
            return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ?
                (value !== '__proto__') :
                (value === null);
        }

        /* harmony default export */
        var _isKeyable = (isKeyable);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js


        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
            var data = map.__data__;
            return _isKeyable(key) ?
                data[typeof key == 'string' ? 'string' : 'hash'] :
                data.map;
        }

        /* harmony default export */
        var _getMapData = (getMapData);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js


        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
            var result = _getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }

        /* harmony default export */
        var _mapCacheDelete = (mapCacheDelete);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js


        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
            return _getMapData(this, key).get(key);
        }

        /* harmony default export */
        var _mapCacheGet = (mapCacheGet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js


        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
            return _getMapData(this, key).has(key);
        }

        /* harmony default export */
        var _mapCacheHas = (mapCacheHas);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js


        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
            var data = _getMapData(this, key),
                size = data.size;

            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }

        /* harmony default export */
        var _mapCacheSet = (mapCacheSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js




        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;

            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = _mapCacheClear;
        MapCache.prototype['delete'] = _mapCacheDelete;
        MapCache.prototype.get = _mapCacheGet;
        MapCache.prototype.has = _mapCacheHas;
        MapCache.prototype.set = _mapCacheSet;

        /* harmony default export */
        var _MapCache = (MapCache);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_stackSet.js




        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof _ListCache) {
                var pairs = data.__data__;
                if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                    pairs.push([key, value]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new _MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }

        /* harmony default export */
        var _stackSet = (stackSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js




        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
            var data = this.__data__ = new _ListCache(entries);
            this.size = data.size;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = _stackClear;
        Stack.prototype['delete'] = _stackDelete;
        Stack.prototype.get = _stackGet;
        Stack.prototype.has = _stackHas;
        Stack.prototype.set = _stackSet;

        /* harmony default export */
        var _Stack = (Stack);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEach.js
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
            var index = -1,
                length = array == null ? 0 : array.length;

            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }

        /* harmony default export */
        var _arrayEach = (arrayEach);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_defineProperty.js


        var defineProperty = (function() {
            try {
                var func = _getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {}
        }());

        /* harmony default export */
        var _defineProperty = (defineProperty);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignValue.js


        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
            if (key == '__proto__' && _defineProperty) {
                _defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                });
            } else {
                object[key] = value;
            }
        }

        /* harmony default export */
        var _baseAssignValue = (baseAssignValue);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_assignValue.js



        /** Used for built-in method references. */
        var _assignValue_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) ||
                (value === undefined && !(key in object))) {
                _baseAssignValue(object, key, value);
            }
        }

        /* harmony default export */
        var _assignValue = (assignValue);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_copyObject.js



        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});

            var index = -1,
                length = props.length;

            while (++index < length) {
                var key = props[index];

                var newValue = customizer ?
                    customizer(object[key], source[key], key, object, source) :
                    undefined;

                if (newValue === undefined) {
                    newValue = source[key];
                }
                if (isNew) {
                    _baseAssignValue(object, key, newValue);
                } else {
                    _assignValue(object, key, newValue);
                }
            }
            return object;
        }

        /* harmony default export */
        var _copyObject = (copyObject);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1,
                result = Array(n);

            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }

        /* harmony default export */
        var _baseTimes = (baseTimes);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }

        /* harmony default export */
        var lodash_es_isObjectLike = (isObjectLike);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsArguments.js



        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]';

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
            return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;
        }

        /* harmony default export */
        var _baseIsArguments = (baseIsArguments);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isArguments.js



        /** Used for built-in method references. */
        var isArguments_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;

        /** Built-in value references. */
        var propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = _baseIsArguments(function() {
            return arguments;
        }()) ? _baseIsArguments : function(value) {
            return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee');
        };

        /* harmony default export */
        var lodash_es_isArguments = (isArguments);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isArray.js
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        /* harmony default export */
        var lodash_es_isArray = (isArray);

        // EXTERNAL MODULE: ./node_modules/lodash-es/isBuffer.js
        var isBuffer = __webpack_require__(10);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_isIndex.js
        /** Used as references for various `Number` constants. */
        var MAX_SAFE_INTEGER = 9007199254740991;

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;

            return !!length &&
                (type == 'number' ||
                    (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        /* harmony default export */
        var _isIndex = (isIndex);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isLength.js
        /** Used as references for various `Number` constants. */
        var isLength_MAX_SAFE_INTEGER = 9007199254740991;

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
            return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;
        }

        /* harmony default export */
        var lodash_es_isLength = (isLength);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsTypedArray.js




        /** `Object#toString` result references. */
        var _baseIsTypedArray_argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            _baseIsTypedArray_funcTag = '[object Function]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            objectTag = '[object Object]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            weakMapTag = '[object WeakMap]';

        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] = true;
        typedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
            typedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =
            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
            typedArrayTags[setTag] = typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] = false;

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
            return lodash_es_isObjectLike(value) &&
                lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];
        }

        /* harmony default export */
        var _baseIsTypedArray = (baseIsTypedArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function(value) {
                return func(value);
            };
        }

        /* harmony default export */
        var _baseUnary = (baseUnary);

        // EXTERNAL MODULE: ./node_modules/lodash-es/_nodeUtil.js
        var _nodeUtil = __webpack_require__(2);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isTypedArray.js




        /* Node.js helper references. */
        var nodeIsTypedArray = _nodeUtil["a" /* default */ ] && _nodeUtil["a" /* default */ ].isTypedArray;

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

        /* harmony default export */
        var lodash_es_isTypedArray = (isTypedArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_arrayLikeKeys.js




        /** Used for built-in method references. */
        var _arrayLikeKeys_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
            var isArr = lodash_es_isArray(value),
                isArg = !isArr && lodash_es_isArguments(value),
                isBuff = !isArr && !isArg && Object(isBuffer["a" /* default */ ])(value),
                isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? _baseTimes(value.length, String) : [],
                length = result.length;

            for (var key in value) {
                if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&
                    !(skipIndexes && (
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        key == 'length' ||
                        // Node.js 0.10 has enumerable non-index properties on buffers.
                        (isBuff && (key == 'offset' || key == 'parent')) ||
                        // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                        // Skip index properties.
                        _isIndex(key, length)
                    ))) {
                    result.push(key);
                }
            }
            return result;
        }

        /* harmony default export */
        var _arrayLikeKeys = (arrayLikeKeys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_isPrototype.js
        /** Used for built-in method references. */
        var _isPrototype_objectProto = Object.prototype;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
            var Ctor = value && value.constructor,
                proto = (typeof Ctor == 'function' && Ctor.prototype) || _isPrototype_objectProto;

            return value === proto;
        }

        /* harmony default export */
        var _isPrototype = (isPrototype);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function(arg) {
                return func(transform(arg));
            };
        }

        /* harmony default export */
        var _overArg = (overArg);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeys.js


        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeKeys = _overArg(Object.keys, Object);

        /* harmony default export */
        var _nativeKeys = (nativeKeys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeys.js



        /** Used for built-in method references. */
        var _baseKeys_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
            if (!_isPrototype(object)) {
                return _nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }

        /* harmony default export */
        var _baseKeys = (baseKeys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js



        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
            return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);
        }

        /* harmony default export */
        var lodash_es_isArrayLike = (isArrayLike);

        // CONCATENATED MODULE: ./node_modules/lodash-es/keys.js




        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
            return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);
        }

        /* harmony default export */
        var lodash_es_keys = (keys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssign.js



        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
            return object && _copyObject(source, lodash_es_keys(source), object);
        }

        /* harmony default export */
        var _baseAssign = (baseAssign);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeysIn.js
        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
                for (var key in Object(object)) {
                    result.push(key);
                }
            }
            return result;
        }

        /* harmony default export */
        var _nativeKeysIn = (nativeKeysIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeysIn.js




        /** Used for built-in method references. */
        var _baseKeysIn_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
            if (!lodash_es_isObject(object)) {
                return _nativeKeysIn(object);
            }
            var isProto = _isPrototype(object),
                result = [];

            for (var key in object) {
                if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }

        /* harmony default export */
        var _baseKeysIn = (baseKeysIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/keysIn.js




        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn_keysIn(object) {
            return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
        }

        /* harmony default export */
        var lodash_es_keysIn = (keysIn_keysIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignIn.js



        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
            return object && _copyObject(source, lodash_es_keysIn(source), object);
        }

        /* harmony default export */
        var _baseAssignIn = (baseAssignIn);

        // EXTERNAL MODULE: ./node_modules/lodash-es/_cloneBuffer.js
        var _cloneBuffer = __webpack_require__(39);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_copyArray.js
        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
            var index = -1,
                length = source.length;

            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }

        /* harmony default export */
        var _copyArray = (copyArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }

        /* harmony default export */
        var _arrayFilter = (arrayFilter);

        // CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js
        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
            return [];
        }

        /* harmony default export */
        var lodash_es_stubArray = (stubArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbols.js



        /** Used for built-in method references. */
        var _getSymbols_objectProto = Object.prototype;

        /** Built-in value references. */
        var _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return _arrayFilter(nativeGetSymbols(object), function(symbol) {
                return _getSymbols_propertyIsEnumerable.call(object, symbol);
            });
        };

        /* harmony default export */
        var _getSymbols = (getSymbols);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbols.js



        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
            return _copyObject(source, _getSymbols(source), object);
        }

        /* harmony default export */
        var _copySymbols = (copySymbols);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;

            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }

        /* harmony default export */
        var _arrayPush = (arrayPush);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js


        /** Built-in value references. */
        var getPrototype = _overArg(Object.getPrototypeOf, Object);

        /* harmony default export */
        var _getPrototype = (getPrototype);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbolsIn.js




        /* Built-in method references for those with the same name as other `lodash` methods. */
        var _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function(object) {
            var result = [];
            while (object) {
                _arrayPush(result, _getSymbols(object));
                object = _getPrototype(object);
            }
            return result;
        };

        /* harmony default export */
        var _getSymbolsIn = (getSymbolsIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbolsIn.js



        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
            return _copyObject(source, _getSymbolsIn(source), object);
        }

        /* harmony default export */
        var _copySymbolsIn = (copySymbolsIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js



        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));
        }

        /* harmony default export */
        var _baseGetAllKeys = (baseGetAllKeys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js




        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
            return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);
        }

        /* harmony default export */
        var _getAllKeys = (getAllKeys);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeysIn.js




        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
            return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);
        }

        /* harmony default export */
        var _getAllKeysIn = (getAllKeysIn);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_DataView.js



        /* Built-in method references that are verified to be native. */
        var DataView = _getNative(_root["a" /* default */ ], 'DataView');

        /* harmony default export */
        var _DataView = (DataView);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Promise.js



        /* Built-in method references that are verified to be native. */
        var Promise = _getNative(_root["a" /* default */ ], 'Promise');

        /* harmony default export */
        var _Promise = (Promise);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Set.js



        /* Built-in method references that are verified to be native. */
        var Set = _getNative(_root["a" /* default */ ], 'Set');

        /* harmony default export */
        var _Set = (Set);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_WeakMap.js



        /* Built-in method references that are verified to be native. */
        var WeakMap = _getNative(_root["a" /* default */ ], 'WeakMap');

        /* harmony default export */
        var _WeakMap = (WeakMap);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_getTag.js




        /** `Object#toString` result references. */
        var _getTag_mapTag = '[object Map]',
            _getTag_objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            _getTag_setTag = '[object Set]',
            _getTag_weakMapTag = '[object WeakMap]';

        var _getTag_dataViewTag = '[object DataView]';

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = _toSource(_DataView),
            mapCtorString = _toSource(_Map),
            promiseCtorString = _toSource(_Promise),
            setCtorString = _toSource(_Set),
            weakMapCtorString = _toSource(_WeakMap);

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = _baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||
            (_Map && getTag(new _Map) != _getTag_mapTag) ||
            (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
            (_Set && getTag(new _Set) != _getTag_setTag) ||
            (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {
            getTag = function(value) {
                var result = _baseGetTag(value),
                    Ctor = result == _getTag_objectTag ? value.constructor : undefined,
                    ctorString = Ctor ? _toSource(Ctor) : '';

                if (ctorString) {
                    switch (ctorString) {
                        case dataViewCtorString:
                            return _getTag_dataViewTag;
                        case mapCtorString:
                            return _getTag_mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return _getTag_setTag;
                        case weakMapCtorString:
                            return _getTag_weakMapTag;
                    }
                }
                return result;
            };
        }

        /* harmony default export */
        var _getTag = (getTag);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneArray.js
        /** Used for built-in method references. */
        var _initCloneArray_objectProto = Object.prototype;

        /** Used to check objects for own properties. */
        var _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
            var length = array.length,
                result = new array.constructor(length);

            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }

        /* harmony default export */
        var _initCloneArray = (initCloneArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_Uint8Array.js


        /** Built-in value references. */
        var Uint8Array = _root["a" /* default */ ].Uint8Array;

        /* harmony default export */
        var _Uint8Array = (Uint8Array);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_cloneArrayBuffer.js


        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
            return result;
        }

        /* harmony default export */
        var _cloneArrayBuffer = (cloneArrayBuffer);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_cloneDataView.js


        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        /* harmony default export */
        var _cloneDataView = (cloneDataView);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_cloneRegExp.js
        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }

        /* harmony default export */
        var _cloneRegExp = (cloneRegExp);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_cloneSymbol.js


        /** Used to convert symbols to primitives and strings. */
        var symbolProto = _Symbol ? _Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        /* harmony default export */
        var _cloneSymbol = (cloneSymbol);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_cloneTypedArray.js


        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        /* harmony default export */
        var _cloneTypedArray = (cloneTypedArray);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneByTag.js




        /** `Object#toString` result references. */
        var _initCloneByTag_boolTag = '[object Boolean]',
            _initCloneByTag_dateTag = '[object Date]',
            _initCloneByTag_mapTag = '[object Map]',
            _initCloneByTag_numberTag = '[object Number]',
            _initCloneByTag_regexpTag = '[object RegExp]',
            _initCloneByTag_setTag = '[object Set]',
            _initCloneByTag_stringTag = '[object String]',
            symbolTag = '[object Symbol]';

        var _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',
            _initCloneByTag_dataViewTag = '[object DataView]',
            _initCloneByTag_float32Tag = '[object Float32Array]',
            _initCloneByTag_float64Tag = '[object Float64Array]',
            _initCloneByTag_int8Tag = '[object Int8Array]',
            _initCloneByTag_int16Tag = '[object Int16Array]',
            _initCloneByTag_int32Tag = '[object Int32Array]',
            _initCloneByTag_uint8Tag = '[object Uint8Array]',
            _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',
            _initCloneByTag_uint16Tag = '[object Uint16Array]',
            _initCloneByTag_uint32Tag = '[object Uint32Array]';

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
                case _initCloneByTag_arrayBufferTag:
                    return _cloneArrayBuffer(object);

                case _initCloneByTag_boolTag:
                case _initCloneByTag_dateTag:
                    return new Ctor(+object);

                case _initCloneByTag_dataViewTag:
                    return _cloneDataView(object, isDeep);

                case _initCloneByTag_float32Tag:
                case _initCloneByTag_float64Tag:
                case _initCloneByTag_int8Tag:
                case _initCloneByTag_int16Tag:
                case _initCloneByTag_int32Tag:
                case _initCloneByTag_uint8Tag:
                case _initCloneByTag_uint8ClampedTag:
                case _initCloneByTag_uint16Tag:
                case _initCloneByTag_uint32Tag:
                    return _cloneTypedArray(object, isDeep);

                case _initCloneByTag_mapTag:
                    return new Ctor;

                case _initCloneByTag_numberTag:
                case _initCloneByTag_stringTag:
                    return new Ctor(object);

                case _initCloneByTag_regexpTag:
                    return _cloneRegExp(object);

                case _initCloneByTag_setTag:
                    return new Ctor;

                case symbolTag:
                    return _cloneSymbol(object);
            }
        }

        /* harmony default export */
        var _initCloneByTag = (initCloneByTag);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseCreate.js


        /** Built-in value references. */
        var objectCreate = Object.create;

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
            function object() {}
            return function(proto) {
                if (!lodash_es_isObject(proto)) {
                    return {};
                }
                if (objectCreate) {
                    return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }());

        /* harmony default export */
        var _baseCreate = (baseCreate);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneObject.js




        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
            return (typeof object.constructor == 'function' && !_isPrototype(object)) ?
                _baseCreate(_getPrototype(object)) :
                {};
        }

        /* harmony default export */
        var _initCloneObject = (initCloneObject);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsMap.js



        /** `Object#toString` result references. */
        var _baseIsMap_mapTag = '[object Map]';

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
            return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsMap_mapTag;
        }

        /* harmony default export */
        var _baseIsMap = (baseIsMap);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isMap.js




        /* Node.js helper references. */
        var nodeIsMap = _nodeUtil["a" /* default */ ] && _nodeUtil["a" /* default */ ].isMap;

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

        /* harmony default export */
        var lodash_es_isMap = (isMap);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsSet.js



        /** `Object#toString` result references. */
        var _baseIsSet_setTag = '[object Set]';

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
            return lodash_es_isObjectLike(value) && _getTag(value) == _baseIsSet_setTag;
        }

        /* harmony default export */
        var _baseIsSet = (baseIsSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/isSet.js




        /* Node.js helper references. */
        var nodeIsSet = _nodeUtil["a" /* default */ ] && _nodeUtil["a" /* default */ ].isSet;

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

        /* harmony default export */
        var lodash_es_isSet = (isSet);

        // CONCATENATED MODULE: ./node_modules/lodash-es/_baseClone.js




        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;

        /** `Object#toString` result references. */
        var _baseClone_argsTag = '[object Arguments]',
            _baseClone_arrayTag = '[object Array]',
            _baseClone_boolTag = '[object Boolean]',
            _baseClone_dateTag = '[object Date]',
            _baseClone_errorTag = '[object Error]',
            _baseClone_funcTag = '[object Function]',
            _baseClone_genTag = '[object GeneratorFunction]',
            _baseClone_mapTag = '[object Map]',
            _baseClone_numberTag = '[object Number]',
            _baseClone_objectTag = '[object Object]',
            _baseClone_regexpTag = '[object RegExp]',
            _baseClone_setTag = '[object Set]',
            _baseClone_stringTag = '[object String]',
            _baseClone_symbolTag = '[object Symbol]',
            _baseClone_weakMapTag = '[object WeakMap]';

        var _baseClone_arrayBufferTag = '[object ArrayBuffer]',
            _baseClone_dataViewTag = '[object DataView]',
            _baseClone_float32Tag = '[object Float32Array]',
            _baseClone_float64Tag = '[object Float64Array]',
            _baseClone_int8Tag = '[object Int8Array]',
            _baseClone_int16Tag = '[object Int16Array]',
            _baseClone_int32Tag = '[object Int32Array]',
            _baseClone_uint8Tag = '[object Uint8Array]',
            _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',
            _baseClone_uint16Tag = '[object Uint16Array]',
            _baseClone_uint32Tag = '[object Uint32Array]';

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] =
            cloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] =
            cloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] =
            cloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] =
            cloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] =
            cloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] =
            cloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] =
            cloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] =
            cloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] =
            cloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] =
            cloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;
        cloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] =
            cloneableTags[_baseClone_weakMapTag] = false;

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
            var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

            if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
                return result;
            }
            if (!lodash_es_isObject(value)) {
                return value;
            }
            var isArr = lodash_es_isArray(value);
            if (isArr) {
                result = _initCloneArray(value);
                if (!isDeep) {
                    return _copyArray(value, result);
                }
            } else {
                var tag = _getTag(value),
                    isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;

                if (Object(isBuffer["a" /* default */ ])(value)) {
                    return Object(_cloneBuffer["a" /* default */ ])(value, isDeep);
                }
                if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || (isFunc && !object)) {
                    result = (isFlat || isFunc) ? {} : _initCloneObject(value);
                    if (!isDeep) {
                        return isFlat ?
                            _copySymbolsIn(value, _baseAssignIn(result, value)) :
                            _copySymbols(value, _baseAssign(result, value));
                    }
                } else {
                    if (!cloneableTags[tag]) {
                        return object ? value : {};
                    }
                    result = _initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new _Stack);
            var stacked = stack.get(value);
            if (stacked) {
                return stacked;
            }
            stack.set(value, result);

            if (lodash_es_isSet(value)) {
                value.forEach(function(subValue) {
                    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                });
            } else if (lodash_es_isMap(value)) {
                value.forEach(function(subValue, key) {
                    result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });
            }

            var keysFunc = isFull ?
                (isFlat ? _getAllKeysIn : _getAllKeys) :
                (isFlat ? keysIn : lodash_es_keys);

            var props = isArr ? undefined : keysFunc(value);
            _arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }

        /* harmony default export */
        var _baseClone = (baseClone);

        // CONCATENATED MODULE: ./node_modules/lodash-es/cloneDeep.js


        /** Used to compose bitmasks for cloning. */
        var cloneDeep_CLONE_DEEP_FLAG = 1,
            cloneDeep_CLONE_SYMBOLS_FLAG = 4;

        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
            return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);
        }

        /* harmony default export */
        var lodash_es_cloneDeep = (cloneDeep);

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Detail/Tab/Config.ts

        var Config_TabConfigs = /** @class */ (function() {
            function TabConfigs(utilTrans, utilPage) {
                this.utilTrans = utilTrans;
                this.utilPage = utilPage;
                this._data = {
                    selected: "summary",
                    tabs: {
                        tab_summary: {
                            tabElement: {
                                id: "li-match-timeline"
                            },
                            contentElement: {
                                id: "tab-match-summary",
                                innerElmId: "summary"
                            },
                            valid_status: false,
                            additionalTabs: [
                                "live_centre",
                                "commentary_preview",
                                "player_statistics_preview",
                                "statistics_preview",
                                "match_history_preview",
                                "match_comments",
                            ],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_SUMMARY"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_MATCH_SUMMARY"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_summary_player_card: {
                            contentElement: {
                                id: "tab-match-summary-player-card",
                                innerElmId: "summary-player-card"
                            },
                            displayInTabs: ["summary", "player_statistics"],
                        },
                        tab_live_odds: {
                            contentElement: {
                                id: "tab-live-odds",
                                innerElmId: "live-odds"
                            },
                            displayInTabs: [
                                "summary",
                                "match_history",
                                "lineups",
                                "player_statistics",
                                "fall_of_wickets",
                                "overs",
                                "head_2_head",
                                "statistics",
                                "commentary",
                                "commentary_new",
                            ],
                        },
                        tab_missing_players: {
                            valid_status: false,
                            displayInTabs: ["summary"],
                            contentElement: {
                                innerElmId: "missing-players"
                            },
                        },
                        tab_match_history: {
                            tabElement: {
                                id: "li-match-history"
                            },
                            contentElement: {
                                id: "tab-match-history",
                                innerElmId: "match-history"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            selected: "1_history",
                            loaded: false,
                            tabs: {
                                tab_1_history: {
                                    tabElement: {
                                        id: "mhistory-1-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-1-history"
                                    },
                                    urlName: "1",
                                },
                                tab_2_history: {
                                    tabElement: {
                                        id: "mhistory-2-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-2-history"
                                    },
                                    urlName: "2",
                                },
                                tab_3_history: {
                                    tabElement: {
                                        id: "mhistory-3-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-3-history"
                                    },
                                    urlName: "3",
                                },
                                tab_4_history: {
                                    tabElement: {
                                        id: "mhistory-4-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-4-history"
                                    },
                                    urlName: "4",
                                },
                                tab_5_history: {
                                    tabElement: {
                                        id: "mhistory-5-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-5-history"
                                    },
                                    urlName: "5",
                                },
                                tab_6_history: {
                                    tabElement: {
                                        id: "mhistory-6-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-6-history"
                                    },
                                    urlName: "6",
                                },
                                tab_7_history: {
                                    tabElement: {
                                        id: "mhistory-7-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-7-history"
                                    },
                                    urlName: "7",
                                },
                                tab_8_history: {
                                    tabElement: {
                                        id: "mhistory-8-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-8-history"
                                    },
                                    urlName: "8",
                                },
                                tab_9_history: {
                                    tabElement: {
                                        id: "mhistory-9-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-9-history"
                                    },
                                    urlName: "9",
                                },
                                tab_10_history: {
                                    tabElement: {
                                        id: "mhistory-10-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-10-history"
                                    },
                                    urlName: "10",
                                },
                                tab_11_history: {
                                    tabElement: {
                                        id: "mhistory-11-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-11-history"
                                    },
                                    urlName: "11",
                                },
                                tab_12_history: {
                                    tabElement: {
                                        id: "mhistory-12-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-12-history"
                                    },
                                    urlName: "12",
                                },
                                tab_13_history: {
                                    tabElement: {
                                        id: "mhistory-13-history"
                                    },
                                    contentElement: {
                                        id: "tab-mhistory-13-history"
                                    },
                                    urlName: "13",
                                },
                            },
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_MATCH_HISTORY_TENNIS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_MATCH_HISTORY_TENNIS"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_lineups: {
                            tabElement: {
                                id: "li-match-lineups"
                            },
                            contentElement: {
                                id: "tab-match-lineups",
                                innerElmId: "lineups"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            selected: "1_lineup",
                            loaded: false,
                            tabs: {
                                tab_1_lineup: {
                                    tabElement: {
                                        id: "lineups-1-lineup"
                                    },
                                    contentElement: {
                                        id: "tab-lineups-1-lineup"
                                    },
                                    urlName: "1",
                                },
                                tab_2_lineup: {
                                    tabElement: {
                                        id: "lineups-2-lineup"
                                    },
                                    contentElement: {
                                        id: "tab-lineups-2-lineup"
                                    },
                                    urlName: "2",
                                },
                                tab_3_lineup: {
                                    tabElement: {
                                        id: "lineups-3-lineup"
                                    },
                                    contentElement: {
                                        id: "tab-lineups-3-lineup"
                                    },
                                    urlName: "3",
                                },
                                tab_4_lineup: {
                                    tabElement: {
                                        id: "lineups-4-lineup"
                                    },
                                    contentElement: {
                                        id: "tab-lineups-4-lineup"
                                    },
                                    urlName: "4",
                                },
                            },
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_LINEUPS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_LINEUPS"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_odds_comparison: {
                            selected: "1x2",
                            loaded: false,
                            tabElement: {
                                id: "li-match-odds-comparison"
                            },
                            contentElement: {
                                id: "tab-match-odds-comparison",
                                innerElmId: "odds-comparison"
                            },
                            valid_status: false,
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_ODDS_COMPARISON"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_ODDS_COMPARISON"),
                        },
                        tab_head_2_head: {
                            tabElement: {
                                id: "li-match-head-2-head"
                            },
                            contentElement: {
                                id: "tab-match-head-2-head",
                                innerElmId: "head-2-head"
                            },
                            valid_status: false,
                            additionalBlocks: ["odds", "live_odds"],
                            selected: "all_h2h",
                            loaded: false,
                            tabs: {
                                tab_all_h2h: {
                                    tabElement: {
                                        id: "h2h-overall"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-overall"
                                    },
                                    urlName: "overall",
                                },
                                tab_1_h2h: {
                                    tabElement: {
                                        id: "h2h-home"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-home"
                                    },
                                    urlName: "home",
                                },
                                tab_2_h2h: {
                                    tabElement: {
                                        id: "h2h-away"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-away"
                                    },
                                    urlName: "away",
                                },
                                tab_3_h2h: {
                                    tabElement: {
                                        id: "h2h-test"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-test"
                                    },
                                    urlName: "test",
                                },
                                tab_4_h2h: {
                                    tabElement: {
                                        id: "h2h-odi"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-odi"
                                    },
                                    urlName: "odi",
                                },
                                tab_5_h2h: {
                                    tabElement: {
                                        id: "h2h-t20"
                                    },
                                    contentElement: {
                                        id: "tab-h2h-t20"
                                    },
                                    urlName: "t20",
                                },
                            },
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_H2H"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_H2H"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_highlights: {
                            tabElement: {
                                id: "li-match-highlights"
                            },
                            contentElement: {
                                id: "tab-match-highlights",
                                innerElmId: "highlights"
                            },
                            valid_status: false,
                            additionalBlocks: ["odds", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_VIDEO_HIGHLIGHTS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_VIDEO_HIGHLIGHTS"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_photoreport: {
                            tabElement: {
                                id: "li-match-photoreport"
                            },
                            contentElement: {
                                id: "tab-match-photoreport",
                                innerElmId: "photoreport"
                            },
                            valid_status: false,
                            additionalBlocks: ["odds", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_PHOTOREPORT"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_PHOTOREPORT"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_statistics: {
                            tabElement: {
                                id: "li-match-statistics"
                            },
                            contentElement: {
                                id: "tab-match-statistics",
                                innerElmId: "statistics"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            selected: "0_statistic",
                            loaded: false,
                            tabs: {
                                tab_0_statistic: {
                                    tabElement: {
                                        id: "statistics-0-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-0-statistic"
                                    },
                                    urlName: "0",
                                },
                                tab_1_statistic: {
                                    tabElement: {
                                        id: "statistics-1-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-1-statistic"
                                    },
                                    urlName: "1",
                                },
                                tab_2_statistic: {
                                    tabElement: {
                                        id: "statistics-2-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-2-statistic"
                                    },
                                    urlName: "2",
                                },
                                tab_3_statistic: {
                                    tabElement: {
                                        id: "statistics-3-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-3-statistic"
                                    },
                                    urlName: "3",
                                },
                                tab_4_statistic: {
                                    tabElement: {
                                        id: "statistics-4-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-4-statistic"
                                    },
                                    urlName: "4",
                                },
                                tab_5_statistic: {
                                    tabElement: {
                                        id: "statistics-5-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-5-statistic"
                                    },
                                    urlName: "5",
                                },
                                tab_6_statistic: {
                                    tabElement: {
                                        id: "statistics-6-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-6-statistic"
                                    },
                                    urlName: "6",
                                },
                                tab_7_statistic: {
                                    tabElement: {
                                        id: "statistics-7-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-7-statistic"
                                    },
                                    urlName: "7",
                                },
                                tab_8_statistic: {
                                    tabElement: {
                                        id: "statistics-8-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-8-statistic"
                                    },
                                    urlName: "8",
                                },
                                tab_9_statistic: {
                                    tabElement: {
                                        id: "statistics-9-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-9-statistic"
                                    },
                                    urlName: "9",
                                },
                                tab_10_statistic: {
                                    tabElement: {
                                        id: "statistics-10-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-10-statistic"
                                    },
                                    urlName: "10",
                                },
                                tab_11_statistic: {
                                    tabElement: {
                                        id: "statistics-11-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-11-statistic"
                                    },
                                    urlName: "11",
                                },
                                tab_12_statistic: {
                                    tabElement: {
                                        id: "statistics-12-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-12-statistic"
                                    },
                                    urlName: "12",
                                },
                                tab_13_statistic: {
                                    tabElement: {
                                        id: "statistics-13-statistic"
                                    },
                                    contentElement: {
                                        id: "tab-statistics-13-statistic"
                                    },
                                    urlName: "13",
                                },
                            },
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_STATISTICS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_STATISTICS"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_commentary: {
                            tabElement: {
                                id: "li-match-commentary"
                            },
                            contentElement: {
                                id: "tab-match-commentary",
                                innerElmId: "commentary"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            selected: "0_phrase",
                            loaded: false,
                            tabs: {
                                tab_0_phrase: {
                                    tabElement: {
                                        id: "commentary-0-phrase"
                                    },
                                    contentElement: {
                                        id: "tab-commentary-0-phrase"
                                    },
                                    urlName: "0",
                                },
                                tab_1_phrase: {
                                    tabElement: {
                                        id: "commentary-1-phrase"
                                    },
                                    contentElement: {
                                        id: "tab-commentary-1-phrase"
                                    },
                                    urlName: "1",
                                },
                                tab_2_phrase: {
                                    tabElement: {
                                        id: "commentary-2-phrase"
                                    },
                                    contentElement: {
                                        id: "tab-commentary-2-phrase"
                                    },
                                    urlName: "2",
                                },
                                tab_3_phrase: {
                                    tabElement: {
                                        id: "commentary-3-phrase"
                                    },
                                    contentElement: {
                                        id: "tab-commentary-3-phrase"
                                    },
                                    urlName: "3",
                                },
                                tab_4_phrase: {
                                    tabElement: {
                                        id: "commentary-4-phrase"
                                    },
                                    contentElement: {
                                        id: "tab-commentary-4-phrase"
                                    },
                                    urlName: "4",
                                },
                            },
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_LIVE_COMMENTARY"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_LIVE_COMMENTARY"),
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_live: {
                            tabElement: {
                                id: "li-match-live-table"
                            },
                            contentElement: {
                                id: "tab-match-live-table",
                                innerElmId: "live-table"
                            },
                            valid_status: false,
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_LIVE_TABLE"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_LIVE_TABLE"),
                        },
                        tab_standings: {
                            tabElement: {
                                id: "li-match-standings"
                            },
                            contentElement: {
                                id: "tab-match-standings",
                                innerElmId: "standings"
                            },
                            valid_status: false,
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_STANDINGS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_STANDINGS_TABLE"),
                        },
                        tab_draw: {
                            tabElement: {
                                id: "li-match-draw"
                            },
                            contentElement: {
                                id: "tab-match-draw",
                                innerElmId: "draw"
                            },
                            valid_status: false,
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_STANDINGS_DRAW"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_STANDINGS_DRAW"),
                        },
                        tab_player_statistics: {
                            tabElement: {
                                id: "li-match-player-statistics"
                            },
                            contentElement: {
                                id: "tab-match-player-statistics",
                                innerElmId: "player-statistics"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_PLAYER_STATISTICS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_PLAYER_STATISTICS"),
                            selected: "0_player_statistic",
                            tabs: this.utilPage.isDetailParticipantPage() ?
                                null :
                                {
                                    tab_0_player_statistic: {
                                        tabElement: {
                                            id: "player-statistics-0-statistic"
                                        },
                                        contentElement: {
                                            id: "tab-player-statistics-0-statistic"
                                        },
                                        urlName: "0",
                                    },
                                    tab_1_player_statistic: {
                                        tabElement: {
                                            id: "player-statistics-1-statistic"
                                        },
                                        contentElement: {
                                            id: "tab-player-statistics-1-statistic"
                                        },
                                        urlName: "1",
                                    },
                                    tab_2_player_statistic: {
                                        tabElement: {
                                            id: "player-statistics-2-statistic"
                                        },
                                        contentElement: {
                                            id: "tab-player-statistics-2-statistic"
                                        },
                                        urlName: "2",
                                    },
                                    tab_3_player_statistic: {
                                        tabElement: {
                                            id: "player-statistics-3-statistic"
                                        },
                                        contentElement: {
                                            id: "tab-player-statistics-3-statistic"
                                        },
                                        urlName: "3",
                                    },
                                },
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_fall_of_wickets: {
                            tabElement: {
                                id: "li-match-fall-of-wickets"
                            },
                            contentElement: {
                                id: "tab-match-fall-of-wickets",
                                innerElmId: "fall-of-wickets"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_FALL_OF_WICKETS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_FALL_OF_WICKETS"),
                            selected: "0_wickets",
                            tabs: {
                                tab_0_wickets: {
                                    tabElement: {
                                        id: "fall-of-wickets-0-wickets"
                                    },
                                    contentElement: {
                                        id: "tab-fall-of-wickets-0-wickets"
                                    },
                                    urlName: "0",
                                },
                                tab_1_wickets: {
                                    tabElement: {
                                        id: "fall-of-wickets-1-wickets"
                                    },
                                    contentElement: {
                                        id: "tab-fall-of-wickets-1-wickets"
                                    },
                                    urlName: "1",
                                },
                                tab_2_wickets: {
                                    tabElement: {
                                        id: "fall-of-wickets-2-wickets"
                                    },
                                    contentElement: {
                                        id: "tab-fall-of-wickets-2-wickets"
                                    },
                                    urlName: "2",
                                },
                                tab_3_wickets: {
                                    tabElement: {
                                        id: "fall-of-wickets-3-wickets"
                                    },
                                    contentElement: {
                                        id: "tab-fall-of-wickets-3-wickets"
                                    },
                                    urlName: "3",
                                },
                            },
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_overs: {
                            tabElement: {
                                id: "li-match-overs"
                            },
                            contentElement: {
                                id: "tab-match-overs",
                                innerElmId: "overs"
                            },
                            valid_status: false,
                            additionalTabs: ["live_centre"],
                            additionalBlocks: ["odds", "submenu", "live_odds"],
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_OVERS"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_OVERS"),
                            selected: "0_overs",
                            tabs: {
                                tab_0_overs: {
                                    tabElement: {
                                        id: "overs-0-overs"
                                    },
                                    contentElement: {
                                        id: "tab-overs-0-overs"
                                    },
                                    urlName: "0",
                                },
                                tab_1_overs: {
                                    tabElement: {
                                        id: "overs-1-overs"
                                    },
                                    contentElement: {
                                        id: "tab-overs-1-overs"
                                    },
                                    urlName: "1",
                                },
                                tab_2_overs: {
                                    tabElement: {
                                        id: "overs-2-overs"
                                    },
                                    contentElement: {
                                        id: "tab-overs-2-overs"
                                    },
                                    urlName: "2",
                                },
                                tab_3_overs: {
                                    tabElement: {
                                        id: "overs-3-overs"
                                    },
                                    contentElement: {
                                        id: "tab-overs-3-overs"
                                    },
                                    urlName: "3",
                                },
                            },
                            displayTabs: ["tab_live_odds"],
                        },
                        tab_newsfeed: {
                            tabElement: {
                                id: "li-match-newsfeed"
                            },
                            contentElement: {
                                id: "tab-match-newsfeed",
                                innerElmId: "newsfeed"
                            },
                            valid_status: false,
                            urlName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_URL_IDENT_NEWS_FEED"),
                            tabName: this.utilTrans.translate("TRANS_DETAIL_BOOKMARK_NEWS_FEED"),
                        },
                    },
                };
            }
            TabConfigs.prototype.clone = function() {
                return lodash_es_cloneDeep(this);
            };
            TabConfigs.prototype.getTabList = function() {
                return Object.keys(this._data.tabs);
            };
            TabConfigs.prototype.getData = function() {
                return this._data;
            };
            TabConfigs.prototype.getSelectedTabIdent = function() {
                return this._data.selected;
            };
            TabConfigs.prototype.setSelectedTabIdent = function(selected) {
                this._data.selected = this._getUnprefixedTabIdent(selected);
                return this;
            };
            TabConfigs.prototype.getSelectedTabConfig = function() {
                if (this._data.selected) {
                    return this.getConfigByTabIdent(this._data.selected);
                }
                return this._getDummyTabConfig();
            };
            TabConfigs.prototype.getConfigByTabIdent = function(tabIdent) {
                if (this._isDefined(tabIdent)) {
                    return new TabConfig(tabIdent, this._getTabconfigData(tabIdent));
                }
                return this._getDummyTabConfig();
            };
            TabConfigs.prototype._getDummyTabConfig = function() {
                return new TabConfig("", {});
            };
            TabConfigs.prototype._isDefined = function(tabIdent) {
                var prefixedIdent = this._getPrefixedTabIdent(tabIdent);
                return typeof this._data.tabs[prefixedIdent] != "undefined";
            };
            TabConfigs.prototype._getTabconfigData = function(tabIdent) {
                var prefixedIdent = this._getPrefixedTabIdent(tabIdent);
                if (typeof this._data.tabs[prefixedIdent] != "undefined") {
                    return this._data.tabs[prefixedIdent];
                }
                return {};
            };
            TabConfigs.prototype._getPrefixedTabIdent = function(tabIdent) {
                return "tab_" + tabIdent;
            };
            TabConfigs.prototype._getUnprefixedTabIdent = function(tabIdent) {
                return tabIdent.replace(/^tab_(.*)/, "$1");
            };
            return TabConfigs;
        }());

        var TabConfig = /** @class */ (function() {
            function TabConfig(tabIdent, data) {
                this._tabIdent = tabIdent;
                this._data = data;
            }
            TabConfig.prototype.getIdent = function() {
                return this._tabIdent;
            };
            TabConfig.prototype.getTabElement = function() {
                return this._data.tabElement;
            };
            TabConfig.prototype.getContentElement = function() {
                return this._data.contentElement;
            };
            TabConfig.prototype.getValidStatus = function() {
                return this._data.valid_status;
            };
            TabConfig.prototype.getAdditionalTabs = function() {
                return this._getValue("additionalTabs", []);
            };
            TabConfig.prototype.getAdditionalBlocks = function() {
                return this._getValue("additionalBlocks", []);
            };
            TabConfig.prototype.getSelectedTabIdent = function() {
                return this._getValue("selected", "");
            };
            TabConfig.prototype.setSelectedTabIdent = function(selected) {
                this._data.selected = selected;
                return this;
            };
            TabConfig.prototype.isLoaded = function() {
                var isLoaded = false;
                if (this._data.loaded) {
                    isLoaded = this._data.loaded;
                }
                return isLoaded;
            };
            TabConfig.prototype.setLoaded = function() {
                this._data.loaded = true;
                return this;
            };
            TabConfig.prototype.getTabsRawData = function() {
                var subtabs = {};
                if (this._data.tabs) {
                    subtabs = this._data.tabs;
                }
                return subtabs;
            };
            TabConfig.prototype.getTabsIdent = function() {
                return Object.keys(this._getValue("tabs", []));
            };
            TabConfig.prototype.getUrlName = function() {
                return this._getValue("urlName", "");
            };
            TabConfig.prototype.getTabName = function() {
                return this._getValue("tabName", "");
            };
            TabConfig.prototype.getDisplayTabs = function() {
                return this._getValue("displayTabs", []);
            };
            TabConfig.prototype.getDisplayInTabs = function() {
                return this._getValue("displayInTabs", []);
            };
            TabConfig.prototype._getValue = function(key, defaultValue) {
                var value = defaultValue;
                if (this._data[key]) {
                    value = this._data[key];
                }
                return value;
            };
            return TabConfig;
        }());



        /***/
    }),
    /* 48 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return /* binding */ WinLose_WinLoseImpl;
        });

        // CONCATENATED MODULE: ./www/res/script/ts/react/lib/Team.ts
        var Team;
        (function(Team) {
            Team[Team["HOME"] = 0] = "HOME";
            Team[Team["AWAY"] = 1] = "AWAY";
        })(Team || (Team = {}));

        // CONCATENATED MODULE: ./www/res/script/ts/react/lib/Winner.ts
        var Winner;
        (function(Winner) {
            Winner[Winner["DRAW"] = 0] = "DRAW";
            Winner[Winner["HOME"] = 1] = "HOME";
            Winner[Winner["AWAY"] = 2] = "AWAY";
        })(Winner || (Winner = {}));

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Helper/WinLose/WinLose.ts


        var WinLose_WinLoseImpl = /** @class */ (function() {
            function WinLoseImpl(utilTrans) {
                this._formTitles = {};
                this._shortTranslate = {};
                this._formClass = "";
                this._formType = "";
                this._shortType = "";
                this._formTitles = {
                    wo: utilTrans.translate("TRANS_DRAW") + "/" + utilTrans.translate("TRANS_WIN"),
                    lo: utilTrans.translate("TRANS_DRAW") + "/" + utilTrans.translate("TRANS_LOST"),
                    w: utilTrans.translate("TRANS_WIN"),
                    l: utilTrans.translate("TRANS_LOST"),
                    d: utilTrans.translate("TRANS_DRAW"),
                    do: utilTrans.translate("TRANS_DRAW"),
                    dw: utilTrans.translate("TRANS_WIN") + "/" + utilTrans.translate("TRANS_DRAW"),
                    dl: utilTrans.translate("TRANS_LOST") + "/" + utilTrans.translate("TRANS_DRAW"),
                    ww: utilTrans.translate("TRANS_WIN") + "/" + utilTrans.translate("TRANS_WIN"),
                    wl: utilTrans.translate("TRANS_LOST") + "/" + utilTrans.translate("TRANS_WIN"),
                    lw: utilTrans.translate("TRANS_WIN") + "/" + utilTrans.translate("TRANS_LOST"),
                    ll: utilTrans.translate("TRANS_LOST") + "/" + utilTrans.translate("TRANS_LOST"),
                };
                this._shortTranslate = {
                    win: utilTrans.translate("TRANS_WIN_SHORT"),
                    draw: utilTrans.translate("TRANS_DRAW_SHORT"),
                    lost: utilTrans.translate("TRANS_LOST_SHORT"),
                };
            }
            WinLoseImpl.prototype._setForms = function(eventItem, participant) {
                var participantSide = String(eventItem.getHomeParticipantIds())
                    .split("/")
                    .indexOf(participant) !== -1 ?
                    Team.HOME :
                    Team.AWAY;
                if (eventItem.isDraw()) {
                    this._formType = "d";
                    this._shortType = "draw";
                } else if ((eventItem.isHomeWinner() && participantSide == Team.HOME) ||
                    (eventItem.isAwayWinner() && participantSide == Team.AWAY)) {
                    this._formType = "w";
                    this._shortType = "win";
                } else {
                    this._formType = "l";
                    this._shortType = "lost";
                }
                this._formClass = this._formType;
                var fullTimeWinner = eventItem.getFtWinner();
                if (this._formType == "d" && fullTimeWinner !== Winner.DRAW) {
                    if ((fullTimeWinner == Winner.HOME && participantSide == Team.HOME) ||
                        (fullTimeWinner == Winner.AWAY && participantSide == Team.AWAY)) {
                        this._formClass += "w";
                        this._formType += "w";
                    } else {
                        this._formClass += "l";
                        this._formType += "l";
                    }
                } else if (eventItem.getHomeFullTimeScore() !== "") {
                    if (fullTimeWinner === Winner.DRAW) {
                        this._formClass += "o";
                        this._formType += "o";
                    } else if ((fullTimeWinner == Winner.HOME && participantSide == Team.HOME) ||
                        (fullTimeWinner == Winner.AWAY && participantSide == Team.AWAY)) {
                        this._formClass += "w";
                        this._formType += "w";
                    } else {
                        this._formClass += "l";
                        this._formType += "l";
                    }
                }
            };
            WinLoseImpl.prototype.getFormClass = function(eventItem, participant) {
                this._setForms(eventItem, participant);
                return "wld--" + this._formClass;
            };
            WinLoseImpl.prototype.getFormTitle = function(eventItem, participant) {
                this._setForms(eventItem, participant);
                return this._formTitles[this._formType] || "";
            };
            WinLoseImpl.prototype.getShortTranslate = function(eventItem, participant) {
                this._setForms(eventItem, participant);
                return this._shortTranslate[this._shortType];
            };
            return WinLoseImpl;
        }());



        /***/
    }),
    /* 49 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return /* binding */ StatsResults_StatsResultsImpl;
        });

        // CONCATENATED MODULE: ./www/res/script/ts/react/lib/lists/EventIncidentTypeList.ts
        var EventIncidentTypeList;
        (function(EventIncidentTypeList) {
            EventIncidentTypeList[EventIncidentTypeList["YELLOW_CARD"] = 1] = "YELLOW_CARD";
            EventIncidentTypeList[EventIncidentTypeList["RED_CARD"] = 2] = "RED_CARD";
            EventIncidentTypeList[EventIncidentTypeList["GOAL"] = 3] = "GOAL";
            EventIncidentTypeList[EventIncidentTypeList["OWN_GOAL"] = 4] = "OWN_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_KICK"] = 5] = "PENALTY_KICK";
            EventIncidentTypeList[EventIncidentTypeList["SUBSTITUTION_OUT"] = 6] = "SUBSTITUTION_OUT";
            EventIncidentTypeList[EventIncidentTypeList["SUBSTITUTION_IN"] = 7] = "SUBSTITUTION_IN";
            EventIncidentTypeList[EventIncidentTypeList["ASSISTANCE"] = 8] = "ASSISTANCE";
            EventIncidentTypeList[EventIncidentTypeList["SUSPENSION"] = 9] = "SUSPENSION";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_SCORED"] = 10] = "PENALTY_SCORED";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_MISSED"] = 11] = "PENALTY_MISSED";
            EventIncidentTypeList[EventIncidentTypeList["BALL_POSSESSION"] = 12] = "BALL_POSSESSION";
            EventIncidentTypeList[EventIncidentTypeList["SHOTS_ON_GOAL"] = 13] = "SHOTS_ON_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["SHOTS_OFF_GOAL"] = 14] = "SHOTS_OFF_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["FREE_KICKS"] = 15] = "FREE_KICKS";
            EventIncidentTypeList[EventIncidentTypeList["CORNER_KICKS"] = 16] = "CORNER_KICKS";
            EventIncidentTypeList[EventIncidentTypeList["OFFSIDES"] = 17] = "OFFSIDES";
            EventIncidentTypeList[EventIncidentTypeList["THROW_IN"] = 18] = "THROW_IN";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_SAVES"] = 19] = "GOALKEEPER_SAVES";
            EventIncidentTypeList[EventIncidentTypeList["GOAL_KICKS"] = 20] = "GOAL_KICKS";
            EventIncidentTypeList[EventIncidentTypeList["FOULS"] = 21] = "FOULS";
            EventIncidentTypeList[EventIncidentTypeList["RED_CARDS"] = 22] = "RED_CARDS";
            EventIncidentTypeList[EventIncidentTypeList["YELLOW_CARDS"] = 23] = "YELLOW_CARDS";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE"] = 24] = "SERVICE";
            EventIncidentTypeList[EventIncidentTypeList["HITS"] = 25] = "HITS";
            EventIncidentTypeList[EventIncidentTypeList["ERRORS"] = 26] = "ERRORS";
            EventIncidentTypeList[EventIncidentTypeList["TOUCH_DOWN"] = 27] = "TOUCH_DOWN";
            EventIncidentTypeList[EventIncidentTypeList["EXTRA_POINT"] = 28] = "EXTRA_POINT";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINT_CONVERSION"] = 29] = "TWO_POINT_CONVERSION";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOAL"] = 30] = "FIELD_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["SAFETY"] = 31] = "SAFETY";
            EventIncidentTypeList[EventIncidentTypeList["FOUR_P_FIELD_GOAL"] = 32] = "FOUR_P_FIELD_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["ROUGE"] = 33] = "ROUGE";
            EventIncidentTypeList[EventIncidentTypeList["GOAL_ATTEMPTS"] = 34] = "GOAL_ATTEMPTS";
            EventIncidentTypeList[EventIncidentTypeList["OUTS"] = 35] = "OUTS";
            EventIncidentTypeList[EventIncidentTypeList["OVERS"] = 36] = "OVERS";
            EventIncidentTypeList[EventIncidentTypeList["ACES"] = 37] = "ACES";
            EventIncidentTypeList[EventIncidentTypeList["DOUBLE_FAULTS"] = 38] = "DOUBLE_FAULTS";
            EventIncidentTypeList[EventIncidentTypeList["BREAKS"] = 39] = "BREAKS";
            EventIncidentTypeList[EventIncidentTypeList["BREAK_POINTS_WON"] = 40] = "BREAK_POINTS_WON";
            EventIncidentTypeList[EventIncidentTypeList["MAX_POINTS_IN_ROW"] = 41] = "MAX_POINTS_IN_ROW";
            EventIncidentTypeList[EventIncidentTypeList["MAX_GAMES_IN_ROWS"] = 42] = "MAX_GAMES_IN_ROWS";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_POINTS_WON"] = 43] = "SERVICE_POINTS_WON";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_POINTS_LOST"] = 44] = "SERVICE_POINTS_LOST";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_GAMES_WON"] = 45] = "SERVICE_GAMES_WON";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_GAMES_LOST"] = 46] = "SERVICE_GAMES_LOST";
            EventIncidentTypeList[EventIncidentTypeList["NOT_ON_PITCH"] = 47] = "NOT_ON_PITCH";
            EventIncidentTypeList[EventIncidentTypeList["ASSISTANCE_SECOND"] = 48] = "ASSISTANCE_SECOND";
            EventIncidentTypeList[EventIncidentTypeList["SHOOTING"] = 49] = "SHOOTING";
            EventIncidentTypeList[EventIncidentTypeList["PENALTIES"] = 50] = "PENALTIES";
            EventIncidentTypeList[EventIncidentTypeList["POWERPLAY_GOALS"] = 51] = "POWERPLAY_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["SHORTHANDED_GOALS"] = 52] = "SHORTHANDED_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["POWERPLAY"] = 53] = "POWERPLAY";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_KILLING"] = 54] = "PENALTY_KILLING";
            EventIncidentTypeList[EventIncidentTypeList["FACEOFFS_WON"] = 55] = "FACEOFFS_WON";
            EventIncidentTypeList[EventIncidentTypeList["EMPTY_NET_GOALS"] = 56] = "EMPTY_NET_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["SAVES"] = 57] = "SAVES";
            EventIncidentTypeList[EventIncidentTypeList["PIM"] = 58] = "PIM";
            EventIncidentTypeList[EventIncidentTypeList["SERVE_1ST_PCT"] = 59] = "SERVE_1ST_PCT";
            EventIncidentTypeList[EventIncidentTypeList["SERVE_1ST_WON"] = 60] = "SERVE_1ST_WON";
            EventIncidentTypeList[EventIncidentTypeList["SERVE_2ND_WON"] = 61] = "SERVE_2ND_WON";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_GAMES_PLAYED"] = 62] = "SERVICE_GAMES_PLAYED";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_POINTS_1ST_WON"] = 63] = "RETURN_POINTS_1ST_WON";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_POINTS_2ND_WON"] = 64] = "RETURN_POINTS_2ND_WON";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_POINTS_WON"] = 65] = "TOTAL_POINTS_WON";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_GAMES_PLAYED"] = 66] = "RETURN_GAMES_PLAYED";
            EventIncidentTypeList[EventIncidentTypeList["BREAK_POINTS_SAVED"] = 67] = "BREAK_POINTS_SAVED";
            EventIncidentTypeList[EventIncidentTypeList["WINNERS"] = 68] = "WINNERS";
            EventIncidentTypeList[EventIncidentTypeList["UNFORCED_ERRORS"] = 69] = "UNFORCED_ERRORS";
            EventIncidentTypeList[EventIncidentTypeList["SERVE_1ST_TOTAL"] = 70] = "SERVE_1ST_TOTAL";
            EventIncidentTypeList[EventIncidentTypeList["SERVE_2ND_TOTAL"] = 71] = "SERVE_2ND_TOTAL";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_GAMES_WON"] = 72] = "RETURN_GAMES_WON";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_GAMES_LOST"] = 73] = "RETURN_GAMES_LOST";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_POINTS_WON"] = 74] = "RETURN_POINTS_WON";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_POINTS_LOST"] = 75] = "RETURN_POINTS_LOST";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_GAMES_WON"] = 76] = "TOTAL_GAMES_WON";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_POINTS"] = 77] = "TOTAL_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_GAMES"] = 78] = "TOTAL_GAMES";
            EventIncidentTypeList[EventIncidentTypeList["SERVICE_POINTS_PLAYED"] = 79] = "SERVICE_POINTS_PLAYED";
            EventIncidentTypeList[EventIncidentTypeList["RETURN_POINTS_PLAYED"] = 80] = "RETURN_POINTS_PLAYED";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS_1ST_INNING"] = 81] = "WICKETS_1ST_INNING";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS_2ND_INNING"] = 82] = "WICKETS_2ND_INNING";
            EventIncidentTypeList[EventIncidentTypeList["POWERPLAY_GOAL"] = 83] = "POWERPLAY_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["SHORTHANDED_GOAL"] = 84] = "SHORTHANDED_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["EMPTY_NET_GOAL"] = 85] = "EMPTY_NET_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["GOAL_UNDER_REVIEW"] = 86] = "GOAL_UNDER_REVIEW";
            EventIncidentTypeList[EventIncidentTypeList["BALLS_BOWLED_SS"] = 88] = "BALLS_BOWLED_SS";
            EventIncidentTypeList[EventIncidentTypeList["OVERS_BOWLED_SS"] = 89] = "OVERS_BOWLED_SS";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS_TAKEN_SS"] = 90] = "WICKETS_TAKEN_SS";
            EventIncidentTypeList[EventIncidentTypeList["MAIDENS_BOWLED_SS"] = 91] = "MAIDENS_BOWLED_SS";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_CONCEDED_SS"] = 92] = "RUNS_CONCEDED_SS";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_CONCEDED_PER_OVER_SS"] = 93] = "RUNS_CONCEDED_PER_OVER_SS";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_SCORED_SS"] = 94] = "RUNS_SCORED_SS";
            EventIncidentTypeList[EventIncidentTypeList["BALLS_FACED_SS"] = 95] = "BALLS_FACED_SS";
            EventIncidentTypeList[EventIncidentTypeList["BOUNDARY_FOURS_SS"] = 96] = "BOUNDARY_FOURS_SS";
            EventIncidentTypeList[EventIncidentTypeList["BOUNDARY_SIXES_SS"] = 97] = "BOUNDARY_SIXES_SS";
            EventIncidentTypeList[EventIncidentTypeList["BATTING_STRIKE_RATE_SS"] = 98] = "BATTING_STRIKE_RATE_SS";
            EventIncidentTypeList[EventIncidentTypeList["RUN_RATE_SS"] = 99] = "RUN_RATE_SS";
            EventIncidentTypeList[EventIncidentTypeList["MINUTES_BATTED_SS"] = 100] = "MINUTES_BATTED_SS";
            EventIncidentTypeList[EventIncidentTypeList["BALLS_BOWLED"] = 101] = "BALLS_BOWLED";
            EventIncidentTypeList[EventIncidentTypeList["OVERS_BOWLED"] = 102] = "OVERS_BOWLED";
            EventIncidentTypeList[EventIncidentTypeList["BALLS_FACED"] = 103] = "BALLS_FACED";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS_TAKEN"] = 104] = "WICKETS_TAKEN";
            EventIncidentTypeList[EventIncidentTypeList["MAIDENS_BOWLED"] = 105] = "MAIDENS_BOWLED";
            EventIncidentTypeList[EventIncidentTypeList["BOUNDARY_FOURS"] = 106] = "BOUNDARY_FOURS";
            EventIncidentTypeList[EventIncidentTypeList["BOUNDARY_SIXES"] = 107] = "BOUNDARY_SIXES";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS_LOST"] = 108] = "WICKETS_LOST";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_SCORED"] = 109] = "RUNS_SCORED";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_CONCEDED"] = 110] = "RUNS_CONCEDED";
            EventIncidentTypeList[EventIncidentTypeList["RUN_RATE"] = 111] = "RUN_RATE";
            EventIncidentTypeList[EventIncidentTypeList["ECONOMY_RATE"] = 112] = "ECONOMY_RATE";
            EventIncidentTypeList[EventIncidentTypeList["MINUTES_BATTED"] = 113] = "MINUTES_BATTED";
            EventIncidentTypeList[EventIncidentTypeList["ASSISTS"] = 114] = "ASSISTS";
            EventIncidentTypeList[EventIncidentTypeList["BLOCKS"] = 115] = "BLOCKS";
            EventIncidentTypeList[EventIncidentTypeList["TURNOVERS"] = 116] = "TURNOVERS";
            EventIncidentTypeList[EventIncidentTypeList["PERSONAL_FAULTS"] = 117] = "PERSONAL_FAULTS";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOALS_ATTEMPTED"] = 118] = "FIELD_GOALS_ATTEMPTED";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOALS_MADE"] = 119] = "FIELD_GOALS_MADE";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOALS_PERCENTAGE"] = 120] = "FIELD_GOALS_PERCENTAGE";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINTS_FIELD_GOALS_ATTEMPTED"] = 121] = "TWO_POINTS_FIELD_GOALS_ATTEMPTED";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINTS_FIELD_GOALS_MADE"] = 122] = "TWO_POINTS_FIELD_GOALS_MADE";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINTS_FIELD_GOALS_PERCENTAGE"] = 123] = "TWO_POINTS_FIELD_GOALS_PERCENTAGE";
            EventIncidentTypeList[EventIncidentTypeList["THREE_POINTS_FIELD_GOALS_ATTEMPTED"] = 124] = "THREE_POINTS_FIELD_GOALS_ATTEMPTED";
            EventIncidentTypeList[EventIncidentTypeList["THREE_POINTS_FIELD_GOALS_MADE"] = 125] = "THREE_POINTS_FIELD_GOALS_MADE";
            EventIncidentTypeList[EventIncidentTypeList["THREE_POINTS_FIELD_GOALS_PERCENTAGE"] = 126] = "THREE_POINTS_FIELD_GOALS_PERCENTAGE";
            EventIncidentTypeList[EventIncidentTypeList["FREE_THROWS_ATTEMPTED"] = 127] = "FREE_THROWS_ATTEMPTED";
            EventIncidentTypeList[EventIncidentTypeList["FREE_THROWS_MADE"] = 128] = "FREE_THROWS_MADE";
            EventIncidentTypeList[EventIncidentTypeList["FREE_THROWS_PERCENTAGE"] = 129] = "FREE_THROWS_PERCENTAGE";
            EventIncidentTypeList[EventIncidentTypeList["OFFENSIVE_REBOUNDS"] = 130] = "OFFENSIVE_REBOUNDS";
            EventIncidentTypeList[EventIncidentTypeList["DEFFENSIVE_REBOUNDS"] = 131] = "DEFFENSIVE_REBOUNDS";
            EventIncidentTypeList[EventIncidentTypeList["BATSMAN"] = 134] = "BATSMAN";
            EventIncidentTypeList[EventIncidentTypeList["BOWLER"] = 137] = "BOWLER";
            EventIncidentTypeList[EventIncidentTypeList["AT_BAT"] = 138] = "AT_BAT";
            EventIncidentTypeList[EventIncidentTypeList["TWO_B_DOUBLE"] = 139] = "TWO_B_DOUBLE";
            EventIncidentTypeList[EventIncidentTypeList["THREE_B_TRIPLE"] = 140] = "THREE_B_TRIPLE";
            EventIncidentTypeList[EventIncidentTypeList["HOME_RUNS"] = 141] = "HOME_RUNS";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_BATTED_IN"] = 142] = "RUNS_BATTED_IN";
            EventIncidentTypeList[EventIncidentTypeList["LEFT_ON_BASE"] = 143] = "LEFT_ON_BASE";
            EventIncidentTypeList[EventIncidentTypeList["BASE_ON_BALLS"] = 144] = "BASE_ON_BALLS";
            EventIncidentTypeList[EventIncidentTypeList["STRIKEOUTS"] = 145] = "STRIKEOUTS";
            EventIncidentTypeList[EventIncidentTypeList["STOLEN_BASES"] = 146] = "STOLEN_BASES";
            EventIncidentTypeList[EventIncidentTypeList["BATTING_AVERAGE"] = 147] = "BATTING_AVERAGE";
            EventIncidentTypeList[EventIncidentTypeList["DOWNS_1ST"] = 152] = "DOWNS_1ST";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_YARDS"] = 153] = "TOTAL_YARDS";
            EventIncidentTypeList[EventIncidentTypeList["PASSING_YARDS"] = 154] = "PASSING_YARDS";
            EventIncidentTypeList[EventIncidentTypeList["RUSHING_YARDS"] = 155] = "RUSHING_YARDS";
            EventIncidentTypeList[EventIncidentTypeList["PENALTIES_YARDS"] = 156] = "PENALTIES_YARDS";
            EventIncidentTypeList[EventIncidentTypeList["PUNTS"] = 157] = "PUNTS";
            EventIncidentTypeList[EventIncidentTypeList["BLOCKED_SHOOTS"] = 158] = "BLOCKED_SHOOTS";
            EventIncidentTypeList[EventIncidentTypeList["OUT"] = 159] = "OUT";
            EventIncidentTypeList[EventIncidentTypeList["B"] = 160] = "B";
            EventIncidentTypeList[EventIncidentTypeList["C"] = 161] = "C";
            EventIncidentTypeList[EventIncidentTypeList["LBW"] = 162] = "LBW";
            EventIncidentTypeList[EventIncidentTypeList["NO_BALLS"] = 163] = "NO_BALLS";
            EventIncidentTypeList[EventIncidentTypeList["WIDE"] = 164] = "WIDE";
            EventIncidentTypeList[EventIncidentTypeList["NO_BALLS_SS"] = 165] = "NO_BALLS_SS";
            EventIncidentTypeList[EventIncidentTypeList["WIDE_SS"] = 166] = "WIDE_SS";
            EventIncidentTypeList[EventIncidentTypeList["TRIES"] = 167] = "TRIES";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_REBOUNDS"] = 168] = "TOTAL_REBOUNDS";
            EventIncidentTypeList[EventIncidentTypeList["POINTS"] = 169] = "POINTS";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_REBOUNDS_SS"] = 170] = "TOTAL_REBOUNDS_SS";
            EventIncidentTypeList[EventIncidentTypeList["ASSISTS_SS"] = 171] = "ASSISTS_SS";
            EventIncidentTypeList[EventIncidentTypeList["BYE_SS"] = 172] = "BYE_SS";
            EventIncidentTypeList[EventIncidentTypeList["LEG_BYE_SS"] = 173] = "LEG_BYE_SS";
            EventIncidentTypeList[EventIncidentTypeList["BYE"] = 174] = "BYE";
            EventIncidentTypeList[EventIncidentTypeList["LEG_BYE"] = 175] = "LEG_BYE";
            EventIncidentTypeList[EventIncidentTypeList["EXTRAS"] = 176] = "EXTRAS";
            EventIncidentTypeList[EventIncidentTypeList["EXTRAS_SS"] = 177] = "EXTRAS_SS";
            EventIncidentTypeList[EventIncidentTypeList["WICKETS"] = 178] = "WICKETS";
            EventIncidentTypeList[EventIncidentTypeList["BEHIND"] = 179] = "BEHIND";
            EventIncidentTypeList[EventIncidentTypeList["GOALS_2"] = 180] = "GOALS_2";
            EventIncidentTypeList[EventIncidentTypeList["RUN_OUT"] = 181] = "RUN_OUT";
            EventIncidentTypeList[EventIncidentTypeList["KICKS"] = 182] = "KICKS";
            EventIncidentTypeList[EventIncidentTypeList["MARKS"] = 183] = "MARKS";
            EventIncidentTypeList[EventIncidentTypeList["HANDBALLS"] = 184] = "HANDBALLS";
            EventIncidentTypeList[EventIncidentTypeList["DISPOSALS"] = 185] = "DISPOSALS";
            EventIncidentTypeList[EventIncidentTypeList["GOALS"] = 186] = "GOALS";
            EventIncidentTypeList[EventIncidentTypeList["BEHINDS"] = 187] = "BEHINDS";
            EventIncidentTypeList[EventIncidentTypeList["HITOUTS"] = 188] = "HITOUTS";
            EventIncidentTypeList[EventIncidentTypeList["TACKLES"] = 189] = "TACKLES";
            EventIncidentTypeList[EventIncidentTypeList["FREES_FOR"] = 190] = "FREES_FOR";
            EventIncidentTypeList[EventIncidentTypeList["FREES_AGAINST"] = 191] = "FREES_AGAINST";
            EventIncidentTypeList[EventIncidentTypeList["KICKS_SS"] = 192] = "KICKS_SS";
            EventIncidentTypeList[EventIncidentTypeList["MARKS_SS"] = 193] = "MARKS_SS";
            EventIncidentTypeList[EventIncidentTypeList["HANDBALLS_SS"] = 194] = "HANDBALLS_SS";
            EventIncidentTypeList[EventIncidentTypeList["DISPOSALS_SS"] = 195] = "DISPOSALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["BEHINDS_SS"] = 196] = "BEHINDS_SS";
            EventIncidentTypeList[EventIncidentTypeList["SUPER_GOALS"] = 197] = "SUPER_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["SUPER_GOALS_SS"] = 198] = "SUPER_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["SUPER_GOAL"] = 199] = "SUPER_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["CLEARENCES"] = 200] = "CLEARENCES";
            EventIncidentTypeList[EventIncidentTypeList["ST"] = 201] = "ST";
            EventIncidentTypeList[EventIncidentTypeList["CONVERSION_GOALS"] = 202] = "CONVERSION_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_GOALS"] = 203] = "PENALTY_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_GOAL_ATTEMPTS"] = 204] = "PENALTY_GOAL_ATTEMPTS";
            EventIncidentTypeList[EventIncidentTypeList["DROPPED_GOALS"] = 205] = "DROPPED_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["DO_TRY"] = 206] = "DO_TRY";
            EventIncidentTypeList[EventIncidentTypeList["CONVERSION_GOAL"] = 207] = "CONVERSION_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_GOAL"] = 208] = "PENALTY_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["DROP_GOAL"] = 209] = "DROP_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["CONVERSION_GOAL_ATTEMPTS"] = 210] = "CONVERSION_GOAL_ATTEMPTS";
            EventIncidentTypeList[EventIncidentTypeList["GOALS_PERCENT"] = 211] = "GOALS_PERCENT";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_RUNS"] = 212] = "TOTAL_RUNS";
            EventIncidentTypeList[EventIncidentTypeList["METRES_RUN_WITH_BALL"] = 213] = "METRES_RUN_WITH_BALL";
            EventIncidentTypeList[EventIncidentTypeList["RED_CARDS_2"] = 218] = "RED_CARDS_2";
            EventIncidentTypeList[EventIncidentTypeList["YELLOW_CARDS_2"] = 219] = "YELLOW_CARDS_2";
            EventIncidentTypeList[EventIncidentTypeList["SHOTS_ON_GOAL_SS"] = 220] = "SHOTS_ON_GOAL_SS";
            EventIncidentTypeList[EventIncidentTypeList["SHOTS_OFF_GOAL_SS"] = 221] = "SHOTS_OFF_GOAL_SS";
            EventIncidentTypeList[EventIncidentTypeList["OFFSIDES_SS"] = 222] = "OFFSIDES_SS";
            EventIncidentTypeList[EventIncidentTypeList["FOULS_COMMITTED_SS"] = 223] = "FOULS_COMMITTED_SS";
            EventIncidentTypeList[EventIncidentTypeList["FOULS_SUFFERED_SS"] = 224] = "FOULS_SUFFERED_SS";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_SAVES_SS"] = 225] = "GOALKEEPER_SAVES_SS";
            EventIncidentTypeList[EventIncidentTypeList["DROPPED_GOALS_ATTEMPTS"] = 226] = "DROPPED_GOALS_ATTEMPTS";
            EventIncidentTypeList[EventIncidentTypeList["BLOCKED_SHOTS_SS"] = 227] = "BLOCKED_SHOTS_SS";
            EventIncidentTypeList[EventIncidentTypeList["BLOCK_AGAINST_SS"] = 228] = "BLOCK_AGAINST_SS";
            EventIncidentTypeList[EventIncidentTypeList["TURNOVERS_SS"] = 229] = "TURNOVERS_SS";
            EventIncidentTypeList[EventIncidentTypeList["STEALS_SS"] = 230] = "STEALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["PERSONAL_FOULS_SS"] = 231] = "PERSONAL_FOULS_SS";
            EventIncidentTypeList[EventIncidentTypeList["OFFENSIVE_REBOUNDS_SS"] = 232] = "OFFENSIVE_REBOUNDS_SS";
            EventIncidentTypeList[EventIncidentTypeList["DEFENSIVE_REBOUNDS_SS"] = 233] = "DEFENSIVE_REBOUNDS_SS";
            EventIncidentTypeList[EventIncidentTypeList["PLUS_MINUS_POINTS"] = 234] = "PLUS_MINUS_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["GIVEAWAYS_SS"] = 235] = "GIVEAWAYS_SS";
            EventIncidentTypeList[EventIncidentTypeList["HITS_SS"] = 236] = "HITS_SS";
            EventIncidentTypeList[EventIncidentTypeList["PIM_SS"] = 237] = "PIM_SS";
            EventIncidentTypeList[EventIncidentTypeList["FACEOFFS_PERCENTAGE_SS"] = 238] = "FACEOFFS_PERCENTAGE_SS";
            EventIncidentTypeList[EventIncidentTypeList["TIME_ON_ICE_SS"] = 239] = "TIME_ON_ICE_SS";
            EventIncidentTypeList[EventIncidentTypeList["TAKEAWAYS_SS"] = 240] = "TAKEAWAYS_SS";
            EventIncidentTypeList[EventIncidentTypeList["MINUTES_PLAYED_SS"] = 241] = "MINUTES_PLAYED_SS";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOALS_SS"] = 242] = "FIELD_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["THREE_POINT_FIELD_GOALS_SS"] = 243] = "THREE_POINT_FIELD_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["FREE_THROWS_SS"] = 244] = "FREE_THROWS_SS";
            EventIncidentTypeList[EventIncidentTypeList["AT_BAT_SS"] = 245] = "AT_BAT_SS";
            EventIncidentTypeList[EventIncidentTypeList["RUNS_BATTED_IN_SS"] = 246] = "RUNS_BATTED_IN_SS";
            EventIncidentTypeList[EventIncidentTypeList["BASE_ON_BALLS_SS"] = 247] = "BASE_ON_BALLS_SS";
            EventIncidentTypeList[EventIncidentTypeList["STRIKEOUTS_SS"] = 248] = "STRIKEOUTS_SS";
            EventIncidentTypeList[EventIncidentTypeList["LEFT_ON_BASE_SS"] = 249] = "LEFT_ON_BASE_SS";
            EventIncidentTypeList[EventIncidentTypeList["BATTING_AVERAGE_SS"] = 250] = "BATTING_AVERAGE_SS";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_EVEN_STRENGTH_SAVES_SS"] = 251] = "GOALKEEPER_EVEN_STRENGTH_SAVES_SS";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_POWERPLAY_SAVES_SS"] = 252] = "GOALKEEPER_POWERPLAY_SAVES_SS";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_SHORTHANDED_SAVES_SS"] = 253] = "GOALKEEPER_SHORTHANDED_SAVES_SS";
            EventIncidentTypeList[EventIncidentTypeList["GOALKEEPER_SAVES_PERCENTAGE_SS"] = 255] = "GOALKEEPER_SAVES_PERCENTAGE_SS";
            EventIncidentTypeList[EventIncidentTypeList["INNINGS_PITCHED_SS"] = 256] = "INNINGS_PITCHED_SS";
            EventIncidentTypeList[EventIncidentTypeList["HITS_ALLOWED_SS"] = 257] = "HITS_ALLOWED_SS";
            EventIncidentTypeList[EventIncidentTypeList["EARNED_RUNS_SS"] = 258] = "EARNED_RUNS_SS";
            EventIncidentTypeList[EventIncidentTypeList["HOME_RUNS_SS"] = 259] = "HOME_RUNS_SS";
            EventIncidentTypeList[EventIncidentTypeList["EARNED_RUN_AVERAGE_SS"] = 260] = "EARNED_RUN_AVERAGE_SS";
            EventIncidentTypeList[EventIncidentTypeList["DROPPED_GOALS_SS"] = 261] = "DROPPED_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_GOALS_SS"] = 262] = "PENALTY_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["CONVERSION_GOALS_SS"] = 263] = "CONVERSION_GOALS_SS";
            EventIncidentTypeList[EventIncidentTypeList["TRIES_SS"] = 264] = "TRIES_SS";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_TRY"] = 265] = "PENALTY_TRY";
            EventIncidentTypeList[EventIncidentTypeList["PENALTY_SHOT"] = 267] = "PENALTY_SHOT";
            EventIncidentTypeList[EventIncidentTypeList["GOLF_FINAL_RESULT"] = 268] = "GOLF_FINAL_RESULT";
            EventIncidentTypeList[EventIncidentTypeList["GOAL_ATTEMPTS_SS"] = 270] = "GOAL_ATTEMPTS_SS";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_PASSES_SS"] = 271] = "TOTAL_PASSES_SS";
            EventIncidentTypeList[EventIncidentTypeList["PASS_SUCCESS_PERCENTAGE_SS"] = 272] = "PASS_SUCCESS_PERCENTAGE_SS";
            EventIncidentTypeList[EventIncidentTypeList["POWERPLAY_TIME_ON_ICE_SS"] = 273] = "POWERPLAY_TIME_ON_ICE_SS";
            EventIncidentTypeList[EventIncidentTypeList["STEALS"] = 274] = "STEALS";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINT_FIELD_GOALS"] = 275] = "TWO_POINT_FIELD_GOALS";
            EventIncidentTypeList[EventIncidentTypeList["MINOR_PENALTY"] = 276] = "MINOR_PENALTY";
            EventIncidentTypeList[EventIncidentTypeList["MAJOR_PENALTY"] = 277] = "MAJOR_PENALTY";
            EventIncidentTypeList[EventIncidentTypeList["PERSONAL_FOUL"] = 278] = "PERSONAL_FOUL";
            EventIncidentTypeList[EventIncidentTypeList["GAME_MISCONDUCT"] = 279] = "GAME_MISCONDUCT";
            EventIncidentTypeList[EventIncidentTypeList["CUT_OFF"] = 280] = "CUT_OFF";
            EventIncidentTypeList[EventIncidentTypeList["DISQUALIFIED"] = 281] = "DISQUALIFIED";
            EventIncidentTypeList[EventIncidentTypeList["DID_NOT_START"] = 282] = "DID_NOT_START";
            EventIncidentTypeList[EventIncidentTypeList["DID_NOT_FINISH"] = 283] = "DID_NOT_FINISH";
            EventIncidentTypeList[EventIncidentTypeList["MADE_CUT_DID_NOT_FINISH"] = 284] = "MADE_CUT_DID_NOT_FINISH";
            EventIncidentTypeList[EventIncidentTypeList["WITHDRAWN"] = 285] = "WITHDRAWN";
            EventIncidentTypeList[EventIncidentTypeList["RETIRED"] = 291] = "RETIRED";
            EventIncidentTypeList[EventIncidentTypeList["DID_NOT_CLASSIFIED"] = 294] = "DID_NOT_CLASSIFIED";
            EventIncidentTypeList[EventIncidentTypeList["BEHIND_RUSHED"] = 295] = "BEHIND_RUSHED";
            EventIncidentTypeList[EventIncidentTypeList["SINGLE_POINT"] = 296] = "SINGLE_POINT";
            EventIncidentTypeList[EventIncidentTypeList["NET_RUN_RATE"] = 299] = "NET_RUN_RATE";
            EventIncidentTypeList[EventIncidentTypeList["NOT_QUALIFIED"] = 300] = "NOT_QUALIFIED";
            EventIncidentTypeList[EventIncidentTypeList["OWNER_POINTS"] = 301] = "OWNER_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["ON_COURSE_TRACK"] = 302] = "ON_COURSE_TRACK";
            EventIncidentTypeList[EventIncidentTypeList["PASS_SUCCESS"] = 303] = "PASS_SUCCESS";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_PASSES"] = 304] = "TOTAL_PASSES";
            EventIncidentTypeList[EventIncidentTypeList["COMPLETED_PASSES_SS"] = 305] = "COMPLETED_PASSES_SS";
            EventIncidentTypeList[EventIncidentTypeList["CURRENT_LAP"] = 306] = "CURRENT_LAP";
            EventIncidentTypeList[EventIncidentTypeList["RETIRED_HURT"] = 310] = "RETIRED_HURT";
            EventIncidentTypeList[EventIncidentTypeList["HIT_WICKET"] = 311] = "HIT_WICKET";
            EventIncidentTypeList[EventIncidentTypeList["LEADER"] = 312] = "LEADER";
            EventIncidentTypeList[EventIncidentTypeList["GENERAL_LEADER"] = 314] = "GENERAL_LEADER";
            EventIncidentTypeList[EventIncidentTypeList["POINTS_LEADER"] = 315] = "POINTS_LEADER";
            EventIncidentTypeList[EventIncidentTypeList["MOUNTAINS_LEADER"] = 316] = "MOUNTAINS_LEADER";
            EventIncidentTypeList[EventIncidentTypeList["YOUTH_LEADER"] = 317] = "YOUTH_LEADER";
            EventIncidentTypeList[EventIncidentTypeList["CURRENT_WORLD_CHAMPION"] = 318] = "CURRENT_WORLD_CHAMPION";
            EventIncidentTypeList[EventIncidentTypeList["LAST_IN_RACE"] = 319] = "LAST_IN_RACE";
            EventIncidentTypeList[EventIncidentTypeList["CURRENT_DISTANCE"] = 323] = "CURRENT_DISTANCE";
            EventIncidentTypeList[EventIncidentTypeList["NON_RUNNER"] = 326] = "NON_RUNNER";
            EventIncidentTypeList[EventIncidentTypeList["PULLED_UP"] = 327] = "PULLED_UP";
            EventIncidentTypeList[EventIncidentTypeList["UNSEATED_RIDER"] = 328] = "UNSEATED_RIDER";
            EventIncidentTypeList[EventIncidentTypeList["RAN_OUT"] = 329] = "RAN_OUT";
            EventIncidentTypeList[EventIncidentTypeList["FALL"] = 330] = "FALL";
            EventIncidentTypeList[EventIncidentTypeList["BROUGHT_DOWN"] = 331] = "BROUGHT_DOWN";
            EventIncidentTypeList[EventIncidentTypeList["HIT_RAILS"] = 332] = "HIT_RAILS";
            EventIncidentTypeList[EventIncidentTypeList["REFUSED_TO_RACE"] = 333] = "REFUSED_TO_RACE";
            EventIncidentTypeList[EventIncidentTypeList["SEVEN_METER_THROW"] = 334] = "SEVEN_METER_THROW";
            EventIncidentTypeList[EventIncidentTypeList["SEVEN_METER_SCORED"] = 335] = "SEVEN_METER_SCORED";
            EventIncidentTypeList[EventIncidentTypeList["SEVEN_METER_MISSED"] = 336] = "SEVEN_METER_MISSED";
            EventIncidentTypeList[EventIncidentTypeList["OBSTRUCTING_THE_FIELD"] = 337] = "OBSTRUCTING_THE_FIELD";
            EventIncidentTypeList[EventIncidentTypeList["KNOCKOUT"] = 338] = "KNOCKOUT";
            EventIncidentTypeList[EventIncidentTypeList["MARTIAL_ARTS_FINISHED"] = 340] = "MARTIAL_ARTS_FINISHED";
            EventIncidentTypeList[EventIncidentTypeList["TECHNICAL_KNOCKOUT"] = 341] = "TECHNICAL_KNOCKOUT";
            EventIncidentTypeList[EventIncidentTypeList["COMPLETED_PASSES"] = 342] = "COMPLETED_PASSES";
            EventIncidentTypeList[EventIncidentTypeList["DISTANCE_COVERED_METRES"] = 343] = "DISTANCE_COVERED_METRES";
            EventIncidentTypeList[EventIncidentTypeList["SUBMISSION"] = 344] = "SUBMISSION";
            EventIncidentTypeList[EventIncidentTypeList["NO_CONTEST"] = 346] = "NO_CONTEST";
            EventIncidentTypeList[EventIncidentTypeList["FIRST_SERVICE"] = 347] = "FIRST_SERVICE";
            EventIncidentTypeList[EventIncidentTypeList["MISSED_PENALTY"] = 348] = "MISSED_PENALTY";
            EventIncidentTypeList[EventIncidentTypeList["MISSED_CONVERSION"] = 349] = "MISSED_CONVERSION";
            EventIncidentTypeList[EventIncidentTypeList["MISSED_DROP_GOAL"] = 350] = "MISSED_DROP_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["MISSED_FIELD_GOAL"] = 351] = "MISSED_FIELD_GOAL";
            EventIncidentTypeList[EventIncidentTypeList["MISSED_EXTRA_POINT"] = 352] = "MISSED_EXTRA_POINT";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINT_CONVERSION_FAILED"] = 353] = "TWO_POINT_CONVERSION_FAILED";
            EventIncidentTypeList[EventIncidentTypeList["SLIPPED_UP"] = 356] = "SLIPPED_UP";
            EventIncidentTypeList[EventIncidentTypeList["STOLEN_BASES_SS"] = 357] = "STOLEN_BASES_SS";
            EventIncidentTypeList[EventIncidentTypeList["DEFENSIVE_2_POINT_CONVERSION"] = 361] = "DEFENSIVE_2_POINT_CONVERSION";
            EventIncidentTypeList[EventIncidentTypeList["GOAL_DISALLOWED"] = 362] = "GOAL_DISALLOWED";
            EventIncidentTypeList[EventIncidentTypeList["RAID_POINTS"] = 363] = "RAID_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["TACKLE_POINTS"] = 364] = "TACKLE_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["ALL_OUT_POINTS"] = 365] = "ALL_OUT_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["EXTRA_POINTS"] = 366] = "EXTRA_POINTS";
            EventIncidentTypeList[EventIncidentTypeList["TOUCH_POINTS_PLAYER"] = 367] = "TOUCH_POINTS_PLAYER";
            EventIncidentTypeList[EventIncidentTypeList["BONUS_POINTS_PLAYER"] = 368] = "BONUS_POINTS_PLAYER";
            EventIncidentTypeList[EventIncidentTypeList["RAID_POINTS_PLAYER"] = 369] = "RAID_POINTS_PLAYER";
            EventIncidentTypeList[EventIncidentTypeList["TACKLE_POINTS_PLAYER"] = 370] = "TACKLE_POINTS_PLAYER";
            EventIncidentTypeList[EventIncidentTypeList["TOTAL_POINTS_PLAYER"] = 371] = "TOTAL_POINTS_PLAYER";
            EventIncidentTypeList[EventIncidentTypeList["ATTACKS"] = 372] = "ATTACKS";
            EventIncidentTypeList[EventIncidentTypeList["DANGEROUS_ATTACKS"] = 373] = "DANGEROUS_ATTACKS";
            EventIncidentTypeList[EventIncidentTypeList["ELECTED_START_ON"] = 374] = "ELECTED_START_ON";
            EventIncidentTypeList[EventIncidentTypeList["SCORES_CHANGED"] = 382] = "SCORES_CHANGED";
            EventIncidentTypeList[EventIncidentTypeList["NET_POINTS_WON"] = 404] = "NET_POINTS_WON";
            EventIncidentTypeList[EventIncidentTypeList["NET_POINTS_PLAYED"] = 405] = "NET_POINTS_PLAYED";
            EventIncidentTypeList[EventIncidentTypeList["VIRTUAL_YELLOW_RED_CARD"] = -2] = "VIRTUAL_YELLOW_RED_CARD";
            EventIncidentTypeList[EventIncidentTypeList["RUSHING_TOUCHDOWNS"] = 393] = "RUSHING_TOUCHDOWNS";
            EventIncidentTypeList[EventIncidentTypeList["PASSING_TOUCHDOWNS"] = 394] = "PASSING_TOUCHDOWNS";
            EventIncidentTypeList[EventIncidentTypeList["TURNOVER_TOUCHDOWNS"] = 403] = "TURNOVER_TOUCHDOWNS";
            EventIncidentTypeList[EventIncidentTypeList["FIELD_GOALS_SUCCEEDED"] = 395] = "FIELD_GOALS_SUCCEEDED";
            EventIncidentTypeList[EventIncidentTypeList["INTERCEPTION_THROWN"] = 396] = "INTERCEPTION_THROWN";
            EventIncidentTypeList[EventIncidentTypeList["FUMBLE_LOST"] = 397] = "FUMBLE_LOST";
            EventIncidentTypeList[EventIncidentTypeList["SACKS_ALLOWED"] = 398] = "SACKS_ALLOWED";
            EventIncidentTypeList[EventIncidentTypeList["TOUCHDOWNS"] = 399] = "TOUCHDOWNS";
            EventIncidentTypeList[EventIncidentTypeList["SAFETIES"] = 400] = "SAFETIES";
            EventIncidentTypeList[EventIncidentTypeList["TWO_POINT_CONVERSIONS"] = 401] = "TWO_POINT_CONVERSIONS";
            EventIncidentTypeList[EventIncidentTypeList["TECHNICAL_FOULS"] = 402] = "TECHNICAL_FOULS";
            EventIncidentTypeList[EventIncidentTypeList["TECHNICAL_FOULS_SS"] = 410] = "TECHNICAL_FOULS_SS";
            EventIncidentTypeList[EventIncidentTypeList["FACEOFFS"] = 411] = "FACEOFFS";
        })(EventIncidentTypeList || (EventIncidentTypeList = {}));

        // CONCATENATED MODULE: ./www/res/script/ts/react/lib/lists/SportList.ts
        var SportList;
        (function(SportList) {
            SportList[SportList["MIXED"] = -1] = "MIXED";
            SportList[SportList["SOCCER"] = 1] = "SOCCER";
            SportList[SportList["TENNIS"] = 2] = "TENNIS";
            SportList[SportList["BASKETBALL"] = 3] = "BASKETBALL";
            SportList[SportList["HOCKEY"] = 4] = "HOCKEY";
            SportList[SportList["AMERICAN_FOOTBALL"] = 5] = "AMERICAN_FOOTBALL";
            SportList[SportList["BASEBALL"] = 6] = "BASEBALL";
            SportList[SportList["HANDBALL"] = 7] = "HANDBALL";
            SportList[SportList["RUGBY_UNION"] = 8] = "RUGBY_UNION";
            SportList[SportList["FLOORBALL"] = 9] = "FLOORBALL";
            SportList[SportList["BANDY"] = 10] = "BANDY";
            SportList[SportList["FUTSAL"] = 11] = "FUTSAL";
            SportList[SportList["VOLLEYBALL"] = 12] = "VOLLEYBALL";
            SportList[SportList["CRICKET"] = 13] = "CRICKET";
            SportList[SportList["DARTS"] = 14] = "DARTS";
            SportList[SportList["SNOOKER"] = 15] = "SNOOKER";
            SportList[SportList["BOXING"] = 16] = "BOXING";
            SportList[SportList["BEACH_VOLLEYBALL"] = 17] = "BEACH_VOLLEYBALL";
            SportList[SportList["AUSSIE_RULES"] = 18] = "AUSSIE_RULES";
            SportList[SportList["RUGBY_LEAGUE"] = 19] = "RUGBY_LEAGUE";
            SportList[SportList["BADMINTON"] = 21] = "BADMINTON";
            SportList[SportList["WATER_POLO"] = 22] = "WATER_POLO";
            SportList[SportList["FIELD_HOCKEY"] = 24] = "FIELD_HOCKEY";
            SportList[SportList["TABLE_TENNIS"] = 25] = "TABLE_TENNIS";
            SportList[SportList["BEACH_SOCCER"] = 26] = "BEACH_SOCCER";
            SportList[SportList["MMA"] = 28] = "MMA";
            SportList[SportList["NETBALL"] = 29] = "NETBALL";
            SportList[SportList["PESAPALLO"] = 30] = "PESAPALLO";
            SportList[SportList["GOLF"] = 23] = "GOLF";
            SportList[SportList["MOTORSPORT"] = 31] = "MOTORSPORT";
            SportList[SportList["MOTORSPORT_AUTO_RACING"] = 32] = "MOTORSPORT_AUTO_RACING";
            SportList[SportList["MOTORSPORT_MOTO_RACING"] = 33] = "MOTORSPORT_MOTO_RACING";
            SportList[SportList["CYCLING"] = 34] = "CYCLING";
            SportList[SportList["HORSE_RACING"] = 35] = "HORSE_RACING";
            SportList[SportList["ESPORTS"] = 36] = "ESPORTS";
            SportList[SportList["WINTER_SPORTS"] = 37] = "WINTER_SPORTS";
            SportList[SportList["WINTER_SPORTS_SKI_JUMPING"] = 38] = "WINTER_SPORTS_SKI_JUMPING";
            SportList[SportList["WINTER_SPORTS_ALPINE_SKIING"] = 39] = "WINTER_SPORTS_ALPINE_SKIING";
            SportList[SportList["WINTER_SPORTS_CROSS_COUNTRY"] = 40] = "WINTER_SPORTS_CROSS_COUNTRY";
            SportList[SportList["WINTER_SPORTS_BIATHLON"] = 41] = "WINTER_SPORTS_BIATHLON";
            SportList[SportList["KABADDI"] = 42] = "KABADDI";
        })(SportList || (SportList = {}));

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Helper/StatsResults/StatsResults.ts


        var StatsResults_StatsResultsImpl = /** @class */ (function() {
            function StatsResultsImpl(utilTrans, utilSport, utilDate) {
                this._utilTrans = utilTrans;
                this._utilSport = utilSport;
                this._utilDate = utilDate;
                this._utilConfig = window.cjs.Api.config;
                this._timezone = window.cjs.Api.timezone;
            }
            StatsResultsImpl.prototype.getGap = function(eventItem) {
                var sportId = eventItem.getSportId();
                var rank = eventItem.getStatsResultsRank() || 0;
                var currentDistance = this._getCurrentDistance(sportId, eventItem.isLive(), eventItem.getCurrentDistance(), rank);
                var gap = this._getGap(sportId, eventItem.getStatsResultsLapDistance() || 0, eventItem.getStatsResultsGap() || "", rank);
                if (currentDistance) {
                    return currentDistance + (currentDistance && gap ? " " + gap : "");
                }
                return gap;
            };
            StatsResultsImpl.prototype.getJumpRound1 = function(eventItem) {
                var participantStatusId = eventItem.getStatsResultsStopReasonRound1();
                return participantStatusId ?
                    this.getParticipantStatusTrans(participantStatusId, true) :
                    eventItem.getStatsResultsJumpRound1();
            };
            StatsResultsImpl.prototype.getJumpRound2 = function(eventItem) {
                var participantStatusId = eventItem.getStatsResultsStopReasonRound2();
                return participantStatusId ?
                    this.getParticipantStatusTrans(participantStatusId, true) :
                    eventItem.getStatsResultsJumpRound2();
            };
            StatsResultsImpl.prototype.getRankNoLive = function(eventItem) {
                if (eventItem.isScheduled()) {
                    return this._utilDate.timestamp2date(this._getRankNoLiveFormat(eventItem.getStartUTime()), eventItem.getStartUTime(), this._timezone.getGmtOffset());
                }
                return this.getRank(eventItem, false);
            };
            StatsResultsImpl.prototype.getRank = function(eventItem, isMyTeams) {
                return this._getScheduledRank(eventItem, isMyTeams) || this._getRank(eventItem);
            };
            StatsResultsImpl.prototype.getShooting = function(eventItem) {
                var penaltyLap = eventItem.getStatsResultsPenaltyLap();
                var missedShot = eventItem.getStatsResultsMissedShot();
                var result = [];
                if (penaltyLap) {
                    result.push(penaltyLap);
                }
                if (missedShot) {
                    result.push(missedShot);
                }
                return result.join(" + ");
            };
            StatsResultsImpl.prototype.getTime = function(eventItem) {
                var participantStatusId = eventItem.getStatsResultsStopReason();
                if (participantStatusId) {
                    return eventItem.getStatsResultsStopReasonRound1() || eventItem.getStatsResultsStopReasonRound2() ?
                        "" :
                        this.getParticipantStatusTrans(participantStatusId, true);
                }
                return eventItem.getStatsResultsTime();
            };
            StatsResultsImpl.prototype.getParticipantStatusTrans = function(participantStatusId, isShort) {
                switch (participantStatusId) {
                    case EventIncidentTypeList.CUT_OFF:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_CUT_OFF" : "TRANS_DC_CUT_OFF");
                    case EventIncidentTypeList.DISQUALIFIED:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_DISQUALIFIED" : "TRANS_DC_DISQUALIFIED");
                    case EventIncidentTypeList.DID_NOT_START:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_DID_NOT_START" : "TRANS_DC_DID_NOT_START");
                    case EventIncidentTypeList.DID_NOT_FINISH:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_DID_NOT_FINISH" : "TRANS_DC_DID_NOT_FINISH");
                    case EventIncidentTypeList.MADE_CUT_DID_NOT_FINISH:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_MADE_CUT_DID_NOT_FINISH" : "TRANS_DC_MADE_CUT_DID_NOT_FINISH");
                    case EventIncidentTypeList.WITHDRAWN:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_WITHDRAWN" : "TRANS_DC_WITHDRAWN");
                    case EventIncidentTypeList.RETIRED:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_RETIRED" : "TRANS_DC_RETIRED");
                    case EventIncidentTypeList.DID_NOT_CLASSIFIED:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_DID_NOT_CLASSIFIED" : "TRANS_DC_DID_NOT_CLASSIFIED");
                    case EventIncidentTypeList.NOT_QUALIFIED:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_NOT_QUALIFIED" : "TRANS_DC_NOT_QUALIFIED");
                    case EventIncidentTypeList.OWNER_POINTS:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_OWNER_POINTS" : "TRANS_DC_OWNER_POINTS");
                    case EventIncidentTypeList.NON_RUNNER:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_NON_RUNNER" : "TRANS_DC_NON_RUNNER");
                    case EventIncidentTypeList.PULLED_UP:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_PULLED_UP" : "TRANS_DC_PULLED_UP");
                    case EventIncidentTypeList.UNSEATED_RIDER:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_UNSEATED_RIDER" : "TRANS_DC_UNSEATED_RIDER");
                    case EventIncidentTypeList.RAN_OUT:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_RAN_OUT" : "TRANS_DC_RAN_OUT");
                    case EventIncidentTypeList.FALL:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_FALL" : "TRANS_DC_FALL");
                    case EventIncidentTypeList.BROUGHT_DOWN:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_BROUGHT_DOWN" : "TRANS_DC_BROUGHT_DOWN");
                    case EventIncidentTypeList.HIT_RAILS:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_HIT_RAILS" : "TRANS_DC_HIT_RAILS");
                    case EventIncidentTypeList.REFUSED_TO_RACE:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_REFUSED_TO_RACE" : "TRANS_DC_REFUSED_TO_RACE");
                    case EventIncidentTypeList.SLIPPED_UP:
                        return this._utilTrans.translate(isShort ? "TRANS_DC_SHORT_SLIPPED_UP" : "TRANS_DC_SLIPPED_UP");
                    default:
                        return "";
                }
            };
            StatsResultsImpl.prototype._getRankNoLiveFormat = function(eventStartUTime) {
                var isUsTimeFormat = this._utilConfig.get("app", "US_time_format") || false;
                if (this._utilDate.getMidnight() === this._utilDate.getMidnight(eventStartUTime)) {
                    return isUsTimeFormat ? "h:i A" : "H:i";
                }
                return isUsTimeFormat ? "M d" : "d.m.";
            };
            StatsResultsImpl.prototype._getCurrentDistance = function(sportId, isLive, currentDistance, rank) {
                if (this._utilSport.inGroup(sportId, SportList.WINTER_SPORTS) && isLive && currentDistance && rank === 1) {
                    return currentDistance + " " + this._utilTrans.translate("TRANS_WINTER_SPORTS_KM");
                }
                return "";
            };
            StatsResultsImpl.prototype._getGap = function(sportId, lapDistance, gap, rank) {
                if (lapDistance !== 0) {
                    var lapDistanceWithPrefix = lapDistance > 0 ? "+" + lapDistance : lapDistance;
                    return lapDistanceWithPrefix + " " + this._utilSport.getRacingSportShortLapsLabel(sportId);
                } else if (gap !== "" && rank !== 1) {
                    return Number(gap) > 0 || Number(gap.replace(/:/g, "")) >= 0 ? "+" + gap : gap;
                }
                return "";
            };
            StatsResultsImpl.prototype._getScheduledRank = function(eventItem, isMyTeams) {
                if (eventItem.isScheduled()) {
                    if (eventItem.getSportId() === SportList.GOLF && isMyTeams && !eventItem.isDelayed()) {
                        return eventItem.getStartUTimeDate();
                    } else if (eventItem.getSportId() === SportList.HORSE_RACING &&
                        eventItem.getParticipantStatus() === EventIncidentTypeList.NON_RUNNER) {
                        return this._utilTrans.translate("TRANS_DC_SHORT_NON_RUNNER");
                    }
                }
                return "";
            };
            StatsResultsImpl.prototype._getRank = function(eventItem) {
                var isGolf = eventItem.getSportId() === SportList.GOLF;
                var currentParticipantStatus;
                var currentRank;
                var rank = "";
                if (eventItem.isStatsResults()) {
                    var rankNumber = eventItem.getStatsResultsRank();
                    currentRank = rankNumber !== null ? rankNumber.toString() : "";
                    currentParticipantStatus = eventItem.getStatsResultsStopReason() || 0;
                } else {
                    currentRank = eventItem.getRank() || "";
                    currentParticipantStatus = eventItem.getParticipantStatus() || 0;
                }
                if (currentParticipantStatus) {
                    rank = this.getParticipantStatusTrans(currentParticipantStatus, true);
                } else if (currentRank) {
                    var nonDelayedAndNonParticipantLiveGolf = isGolf && !eventItem.isParticipantLive() && !eventItem.wasParticipantLive() && !eventItem.isDelayed();
                    if (!nonDelayedAndNonParticipantLiveGolf) {
                        rank = isGolf ? (eventItem.getRankIsTied() ? "T" + currentRank : currentRank) : currentRank + ".";
                    }
                }
                return rank;
            };
            return StatsResultsImpl;
        }());



        /***/
    }),
    /* 50 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return /* binding */ ServiceStatusBoxRenderer_ServiceStatusBoxRendererImpl;
        });

        // UNUSED EXPORTS: DETAIL_ID, LIVETABLE_ID

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Helper/ServiceStatusBox/ServiceStatus.ts
        var ServiceStatus = Object.freeze({
            OK: 1,
            UNAVAILABLE_UPDATES: 2,
            UNAVAILABLE_LIVE_CENTRE: 3,
            UNAVAILABLE_STANDINGS: 4,
            UNAVAILABLE_LC: 6,
            UNAVAILABLE_H2H: 7,
            UNAVAILABLE_MY_GAMES: 8,
            UNAVAILABLE_ODDS: 9,
            UNAVAILABLE_UPDATES_ON_DETAIL: 10,
            UNAVAILABLE_UPDATES_ON_DETAIL_AND_LIVETABLE: 11,
        });
        var ServiceStatusLocation = Object.freeze({
            LIVE_TABLE: 1,
            DETAIL: 2,
        });

        function showOnDetail(serviceStatus) {
            return getLocation(serviceStatus).includes(ServiceStatusLocation.DETAIL);
        }

        function getLocation(serviceStatus) {
            switch (serviceStatus) {
                case ServiceStatus.UNAVAILABLE_UPDATES:
                case ServiceStatus.UNAVAILABLE_LIVE_CENTRE:
                case ServiceStatus.UNAVAILABLE_STANDINGS:
                case ServiceStatus.UNAVAILABLE_LC:
                case ServiceStatus.UNAVAILABLE_H2H:
                case ServiceStatus.UNAVAILABLE_MY_GAMES:
                case ServiceStatus.UNAVAILABLE_ODDS:
                    return [ServiceStatusLocation.LIVE_TABLE];
                case ServiceStatus.UNAVAILABLE_UPDATES_ON_DETAIL:
                    return [ServiceStatusLocation.DETAIL];
                case ServiceStatus.UNAVAILABLE_UPDATES_ON_DETAIL_AND_LIVETABLE:
                    return [ServiceStatusLocation.LIVE_TABLE, ServiceStatusLocation.DETAIL];
            }
            return [];
        }

        function getTranslateKeys(serviceStatus) {
            switch (serviceStatus) {
                case ServiceStatus.UNAVAILABLE_UPDATES:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_2"];
                case ServiceStatus.UNAVAILABLE_LIVE_CENTRE:
                    return [
                        "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_1",
                        "TRANS_SYSTEM_ERROR_UNAVAILABLE_LIVE_CENTRE_PART_2",
                    ];
                case ServiceStatus.UNAVAILABLE_STANDINGS:
                    return [
                        "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_1",
                        "TRANS_SYSTEM_ERROR_UNAVAILABLE_STANDINGS_PART_2",
                    ];
                case ServiceStatus.UNAVAILABLE_LC:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_LC_PART_2"];
                case ServiceStatus.UNAVAILABLE_H2H:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_H2H_PART_2"];
                case ServiceStatus.UNAVAILABLE_MY_GAMES:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_MY_GAMES_PART_2"];
                case ServiceStatus.UNAVAILABLE_ODDS:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_ODDS_PART_2"];
                case ServiceStatus.UNAVAILABLE_UPDATES_ON_DETAIL:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_2"];
                case ServiceStatus.UNAVAILABLE_UPDATES_ON_DETAIL_AND_LIVETABLE:
                    return ["TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_1", "TRANS_SYSTEM_ERROR_UNAVAILABLE_UPDATES_PART_2"];
            }
            return ["", ""];
        }

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Helper/ServiceStatusBox/ServiceStatusBoxRenderer.ts
        var __read = (undefined && undefined.__read) || function(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r, ar = [],
                e;
            try {
                while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
                e = {
                    error: error
                };
            } finally {
                try {
                    if (r && !r.done && (m = i["return"])) m.call(i);
                } finally {
                    if (e) throw e.error;
                }
            }
            return ar;
        };

        var DETAIL_ID = "content-all";
        var LIVETABLE_ID = "fscon";
        var ServiceStatusBoxRenderer_ServiceStatusBoxRendererImpl = /** @class */ (function() {
            function ServiceStatusBoxRendererImpl(utilTrans) {
                this._serviceStatusId = ServiceStatus.OK;
                this.WRAPPER_ID = "fscon-service-status";
                this._utilTrans = utilTrans;
            }
            ServiceStatusBoxRendererImpl.prototype.showBox = function(serviceStatusId) {
                var _this = this;
                if (serviceStatusId == ServiceStatus.OK) {
                    this._removeWrapper();
                }
                [ServiceStatusLocation.LIVE_TABLE, ServiceStatusLocation.DETAIL].forEach(function(location) {
                    if (getLocation(serviceStatusId).includes(location)) {
                        var locationElement = _this._getLocationElement(location);
                        if (locationElement) {
                            var _a = __read(getTranslateKeys(serviceStatusId), 2),
                                transKeyPart1 = _a[0],
                                transKeyPart2 = _a[1];
                            if (serviceStatusId != _this._serviceStatusId && transKeyPart1 != "") {
                                var content = _this._getWrapperWithNewContent(transKeyPart1, transKeyPart2);
                                locationElement.prepend(content);
                            }
                        }
                    } else {
                        var locationElement = _this._getLocationElement(location);
                        if (locationElement) {
                            _this._removeWrapper();
                        }
                    }
                });
            };
            ServiceStatusBoxRendererImpl.prototype._getLocationElement = function(location) {
                if (location == ServiceStatusLocation.DETAIL) {
                    return document.getElementById(DETAIL_ID);
                }
                return document.getElementById(LIVETABLE_ID);
            };
            ServiceStatusBoxRendererImpl.prototype._removeWrapper = function() {
                var wrapper = document.getElementById(this.WRAPPER_ID);
                if (wrapper) {
                    return wrapper.remove();
                }
            };
            ServiceStatusBoxRendererImpl.prototype._getOrCreateWrapper = function() {
                var wrapper = document.getElementById(this.WRAPPER_ID);
                if (wrapper) {
                    return wrapper;
                }
                var newWrapper = document.createElement("div");
                newWrapper.id = this.WRAPPER_ID;
                return newWrapper;
            };
            ServiceStatusBoxRendererImpl.prototype._getWrapperWithNewContent = function(transKeyPart1, transKeyPart2) {
                var wrapper = this._getOrCreateWrapper();
                var serviceStatus = document.createElement("div");
                serviceStatus.id = "service-status";
                serviceStatus.className = "warning";
                var captionBox = document.createElement("div");
                captionBox.className = "caption-box";
                var closeButton = document.createElement("div");
                closeButton.className = "close-button";
                closeButton.onclick = function() {
                    var serviceStatus = document.getElementById("service-status");
                    if (serviceStatus) {
                        serviceStatus.style.display = "none";
                    }
                };
                var content = document.createElement("div");
                content.className = "content";
                content.append(this._utilTrans.translate(transKeyPart1), document.createElement("br"), this._utilTrans.translate(transKeyPart2));
                if (wrapper.firstElementChild) {
                    wrapper.replaceChild(serviceStatus, wrapper.firstElementChild);
                } else {
                    wrapper.appendChild(serviceStatus);
                }
                serviceStatus.appendChild(captionBox);
                captionBox.append(closeButton, content);
                return wrapper;
            };
            return ServiceStatusBoxRendererImpl;
        }());



        /***/
    }),
    /* 51 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

        // EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() {
            return /* binding */ React_React;
        });

        // CONCATENATED MODULE: ./www/res/script/ts/react/lib/lists/PageTypesList.ts
        var PageTypesList;
        (function(PageTypesList) {
            PageTypesList["PAGE_TYPE_CATEGORY"] = "category_page";
            PageTypesList["PAGE_TYPE_COMMON"] = "common_page";
            PageTypesList["PAGE_TYPE_MIXED"] = "mixed_page";
            PageTypesList["PAGE_TYPE_PLAYER"] = "player_page";
            PageTypesList["PAGE_TYPE_RANKING"] = "ranking_page";
            PageTypesList["PAGE_TYPE_SERIES"] = "series_page";
            PageTypesList["PAGE_TYPE_SPORT"] = "sport_page";
            PageTypesList["PAGE_TYPE_TEAM"] = "team_page";
            PageTypesList["PAGE_TYPE_TOURNAMENT"] = "tournament_page";
            PageTypesList["PAGE_TYPE_DRAW"] = "draw_page";
        })(PageTypesList || (PageTypesList = {}));

        // CONCATENATED MODULE: ./www/res/script/ts/webpack/Helper/React/React.ts

        var PageTab;
        (function(PageTab) {
            PageTab["PAGE_TAB_TRANSFERS"] = "transfers";
            PageTab["PAGE_TAB_SUMMARY"] = "summary";
            PageTab["PAGE_TAB_SUMMARY_FIXTURES"] = "summary-fixtures";
            PageTab["PAGE_TAB_SUMMARY_RESULTS"] = "summary-results";
            PageTab["PAGE_TAB_RESULTS"] = "results";
            PageTab["PAGE_TAB_FIXTURES"] = "fixtures";
            PageTab["PAGE_TAB_NEWS"] = "news";
        })(PageTab || (PageTab = {}));
        var React_React = /** @class */ (function() {
            function React() {}
            React.prototype.isEnabled = function(pageType, pageTab) {
                var enabledPageTypes = [
                    PageTypesList.PAGE_TYPE_SPORT,
                    PageTypesList.PAGE_TYPE_CATEGORY,
                    PageTypesList.PAGE_TYPE_SERIES,
                    PageTypesList.PAGE_TYPE_MIXED,
                ];
                var enabledPageTypesWithTabRestriction = [
                    PageTypesList.PAGE_TYPE_TOURNAMENT,
                    PageTypesList.PAGE_TYPE_TEAM,
                    PageTypesList.PAGE_TYPE_PLAYER,
                ];
                var reactEnabledByPageType = enabledPageTypes.indexOf(pageType) !== -1;
                var reactEnabledByPageTypeAndPageTab = false;
                var enabledPageTabs = [
                    PageTab.PAGE_TAB_SUMMARY,
                    PageTab.PAGE_TAB_SUMMARY_FIXTURES,
                    PageTab.PAGE_TAB_SUMMARY_RESULTS,
                    PageTab.PAGE_TAB_FIXTURES,
                    PageTab.PAGE_TAB_RESULTS,
                    PageTab.PAGE_TAB_TRANSFERS,
                    PageTab.PAGE_TAB_NEWS,
                ];
                if (enabledPageTypesWithTabRestriction.indexOf(pageType) !== -1 && enabledPageTabs.indexOf(pageTab) !== -1) {
                    reactEnabledByPageTypeAndPageTab = true;
                }
                return reactEnabledByPageType || reactEnabledByPageTypeAndPageTab;
            };
            return React;
        }());



        /***/
    }),
    /* 52 */
    /***/
    (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* WEBPACK VAR INJECTION */
        (function(global) {
            /* harmony import */
            var url_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53);
            /* harmony import */
            var url_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(url_polyfill__WEBPACK_IMPORTED_MODULE_0__);
            /* harmony import */
            var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(54);
            /* harmony import */
            var url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(url_search_params_polyfill__WEBPACK_IMPORTED_MODULE_1__);
            /* harmony import */
            var _Detail_TabsConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);
            /* harmony import */
            var _Helper_AussieRules_AussieRulesFormatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
            /* harmony import */
            var _Helper_React_React__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51);
            /* harmony import */
            var _Helper_BaseballExtraRow_BaseballExtraRow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);
            /* harmony import */
            var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21);
            /* harmony import */
            var _Data_Event_SortKey_SortKeyGenerator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(22);
            /* harmony import */
            var _Data_Event_SortKey_Part_LabelPart__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(23);
            /* harmony import */
            var _Data_Event_SortKey_Part_RankPart__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(24);
            /* harmony import */
            var _Data_Event_SortKey_Part_SortKeyHelperPart__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(25);
            /* harmony import */
            var _Data_Event_SortKey_Part_TimePart__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(26);
            /* harmony import */
            var _Data_Event_SortKey_Part_TopLeaguesPart__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(27);
            /* harmony import */
            var _Helper_ClickableBookmaker_ClickableBookmaker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(28);
            /* harmony import */
            var _Helper_BookmakersDataStorage_BookmakersDataStorage__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(29);
            /* harmony import */
            var _Helper_GambleResponsibly_GambleResponsibly__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(30);
            /* harmony import */
            var _Odds_Formatter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(31);
            /* harmony import */
            var _Odds_Evaluator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(32);
            /* harmony import */
            var _Helper_ServiceStatusBox_ServiceStatusBoxRenderer__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(50);
            /* harmony import */
            var _Helper_ReversedSportTime_ReversedSportTime__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(33);
            /* harmony import */
            var _Page_ParticipantNoDuel__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(34);
            /* harmony import */
            var _Helper_WinLose_WinLose__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(48);
            /* harmony import */
            var _Helper_ScoresChanged_ScoresChanged__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(35);
            /* harmony import */
            var _EventTracking_EventTracking__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(36);
            /* harmony import */
            var _Detail_Sport_Cricket__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(37);
            /* harmony import */
            var _Detail_Tab_Cricket__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(12);
            /* harmony import */
            var _Detail_Tab_Config__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(47);
            /* harmony import */
            var _Detail_CricketLiveComments__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(16);
            /* harmony import */
            var _Detail_MatchComments__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(17);
            /* harmony import */
            var _Detail_CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(6);
            /* harmony import */
            var _Helper_CricketExtraRow_CricketExtraRow__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(18);
            /* harmony import */
            var _Helper_CricketScore_CricketScore__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(13);
            /* harmony import */
            var _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(4);
            /* harmony import */
            var _react_lib_fetchers_FetchProxy__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(40);
            /* harmony import */
            var _Feed_Table_NewsfeedParser__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(41);
            /* harmony import */
            var _Util_String__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(42);
            /* harmony import */
            var _Feed_Table_MatchHistoryParser__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(43);
            /* harmony import */
            var _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(5);
            /* harmony import */
            var _Helper_Darts_Darts__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(44);
            /* harmony import */
            var _Feed_Table_EventStatisticsParser__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(45);
            /* harmony import */
            var _Helper_StatsResults_StatsResultsParser__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(46);
            /* harmony import */
            var _Detail_EventStatistics__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(11);
            /* harmony import */
            var _Helper_StatsResults_StatsResults__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(49);




            window.cjs = window.cjs || {};
            window.cjs.constants = window.cjs.constants || {};
            window.cjs.constants.FEED = _constants__WEBPACK_IMPORTED_MODULE_6__[ /* IndexFeedConstants */ "a"];
            window.formater = new _Odds_Formatter__WEBPACK_IMPORTED_MODULE_16__[ /* FormatterImpl */ "a"]();
            window.Oddsportal_Evaluator_Class = _Odds_Evaluator__WEBPACK_IMPORTED_MODULE_17__[ /* Evaluator */ "a"];
            window.e_t = new _EventTracking_EventTracking__WEBPACK_IMPORTED_MODULE_23__[ /* EventTrackingImpl */ "a"](function() {
                return window.event_stage_type_id;
            }, function() {
                var _a, _b;
                return (_b = (_a = window.cjs) === null || _a === void 0 ? void 0 : _a.detailTimeCounter) === null || _b === void 0 ? void 0 : _b.getTime();
            }, undefined, undefined);
            var windowOrGlobal = typeof window !== "undefined" && window !== null ? window : global;
            windowOrGlobal.cjs.dic.registerClass("Helper_StatsResults", _Helper_StatsResults_StatsResults__WEBPACK_IMPORTED_MODULE_42__[ /* StatsResultsImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_StatsResultsParser", _Helper_StatsResults_StatsResultsParser__WEBPACK_IMPORTED_MODULE_40__[ /* StatsResultsParser */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Feed_Table_EventStatisticsParser", _Feed_Table_EventStatisticsParser__WEBPACK_IMPORTED_MODULE_39__[ /* EventStatisticsParser */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_Darts", _Helper_Darts_Darts__WEBPACK_IMPORTED_MODULE_38__[ /* Darts */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Feed_Table_MatchHistoryParser", _Feed_Table_MatchHistoryParser__WEBPACK_IMPORTED_MODULE_36__[ /* MatchHistoryParser */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_MatchHistory_Factory", _Detail_MatchHistory__WEBPACK_IMPORTED_MODULE_37__[ /* MatchHistoryFactory */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Feed_Table_NewsfeedParser", _Feed_Table_NewsfeedParser__WEBPACK_IMPORTED_MODULE_34__[ /* NewsfeedParser */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Newsfeed_Factory", _Detail_Newsfeed__WEBPACK_IMPORTED_MODULE_32__[ /* NewsfeedFactory */ "d"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_CommentHtmlFormatterImpl", _Detail_CommentHtmlFormatter__WEBPACK_IMPORTED_MODULE_29__[ /* CommentHtmlFormatterImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_CricketLiveComments_Container_ItemBuilder", _Detail_CricketLiveComments__WEBPACK_IMPORTED_MODULE_27__[ /* ItemBuilder */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_CricketLiveComments_Factory", _Detail_CricketLiveComments__WEBPACK_IMPORTED_MODULE_27__[ /* CricketLiveCommentsFactory */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_EventStatistics_Factory", _Detail_EventStatistics__WEBPACK_IMPORTED_MODULE_41__[ /* EventStatisticsFactory */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Tab_Configs", _Detail_Tab_Config__WEBPACK_IMPORTED_MODULE_26__[ /* TabConfigs */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Sport_Cricket", _Detail_Sport_Cricket__WEBPACK_IMPORTED_MODULE_24__[ /* Cricket */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Tab_Cricket", _Detail_Tab_Cricket__WEBPACK_IMPORTED_MODULE_25__[ /* Cricket */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_CricketScoreBuilder", _Helper_CricketScore_CricketScore__WEBPACK_IMPORTED_MODULE_31__[ /* CricketScoreBuilder */ "a"], ["helperCricketScoreBuilder"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_CricketScoreInputBoundaryForEventItem", _Helper_CricketScore_CricketScore__WEBPACK_IMPORTED_MODULE_31__[ /* InputBoundaryForEventItem */ "c"], [
                "helperCricketScoreInputBoundaryForEventItem",
            ]);
            windowOrGlobal.cjs.dic.registerClass("Helper_CricketScoreInputBoundaryForDetail", _Helper_CricketScore_CricketScore__WEBPACK_IMPORTED_MODULE_31__[ /* InputBoundaryForDetail */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_MatchComments_Container_ItemBuilder", _Detail_MatchComments__WEBPACK_IMPORTED_MODULE_28__[ /* ItemBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_MatchComments_Factory", _Detail_MatchComments__WEBPACK_IMPORTED_MODULE_28__[ /* MatchCommentsFactory */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Tab_HtmlElementFactoryBuilder", _Detail_Tab_Cricket__WEBPACK_IMPORTED_MODULE_25__[ /* HtmlElementFactoryBuilder */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Tab_TabRenderedCheckerBuilder", _Detail_Tab_Cricket__WEBPACK_IMPORTED_MODULE_25__[ /* TabRenderedCheckerBuilder */ "c"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_ScoresChanged", _Helper_ScoresChanged_ScoresChanged__WEBPACK_IMPORTED_MODULE_22__[ /* ScoresChanged */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_WinLose", _Helper_WinLose_WinLose__WEBPACK_IMPORTED_MODULE_21__[ /* WinLoseImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Page_ParticipantNoDuel", _Page_ParticipantNoDuel__WEBPACK_IMPORTED_MODULE_20__[ /* ParticipantNoDuelImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_ReversedSportTime", _Helper_ReversedSportTime_ReversedSportTime__WEBPACK_IMPORTED_MODULE_19__[ /* ReversedSportTimeImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_ServiceStatusBox", _Helper_ServiceStatusBox_ServiceStatusBoxRenderer__WEBPACK_IMPORTED_MODULE_18__[ /* ServiceStatusBoxRendererImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_React", _Helper_React_React__WEBPACK_IMPORTED_MODULE_4__[ /* React */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_GambleResponsibly", _Helper_GambleResponsibly_GambleResponsibly__WEBPACK_IMPORTED_MODULE_15__[ /* GambleResponsiblyImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_ClickableBookmaker", _Helper_ClickableBookmaker_ClickableBookmaker__WEBPACK_IMPORTED_MODULE_13__[ /* ClickableBookmakerImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_BookmakersDataStorage", _Helper_BookmakersDataStorage_BookmakersDataStorage__WEBPACK_IMPORTED_MODULE_14__[ /* BookmakersDataStorageImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Detail_Tabs_Config", _Detail_TabsConfig__WEBPACK_IMPORTED_MODULE_2__[ /* TabsConfigImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_AussieRulesFormatter", _Helper_AussieRules_AussieRulesFormatter__WEBPACK_IMPORTED_MODULE_3__[ /* AussieRulesFormatter */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_CricketExtraRowBuilder", _Helper_CricketExtraRow_CricketExtraRow__WEBPACK_IMPORTED_MODULE_30__[ /* CricketExtraRowBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_CricketExtraRowInputBoundaryImpl", _Helper_CricketExtraRow_CricketExtraRow__WEBPACK_IMPORTED_MODULE_30__[ /* InputBoundaryImpl */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_BaseballExtraRow", _Helper_BaseballExtraRow_BaseballExtraRow__WEBPACK_IMPORTED_MODULE_5__[ /* BaseballExtraRow */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Helper_BaseballExtraRowDataImplBuilder", _Helper_BaseballExtraRow_BaseballExtraRow__WEBPACK_IMPORTED_MODULE_5__[ /* BaseballExtraRowDataImplBuilder */ "b"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKey_GeneratorBuilder", _Data_Event_SortKey_SortKeyGenerator__WEBPACK_IMPORTED_MODULE_7__[ /* SortKeyGeneratorBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKeyPart_LabelPartBuilder", _Data_Event_SortKey_Part_LabelPart__WEBPACK_IMPORTED_MODULE_8__[ /* LabelPartBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKeyPart_RankPartBuilder", _Data_Event_SortKey_Part_RankPart__WEBPACK_IMPORTED_MODULE_9__[ /* RankPartBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKey_HelperPart", _Data_Event_SortKey_Part_SortKeyHelperPart__WEBPACK_IMPORTED_MODULE_10__[ /* SortKeyHelperImpl */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKeyPart_TimePartBuilder", _Data_Event_SortKey_Part_TimePart__WEBPACK_IMPORTED_MODULE_11__[ /* TimePartBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerClass("Data_Event_SortKeyPart_TopLeaguesPartBuilder", _Data_Event_SortKey_Part_TopLeaguesPart__WEBPACK_IMPORTED_MODULE_12__[ /* TopLeaguesPartBuilder */ "a"]);
            windowOrGlobal.cjs.dic.registerSingleton("Fetch_Proxy", function() {
                return new _react_lib_fetchers_FetchProxy__WEBPACK_IMPORTED_MODULE_33__[ /* FetchProxy */ "a"](location.origin + "/x/feed/proxy-fetch");
            });
            (typeof window !== "undefined" && window !== null ? window : global).cjs.dic.registerSingleton("util_string", function() {
                return new _Util_String__WEBPACK_IMPORTED_MODULE_35__[ /* StringsImpl */ "a"](cjs.Api.config.get("app", "lang", "charset"), cjs.Api.config.get("app", "lang", "web"));
            }, ["utilString"]);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(7)))

        /***/
    }),
    /* 53 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            (function(global) {
                /**
                 * Polyfill URLSearchParams
                 *
                 * Inspired from : https://github.com/WebReflection/url-search-params/blob/master/src/url-search-params.js
                 */

                var checkIfIteratorIsSupported = function() {
                    try {
                        return !!Symbol.iterator;
                    } catch (error) {
                        return false;
                    }
                };


                var iteratorSupported = checkIfIteratorIsSupported();

                var createIterator = function(items) {
                    var iterator = {
                        next: function() {
                            var value = items.shift();
                            return {
                                done: value === void 0,
                                value: value
                            };
                        }
                    };

                    if (iteratorSupported) {
                        iterator[Symbol.iterator] = function() {
                            return iterator;
                        };
                    }

                    return iterator;
                };

                /**
                 * Search param name and values should be encoded according to https://url.spec.whatwg.org/#urlencoded-serializing
                 * encodeURIComponent() produces the same result except encoding spaces as `%20` instead of `+`.
                 */
                var serializeParam = function(value) {
                    return encodeURIComponent(value).replace(/%20/g, '+');
                };

                var deserializeParam = function(value) {
                    return decodeURIComponent(String(value).replace(/\+/g, ' '));
                };

                var polyfillURLSearchParams = function() {

                    var URLSearchParams = function(searchString) {
                        Object.defineProperty(this, '_entries', {
                            writable: true,
                            value: {}
                        });
                        var typeofSearchString = typeof searchString;

                        if (typeofSearchString === 'undefined') {
                            // do nothing
                        } else if (typeofSearchString === 'string') {
                            if (searchString !== '') {
                                this._fromString(searchString);
                            }
                        } else if (searchString instanceof URLSearchParams) {
                            var _this = this;
                            searchString.forEach(function(value, name) {
                                _this.append(name, value);
                            });
                        } else if ((searchString !== null) && (typeofSearchString === 'object')) {
                            if (Object.prototype.toString.call(searchString) === '[object Array]') {
                                for (var i = 0; i < searchString.length; i++) {
                                    var entry = searchString[i];
                                    if ((Object.prototype.toString.call(entry) === '[object Array]') || (entry.length !== 2)) {
                                        this.append(entry[0], entry[1]);
                                    } else {
                                        throw new TypeError('Expected [string, any] as entry at index ' + i + ' of URLSearchParams\'s input');
                                    }
                                }
                            } else {
                                for (var key in searchString) {
                                    if (searchString.hasOwnProperty(key)) {
                                        this.append(key, searchString[key]);
                                    }
                                }
                            }
                        } else {
                            throw new TypeError('Unsupported input\'s type for URLSearchParams');
                        }
                    };

                    var proto = URLSearchParams.prototype;

                    proto.append = function(name, value) {
                        if (name in this._entries) {
                            this._entries[name].push(String(value));
                        } else {
                            this._entries[name] = [String(value)];
                        }
                    };

                    proto.delete = function(name) {
                        delete this._entries[name];
                    };

                    proto.get = function(name) {
                        return (name in this._entries) ? this._entries[name][0] : null;
                    };

                    proto.getAll = function(name) {
                        return (name in this._entries) ? this._entries[name].slice(0) : [];
                    };

                    proto.has = function(name) {
                        return (name in this._entries);
                    };

                    proto.set = function(name, value) {
                        this._entries[name] = [String(value)];
                    };

                    proto.forEach = function(callback, thisArg) {
                        var entries;
                        for (var name in this._entries) {
                            if (this._entries.hasOwnProperty(name)) {
                                entries = this._entries[name];
                                for (var i = 0; i < entries.length; i++) {
                                    callback.call(thisArg, entries[i], name, this);
                                }
                            }
                        }
                    };

                    proto.keys = function() {
                        var items = [];
                        this.forEach(function(value, name) {
                            items.push(name);
                        });
                        return createIterator(items);
                    };

                    proto.values = function() {
                        var items = [];
                        this.forEach(function(value) {
                            items.push(value);
                        });
                        return createIterator(items);
                    };

                    proto.entries = function() {
                        var items = [];
                        this.forEach(function(value, name) {
                            items.push([name, value]);
                        });
                        return createIterator(items);
                    };

                    if (iteratorSupported) {
                        proto[Symbol.iterator] = proto.entries;
                    }

                    proto.toString = function() {
                        var searchArray = [];
                        this.forEach(function(value, name) {
                            searchArray.push(serializeParam(name) + '=' + serializeParam(value));
                        });
                        return searchArray.join('&');
                    };


                    global.URLSearchParams = URLSearchParams;
                };

                var checkIfURLSearchParamsSupported = function() {
                    try {
                        var URLSearchParams = global.URLSearchParams;

                        return (new URLSearchParams('?a=1').toString() === 'a=1') && (typeof URLSearchParams.prototype.set === 'function');
                    } catch (e) {
                        return false;
                    }
                };

                if (!checkIfURLSearchParamsSupported()) {
                    polyfillURLSearchParams();
                }

                var proto = global.URLSearchParams.prototype;

                if (typeof proto.sort !== 'function') {
                    proto.sort = function() {
                        var _this = this;
                        var items = [];
                        this.forEach(function(value, name) {
                            items.push([name, value]);
                            if (!_this._entries) {
                                _this.delete(name);
                            }
                        });
                        items.sort(function(a, b) {
                            if (a[0] < b[0]) {
                                return -1;
                            } else if (a[0] > b[0]) {
                                return +1;
                            } else {
                                return 0;
                            }
                        });
                        if (_this._entries) { // force reset because IE keeps keys index
                            _this._entries = {};
                        }
                        for (var i = 0; i < items.length; i++) {
                            this.append(items[i][0], items[i][1]);
                        }
                    };
                }

                if (typeof proto._fromString !== 'function') {
                    Object.defineProperty(proto, '_fromString', {
                        enumerable: false,
                        configurable: false,
                        writable: false,
                        value: function(searchString) {
                            if (this._entries) {
                                this._entries = {};
                            } else {
                                var keys = [];
                                this.forEach(function(value, name) {
                                    keys.push(name);
                                });
                                for (var i = 0; i < keys.length; i++) {
                                    this.delete(keys[i]);
                                }
                            }

                            searchString = searchString.replace(/^\?/, '');
                            var attributes = searchString.split('&');
                            var attribute;
                            for (var i = 0; i < attributes.length; i++) {
                                attribute = attributes[i].split('=');
                                this.append(
                                    deserializeParam(attribute[0]),
                                    (attribute.length > 1) ? deserializeParam(attribute[1]) : ''
                                );
                            }
                        }
                    });
                }

                // HTMLAnchorElement

            })(
                (typeof global !== 'undefined') ? global :
                ((typeof window !== 'undefined') ? window :
                    ((typeof self !== 'undefined') ? self : this))
            );

            (function(global) {
                /**
                 * Polyfill URL
                 *
                 * Inspired from : https://github.com/arv/DOM-URL-Polyfill/blob/master/src/url.js
                 */

                var checkIfURLIsSupported = function() {
                    try {
                        var u = new global.URL('b', 'http://a');
                        u.pathname = 'c d';
                        return (u.href === 'http://a/c%20d') && u.searchParams;
                    } catch (e) {
                        return false;
                    }
                };


                var polyfillURL = function() {
                    var _URL = global.URL;

                    var URL = function(url, base) {
                        if (typeof url !== 'string') url = String(url);

                        // Only create another document if the base is different from current location.
                        var doc = document,
                            baseElement;
                        if (base && (global.location === void 0 || base !== global.location.href)) {
                            doc = document.implementation.createHTMLDocument('');
                            baseElement = doc.createElement('base');
                            baseElement.href = base;
                            doc.head.appendChild(baseElement);
                            try {
                                if (baseElement.href.indexOf(base) !== 0) throw new Error(baseElement.href);
                            } catch (err) {
                                throw new Error('URL unable to set base ' + base + ' due to ' + err);
                            }
                        }

                        var anchorElement = doc.createElement('a');
                        anchorElement.href = url;
                        if (baseElement) {
                            doc.body.appendChild(anchorElement);
                            anchorElement.href = anchorElement.href; // force href to refresh
                        }

                        if (anchorElement.protocol === ':' || !/:/.test(anchorElement.href)) {
                            throw new TypeError('Invalid URL');
                        }

                        Object.defineProperty(this, '_anchorElement', {
                            value: anchorElement
                        });


                        // create a linked searchParams which reflect its changes on URL
                        var searchParams = new global.URLSearchParams(this.search);
                        var enableSearchUpdate = true;
                        var enableSearchParamsUpdate = true;
                        var _this = this;
                        ['append', 'delete', 'set'].forEach(function(methodName) {
                            var method = searchParams[methodName];
                            searchParams[methodName] = function() {
                                method.apply(searchParams, arguments);
                                if (enableSearchUpdate) {
                                    enableSearchParamsUpdate = false;
                                    _this.search = searchParams.toString();
                                    enableSearchParamsUpdate = true;
                                }
                            };
                        });

                        Object.defineProperty(this, 'searchParams', {
                            value: searchParams,
                            enumerable: true
                        });

                        var search = void 0;
                        Object.defineProperty(this, '_updateSearchParams', {
                            enumerable: false,
                            configurable: false,
                            writable: false,
                            value: function() {
                                if (this.search !== search) {
                                    search = this.search;
                                    if (enableSearchParamsUpdate) {
                                        enableSearchUpdate = false;
                                        this.searchParams._fromString(this.search);
                                        enableSearchUpdate = true;
                                    }
                                }
                            }
                        });
                    };

                    var proto = URL.prototype;

                    var linkURLWithAnchorAttribute = function(attributeName) {
                        Object.defineProperty(proto, attributeName, {
                            get: function() {
                                return this._anchorElement[attributeName];
                            },
                            set: function(value) {
                                this._anchorElement[attributeName] = value;
                            },
                            enumerable: true
                        });
                    };

                    ['hash', 'host', 'hostname', 'port', 'protocol']
                    .forEach(function(attributeName) {
                        linkURLWithAnchorAttribute(attributeName);
                    });

                    Object.defineProperty(proto, 'search', {
                        get: function() {
                            return this._anchorElement['search'];
                        },
                        set: function(value) {
                            this._anchorElement['search'] = value;
                            this._updateSearchParams();
                        },
                        enumerable: true
                    });

                    Object.defineProperties(proto, {

                        'toString': {
                            get: function() {
                                var _this = this;
                                return function() {
                                    return _this.href;
                                };
                            }
                        },

                        'href': {
                            get: function() {
                                return this._anchorElement.href.replace(/\?$/, '');
                            },
                            set: function(value) {
                                this._anchorElement.href = value;
                                this._updateSearchParams();
                            },
                            enumerable: true
                        },

                        'pathname': {
                            get: function() {
                                return this._anchorElement.pathname.replace(/(^\/?)/, '/');
                            },
                            set: function(value) {
                                this._anchorElement.pathname = value;
                            },
                            enumerable: true
                        },

                        'origin': {
                            get: function() {
                                // get expected port from protocol
                                var expectedPort = {
                                    'http:': 80,
                                    'https:': 443,
                                    'ftp:': 21
                                } [this._anchorElement.protocol];
                                // add port to origin if, expected port is different than actual port
                                // and it is not empty f.e http://foo:8080
                                // 8080 != 80 && 8080 != ''
                                var addPortToOrigin = this._anchorElement.port != expectedPort &&
                                    this._anchorElement.port !== '';

                                return this._anchorElement.protocol +
                                    '//' +
                                    this._anchorElement.hostname +
                                    (addPortToOrigin ? (':' + this._anchorElement.port) : '');
                            },
                            enumerable: true
                        },

                        'password': { // TODO
                            get: function() {
                                return '';
                            },
                            set: function(value) {},
                            enumerable: true
                        },

                        'username': { // TODO
                            get: function() {
                                return '';
                            },
                            set: function(value) {},
                            enumerable: true
                        },
                    });

                    URL.createObjectURL = function(blob) {
                        return _URL.createObjectURL.apply(_URL, arguments);
                    };

                    URL.revokeObjectURL = function(url) {
                        return _URL.revokeObjectURL.apply(_URL, arguments);
                    };

                    global.URL = URL;

                };

                if (!checkIfURLIsSupported()) {
                    polyfillURL();
                }

                if ((global.location !== void 0) && !('origin' in global.location)) {
                    var getOrigin = function() {
                        return global.location.protocol + '//' + global.location.hostname + (global.location.port ? (':' + global.location.port) : '');
                    };

                    try {
                        Object.defineProperty(global.location, 'origin', {
                            get: getOrigin,
                            enumerable: true
                        });
                    } catch (e) {
                        setInterval(function() {
                            global.location.origin = getOrigin();
                        }, 100);
                    }
                }

            })(
                (typeof global !== 'undefined') ? global :
                ((typeof window !== 'undefined') ? window :
                    ((typeof self !== 'undefined') ? self : this))
            );

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(7)))

        /***/
    }),
    /* 54 */
    /***/
    (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function(global) {
            /**
             *
             *
             * @author Jerry Bendy <jerry@icewingcc.com>
             * @licence MIT
             *
             */

            (function(self) {
                'use strict';

                var nativeURLSearchParams = (self.URLSearchParams && self.URLSearchParams.prototype.get) ? self.URLSearchParams : null,
                    isSupportObjectConstructor = nativeURLSearchParams && (new nativeURLSearchParams({
                        a: 1
                    })).toString() === 'a=1',
                    // There is a bug in safari 10.1 (and earlier) that incorrectly decodes `%2B` as an empty space and not a plus.
                    decodesPlusesCorrectly = nativeURLSearchParams && (new nativeURLSearchParams('s=%2B').get('s') === '+'),
                    __URLSearchParams__ = "__URLSearchParams__",
                    // Fix bug in Edge which cannot encode ' &' correctly
                    encodesAmpersandsCorrectly = nativeURLSearchParams ? (function() {
                        var ampersandTest = new nativeURLSearchParams();
                        ampersandTest.append('s', ' &');
                        return ampersandTest.toString() === 's=+%26';
                    })() : true,
                    prototype = URLSearchParamsPolyfill.prototype,
                    iterable = !!(self.Symbol && self.Symbol.iterator);

                if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly && encodesAmpersandsCorrectly) {
                    return;
                }


                /**
                 * Make a URLSearchParams instance
                 *
                 * @param {object|string|URLSearchParams} search
                 * @constructor
                 */
                function URLSearchParamsPolyfill(search) {
                    search = search || "";

                    // support construct object with another URLSearchParams instance
                    if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
                        search = search.toString();
                    }
                    this[__URLSearchParams__] = parseToDict(search);
                }


                /**
                 * Appends a specified key/value pair as a new search parameter.
                 *
                 * @param {string} name
                 * @param {string} value
                 */
                prototype.append = function(name, value) {
                    appendTo(this[__URLSearchParams__], name, value);
                };

                /**
                 * Deletes the given search parameter, and its associated value,
                 * from the list of all search parameters.
                 *
                 * @param {string} name
                 */
                prototype['delete'] = function(name) {
                    delete this[__URLSearchParams__][name];
                };

                /**
                 * Returns the first value associated to the given search parameter.
                 *
                 * @param {string} name
                 * @returns {string|null}
                 */
                prototype.get = function(name) {
                    var dict = this[__URLSearchParams__];
                    return name in dict ? dict[name][0] : null;
                };

                /**
                 * Returns all the values association with a given search parameter.
                 *
                 * @param {string} name
                 * @returns {Array}
                 */
                prototype.getAll = function(name) {
                    var dict = this[__URLSearchParams__];
                    return name in dict ? dict[name].slice(0) : [];
                };

                /**
                 * Returns a Boolean indicating if such a search parameter exists.
                 *
                 * @param {string} name
                 * @returns {boolean}
                 */
                prototype.has = function(name) {
                    return name in this[__URLSearchParams__];
                };

                /**
                 * Sets the value associated to a given search parameter to
                 * the given value. If there were several values, delete the
                 * others.
                 *
                 * @param {string} name
                 * @param {string} value
                 */
                prototype.set = function set(name, value) {
                    this[__URLSearchParams__][name] = ['' + value];
                };

                /**
                 * Returns a string containg a query string suitable for use in a URL.
                 *
                 * @returns {string}
                 */
                prototype.toString = function() {
                    var dict = this[__URLSearchParams__],
                        query = [],
                        i, key, name, value;
                    for (key in dict) {
                        name = encode(key);
                        for (i = 0, value = dict[key]; i < value.length; i++) {
                            query.push(name + '=' + encode(value[i]));
                        }
                    }
                    return query.join('&');
                };

                // There is a bug in Safari 10.1 and `Proxy`ing it is not enough.
                var forSureUsePolyfill = !decodesPlusesCorrectly;
                var useProxy = (!forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self.Proxy);
                /*
                 * Apply polifill to global object and append other prototype into it
                 */
                Object.defineProperty(self, 'URLSearchParams', {
                    value: (useProxy ?
                        // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0
                        new Proxy(nativeURLSearchParams, {
                            construct: function(target, args) {
                                return new target((new URLSearchParamsPolyfill(args[0]).toString()));
                            }
                        }) :
                        URLSearchParamsPolyfill)
                });

                var USPProto = self.URLSearchParams.prototype;

                USPProto.polyfill = true;

                /**
                 *
                 * @param {function} callback
                 * @param {object} thisArg
                 */
                USPProto.forEach = USPProto.forEach || function(callback, thisArg) {
                    var dict = parseToDict(this.toString());
                    Object.getOwnPropertyNames(dict).forEach(function(name) {
                        dict[name].forEach(function(value) {
                            callback.call(thisArg, value, name, this);
                        }, this);
                    }, this);
                };

                /**
                 * Sort all name-value pairs
                 */
                USPProto.sort = USPProto.sort || function() {
                    var dict = parseToDict(this.toString()),
                        keys = [],
                        k, i, j;
                    for (k in dict) {
                        keys.push(k);
                    }
                    keys.sort();

                    for (i = 0; i < keys.length; i++) {
                        this['delete'](keys[i]);
                    }
                    for (i = 0; i < keys.length; i++) {
                        var key = keys[i],
                            values = dict[key];
                        for (j = 0; j < values.length; j++) {
                            this.append(key, values[j]);
                        }
                    }
                };

                /**
                 * Returns an iterator allowing to go through all keys of
                 * the key/value pairs contained in this object.
                 *
                 * @returns {function}
                 */
                USPProto.keys = USPProto.keys || function() {
                    var items = [];
                    this.forEach(function(item, name) {
                        items.push(name);
                    });
                    return makeIterator(items);
                };

                /**
                 * Returns an iterator allowing to go through all values of
                 * the key/value pairs contained in this object.
                 *
                 * @returns {function}
                 */
                USPProto.values = USPProto.values || function() {
                    var items = [];
                    this.forEach(function(item) {
                        items.push(item);
                    });
                    return makeIterator(items);
                };

                /**
                 * Returns an iterator allowing to go through all key/value
                 * pairs contained in this object.
                 *
                 * @returns {function}
                 */
                USPProto.entries = USPProto.entries || function() {
                    var items = [];
                    this.forEach(function(item, name) {
                        items.push([name, item]);
                    });
                    return makeIterator(items);
                };


                if (iterable) {
                    USPProto[self.Symbol.iterator] = USPProto[self.Symbol.iterator] || USPProto.entries;
                }


                function encode(str) {
                    var replace = {
                        '!': '%21',
                        "'": '%27',
                        '(': '%28',
                        ')': '%29',
                        '~': '%7E',
                        '%20': '+',
                        '%00': '\x00'
                    };
                    return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function(match) {
                        return replace[match];
                    });
                }

                function decode(str) {
                    return str
                        .replace(/[ +]/g, '%20')
                        .replace(/(%[a-f0-9]{2})+/ig, function(match) {
                            return decodeURIComponent(match);
                        });
                }

                function makeIterator(arr) {
                    var iterator = {
                        next: function() {
                            var value = arr.shift();
                            return {
                                done: value === undefined,
                                value: value
                            };
                        }
                    };

                    if (iterable) {
                        iterator[self.Symbol.iterator] = function() {
                            return iterator;
                        };
                    }

                    return iterator;
                }

                function parseToDict(search) {
                    var dict = {};

                    if (typeof search === "object") {
                        // if `search` is an array, treat it as a sequence
                        if (isArray(search)) {
                            for (var i = 0; i < search.length; i++) {
                                var item = search[i];
                                if (isArray(item) && item.length === 2) {
                                    appendTo(dict, item[0], item[1]);
                                } else {
                                    throw new TypeError("Failed to construct 'URLSearchParams': Sequence initializer must only contain pair elements");
                                }
                            }

                        } else {
                            for (var key in search) {
                                if (search.hasOwnProperty(key)) {
                                    appendTo(dict, key, search[key]);
                                }
                            }
                        }

                    } else {
                        // remove first '?'
                        if (search.indexOf("?") === 0) {
                            search = search.slice(1);
                        }

                        var pairs = search.split("&");
                        for (var j = 0; j < pairs.length; j++) {
                            var value = pairs[j],
                                index = value.indexOf('=');

                            if (-1 < index) {
                                appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));

                            } else {
                                if (value) {
                                    appendTo(dict, decode(value), '');
                                }
                            }
                        }
                    }

                    return dict;
                }

                function appendTo(dict, name, value) {
                    var val = typeof value === 'string' ? value : (
                        value !== null && value !== undefined && typeof value.toString === 'function' ? value.toString() : JSON.stringify(value)
                    );

                    if (name in dict) {
                        dict[name].push(val);
                    } else {
                        dict[name] = [val];
                    }
                }

                function isArray(val) {
                    return !!val && '[object Array]' === Object.prototype.toString.call(val);
                }

            })(typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : this));

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(7)))

        /***/
    })
    /******/
]);
var temporaryLeagueData = cjs.dic.getNewInstance('dataHolder');
//    event tracking
var e_t = cjs.dic.get('utilEnviroment').getEventTrackingObject();
var base_image_url = cjs.dic.get('utilUrl').getLocationOrigin() + '/res/image/';
var base_image_data_url = base_image_url + 'data/';
var base_project_image_url = cjs.dic.get('utilUrl').getLocationOrigin() + '/res/_fs/image/';

window.onerror = function(msg, url, line, column, error) {
    if (msg.substr(-cjs.dev._errorReportsReportedMark.length) == cjs.dev._errorReportsReportedMark) {
        return;
    }
    if (typeof column == 'undefined') {
        column = -1
    }
    if (typeof error == 'undefined') {
        error = null
    }
    cjs.dev.reportError("Caught unhandled exception: '" + msg + "' from " + url + ":" + line + ":" + column, error);
};

$(document).keyup(function(e) {
    if (e.altKey && e.ctrlKey && e.shiftKey && e.keyCode == 68) {
        cjs.dev.init(function() {
            cjs.dev.debugWindow.show();
        });
    }
});

cjs.dev.initUrl = base_url_protocol + '/x/js/core-debugger_0_1842000000.js';
cjs.AjaxJqObject.prototype.errorReporter = function(msg, e) {
    cjs.dev.reportError(msg, e);
};
cjs.clientStorage = cjs.dic.get('client_storage');
clientStorage = cjs.clientStorage;
cjs.Api.ajaxSyncTime.init(cjs.Api.config.get("ajax", "sync_time") || {});
cjs.Api.timezone.initTimezone({
    timezoneList: cjs.Api.config.get("timezone", "list"),
    timezoneDstList: cjs.Api.config.get("timezone", "dst_list"),
    timezoneDefault: cjs.Api.config.get("app", "timezone", "default")
}, cjs.dic.get('util_date'));
cjs.Api.loader.get('timezoneSwitcher').call(function(timezoneSwitcher) {
    timezoneSwitcher.init(cjs.livescoreSettings ? cjs.livescoreSettings._dialog : document);
});

// feed service
cjs.feedService = {};

// iframe top lang box init variables
var project_id = 0;

// odds

var odds_betting_types = {
    "1": 1,
    "2": 3,
    "3": 3,
    "4": 1,
    "5": 3,
    "6": 3,
    "7": 1,
    "8": 1,
    "9": 1,
    "10": 1,
    "11": 1,
    "12": 3,
    "18": 3,
    "19": 1,
    "13": 3,
    "14": 3,
    "15": 3,
    "16": 1,
    "17": 3,
    "21": 3,
    "22": 1,
    "24": 1,
    "25": 3,
    "26": 1,
    "28": 3,
    "29": 3,
    "30": 1,
    "23": 101,
    "31": 101,
    "32": 101,
    "33": 101,
    "34": 101,
    "35": 16,
    "36": 3,
    "37": 101,
    "38": 101,
    "39": 101,
    "40": 101,
    "41": 101,
    "42": 1
};
var odds_sport_scope_list = {
    "1": 2,
    "2": 2,
    "3": 1,
    "4": 2,
    "5": 1,
    "6": 1,
    "7": 2,
    "8": 2,
    "9": 2,
    "10": 2,
    "11": 2,
    "12": 2,
    "18": 1,
    "19": 2,
    "13": 1,
    "14": 2,
    "15": 2,
    "16": 2,
    "17": 2,
    "21": 2,
    "22": 2,
    "24": 2,
    "25": 2,
    "26": 2,
    "28": 2,
    "29": 1,
    "30": 2,
    "23": 2,
    "31": 2,
    "32": 2,
    "33": 2,
    "34": 2,
    "35": 2,
    "36": 2,
    "37": 2,
    "38": 2,
    "39": 2,
    "40": 2,
    "41": 2,
    "42": 2
};

var PushClientFlashTransport = "/iframe/flash-transport.swf";

var SPORT_LIST = new Array();
var SPORT_LIST_BY_ID = {};
var SPORT_URL_BY_ID = [];
SPORT_LIST['soccer'] = 1;
SPORT_LIST_BY_ID['1'] = 'soccer';
SPORT_URL_BY_ID['1'] = '/futbol/';
SPORT_LIST['tennis'] = 2;
SPORT_LIST_BY_ID['2'] = 'tennis';
SPORT_URL_BY_ID['2'] = '/tenis/';
SPORT_LIST['basketball'] = 3;
SPORT_LIST_BY_ID['3'] = 'basketball';
SPORT_URL_BY_ID['3'] = '/baloncesto/';
SPORT_LIST['hockey'] = 4;
SPORT_LIST_BY_ID['4'] = 'hockey';
SPORT_URL_BY_ID['4'] = '/hockey/';
SPORT_LIST['american-football'] = 5;
SPORT_LIST_BY_ID['5'] = 'american-football';
SPORT_URL_BY_ID['5'] = '/futbol-americano/';
SPORT_LIST['baseball'] = 6;
SPORT_LIST_BY_ID['6'] = 'baseball';
SPORT_URL_BY_ID['6'] = '/beisbol/';
SPORT_LIST['handball'] = 7;
SPORT_LIST_BY_ID['7'] = 'handball';
SPORT_URL_BY_ID['7'] = '/balonmano/';
SPORT_LIST['rugby-union'] = 8;
SPORT_LIST_BY_ID['8'] = 'rugby-union';
SPORT_URL_BY_ID['8'] = '/rugby/';
SPORT_LIST['floorball'] = 9;
SPORT_LIST_BY_ID['9'] = 'floorball';
SPORT_URL_BY_ID['9'] = '/unihockey/';
SPORT_LIST['bandy'] = 10;
SPORT_LIST_BY_ID['10'] = 'bandy';
SPORT_URL_BY_ID['10'] = '/bandy/';
SPORT_LIST['futsal'] = 11;
SPORT_LIST_BY_ID['11'] = 'futsal';
SPORT_URL_BY_ID['11'] = '/futbol-sala/';
SPORT_LIST['volleyball'] = 12;
SPORT_LIST_BY_ID['12'] = 'volleyball';
SPORT_URL_BY_ID['12'] = '/voleibol/';
SPORT_LIST['cricket'] = 13;
SPORT_LIST_BY_ID['13'] = 'cricket';
SPORT_URL_BY_ID['13'] = '/cricket/';
SPORT_LIST['darts'] = 14;
SPORT_LIST_BY_ID['14'] = 'darts';
SPORT_URL_BY_ID['14'] = '/dardos/';
SPORT_LIST['snooker'] = 15;
SPORT_LIST_BY_ID['15'] = 'snooker';
SPORT_URL_BY_ID['15'] = '/snooker/';
SPORT_LIST['boxing'] = 16;
SPORT_LIST_BY_ID['16'] = 'boxing';
SPORT_URL_BY_ID['16'] = '/boxeo/';
SPORT_LIST['beach-volleyball'] = 17;
SPORT_LIST_BY_ID['17'] = 'beach-volleyball';
SPORT_URL_BY_ID['17'] = '/voley-playa/';
SPORT_LIST['aussie-rules'] = 18;
SPORT_LIST_BY_ID['18'] = 'aussie-rules';
SPORT_URL_BY_ID['18'] = '/futbol-australiano/';
SPORT_LIST['rugby-league'] = 19;
SPORT_LIST_BY_ID['19'] = 'rugby-league';
SPORT_URL_BY_ID['19'] = '/rugby-league/';
SPORT_LIST['badminton'] = 21;
SPORT_LIST_BY_ID['21'] = 'badminton';
SPORT_URL_BY_ID['21'] = '/badminton/';
SPORT_LIST['water-polo'] = 22;
SPORT_LIST_BY_ID['22'] = 'water-polo';
SPORT_URL_BY_ID['22'] = '/waterpolo/';
SPORT_LIST['golf'] = 23;
SPORT_LIST_BY_ID['23'] = 'golf';
SPORT_URL_BY_ID['23'] = '/golf/';
SPORT_LIST['field-hockey'] = 24;
SPORT_LIST_BY_ID['24'] = 'field-hockey';
SPORT_URL_BY_ID['24'] = '/hockey-hierba/';
SPORT_LIST['table-tennis'] = 25;
SPORT_LIST_BY_ID['25'] = 'table-tennis';
SPORT_URL_BY_ID['25'] = '/tenis-de-mesa/';
SPORT_LIST['beach-soccer'] = 26;
SPORT_LIST_BY_ID['26'] = 'beach-soccer';
SPORT_URL_BY_ID['26'] = '/futbol-playa/';
SPORT_LIST['mma'] = 28;
SPORT_LIST_BY_ID['28'] = 'mma';
SPORT_URL_BY_ID['28'] = '/mma/';
SPORT_LIST['netball'] = 29;
SPORT_LIST_BY_ID['29'] = 'netball';
SPORT_URL_BY_ID['29'] = '/netball/';
SPORT_LIST['pesapallo'] = 30;
SPORT_LIST_BY_ID['30'] = 'pesapallo';
SPORT_URL_BY_ID['30'] = '/pesapallo/';
SPORT_LIST['motorsport'] = 31;
SPORT_LIST_BY_ID['31'] = 'motorsport';
SPORT_URL_BY_ID['31'] = '/motor/';
SPORT_LIST['motorsport-auto-racing'] = 32;
SPORT_LIST_BY_ID['32'] = 'motorsport-auto-racing';
SPORT_URL_BY_ID['32'] = '/automovilismo/';
SPORT_LIST['motorsport-moto-racing'] = 33;
SPORT_LIST_BY_ID['33'] = 'motorsport-moto-racing';
SPORT_URL_BY_ID['33'] = '/motociclismo/';
SPORT_LIST['cycling'] = 34;
SPORT_LIST_BY_ID['34'] = 'cycling';
SPORT_URL_BY_ID['34'] = '/ciclismo/';
SPORT_LIST['horse-racing'] = 35;
SPORT_LIST_BY_ID['35'] = 'horse-racing';
SPORT_URL_BY_ID['35'] = '/carreras-de-caballos/';
SPORT_LIST['esports'] = 36;
SPORT_LIST_BY_ID['36'] = 'esports';
SPORT_URL_BY_ID['36'] = '/esports/';
SPORT_LIST['winter-sports'] = 37;
SPORT_LIST_BY_ID['37'] = 'winter-sports';
SPORT_URL_BY_ID['37'] = '/deportes-de-invierno/';
SPORT_LIST['winter-sports-ski-jumping'] = 38;
SPORT_LIST_BY_ID['38'] = 'winter-sports-ski-jumping';
SPORT_URL_BY_ID['38'] = '/salto-de-esqui/';
SPORT_LIST['winter-sports-alpine-skiing'] = 39;
SPORT_LIST_BY_ID['39'] = 'winter-sports-alpine-skiing';
SPORT_URL_BY_ID['39'] = '/esqui-alpino/';
SPORT_LIST['winter-sports-cross-country'] = 40;
SPORT_LIST_BY_ID['40'] = 'winter-sports-cross-country';
SPORT_URL_BY_ID['40'] = '/esqui-de-fondo/';
SPORT_LIST['winter-sports-biathlon'] = 41;
SPORT_LIST_BY_ID['41'] = 'winter-sports-biathlon';
SPORT_URL_BY_ID['41'] = '/biatlon/';
SPORT_LIST['kabaddi'] = 42;
SPORT_LIST_BY_ID['42'] = 'kabaddi';
SPORT_URL_BY_ID['42'] = '/kabaddi/';

var SPORT_SCORE_PART_LIST = new Array();
SPORT_SCORE_PART_LIST['soccer'] = 1;
SPORT_SCORE_PART_LIST['tennis'] = 5;
SPORT_SCORE_PART_LIST['basketball'] = 5;
SPORT_SCORE_PART_LIST['hockey'] = 5;
SPORT_SCORE_PART_LIST['american-football'] = 5;
SPORT_SCORE_PART_LIST['baseball'] = 10;
SPORT_SCORE_PART_LIST['handball'] = 3;
SPORT_SCORE_PART_LIST['rugby-union'] = 4;
SPORT_SCORE_PART_LIST['floorball'] = 5;
SPORT_SCORE_PART_LIST['bandy'] = 4;
SPORT_SCORE_PART_LIST['futsal'] = 4;
SPORT_SCORE_PART_LIST['volleyball'] = 5;
SPORT_SCORE_PART_LIST['cricket'] = 2;
SPORT_SCORE_PART_LIST['darts'] = 0;
SPORT_SCORE_PART_LIST['snooker'] = 0;
SPORT_SCORE_PART_LIST['boxing'] = 0;
SPORT_SCORE_PART_LIST['beach-volleyball'] = 3;
SPORT_SCORE_PART_LIST['aussie-rules'] = 4;
SPORT_SCORE_PART_LIST['rugby-league'] = 4;
SPORT_SCORE_PART_LIST['badminton'] = 3;
SPORT_SCORE_PART_LIST['water-polo'] = 6;
SPORT_SCORE_PART_LIST['golf'] = 0;
SPORT_SCORE_PART_LIST['field-hockey'] = 4;
SPORT_SCORE_PART_LIST['table-tennis'] = 7;
SPORT_SCORE_PART_LIST['beach-soccer'] = 5;
SPORT_SCORE_PART_LIST['mma'] = 0;
SPORT_SCORE_PART_LIST['netball'] = 5;
SPORT_SCORE_PART_LIST['pesapallo'] = 11;
SPORT_SCORE_PART_LIST['motorsport'] = 0;
SPORT_SCORE_PART_LIST['motorsport-auto-racing'] = 0;
SPORT_SCORE_PART_LIST['motorsport-moto-racing'] = 0;
SPORT_SCORE_PART_LIST['cycling'] = 0;
SPORT_SCORE_PART_LIST['horse-racing'] = 0;
SPORT_SCORE_PART_LIST['esports'] = 0;
SPORT_SCORE_PART_LIST['winter-sports'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-ski-jumping'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-alpine-skiing'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-cross-country'] = 0;
SPORT_SCORE_PART_LIST['winter-sports-biathlon'] = 0;
SPORT_SCORE_PART_LIST['kabaddi'] = 3;

var ICON_LIST = new Array('info', 'tv', 'shirt');

var TXT_SPORT = new Array();
TXT_SPORT['soccer'] = new Array();
TXT_SPORT['soccer']['name'] = 'FÃºtbol';
TXT_SPORT['soccer']['1'] = '&nbsp;';
TXT_SPORT['soccer']['45'] = 'Por terminar';
TXT_SPORT['soccer']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['soccer']['2'] = 'En directo';
TXT_SPORT['soccer']['12'] = '1er Tiempo';
TXT_SPORT['soccer']['13'] = '2Âº Tiempo';
TXT_SPORT['soccer']['6'] = 'PrÃ³rroga';
TXT_SPORT['soccer']['7'] = 'Penaltis';
TXT_SPORT['soccer']['38'] = 'Descanso';
TXT_SPORT['soccer']['46'] = 'Descanso';
TXT_SPORT['soccer']['3'] = 'Finalizado';
TXT_SPORT['soccer']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['soccer']['11'] = 'Tras los penaltis';
TXT_SPORT['soccer']['9'] = 'Walkover';
TXT_SPORT['soccer']['43'] = 'Retrasado';
TXT_SPORT['soccer']['36'] = 'Interrumpido';
TXT_SPORT['soccer']['4'] = 'Aplazado';
TXT_SPORT['soccer']['5'] = 'Anulado';
TXT_SPORT['soccer']['37'] = 'Suspendido';
TXT_SPORT['soccer']['54'] = 'Por perdido';
TXT_SPORT['tennis'] = new Array();
TXT_SPORT['tennis']['name'] = 'Tenis';
TXT_SPORT['tennis']['1'] = '&nbsp;';
TXT_SPORT['tennis']['45'] = 'Por terminar';
TXT_SPORT['tennis']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['tennis']['2'] = 'En directo';
TXT_SPORT['tennis']['17'] = '1er Set';
TXT_SPORT['tennis']['18'] = '2Âº Set';
TXT_SPORT['tennis']['19'] = '3er Set';
TXT_SPORT['tennis']['20'] = '4Âº Set';
TXT_SPORT['tennis']['21'] = '5Âº Set';
TXT_SPORT['tennis']['47'] = '1er Set<br />Tiebreak';
TXT_SPORT['tennis']['48'] = '2Âº Set<br />Tiebreak';
TXT_SPORT['tennis']['49'] = '3er Set<br />Tiebreak';
TXT_SPORT['tennis']['50'] = '4Âº Set<br />Tiebreak';
TXT_SPORT['tennis']['51'] = '5Âº Set<br />Tiebreak';
TXT_SPORT['tennis']['46'] = 'Descanso';
TXT_SPORT['tennis']['3'] = 'Finalizado';
TXT_SPORT['tennis']['8'] = 'Finalizado<br />(retirada)';
TXT_SPORT['tennis']['9'] = 'Walkover';
TXT_SPORT['tennis']['43'] = 'Retrasado';
TXT_SPORT['tennis']['36'] = 'Interrumpido';
TXT_SPORT['tennis']['4'] = 'Aplazado';
TXT_SPORT['tennis']['5'] = 'Anulado';
TXT_SPORT['tennis']['37'] = 'Suspendido';
TXT_SPORT['tennis']['54'] = 'Por perdido';
TXT_SPORT['tennis']['57'] = 'Tras<br />dÃ­a 1';
TXT_SPORT['tennis']['58'] = 'Tras<br />dÃ­a 2';
TXT_SPORT['tennis']['335'] = 'MÃ©dico';
TXT_SPORT['basketball'] = new Array();
TXT_SPORT['basketball']['name'] = 'Baloncesto';
TXT_SPORT['basketball']['1'] = '&nbsp;';
TXT_SPORT['basketball']['45'] = 'Por terminar';
TXT_SPORT['basketball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['basketball']['2'] = 'En directo';
TXT_SPORT['basketball']['22'] = '1er Cuarto';
TXT_SPORT['basketball']['23'] = '2Âº Cuarto';
TXT_SPORT['basketball']['24'] = '3er Cuarto';
TXT_SPORT['basketball']['25'] = '4Âº Cuarto';
TXT_SPORT['basketball']['6'] = 'PrÃ³rroga';
TXT_SPORT['basketball']['38'] = 'Descanso';
TXT_SPORT['basketball']['46'] = 'Descanso';
TXT_SPORT['basketball']['3'] = 'Finalizado';
TXT_SPORT['basketball']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['basketball']['9'] = 'Walkover';
TXT_SPORT['basketball']['43'] = 'Retrasado';
TXT_SPORT['basketball']['36'] = 'Interrumpido';
TXT_SPORT['basketball']['4'] = 'Aplazado';
TXT_SPORT['basketball']['5'] = 'Anulado';
TXT_SPORT['basketball']['37'] = 'Suspendido';
TXT_SPORT['basketball']['54'] = 'Por perdido';
TXT_SPORT['hockey'] = new Array();
TXT_SPORT['hockey']['name'] = 'Hockey';
TXT_SPORT['hockey']['1'] = '&nbsp;';
TXT_SPORT['hockey']['45'] = 'Por terminar';
TXT_SPORT['hockey']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['hockey']['2'] = 'En directo';
TXT_SPORT['hockey']['14'] = '1er Periodo';
TXT_SPORT['hockey']['15'] = '2Âº Periodo';
TXT_SPORT['hockey']['16'] = '3er Periodo';
TXT_SPORT['hockey']['6'] = 'PrÃ³rroga';
TXT_SPORT['hockey']['7'] = 'Penaltis';
TXT_SPORT['hockey']['46'] = 'Descanso';
TXT_SPORT['hockey']['3'] = 'Finalizado';
TXT_SPORT['hockey']['10'] = 'Tras la<br />prÃ³rroga';
TXT_SPORT['hockey']['11'] = 'Tras los<br />penaltis';
TXT_SPORT['hockey']['9'] = 'Walkover';
TXT_SPORT['hockey']['43'] = 'Retrasado';
TXT_SPORT['hockey']['36'] = 'Interrumpido';
TXT_SPORT['hockey']['4'] = 'Aplazado';
TXT_SPORT['hockey']['5'] = 'Anulado';
TXT_SPORT['hockey']['37'] = 'Suspendido';
TXT_SPORT['hockey']['54'] = 'Por perdido';
TXT_SPORT['american-football'] = new Array();
TXT_SPORT['american-football']['name'] = 'FÃºtbol Americano';
TXT_SPORT['american-football']['1'] = '&nbsp;';
TXT_SPORT['american-football']['45'] = 'Por terminar';
TXT_SPORT['american-football']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['american-football']['2'] = 'En directo';
TXT_SPORT['american-football']['22'] = '1er Cuarto';
TXT_SPORT['american-football']['23'] = '2Âº Cuarto';
TXT_SPORT['american-football']['24'] = '3er Cuarto';
TXT_SPORT['american-football']['25'] = '4Âº Cuarto';
TXT_SPORT['american-football']['6'] = 'PrÃ³rroga';
TXT_SPORT['american-football']['38'] = 'Descanso';
TXT_SPORT['american-football']['46'] = 'Descanso';
TXT_SPORT['american-football']['3'] = 'Finalizado';
TXT_SPORT['american-football']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['american-football']['9'] = 'Walkover';
TXT_SPORT['american-football']['43'] = 'Retrasado';
TXT_SPORT['american-football']['36'] = 'Interrumpido';
TXT_SPORT['american-football']['4'] = 'Aplazado';
TXT_SPORT['american-football']['5'] = 'Anulado';
TXT_SPORT['american-football']['37'] = 'Suspendido';
TXT_SPORT['american-football']['54'] = 'Por perdido';
TXT_SPORT['baseball'] = new Array();
TXT_SPORT['baseball']['name'] = 'BÃ©isbol';
TXT_SPORT['baseball']['1'] = '&nbsp;';
TXT_SPORT['baseball']['45'] = 'Por terminar';
TXT_SPORT['baseball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['baseball']['2'] = 'En directo';
TXT_SPORT['baseball']['26'] = '1a Entrada';
TXT_SPORT['baseball']['27'] = '2a Entrada';
TXT_SPORT['baseball']['28'] = '3a Entrada';
TXT_SPORT['baseball']['29'] = '4a Entrada';
TXT_SPORT['baseball']['30'] = '5a Entrada';
TXT_SPORT['baseball']['31'] = '6a Entrada';
TXT_SPORT['baseball']['32'] = '7a Entrada';
TXT_SPORT['baseball']['33'] = '8a Entrada';
TXT_SPORT['baseball']['34'] = '9a Entrada';
TXT_SPORT['baseball']['35'] = 'Entrada<br />Extra';
TXT_SPORT['baseball']['46'] = 'Descanso';
TXT_SPORT['baseball']['3'] = 'Finalizado';
TXT_SPORT['baseball']['9'] = 'Walkover';
TXT_SPORT['baseball']['43'] = 'Retrasado';
TXT_SPORT['baseball']['36'] = 'Interrumpido';
TXT_SPORT['baseball']['4'] = 'Aplazado';
TXT_SPORT['baseball']['5'] = 'Anulado';
TXT_SPORT['baseball']['37'] = 'Suspendido';
TXT_SPORT['baseball']['54'] = 'Por perdido';
TXT_SPORT['handball'] = new Array();
TXT_SPORT['handball']['name'] = 'Balonmano';
TXT_SPORT['handball']['1'] = '&nbsp;';
TXT_SPORT['handball']['45'] = 'Por terminar';
TXT_SPORT['handball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['handball']['2'] = 'En directo';
TXT_SPORT['handball']['12'] = '1er Tiempo';
TXT_SPORT['handball']['38'] = 'Descanso';
TXT_SPORT['handball']['13'] = '2Âº Tiempo';
TXT_SPORT['handball']['6'] = 'PrÃ³rroga';
TXT_SPORT['handball']['7'] = 'Penaltis';
TXT_SPORT['handball']['46'] = 'Descanso';
TXT_SPORT['handball']['3'] = 'Finalizado';
TXT_SPORT['handball']['10'] = 'Tras la<br />prÃ³rroga';
TXT_SPORT['handball']['11'] = 'Tras los<br />penaltis';
TXT_SPORT['handball']['9'] = 'Walkover';
TXT_SPORT['handball']['43'] = 'Retrasado';
TXT_SPORT['handball']['36'] = 'Interrumpido';
TXT_SPORT['handball']['4'] = 'Aplazado';
TXT_SPORT['handball']['5'] = 'Anulado';
TXT_SPORT['handball']['37'] = 'Suspendido';
TXT_SPORT['handball']['54'] = 'Por perdido';
TXT_SPORT['rugby-union'] = new Array();
TXT_SPORT['rugby-union']['name'] = 'Rugby';
TXT_SPORT['rugby-union']['1'] = '&nbsp;';
TXT_SPORT['rugby-union']['45'] = 'Por terminar';
TXT_SPORT['rugby-union']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['rugby-union']['2'] = 'En directo';
TXT_SPORT['rugby-union']['12'] = '1er Tiempo';
TXT_SPORT['rugby-union']['38'] = 'Descanso';
TXT_SPORT['rugby-union']['13'] = '2Âº Tiempo';
TXT_SPORT['rugby-union']['6'] = 'PrÃ³rroga';
TXT_SPORT['rugby-union']['7'] = 'Penaltis';
TXT_SPORT['rugby-union']['46'] = 'Descanso';
TXT_SPORT['rugby-union']['3'] = 'Finalizado';
TXT_SPORT['rugby-union']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['rugby-union']['11'] = 'Tras los penaltis';
TXT_SPORT['rugby-union']['9'] = 'Walkover';
TXT_SPORT['rugby-union']['43'] = 'Retrasado';
TXT_SPORT['rugby-union']['36'] = 'Interrumpido';
TXT_SPORT['rugby-union']['4'] = 'Aplazado';
TXT_SPORT['rugby-union']['5'] = 'Anulado';
TXT_SPORT['rugby-union']['37'] = 'Suspendido';
TXT_SPORT['rugby-union']['54'] = 'Por perdido';
TXT_SPORT['floorball'] = new Array();
TXT_SPORT['floorball']['name'] = 'Unihockey';
TXT_SPORT['floorball']['1'] = '&nbsp;';
TXT_SPORT['floorball']['45'] = 'Por terminar';
TXT_SPORT['floorball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['floorball']['2'] = 'En directo';
TXT_SPORT['floorball']['14'] = '1er Periodo';
TXT_SPORT['floorball']['15'] = '2Âº Periodo';
TXT_SPORT['floorball']['16'] = '3er Periodo';
TXT_SPORT['floorball']['6'] = 'PrÃ³rroga';
TXT_SPORT['floorball']['7'] = 'Penaltis';
TXT_SPORT['floorball']['46'] = 'Descanso';
TXT_SPORT['floorball']['3'] = 'Finalizado';
TXT_SPORT['floorball']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['floorball']['11'] = 'Tras los penaltis';
TXT_SPORT['floorball']['9'] = 'Walkover';
TXT_SPORT['floorball']['43'] = 'Retrasado';
TXT_SPORT['floorball']['36'] = 'Interrumpido';
TXT_SPORT['floorball']['4'] = 'Aplazado';
TXT_SPORT['floorball']['5'] = 'Anulado';
TXT_SPORT['floorball']['37'] = 'Suspendido';
TXT_SPORT['floorball']['54'] = 'Por perdido';
TXT_SPORT['bandy'] = new Array();
TXT_SPORT['bandy']['name'] = 'Bandy';
TXT_SPORT['bandy']['1'] = '&nbsp;';
TXT_SPORT['bandy']['45'] = 'Por terminar';
TXT_SPORT['bandy']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['bandy']['2'] = 'En directo';
TXT_SPORT['bandy']['12'] = '1er Tiempo';
TXT_SPORT['bandy']['38'] = 'Descanso';
TXT_SPORT['bandy']['13'] = '2Âº Tiempo';
TXT_SPORT['bandy']['6'] = 'PrÃ³rroga';
TXT_SPORT['bandy']['7'] = 'Penaltis';
TXT_SPORT['bandy']['46'] = 'Descanso';
TXT_SPORT['bandy']['3'] = 'Finalizado';
TXT_SPORT['bandy']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['bandy']['11'] = 'Tras los penaltis';
TXT_SPORT['bandy']['9'] = 'Walkover';
TXT_SPORT['bandy']['43'] = 'Retrasado';
TXT_SPORT['bandy']['36'] = 'Interrumpido';
TXT_SPORT['bandy']['4'] = 'Aplazado';
TXT_SPORT['bandy']['5'] = 'Anulado';
TXT_SPORT['bandy']['37'] = 'Suspendido';
TXT_SPORT['bandy']['54'] = 'Por perdido';
TXT_SPORT['futsal'] = new Array();
TXT_SPORT['futsal']['name'] = 'FÃºtbol Sala';
TXT_SPORT['futsal']['1'] = '&nbsp;';
TXT_SPORT['futsal']['45'] = 'Por terminar';
TXT_SPORT['futsal']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['futsal']['2'] = 'En directo';
TXT_SPORT['futsal']['12'] = '1er Tiempo';
TXT_SPORT['futsal']['38'] = 'Descanso';
TXT_SPORT['futsal']['13'] = '2Âº Tiempo';
TXT_SPORT['futsal']['6'] = 'PrÃ³rroga';
TXT_SPORT['futsal']['7'] = 'Penaltis';
TXT_SPORT['futsal']['46'] = 'Descanso';
TXT_SPORT['futsal']['3'] = 'Finalizado';
TXT_SPORT['futsal']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['futsal']['11'] = 'Tras los penaltis';
TXT_SPORT['futsal']['9'] = 'Walkover';
TXT_SPORT['futsal']['43'] = 'Retrasado';
TXT_SPORT['futsal']['36'] = 'Interrumpido';
TXT_SPORT['futsal']['4'] = 'Aplazado';
TXT_SPORT['futsal']['5'] = 'Anulado';
TXT_SPORT['futsal']['37'] = 'Suspendido';
TXT_SPORT['futsal']['54'] = 'Por perdido';
TXT_SPORT['volleyball'] = new Array();
TXT_SPORT['volleyball']['name'] = 'Voleibol';
TXT_SPORT['volleyball']['1'] = '&nbsp;';
TXT_SPORT['volleyball']['45'] = 'Por terminar';
TXT_SPORT['volleyball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['volleyball']['2'] = 'En directo';
TXT_SPORT['volleyball']['17'] = '1er Set';
TXT_SPORT['volleyball']['18'] = '2Âº Set';
TXT_SPORT['volleyball']['19'] = '3er Set';
TXT_SPORT['volleyball']['20'] = '4Âº Set';
TXT_SPORT['volleyball']['21'] = '5Âº Set';
TXT_SPORT['volleyball']['55'] = '6Âº Set';
TXT_SPORT['volleyball']['56'] = '7Âº Set';
TXT_SPORT['volleyball']['46'] = 'Descanso';
TXT_SPORT['volleyball']['3'] = 'Finalizado';
TXT_SPORT['volleyball']['9'] = 'Walkover';
TXT_SPORT['volleyball']['43'] = 'Retrasado';
TXT_SPORT['volleyball']['36'] = 'Interrumpido';
TXT_SPORT['volleyball']['4'] = 'Aplazado';
TXT_SPORT['volleyball']['5'] = 'Anulado';
TXT_SPORT['volleyball']['37'] = 'Suspendido';
TXT_SPORT['volleyball']['54'] = 'Por perdido';
TXT_SPORT['cricket'] = new Array();
TXT_SPORT['cricket']['name'] = 'Cricket';
TXT_SPORT['cricket']['1'] = '&nbsp;';
TXT_SPORT['cricket']['45'] = 'Por terminar';
TXT_SPORT['cricket']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['cricket']['2'] = 'En directo';
TXT_SPORT['cricket']['26'] = '1a Entrada';
TXT_SPORT['cricket']['27'] = '2a Entrada';
TXT_SPORT['cricket']['57'] = 'Tras<br />dÃ­a 1';
TXT_SPORT['cricket']['58'] = 'Tras<br />dÃ­a 2';
TXT_SPORT['cricket']['59'] = 'Tras<br />dÃ­a 3';
TXT_SPORT['cricket']['60'] = 'Tras<br />dÃ­a 4';
TXT_SPORT['cricket']['61'] = 'Tras<br />dÃ­a 5';
TXT_SPORT['cricket']['46'] = 'Descanso';
TXT_SPORT['cricket']['3'] = 'Finalizado';
TXT_SPORT['cricket']['9'] = 'Walkover';
TXT_SPORT['cricket']['43'] = 'Retrasado';
TXT_SPORT['cricket']['36'] = 'Interrumpido';
TXT_SPORT['cricket']['4'] = 'Aplazado';
TXT_SPORT['cricket']['5'] = 'Anulado';
TXT_SPORT['cricket']['37'] = 'Suspendido';
TXT_SPORT['cricket']['54'] = 'Por perdido';
TXT_SPORT['cricket']['333'] = 'Lunch';
TXT_SPORT['cricket']['334'] = 'Tea';
TXT_SPORT['darts'] = new Array();
TXT_SPORT['darts']['name'] = 'Dardos';
TXT_SPORT['darts']['1'] = '&nbsp;';
TXT_SPORT['darts']['45'] = 'Por terminar';
TXT_SPORT['darts']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['darts']['2'] = 'En directo';
TXT_SPORT['darts']['17'] = '1er Set';
TXT_SPORT['darts']['18'] = '2Âº Set';
TXT_SPORT['darts']['19'] = '3er Set';
TXT_SPORT['darts']['20'] = '4Âº Set';
TXT_SPORT['darts']['21'] = '5Âº Set';
TXT_SPORT['darts']['55'] = '6Âº Set';
TXT_SPORT['darts']['56'] = '7Âº Set';
TXT_SPORT['darts']['324'] = '8Âº Set';
TXT_SPORT['darts']['325'] = '9Âº Set';
TXT_SPORT['darts']['326'] = '10Âº Set';
TXT_SPORT['darts']['327'] = '11Âº Set';
TXT_SPORT['darts']['328'] = '12Âº Set';
TXT_SPORT['darts']['329'] = '13Âº Set';
TXT_SPORT['darts']['46'] = 'Descanso';
TXT_SPORT['darts']['3'] = 'Finalizado';
TXT_SPORT['darts']['9'] = 'Walkover';
TXT_SPORT['darts']['43'] = 'Retrasado';
TXT_SPORT['darts']['36'] = 'Interrumpido';
TXT_SPORT['darts']['4'] = 'Aplazado';
TXT_SPORT['darts']['5'] = 'Anulado';
TXT_SPORT['darts']['37'] = 'Suspendido';
TXT_SPORT['darts']['54'] = 'Por perdido';
TXT_SPORT['snooker'] = new Array();
TXT_SPORT['snooker']['name'] = 'Snooker';
TXT_SPORT['snooker']['1'] = '&nbsp;';
TXT_SPORT['snooker']['45'] = 'Por terminar';
TXT_SPORT['snooker']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['snooker']['2'] = 'En directo';
TXT_SPORT['snooker']['46'] = 'Descanso';
TXT_SPORT['snooker']['3'] = 'Finalizado';
TXT_SPORT['snooker']['9'] = 'Walkover';
TXT_SPORT['snooker']['43'] = 'Retrasado';
TXT_SPORT['snooker']['36'] = 'Interrumpido';
TXT_SPORT['snooker']['4'] = 'Aplazado';
TXT_SPORT['snooker']['5'] = 'Anulado';
TXT_SPORT['snooker']['37'] = 'Suspendido';
TXT_SPORT['snooker']['54'] = 'Por perdido';
TXT_SPORT['boxing'] = new Array();
TXT_SPORT['boxing']['name'] = 'Boxeo';
TXT_SPORT['boxing']['1'] = '&nbsp;';
TXT_SPORT['boxing']['45'] = 'Por terminar';
TXT_SPORT['boxing']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['boxing']['2'] = 'En directo';
TXT_SPORT['boxing']['46'] = 'Descanso';
TXT_SPORT['boxing']['3'] = 'Finalizado';
TXT_SPORT['boxing']['9'] = 'Walkover';
TXT_SPORT['boxing']['43'] = 'Retrasado';
TXT_SPORT['boxing']['36'] = 'Interrumpido';
TXT_SPORT['boxing']['4'] = 'Aplazado';
TXT_SPORT['boxing']['5'] = 'Anulado';
TXT_SPORT['boxing']['37'] = 'Suspendido';
TXT_SPORT['boxing']['54'] = 'Por perdido';
TXT_SPORT['beach-volleyball'] = new Array();
TXT_SPORT['beach-volleyball']['name'] = 'Voley Playa';
TXT_SPORT['beach-volleyball']['1'] = '&nbsp;';
TXT_SPORT['beach-volleyball']['45'] = 'Por terminar';
TXT_SPORT['beach-volleyball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['beach-volleyball']['2'] = 'En directo';
TXT_SPORT['beach-volleyball']['17'] = '1er Set';
TXT_SPORT['beach-volleyball']['18'] = '2Âº Set';
TXT_SPORT['beach-volleyball']['19'] = '3er Set';
TXT_SPORT['beach-volleyball']['20'] = '4Âº Set';
TXT_SPORT['beach-volleyball']['21'] = '5Âº Set';
TXT_SPORT['beach-volleyball']['46'] = 'Descanso';
TXT_SPORT['beach-volleyball']['3'] = 'Finalizado';
TXT_SPORT['beach-volleyball']['8'] = 'Finalizado<br />(retirada)';
TXT_SPORT['beach-volleyball']['9'] = 'Walkover';
TXT_SPORT['beach-volleyball']['43'] = 'Retrasado';
TXT_SPORT['beach-volleyball']['36'] = 'Interrumpido';
TXT_SPORT['beach-volleyball']['4'] = 'Aplazado';
TXT_SPORT['beach-volleyball']['5'] = 'Anulado';
TXT_SPORT['beach-volleyball']['37'] = 'Suspendido';
TXT_SPORT['beach-volleyball']['54'] = 'Por perdido';
TXT_SPORT['aussie-rules'] = new Array();
TXT_SPORT['aussie-rules']['name'] = 'FÃºtbol Australiano';
TXT_SPORT['aussie-rules']['1'] = '&nbsp;';
TXT_SPORT['aussie-rules']['45'] = 'Por terminar';
TXT_SPORT['aussie-rules']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['aussie-rules']['2'] = 'En directo';
TXT_SPORT['aussie-rules']['22'] = '1er Cuarto';
TXT_SPORT['aussie-rules']['23'] = '2Âº Cuarto';
TXT_SPORT['aussie-rules']['24'] = '3er Cuarto';
TXT_SPORT['aussie-rules']['25'] = '4Âº Cuarto';
TXT_SPORT['aussie-rules']['6'] = 'PrÃ³rroga';
TXT_SPORT['aussie-rules']['38'] = 'Descanso';
TXT_SPORT['aussie-rules']['46'] = 'Descanso';
TXT_SPORT['aussie-rules']['3'] = 'Finalizado';
TXT_SPORT['aussie-rules']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['aussie-rules']['9'] = 'Walkover';
TXT_SPORT['aussie-rules']['43'] = 'Retrasado';
TXT_SPORT['aussie-rules']['36'] = 'Interrumpido';
TXT_SPORT['aussie-rules']['4'] = 'Aplazado';
TXT_SPORT['aussie-rules']['5'] = 'Anulado';
TXT_SPORT['aussie-rules']['37'] = 'Suspendido';
TXT_SPORT['aussie-rules']['54'] = 'Por perdido';
TXT_SPORT['rugby-league'] = new Array();
TXT_SPORT['rugby-league']['name'] = 'Rugby League';
TXT_SPORT['rugby-league']['1'] = '&nbsp;';
TXT_SPORT['rugby-league']['45'] = 'Por terminar';
TXT_SPORT['rugby-league']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['rugby-league']['2'] = 'En directo';
TXT_SPORT['rugby-league']['12'] = '1er Tiempo';
TXT_SPORT['rugby-league']['38'] = 'Descanso';
TXT_SPORT['rugby-league']['13'] = '2Âº Tiempo';
TXT_SPORT['rugby-league']['6'] = 'PrÃ³rroga';
TXT_SPORT['rugby-league']['7'] = 'Penaltis';
TXT_SPORT['rugby-league']['46'] = 'Descanso';
TXT_SPORT['rugby-league']['3'] = 'Finalizado';
TXT_SPORT['rugby-league']['10'] = 'Tras la<br />prÃ³rroga';
TXT_SPORT['rugby-league']['11'] = 'Tras los<br />penaltis';
TXT_SPORT['rugby-league']['9'] = 'Walkover';
TXT_SPORT['rugby-league']['43'] = 'Retrasado';
TXT_SPORT['rugby-league']['36'] = 'Interrumpido';
TXT_SPORT['rugby-league']['4'] = 'Aplazado';
TXT_SPORT['rugby-league']['5'] = 'Anulado';
TXT_SPORT['rugby-league']['37'] = 'Suspendido';
TXT_SPORT['rugby-league']['54'] = 'Por perdido';
TXT_SPORT['badminton'] = new Array();
TXT_SPORT['badminton']['name'] = 'BÃ¡dminton';
TXT_SPORT['badminton']['1'] = '&nbsp;';
TXT_SPORT['badminton']['45'] = 'Por terminar';
TXT_SPORT['badminton']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['badminton']['2'] = 'En directo';
TXT_SPORT['badminton']['17'] = '1er Set';
TXT_SPORT['badminton']['18'] = '2Âº Set';
TXT_SPORT['badminton']['19'] = '3er Set';
TXT_SPORT['badminton']['46'] = 'Descanso';
TXT_SPORT['badminton']['3'] = 'Finalizado';
TXT_SPORT['badminton']['8'] = 'Finalizado<br />(retirada)';
TXT_SPORT['badminton']['9'] = 'Walkover';
TXT_SPORT['badminton']['43'] = 'Retrasado';
TXT_SPORT['badminton']['36'] = 'Interrumpido';
TXT_SPORT['badminton']['4'] = 'Aplazado';
TXT_SPORT['badminton']['5'] = 'Anulado';
TXT_SPORT['badminton']['37'] = 'Suspendido';
TXT_SPORT['badminton']['54'] = 'Por perdido';
TXT_SPORT['water-polo'] = new Array();
TXT_SPORT['water-polo']['name'] = 'Waterpolo';
TXT_SPORT['water-polo']['1'] = '&nbsp;';
TXT_SPORT['water-polo']['45'] = 'Por terminar';
TXT_SPORT['water-polo']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['water-polo']['2'] = 'En directo';
TXT_SPORT['water-polo']['22'] = '1er Cuarto';
TXT_SPORT['water-polo']['23'] = '2Âº Cuarto';
TXT_SPORT['water-polo']['24'] = '3er Cuarto';
TXT_SPORT['water-polo']['25'] = '4Âº Cuarto';
TXT_SPORT['water-polo']['6'] = 'PrÃ³rroga';
TXT_SPORT['water-polo']['7'] = 'Penaltis';
TXT_SPORT['water-polo']['38'] = 'Descanso';
TXT_SPORT['water-polo']['46'] = 'Descanso';
TXT_SPORT['water-polo']['3'] = 'Finalizado';
TXT_SPORT['water-polo']['10'] = 'Tras la<br />prÃ³rroga';
TXT_SPORT['water-polo']['11'] = 'Tras los<br />penaltis';
TXT_SPORT['water-polo']['9'] = 'Walkover';
TXT_SPORT['water-polo']['43'] = 'Retrasado';
TXT_SPORT['water-polo']['36'] = 'Interrumpido';
TXT_SPORT['water-polo']['4'] = 'Aplazado';
TXT_SPORT['water-polo']['5'] = 'Anulado';
TXT_SPORT['water-polo']['37'] = 'Suspendido';
TXT_SPORT['water-polo']['54'] = 'Por perdido';
TXT_SPORT['golf'] = new Array();
TXT_SPORT['golf']['name'] = 'Golf';
TXT_SPORT['golf']['1'] = '&nbsp;';
TXT_SPORT['golf']['45'] = 'Por terminar';
TXT_SPORT['golf']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['golf']['2'] = 'En directo';
TXT_SPORT['golf']['65'] = 'Vuelta 1';
TXT_SPORT['golf']['66'] = 'Vuelta 2';
TXT_SPORT['golf']['67'] = 'Vuelta 3';
TXT_SPORT['golf']['68'] = 'Vuelta 4';
TXT_SPORT['golf']['62'] = 'Tras<br />vuelta 1';
TXT_SPORT['golf']['63'] = 'Tras<br />vuelta 2';
TXT_SPORT['golf']['64'] = 'Tras<br />vuelta 3';
TXT_SPORT['golf']['46'] = 'Descanso';
TXT_SPORT['golf']['3'] = 'Finalizado';
TXT_SPORT['golf']['8'] = 'Finalizado<br />(retirada)';
TXT_SPORT['golf']['9'] = 'Walkover';
TXT_SPORT['golf']['43'] = 'Retrasado';
TXT_SPORT['golf']['36'] = 'Interrumpido';
TXT_SPORT['golf']['4'] = 'Aplazado';
TXT_SPORT['golf']['5'] = 'Anulado';
TXT_SPORT['golf']['37'] = 'Suspendido';
TXT_SPORT['golf']['54'] = 'Por perdido';
TXT_SPORT['field-hockey'] = new Array();
TXT_SPORT['field-hockey']['name'] = 'Hockey hierba';
TXT_SPORT['field-hockey']['1'] = '&nbsp;';
TXT_SPORT['field-hockey']['45'] = 'Por terminar';
TXT_SPORT['field-hockey']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['field-hockey']['2'] = 'En directo';
TXT_SPORT['field-hockey']['12'] = '1er Tiempo';
TXT_SPORT['field-hockey']['38'] = 'Descanso';
TXT_SPORT['field-hockey']['13'] = '2Âº Tiempo';
TXT_SPORT['field-hockey']['6'] = 'PrÃ³rroga';
TXT_SPORT['field-hockey']['7'] = 'Penaltis';
TXT_SPORT['field-hockey']['46'] = 'Descanso';
TXT_SPORT['field-hockey']['3'] = 'Finalizado';
TXT_SPORT['field-hockey']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['field-hockey']['11'] = 'Tras los penaltis';
TXT_SPORT['field-hockey']['9'] = 'Walkover';
TXT_SPORT['field-hockey']['43'] = 'Retrasado';
TXT_SPORT['field-hockey']['36'] = 'Interrumpido';
TXT_SPORT['field-hockey']['4'] = 'Aplazado';
TXT_SPORT['field-hockey']['5'] = 'Anulado';
TXT_SPORT['field-hockey']['37'] = 'Suspendido';
TXT_SPORT['field-hockey']['54'] = 'Por perdido';
TXT_SPORT['table-tennis'] = new Array();
TXT_SPORT['table-tennis']['name'] = 'Tenis de mesa';
TXT_SPORT['table-tennis']['1'] = '&nbsp;';
TXT_SPORT['table-tennis']['45'] = 'Por terminar';
TXT_SPORT['table-tennis']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['table-tennis']['2'] = 'En directo';
TXT_SPORT['table-tennis']['17'] = '1er Set';
TXT_SPORT['table-tennis']['18'] = '2Âº Set';
TXT_SPORT['table-tennis']['19'] = '3er Set';
TXT_SPORT['table-tennis']['20'] = '4Âº Set';
TXT_SPORT['table-tennis']['21'] = '5Âº Set';
TXT_SPORT['table-tennis']['55'] = '6Âº Set';
TXT_SPORT['table-tennis']['56'] = '7Âº Set';
TXT_SPORT['table-tennis']['46'] = 'Descanso';
TXT_SPORT['table-tennis']['3'] = 'Finalizado';
TXT_SPORT['table-tennis']['8'] = 'Finalizado<br />(retirada)';
TXT_SPORT['table-tennis']['9'] = 'Walkover';
TXT_SPORT['table-tennis']['43'] = 'Retrasado';
TXT_SPORT['table-tennis']['36'] = 'Interrumpido';
TXT_SPORT['table-tennis']['4'] = 'Aplazado';
TXT_SPORT['table-tennis']['5'] = 'Anulado';
TXT_SPORT['table-tennis']['37'] = 'Suspendido';
TXT_SPORT['table-tennis']['54'] = 'Por perdido';
TXT_SPORT['beach-soccer'] = new Array();
TXT_SPORT['beach-soccer']['name'] = 'FÃºtbol playa';
TXT_SPORT['beach-soccer']['1'] = '&nbsp;';
TXT_SPORT['beach-soccer']['45'] = 'Por terminar';
TXT_SPORT['beach-soccer']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['beach-soccer']['2'] = 'En directo';
TXT_SPORT['beach-soccer']['14'] = '1er Periodo';
TXT_SPORT['beach-soccer']['15'] = '2Âº Periodo';
TXT_SPORT['beach-soccer']['16'] = '3er Periodo';
TXT_SPORT['beach-soccer']['6'] = 'PrÃ³rroga';
TXT_SPORT['beach-soccer']['7'] = 'Penaltis';
TXT_SPORT['beach-soccer']['46'] = 'Descanso';
TXT_SPORT['beach-soccer']['3'] = 'Finalizado';
TXT_SPORT['beach-soccer']['10'] = 'Tras la<br />prÃ³rroga';
TXT_SPORT['beach-soccer']['11'] = 'Tras los<br />penaltis';
TXT_SPORT['beach-soccer']['9'] = 'Walkover';
TXT_SPORT['beach-soccer']['43'] = 'Retrasado';
TXT_SPORT['beach-soccer']['36'] = 'Interrumpido';
TXT_SPORT['beach-soccer']['4'] = 'Aplazado';
TXT_SPORT['beach-soccer']['5'] = 'Anulado';
TXT_SPORT['beach-soccer']['37'] = 'Suspendido';
TXT_SPORT['beach-soccer']['54'] = 'Por perdido';
TXT_SPORT['mma'] = new Array();
TXT_SPORT['mma']['name'] = 'MMA';
TXT_SPORT['mma']['1'] = '&nbsp;';
TXT_SPORT['mma']['45'] = 'Por terminar';
TXT_SPORT['mma']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['mma']['2'] = 'En directo';
TXT_SPORT['mma']['46'] = 'Descanso';
TXT_SPORT['mma']['3'] = 'Finalizado';
TXT_SPORT['mma']['9'] = 'Walkover';
TXT_SPORT['mma']['43'] = 'Retrasado';
TXT_SPORT['mma']['36'] = 'Interrumpido';
TXT_SPORT['mma']['4'] = 'Aplazado';
TXT_SPORT['mma']['5'] = 'Anulado';
TXT_SPORT['mma']['37'] = 'Suspendido';
TXT_SPORT['mma']['54'] = 'Por perdido';
TXT_SPORT['netball'] = new Array();
TXT_SPORT['netball']['name'] = 'Netball';
TXT_SPORT['netball']['1'] = '&nbsp;';
TXT_SPORT['netball']['45'] = 'Por terminar';
TXT_SPORT['netball']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['netball']['2'] = 'En directo';
TXT_SPORT['netball']['22'] = '1er Cuarto';
TXT_SPORT['netball']['23'] = '2Âº Cuarto';
TXT_SPORT['netball']['24'] = '3er Cuarto';
TXT_SPORT['netball']['25'] = '4Âº Cuarto';
TXT_SPORT['netball']['6'] = 'PrÃ³rroga';
TXT_SPORT['netball']['38'] = 'Descanso';
TXT_SPORT['netball']['46'] = 'Descanso';
TXT_SPORT['netball']['3'] = 'Finalizado';
TXT_SPORT['netball']['10'] = 'Tras la prÃ³rroga';
TXT_SPORT['netball']['9'] = 'Walkover';
TXT_SPORT['netball']['43'] = 'Retrasado';
TXT_SPORT['netball']['36'] = 'Interrumpido';
TXT_SPORT['netball']['4'] = 'Aplazado';
TXT_SPORT['netball']['5'] = 'Anulado';
TXT_SPORT['netball']['37'] = 'Suspendido';
TXT_SPORT['netball']['54'] = 'Por perdido';
TXT_SPORT['pesapallo'] = new Array();
TXT_SPORT['pesapallo']['name'] = 'PesÃ¤pallo';
TXT_SPORT['pesapallo']['1'] = '&nbsp;';
TXT_SPORT['pesapallo']['45'] = 'Por terminar';
TXT_SPORT['pesapallo']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['pesapallo']['2'] = 'En directo';
TXT_SPORT['pesapallo']['26'] = '1a Entrada';
TXT_SPORT['pesapallo']['27'] = '2a Entrada';
TXT_SPORT['pesapallo']['28'] = '3a Entrada';
TXT_SPORT['pesapallo']['29'] = '4a Entrada';
TXT_SPORT['pesapallo']['30'] = '5a Entrada';
TXT_SPORT['pesapallo']['31'] = '6a Entrada';
TXT_SPORT['pesapallo']['32'] = '7a Entrada';
TXT_SPORT['pesapallo']['33'] = '8a Entrada';
TXT_SPORT['pesapallo']['35'] = 'Entrada Extra';
TXT_SPORT['pesapallo']['7'] = 'Penaltis';
TXT_SPORT['pesapallo']['46'] = 'Descanso';
TXT_SPORT['pesapallo']['3'] = 'Finalizado';
TXT_SPORT['pesapallo']['69'] = 'Tras EE';
TXT_SPORT['pesapallo']['11'] = 'Tras penaltis';
TXT_SPORT['pesapallo']['9'] = 'Walkover';
TXT_SPORT['pesapallo']['43'] = 'Retrasado';
TXT_SPORT['pesapallo']['36'] = 'Interrumpido';
TXT_SPORT['pesapallo']['4'] = 'Aplazado';
TXT_SPORT['pesapallo']['5'] = 'Anulado';
TXT_SPORT['pesapallo']['37'] = 'Suspendido';
TXT_SPORT['pesapallo']['54'] = 'Por perdido';
TXT_SPORT['motorsport'] = new Array();
TXT_SPORT['motorsport']['name'] = 'Motor';
TXT_SPORT['motorsport-auto-racing'] = new Array();
TXT_SPORT['motorsport-auto-racing']['name'] = 'Automovilismo';
TXT_SPORT['motorsport-auto-racing']['1'] = '&nbsp;';
TXT_SPORT['motorsport-auto-racing']['2'] = 'En directo';
TXT_SPORT['motorsport-auto-racing']['3'] = 'Finalizado';
TXT_SPORT['motorsport-auto-racing']['4'] = 'Aplazado';
TXT_SPORT['motorsport-auto-racing']['5'] = 'Anulado';
TXT_SPORT['motorsport-auto-racing']['36'] = 'Interrumpido';
TXT_SPORT['motorsport-auto-racing']['37'] = 'Suspendido';
TXT_SPORT['motorsport-auto-racing']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['motorsport-auto-racing']['43'] = 'Retrasado';
TXT_SPORT['motorsport-moto-racing'] = new Array();
TXT_SPORT['motorsport-moto-racing']['name'] = 'Motociclismo';
TXT_SPORT['motorsport-moto-racing']['1'] = '&nbsp;';
TXT_SPORT['motorsport-moto-racing']['2'] = 'En directo';
TXT_SPORT['motorsport-moto-racing']['3'] = 'Finalizado';
TXT_SPORT['motorsport-moto-racing']['4'] = 'Aplazado';
TXT_SPORT['motorsport-moto-racing']['5'] = 'Anulado';
TXT_SPORT['motorsport-moto-racing']['36'] = 'Interrumpido';
TXT_SPORT['motorsport-moto-racing']['37'] = 'Suspendido';
TXT_SPORT['motorsport-moto-racing']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['motorsport-moto-racing']['43'] = 'Retrasado';
TXT_SPORT['cycling'] = new Array();
TXT_SPORT['cycling']['name'] = 'Ciclismo';
TXT_SPORT['cycling']['1'] = '&nbsp;';
TXT_SPORT['cycling']['2'] = 'En directo';
TXT_SPORT['cycling']['3'] = 'Finalizado';
TXT_SPORT['cycling']['4'] = 'Aplazado';
TXT_SPORT['cycling']['5'] = 'Anulado';
TXT_SPORT['cycling']['36'] = 'Interrumpido';
TXT_SPORT['cycling']['37'] = 'Suspendido';
TXT_SPORT['cycling']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['cycling']['43'] = 'Retrasado';
TXT_SPORT['horse-racing'] = new Array();
TXT_SPORT['horse-racing']['name'] = 'Carreras de caballos';
TXT_SPORT['horse-racing']['1'] = '&nbsp;';
TXT_SPORT['horse-racing']['2'] = 'En directo';
TXT_SPORT['horse-racing']['3'] = 'Finalizado';
TXT_SPORT['horse-racing']['4'] = 'Aplazado';
TXT_SPORT['horse-racing']['5'] = 'Anulado';
TXT_SPORT['horse-racing']['36'] = 'Interrumpido';
TXT_SPORT['horse-racing']['37'] = 'Suspendido';
TXT_SPORT['horse-racing']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['horse-racing']['43'] = 'Retrasado';
TXT_SPORT['esports'] = new Array();
TXT_SPORT['esports']['name'] = 'eSports';
TXT_SPORT['esports']['1'] = '&nbsp;';
TXT_SPORT['esports']['2'] = 'En directo';
TXT_SPORT['esports']['3'] = 'Finalizado';
TXT_SPORT['esports']['4'] = 'Aplazado';
TXT_SPORT['esports']['5'] = 'Anulado';
TXT_SPORT['esports']['36'] = 'Interrumpido';
TXT_SPORT['esports']['37'] = 'Suspendido';
TXT_SPORT['esports']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['esports']['43'] = 'Retrasado';
TXT_SPORT['esports']['54'] = 'Por perdido';
TXT_SPORT['esports']['9'] = 'Walkover';
TXT_SPORT['esports']['45'] = 'Por terminar';
TXT_SPORT['winter-sports'] = new Array();
TXT_SPORT['winter-sports']['name'] = 'Deportes de invierno';
TXT_SPORT['winter-sports-ski-jumping'] = new Array();
TXT_SPORT['winter-sports-ski-jumping']['name'] = 'Salto de esquÃ­';
TXT_SPORT['winter-sports-ski-jumping']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-ski-jumping']['2'] = 'En directo';
TXT_SPORT['winter-sports-ski-jumping']['3'] = 'Finalizado';
TXT_SPORT['winter-sports-ski-jumping']['4'] = 'Aplazado';
TXT_SPORT['winter-sports-ski-jumping']['5'] = 'Anulado';
TXT_SPORT['winter-sports-ski-jumping']['36'] = 'Interrumpido';
TXT_SPORT['winter-sports-ski-jumping']['37'] = 'Suspendido';
TXT_SPORT['winter-sports-ski-jumping']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['winter-sports-ski-jumping']['43'] = 'Retrasado';
TXT_SPORT['winter-sports-alpine-skiing'] = new Array();
TXT_SPORT['winter-sports-alpine-skiing']['name'] = 'EsquÃ­ alpino';
TXT_SPORT['winter-sports-alpine-skiing']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-alpine-skiing']['2'] = 'En directo';
TXT_SPORT['winter-sports-alpine-skiing']['3'] = 'Finalizado';
TXT_SPORT['winter-sports-alpine-skiing']['4'] = 'Aplazado';
TXT_SPORT['winter-sports-alpine-skiing']['5'] = 'Anulado';
TXT_SPORT['winter-sports-alpine-skiing']['36'] = 'Interrumpido';
TXT_SPORT['winter-sports-alpine-skiing']['37'] = 'Suspendido';
TXT_SPORT['winter-sports-alpine-skiing']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['winter-sports-alpine-skiing']['43'] = 'Retrasado';
TXT_SPORT['winter-sports-cross-country'] = new Array();
TXT_SPORT['winter-sports-cross-country']['name'] = 'EsquÃ­ de fondo';
TXT_SPORT['winter-sports-cross-country']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-cross-country']['2'] = 'En directo';
TXT_SPORT['winter-sports-cross-country']['3'] = 'Finalizado';
TXT_SPORT['winter-sports-cross-country']['4'] = 'Aplazado';
TXT_SPORT['winter-sports-cross-country']['5'] = 'Anulado';
TXT_SPORT['winter-sports-cross-country']['36'] = 'Interrumpido';
TXT_SPORT['winter-sports-cross-country']['37'] = 'Suspendido';
TXT_SPORT['winter-sports-cross-country']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['winter-sports-cross-country']['43'] = 'Retrasado';
TXT_SPORT['winter-sports-biathlon'] = new Array();
TXT_SPORT['winter-sports-biathlon']['name'] = 'BiatlÃ³n';
TXT_SPORT['winter-sports-biathlon']['1'] = '&nbsp;';
TXT_SPORT['winter-sports-biathlon']['2'] = 'En directo';
TXT_SPORT['winter-sports-biathlon']['3'] = 'Finalizado';
TXT_SPORT['winter-sports-biathlon']['4'] = 'Aplazado';
TXT_SPORT['winter-sports-biathlon']['5'] = 'Anulado';
TXT_SPORT['winter-sports-biathlon']['36'] = 'Interrumpido';
TXT_SPORT['winter-sports-biathlon']['37'] = 'Suspendido';
TXT_SPORT['winter-sports-biathlon']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['winter-sports-biathlon']['43'] = 'Retrasado';
TXT_SPORT['kabaddi'] = new Array();
TXT_SPORT['kabaddi']['name'] = 'Kabaddi';
TXT_SPORT['kabaddi']['1'] = '&nbsp;';
TXT_SPORT['kabaddi']['45'] = 'Por terminar';
TXT_SPORT['kabaddi']['42'] = 'En espera de<br />actualizaciones';
TXT_SPORT['kabaddi']['2'] = 'En directo';
TXT_SPORT['kabaddi']['12'] = '1er Tiempo';
TXT_SPORT['kabaddi']['38'] = 'Descanso';
TXT_SPORT['kabaddi']['13'] = '2Âº Tiempo';
TXT_SPORT['kabaddi']['6'] = 'Extra Time';
TXT_SPORT['kabaddi']['46'] = 'Descanso';
TXT_SPORT['kabaddi']['3'] = 'Finalizado';
TXT_SPORT['kabaddi']['10'] = 'After ET';
TXT_SPORT['kabaddi']['9'] = 'Walkover';
TXT_SPORT['kabaddi']['43'] = 'Retrasado';
TXT_SPORT['kabaddi']['36'] = 'Interrumpido';
TXT_SPORT['kabaddi']['4'] = 'Aplazado';
TXT_SPORT['kabaddi']['5'] = 'Anulado';
TXT_SPORT['kabaddi']['37'] = 'Suspendido';
TXT_SPORT['kabaddi']['54'] = 'Por perdido';
// text strings
var TXT_SPORT_MOBILE = new Array();
TXT_SPORT_MOBILE['soccer'] = new Array();
TXT_SPORT_MOBILE['soccer']['name'] = 'FÃºtbol';
TXT_SPORT_MOBILE['soccer']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['soccer']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['soccer']['42'] = 'Esper.';
TXT_SPORT_MOBILE['soccer']['2'] = 'En directo';
TXT_SPORT_MOBILE['soccer']['12'] = 'T1';
TXT_SPORT_MOBILE['soccer']['13'] = 'T2';
TXT_SPORT_MOBILE['soccer']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['soccer']['7'] = 'Pen.';
TXT_SPORT_MOBILE['soccer']['38'] = 'Descanso';
TXT_SPORT_MOBILE['soccer']['46'] = 'Descanso';
TXT_SPORT_MOBILE['soccer']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['soccer']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['soccer']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['soccer']['9'] = 'WO';
TXT_SPORT_MOBILE['soccer']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['soccer']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['soccer']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['soccer']['5'] = 'Anulado';
TXT_SPORT_MOBILE['soccer']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['soccer']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['tennis'] = new Array();
TXT_SPORT_MOBILE['tennis']['name'] = 'Tenis';
TXT_SPORT_MOBILE['tennis']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['tennis']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['tennis']['42'] = 'Esper.';
TXT_SPORT_MOBILE['tennis']['2'] = 'En directo';
TXT_SPORT_MOBILE['tennis']['17'] = 'S1';
TXT_SPORT_MOBILE['tennis']['18'] = 'S2';
TXT_SPORT_MOBILE['tennis']['19'] = 'S3';
TXT_SPORT_MOBILE['tennis']['20'] = 'S4';
TXT_SPORT_MOBILE['tennis']['21'] = 'S5';
TXT_SPORT_MOBILE['tennis']['47'] = 'S1/TB';
TXT_SPORT_MOBILE['tennis']['48'] = 'S2/TB';
TXT_SPORT_MOBILE['tennis']['49'] = 'S3/TB';
TXT_SPORT_MOBILE['tennis']['50'] = 'S4/TB';
TXT_SPORT_MOBILE['tennis']['51'] = 'S5/TB';
TXT_SPORT_MOBILE['tennis']['46'] = 'Descanso';
TXT_SPORT_MOBILE['tennis']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['tennis']['8'] = 'Retirada';
TXT_SPORT_MOBILE['tennis']['9'] = 'WO';
TXT_SPORT_MOBILE['tennis']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['tennis']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['tennis']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['tennis']['5'] = 'Anulado';
TXT_SPORT_MOBILE['tennis']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['tennis']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['tennis']['57'] = 'Tras<br />D1';
TXT_SPORT_MOBILE['tennis']['58'] = 'Tras<br />D2';
TXT_SPORT_MOBILE['tennis']['335'] = 'MÃ©dico';
TXT_SPORT_MOBILE['basketball'] = new Array();
TXT_SPORT_MOBILE['basketball']['name'] = 'Baloncesto';
TXT_SPORT_MOBILE['basketball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['basketball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['basketball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['basketball']['2'] = 'En directo';
TXT_SPORT_MOBILE['basketball']['22'] = 'C1';
TXT_SPORT_MOBILE['basketball']['23'] = 'C2';
TXT_SPORT_MOBILE['basketball']['24'] = 'C3';
TXT_SPORT_MOBILE['basketball']['25'] = 'C4';
TXT_SPORT_MOBILE['basketball']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['basketball']['38'] = 'Descanso';
TXT_SPORT_MOBILE['basketball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['basketball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['basketball']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['basketball']['9'] = 'WO';
TXT_SPORT_MOBILE['basketball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['basketball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['basketball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['basketball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['basketball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['basketball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['hockey'] = new Array();
TXT_SPORT_MOBILE['hockey']['name'] = 'Hockey';
TXT_SPORT_MOBILE['hockey']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['hockey']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['hockey']['42'] = 'Esper.';
TXT_SPORT_MOBILE['hockey']['2'] = 'En directo';
TXT_SPORT_MOBILE['hockey']['14'] = 'P1';
TXT_SPORT_MOBILE['hockey']['15'] = 'P2';
TXT_SPORT_MOBILE['hockey']['16'] = 'P3';
TXT_SPORT_MOBILE['hockey']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['hockey']['7'] = 'Pen.';
TXT_SPORT_MOBILE['hockey']['46'] = 'Descanso';
TXT_SPORT_MOBILE['hockey']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['hockey']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['hockey']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['hockey']['9'] = 'WO';
TXT_SPORT_MOBILE['hockey']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['hockey']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['hockey']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['hockey']['5'] = 'Anulado';
TXT_SPORT_MOBILE['hockey']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['hockey']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['american-football'] = new Array();
TXT_SPORT_MOBILE['american-football']['name'] = 'FÃºtbol Americano';
TXT_SPORT_MOBILE['american-football']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['american-football']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['american-football']['42'] = 'Esper.';
TXT_SPORT_MOBILE['american-football']['2'] = 'En directo';
TXT_SPORT_MOBILE['american-football']['22'] = 'C1';
TXT_SPORT_MOBILE['american-football']['23'] = 'C2';
TXT_SPORT_MOBILE['american-football']['24'] = 'C3';
TXT_SPORT_MOBILE['american-football']['25'] = 'C4';
TXT_SPORT_MOBILE['american-football']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['american-football']['38'] = 'Descanso';
TXT_SPORT_MOBILE['american-football']['46'] = 'Descanso';
TXT_SPORT_MOBILE['american-football']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['american-football']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['american-football']['9'] = 'WO';
TXT_SPORT_MOBILE['american-football']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['american-football']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['american-football']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['american-football']['5'] = 'Anulado';
TXT_SPORT_MOBILE['american-football']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['american-football']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['baseball'] = new Array();
TXT_SPORT_MOBILE['baseball']['name'] = 'BÃ©isbol';
TXT_SPORT_MOBILE['baseball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['baseball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['baseball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['baseball']['2'] = 'En directo';
TXT_SPORT_MOBILE['baseball']['26'] = 'E1';
TXT_SPORT_MOBILE['baseball']['27'] = 'E2';
TXT_SPORT_MOBILE['baseball']['28'] = 'E3';
TXT_SPORT_MOBILE['baseball']['29'] = 'E4';
TXT_SPORT_MOBILE['baseball']['30'] = 'E5';
TXT_SPORT_MOBILE['baseball']['31'] = 'E6';
TXT_SPORT_MOBILE['baseball']['32'] = 'E7';
TXT_SPORT_MOBILE['baseball']['33'] = 'E8';
TXT_SPORT_MOBILE['baseball']['34'] = 'E9';
TXT_SPORT_MOBILE['baseball']['35'] = 'EE';
TXT_SPORT_MOBILE['baseball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['baseball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['baseball']['9'] = 'WO';
TXT_SPORT_MOBILE['baseball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['baseball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['baseball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['baseball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['baseball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['baseball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['handball'] = new Array();
TXT_SPORT_MOBILE['handball']['name'] = 'Balonmano';
TXT_SPORT_MOBILE['handball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['handball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['handball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['handball']['2'] = 'En directo';
TXT_SPORT_MOBILE['handball']['12'] = 'T1';
TXT_SPORT_MOBILE['handball']['38'] = 'Descanso';
TXT_SPORT_MOBILE['handball']['13'] = 'T2';
TXT_SPORT_MOBILE['handball']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['handball']['7'] = 'Pen.';
TXT_SPORT_MOBILE['handball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['handball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['handball']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['handball']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['handball']['9'] = 'WO';
TXT_SPORT_MOBILE['handball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['handball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['handball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['handball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['handball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['handball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['rugby-union'] = new Array();
TXT_SPORT_MOBILE['rugby-union']['name'] = 'Rugby';
TXT_SPORT_MOBILE['rugby-union']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['rugby-union']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['rugby-union']['42'] = 'Esper.';
TXT_SPORT_MOBILE['rugby-union']['2'] = 'En directo';
TXT_SPORT_MOBILE['rugby-union']['12'] = 'T1';
TXT_SPORT_MOBILE['rugby-union']['38'] = 'Descanso';
TXT_SPORT_MOBILE['rugby-union']['13'] = 'T2';
TXT_SPORT_MOBILE['rugby-union']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['rugby-union']['7'] = 'Pen.';
TXT_SPORT_MOBILE['rugby-union']['46'] = 'Descanso';
TXT_SPORT_MOBILE['rugby-union']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['rugby-union']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['rugby-union']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['rugby-union']['9'] = 'WO';
TXT_SPORT_MOBILE['rugby-union']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['rugby-union']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['rugby-union']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['rugby-union']['5'] = 'Anulado';
TXT_SPORT_MOBILE['rugby-union']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['rugby-union']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['floorball'] = new Array();
TXT_SPORT_MOBILE['floorball']['name'] = 'Unihockey';
TXT_SPORT_MOBILE['floorball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['floorball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['floorball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['floorball']['2'] = 'En directo';
TXT_SPORT_MOBILE['floorball']['14'] = 'P1';
TXT_SPORT_MOBILE['floorball']['15'] = 'P2';
TXT_SPORT_MOBILE['floorball']['16'] = 'P3';
TXT_SPORT_MOBILE['floorball']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['floorball']['7'] = 'Pen.';
TXT_SPORT_MOBILE['floorball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['floorball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['floorball']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['floorball']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['floorball']['9'] = 'WO';
TXT_SPORT_MOBILE['floorball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['floorball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['floorball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['floorball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['floorball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['floorball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['bandy'] = new Array();
TXT_SPORT_MOBILE['bandy']['name'] = 'Bandy';
TXT_SPORT_MOBILE['bandy']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['bandy']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['bandy']['42'] = 'Esper.';
TXT_SPORT_MOBILE['bandy']['2'] = 'En directo';
TXT_SPORT_MOBILE['bandy']['12'] = 'T1';
TXT_SPORT_MOBILE['bandy']['38'] = 'Descanso';
TXT_SPORT_MOBILE['bandy']['13'] = 'T2';
TXT_SPORT_MOBILE['bandy']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['bandy']['7'] = 'Pen.';
TXT_SPORT_MOBILE['bandy']['46'] = 'Descanso';
TXT_SPORT_MOBILE['bandy']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['bandy']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['bandy']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['bandy']['9'] = 'WO';
TXT_SPORT_MOBILE['bandy']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['bandy']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['bandy']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['bandy']['5'] = 'Anulado';
TXT_SPORT_MOBILE['bandy']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['bandy']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['futsal'] = new Array();
TXT_SPORT_MOBILE['futsal']['name'] = 'FÃºtbol Sala';
TXT_SPORT_MOBILE['futsal']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['futsal']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['futsal']['42'] = 'Esper.';
TXT_SPORT_MOBILE['futsal']['2'] = 'En directo';
TXT_SPORT_MOBILE['futsal']['12'] = 'T1';
TXT_SPORT_MOBILE['futsal']['38'] = 'Descanso';
TXT_SPORT_MOBILE['futsal']['13'] = 'T2';
TXT_SPORT_MOBILE['futsal']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['futsal']['7'] = 'Pen.';
TXT_SPORT_MOBILE['futsal']['46'] = 'Descanso';
TXT_SPORT_MOBILE['futsal']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['futsal']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['futsal']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['futsal']['9'] = 'WO';
TXT_SPORT_MOBILE['futsal']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['futsal']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['futsal']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['futsal']['5'] = 'Anulado';
TXT_SPORT_MOBILE['futsal']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['futsal']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['volleyball'] = new Array();
TXT_SPORT_MOBILE['volleyball']['name'] = 'Voleibol';
TXT_SPORT_MOBILE['volleyball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['volleyball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['volleyball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['volleyball']['2'] = 'En directo';
TXT_SPORT_MOBILE['volleyball']['17'] = 'S1';
TXT_SPORT_MOBILE['volleyball']['18'] = 'S2';
TXT_SPORT_MOBILE['volleyball']['19'] = 'S3';
TXT_SPORT_MOBILE['volleyball']['20'] = 'S4';
TXT_SPORT_MOBILE['volleyball']['21'] = 'S5';
TXT_SPORT_MOBILE['volleyball']['55'] = 'S6';
TXT_SPORT_MOBILE['volleyball']['56'] = 'S7';
TXT_SPORT_MOBILE['volleyball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['volleyball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['volleyball']['9'] = 'WO';
TXT_SPORT_MOBILE['volleyball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['volleyball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['volleyball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['volleyball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['volleyball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['volleyball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['cricket'] = new Array();
TXT_SPORT_MOBILE['cricket']['name'] = 'Cricket';
TXT_SPORT_MOBILE['cricket']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['cricket']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['cricket']['42'] = 'Esper.';
TXT_SPORT_MOBILE['cricket']['2'] = 'En directo';
TXT_SPORT_MOBILE['cricket']['26'] = 'E1';
TXT_SPORT_MOBILE['cricket']['27'] = 'E2';
TXT_SPORT_MOBILE['cricket']['57'] = 'Tras<br />D1';
TXT_SPORT_MOBILE['cricket']['58'] = 'Tras<br />D2';
TXT_SPORT_MOBILE['cricket']['59'] = 'Tras<br />D3';
TXT_SPORT_MOBILE['cricket']['60'] = 'Tras<br />D4';
TXT_SPORT_MOBILE['cricket']['61'] = 'Tras<br />D5';
TXT_SPORT_MOBILE['cricket']['46'] = 'Descanso';
TXT_SPORT_MOBILE['cricket']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['cricket']['9'] = 'WO';
TXT_SPORT_MOBILE['cricket']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['cricket']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['cricket']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['cricket']['5'] = 'Anulado';
TXT_SPORT_MOBILE['cricket']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['cricket']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['cricket']['333'] = 'Lunch';
TXT_SPORT_MOBILE['cricket']['334'] = 'Tea';
TXT_SPORT_MOBILE['darts'] = new Array();
TXT_SPORT_MOBILE['darts']['name'] = 'Dardos';
TXT_SPORT_MOBILE['darts']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['darts']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['darts']['42'] = 'Esper.';
TXT_SPORT_MOBILE['darts']['2'] = 'En directo';
TXT_SPORT_MOBILE['darts']['17'] = 'S1';
TXT_SPORT_MOBILE['darts']['18'] = 'S2';
TXT_SPORT_MOBILE['darts']['19'] = 'S3';
TXT_SPORT_MOBILE['darts']['20'] = 'S4';
TXT_SPORT_MOBILE['darts']['21'] = 'S5';
TXT_SPORT_MOBILE['darts']['55'] = 'S6';
TXT_SPORT_MOBILE['darts']['56'] = 'S7';
TXT_SPORT_MOBILE['darts']['324'] = 'S8';
TXT_SPORT_MOBILE['darts']['325'] = 'S9';
TXT_SPORT_MOBILE['darts']['326'] = 'S10';
TXT_SPORT_MOBILE['darts']['327'] = 'S11';
TXT_SPORT_MOBILE['darts']['328'] = 'S12';
TXT_SPORT_MOBILE['darts']['329'] = 'S13';
TXT_SPORT_MOBILE['darts']['46'] = 'Descanso';
TXT_SPORT_MOBILE['darts']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['darts']['9'] = 'WO';
TXT_SPORT_MOBILE['darts']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['darts']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['darts']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['darts']['5'] = 'Anulado';
TXT_SPORT_MOBILE['darts']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['darts']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['snooker'] = new Array();
TXT_SPORT_MOBILE['snooker']['name'] = 'Snooker';
TXT_SPORT_MOBILE['snooker']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['snooker']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['snooker']['42'] = 'Esper.';
TXT_SPORT_MOBILE['snooker']['2'] = 'En directo';
TXT_SPORT_MOBILE['snooker']['46'] = 'Descanso';
TXT_SPORT_MOBILE['snooker']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['snooker']['9'] = 'WO';
TXT_SPORT_MOBILE['snooker']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['snooker']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['snooker']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['snooker']['5'] = 'Anulado';
TXT_SPORT_MOBILE['snooker']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['snooker']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['boxing'] = new Array();
TXT_SPORT_MOBILE['boxing']['name'] = 'Boxeo';
TXT_SPORT_MOBILE['boxing']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['boxing']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['boxing']['42'] = 'Esper.';
TXT_SPORT_MOBILE['boxing']['2'] = 'En directo';
TXT_SPORT_MOBILE['boxing']['46'] = 'Descanso';
TXT_SPORT_MOBILE['boxing']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['boxing']['9'] = 'WO';
TXT_SPORT_MOBILE['boxing']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['boxing']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['boxing']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['boxing']['5'] = 'Anulado';
TXT_SPORT_MOBILE['boxing']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['boxing']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['beach-volleyball'] = new Array();
TXT_SPORT_MOBILE['beach-volleyball']['name'] = 'Voley Playa';
TXT_SPORT_MOBILE['beach-volleyball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['beach-volleyball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['beach-volleyball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['beach-volleyball']['2'] = 'En directo';
TXT_SPORT_MOBILE['beach-volleyball']['17'] = 'S1';
TXT_SPORT_MOBILE['beach-volleyball']['18'] = 'S2';
TXT_SPORT_MOBILE['beach-volleyball']['19'] = 'S3';
TXT_SPORT_MOBILE['beach-volleyball']['20'] = 'S4';
TXT_SPORT_MOBILE['beach-volleyball']['21'] = 'S5';
TXT_SPORT_MOBILE['beach-volleyball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['beach-volleyball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['beach-volleyball']['8'] = 'Retirada';
TXT_SPORT_MOBILE['beach-volleyball']['9'] = 'WO';
TXT_SPORT_MOBILE['beach-volleyball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['beach-volleyball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['beach-volleyball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['beach-volleyball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['beach-volleyball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['beach-volleyball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['aussie-rules'] = new Array();
TXT_SPORT_MOBILE['aussie-rules']['name'] = 'FÃºtbol Australiano';
TXT_SPORT_MOBILE['aussie-rules']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['aussie-rules']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['aussie-rules']['42'] = 'Esper.';
TXT_SPORT_MOBILE['aussie-rules']['2'] = 'En directo';
TXT_SPORT_MOBILE['aussie-rules']['22'] = 'C1';
TXT_SPORT_MOBILE['aussie-rules']['23'] = 'C2';
TXT_SPORT_MOBILE['aussie-rules']['24'] = 'C3';
TXT_SPORT_MOBILE['aussie-rules']['25'] = 'C4';
TXT_SPORT_MOBILE['aussie-rules']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['aussie-rules']['38'] = 'Descanso';
TXT_SPORT_MOBILE['aussie-rules']['46'] = 'Descanso';
TXT_SPORT_MOBILE['aussie-rules']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['aussie-rules']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['aussie-rules']['9'] = 'WO';
TXT_SPORT_MOBILE['aussie-rules']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['aussie-rules']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['aussie-rules']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['aussie-rules']['5'] = 'Anulado';
TXT_SPORT_MOBILE['aussie-rules']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['aussie-rules']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['rugby-league'] = new Array();
TXT_SPORT_MOBILE['rugby-league']['name'] = 'Rugby League';
TXT_SPORT_MOBILE['rugby-league']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['rugby-league']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['rugby-league']['42'] = 'Esper.';
TXT_SPORT_MOBILE['rugby-league']['2'] = 'En directo';
TXT_SPORT_MOBILE['rugby-league']['12'] = 'T1';
TXT_SPORT_MOBILE['rugby-league']['38'] = 'Descanso';
TXT_SPORT_MOBILE['rugby-league']['13'] = 'T2';
TXT_SPORT_MOBILE['rugby-league']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['rugby-league']['7'] = 'Pen.';
TXT_SPORT_MOBILE['rugby-league']['46'] = 'Descanso';
TXT_SPORT_MOBILE['rugby-league']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['rugby-league']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['rugby-league']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['rugby-league']['9'] = 'WO';
TXT_SPORT_MOBILE['rugby-league']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['rugby-league']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['rugby-league']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['rugby-league']['5'] = 'Anulado';
TXT_SPORT_MOBILE['rugby-league']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['rugby-league']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['badminton'] = new Array();
TXT_SPORT_MOBILE['badminton']['name'] = 'BÃ¡dminton';
TXT_SPORT_MOBILE['badminton']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['badminton']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['badminton']['42'] = 'Esper.';
TXT_SPORT_MOBILE['badminton']['2'] = 'En directo';
TXT_SPORT_MOBILE['badminton']['17'] = 'S1';
TXT_SPORT_MOBILE['badminton']['18'] = 'S2';
TXT_SPORT_MOBILE['badminton']['19'] = 'S3';
TXT_SPORT_MOBILE['badminton']['46'] = 'Descanso';
TXT_SPORT_MOBILE['badminton']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['badminton']['8'] = 'Retirada';
TXT_SPORT_MOBILE['badminton']['9'] = 'WO';
TXT_SPORT_MOBILE['badminton']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['badminton']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['badminton']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['badminton']['5'] = 'Anulado';
TXT_SPORT_MOBILE['badminton']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['badminton']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['water-polo'] = new Array();
TXT_SPORT_MOBILE['water-polo']['name'] = 'Waterpolo';
TXT_SPORT_MOBILE['water-polo']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['water-polo']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['water-polo']['42'] = 'Esper.';
TXT_SPORT_MOBILE['water-polo']['2'] = 'En directo';
TXT_SPORT_MOBILE['water-polo']['22'] = 'C1';
TXT_SPORT_MOBILE['water-polo']['23'] = 'C2';
TXT_SPORT_MOBILE['water-polo']['24'] = 'C3';
TXT_SPORT_MOBILE['water-polo']['25'] = 'C4';
TXT_SPORT_MOBILE['water-polo']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['water-polo']['7'] = 'Pen.';
TXT_SPORT_MOBILE['water-polo']['38'] = 'Descanso';
TXT_SPORT_MOBILE['water-polo']['46'] = 'Descanso';
TXT_SPORT_MOBILE['water-polo']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['water-polo']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['water-polo']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['water-polo']['9'] = 'WO';
TXT_SPORT_MOBILE['water-polo']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['water-polo']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['water-polo']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['water-polo']['5'] = 'Anulado';
TXT_SPORT_MOBILE['water-polo']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['water-polo']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['golf'] = new Array();
TXT_SPORT_MOBILE['golf']['name'] = 'Golf';
TXT_SPORT_MOBILE['golf']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['golf']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['golf']['42'] = 'Esper.';
TXT_SPORT_MOBILE['golf']['2'] = 'En directo';
TXT_SPORT_MOBILE['golf']['65'] = 'V1';
TXT_SPORT_MOBILE['golf']['66'] = 'V2';
TXT_SPORT_MOBILE['golf']['67'] = 'V3';
TXT_SPORT_MOBILE['golf']['68'] = 'V4';
TXT_SPORT_MOBILE['golf']['62'] = 'Tras<br />V1';
TXT_SPORT_MOBILE['golf']['63'] = 'Tras<br />V2';
TXT_SPORT_MOBILE['golf']['64'] = 'Tras<br />V3';
TXT_SPORT_MOBILE['golf']['46'] = 'Descanso';
TXT_SPORT_MOBILE['golf']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['golf']['8'] = 'Retirada';
TXT_SPORT_MOBILE['golf']['9'] = 'WO';
TXT_SPORT_MOBILE['golf']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['golf']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['golf']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['golf']['5'] = 'Anulado';
TXT_SPORT_MOBILE['golf']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['golf']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['field-hockey'] = new Array();
TXT_SPORT_MOBILE['field-hockey']['name'] = 'Hockey hierba';
TXT_SPORT_MOBILE['field-hockey']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['field-hockey']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['field-hockey']['42'] = 'Esper.';
TXT_SPORT_MOBILE['field-hockey']['2'] = 'En directo';
TXT_SPORT_MOBILE['field-hockey']['12'] = 'T1';
TXT_SPORT_MOBILE['field-hockey']['38'] = 'Descanso';
TXT_SPORT_MOBILE['field-hockey']['13'] = 'T2';
TXT_SPORT_MOBILE['field-hockey']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['field-hockey']['7'] = 'Pen.';
TXT_SPORT_MOBILE['field-hockey']['46'] = 'Descanso';
TXT_SPORT_MOBILE['field-hockey']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['field-hockey']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['field-hockey']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['field-hockey']['9'] = 'WO';
TXT_SPORT_MOBILE['field-hockey']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['field-hockey']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['field-hockey']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['field-hockey']['5'] = 'Anulado';
TXT_SPORT_MOBILE['field-hockey']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['field-hockey']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['table-tennis'] = new Array();
TXT_SPORT_MOBILE['table-tennis']['name'] = 'Tenis de mesa';
TXT_SPORT_MOBILE['table-tennis']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['table-tennis']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['table-tennis']['42'] = 'Esper.';
TXT_SPORT_MOBILE['table-tennis']['2'] = 'En directo';
TXT_SPORT_MOBILE['table-tennis']['17'] = 'S1';
TXT_SPORT_MOBILE['table-tennis']['18'] = 'S2';
TXT_SPORT_MOBILE['table-tennis']['19'] = 'S3';
TXT_SPORT_MOBILE['table-tennis']['20'] = 'S4';
TXT_SPORT_MOBILE['table-tennis']['21'] = 'S5';
TXT_SPORT_MOBILE['table-tennis']['55'] = 'S6';
TXT_SPORT_MOBILE['table-tennis']['56'] = 'S7';
TXT_SPORT_MOBILE['table-tennis']['46'] = 'Descanso';
TXT_SPORT_MOBILE['table-tennis']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['table-tennis']['8'] = 'Retirada';
TXT_SPORT_MOBILE['table-tennis']['9'] = 'WO';
TXT_SPORT_MOBILE['table-tennis']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['table-tennis']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['table-tennis']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['table-tennis']['5'] = 'Anulado';
TXT_SPORT_MOBILE['table-tennis']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['table-tennis']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['beach-soccer'] = new Array();
TXT_SPORT_MOBILE['beach-soccer']['name'] = 'FÃºtbol playa';
TXT_SPORT_MOBILE['beach-soccer']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['beach-soccer']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['beach-soccer']['42'] = 'Esper.';
TXT_SPORT_MOBILE['beach-soccer']['2'] = 'En directo';
TXT_SPORT_MOBILE['beach-soccer']['14'] = 'P1';
TXT_SPORT_MOBILE['beach-soccer']['15'] = 'P2';
TXT_SPORT_MOBILE['beach-soccer']['16'] = 'P3';
TXT_SPORT_MOBILE['beach-soccer']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['beach-soccer']['7'] = 'Pen.';
TXT_SPORT_MOBILE['beach-soccer']['46'] = 'Descanso';
TXT_SPORT_MOBILE['beach-soccer']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['beach-soccer']['10'] = 'Tras<br />prÃ³rr.';
TXT_SPORT_MOBILE['beach-soccer']['11'] = 'Tras<br />pen.';
TXT_SPORT_MOBILE['beach-soccer']['9'] = 'WO';
TXT_SPORT_MOBILE['beach-soccer']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['beach-soccer']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['beach-soccer']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['beach-soccer']['5'] = 'Anulado';
TXT_SPORT_MOBILE['beach-soccer']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['beach-soccer']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['mma'] = new Array();
TXT_SPORT_MOBILE['mma']['name'] = 'MMA';
TXT_SPORT_MOBILE['mma']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['mma']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['mma']['42'] = 'Esper.';
TXT_SPORT_MOBILE['mma']['2'] = 'En directo';
TXT_SPORT_MOBILE['mma']['46'] = 'Descanso';
TXT_SPORT_MOBILE['mma']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['mma']['9'] = 'WO';
TXT_SPORT_MOBILE['mma']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['mma']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['mma']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['mma']['5'] = 'Anulado';
TXT_SPORT_MOBILE['mma']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['mma']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['netball'] = new Array();
TXT_SPORT_MOBILE['netball']['name'] = 'Netball';
TXT_SPORT_MOBILE['netball']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['netball']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['netball']['42'] = 'Esper.';
TXT_SPORT_MOBILE['netball']['2'] = 'En directo';
TXT_SPORT_MOBILE['netball']['22'] = 'C1';
TXT_SPORT_MOBILE['netball']['23'] = 'C2';
TXT_SPORT_MOBILE['netball']['24'] = 'C3';
TXT_SPORT_MOBILE['netball']['25'] = 'C4';
TXT_SPORT_MOBILE['netball']['6'] = 'PrÃ³rr.';
TXT_SPORT_MOBILE['netball']['38'] = 'Descanso';
TXT_SPORT_MOBILE['netball']['46'] = 'Descanso';
TXT_SPORT_MOBILE['netball']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['netball']['10'] = 'Tras prÃ³rr.';
TXT_SPORT_MOBILE['netball']['9'] = 'WO';
TXT_SPORT_MOBILE['netball']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['netball']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['netball']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['netball']['5'] = 'Anulado';
TXT_SPORT_MOBILE['netball']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['netball']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['pesapallo'] = new Array();
TXT_SPORT_MOBILE['pesapallo']['name'] = 'PesÃ¤pallo';
TXT_SPORT_MOBILE['pesapallo']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['pesapallo']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['pesapallo']['42'] = 'Esper.';
TXT_SPORT_MOBILE['pesapallo']['2'] = 'En directo';
TXT_SPORT_MOBILE['pesapallo']['26'] = 'E1';
TXT_SPORT_MOBILE['pesapallo']['27'] = 'E2';
TXT_SPORT_MOBILE['pesapallo']['28'] = 'E3';
TXT_SPORT_MOBILE['pesapallo']['29'] = 'E4';
TXT_SPORT_MOBILE['pesapallo']['30'] = 'E5';
TXT_SPORT_MOBILE['pesapallo']['31'] = 'E6';
TXT_SPORT_MOBILE['pesapallo']['32'] = 'E7';
TXT_SPORT_MOBILE['pesapallo']['33'] = 'E8';
TXT_SPORT_MOBILE['pesapallo']['35'] = 'EE';
TXT_SPORT_MOBILE['pesapallo']['7'] = 'Pen.';
TXT_SPORT_MOBILE['pesapallo']['46'] = 'Descanso';
TXT_SPORT_MOBILE['pesapallo']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['pesapallo']['69'] = 'Tras EE';
TXT_SPORT_MOBILE['pesapallo']['11'] = 'Tras pen.';
TXT_SPORT_MOBILE['pesapallo']['9'] = 'WO';
TXT_SPORT_MOBILE['pesapallo']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['pesapallo']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['pesapallo']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['pesapallo']['5'] = 'Anulado';
TXT_SPORT_MOBILE['pesapallo']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['pesapallo']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['motorsport'] = new Array();
TXT_SPORT_MOBILE['motorsport']['name'] = 'Motor';
TXT_SPORT_MOBILE['motorsport-auto-racing'] = new Array();
TXT_SPORT_MOBILE['motorsport-auto-racing']['name'] = 'Automovilismo';
TXT_SPORT_MOBILE['motorsport-auto-racing']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['motorsport-auto-racing']['2'] = 'En directo';
TXT_SPORT_MOBILE['motorsport-auto-racing']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['motorsport-auto-racing']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['motorsport-auto-racing']['5'] = 'Anulado';
TXT_SPORT_MOBILE['motorsport-auto-racing']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['motorsport-auto-racing']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['motorsport-auto-racing']['42'] = 'Esper.';
TXT_SPORT_MOBILE['motorsport-auto-racing']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['motorsport-moto-racing'] = new Array();
TXT_SPORT_MOBILE['motorsport-moto-racing']['name'] = 'Motociclismo';
TXT_SPORT_MOBILE['motorsport-moto-racing']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['motorsport-moto-racing']['2'] = 'En directo';
TXT_SPORT_MOBILE['motorsport-moto-racing']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['motorsport-moto-racing']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['motorsport-moto-racing']['5'] = 'Anulado';
TXT_SPORT_MOBILE['motorsport-moto-racing']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['motorsport-moto-racing']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['motorsport-moto-racing']['42'] = 'Esper.';
TXT_SPORT_MOBILE['motorsport-moto-racing']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['cycling'] = new Array();
TXT_SPORT_MOBILE['cycling']['name'] = 'Ciclismo';
TXT_SPORT_MOBILE['cycling']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['cycling']['2'] = 'En directo';
TXT_SPORT_MOBILE['cycling']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['cycling']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['cycling']['5'] = 'Anulado';
TXT_SPORT_MOBILE['cycling']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['cycling']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['cycling']['42'] = 'Esper.';
TXT_SPORT_MOBILE['cycling']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['horse-racing'] = new Array();
TXT_SPORT_MOBILE['horse-racing']['name'] = 'Carreras de caballos';
TXT_SPORT_MOBILE['horse-racing']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['horse-racing']['2'] = 'En directo';
TXT_SPORT_MOBILE['horse-racing']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['horse-racing']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['horse-racing']['5'] = 'Anulado';
TXT_SPORT_MOBILE['horse-racing']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['horse-racing']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['horse-racing']['42'] = 'Esper.';
TXT_SPORT_MOBILE['horse-racing']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['esports'] = new Array();
TXT_SPORT_MOBILE['esports']['name'] = 'eSports';
TXT_SPORT_MOBILE['esports']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['esports']['2'] = 'En directo';
TXT_SPORT_MOBILE['esports']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['esports']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['esports']['5'] = 'Anulado';
TXT_SPORT_MOBILE['esports']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['esports']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['esports']['42'] = 'Esper.';
TXT_SPORT_MOBILE['esports']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['esports']['54'] = 'Por perdido';
TXT_SPORT_MOBILE['esports']['9'] = 'WO';
TXT_SPORT_MOBILE['esports']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['winter-sports'] = new Array();
TXT_SPORT_MOBILE['winter-sports']['name'] = 'Deportes de invierno';
TXT_SPORT_MOBILE['winter-sports-ski-jumping'] = new Array();
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['name'] = 'Salto de esquÃ­';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['2'] = 'En directo';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['5'] = 'Anulado';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['42'] = 'Esper.';
TXT_SPORT_MOBILE['winter-sports-ski-jumping']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing'] = new Array();
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['name'] = 'EsquÃ­ alpino';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['2'] = 'En directo';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['5'] = 'Anulado';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['42'] = 'Esper.';
TXT_SPORT_MOBILE['winter-sports-alpine-skiing']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['winter-sports-cross-country'] = new Array();
TXT_SPORT_MOBILE['winter-sports-cross-country']['name'] = 'EsquÃ­ de fondo';
TXT_SPORT_MOBILE['winter-sports-cross-country']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['winter-sports-cross-country']['2'] = 'En directo';
TXT_SPORT_MOBILE['winter-sports-cross-country']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['winter-sports-cross-country']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['winter-sports-cross-country']['5'] = 'Anulado';
TXT_SPORT_MOBILE['winter-sports-cross-country']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['winter-sports-cross-country']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['winter-sports-cross-country']['42'] = 'Esper.';
TXT_SPORT_MOBILE['winter-sports-cross-country']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['winter-sports-biathlon'] = new Array();
TXT_SPORT_MOBILE['winter-sports-biathlon']['name'] = 'BiatlÃ³n';
TXT_SPORT_MOBILE['winter-sports-biathlon']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['winter-sports-biathlon']['2'] = 'En directo';
TXT_SPORT_MOBILE['winter-sports-biathlon']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['winter-sports-biathlon']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['winter-sports-biathlon']['5'] = 'Anulado';
TXT_SPORT_MOBILE['winter-sports-biathlon']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['winter-sports-biathlon']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['winter-sports-biathlon']['42'] = 'Esper.';
TXT_SPORT_MOBILE['winter-sports-biathlon']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['kabaddi'] = new Array();
TXT_SPORT_MOBILE['kabaddi']['name'] = 'Kabaddi';
TXT_SPORT_MOBILE['kabaddi']['1'] = '&nbsp;';
TXT_SPORT_MOBILE['kabaddi']['45'] = 'Por terminar';
TXT_SPORT_MOBILE['kabaddi']['42'] = 'Esper.';
TXT_SPORT_MOBILE['kabaddi']['2'] = 'En directo';
TXT_SPORT_MOBILE['kabaddi']['12'] = 'T1';
TXT_SPORT_MOBILE['kabaddi']['38'] = 'Descanso';
TXT_SPORT_MOBILE['kabaddi']['13'] = 'T2';
TXT_SPORT_MOBILE['kabaddi']['6'] = 'ET';
TXT_SPORT_MOBILE['kabaddi']['46'] = 'Descanso';
TXT_SPORT_MOBILE['kabaddi']['3'] = 'Finalizado';
TXT_SPORT_MOBILE['kabaddi']['10'] = 'AET';
TXT_SPORT_MOBILE['kabaddi']['9'] = 'WO';
TXT_SPORT_MOBILE['kabaddi']['43'] = 'Retrasado';
TXT_SPORT_MOBILE['kabaddi']['36'] = 'Interrumpido';
TXT_SPORT_MOBILE['kabaddi']['4'] = 'Aplazado';
TXT_SPORT_MOBILE['kabaddi']['5'] = 'Anulado';
TXT_SPORT_MOBILE['kabaddi']['37'] = 'Suspendido';
TXT_SPORT_MOBILE['kabaddi']['54'] = 'Por perdido';

var TXT_LIST_LINK = cjs.dic.get('utilTrans').translate('TRANS_POWERED_BY');

var TXT_ODDS_0 = cjs.dic.get('utilTrans').translate('TRANS_ODDS_TYPE_0');
var TXT_ODDS_EVEN_SHORT = cjs.dic.get('utilTrans').translate('TRANS_ODDS_EVEN_SHORT');

// calendar, days
var TXT_TODAY = cjs.dic.get('utilTrans').translate('TRANS_DAY_TODAY');
var TXT_CAL = new Array(
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_SUN'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_MON'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_TUE'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_WED'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_THU'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_FRI'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SHORT_SAT')
);

var TXT_CAL_FULL = new Array(
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SUN'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_MON'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_TUE'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_WED'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_THU'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_FRI'),
    cjs.dic.get('utilTrans').translate('TRANS_DAY_SAT')
);

var TXT_GOLF_WINNER = cjs.dic.get('utilTrans').translate('TRANS_WINNER');

var TXT_CALENDAR = {
    "prev_day": cjs.dic.get('utilTrans').translate('TRANS_DAY_PREVIOUS'),
    "next_day": cjs.dic.get('utilTrans').translate('TRANS_DAY_NEXT')
};

var PREMATCH_ODDS = '1';
var IN_PLAY_ODDS = '2';

var gamePlanSettings = null;

var tournamentPage = false;
var tournamentPageTab = null;
var tournamentPageDataPart = 0;

function setGamePlanSettings(settings) {
    gamePlanSettings = settings;
}

function getGamePlanSettings() {
    return gamePlanSettings;
}

var feedIndexes = cjs.constants.FEED;
var homeServiceSelector = '#flashscore .home-box .side-images-row';
var awayServiceSelector = '#flashscore .away-box .side-images-row';
var dartsStatisticsTemplate = 'detail/event-statistics-experimental.tpl';
var dartsStatisticsPreviewTemplate = 'detail/event-statistics-preview-experimental.tpl';
var usStyleWinLossMark = false;

var bookmakersWithOdds = {};

//login client init
function lsid_init() {
    var utilTrans = cjs.dic.get('utilTrans');
    if (typeof ls.loginClient == 'undefined') {
        var socialInit = {};
        socialInit.facebook = '125754474284594';
        socialInit.google = '199503525252-89hptckd4dhego166b0lopiqdfkkecb9.apps.googleusercontent.com';
        var loginClientTrans = {
            'closeWindow': utilTrans.translate('TRANS_CLOSE_WINDOW'),
            'deleteAccount': utilTrans.translate('TRANS_USER_DELETE_ACCOUNT'),
            'deleteAccountSuccessful': utilTrans.translate('TRANS_USER_DIALOG_DELETE_ACCOUNT_SUCCESSFUL'),
            'registration': 'REGISTRO',
            'signIn': utilTrans.translate('TRANS_USER_LOGIN'),
            'signInFB': utilTrans.translate('TRANS_USER_LOGIN_FACEBOOK'),
            'user': utilTrans.translate('TRANS_USER_USER'),
            'settings': utilTrans.translate('TRANS_USER_CHANGE_PASSWORD'),
            'lsTvTitle': utilTrans.translate('TRANS_TV_USERS_OVERVIEW_TITLE'),
            'signOut': utilTrans.translate('TRANS_USER_LOGOUT'),
            'signOutConfirm': utilTrans.translate('TRANS_USER_LOGOUT_CONFIRMATION'),
            'emailError': utilTrans.translate('TRANS_USER_ERROR_EMAIL_NOT_VALID'),
            'emailUsedError': utilTrans.translate('TRANS_USER_ERROR_EMAIL_USED'),
            'passwordError': utilTrans.translate('TRANS_USER_ERROR_PASSWORD_MIN_5_CHARACTERS'),
            'passwordMissmatchError': utilTrans.translate('TRANS_USER_ERROR_PASSWORDS_NOT_SAME'),
            'passwordChangeFail': utilTrans.translate('TRANS_USER_ERROR_PASSWORD_INVALID'),
            'passwordChangeOk': utilTrans.translate('TRANS_USER_CHANGE_PASSWORD_SUCCESSFUL'),
            'forgottenPasswordSendOk': utilTrans.translate('TRANS_USER_FORGOTTEN_PASSWORD_SEND_INSTRUCTIONS_SUCCESSFUL'),
            'captchaError': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'),
            'captchaEmptyError': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'),
            'captchaRetypeError': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_NOT_ROBOT_CONFIRMATION'),
            'termsError': utilTrans.translate('TRANS_USER_ERROR_I_AGREE_WITH_TERMS'),
            'verificationCodeError': utilTrans.translate('TRANS_USER_ERROR_VERIFICATION_CODE_INVALID'),
            'verificationPassChangeCodeError': utilTrans.translate('TRANS_USER_FORGOTTEN_PASSWORD_ERROR_NOT_VALID_VERIFICATION_CODE'),
            'registrationOk': utilTrans.translate('TRANS_USER_REGISTRATION_SUCCESSFUL'),
            'registrationOkNote': 'ATENCIÃN: Te hemos enviado un e-mail de activaciÃ³n. Por favor, revisa tu buzÃ³n de correo y haz clic en el enlace de activaciÃ³n incluido en el mensaje.<br /><br />Si no recibes nuestro e-mail de activaciÃ³n dentro de 20 minutos, comprueba la carpeta SPAM de tu buzÃ³n de correo.<br /><br />Si no encuentras nuestro e-mail, por favor, contÃ¡ctanos en support@verfutbol.xyz.',
            'verificationOk': utilTrans.translate('TRANS_USER_ACTIVATION_SUCCESSFUL'),
            'signInOK': utilTrans.translate('TRANS_USER_LOGIN_SUCCESSFUL'),
            'loggedIn': utilTrans.translate('TRANS_USER_LOGGED_IN'),
            'signOutOk': utilTrans.translate('TRANS_USER_LOGOUT_SUCCESSFUL'),
            'serverLogout': utilTrans.translate('TRANS_USER_SERVER_LOGOUT'),
            'errTechnical': utilTrans.translate('TRANS_USER_SERVER_ERROR'),
            'errSignIn': utilTrans.translate('TRANS_USER_ERROR_LOGIN_FAILED'),
            'errSignInConfirm': utilTrans.translate('TRANS_USER_ERROR_ACCOUNT_NOT_VERIFIED'),
            'newTermsOfUseSuccess': utilTrans.translate('TRANS_USER_DIALOG_NEW_TERMS_OF_USE_SUCCESSFUL'),
            'registrationOkLabel': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_ALMOST_DONE'),
            'registrationOkInfo1': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_EMAIL_SENT_TO'),
            'registrationOkInfo2': utilTrans.translate('TRANS_USER_DIALOG_REGISTRATION_CONFIRMATION_INFO')
        };
        hello.init(socialInit, {
            'redirect_uri': '/login-proxy/'
        });
        ls.loginClient = new ls.LoginClient(clientStorage,
            'https://www.apurogol.net/',
            'flashscore',
            '13',
            cjs.dic,
            hello,
            loginClientTrans,
            ls.urlEncode,
            function() {
                return cjs.geoIP;
            },
            function() {
                return cjs.dic.get("util_date").getTimestamp() * 1000;
            }
        );

        cjs.Api.loader.get('loginClient').fulfill(function(callback) {
            callback(ls.loginClient);
        });
    }
}
cjs.fromGlobalScope.lsid_init = lsid_init;

//My leagues init
function my_leagues_init(sportId, topLeagues, disableLoadTopLeagues) {
    var utilTrans = cjs.dic.get('utilTrans');
    if (typeof cjs.myLeagues == 'undefined') {
        lsid_init();
        var loadTopLeagues = function(sportId, callback) {
            if (disableLoadTopLeagues) {
                return;
            }

            var myCallback = function(status, headers, responseText, actionTrigger, customHeaders) {
                topLeaguesRequested = JSON.parse(responseText);
                if (!topLeaguesRequested) {
                    topLeaguesRequested = {};
                }
                callback(topLeaguesRequested);
            };
            (new cjs.AjaxJqObject(req_url + 'mt_' + sportId, void 0, myCallback, 'loadTopLeagues')).update()
        };
        cjs.myLeagues = new cjs.MyLeagues(ls.loginClient, topLeagues, new cjs.TopLeagues(), loadTopLeagues, sportId, false, utilTrans.translate('TRANS_MY_LEAGUES_ADD'), cjs.dic.get('utilTrans').translate('TRANS_MY_LEAGUES_REMOVE'), cjs.dic.get('utilTrans').translate('TRANS_ERROR_AVAILABLE_ONLY_FOR_LOGGED_USER'));

        cjs.myLeagues.registerCallback('add', sort_fs_data);
        cjs.myLeagues.registerCallback('remove', sort_fs_data);

        var reloadTabContent = function() {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadTabContent(category);
                reactCalls.reloadStaticContent();
            });
        };
        cjs.myLeagues.registerCallback('add', reloadTabContent);
        cjs.myLeagues.registerCallback('remove', reloadTabContent);

        var dataUrl = req_url + 'ml_';
        var emptyContent = utilTrans.translate('TRANS_MY_LEAGUES_LEFT_MENU_TEXT');
        var language = cjs.Api.config.get('app', 'lang', 'web');
        cjs.myLeaguesMenu = new cjs.MyLeaguesMenu(clientStorage, cjs.myLeagues, dataUrl, emptyContent, language, $);

        var drawMenu = function() {
            cjs.myLeaguesMenu.draw();
        };
        ls.loginClient.registerCallback('login', drawMenu);
        ls.loginClient.registerCallback('logout', drawMenu);
        ls.loginClient.registerCallback('dataSyncChange/myLeagues', drawMenu);
        cjs.myLeagues.registerCallback('add', drawMenu);
        cjs.myLeagues.registerCallback('remove', drawMenu);
        drawMenu = null;
    }
}

cjs.fromGlobalScope.my_leagues_init = my_leagues_init;

function myTeamsInit(sportId) {
    if (typeof cjs.myTeams == 'undefined' && cjs.Api.config.get('app', 'myteams', 'enable')) {
        lsid_init();
        cjs.myTeams = cjs.dic.get('myTeams');
        cjs.myTeamsMenu = cjs.dic.get('myTeamsMenu');
        var navigation = cjs.dic.get('list_navigation');

        var drawMenu = function(participantKey) {
            var participantKeySportId = sportId;

            if (participantKey) {
                participantKeySportId = parseInt(participantKey.replace(/^([0-9]+)_.* /, '$1'));
            }

            if (sportId == participantKeySportId && cjs.myTeamsMenu) {
                cjs.myTeamsMenu.reload();
            }

            cjs.myTeams.reloadToggleIcons();
        };

        cjs.myTeams.registerCallback('dataLoaded', drawMenu);
        cjs.myTeams.registerCallback('dataLoaded', function() {
            if (typeof ls != 'undefined' && ls.loginClient && ls.loginClient.userFunctionsAreAvailable(cjs.myTeams.DATA_KEY)) {
                sort_fs_data();

                var myTeamsCount = cjs.dic.get('MyTeams').getCount();
                if (navigation.isMyGames() && myTeamsCount) {
                    loadAndShowMygamesContent();
                }
            }
        });
        ls.loginClient.registerCallback('login', drawMenu);
        ls.loginClient.registerCallback('login', function() {
            cjs.myTeams.restartDataAutosync();
        });
        ls.loginClient.registerCallback('logout', drawMenu);
        ls.loginClient.registerCallback('logout', function() {
            cjs.myTeams.stopDataAutosync();
        });
        ls.loginClient.registerCallback('dataSyncChange/myTeams', (function(drawMenu) {
            return function() {
                cjs.myTeams.reload();
                drawMenu();
                if (navigation.isMyGames()) {
                    redrawLivescore();
                }
            }
        })(drawMenu));

        cjs.myTeams.registerCallback('remove', drawMenu);
        drawMenu = null;

        cjs.Api.loader.get('myTeams').fulfill(function(callback) {
            callback(cjs.myTeams);
        });
    }
}

cjs.fromGlobalScope.myTeamsInit = myTeamsInit;


// Core functions {{{

/** Parse data from input string to data array
 */
function parse(fs_input, update, odds, action) {
    var dataEventHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var dataLeagueHolder = cjs.dic.get('dataLeagueHolderProxy').getHolder();
    var dataParticipantHolder = cjs.dic.get('dataParticipantHolder');
    var navigation = cjs.dic.get('list_navigation');
    var sportList = cjs.Api.constantsManager.getSports();
    var translate = cjs.dic.get('util_trans');
    // test if there is input string
    if (fs_input == null || fs_input.length < 4 || fs_input == '0') {
        u_304 = 'd41d8cd98f00b204e9800998ecf8427e';
        return true;
    }
    update = (typeof update == 'undefined' || update == false) ? false : true;
    odds = (typeof odds == 'undefined' || odds == false) ? false : true;
    var eventItem, leagueItem, upcomingDrawItem;
    var rows = fs_input.split(JS_ROW_END);
    var rows_length = rows.length;
    var labl_id;
    var parse_sport_id = sport_id;
    var parse_sport = sport;
    var return_val = true;
    var resort_stages = false;
    var top_leagues_switch = true;
    var eventId, tmp;
    var special = false;
    var isMyTeamsAction = (typeof cjs.myTeams !== 'undefined' && action === cjs.myTeams.FEED_ACTION);
    var isRepairAction = (action == 'repair' || action == 'frepair');
    var reloadEvents = [];
    var reloadLeagues = [];
    var reloadTabContent = false;
    var sortTabContent = false;
    var isMyTeamsFeed = action === 'my-teams-events-data-merged';
    var isMyGamesScope = cjs.dic.get('dataLeagueHolderProxy').getScope() === 'mygames';
    var tvChannelsFeedParser = cjs.Api.loader.get('tv/channelsFeedParser');
    var isTvEnabled = cjs.Api.config.get('app', 'tv', 'enabled');

    if (!update && !odds && !isRepairAction) {
        if (rows_length == 1) {
            rows_length = 0;
        }

        if ((typeof action == 'undefined' || !isMyTeamsAction) && !navigation.isMyGames()) {
            preload_show();
        }
    }

    // parse data
    for (var i = 0; i < rows_length; i++) {
        var row = rows[i].split(JS_CELL_END);
        var row_length = row.length - 1;
        var index = row[0].split(JS_INDEX);
        var indexName, indexValue;
        if (typeof index[0] !== 'undefined') {
            indexName = index[0];
        }
        if (typeof index[1] !== 'undefined') {
            indexValue = index[1];
        }

        // sport
        if (indexName === feedIndexes.SHAREDINDEXES_SPORT_ID) {
            parse_sport_id = indexValue;
            parse_sport = SPORT_LIST_BY_ID[parse_sport_id];
            parsed_sports[parse_sport_id] = parse_sport;
            continue;
        } else if (indexName === feedIndexes.DCAPIPARTICIPANTINDEXES_TEAM_INFO || indexName == feedIndexes.DCAPIPARTICIPANTINDEXES_TEAM_INFO_DELETED) {
            for (var j = 0; j < row_length; j++) {
                var tmpIndex = row[j].split(JS_INDEX);
                var key = tmpIndex[0];
                var value = tmpIndex[1];
                if (key == feedIndexes.DCAPIPARTICIPANTINDEXES_TEAM_INFO || key == feedIndexes.DCAPIPARTICIPANTINDEXES_TEAM_INFO_DELETED) {
                    var participantData = value.split('|');
                    var participantId = participantData[0];
                    var participantItem = dataParticipantHolder.getOrCreateNewParticipant(participantId);
                    participantItem.reinit(participantData);
                    participantItem.setDeleted(key == feedIndexes.DCAPIPARTICIPANTINDEXES_TEAM_INFO_DELETED);
                } else if (key == feedIndexes.LOCALIZEKEYINDEXES_PARTICIPANT_EVENTS_CLASS_LOCALIZED_VAR) {
                    cjs.Api.dataItemTranslator.updateDictionary(value);
                }
            }

            continue;
        } else if (!isMyTeamsFeed || isMyGamesScope) {
            // caption
            if (indexName === feedIndexes.SHAREDINDEXES_TOURNAMENT_NAME) {
                var tmp_labl = {};
                var backupedLeagueItem = cjs.dic.getNewInstance('Data_LeagueItem');

                if (parse_sport_id == cjs.Api.constantsManager.getSports().GOLF || isNoDuelSport(parse_sport_id)) {
                    tmp_labl[feedIndexes.SHAREDINDEXES_EVENT_STAGE_TYPE_ID] = '';
                    tmp_labl[feedIndexes.SHAREDINDEXES_EVENT_STAGE_ID] = '';
                    tmp_labl[feedIndexes.SHAREDINDEXES_MATCH_START_UTIME] = '';
                }

                for (var j = 0; j < row_length; j++) {
                    var rowParts = row[j].split(JS_INDEX);
                    if (rowParts.length == 2) {
                        tmp_labl[rowParts[0]] = rowParts[1];
                    }
                }

                //    display status of tournament's games [open/close icon]
                tmp_labl['display'] = tmp_labl[feedIndexes.LEAGUEINDEXES_TOURNAMENT_TYPE] != 'c';
                tmp_labl['g_count'] = 0;
                tmp_labl['sport_id'] = parse_sport_id;
                tmp_labl['sport'] = parse_sport;
                labl_id = parse_sport_id + '_' + tmp_labl[feedIndexes.SHAREDINDEXES_TOURNAMENT_STAGE_ID];

                if (isMyTeamsAction) {
                    var mgLeagueData = cjs.mygames.getLabels();
                    if (mgLeagueData[labl_id] != null) {
                        tmp_labl['g_count'] = mgLeagueData[labl_id]['g_count'];
                    }
                }

                if (typeof cjs.myLeagues != 'undefined') {
                    var isTopLeague = cjs.myLeagues.isTop(labl_id);
                    if (isTopLeague && !top_leagues_switch) {
                        resort_stages = true;
                    }

                    top_leagues_switch = isTopLeague;
                }

                if (dataLeagueHolder.hasLeague(labl_id)) {
                    var backupedLeagueItemData = dataLeagueHolder.getLeague(labl_id).getData();
                    backupedLeagueItem.reinit(backupedLeagueItemData);
                    tmp_labl['g_count'] = backupedLeagueItem.getEventCount();
                }

                if (isRepairAction) {
                    if (dataLeagueHolder.hasLeague(labl_id)) {
                        leagueItem = dataLeagueHolder.getLeague(labl_id);
                        for (var key in tmp_labl) {
                            if (key.length > 2 || (key == feedIndexes.SHAREDINDEXES_TOURNAMENT_NAME && tmp_labl[key] == '')) {
                                continue;
                            }
                            leagueItem.setValue(key, tmp_labl[key]);
                        }
                    }
                } else if (!update) {
                    leagueItem = dataLeagueHolder.getOrCreateNewLeague(labl_id);
                    leagueItem.reinit(tmp_labl);
                } else if (update && labl_id) {
                    if (dataLeagueHolder.hasLeague(labl_id)) {
                        leagueItem = dataLeagueHolder.getLeague(labl_id);
                        for (var key in tmp_labl) {
                            if (key.length > 2 || (key == feedIndexes.SHAREDINDEXES_TOURNAMENT_NAME && tmp_labl[key] == '') || tmp_labl[key] == leagueItem.getValue(key)) {
                                continue;
                            }
                            leagueItem.setValue(key, tmp_labl[key]);
                        }
                    }
                }

                if (leagueItem) {
                    leagueItem = cjs.Api.dataItemTranslator.translate(leagueItem, backupedLeagueItem);
                    reloadLeagues.push(leagueItem.getId());
                }
            }
            // upcoming draw row in league
            else if (indexName === feedIndexes.SHAREDINDEXES_UPCOMING_DRAW_ID) {
                upcomingDrawItem = cjs.dic.getNewInstance('Data_UpcomingDrawItem');
                for (var j = 1; j < row_length; j++) {
                    var rowParts = row[j].split(JS_INDEX);
                    if (rowParts.length != 2) {
                        continue;
                    }

                    var cellKey = rowParts[0];
                    var cellValue = rowParts[1];
                    if (cellKey == feedIndexes.FSCORE_DRAWINDEXES_UPCOMING_DRAW_START_TIME) {
                        upcomingDrawItem.addEventStartTime(parseInt(cellValue));
                    } else {
                        if (cellKey == feedIndexes.SHAREDINDEXES_TOURNAMENT_STAGE_ID) {
                            labl_id = parse_sport_id + '_' + tmp_labl[feedIndexes.SHAREDINDEXES_TOURNAMENT_STAGE_ID];
                        }
                        upcomingDrawItem.setValue(cellKey, cellValue);
                    }
                }

                if (dataLeagueHolder.hasLeague(labl_id)) {
                    dataLeagueHolder.getLeague(labl_id).addUpcomingDraw(upcomingDrawItem);
                }
            } else if (indexName === feedIndexes.FULLFEEDINDEXES_MOVED_EVENTS_ID) {
                for (var j = 0; j < row_length; j++) {
                    switch (row[j].substr(0, 2)) {
                        case feedIndexes.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START:
                            eventId = 'g_' + parse_sport_id + '_' + row[j].substr(3);
                            break;
                        case feedIndexes.FULLFEEDINDEXES_EVENT_WITH_UPDATED_START_AND_END_TIME:
                            if (eventId) {
                                tmp = (row[j].substr(3) + "").split('|');
                                fsEventsUpdatedStartTime[eventId] = {
                                    start_time: parseInt(tmp[0]),
                                    end_time: tmp[1] ? parseInt(tmp[1]) : null
                                };
                                eventId = null;
                            }
                            break;
                    }
                }
                continue;
            } else if (indexName === feedIndexes.STANDINGSSIGNSINDEXES_TABLE_HASH && indexValue === 'repair') {
                special = true;
                var repairRows = [];
                for (var j = i + 1; j < rows_length; j++) {
                    repairRows.push(rows[j]);
                    i++;
                    if (rows[j].split(JS_CELL_END)[0].split(JS_INDEX)[0] === feedIndexes.SHAREDINDEXES_FEED_SIGNATURE) {
                        break;
                    }
                }
                continue;
            }
            // u_304 code
            else if (indexName === feedIndexes.SHAREDINDEXES_FEED_SIGNATURE) {
                if (typeof action != 'undefined' && action == 'update') {
                    u_304 = indexValue;
                }

                rows_length--;
                continue;
            }
            // refresh utime
            else if (indexName === feedIndexes.SHAREDINDEXES_REFRESH_UTIME) {
                var tmp_refresh_utime = indexValue - 0;

                if (tmp_refresh_utime > refresh_utime) {
                    refresh_utime = tmp_refresh_utime;
                    return_val = false;
                }
            }
            // download local update feed
            else if (indexName === feedIndexes.SHAREDINDEXES_UPDATE_LOCAL_FEED_UPDATED_TIME) {
                tmp = indexValue - 0;
                if (tmp) {
                    var feedService = cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME];
                    if (feedService) {
                        feedService.setSyncTime(tmp);
                    }
                }
            }
            // no game today, past/upcoming game
            else if (indexName === feedIndexes.FULLFEEDINDEXES_PAST_FUTURE_GAMES) {
                setGamePlanSettings(indexValue.split(";"));
            }
            // game row
            else if (indexName === feedIndexes.SHAREDINDEXES_EVENT_ID) {
                var original_id = indexValue;
                var id = 'g_' + parse_sport_id + '_' + original_id;
                var backupedEventItem = cjs.dic.getNewInstance('Data_EventItem');
                var eventItemExists = dataEventHolder.hasEvent(id);

                // unknown game on update/repair or odds feed

                if ((update || isRepairAction || odds) && !eventItemExists) {
                    continue;
                }

                reloadEvents.push(id);

                if (eventItemExists) {
                    var backupedEventItemData = dataEventHolder.getItem(id).getData();
                    backupedEventItem.reinit(backupedEventItemData);
                }
                // create new event entry
                eventItem = dataEventHolder.getOrCreateNewEvent(id);
                if (!eventItemExists && !update && !odds && !isRepairAction) {
                    if (!navigation.isMyGames() || !isMyTeamsAction) {
                        leagueItem.setValue('g_count', leagueItem.getEventCount() + 1);
                    }
                    eventItem.reinit(createDefaultMatchItem(parseInt(parse_sport_id), parse_sport));
                    eventItem.setValue('original_id', original_id);
                    eventItem.setValue('labl_id', labl_id);
                    eventItem.setValue('sport_id', parse_sport_id);
                    eventItem.setValue('sport', parse_sport);
                }

                var statsResultsHelper = cjs.dic.getNewInstance('Helper_StatsResultsParser');
                for (var j = 1; j < row_length; j++) {
                    var rowParts = row[j].split(JS_INDEX);
                    if (rowParts.length != 2) {
                        continue;
                    }

                    var key = rowParts[0];
                    var new_value_string = rowParts[1];

                    // Add LSTV EventChannelsInfo to EventItem
                    if (key === feedIndexes.TVINDEXES_CHANNEL_ID && isTvEnabled && !isNoDuelSport(+parse_sport_id)) {
                        tvChannelsFeedParser.call(rows[i], function(eventChannelsInfo) {
                            eventItem.setValue('eventChannelsInfo', eventChannelsInfo);
                        });
                        if (update && category === 8) {
                            reloadTabContent = true;
                            sortTabContent = true;
                        }
                    }

                    if (update && ($.inArray(key, [
                            feedIndexes.ODDSINDEXES_ODDS_1_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_0_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_2_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_10_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_02_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_AH1_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_AH2_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_OU1_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_OU2_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_ML1_PREVIOUS,
                            feedIndexes.ODDSINDEXES_ODDS_ML2_PREVIOUS
                        ]) !== -1)) {
                        continue;
                    }

                    if ($.inArray(key, [
                            feedIndexes.UPDATEINDEXES_HOME_PENALTY_SHOT,
                            feedIndexes.UPDATEINDEXES_AWAY_PENALTY_SHOT,
                            feedIndexes.UPDATEINDEXES_HOME_PENALTY_MISSED,
                            feedIndexes.UPDATEINDEXES_AWAY_PENALTY_MISSED
                        ]) !== -1) {
                        continue;
                    }

                    var new_value = new_value_string;
                    if ($.inArray(key, [
                            feedIndexes.SHAREDINDEXES_TIME,
                            feedIndexes.SHAREDINDEXES_GAP,
                            feedIndexes.SHAREDINDEXES_HOME_CRICKET_RUN_RATE,
                            feedIndexes.SHAREDINDEXES_AWAY_CRICKET_RUN_RATE,
                            feedIndexes.RESULTSINDEXES_ROW_VALUE
                        ]) === -1) {
                        new_value -= 0; // try convert string to number
                    }

                    if (isNaN(new_value) || new_value_string == '') {
                        new_value = new_value_string;
                    }

                    if (update || odds) {
                        var swap_corrected = get_index_and_value_for_swapped(id, key, new_value);
                        key = swap_corrected.key;
                        new_value = swap_corrected.value;
                    }
                    // for aussie rules - results are made from parts (X.X.X.X) and we have to get them as a whole
                    if ($.inArray(key, [
                            feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT,
                            feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT,
                            feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1,
                            feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1,
                            feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2,
                            feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2,
                            feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3,
                            feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_3,
                            feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4,
                            feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_4
                        ]) !== -1) {
                        new_value = fs_update.update_merged_score(eventItem, key, new_value);
                    }

                    if (key === feedIndexes.ODDSINDEXES_EACH_WAY_HANDICAP && reloadLeagues.indexOf(eventItem.getLeagueId()) === -1) {
                        reloadLeagues.push(eventItem.getLeagueId());
                    }

                    if (key === feedIndexes.FULLFEEDINDEXES_TEAM_NAME && (!update && !odds && !special) && typeof participantItem != 'undefined' && eventItem.isValid() && participantItem.getTeamName()) {
                        new_value = participantItem.getTeamName();
                    }

                    if (!statsResultsHelper.isStatsResultsIndex(key)) {
                        if (update && eventItem.getValue(key) !== new_value) {
                            fs_update.property_set(id, key, new_value, eventItem.getValue(key));
                        }

                        eventItem.setValue(key, new_value);
                    }

                    // get statsResults
                    statsResultsHelper.setHomeAndAwayParticipantIdsFromEventItem(eventItem);
                    statsResultsHelper.processKeyAndValue(key, new_value);
                }

                // update and save statsResults
                var statsResults = statsResultsHelper.getStatsResults();
                for (var statsResultsKey in statsResults) {
                    new_value = statsResults[statsResultsKey];
                    if (update && eventItem.getValue(statsResultsKey) !== new_value) {
                        fs_update.property_set(id, statsResultsKey, new_value, eventItem.getValue(statsResultsKey));
                    }

                    eventItem.setValue(statsResultsKey, new_value);
                }

                // penalty
                if (action == 'update') {
                    for (var j = 1; j < row_length; j++) {
                        var key = row[j].substr(0, 2);
                        if ($.inArray(key, [
                                feedIndexes.UPDATEINDEXES_HOME_PENALTY_SHOT,
                                feedIndexes.UPDATEINDEXES_AWAY_PENALTY_SHOT,
                                feedIndexes.UPDATEINDEXES_HOME_PENALTY_MISSED,
                                feedIndexes.UPDATEINDEXES_AWAY_PENALTY_MISSED
                            ]) !== -1) {
                            var new_value_arr = row[j].substr(3).split(',');
                            var incidentTime = new_value_arr[1] / 60;
                            var updatedTime = new_value_arr[2];

                            if (new_value_arr[0] == eventItem.getStage()) {
                                var counterTimeGetter = cjs.Api.loader.get('counterTime');
                                counterTimeGetter.call(eventItem.getId(), function(counterTime) {
                                    var interval = 5;
                                    if (incidentTime >= counterTime - interval && incidentTime <= counterTime + interval) {
                                        new_value = updatedTime;
                                        if (eventItem.getValue(key) !== new_value) {
                                            fs_update.property_set(id, key, new_value, eventItem.getValue(key));
                                            eventItem.setValue(key, new_value);
                                        }
                                    }
                                });
                            }
                        } else if (eventItem.getSportId() == cjs.Api.constantsManager.getSports().GOLF || isNoDuelSport(eventItem.getSportId())) {
                            if ($.inArray(key, [
                                    feedIndexes.SHAREDINDEXES_EVENT_STAGE_TYPE_ID,
                                    feedIndexes.SHAREDINDEXES_EVENT_STAGE_ID,
                                    feedIndexes.SHAREDINDEXES_MATCH_START_UTIME
                                ]) !== -1) {
                                reloadTabContent = true;
                            }
                        } else if (key === feedIndexes.SHAREDINDEXES_EVENT_STAGE_TYPE_ID &&
                            category !== 0 &&
                            fs_update.did_property_changed(id, feedIndexes.SHAREDINDEXES_EVENT_STAGE_TYPE_ID)) {
                            reloadTabContent = true;
                        } else if (key === feedIndexes.SHAREDINDEXES_MATCH_START_UTIME &&
                            fs_update.did_property_changed(id, feedIndexes.SHAREDINDEXES_MATCH_START_UTIME)) {
                            reloadTabContent = true;
                            sortTabContent = true;
                        }
                    }
                }

                if (!odds) {
                    // save counter literal name - mainly for non-soccer sports
                    var isCricketOdiOrT20 = eventItem.getSportId() === sportList.CRICKET && (eventItem.isCricketTypeOdi() || eventItem.isCricketTypeT20());
                    if (isCricketOdiOrT20 && eventItem.hasService() && eventItem.isFirstInning()) {
                        var participant3Char = "";
                        if (eventItem.hasHomeService()) {
                            participant3Char = eventItem.getAway3CharName();
                        } else if (eventItem.hasAwayService()) {
                            participant3Char = eventItem.getHome3CharName();
                        }
                        eventItem.setValue('counter', translate.translate('TRANS_CRICKET_MATCH_STATUS_IFRAME_3CHARINN', [participant3Char]));
                        eventItem.setValue('counterShort', translate.translate('TRANS_CRICKET_MATCH_STATUS_IFRAME_3CHARINN', [participant3Char]));
                    } else {
                        var sportTranslation = cjs.dic.get('util_enviroment').getCompleteSportTranslations();
                        var shortTranslation = cjs.dic.get('util_enviroment').getShortSportTranslations();
                        eventItem.setValue('counter', sportTranslation[parse_sport][eventItem.getStage()]);
                        eventItem.setValue('counterShort', shortTranslation[parse_sport][eventItem.getStage()]);
                    }
                }

                eventItem = cjs.Api.dataItemTranslator.translate(eventItem, backupedEventItem);

                var page = cjs.dic.get('util_page');
                var check_start_times = category != 5 && typeof action == 'undefined' && !odds && !update && !page.isCountryPage() && !page.isSeasonPage();
                var removeEventByTime = check_start_times && !check_start_time(eventItem.getStartUTime(), eventItem.getEndUTime()) && !eventItem.isLive();
                var removeEventByInvalidLeague = !eventItem.getLeague().isValid();
                if (removeEventByTime || !eventItem.isValid() || removeEventByInvalidLeague) {
                    if (!navigation.isMyGames() || !isMyTeamsAction) {
                        leagueItem.setValue('g_count', leagueItem.getEventCount() - 1);
                    }
                    dataEventHolder.removeEvent(id);
                    fs_update.removeEvent(id);
                }

                if (!update && !odds && !special) {
                    if (typeof participantItem != 'undefined' && eventItem.isValid()) {
                        participantItem.addEventId(eventItem.getId());
                    }
                }
            }
        }
    }

    fs_input = null;

    if (special && repairRows.length > 0) {
        parse(repairRows.join(JS_ROW_END), false, false, "frepair");
    }

    var leaguesInHolder = dataLeagueHolder.getReferences();
    for (var leagueId in leaguesInHolder) {
        if (!leaguesInHolder[leagueId].isValid()) {
            dataLeagueHolder.removeLeague(leagueId);
            reloadLeagues.push(leagueId);
        }
    }

    var isUpdateAction = update || isRepairAction || odds;

    if (isUpdateAction && cjs.dic.get("util_page").getPageType() != 'player_page') {
        if (reloadTabContent) {
            if (sortTabContent) {
                sort_fs_data();
            }

            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadTabContent(category);
            });
        } else {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                for (var reloadEventId in reloadEvents) {
                    reactCalls.reloadEvent(reloadEvents[reloadEventId]);
                }
                for (var reloadLeagueId in reloadLeagues) {
                    reactCalls.reloadLeague(reloadLeagues[reloadLeagueId]);
                }
            });
        }
    }

    return return_val;
};

function check_start_time(start_time, end_time, other_params) {
    if (typeof other_params == 'undefined') {
        other_params = {};
    }

    if (!other_params.hasOwnProperty('day')) {
        other_params.day = sudate;
    }

    var matchDay = get_match_day(start_time, end_time);
    return (jQuery.inArray(parseInt(other_params.day), matchDay) !== -1);
};

function get_match_day(start_time, end_time) {
    var local_date = new Date();
    local_date.setTime((cjs.dic.get("util_date").getTimestamp() + (local_date.getTimezoneOffset() * 60) - cjs.Api.timezone.getGmtOffset()) * 1000);
    var local_date_start = Date.UTC(local_date.getFullYear(), local_date.getMonth(), local_date.getDate(), 0, 0, 0) / 1000 + cjs.Api.timezone.getGmtOffset();

    var _start = get_day_diff(start_time, local_date_start);
    if (!end_time)
        return [_start];

    var _end = get_day_diff(end_time, local_date_start);
    var ret = [];

    if (_end >= _start) {
        for (var i = _start; i <= _end; i++)
            ret.push(i);
    }

    return ret;
};

function get_day_diff(time1, time2) {
    var secondsPerDay = 24 * 60 * 60;
    var diffTime = (time1 - time2) / secondsPerDay;
    return Math.floor(diffTime);
};

/**
 * returns object { key: 'newKey', value: 'newValue'} for swapped participants updates
 */
function get_index_and_value_for_swapped(event_id, key, value) {
    var ret = {
        'key': key,
        'value': value
    };
    var lastCharIndex = key.length - 1;
    if (cjs.dic.get('dataEvent').getEventValue(event_id, feedIndexes.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS)) {
        if ($.inArray(key, [
                feedIndexes.FULLFEEDINDEXES_WINNER,
                feedIndexes.COMMONINDEXES_FT_WINNER,
                feedIndexes.SHAREDINDEXES_SERVICE
            ]) !== -1) {
            if (value == 2)
                ret.value = 1;
            else if (value == 1)
                ret.value = 2;
        } else {
            if ($.inArray(key, [
                    feedIndexes.SHAREDINDEXES_HOME_RED_CARD_COUNT,
                    feedIndexes.SHAREDINDEXES_HOME_HITS,
                    feedIndexes.SHAREDINDEXES_HOME_ERRORS,
                    feedIndexes.SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER,
                    feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT,
                    feedIndexes.SHAREDINDEXES_HOME_FULL_TIME_RESULT,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_5,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_6,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_7,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_8,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_9,
                    feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_X,
                    feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_1,
                    feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_2,
                    feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3,
                    feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4,
                    feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_5,
                    feedIndexes.FULLFEEDINDEXES_HOME_CRICKET_OVERS_FIRST_INNING,
                    feedIndexes.FULLFEEDINDEXES_HOME_TENNIS_GAME,
                    feedIndexes.FULLFEEDINDEXES_HOME_TEAM_LOGO,
                    feedIndexes.ODDSINDEXES_ODDS_AH1,
                    feedIndexes.ODDSINDEXES_ODDS_AH1_PREVIOUS,
                    feedIndexes.ODDSINDEXES_ODDS_ML1,
                    feedIndexes.ODDSINDEXES_ODDS_ML1_PREVIOUS,
                    feedIndexes.UPDATEINDEXES_HOME_SCORES_CHANGED,
                    feedIndexes.SHAREDINDEXES_HOME_GOAL_UNDER_REVIEW,
                    feedIndexes.UPDATEINDEXES_HOME_GOAL_DISALLOWED
                ]) !== -1) {
                ret.key = key.substr(0, lastCharIndex) + String.fromCharCode(key.charCodeAt(lastCharIndex) + 1);
            } else if ($.inArray(key, [
                    feedIndexes.SHAREDINDEXES_AWAY_RED_CARD_COUNT,
                    feedIndexes.SHAREDINDEXES_AWAY_HITS,
                    feedIndexes.SHAREDINDEXES_AWAY_ERRORS,
                    feedIndexes.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER,
                    feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT,
                    feedIndexes.SHAREDINDEXES_AWAY_FULL_TIME_RESULT,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_3,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_4,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_5,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_6,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_7,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_8,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_9,
                    feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_X,
                    feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_1,
                    feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_2,
                    feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3,
                    feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4,
                    feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_5,
                    feedIndexes.FULLFEEDINDEXES_AWAY_CRICKET_OVERS_FIRST_INNING,
                    feedIndexes.FULLFEEDINDEXES_AWAY_TENNIS_GAME,
                    feedIndexes.FULLFEEDINDEXES_AWAY_TEAM_LOGO,
                    feedIndexes.ODDSINDEXES_ODDS_AH2,
                    feedIndexes.ODDSINDEXES_ODDS_AH2_PREVIOUS,
                    feedIndexes.ODDSINDEXES_ODDS_ML2,
                    feedIndexes.ODDSINDEXES_ODDS_ML2_PREVIOUS,
                    feedIndexes.UPDATEINDEXES_AWAY_SCORES_CHANGED,
                    feedIndexes.SHAREDINDEXES_AWAY_GOAL_UNDER_REVIEW,
                    feedIndexes.UPDATEINDEXES_AWAY_GOAL_DISALLOWED
                ]) !== -1) {
                ret.key = key.substr(0, lastCharIndex) + String.fromCharCode(key.charCodeAt(lastCharIndex) - 1);
            } else if (key == feedIndexes.ODDSINDEXES_ODDS_1 || key == feedIndexes.ODDSINDEXES_ODDS_1_PREVIOUS) {
                ret.key = key.substr(0, lastCharIndex) + String.fromCharCode(key.charCodeAt(lastCharIndex) + 2);
            } else if (key == feedIndexes.ODDSINDEXES_ODDS_2 || key == feedIndexes.ODDSINDEXES_ODDS_2_PREVIOUS) {
                ret.key = key.substr(0, lastCharIndex) + String.fromCharCode(key.charCodeAt(lastCharIndex) - 2);
            }
        }
    }
    return ret;
};

function isSortByTime() {
    var page = cjs.dic.get('util_page');
    var isCategoryPage = page.isCountryPage() && cjs.dic.get('utilSport').hasCategoryPage(sport_id);
    var isMotorsportCategoryPage = isCategoryPage && cjs.dic.get('utilSport').inGroup(sport_id, cjs.Api.constantsManager.getSports().MOTORSPORT);
    var isCategoryPageWithHistoryTournaments = isCategoryPage && updater.country_tournament_order_fin;

    if (isMotorsportCategoryPage) {
        return false;
    } else if (isCategoryPageWithHistoryTournaments || page.isParticipantPage()) {
        return true;
    }

    return (page.isSeasonPage() && sport != 'golf' || page.isTournamentPagePassiveTable() || page.isTournamentSubPage()) && !cjs.dic.get('utilSport').isStageSport(sport_id) ?
        true :
        cjs.cfg.sortByTime;
};

function isSortDesc() {
    var page = cjs.dic.get('util_page');
    var isFsCategoryPage = page.isCountryPage() && cjs.dic.get('utilSport').hasCategoryPage(sport_id);

    if (page.isCountryPage() && cjs.dic.get('utilSport').inGroup(sport_id, cjs.Api.constantsManager.getSports().MOTORSPORT) ||
        page.isParticipantPage() && cjs.dic.get('utilSport').isMeetingSport(sport_id)) {
        return true;
    }

    return page.isSeasonPage() || isFsCategoryPage ? updater.country_tournament_order_fin : false;
};

cjs.fromGlobalScope.isSortDesc = isSortDesc;

/** sort data by cjs.cnf preferences
 */
function sort_fs_data(inDetail) {
    inDetail = inDetail || false;
    cjs.dic.get('dataLeagueHolderProxy').getHandler().resetIds();
    var dataHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    var utilPage = cjs.dic.get("util_page");
    dataHandler.resetIds();

    if ((!cjs.dic.get("util_sport").hasCategoryPage(sport_id) && utilPage.isCountryPage()) || !!utilPage.isDetailPage() || inDetail) {
        return;
    }
    dataHandler.sort();
};

function get_mygames_cookie_name() {
    return 'fsdc_my_local';
};

cjs.fromGlobalScope.get_mygames_cookie_name = get_mygames_cookie_name;

function get_sport_time(time, sport_id, event_stage_id, data_stage_time) {
    sport_id = parseInt(sport_id);
    event_stage_id = parseInt(event_stage_id);
    time = parseInt(time);

    var reversedSportTime = cjs.dic.get('Helper_ReversedSportTime');
    return reversedSportTime.getTime(time, sport_id, event_stage_id, data_stage_time);
}

/** Reset data variables
 */
function reset_env() {
    if (typeof cjs !== 'undefined' && cjs.dic != null) {
        cjs.dic.get('dataEventHolderProxy').eachHolder(function(scope, holder) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return;
            }
            holder.reinit();
        });
        cjs.dic.get('dataLeagueHolderProxy').eachHolder(function(scope, holder) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return;
            }
            holder.reinit();
        });
        cjs.dic.get('dataEventHolderProxy').eachHandler(function(scope, handler) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return;
            }
            handler.resetIds();
        });
        cjs.dic.get('dataLeagueHolderProxy').eachHandler(function(scope, handler) {
            if ($.inArray(scope, ['mygames', 'default', 'temporary']) === -1) {
                return;
            }
            handler.resetIds();
        });
    }
    fs_counter = {};
    fs_update = new core_update();
    cjs.fromGlobalScope.fs_update = fs_update;
    fs_fade = new Array();
    fsEventsUpdatedStartTime = {};
};
// }}}

/** init environment
 * @param    string    sport_name                    name of desired sport
 * @param    string    [country_id = null]            id of desired country (from left menu)
 * @param    string    [tournament_id = null]            id of desired tournament (from left menu)
 * @param    bool    [country_order_fin = true]    order set to finished games
 */
function init(sport_name, country_id, tournament_id, country_tournament_order_fin, prev_category, prev_date, startUpdater, participant_id, seriesId) {
    if (typeof startUpdater == 'undefined') {
        startUpdater = true;
    }

    var utilPage = cjs.dic.get("util_page");

    // XXX Hack to partial work
    if (utilPage.isMixed()) {
        sport_name = 'soccer';
    }

    if (dof = clientStorage.get('fs_of_' + cjs.Api.config.get('app', 'lang', 'web'))) {
        default_odds_format = dof;
    }

    ajax_updater = 'update';

    initPush();

    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();
    refresh_utime = currentTimestamp;

    if (typeof SPORT_LIST[sport_name] == 'undefined') {
        return false;
    }

    if (typeof country_id == 'undefined' || country_id == 0) {
        country_id = null;
    }

    if (typeof tournament_id == 'undefined' || tournament_id == 0) {
        tournament_id = null;
    }

    if (typeof participant_id == 'undefined' || participant_id == 0) {
        participant_id = null;
    }

    if (typeof seriesId == 'undefined' || seriesId == 0) {
        seriesId = null;
    }

    if (typeof country_tournament_order_fin == 'undefined') {
        country_tournament_order_fin = true;
    }

    sport_id = mid_s;
    sport = sport_name;
    country = country_id;
    utilPage.setCountryId(country_id || 0);
    tournament = tournament_id;
    participant = participant_id;
    utilPage.setParticipantEncodedId(participant_id || '');
    series = seriesId;
    utilPage.setSeriesEncodedId(seriesId || '');
    utilPage.setFullPage(true);
    tournamentPage = tournament != null;
    utilPage.setTournamentPage(tournamentPage);

    initCategory(prev_category);

    // set date
    initDate(prev_date);

    initFeedRequest();
    initLsLoginClient();
    initMyGames();
    initMyLeagues();
    initLastSerialChecksum();

    // ajax sync
    updater = new CommCore(country, tournament, country_tournament_order_fin, null, null, participant, series);
    cjs.fromGlobalScope.updater = updater;

    initUpdatingMatches(country, startUpdater);
    initTooltip();
    debugWindowByClicks($('#project-debug'));

    cjs.Api.loader.get('tv/transactions').call();

    // feed service
    cjs.feedService[cjs.Feed_Service_LocalUpdate.NAME] = new cjs.Feed_Service_LocalUpdate(sport_id, function() {
        return cjs.feedRequest;
    }, function() {
        return window;
    }, function() {
        return fs_update;
    });
};

cjs.fromGlobalScope.init = init;

function initTooltip() {
    if (tt == null) {
        tt = new tooltip();
        tt.setHideCallback(function() {
            clearTimeout(core_update._tvTooltipTimeout);
            $('#tooltip-1').attr("isDelay", "0");
        });
    }
}

function debugWindowByClicks(el) {
    if (dic.get('util_browser').isMobile()) {
        var debugWindowEl = $(el);
        debugWindowEl.show();

        (function() {
            var debugWindowCountdown = 0;
            var debugWindowTimer = null;
            debugWindowEl.click(function(e) {
                clearTimeout(debugWindowTimer);
                debugWindowTimer = setTimeout(function() {
                    debugWindowCountdown = 0;
                }, 2000);
                debugWindowCountdown++;
                if (debugWindowCountdown == 10) {
                    cjs.dev.init(function() {
                        cjs.dev.debugWindow.show();
                    });
                }
            });
        })();
    }
};

function initLastSerialChecksum() {
    var last_serial_checksum = retrieve_last_serial_checksum();
    if (last_serial_checksum) {
        if (last_serial_checksum[0] == refresh_serial) {
            // Force refresh failure
            if (last_serial_checksum[2] != "sent") {
                send_refresh_failure_message();
                store_last_serial_checksum(refresh_serial + "-" + last_serial_checksum[1] + "-sent");
            }
        } else {
            clear_last_serial_checksum();
        }
    }
};

function initMyLeagues() {
    if (typeof cjs.myLeagues == 'undefined') {
        cjs.myLeagues = new cjs.TopLeagues();
    }
};

function initPush(action, fallback) {
    action = action || cjs.Api.ajaxSyncTime.ACTION_UPDATE;
    fallback = fallback || push_fallback;

    if (typeof mpe_alias === 'undefined') {
        var mpe_alias = 'p1:100, p2:100, p3:100, p4:100, p5:100, p6:100, p7:100, p8:100, p9:100, p10:100';
    }

    if (typeof cjs.push === 'undefined') {
        var pushParameters = {
            "domain": 'fsdatacentre.com',
            "aliases": 'p1:100, p2:100, p3:100, p4:100, p5:100, p6:100, p7:100, p8:100, p9:100, p10:100',
            "port": 443,
            "sslEnabled": true,
            "migPush": new PushClient,
            "namespace": '/fs/fs3_',
            "projectId": 13,
            "jsxCompressor": JXG,
            "fallbackMethod": fallback,
            "fallbackDelay": cjs.Api.ajaxSyncTime.getTime(action),
            "enabled": mpe_delivery == 'p',
        };

        cjs.Api.loader.get('synchronizationPush').call(pushParameters, function(module) {
            cjs.push = module;
        });
    }
};

cjs.fromGlobalScope.initPush = initPush;

function initStaticPagesGamesNotification() {
    initLsLoginClient();
    cjs.disableRedrawUserSettings = true;

    if (cjs.Api.config.get('app', 'game_notification_push', 'enable')) {
        cjs.gamesNotificationOnly = true;
        initPush(null, function() {});
        cjs.Api.loader.get('synchronizationPushInstance').call(function(_push) {
            _push.enable(true);
            push_connect();
            initMyGames();
            push_update_subscription();
        });
    } else {
        cjs.isStaticPage = true;
    }
}

cjs.fromGlobalScope.initStaticPagesGamesNotification = initStaticPagesGamesNotification;

function initUpdatingMatches(country, startUpdater) {
    var readyCallback = null;
    if (startUpdater) {
        updater.is_updater_started = true;
        // hide advertisment label under banner
        $('.adsghori').hide();

        var param = 'full';

        if (country === null) {
            param = 'full';
        } else if (participant !== null) {
            param = 'participant';
        } else if (series !== null) {
            param = 'series';
        } else if (tournament !== null) {
            param = 'tournament';
        } else if (country !== null) {
            param = 'country';
        }

        setupInitialLoading(param);

        readyCallback = function() {
            if (param === 'full') {
                updater.doc_update('full');
            } else {
                setTimeout(function() {
                    updater.doc_update(param);
                }, 10);
            }
        };
    } else {
        readyCallback = function() {
            try {
                document.lsadvert_display();
            } catch (e) {}
        };
    }

    var dicProxy = cjs.dic.get('DicProxy');
    dicProxy.onReady(readyCallback);
};

function initDate(previousDate) {
    var prev_date = parseInt(previousDate);
    if (!isNaN(prev_date))
        sudate = prev_date;
    else {
        prev_date = clientStorage.get('fs_date', 'parent');
        if (null !== prev_date) {
            prev_date = parseInt(prev_date);
            if (!isNaN(prev_date)) {
                sudate = prev_date;
            }
            clientStorage.drop('fs_date');
        }
    }
};

function initCategory(previousCategory) {

    var prev_category = parseInt(previousCategory);
    if (!isNaN(prev_category)) {
        category = prev_category;
    } else {
        var window_location = new String(window.location);
        if (window_location.match(/cat=/)) {
            var pos = window_location.indexOf('cat=');
            prev_category = window_location.substr(pos + 4, 1);

            prev_category = cjs.dic.get('util_number').toNumber(prev_category);
            category = prev_category;
        }
    }
};

function initMyGames() {
    if (typeof cjs.mygames === 'undefined') {
        cjs.mygames = new cjs.MyGames(
            clientStorage,
            ls.loginClient,
            get_mygames_cookie_name(),
            '/',
            [function() {
                $("div#fscon #mygames-count").html('(' + cjs.mygames.getCount() + ')');
            }],
            SPORT_LIST_BY_ID,
            function() {
                return sudate;
            },
            $,
            get_match_day,
            project_id,
            cjs.cfg,
            cjs.Api.timezone.getGmtOffset.bind(cjs.Api.timezone),
            isNoDuelTournament,
            function() {
                return fsEventsUpdatedStartTime;
            }
        );
        cjs.mygamesGroups = new cjs.MyGamesGroups(cjs.mygames, cjs.cfg);

        cjs.Api.loader.get('myGames').fulfill(function(callback) {
            callback(cjs.mygames);
        });
    }
};

cjs.fromGlobalScope.initMyGames = initMyGames;

function initLsLoginClient() {
    lsid_init();
    // Livescore Setting
    cjs.livescoreSettings = new cjs.LivescoreSettings(ls.loginClient, cjs.cfg);
    if (sport_id !== null) {
        my_leagues_init(sport_id);
    }
    if (cjs.dic.get("util_page").isMixed()) {
        cjs.MyLeagues.prototype.isEditable = function() {
            return false
        };
    }

    var reloadMyGamesTab = function() {
        if (cjs.dic.get('list_navigation').isMyGames()) {
            var myTeams = cjs.dic.exists('myTeams') ? cjs.dic.get('myTeams') : null;

            if (myTeams != null) {
                if (myTeams.getCount()) {
                    myTeams.reloadParticipants();
                } else {
                    loadAndShowMygamesContent();
                    myTeams.callReactUpdates();
                }
            } else {
                loadAndShowMygamesContent();
            }
        } else {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadMyGamesTabCounter();
            });
        }
    };
    ls.loginClient.registerCallback('login', function() {
        cjs.mygames.load();
        cjs.livescoreSettings.loadUserSettings();
        redrawLivescore();
        reloadMyGamesTab();
        push_update_subscription();
        $(".seoTop").hide().addClass('seoTopHidden');
        document.body.classList.remove('seoTopWrapperHidden');
    });
    ls.loginClient.registerCallback('logout', function() {
        cjs.mygames.drop();
        cjs.livescoreSettings.restoreDefaults();
        redrawLivescore();
        reloadMyGamesTab();
        push_update_subscription();
    });
    ls.loginClient.registerCallback('dataSyncChange/myLeagues', redrawLivescore);
    ls.loginClient.registerCallback('dataSyncChange/lstv', redrawLivescore);
    ls.loginClient.registerCallback('dataSyncChange/mygames', function() {
        cjs.mygames.load();
        redrawLivescore();
        reloadMyGamesTab();
    });
    ls.loginClient.registerCallback('dataSyncChange/lsSettins', function() {
        cjs.livescoreSettings.loadUserSettings();
        redrawLivescore();
    });
};

function initFeedRequest() {
    if (typeof(cjs.feedRequest) !== 'undefined') {
        return;
    }

    cjs.feedRequest = (new cjs.Feed_Request.Builder())
        .setDic(cjs.dic)
        .setUpdaterGetter(function() {
            return updater;
        })
        .setCreateAjaxJqObject(cjs.dic.get('utilEnviroment').createAjaxFeedObject)
        .setBaseFeedXUrlGetter(function() {
            return base_feed_x_url;
        })
        .setProjectTypeIdGetter(function() {
            return project_type_id;
        })
        .setLocalLanguageGetter(function() {
            return cjs.Api.config.get('app', 'lang', 'web');
        })
        .setSudateGetter(function() {
            return sudate;
        })
        .setPageUtimeGetter(function() {
            return cjs.dic.get("util_date").getTimestamp();
        })
        .setSportIdGetter(function() {
            return parseInt(sport_id);
        })
        .setIsMixedFeedGetter(function() {
            return cjs.dic.get("util_page");
        })
        .setIsParticipantDetailGetter(function() {
            return cjs.dic.get("util_page").isDetailParticipantPage();
        })
        .setDetailFeedGeoIpHeadersGetter(function() {
            if (cjs.geoIP) {
                return {};
            }
            return {
                'X-GeoIP': 1
            };
        })
        .setIsLiveOddsGetter(function() {
            return sub_category == 3 ? 1 : 0;
        })
        .setDetailMainBookmakerGetter(function() {
            return cjs.dic.get('Feed_Content_LiveOdds').getBookmakerId();
        })
        .setEventParticipantIdGetter(function() {
            return (typeof eventParticipantId !== 'undefined' ? eventParticipantId : '');
        })
        .setOddsFormatGetter(function() {
            return get_odds_format();
        })
        .setTournamentStageIdGetter(function() {
            var drawUrl = location.hash.match(/^#draw;([a-z0-9]{8});([a-z0-9]{8}):/i);
            return drawUrl != null && typeof drawUrl[2] != 'undefined' ? drawUrl[2] : tournamentStageEncodedId;
        })
        .setIsTournamentPagesEnableGetter(function() {
            return true;
        })
        .setProjectIdGetter(function() {
            return project_id;
        })
        .setExternalProjectIdGetter(function() {
            return cjs.dic.get('application').getExternalProjectId();
        })
        .build();
    cjs.feedLoader = new cjs.Feed_Loader();
};

cjs.fromGlobalScope.initFeedRequest = initFeedRequest;

function redrawLivescore() {
    var isTournamentPage = cjs.dic.get('util_page').isTournamentPage();
    if (cjs.redrawLivescoreCalled || (!cjs.full_loaded && !isTournamentPage)) {
        return;
    }
    cjs.redrawLivescoreCalled = true;
    setTimeout(function() {
        delete(cjs.redrawLivescoreCalled);
        cjs.livescoreSettings._redrawLivescore(true);
        cjs.Api.loader.get('react').call(function(reactCalls) {
            reactCalls.reloadStaticContent();
        });
    }, 100);
};

function createDefaultMatchItem(sportId, sportName) {
    var match = {};
    var sportList = cjs.Api.constantsManager.getSports();

    match[feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT] = 0;
    match[feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT] = 0;
    match[feedIndexes.SHAREDINDEXES_LIVE] = 'n';
    match[feedIndexes.SHAREDINDEXES_HOME_RED_CARD_COUNT] = 0;
    match[feedIndexes.SHAREDINDEXES_AWAY_RED_CARD_COUNT] = 0;
    match[feedIndexes.UPDATELOCALINDEXES_HAS_TV_OR_LIVESTREAMING] = '';
    match[feedIndexes.UPDATELOCALINDEXES_INFO_NOTICE] = '';
    match[feedIndexes.FULLFEEDINDEXES_HAS_LIVE_BETTING] = 'n';
    match[feedIndexes.SHAREDINDEXES_PERIOD_START_UTIME] = 0;
    match[feedIndexes.SHAREDINDEXES_MATCH_END_UTIME] = 0;
    match[feedIndexes.UPDATEINDEXES_PERIOD_UPDATE_UTIME] = 0;
    match[feedIndexes.FULLFEEDINDEXES_WINNER] = 0;
    match[feedIndexes.SHAREDINDEXES_HOME_FULL_TIME_RESULT] = '';
    match[feedIndexes.SHAREDINDEXES_AWAY_FULL_TIME_RESULT] = '';
    match[feedIndexes.SHAREDINDEXES_HIGHLIGHTS] = '';
    match[feedIndexes.SHAREDINDEXES_HAS_LIVE_CENTRE] = '';
    match[feedIndexes.SHAREDINDEXES_HAS_LINEUPS] = 0;
    match[feedIndexes.ODDSINDEXES_HAS_ODDS_COMPARISON] = '';
    match[feedIndexes.COMMONINDEXES_FT_WINNER] = '';
    match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1] = '';
    match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1] = '';
    match[feedIndexes.SHAREDINDEXES_SOURCE_TYPE_OF_GAME] = -1;
    match[feedIndexes.SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER] = 0;
    match[feedIndexes.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER] = 0;
    match[feedIndexes.FULLFEEDINDEXES_HOME_PARTICIPANT_COUNTRY_ID] = 0;
    match[feedIndexes.FULLFEEDINDEXES_AWAY_PARTICIPANT_COUNTRY_ID] = 0;
    match[feedIndexes.ODDSINDEXES_ODDS_1] = 0;
    match[feedIndexes.ODDSINDEXES_ODDS_2] = 0;
    match[feedIndexes.ODDSINDEXES_ODDS_1_PREVIOUS] = 0;
    match[feedIndexes.ODDSINDEXES_ODDS_2_PREVIOUS] = 0;
    match[feedIndexes.ODDSINDEXES_INACTIVE_ODDS] = '';
    match[feedIndexes.UPDATEINDEXES_HOME_SCORES_CHANGED] = 0;
    match[feedIndexes.UPDATEINDEXES_AWAY_SCORES_CHANGED] = 0;
    match[feedIndexes.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS] = 0;
    match[feedIndexes.UPDATEINDEXES_HOME_PENALTY_SHOT] = 0;
    match[feedIndexes.UPDATEINDEXES_AWAY_PENALTY_SHOT] = 0;
    match[feedIndexes.UPDATEINDEXES_HOME_PENALTY_MISSED] = 0;
    match[feedIndexes.UPDATEINDEXES_AWAY_PENALTY_MISSED] = 0;

    var sportOddsTypeList = cjs.Api.constantsManager.getSportOddsTypeList();

    if (sportOddsTypeList.hasOwnProperty(sportId) && sportOddsTypeList[sportId] == '1x2') {
        match[feedIndexes.ODDSINDEXES_ODDS_0] = 0;
        match[feedIndexes.ODDSINDEXES_ODDS_0_PREVIOUS] = 0;
    }

    if (sportId !== sportList.SOCCER) {
        var sportScore = SPORT_SCORE_PART_LIST[sportName];

        if (sportScore > 1) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2] = '';
        }
        if (sportScore > 2) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_3] = '';
        }
        if (sportScore > 3) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_4] = '';
        }
        if (sportScore > 4) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_5] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_5] = '';
        }
        if (sportScore > 5) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_6] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_6] = '';
        }
        //    preskakuju dalsi hodnoty, protoze je tam jen baseball s 10 polozkama (maximem)
        if (sportScore > 6) {
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_7] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_8] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_9] = '';
            match[feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_FIRST_HALF] = '';
            match[feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_SECOND_HALF] = '';
            match[feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_PENALTIES] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_7] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_8] = '';
            match[feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_9] = '';
            match[feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_FIRST_HALF] = '';
            match[feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_SECOND_HALF] = '';
            match[feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_PENALTIES] = '';
        }

        if ([sportList.HOCKEY, sportList.BASKETBALL, sportList.AMERICAN_FOOTBALL, sportList.FUTSAL].indexOf(sportId) !== -1) {
            match[feedIndexes.SHAREDINDEXES_GAME_TIME] = '';
        }

        if ([sportList.AMERICAN_FOOTBALL, sportList.BASEBALL, sportList.CRICKET, sportList.DARTS, sportList.TENNIS].indexOf(sportId) !== -1) {
            match[feedIndexes.SHAREDINDEXES_SERVICE] = 0;

            if (sportId === sportList.DARTS) {
                match[feedIndexes.FULLFEEDINDEXES_PLAYING_ON_SETS] = 0;
            } else if (sportId === sportList.BASEBALL) {
                match[feedIndexes.SHAREDINDEXES_HOME_HITS] = '';
                match[feedIndexes.SHAREDINDEXES_AWAY_HITS] = '';
                match[feedIndexes.SHAREDINDEXES_HOME_ERRORS] = '';
                match[feedIndexes.SHAREDINDEXES_AWAY_ERRORS] = '';
            } else if (sportId === sportList.TENNIS) {
                match[feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_1] = '';
                match[feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_1] = '';
                match[feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_2] = '';
                match[feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_2] = '';
                match[feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3] = '';
                match[feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3] = '';
                match[feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4] = '';
                match[feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4] = '';
                match[feedIndexes.FULLFEEDINDEXES_HOME_TENNIS_GAME] = '';
                match[feedIndexes.FULLFEEDINDEXES_AWAY_TENNIS_GAME] = '';
            }
        }

        if ([sportList.DARTS, sportList.SNOOKER].indexOf(sportId) !== -1) {
            match[feedIndexes.FULLFEEDINDEXES_BEST_OF_FRAMES] = 0;
            match[feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT] = '-';
            match[feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT] = '-';
        }

        if (sportId === sportList.GOLF) {
            match[feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT] = '';
            match[feedIndexes.SHAREDINDEXES_PARTICIPANT_STATUS] = 0;
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4] = '';
            match[feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_5] = '';
            match[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] = '';
            match[feedIndexes.SHAREDINDEXES_RANK] = '';
        }

        if (sportId === sportList.AUSSIE_RULES) {
            match[feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT] = '.0.0.0';
            match[feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT] = '.0.0.0';
        }
    }

    return match;
};

function init_after_feeds() {
    if (!cjs.full_loaded || !cjs.repair_loaded)
        return;

    // update counter
    if (counter_update_interval === null) {
        counter_update_interval = setInterval('counter_update()', 5 * 1000);
    }

    set_service_status();
};

function start_updating_odds() {
    if (typeof updater.updating_odds_interval != 'undefined')
        stop_updating_odds();
    updater.updating_odds_interval = setInterval('updater.doc_update(\'updated-odds\')', Number(updater.ajax_odds_update_time) * 1000);
};

function stop_updating_odds() {
    clearInterval(updater.updating_odds_interval);
    delete updater.updating_odds_interval;
};

function detail_init(sport_name, game_id, content_utime) {
    ajax_updater = 'game';
    u_304 = '';

    if (typeof SPORT_LIST[sport_name] == 'undefined')
        return false;

    if (typeof game_id == 'undefined')
        return false;

    cjs.eventId = game_id;
    var utilPage = cjs.dic.get("util_page");

    utilPage.setDetailPage();

    if (typeof content_utime == 'undefined')
        return false;

    sport = sport_name;

    if (typeof cjs.Detail_TimeCounter !== 'undefined') {
        cjs.detailTimeCounter = new cjs.Detail_TimeCounter({
            sportIdGetter: function() {
                return parseInt(sport_id);
            },
            pageUtimeGetter: function() {
                return cjs.dic.get("util_date").getTimestamp();
            },
            gameStageUtimeGetter: function() {
                return g2utime;
            },
            hasLiveCenterGetter: function() {
                return hasLiveCentreEnabled;
            },
            eventStageIdGetter: function() {
                return event_stage_id;
            },
            isRugby7Getter: function() {
                return typeof fs_detail[feedIndexes.COMMONINDEXES_IS_7_RUGBY] !== 'undefined' && fs_detail[feedIndexes.COMMONINDEXES_IS_7_RUGBY];
            }
        });
    }

    const detailTvInit = () => {
        cjs.Api.loader.get("detail/tv").call((lstv) => {
            if (lstv) {
                cjs.Api.detailTabs.setUserHasPaidTvStream(lstv.getChannel().getIsPaid());
            }
            cjs.Api.detailTabs.show();
        });
    };

    sport_id = mid_s;
    cjs.Api.detailTabs.show();
    cjs.Api.loader.get("geoIpResolver").call(() => {
        if (cjs.Api.config.get("app", "tv", "enabled")) {
            detailTvInit();
        } else {
            cjs.Api.detailTabs.show();
        }
    });

    // ajax sync
    updater = new CommCore(null, null, true, game_id, content_utime);
    cjs.fromGlobalScope.updater = updater;
    initFeedRequest();

    var isDetailV2 = cjs.Api.config.get("app", "detail", "version") == 2;
    var pushNotificationsEnabled = cjs.Api.config.get('app', 'game_notification_push', 'enable') == true;
    var isPushEnabled = mpe_delivery == 'p';

    if (isPushEnabled) {
        cjs.gamesNotificationOnly = false;
    } else if (isDetailV2 && pushNotificationsEnabled) {
        cjs.gamesNotificationOnly = true;
    }

    utilPage.setFullPage(isDetailV2);
    initPush(cjs.Api.ajaxSyncTime.ACTION_GAME);

    cjs.Api.loader.get("synchronizationPushInstance").call(function(_push) {
        if (isPushEnabled) {
            _push.enable(true);
            push_connect();
        } else {
            _push.scheduleFallback(0);
            setTimeout('push_refresh()', 20 * 1000);
        }
    });

    if (cjs.Api.config.get('app', 'myteams', 'enable') == true) {
        myTeamsInit(sport_id);
    }

    initMyGames();

    cjs.Api.loader.get('syncIndicator').call(function(indicator) {
        indicator.update('off');
    });

    if (!utilPage.isDetailParticipantPage()) {
        if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_COMMON_HASH)) {
            updater.doc_update('detail');
        } else {
            detail_format_utime();
            detail_set_odds_winner();
        }
    }

    // update counter
    cjs.detailTimeCounter.start();

    tt = new tooltip(isDetailV2 ? '' : 'detail');
    ttball = new tooltip(null, 'ball');

    if (event_stage_type_id == 2 && typeof match_history_tab_stages[event_stage_id] != 'undefined') {
        detail_tabs.tabs.tab_match_history.selected = match_history_tab_stages[event_stage_id] + '_history';
    }

    $(".dw-icon").attr("title", cjs.dic.get('utilTrans').translate('TRANS_WINNER_TOOLTIP'));
    $(".dw-icon.win").attr("title", cjs.dic.get('utilTrans').translate('TRANS_WINNER'));

    try_alien_referer_protection();

    // Tennis H2H is divided into surfaces, not Overall/Home/Away - overriding tabs
    if (sport == 'tennis') {
        detail_tabs.tabs.tab_head_2_head.tabs = {
            tab_all_h2h: {
                tabElement: {
                    id: "h2h-all-surface"
                },
                contentElement: {
                    id: "tab-h2h-all-surface"
                },
                urlName: "all"
            },
            tab_1_h2h: {
                tabElement: {
                    id: "h2h-1-surface"
                },
                contentElement: {
                    id: "tab-h2h-1-surface"
                },
                urlName: "1"
            },
            tab_2_h2h: {
                tabElement: {
                    id: "h2h-2-surface"
                },
                contentElement: {
                    id: "tab-h2h-2-surface"
                },
                urlName: "2"
            },
            tab_3_h2h: {
                tabElement: {
                    id: "h2h-3-surface"
                },
                contentElement: {
                    id: "tab-h2h-3-surface"
                },
                urlName: "3"
            }
        };
    }

    ls.loginClient.registerCallback('login', function() {
        detailTvInit();
    });

    registerDetailTabCallbacks();
};

cjs.fromGlobalScope.detail_init = detail_init;

function setHolderProxyScope(category) {
    var holderProxyProto = cjs.dic.getClass('dataHolderProxy').prototype;
    var scope;
    switch (category) {
        case 5:
            scope = holderProxyProto.SCOPE_MYGAMES;
            break;
        default:
            scope = holderProxyProto.SCOPE_DEFAULT;
    }

    var holderEventProxy = cjs.dic.get('dataEventHolderProxy');
    var holderLeagueProxy = cjs.dic.get('dataLeagueHolderProxy');
    var previousScopeEvent = holderEventProxy.getScope();
    var previousScopeLeague = holderLeagueProxy.getScope();
    var dataEventHolderOld, dataEventHolderNew, dataLeagueHolderOld, dataLeagueHolderNew;

    if (previousScopeEvent !== scope) {
        if (sudate == 0 && previousScopeEvent === previousScopeLeague && previousScopeEvent === holderProxyProto.SCOPE_DEFAULT && scope === holderProxyProto.SCOPE_MYGAMES) {
            dataEventHolderOld = cjs.dic.get('dataEventHolder');
            dataEventHolderNew = cjs.dic.get('dataEventHolderMygames');
            dataLeagueHolderOld = cjs.dic.get('dataLeagueHolder');
            dataLeagueHolderNew = cjs.dic.get('dataLeagueHolderMygames');
            dataEventHolderNew.reinit(dataEventHolderOld.getReferences());
            dataLeagueHolderNew.reinit(dataLeagueHolderOld.getReferences());
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope);
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
        } else if (sudate == 0 && previousScopeEvent === previousScopeLeague && previousScopeEvent === holderProxyProto.SCOPE_MYGAMES && scope === holderProxyProto.SCOPE_DEFAULT) {
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope);
        } else {
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
            holderEventProxy.setScope(scope);
            holderLeagueProxy.setScope(scope);
            holderEventProxy.getHolder().reinit();
            holderLeagueProxy.getHolder().reinit();
            holderEventProxy.getHandler().resetIds();
            holderLeagueProxy.getHandler().resetIds();
        }
    }
};

function updateNonMyGamesTabs() {
    if (updater.last_doc_update_category == 5) {
        if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData()) {
            sort_fs_data();
            updater.last_doc_update_category = category;
        } else {
            updater.last_doc_update_category = category;
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadDay(0);
            });
        }
    }

    return true;
};

function display_banners() {
    cjs.Api.loader.get('boxContentManager').call(function(boxContentManager) {
        boxContentManager.show(cjs.geoIP, ["over", "over_self_promo", "under"]);
    });

    // display banners
    try {
        parent.document.lsadvert_display();
        banners.setAdBlockedCallback(function(blocked, browser) {
            cjs.Api.loader.get('util/adblocked').call(function(adBlocked) {
                adBlocked.save(blocked, browser);
            });
        });

        var bannersDisplayedCallbacks = [];

        if (typeof cjs.myLeaguesMenu != 'undefined') {
            bannersDisplayedCallbacks.push(function() {
                cjs.myLeaguesMenu.draw()
            });
        }

        if (cjs.Api.config.get('app', 'google_analytics', 'event_tracking')) {
            bannersDisplayedCallbacks.push(function() {
                e_t.bindAdsCallbackClick()
            });
        }
        bannersDisplayedCallbacks.push(function() {
            cjs.Api.loader.get('util/advert/cleaner').call()
        });
        banners.setDisplayedCallback(function() {
            for (var callbackIndex = 0; callbackIndex < bannersDisplayedCallbacks.length; callbackIndex++) {
                if (Object.prototype.toString.call(bannersDisplayedCallbacks[callbackIndex]) == '[object Function]') {
                    bannersDisplayedCallbacks[callbackIndex]();
                }
            }
        });

        banners.addOrCallAdblockPlusCallback(function(usesABP) {
            if (usesABP && cjs.bannerScrollManager) {
                cjs.bannerScrollManager.disableScrollingOfAllBanners();
            }
        });
    } catch (e) {
        try {
            document.lsadvert_display();
        } catch (e) {}
    }

    // show advertisment labels after content is displayed
    $('.adsghori').show();
};

function hideOddsBasicInfoBox() {
    var basicInfoTextContent = $("div.odds__message");
    if (basicInfoTextContent.length) {
        basicInfoTextContent.remove();
    }
}

function showOddsBasicInfoBox(isOdds) {
    bookmakersWithOdds = {};
    var isClickable = cjs.dic.get('Helper_ClickableBookmaker').isClickable(cjs.dic.get('util_enviroment').getGlobalGeoIp(), cjs.dic.get('util_enviroment').getGeoIpIsoSubdivisionCode0());

    if (isOdds && cjs.Api.config.get('app', 'odds', 'betting_light_version') && isClickable) {
        var eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
        var events = eventHolderProxy.getHandler().getIds().slice(0);

        events.forEach(function(event) {
            var eventId = cjs.mygamesGroups.showOnPage() ? event.id : event;
            var eventMainBookmakerId = eventHolderProxy
                .getHolder()
                .getEvent(eventId)
                .getMainBookmakerId();

            if (eventMainBookmakerId) {
                bookmakersWithOdds[eventMainBookmakerId] = 1;
            }
        });

        $('td[data-bookmaker-id], span[data-bookmaker-id]').map(function() {
            var bookmakerId = $(this).data('bookmaker-id');
            bookmakersWithOdds[bookmakerId] = 1;
        });

        var bookmakerIds = Object.keys(bookmakersWithOdds);
        if (bookmakerIds.length) {
            cjs.Api.loader.get('bookmakerSettings').call(function(module) {
                var bookmakerNames = [];
                bookmakerIds.forEach(function(bookmakerId) {
                    bookmakerNames.push(module.getBookmakerNameByGeoIpAndId(cjs.geoIP, cjs.geoIPIsoSubdivisionCode0, parseInt(bookmakerId)));
                });

                var _html = [];
                _html.push('<div class="odds__message">' + cjs.dic.get('util_trans').translate('TRANS_ODDS_POWERED_BY_IN_LIVE_TABLE', [bookmakerNames.join(', ')]) + '</div>');

                hideOddsBasicInfoBox();
                $(_html.join('')).insertAfter($('div.event.odds'));
            });
        }
    }
}

function oddsActionsAfterContentGenerated(isOdds) {
    showOddsBasicInfoBox(isOdds);

    cjs.Api.loader.get('syncIndicator').call(function(indicator) {
        indicator.update('off');
    });

    if (isOdds) {
        push_update_subscription(); // hack - tohle neni udelane jeste ciste
        preload_hide();
        cjs.Api.loader.get('react').call(function(reactCalls) {
            reactCalls.loadingState("odds", false);
        });
        banner_show();
    }

    setTimeout(function() {
        if_resize();
    }, 5);

    if (isOdds) {
        // regenerate live sync
        if (interval_live != null) {
            clearInterval(interval_live);
            interval_live = null;
        }
    } else {
        var externalProjectId = cjs.dic.get('application').getExternalProjectId();
        if (externalProjectId) {
            // make sure livescore resizes - for slow browsers
            setTimeout(function() {
                if_resize();
            }, 1000);
            setTimeout(function() {
                if_resize();
            }, 3000);
            setTimeout(function() {
                if_resize();
            }, 7000);
        }
    }

    var waypoint = cjs.dic.get('util_enviroment').getWaypoint();
    waypoint.refreshAll();
}

function no_match_found(cat, sportName) {
    if (sportName) {
        sport = sportName; //TODO pridani funkcionality kvuli reactu
    }

    cat = (typeof cat == 'undefined' ? category : cat);
    var no_match_text = '';
    var sportList = cjs.Api.constantsManager.getSports();
    var utilTrans = cjs.dic.get('utilTrans');

    var trans = 'MATCH';
    if (sport_id == sportList.GOLF) {
        trans = 'TOURNAMENT';
    } else if (cjs.dic.get('utilSport').isRacingSport(sport_id)) {
        trans = 'RACE';
        if (sport_id == sportList.HORSE_RACING) {
            trans = 'HORSE_RACE';
        } else if (cjs.dic.get('utilSport').inGroup(sport_id, sportList.WINTER_SPORTS)) {
            trans = 'WINTER_SPORTS_RACE';
        }
    }

    if (typeof cjs.filter != 'undefined' && cjs.filter.getSearchString()) {
        no_match_text = "<div class=\"nmf__title\">" + utilTrans.translate('TRANS_' + trans + '_LIST_NOT_FOUND') + "</div>";
    } else if (cat == 5) {
        no_match_text = "<div class=\"nmf__content nmf__content--mygames\">" +
            "<div class=\"nmf__text--mygames\"><div class=\"nmf__title\">No ha seleccionado ningÃºn partido.</div>" +
            "<div class=\"nmf__info\">Para seleccionar sus partidos, haga click sobre el icono situado junto a cualquier partido a lo largo de la Web.</div></div>" +
            "<div class=\"nmf__image\"></div>";
    } else if (cat == 10) {
        no_match_text = "<div class=\"nmf__content nmf__content--mygames\">" +
            "<div class=\"nmf__text--mygames\"><div class=\"nmf__title\">No ha seleccionado ningÃºn equipo.</div>" +
            "<div class=\"nmf__info\">Para seleccionar tus equipos, haz clic en el icono situado junto a los nombres de los equipos.</div></div>";
    } else if (cat == 1) {
        no_match_text = "<div class=\"nmf__title\">" + utilTrans.translate('TRANS_' + trans + '_LIST_NOT_FOUND_LIVE') + "</div>";
    } else if (cat == 0 && country == null && sudate == 0) {
        trans = 'TRANS_' + trans + '_LIST_NOT_FOUND_TODAY';
        if (sport_id == sportList.GOLF) {
            trans = 'TRANS_TOURNAMENT_LIST_NOT_FOUND_TODAY';
        } else if (cjs.dic.get('utilSport').isRacingSport(sport_id)) {
            trans = 'TRANS_RACE_LIST_NOT_FOUND_TODAY';
            if (sport_id == sportList.HORSE_RACING) {
                trans = 'TRANS_HORSE_RACE_LIST_NOT_FOUND_TODAY';
            } else if (cjs.dic.get('utilSport').inGroup(sport_id, sportList.WINTER_SPORTS)) {
                trans = 'TRANS_WINTER_SPORTS_RACE_LIST_NOT_FOUND_TODAY';
            }
        }

        no_match_text = "<div class=\"nmf__title\">" + utilTrans.translate(trans) + "</div>";

        var sportTranslation = cjs.dic.get('util_enviroment').getCompleteSportTranslations();
        var no_match_sport = sportTranslation[sport]['name'];
    } else {
        no_match_text = "<div class=\"nmf__title\">" + utilTrans.translate('TRANS_' + trans + '_LIST_NOT_FOUND') + "</div>";
    }

    var page = cjs.dic.get('util_page');
    var sportIconHTML = (!cjs.dic.get('List_Navigation').isMyGames()) ? '<div class="sportIcon sportIcon--' + sport + '"></div>' : '';
    return !page.isSeasonPage() ? '<div class="no-match-found nmf">' + sportIconHTML + no_match_text + '</div>' : '';

};

function pgenerate_odds() {
    setTimeout('updater.doc_update(\'odds\', true)', 100);
};

/**
 * Set a CSS class for mouseover event.
 * @param    int    id    id of game row
 */
function tr_over(element, param_hover_color) {
    //  .not clay,grass,hard for tennis surfaces - those td's won't be colorated
    $(element).not(".clay, .grass, .hard").css('backgroundColor', param_hover_color);
    $(element).find("td.ah:not(.winH),td.ou:not(.winH),td.tp").addClass('tr_hover');

    var cursor = 'pointer';
    var id = null;
    if ($(element).get(0).id) {
        id = $(element).get(0).id;
    } else if (getIdFromClass($(element).attr('class'))) {
        id = getIdFromClass($(element).attr('class'));
    } else {
        $(element).css('cursor', cursor);
        return;
    }

    var sportId = parseInt(id.split('_')[1]);
    if (cjs.dic.get('util_sport').hasDisabledDetail(sportId)) {
        cursor = 'auto';
    }

    $(element).css('cursor', cursor);

    if (id.search("g") === 0) {
        $(element).next("tr[id*=x_], tr[class*=x_]")
            .css({
                backgroundColor: param_hover_color,
                cursor: cursor
            })
            .next("tr[id*=y_], tr[class*=y_]").css({
                backgroundColor: param_hover_color,
                cursor: cursor
            });
        $(element).next("tr[id*=x_], tr[class*=x_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover');
    } else if (id.search("x") === 0) {
        $(element).prev("tr[id*=g_], tr[class*=g_]").css({
            backgroundColor: param_hover_color,
            cursor: cursor
        });
        $(element).next("tr[id*=y_], tr[class*=y_]").css({
            backgroundColor: param_hover_color,
            cursor: cursor
        });
        $(element).prev("tr[id*=g_], tr[class*=g_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover');
    } else if (id.search("y") === 0) {
        $(element).prev("tr[id*=x_], tr[class*=x_]")
            .css({
                backgroundColor: param_hover_color,
                cursor: cursor
            })
            .prev("tr[id*=g_], tr[class*=g_]").css({
                backgroundColor: param_hover_color,
                cursor: cursor
            });
        $(element).prev("tr[id*=x_], tr[class*=x_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover');
        $(element).prev("tr[id*=x_], tr[class*=x_]").prev("tr[id*=g_], tr[class*=g_]").find("td.ah:not(.winH),td.ou:not(.winH)").addClass('tr_hover');
    }
};

/**
 * Set a CSS class for mouseout event.
 *
 * @param    int    id    id of game row
 */
function tr_out(element) {
    $(element).css('backgroundColor', '');
    $(element).find("td").removeClass('tr_hover');

    var id = $(element).get(0).id;

    if (!id) {
        id = getIdFromClass($(element).attr('class'));
    }
    if (!id) {
        return;
    }
    if (id.search("g") === 0) {
        $(element).next("tr[id*=x_], tr[class*=x_]")
            .css('backgroundColor', '')
            .next("").css('backgroundColor', '');
        $(element).next("tr[id*=x_], tr[class*=x_]").find("td").removeClass('tr_hover');
    } else if (id.search("x") === 0) {
        $(element).prev("tr[id*=g_], tr[class*=g_]").css('backgroundColor', '');
        $(element).next("tr[id*=y_], tr[class*=y_]").css('backgroundColor', '');
        $(element).prev("tr[id*=g_], tr[class*=g_]").find("td").removeClass('tr_hover');
    } else if (id.search("y") === 0) {
        $(element).prev("tr[id*=x_], tr[class*=x_]")
            .css('backgroundColor', '')
            .prev("tr[id*=g_], tr[class*=g_]").css('backgroundColor', '');
    }
};

cjs.fromGlobalScope.detail_open = function(_id, _tab, _checkHolder) {
    cjs.Api.loader.get('detail/opener').call(_id, _tab, _checkHolder)
};

function bookmaker_open(link, bookmakerId, betslip) {
    if (betslip) {
        var width = 0;
        var height = 0;
        cjs.Api.loader.get('bookmakerSettings').call(function(module) {
            var betslipWindow = module.getBetslipWindow(bookmakerId);
            width = betslipWindow.getWidth();
            height = betslipWindow.getHeight();
        });

        var params = '';
        if (width && height) {
            params = 'hotkeys=no, resizable=no, toolbar=no, status=no, dependent=yes, scrollbars=1, width=' + width + ', height=' + height;
        }
        var detail_window = window.open(link, "betslip", params);
        if (!detail_window.closed) {
            detail_window.focus();
        }
    } else {
        window.open(link);
    }
};

function store_last_serial_checksum(content, valid_time) {
    if (typeof valid_time == 'undefined')
        valid_time = 360;

    clientStorage.store('LS_last_serials', content, valid_time * 86400);
};

function retrieve_last_serial_checksum() {
    var result = clientStorage.get('LS_last_serials');

    if (result) {
        result = result.split('-');
        return result;
    }

    return null;
};

function clear_last_serial_checksum() {
    store_last_serial_checksum(null, 0);
};

function check_static_serial(value) {
    var cookieCheck = true;
    var last_serial_checksum = retrieve_last_serial_checksum();
    if (last_serial_checksum) {
        if (last_serial_checksum[1] == value)
            cookieCheck = false;
    }
    if (value != refresh_serial && refresh_in_progress == null && cookieCheck) {
        store_last_serial_checksum(refresh_serial + "-" + value);
        refresh_document(true, 'long');
    }
};

function send_refresh_failure_message() {
    // log refresh serial is Off
    var logOff = true;
    if (logOff) {
        return;
    }

    var pf_dd = null;
    var pf_pdd = null;
    try {
        var pf_dd = document.domain;
        var pf_pdd = parent.document.domain;
    } catch (e) {}

    var log_content = "serial=" + refresh_serial;
    log_content += "&browser_ver=" + navigator.appVersion;
    log_content += "&browser_lang=" + (navigator.userLanguage || navigator.language);
    log_content += "&dd=" + pf_dd;
    log_content += "&pdd=" + pf_pdd;
    ajax["refresh_fail"] = new cjs.AjaxJqObject(base_url_protocol + "/res/ajax/refresh-fail.php?");
    ajax["refresh_fail"].update(log_content, 'POST');
};

function refresh_document(force_reload, type) {
    if (typeof type == 'undefined') {
        refresh_in_progress = setTimeout("reload(" + force_reload + ")", (Math.random() * 40 + 20) * 1000);
    } else if (type == 'long') {
        refresh_in_progress = setTimeout("reload(" + force_reload + ")", (Math.random() * 180 + 120) * 1000);
    }
};

function reload(force_reload) {
    if (force_reload || true) {
        var url, message = "reload:" + sudate + "-" + category;
        var matches = /^([^#]+)#(.*)\breload:([0-9]+\-[0-9])(.*)$/.exec(parent.location.href);
        if (matches)
            url = matches[1] + "#" + matches[2] + message + (matches[4].length ? ";" + matches[4] : "");
        else {
            matches = /^([^#]+)#(.*)$/.exec(parent.location.href);
            if (matches)
                url = matches[1] + "#" + (matches[2].length ? matches[2] + ";" : "") + message;
            else
                url = parent.location.href + "#" + message;
        }
        parent.location.href = url;
        parent.location.reload();
    } else
        updater.doc_resume();
};

/** Correct play time of matches
 */
function counter_update() {
    var eventHandler = cjs.dic.get('dataEventHolderProxy').getHandler();
    var eventHolder = cjs.dic.get('dataEventHolderProxy').getHolder();
    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();
    var reloadEvents = {};

    eventHandler.each(function(index, id) {
        var eventItem = this.getItem(id);
        var periodUpdateUTime = eventItem.getValue(feedIndexes.UPDATEINDEXES_PERIOD_UPDATE_UTIME);
        var eventStageType = eventItem.getStageType();

        cjs.dic.get("util_CounterHandler").set_counter_time(id, function() {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadEvent(id);
            });
        });

        if (typeof fs_counter[id] === "undefined" &&
            periodUpdateUTime > 0 &&
            periodUpdateUTime > (currentTimestamp - counter_duration_time) &&
            !eventItem.isScheduled()) {
            fs_counter[id] = periodUpdateUTime;
            reloadEvents[id] = 1;
        }
    });

    for (var fsDataIndex in fs_counter) {
        if (fs_counter[fsDataIndex] < currentTimestamp - counter_duration_time) {
            if (eventHolder.hasItem(fsDataIndex)) {
                eventHolder.getItem(fsDataIndex).setValue(feedIndexes.UPDATEINDEXES_PERIOD_UPDATE_UTIME, 0);
                reloadEvents[fsDataIndex] = 1;
            }
            delete fs_counter[fsDataIndex];
        }
    }

    cjs.Api.loader.get('react').call(function(reactCalls) {
        for (var reloadEventId in reloadEvents) {
            reactCalls.reloadEvent(reloadEventId);
        }
    });
};

/** Get odds content for current cell
 */
function get_odds_content(
    isEventStageWithoutWinner,
    hasUsHandicap,
    singleOddsInCurrentFormatGetter,
    singleHandicapInRightFormatGetter,
    outcome_type,
    eventItem,
    current_odds,
    odds_side_class,
    divider
) {
    var odds_index = null;
    var odds = null;
    var odds_old = null;
    var css = '';
    var css_shortie = '';
    var winner = '';
    var last_css = '';
    var td_include = '';
    var outcome_css = null;
    var handicap = null;
    var handicap_val = null;
    var handicap_type = null;
    var over_under_char = '';
    var darken_column = '';
    var actual_format = get_odds_format();
    var isClickable = cjs.dic.get('Helper_ClickableBookmaker').isClickable(cjs.dic.get('util_enviroment').getGlobalGeoIp(), cjs.dic.get('util_enviroment').getGeoIpIsoSubdivisionCode0());


    switch (outcome_type) {
        default:
            return '<td ' + td_include + 'class="kx">-</td>';
            break;
        case '1':
        case 'winner':
            odds_index = 'A';
            break;
        case 'top_3':
            odds_index = 'O';
            break;
        case '0':
        case 'top_5':
        case 'each_way':
            odds_index = 'B';
            break;
        case 'top_6':
            odds_index = 'P';
            break;
        case '2':
            last_css = ' last';
        case 'top_10':
            odds_index = 'C';
            if (cjs.dic.get('utilSport').inGroup(eventItem.getSportId(), cjs.Api.constantsManager.getSports().MOTORSPORT)) {
                last_css = ' last';
            }
            break;
        case 'top_20':
            odds_index = 'N';
            if (!cjs.dic.get('utilSport').inGroup(eventItem.getSportId(), cjs.Api.constantsManager.getSports().MOTORSPORT)) {
                last_css = ' last';
            }
            break;
        case 'AH':
            odds_index = 'H';
            darken_column = ' ah';
            break;
        case 'AH1':
            odds_index = 'F';
            darken_column = ' ah';
            break;
        case 'AH2':
            odds_index = 'G';
            darken_column = ' ah';
            break;
            // us_odds_layout only
        case 'OU':
            odds_index = 'K';
            over_under_char = (odds_side_class == 'odds-bottom' ? 'Ov ' : 'Un ');
            darken_column = ' ou';
            break;
        case 'OU1':
            odds_index = 'I';
            darken_column = ' ou';
            break;
        case 'OU2':
            odds_index = 'J';
            darken_column = ' ou';
            break;
        case 'ML1':
            odds_index = 'L';
            break;
        case 'ML2':
            odds_index = 'M';
            break;
    }

    outcome_css = ' o_' + outcome_type;
    var cssSpanNoChange = '';

    if (eventItem.getValue('X' + odds_index) ||
        ((odds_index == 'H' || odds_index == 'K') && eventItem.getValue('X' + odds_index) == 0)) {
        if (odds_index == 'H' || odds_index == 'K') {
            odds = eventItem.getValue('X' + odds_index).split("/");
            odds = odds[0];

            td = '<td ' + td_include + 'class="' + (odds_index == 'H' ? 'ah_handicap' : 'ou_total') + darken_column + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">';

            if (odds_index == 'H' && odds != 0) {
                odds = singleHandicapInRightFormatGetter(odds, sport_id);
            }
        } else {
            if (eventItem.getValue('Y' + odds_index)) {
                if (eventItem.getValue('Y' + odds_index) < eventItem.getValue('X' + odds_index)) {
                    css = 'up';
                    css_shortie = '[u]';
                } else if (eventItem.getValue('Y' + odds_index) > eventItem.getValue('X' + odds_index)) {
                    css = 'down';
                    css_shortie = '[d]';
                }
            }

            var infoText = '';

            if (!eventItem.isOddPublished('X' + odds_index)) {
                css += ' not-published';
                cssSpanNoChange += ' not-published';
                if (isClickable) {
                    infoText = cjs.dic.get('util_trans').translate('TRANS_ODDS_REMOVED_BY_BOOKMAKER');
                }
            }

            var score_current = [
                eventItem.getHomeScore(),
                eventItem.getAwayScore()
            ];
            var score_full = [
                eventItem.getHomeFullTimeScore(),
                eventItem.getAwayFullTimeScore()
            ];
            var score_1st_period = [
                eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1),
                eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1)
            ];
            var score_2nd_period = [
                eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2),
                eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2)
            ];
            var tennis_game_score = null;

            if (sport == 'tennis') {
                var tennisGameHomeScore = eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_5);

                var tennisGameAwayScore = eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_3) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_4) +
                    eventItem.getValue(feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_5);

                tennis_game_score = [
                    tennisGameHomeScore,
                    tennisGameAwayScore
                ];
            }

            if (eventItem.getValue(feedIndexes.ODDSINDEXES_HANDICAP) !== null && (odds_index == 'F' || odds_index == 'G')) {
                handicap = eventItem.getValue(feedIndexes.ODDSINDEXES_HANDICAP).split("/");
                handicap_val = handicap[0];
                handicap_type = handicap[1];
            } else if (eventItem.getValue(feedIndexes.ODDSINDEXES_OVER_UNDER_HANDICAP) !== null && (odds_index == 'I' || odds_index == 'J')) {
                handicap = eventItem.getValue(feedIndexes.ODDSINDEXES_OVER_UNDER_HANDICAP).split("/");
                handicap_val = handicap[0];
                handicap_type = handicap[1];
            }

            winner = odds_index != 'D' && odds_index != 'E' && is_odd_winning(isEventStageWithoutWinner, eventItem.getStage(), eventItem.getStageType(), outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, eventItem.getSportId(), handicap_val, handicap_type) ? ' win' : '';

            var odds_to_compare = eventItem.getValue('X' + odds_index);

            odds = odds_to_compare.toFixed(2);

            if (eventItem.getValue('Y' + odds_index))
                odds_old = eventItem.getValue('Y' + odds_index).toFixed(2);

            if (typeof(current_odds) != 'undefined' && current_odds != null) {
                odds_old = current_odds;

                if (eventItem.getValue('X' + odds_index) !== null) {
                    if (odds_old < eventItem.getValue('X' + odds_index)) {
                        css = 'up';
                        css_shortie = '[u]';
                    } else if (odds_old > eventItem.getValue('X' + odds_index)) {
                        css = 'down';
                        css_shortie = '[d]';
                    }
                }

                odds_old = odds_old.toFixed(2);
            }

            if (hasUsHandicap) {
                if (odds == 2) {
                    odds = TXT_ODDS_EVEN_SHORT;
                }
                if (odds_old == 2) {
                    odds_old = TXT_ODDS_EVEN_SHORT;
                }
            }

            if (actual_format != 'eu') {
                odds = singleOddsInCurrentFormatGetter(odds);
                if (odds_old) {
                    odds_old = singleOddsInCurrentFormatGetter(odds_old);
                }
            }

            if (odds_index == 'D' || odds_index == 'E')
                winner += winner + ' xx2';

            td = '<td ' + td_include + 'class="kx' + outcome_css + darken_column + winner + last_css + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">';
        }

        if (typeof(odds_side_class) != 'undefined' && odds_index == 'H') {
            handicap = odds;
            if (handicap != null) {
                if (handicap != 0) {
                    handicap = handicap.split("/");
                    if (odds_side_class == 'odds-bottom')
                        odds = (eventItem.getValue(feedIndexes.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS) ? handicap[1] : handicap[0]);
                    else
                        odds = (eventItem.getValue(feedIndexes.FULLFEEDINDEXES_SWAPPED_PARTICIPANTS) ? handicap[0] : handicap[1]);
                } else
                    odds = handicap;
            }
        }

        if (odds_to_compare == 1)
            td += '-';
        else {
            var oddSpan = '';
            if (odds == odds_old || odds_old == null) {
                oddSpan += '<span class="' + cssSpanNoChange + '"';
                if (!infoText) {
                    infoText += odds;
                }
                if (infoText) {
                    oddSpan += ' alt="' + infoText + '"';
                }
                oddSpan += '>';
            } else {
                var separator = ((odds_old + css_shortie + odds) && infoText) ? '\n' : '';
                oddSpan += '<span class="' + css + '" alt="' + odds_old + css_shortie + odds + separator + infoText + '">';
            }
            oddSpan += over_under_char + odds + '</span>';
            td += oddSpan;
        }

        return td + '</td>';
    } else {
        if (odds_index == 'D' || odds_index == 'E')
            css = ' xx2';
        else
            css = '';

        return '<td ' + td_include + ' class="kx no-odds no-odds--' + outcome_type + css + darken_column + last_css + (typeof(odds_side_class) != 'undefined' ? ' ' + odds_side_class : '') + (typeof(divider) != 'undefined' ? ' ' + divider : '') + '">-</td>';
    }
};

function setNavigationCategory(cat) {
    navigation_category = cat;
};

function getNavigationCategory() {
    return navigation_category;
};

function set_calendar_date(value, forceReload) {
    $("#ifmenu-calendar-content").remove();
    if (!forceReload && value == sudate) return;
    preload_show();
    sudate = cjs.dic.get('util_number').toNumber(value);

    if (hasRepairFeed(value)) {
        delete cjs.gamesNotificationOnly;
    } else {
        cjs.gamesNotificationOnly = true;
    }

    push_update_subscription();
    push_connect(sudate);

    setTimeout(function() {
        updater.doc_update();
    }, 10);
};

function set_calendar_date_for_nmf(day) {
    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.setCalendarDate(day);
    });
};

/** Call this after changing timezone
 */
function change_tz_callback() {
    if (typeof sports_count_reload != 'undefined')
        sports_count_reload();

    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.reloadStaticContent();
    });

    var page = cjs.dic.get('util_page');
    if (updater && !page.isTournamentPagePassiveTable()) {
        updater.doc_update();
    }

    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.reloadOnDayChange();

        if (cjs.dic.get('list_navigation').isMyGames()) {
            var myTeams = cjs.dic.exists('myTeams') ? cjs.dic.get('myTeams') : null;
            if (myTeams != null) {
                if (myTeams.getCount()) {
                    myTeams.reloadParticipants();
                } else {
                    loadAndShowMygamesContent();
                    myTeams.callReactUpdates();
                }
            } else {
                loadAndShowMygamesContent();
            }
        } else {
            reactCalls.reloadMyGamesTabCounter();
        }
    });
};

/** Show preload
 */
function preload_show(element_id) {
    if (typeof element_id == 'undefined')
        element_id = 'preload';

    $("div#fscon div#fs").css("opacity", "0.6");
    $("div#" + element_id).css("display", "block");
    $('#fs_overlay').show();
};

cjs.fromGlobalScope.preload_show = preload_show;

/** Hide preload
 */
function preload_hide(element_id) {
    if (typeof element_id == 'undefined') {
        element_id = 'preload';
    } else {
        $("div#" + element_id).addClass('no-height');
    }
    $("div#fscon div#fs").css("opacity", "1");
    $("div#" + element_id).css("display", "none");
    $('body.loading').length ? $('body').removeClass('loading') : null;
    $('#fs_overlay').hide();
};

cjs.fromGlobalScope.preload_hide = preload_hide;

/** Show banner
 */
function banner_show() {
    $("div#fsifbanner").css("display", "block");
};

/** Hide banner
 */
function banner_hide() {
    $("div#fsifbanner").css("display", "none");
};

function detail_format_utime() {
    var detail_utime = document.getElementById('utime');
    var url_gmt_offset = cjs.Api.timezone.getGmtOffset();

    if (detail_utime) {
        detail_utime.innerHTML = cjs.dic.get('utilDate').timestamp2date(cjs.fullDateTimeFormat, game_utime, url_gmt_offset);
        if (game_utime_end)
            detail_utime.innerHTML += ' - ' + cjs.dic.get('utilDate').timestamp2date(cjs.fullDateFormat, game_utime_end, url_gmt_offset);
    }
};

/**
 * Opens window showing standings or draw for tournament stage.
 */
function stats_open(tournament_id, tournament_stage_id, sport_id, stats_type_ident, highlight_participants, eventEncodedId) {
    cjs.Api.loader.get('util/stats/opener').call({
        tournamentId: tournament_id,
        tournamentStageId: tournament_stage_id,
        sportId: sport_id,
        statsTypeIdent: parseInt(stats_type_ident) || 0,
        highlightParticipants: highlight_participants,
        eventId: eventEncodedId
    });
};

function game_in_category_visible(gameId, category) {
    var category_game_status_types = [, 2, 3, 1];
    return (typeof category_game_status_types[category] == "undefined" || cjs.dic.get('dataEventHolderProxy').getHolder().getEvent(gameId).getValue(feedIndexes.SHAREDINDEXES_EVENT_STAGE_TYPE_ID) == category_game_status_types[category]);
};

function is_custom_game(game_id) {
    return cjs.mygames.check(game_id) && game_in_category_visible(game_id, category);
};

function is_game_sync() {
    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();
    //if alter_event_stage_type is live than continue sync
    if ((typeof fs_detail[feedIndexes.SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID] != 'undefined' && fs_detail[feedIndexes.SHAREDINDEXES_ALTER_EVENT_STAGE_TYPE_ID] == 2) ||
        (game_utime < currentTimestamp + (2 * 3600) && (game_utime_end ? game_utime_end : game_utime) > currentTimestamp - (12 * 3600)))
        return true;
    return false;
};

function setAjaxSyncMultiplier(multiplier, feedName) {
    multiplier = cjs.Api.ajaxSyncTime.setMultiplier(multiplier);

    if (updater.ajax_multiplier != multiplier) {
        updater.ajax_multiplier = multiplier;
        updater.ajax_time_update = true;
    }
};

/** Set service status
 * @param    int        [value = service_status] Service status
 */
function set_service_status(value) {
    if (typeof value == 'undefined')
        value = service_status;

    value = parseInt(value, 10);
    cjs.dic.get('Helper_ServiceStatusBox').showBox(value);
    service_status = value;
};

/** resize parent iframe to the content's size
 */
function if_resize() {

    if (typeof iframe_height == "undefined") {
        var iframe_height = 499;
    }

    var if_rame;
    var if_height;

    if_height = $("body").outerHeight();

    // minimail height
    if (if_height < 500) {
        if_height = 500;
    }

    // nothing to be done
    if (iframe_height == if_height) {
        return;
    }

    try {
        if (if_rame = parent.document.getElementById('livescoreContent')) {
            if_rame.style.height = if_height + 'px';
        }
    } catch (e) {}

    var fsi = document.getElementById('fsi');
    if (typeof fsi != 'undefined') {
        try {
            var fsi_height = fsi.scrollHeight;

            var top_advert_height = 0;
            var top_advert = document.getElementById('topadvert');
            if (top_advert) {
                top_advert_height = top_advert.scrollHeight;
            }

            var lsopat = document.getElementById('lsopat');
            if (lsopat) {
                lsopat.style.height = (if_height - fsi_height - top_advert_height + 5) + 'px';
            }
        } catch (e) {}
    }

    // display right social button
    try {
        parent.document.refresh_alert();
    } catch (e) {}

    iframe_height = if_height;
};

// CommCore server communication routines {{{

// CommCore init {{{

/**
 * Constructor of the CommCore object.
 *
 * @param integer time    Interval for check updates
 * @param string func    Function to call
 * @return object
 */
function CommCore(country_id, tournament_id, country_tournament_order_fin, game, content_utime, participant_id, seriesId) {
    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();
    this.interval_sync = null;
    this.interval_blink = null;
    this.interval_counter = null;
    this.interval_live = null;
    this.last_sync_utime = currentTimestamp;
    this.refresh_utime = currentTimestamp;
    this.last_doc_update_category = null;
    this.last_doc_update_action = null;
    this.parse_only = false;

    this.ajax_multiplier = cjs.Api.ajaxSyncTime.getMultiplier();
    this.ajax_cache_time = 30;
    this.ajax_odds_update_time = 60;
    this.ajax_odds_cache_time = 180;
    this.ajax_time_update = false;

    this.country_id = country_id;
    this.tournament_id = tournament_id;
    this.country_tournament_order_fin = (country_tournament_order_fin ? true : false);

    if (tournament_id != null) {
        this.init_action = 'tournament';
    } else if (typeof participant_id != 'undefined' && participant_id != null) {
        this.init_action = 'participant';
    } else if (typeof seriesId != 'undefined' && seriesId != null) {
        this.init_action = 'series';
    } else if (country_id != null) {
        this.init_action = 'country';
    } else if (typeof game != 'undefined' && game != null) {
        this.init_action = 'game';
    } else {
        this.init_action = 'full';
    }

    if (typeof game == 'undefined') {
        this.game = null;
    } else {
        this.game = game;
    }

    if (typeof content_utime == 'undefined') {
        this.content_utime = null;
    } else {
        this.content_utime = content_utime;
    }
};
// }}}

/**
 * Resume AJAX update after long failure - this is a workaround for frepair feed which is called but no update feed is started afterwards
 */
CommCore.prototype.doc_resume = function(forceUpdate) {
    if (forceUpdate || !cjs.dic.get('list_navigation').isMyGames()) {
        updater.doc_update();
        updater.set_interval('update');
    } else {
        loadAndShowMygamesContent();
    }
};

CommCore.prototype.lastSyncUtimeIsTooOld = function(currentTimestamp, useOddsCacheTime) {
    currentTimestamp = currentTimestamp || cjs.dic.get("util_date").getTimestamp();
    var cacheTime = useOddsCacheTime ? this.ajax_odds_cache_time : this.ajax_cache_time;
    return !this.ajax_time_update && (this.last_sync_utime + (0.8 * cacheTime) < currentTimestamp);
};

CommCore.prototype.lastSyncUtimeCanBeHandledByRepairFeed = function(currentTimestamp) {
    currentTimestamp = currentTimestamp || cjs.dic.get("util_date").getTimestamp();
    return this.last_sync_utime + (0.8 * 300) > currentTimestamp;
};

function referenceSameIdsInHolders(holder1, holder2) {
    var id, ids = holder1.getAllContainerIds();
    for (var i = 0, _len = ids.length; i < _len; i++) {
        id = ids[i];
        if (holder2.hasItem(id)) {
            holder2.setItem(id, holder1.getItem(id));
        }
    }
};

// CommCore request functions {{{
CommCore.prototype.doc_update = function(action, get_odds, prefered_sport_id, pageNumber, type, responseCallback) {
    if (category == 5 && (action == 'update' || action == 'repair' || action == 'frepair')) {
        var neededFeeds = [];
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds(1));

        if (neededFeeds.length > 0) {
            for (var i in neededFeeds) {
                if (sport_id == neededFeeds[i].sport_id) {
                    continue;
                }

                prefered_sport_id = 0;
                break;
            }
        }

        if (typeof cjs.myTeams != 'undefined') {
            var sports = cjs.myTeams.getSports();
            if (sports.length > 1 || (sports.length == 1 && sports[0] != prefered_sport_id)) {
                prefered_sport_id = 0;
            }
        }
    }

    action = (typeof action == 'undefined' ? updater.init_action : action);

    prefered_sport_id = (typeof prefered_sport_id == 'undefined') ? sport_id : prefered_sport_id;

    // sys - out of sync update/game
    if (action == 'sys' && ((sudate != 0 && sudate != -1) || (typeof game_utime != 'undefined' && !is_game_sync())))
        return;

    // update - out of sync
    if (action == 'update' && (sudate != 0 && sudate != -1))
        return;

    // game - out of sync
    if (action == 'game' && !is_game_sync())
        return;

    this.last_doc_update_category = category;
    this.last_doc_update_action = action;

    switch (action) {
        case 'full':
        case 'country':
        case 'tournament':
            if (tournamentPage === false && $.inArray(action, ['country', 'tournament']) !== -1) {
                var eventHolder = cjs.dic.get('dataEventHolder');
                var leagueHolder = cjs.dic.get('dataLeagueHolder');
                var completeEventsHolder = cjs.dic.get('dataEventHolderTemporary');
                var completeLeaguesHolder = cjs.dic.get('dataLeagueHolderTemporary');
                var filteredEventsHolder = cjs.dic.get('dataEventHolderFiltered');
                var filteredLeaguesHolder = cjs.dic.get('dataLeagueHolderFiltered');
                var listNavigation = cjs.dic.get('List_Navigation');
                var isCountryTabFinished = listNavigation.isCountryTabFinished();
                var isCountryTabScheduled = listNavigation.isCountryTabScheduled();
                var afterCallback = function() {
                    cjs.Api.loader.get('react').call(function(reactCalls) {
                        reactCalls.loadingState("country", false);
                    });
                };
                var myGamesCallback = function() {};

                function filterExistingEventsData(eventHolder, leagueHolder, filteredEventHolder, filteredLeaguesHolder) {
                    eventHolder.reinit(filteredEventHolder.getReferences());
                    leagueHolder.reinit(filteredLeaguesHolder.getReferences());
                    cjs.dic.get('dataEventHandler').resetIds();
                    cjs.dic.get('dataLeagueHandler').resetIds();
                }

                if (listNavigation.isCountryTabDefault() || (isCountryTabFinished && !completeEventsHolder.hasData())) {
                    afterCallback = function() {
                        completeEventsHolder.reinit(eventHolder.getReferences());
                        completeLeaguesHolder.reinit(leagueHolder.getReferences());
                        myGamesCallback();
                        cjs.Api.loader.get('react').call(function(reactCalls) {
                            reactCalls.loadingState("country", false);
                        });
                    };
                } else if (eventHolder.hasData()) {
                    if (isCountryTabFinished && completeEventsHolder.hasData()) {
                        filterExistingEventsData(eventHolder, leagueHolder, completeEventsHolder, completeLeaguesHolder);
                        updater.generate_data();
                        break;
                    } else if (isCountryTabScheduled && !filteredEventsHolder.hasData()) {
                        afterCallback = function() {
                            filteredEventsHolder.reinit(eventHolder.getReferences());
                            filteredLeaguesHolder.reinit(leagueHolder.getReferences());
                            myGamesCallback();
                            cjs.Api.loader.get('react').call(function(reactCalls) {
                                reactCalls.loadingState("country", false);
                            });
                        };
                    } else if (isCountryTabScheduled && filteredEventsHolder.hasData()) {
                        filterExistingEventsData(eventHolder, leagueHolder, filteredEventsHolder, filteredLeaguesHolder);
                        updater.generate_data();
                        break;
                    }
                }
            }

            var measureFullFeedConfig = cjs.Api.config.get('app', 'measure_full_feed');
            if (action == 'full' && measureFullFeedConfig.sports.indexOf(prefered_sport_id) != -1) {
                cjs.dic.get('Helper_TimeMeasurer').start(action, measureFullFeedConfig.chance);
            }

            resetAndExecuteFeedRequests(prefered_sport_id, action, afterCallback);
            break;

        case 'tournament-fixtures':
        case 'tournament-results':
            var winScroll = window.pageYOffset || document.documentElement.scrollTop;
            $('#preload').css('top', winScroll + 100);
            preload_show();
            var elementId = (action === 'tournament-fixtures' ? '#tournament-page-season-fixtures' : '#tournament-page-season-results');
            var season_id = $(elementId).text();
            tournamentPageDataPart++;
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                seasonId: season_id,
                dataPart: tournamentPageDataPart
            });
            break;

        case 'participant':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant
            });
            break;

        case 'series':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                seriesId: series
            });
            break;

        case 'load-participant-odds':
            cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant
            });
            break;

        case 'participant-fixtures':
        case 'participant-fixtures_s':
        case 'participant-fixtures_d':
        case 'participant-fixtures_m':
        case 'participant-results':
        case 'participant-results_s':
        case 'participant-results_d':
        case 'participant-results_m':
            cjs.participantPageNumber = cjs.participantPageNumber || 0;
            var tennisTypeArr = action.match(/_[sdm]$/);
            var tennisType = tennisTypeArr && tennisTypeArr[0] ? tennisTypeArr[0] : '';
            cjs.feedRequest.execute(action.split('_')[0], prefered_sport_id, responseCallback, {
                participantId: participant,
                dataPart: ++cjs.participantPageNumber,
                tennisType: tennisType || ''
            });
            break;

        case 'participant-newsfeed':
        case 'participant-transfers':
            var ret = cjs.feedRequest.execute(action, prefered_sport_id, responseCallback, {
                participantId: participant,
                pageNumber: pageNumber,
                type: type,
                callback: responseCallback
            });
            if (ret === false) {
                return;
            }
            break;

        default:
            if (action == 'odds') {
                cjs.Api.loader.get('react').call(function(reactCalls) {
                    reactCalls.loadingState("odds-calendar", false);
                    reactCalls.loadingState("odds", true);
                });
            }
            var ret = cjs.feedRequest.execute(action, prefered_sport_id, responseCallback);
            if (ret === false) {
                return;
            }
    }

    ++debug_sync_no;

    // Increase count of needed checks for F5 alert
    try {
        if (/^detail/.test(action)) {
            document.parts_count_increase();
        }
    } catch (e) {}
};

function get_odds_format() {
    if (typeof odds_format_url != 'undefined' && typeof ODDS_FORMAT_LIST[odds_format_url] != 'undefined') {
        prefered_format = odds_format_url;
        default_odds_format = prefered_format;
    } else {
        if (cjs.Api.config.get('app', 'project_type', 'name') == '_ass') {
            var prefered_format = clientStorage.get('fs_of');
        } else {
            var prefered_format = clientStorage.get('fs_of_' + cjs.Api.config.get('app', 'lang', 'web'));
        }

        if (typeof ODDS_FORMAT_LIST[prefered_format] == 'undefined')
            prefered_format = default_odds_format;
        else
            default_odds_format = prefered_format;
    }

    return prefered_format;
};
// }}}

// CommCore response functions {{{
CommCore.prototype.response_full = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    CommCore.parse_custom_headers(r_custom_headers);

    var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
    fsDetailObj.setOverrideData(fs_detail);
    var geoIp = cjs.dic.getNewInstance('util_enviroment').getGlobalGeoIp();
    var geoIpIsoSubdivisionCode = cjs.dic.getNewInstance('util_enviroment').getGeoIpIsoSubdivisionCode0();
    var mergedGeoIp = cjs.dic.get('application').getGeoIpWithSubdivision(geoIp, geoIpIsoSubdivisionCode);
    if (geoIp && fsDetailObj.getGeoBookmakerSettings() && fsDetailObj.getAvailableTabs()) {
        var geoOddsTabSettings = JSON.parse(fsDetailObj.getGeoBookmakerSettings());
        var overrideGeoIp = (mergedGeoIp in geoOddsTabSettings) ? mergedGeoIp : ((geoIp in geoOddsTabSettings) ? geoIp : "default");
        if (overrideGeoIp in geoOddsTabSettings && !geoOddsTabSettings[overrideGeoIp]) {
            fsDetailObj.removeTab(feedIndexes.DETAILCOMMONTABSINDEXES_ODDS);
        }
    }

    if (r_trigger == 'headers_hit')
        return;

    cjs.full_loaded = true;
    fullfeed_trigger = r_trigger;

    var mainBookmakerIds = [];
    cjs.Api.loader.get('bookmakerSettings').call(function(module) {
        mainBookmakerIds = module.getMainBookmakerIds(cjs.geoIP, cjs.geoIPIsoSubdivisionCode0);
        cjs.dic.get('application').setMainBookmakerIds(mainBookmakerIds);
    });

    updater.setLastSyncUtime(cjs.dic.get("util_date").getTimestamp());
    if (updater.is_actual(r_status, r_headers)) {
        return;
    }

    if (!updater.parse_only) {
        if (tournamentPage === false && $.inArray(r_trigger, ['country', 'tournament']) !== -1 && cjs.dic.get('dataEventHolderTemporary').hasData()) {
            cjs.dic.get('dataEventHolder').reinit();
            cjs.dic.get('dataEventHandler').resetIds();
            cjs.dic.get('dataLeagueHolder').reinit();
            cjs.dic.get('dataLeagueHandler').resetIds();
        } else {
            reset_env();
        }
    }

    ++debug_generate_no;

    ff_data = r_content;
    parse(r_content);

    if (!updater.parse_only) {
        var page = cjs.dic.get('util_page');
        if (hasRepairFeed(sudate)) {
            var has_data = cjs.dic.get('dataEventHolderProxy').getHolder().hasData();

            if (has_data) {
                if (r_trigger === 'full' || r_trigger === 'country' || r_trigger === 'tournament') {
                    var feedData = cjs.feedRequest.getFeedData('frepair', sport_id);
                    cjs.feedLoader.executeCompleteCallback(feedData.context);
                } else {
                    updater.doc_update('frepair');
                }
            } else {
                if (project_type_name == '_ass' && !page.isParticipantPage() && !page.isSeriesPage()) {
                    updater.generate_data_odds();
                    updater.clear_interval('set_interval: odds');
                } else {
                    updater.generate_data();
                    updater.clear_interval('set_interval: update');
                }
            }

            if (has_data && r_trigger === 'full') {
                cjs.dic.get('dataEventHolderProxy').getHandler().each(
                    function(index, id) {
                        var eventItem = this.getItem(id);
                        if (eventItem.isMarkedAsLive() && !eventItem.isLive()) {
                            fs_update.remove_event_live_status(id);
                        }
                    }
                );
            }
        } else {
            sort_fs_data();
            if (project_type_name == '_ass' && !page.isParticipantPage() && !page.isSeriesPage()) {
                updater.generate_data_odds();
            } else {
                updater.generate_data();
            }
        }
    }
    init_after_feeds();
    if (tournamentPage === false && $.inArray(r_trigger, ['country', 'tournament']) !== -1 && cjs.dic.get('dataEventHolderTemporary').hasData()) {
        var eventHolder = cjs.dic.get('dataEventHolder');
        var leagueHolder = cjs.dic.get('dataLeagueHolder');
        var temporaryEventHolder = cjs.dic.get('dataEventHolderTemporary');
        var temporaryLeagueHolder = cjs.dic.get('dataLeagueHolderTemporary');
        referenceSameIdsInHolders(eventHolder, temporaryEventHolder);
        referenceSameIdsInHolders(leagueHolder, temporaryLeagueHolder);
    }

    cjs.Api.loader.get('react').call(function(reactCalls) {
        if (cjs.dic.get('list_navigation').isMyGames()) {
            reactCalls.loadingState("fullFeed", false);
        } else {
            reactCalls.fullFeedLoaded();
        }
    });
};

CommCore.prototype.response_full_after = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var size = r_custom_headers['Content-Length'] || '';
    var geoIp = r_custom_headers['X-Geoip2-Country-Code'] || '';

    cjs.dic.get('Helper_TimeMeasurer').stop(r_trigger, (function(size, geoIp) {
        return function(duration, statsCallback) {
            var urlPart = cjs.Api.config.get('app', 'fs_stats', 'url', 'full_feed_duration');
            if (urlPart) {
                var url = location.protocol + '//' + urlPart;
                var data = {
                    'size': size,
                    'duration': duration,
                    'geoip': geoIp,
                    'project_id': project_id,
                    'project_name': cjs.Api.config.get('app', 'project', 'name').replace(/\s/g, '')
                };
                statsCallback(url, data);
            }
        };
    })(size, geoIp));
};

CommCore.prototype.response_full_error = function(r_status, r_trigger) {
    cjs.dic.get('Helper_TimeMeasurer').stop(r_trigger);
};

CommCore.prototype.response_update = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var ts = getUtimeFromDate(typeof r_custom_headers != 'undefined' ? r_custom_headers.Date : new Date());
    if (ts) {
        cjs.dic.get("util_date").setServerTimestamp(ts);
    }
    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();

    var isRepair = r_trigger == 'repair' || r_trigger == 'frepair';
    if (isRepair) {
        cjs.repair_loaded = true;
    }

    var resync = false;

    if (r_trigger == 'update') {
        cjs.Api.loader.get('syncIndicator').call(function(indicator) {
            var ajaxTime = cjs.Api.ajaxSyncTime.getTime(cjs.Api.ajaxSyncTime.ACTION_UPDATE);
            indicator.update('ajax', ajaxTime + 's');
        });
    }

    // check if time from the last sync is not too old. If so, repair data with the update feed
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp)) {
        // time from the last change can be handled by repair feed
        if (updater.lastSyncUtimeCanBeHandledByRepairFeed(currentTimestamp)) {
            if (!isRepair) {
                updater.set_interval('repair', true);
                resync = true;
            }
        }
        // time from the last change is too old. Call initial (e.g. full) feed
        else {
            updater.doc_resume(true);
            resync = true;
        }
    }

    updater.setLastSyncUtime(currentTimestamp);

    cjs.Api.loader.get('util/midnightLiveTableRefresh').call(function(midnight) {
        midnight.disableReload();
    });

    if (resync)
        return;

    // resync, feed synchronization time changed
    if (updater.ajax_time_update && r_trigger != 'frepair') {
        updater.ajax_time_update = false;
        updater.set_interval('update');
    }

    // there is no data
    if (updater.is_actual(r_status, r_headers)) {
        parse_status = true;
    }
    // there is new data
    else {
        // parse input data
        var parse_status = parse(r_content, true, false, r_trigger);
    }

    // regenerate the whole page with new data
    if (r_trigger == 'frepair') {
        sort_fs_data();
        if (project_type_name == '_ass') {
            updater.generate_data_odds();
        } else {
            updater.generate_data();
        }
        var sport_id = 1 * r_content.substring(3, r_content.indexOf(JS_CELL_END, 4));
        updater.sync_score_data_with_update(sport_id);
        if (cjs.dic.get("util_page").getPageType() === "series_page") {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.reloadTabContent(category);
            });
        }
        // just update existing content
    } else
        fs_update.update(r_trigger);

    if (r_trigger == 'repair' || mpe_delivery == 'a' && r_trigger == 'frepair')
        updater.set_interval('update');

    if (!parse_status)
        refresh_iframe();

    if (r_trigger == 'frepair') {
        init_after_feeds();
    }
};

CommCore.prototype.response_tournament_fixtures = function(r_status, r_headers, r_content, r_trigger) {
    var el;

    if ((el = $('#tournament-page-data-fixtures')).length == 1) {
        el.text(r_content);
    }
};

CommCore.prototype.response_tournament_results = function(r_status, r_headers, r_content, r_trigger) {
    var el;

    if ((el = $('#tournament-page-data-results')).length == 1) {
        el.text(r_content);
    }
};

CommCore.prototype.response_participant_fixtures = function(r_status, r_headers, r_content, r_trigger) {
    var tennisTypeArr = this.context.match(/_[sdm]$/);
    var tennisType = tennisTypeArr && tennisTypeArr[0] ? tennisTypeArr[0] : '';
    var el = $('#participant-page-data-fixtures' + tennisType);

    if (el.length == 1) {
        el.text(r_content);
    }
};

CommCore.prototype.response_participant_results = function(r_status, r_headers, r_content, r_trigger) {
    var tennisTypeArr = this.context.match(/_[sdm]$/);
    var tennisType = tennisTypeArr && tennisTypeArr[0] ? tennisTypeArr[0] : '';
    var el = $('#participant-page-data-results' + tennisType);

    if (el.length == 1) {
        el.text(r_content);
    }
};

CommCore.prototype.response_odds = function(r_status, r_headers, r_content, r_trigger) {
    updater.setLastSyncUtime(cjs.dic.get("util_date").getTimestamp());
    if (updater.is_actual(r_status, r_headers)) {
        return;
    }
    var parse_status = parse(r_content, false, true);
    oddsActionsAfterContentGenerated(true);
    preload_hide();

    if (!parse_status)
        updater.set_interval(updater.init_action, true);
};

CommCore.prototype.response_updated_odds = function(r_status, r_headers, r_content, r_trigger) {
    var resync = false;
    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();

    // check if time from the last sync is not too old. If so, repair odds with the update feed
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp, true)) {
        // time from the last change can be handled by repair feed
        if (updater.lastSyncUtimeCanBeHandledByRepairFeed(currentTimestamp)) {
            if (r_trigger != 'repair' && r_trigger != 'frepair') {
                updater.set_interval('repair', true);
                resync = true;
            }
        }
        // time from the last change is too old. Call initial (e.g. full) feed
        else {
            updater.doc_resume(true);
            resync = true;
        }
    }

    updater.setLastSyncUtime(currentTimestamp);

    if (resync)
        return;

    // resync, feed synchronization time changed
    if (updater.ajax_time_update && r_trigger != 'frepair') {
        updater.ajax_time_update = false;
        updater.set_interval('update');
    }

    // there is no data
    if (updater.is_actual(r_status, r_headers)) {
        parse_status = true;
    }
    // there is new data
    else {
        // parse input data
        var parse_status = parse(r_content, true, false, r_trigger);
    }

    // regenerate the whole page with new data
    if (r_trigger == 'frepair') {
        var sport_id = parseInt(r_content.substring(3, r_content.indexOf(JS_CELL_END, 4)));

        if (project_type_name == '_ass') {
            updater.generate_data();
        } else {
            oddsActionsAfterContentGenerated(true);
        }

        updater.sync_score_data_with_update(sport_id);
        // just update existing content
    } else
        fs_update.update();

    if (!parse_status)
        refresh_iframe();
};

CommCore.prototype.response_load_odds = function(r_status, r_headers, r_content, r_trigger) {
    updater.setLastSyncUtime(cjs.dic.get("util_date").getTimestamp());
    if (updater.is_actual(r_status, r_headers)) {
        return;
    }

    var parse_status = parse(r_content, false, true);

    updater.generate_data();

    if (!parse_status)
        updater.set_interval(updater.init_action, true);
};

CommCore.prototype.response_game = function(r_status, r_headers, r_content, r_trigger) {
    cjs.Api.loader.get('syncIndicator').call(function(indicator) {
        var ajaxTime = cjs.Api.ajaxSyncTime.getTime(cjs.Api.ajaxSyncTime.ACTION_UPDATE);
        indicator.update('ajax', ajaxTime + 's');
    });

    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();

    // disabling ajax and starting push
    var force_reload = false;
    // sync interval check (feed must not be too old)
    if (updater.lastSyncUtimeIsTooOld(currentTimestamp)) {
        force_reload = true;
    }

    updater.setLastSyncUtime(currentTimestamp);
    if (updater.is_actual(r_status, r_headers)) {
        return;
    }

    response_game_handler(r_content, force_reload);

    // sync game detail
    if (is_game_sync())
        return updater.set_interval('game');

    // resync, time change
    else if (updater.ajax_time_update) {
        updater.ajax_time_update = false;
        updater.set_interval('game');
    }
};

CommCore.prototype.setLastSyncUtime = function(timestamp) {
    this.last_sync_utime = timestamp;
};

CommCore.checkCacheKeys = function(keyId, newKey, feed) {
    if (CommCore.getExpectedNewCacheKey(keyId) != newKey && CommCore.getExpectedNewCacheKey(keyId) != null) {
        if (!CommCore.getUpdateInProgress(keyId)) {
            CommCore.setUpdateInProgress(keyId, true);
            setTimeout(function(_feed, _keyId) {
                return function() {
                    CommCore.setUpdateInProgress(keyId, false);
                    //Try to download new: ',_feed
                    updater.doc_update(_feed);
                }
            }(feed, keyId), 2000);
        }

        return false;
    }

    return true;
};

CommCore.expectedCacheKeys = {};

CommCore.setExpectedNewCacheKey = function(key, value) {
    //setting expected new cache key: "'+key+'" => "'+value+'"
    CommCore.expectedCacheKeys[key] = value;
};

CommCore.getExpectedNewCacheKey = function(key) {

    if (typeof CommCore.expectedCacheKeys[key] != 'undefined') {
        return CommCore.expectedCacheKeys[key];
    }

    return null;
};

CommCore.updateInProgress = {};

CommCore.setUpdateInProgress = function(key, value) {
    CommCore.updateInProgress[key] = value;
};

CommCore.getUpdateInProgress = function(key) {
    if (typeof CommCore.updateInProgress[key] != 'undefined') {
        return CommCore.updateInProgress[key];
    }

    return null;
};

CommCore.parse_custom_headers = function(r_custom_headers) {
    if (typeof r_custom_headers == 'undefined') {
        return;
    }

    if (typeof r_custom_headers['X-Geoip2-Country-Code'] != 'undefined' && r_custom_headers['X-Geoip2-Country-Code']) {
        cjs.geoIP = r_custom_headers['X-Geoip2-Country-Code'];
    }

    if (typeof r_custom_headers['X-Geoip2-City-Name'] != 'undefined' && r_custom_headers['X-Geoip2-City-Name']) {
        cjs.geoIPCityName = r_custom_headers['X-Geoip2-City-Name'];
    }

    if (typeof r_custom_headers['X-Geoip2-Subdivision-Name-0'] != 'undefined' && r_custom_headers['X-Geoip2-Subdivision-Name-0']) {
        cjs.geoIPSubdivisionName0 = r_custom_headers['X-Geoip2-Subdivision-Name-0'];
    }

    if (typeof r_custom_headers['X-Geoip2-Subdivision-Code-0'] != 'undefined' && r_custom_headers['X-Geoip2-Subdivision-Code-0']) {
        cjs.geoIPSubdivisionCode0 = r_custom_headers['X-Geoip2-Subdivision-Code-0'];
    }

    if (typeof r_custom_headers['X-Geoip2-ISO-Subdivision-Code-0'] != 'undefined' && r_custom_headers['X-Geoip2-ISO-Subdivision-Code-0']) {
        cjs.geoIPIsoSubdivisionCode0 = r_custom_headers['X-Geoip2-ISO-Subdivision-Code-0'].replace('-', '');
    }

    if (typeof r_custom_headers['X-Geoip2-Subdivision-Name-1'] != 'undefined' && r_custom_headers['X-Geoip2-Subdivision-Name-1']) {
        cjs.geoIPSubdivisionName1 = r_custom_headers['X-Geoip2-Subdivision-Name-1'];
    }

    if (typeof r_custom_headers['X-ClientIP'] != 'undefined' && r_custom_headers['X-ClientIP'])
        cjs.clientIP = r_custom_headers['X-ClientIP'];

    if (typeof r_custom_headers['Date'] != 'undefined' && r_custom_headers['Date']) {
        if (ts = getUtimeFromDate(r_custom_headers['Date'])) {
            cjs.dic.get("util_date").setServerTimestamp(ts);
        }

        if (!page_is_initialized) {
            page_utime_init_value(cjs.dic.get("util_date").getTimestamp());
        }
    }

    for (var i in cjs.parseCustomHeadersCallbacks) {
        cjs.parseCustomHeadersCallbacks[i]();
    }
    cjs.parseCustomHeadersCallbacks = [];
};

function response_game_handler(content, force_reload) {
    var added_refresh_delay = 0;
    if (mpe_delivery == 'p')
        added_refresh_delay = 500;

    var hashBack = fs_detail.getHashes();

    var rows = content.split(JS_ROW_END);
    var game = rows[0].split(JS_CELL_END);
    var game_length = game.length - 1;

    for (var i = 0; i < game_length; i++) {
        var gameIndexHash = game[i].split(JS_INDEX);
        var gameIndex = gameIndexHash[0];
        var gameHash = gameIndexHash[1];
        // u_304 code
        if (gameIndex == 'A1')
            u_304 = gameHash;
        else
            fs_detail.setHash(gameIndex, gameHash);

        CommCore.setExpectedNewCacheKey(gameIndex, gameHash);
    }

    // refresh game detail properties changed
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_PROPERTIES_HASH, hashBack)) {
        var url = window.location.toString();
        var url_parts = /^(.+)(\?|&)detail_refresh=([01]{1})(.*)$/.exec(url);
        url = cjs.dic.get('utilUrl').addQueryStringParameter(url, {
            'detail_refresh': (url_parts ? (1 - url_parts[3]) : 1)
        });

        setTimeout(function() {
            window.location = url
        }, 1000 + added_refresh_delay);

        return;
    }

    // repair game detail
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_COMMON_HASH, hashBack)) {
        setTimeout('updater.doc_update("detail")', 1000 + added_refresh_delay);
    }

    // refresh summary tab - not implemented, same as game reload (DETAILHASHINDEXES_COMMON_HASH)
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_ALL_RESULTS_HASH, hashBack)) {
        detail_part_invalidate("summary");

        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
        }

        if (actual_tab == "player-statistics") {
            updater.doc_update("detail-summary-player-card");
        }
    }

    // refresh lineups tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_LINEUP_HASH, hashBack)) {
        detail_part_invalidate("lineups");

        if (actual_tab == "lineups")
            setTimeout('detail_tab("lineups", true)', 1000 + added_refresh_delay);
    }

    // refresh missing players
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_MISSING_PLAYERS_HASH, hashBack)) {
        detail_part_invalidate("summary", true);
        detail_part_invalidate("missing_players", true);
        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
        }
    }

    // refresh statistics tab
    if (fs_detail.isHashChanged(fs_detail.getEventStatisticsHashKey(sport_id), hashBack)) {
        detail_part_invalidate("statistics");

        if (actual_tab == "statistics")
            setTimeout('detail_tab("statistics", true)', 1000 + added_refresh_delay);
    }

    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH, hashBack)) {
        detail_part_invalidate("statistics-preview");

        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
        }
    }

    // refresh player statistics tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH, hashBack)) {
        detail_part_invalidate("player_statistics");
        detail_part_invalidate("player-statistics-preview");

        if (actual_tab == "player-statistics") {
            setTimeout('detail_tab("player_statistics", true)', 1000 + added_refresh_delay);
        }

        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000);
        }
    }

    // refresh commentary tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH, hashBack)) {
        detail_part_invalidate("commentary");
        detail_part_invalidate("commentary_preview");

        if (actual_tab == "commentary")
            setTimeout('detail_tab("commentary", true)', 1000 + added_refresh_delay);

        if (actual_tab == "summary")
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
    }

    // refresh match comments
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_MATCH_COMMENT_HASH, hashBack)) {
        detail_part_invalidate("match_comments");

        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
        }
    }


    // refresh match history tab
    if (fs_detail.isHashChanged(fs_detail.getMatchHistoryHashKey(sport_id), hashBack)) {
        detail_part_invalidate("match_history");
        detail_part_invalidate("match_history_preview");

        if (actual_tab == "match-history") {
            setTimeout('detail_tab("match_history", true)', 1000 + added_refresh_delay);
        }

        if (actual_tab == "summary") {
            setTimeout('detail_tab("summary", true)', 1000 + added_refresh_delay);
        }
    }

    // refresh highlights or photoreport tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH, hashBack)) {
        detail_part_invalidate("highlights");
        detail_part_invalidate("photoreport");

        if (actual_tab == "highlights" || actual_tab == "photoreport") {
            setTimeout('detail_tab(actual_tab, true)', 1000 + added_refresh_delay);
        }
    }

    // refresh fall of wickets tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH, hashBack)) {
        detail_part_invalidate('fall_of_wickets');

        if (actual_tab == 'fall-of-wickets') {
            setTimeout('detail_tab("fall_of_wickets", true)', 1000 + added_refresh_delay);
        }
    }

    // refresh overs tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_OVERS_HASH, hashBack)) {
        detail_part_invalidate('overs');

        if (actual_tab == 'overs') {
            setTimeout('detail_tab("overs", true)', 1000 + added_refresh_delay);
        }
    }

    // refresh live odds tab
    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_LIVE_ODDS_HASH, hashBack)) {
        cjs.Api.loader.get('detail/odds/DataProviderInstance').call(
            function(dataProvider) {
                var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
                feedContentLiveOdds.setBookmakerId(dataProvider.getMainLiveOddsBookmakerId());

                if (feedContentLiveOdds.isActive()) {
                    var delay = 1000 + added_refresh_delay;
                    feedContentLiveOdds.downloadFeed(delay);
                }
            }
        );
    }

    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_NEWSFEED_HASH, hashBack)) {
        detail_part_invalidate('newsfeed');

        if (actual_tab == 'newsfeed') {
            setTimeout('detail_tab("newsfeed", true)', 1000 + added_refresh_delay);
        }
    }

    if (fs_detail.isHashChanged(feedIndexes.DETAILHASHINDEXES_TV_STREAM_HASH, hashBack)) {
        cjs.Api.loader.get("detail/tv/update").call();
    }

    push_update_subscription();
};

CommCore.prototype.response_detail = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    tt.hide_all();
    fs_detail_parsed = new Array();
    fs_detail_updated = {};

    var data = r_content.split(JS_CELL_END);
    var data_length = data.length - 1;
    var hash = '';
    var utilTrans = cjs.dic.get('utilTrans');

    CommCore.parse_custom_headers(r_custom_headers);
    setPageUtimeFromDate(r_custom_headers.Date);

    for (var i = 0; i < data_length; i++) {
        if (data[i] == JS_CELL_END)
            break;

        var key, new_value_string;
        [key, new_value_string] = data[i].split(JS_INDEX, 2);
        var new_value = new_value_string - 0; // try convert string to number

        if (isNaN(new_value) || new_value_string == '')
            new_value = new_value_string;

        //if(typeof fs_detail[key] != 'undefined' && fs_detail[key] != new_value || typeof fs_detail[key] == 'undefined')
        if (typeof fs_detail[key] != 'undefined' && fs_detail[key] != new_value)
            fs_detail_updated[key] = new_value;

        fs_detail_parsed[fs_detail_parsed.length] = key;

        if (key == 'A1')
            hash = new_value;
        else
            fs_detail[key] = new_value;
    }

    if (hash != '') {
        if (fs_detail.getHash(feedIndexes.DETAILHASHINDEXES_COMMON_HASH) == null)
            fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_COMMON_HASH, hash);
        else
            CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_COMMON_HASH, hash, r_trigger);
    }

    var score_updated = false;
    var fs_detail_parsed_length = fs_detail_parsed.length - 1;

    var points_delimiter = '&nbsp;';
    for (var i = 0; i < fs_detail_parsed_length; i++) {
        var key = fs_detail_parsed[i];
        switch (key) {
            case feedIndexes.SHAREDINDEXES_HOME_DRAW_PARTICIPANT_WINNER:
                var dwIcon = '.tname-home .dw-icon';

            case feedIndexes.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER:
                if (key == feedIndexes.SHAREDINDEXES_AWAY_DRAW_PARTICIPANT_WINNER) {
                    var dwIcon = '.tname-away .dw-icon';
                }
                dwIcon = $(dwIcon);
                if (fs_detail[key] == 1) {
                    dwIcon.removeClass('win');
                    dwIcon.attr("title", utilTrans.translate('TRANS_WINNER_TOOLTIP'));
                    dwIcon.show();
                } else if (fs_detail[key] == 2) {
                    dwIcon.addClass('win');
                    dwIcon.attr("title", utilTrans.translate('TRANS_WINNER'));
                    dwIcon.show();
                } else {
                    dwIcon.hide();
                }
                break;

            case feedIndexes.SHAREDINDEXES_CRICKET_SENTENCE:
                if (typeof fs_detail[feedIndexes.SHAREDINDEXES_CRICKET_SENTENCE] != 'undefined') {
                    var homeParticipantName = $("#flashscore .tname-home .tname").text();
                    var awayParticipantName = $("#flashscore .tname-away .tname").text();
                    var boundary = cjs.dic.get('Helper_CricketExtraRowInputBoundaryImpl');
                    var cricketExtraRowDataObj = boundary.setCricketSentenceData(fs_detail, homeParticipantName, awayParticipantName).getDataInputCricketExtraRow();
                    var cricketExtraRow = cjs.dic.get('Helper_CricketExtraRowBuilder').build();
                    $("#summary-content .extra-info").html(cricketExtraRow.renderFullPart(cricketExtraRowDataObj));
                }
                break;

            case feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID:
                if (event_stage_type_id != fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID]) {
                    event_stage_type_id = fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID];
                    detail_event_stage_type_changed();
                } else {
                    event_stage_type_id = fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID];
                }
                break;

            case feedIndexes.COMMONINDEXES_EVENT_STAGE_ID:
                var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
                fsDetailObj.setOverrideData(fs_detail);
                fsDetailObj.repaintEventStage();
                if (typeof fs_detail_updated[key] != 'undefined' || event_stage_id == cjs.Api.constantsManager.getEventStages().SCHEDULED && fs_detail[key] != cjs.Api.constantsManager.getEventStages().SCHEDULED) {
                    detail_part_invalidate("summary");
                    if (actual_tab == "summary") {
                        updater.doc_update("detail-summary");
                    }
                }
                event_stage_id = fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID];
                break;

            case feedIndexes.COMMONINDEXES_EVENT_START_TIME:
            case feedIndexes.COMMONINDEXES_EVENT_END_TIME:

                var time_top = $("#utime").get(0);

                switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID]) {
                    case 4:
                    case 5:
                    case 37:
                        var line = " line-through";
                        break;
                    default:
                        var line = "";
                        break;
                }

                time_top.className = (time_top.classList.contains('description__time') ? "description__time " : "") + "mstat-date" + line;
                if (key == feedIndexes.COMMONINDEXES_EVENT_START_TIME)
                    game_utime = fs_detail[key];
                else
                    game_utime_end = fs_detail[key];
                detail_format_utime();
                break;

            case feedIndexes.COMMONINDEXES_EVENT_STAGE_START_TIME:
                g2utime = fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_START_TIME];

                cjs.detailTimeCounter.setTime();
                break;

            case feedIndexes.SHAREDINDEXES_FINAL_SCORE:
                var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
                fsDetailObj.setOverrideData(fs_detail);
                var geoIp = cjs.dic.get('util_enviroment').getGlobalGeoIp();
                var geoIpIsoSubdivisionCode = cjs.dic.getNewInstance('util_enviroment').getGeoIpIsoSubdivisionCode0();
                var mergedGeoIp = cjs.dic.get('application').getGeoIpWithSubdivision(geoIp, geoIpIsoSubdivisionCode);
                if (geoIp && fsDetailObj.getGeoBookmakerSettings() && fsDetailObj.getAvailableTabs()) {
                    var geoOddsTabSettings = JSON.parse(fsDetailObj.getGeoBookmakerSettings());
                    var overrideGeoIp = (mergedGeoIp in geoOddsTabSettings) ? mergedGeoIp : ((geoIp in geoOddsTabSettings) ? geoIp : "default");
                    if (overrideGeoIp in geoOddsTabSettings && !geoOddsTabSettings[overrideGeoIp]) {
                        fsDetailObj.removeTab(feedIndexes.DETAILCOMMONTABSINDEXES_ODDS);
                    }
                }

                case feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_3:
                case feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_3:
                case feedIndexes.FULLFEEDINDEXES_HOME_RESULT_TIEBREAK_4:
                case feedIndexes.FULLFEEDINDEXES_AWAY_RESULT_TIEBREAK_4:
                case feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT:
                case feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED:
                case feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND:
                case feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_SUB:
                case feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED:
                case feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND:
                case feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_SUB:
                    if (score_updated) {
                        break;
                    }

                    var fsDetailObj = cjs.dic.getNewInstance('detail_fsdetail');
                    fsDetailObj.setOverrideData(fs_detail);
                    var resultRepainted = fsDetailObj.repaintScore();

                    if (resultRepainted) {
                        break;
                    }

                    var title = document.title.split('|');
                    var spoilerFreeTitle = title.slice(0);

                    if (sport_id == 23 && typeof fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] != 'undefined' && fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT]) {
                        spoilerFreeTitle[0] = home_3char + ' ' + away_3char + ' ';
                    } else {

                        if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                            if (title_at_char)
                                spoilerFreeTitle[0] = home_3char + ' ' + title_at_char + ' ' + away_3char + ' ';

                            else
                                spoilerFreeTitle[0] = home_3char + ' - ' + away_3char + ' ';
                        }
                    }

                    var score_top = $("#flashscore .current-result").get(0);
                    if (!score_top) {
                        break;
                    }

                    var score_html = '';
                    var ft_score_string_start = '';
                    var ft_score_string_end = '';

                    var score_divider = '<span class="scoreboard-divider">-</span>';
                    var empty_score = score_divider;
                    if (sport_id != 18) {
                        ft_score_string_start = '(';
                        ft_score_string_end = ')';
                    }

                    // Aussie Rules scores should be in full format
                    if (sport_id == 18) {
                        if (fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE]) {
                            fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] = cjs.dic.get('Helper_AussieRulesFormatter').formatScoreWithTooltip(fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE]);
                        }
                        if (fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE]) {
                            fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] = cjs.dic.get('Helper_AussieRulesFormatter').formatScoreWithTooltip(fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE]);
                        }
                        if (fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE]) {
                            fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE] = cjs.dic.get('Helper_AussieRulesFormatter').formatScoreWithTooltip(fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE]);
                        }
                        if (fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE]) {
                            fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE] = cjs.dic.get('Helper_AussieRulesFormatter').formatScoreWithTooltip(fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE]);
                        }
                    }

                    switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID]) {
                        case 2:
                            if (sport_id == 23 && typeof fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] != 'undefined' && fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT]) {
                                title[0] = home_3char + ' ' + fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] + ' ' + away_3char + ' ';
                            } else {
                                if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                    if (title_at_char)
                                        title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ';

                                    else
                                        title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '-' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ' + away_3char + ' ';
                                }
                            }
                            score_html += '<span class="r">';
                            score_html += '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '</span><span>' + score_divider + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + '</span></span>';
                            score_html += '</span>';
                            switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID]) {
                                case 6:
                                case 7:
                                    if (typeof fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE] != 'undefined' && typeof fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE] != 'undefined') {
                                        score_html += '<br />';
                                        score_html += '<span class="ft">' + ft_score_string_start + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE] + '</span><span>' + score_divider + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE] + '</span></span>' + ft_score_string_end + '</span>';
                                    }
                                    break;
                            }
                            break;
                        case 3:
                            switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID]) {
                                case 4:
                                case 5:
                                case 9:
                                    score_html += empty_score;
                                    break;
                                default:
                                    if (sport_id == cjs.Api.constantsManager.getSports().BOXING || sport_id == cjs.Api.constantsManager.getSports().MMA) {
                                        var helper = sport_id == cjs.Api.constantsManager.getSports().BOXING ? cjs.Api.helperBoxing : cjs.Api.helperMma;
                                        var winner = null;
                                        var incidentId = null;
                                        var round = null;

                                        if (typeof fs_detail[feedIndexes.COMMONINDEXES_WINNER] != 'undefined') {
                                            if (fs_detail[feedIndexes.COMMONINDEXES_WINNER] == 'H') {
                                                winner = $("#flashscore .tname-home .tname").text().trim();
                                                incidentId = fs_detail[feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED];
                                                round = fs_detail[feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND];
                                            } else if (fs_detail[feedIndexes.COMMONINDEXES_WINNER] == 'A') {
                                                winner = $("#flashscore .tname-away .tname").text().trim();
                                                incidentId = fs_detail[feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED];
                                                round = fs_detail[feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND];
                                            }
                                        } else {
                                            incidentId = fs_detail[feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED];
                                            round = fs_detail[feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND];
                                        }

                                        if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                            title[0] = home_3char + ' - ' + away_3char + ': ' + (winner ? winner + ' (' + helper.getResult(incidentId, round) + ')' : helper.getTransDraw()) + ' ';
                                        }

                                        score_html = winner ? utilTrans.translate('TRANS_WINNER') + ': ' + winner : helper.getTransDraw();
                                        score_html = '<span class="scoreboard small">' + score_html + '</span>';
                                    } else {
                                        if (sport_id == 23 && typeof fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] != 'undefined' && fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT]) {
                                            if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                                title[0] = home_3char + ' ' + fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] + ' ' + away_3char + ' ';
                                            }

                                            var winner = null;
                                            if (typeof fs_detail[feedIndexes.COMMONINDEXES_WINNER] != 'undefined') {
                                                if (fs_detail[feedIndexes.COMMONINDEXES_WINNER] == 'H') {
                                                    winner = $("#flashscore .tname-home .tname").get(0).innerHTML;
                                                } else if (fs_detail[feedIndexes.COMMONINDEXES_WINNER] == 'A') {
                                                    winner = $("#flashscore .tname-away .tname").get(0).innerHTML;
                                                }
                                                winner = winner.replace(/(<span).*(<\/span>)/, '');
                                            }
                                            var golfScoreHtml = fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT];
                                            if (typeof fs_detail[feedIndexes.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED] !== 'undefined' && fs_detail[feedIndexes.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED]) {
                                                golfScoreHtml = '<span title="' + (cjs.dic.get('util_trans').translate('TRANS_GOLF_HOLES_PLAYED') + "").replace('%s', fs_detail[feedIndexes.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED]) + '">' + fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] + ' - ' + fs_detail[feedIndexes.COMMONINDEXES_GOLF_TOTAL_HOLES_PLAYED] + '</span>';
                                            }
                                            score_html = '<span class="scoreboard small">';
                                            score_html += winner ? TXT_GOLF_WINNER + ': ' + winner + '<br/>' : '';
                                            score_html += golfScoreHtml + '</span>';
                                        } else {
                                            if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                                if (title_at_char)
                                                    title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ';
                                                else
                                                    title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '-' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ' + away_3char + ' ';
                                            }

                                            score_html += 42 == fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID] ? '<span class="r">' : '';
                                            score_html += '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '</span><span>' + score_divider + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + '</span></span>';
                                            score_html += 42 == fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID] ? '</span>' : '';
                                            switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID]) {
                                                case 10:
                                                case 11:
                                                    if (typeof fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE] != 'undefined' && typeof fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE] != 'undefined') {
                                                        score_html += '<br />';
                                                        score_html += '<span class="ft">' + ft_score_string_start + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE] + '</span><span>' + score_divider + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE] + '</span></span>' + ft_score_string_end + '</span>';
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    break;
                            }
                            break;
                        case 1:
                            switch (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID]) {
                                case 45:
                                    if (sport_id == 23 && typeof fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] != 'undefined' && fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT]) {
                                        if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                            title[0] = home_3char + ' ' + fs_detail[feedIndexes.SHAREDINDEXES_GOLF_FINAL_RESULT] + ' ' + away_3char + ' ';
                                        }
                                    } else {
                                        if (cjs.Api.config.get('app', 'detail', 'version') != 2) {
                                            if (title_at_char)
                                                title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + ' ' + title_at_char + ' ' + away_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ';
                                            else
                                                title[0] = home_3char + ' ' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '-' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + ' ' + away_3char + ' ';
                                        }
                                    }
                                    score_html += '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE] + '</span>' + score_divider + '<span class="scoreboard">' + fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE] + '</span>';
                                    break;
                                default:
                                    score_html += empty_score;
                                    break;
                            }

                            break;
                    }

                    score_top.innerHTML = score_html;

                    // use jQuery to "decode" possible HTML
                    cjs.Api.title = $('<span>' + title.join('|') + '</span>').text();
                    cjs.Api.spoilerFreeTitle = $('<span>' + spoilerFreeTitle.join('|') + '</span>').text();
                    if (document.body.classList.contains("spoilers-hidden")) {
                        document.title = cjs.Api.spoilerFreeTitle;
                    } else {
                        document.title = cjs.Api.title;
                    }

                    score_updated = true;
                    break;

                    // show serving icons if applicable
                case feedIndexes.COMMONINDEXES_CURRENT_SERVICE_SIDE:

                    // we don't want to introduce any new global variables
                    (function(eventStageType, eventStage, currentServiceSide) {
                        var $ticon = {
                            home: $(homeServiceSelector),
                            away: $(awayServiceSelector)
                        };

                        // remove existing serving icons
                        $('.serving-icon-box', $ticon['home']).remove();
                        $('.serving-icon-box', $ticon['away']).remove();

                        // add padding to tname cells through CSS class
                        $ticon['home'].addClass('tname-home-serving');
                        $ticon['away'].addClass('tname-away-serving');

                        var isServingSport = cjs.dic.get('utilSport').isServingSport(sport_id);
                        var isAfterDay = false;
                        var eventStageTypes = cjs.Api.constantsManager.getEventStageTypes();
                        var eventStages = cjs.Api.constantsManager.getEventStages();

                        if ($.inArray(eventStage, [eventStages.AFTER_DAY1, eventStages.AFTER_DAY2, eventStages.AFTER_DAY3, eventStages.AFTER_DAY4, eventStages.AFTER_DAY5]) !== -1) {
                            isAfterDay = true;
                        }

                        if (
                            eventStageType == eventStageTypes.LIVE ||
                            eventStage == eventStages.INTERRUPTED ||
                            isAfterDay ||
                            isServingSport && eventStageType == eventStageTypes.SCHEDULED
                        ) {

                            var isBaseballOrCricketOrPesapallo =
                                sport_id == 13 ||
                                sport_id == 6 ||
                                sport_id == 30;

                            var servingIconTemplate = function(opposite) {

                                var scheduledClass = (eventStageType == eventStageTypes.SCHEDULED) ? ' scheduled' : '';
                                var append = opposite ? '-opposite' : '';
                                return (
                                    '<span class="icon-box serving-icon-box">' +
                                    '<span class="icon ' + sport + '-serve' + append + scheduledClass + '">&nbsp;</span>' +
                                    '</span>'
                                );
                            };

                            // home team is serving
                            if (currentServiceSide == 1) {
                                $ticon['home'].append(servingIconTemplate());
                                // non-serving team should have a bat symbol
                                // next to its name in baseball and cricket
                                if (isBaseballOrCricketOrPesapallo) {
                                    $ticon['away'].prepend(servingIconTemplate(true));
                                }
                            }
                            // away team is serving
                            else if (currentServiceSide == 2) {
                                $ticon['away'].prepend(servingIconTemplate());
                                // non-serving team should have a bat symbol
                                // next to its name in baseball and cricket
                                if (isBaseballOrCricketOrPesapallo) {
                                    $ticon['home'].append(servingIconTemplate(true));
                                }
                            }
                        }
                    }(
                        fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID],
                        fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID],
                        fs_detail[feedIndexes.COMMONINDEXES_CURRENT_SERVICE_SIDE]
                    ));

                    break;

                case feedIndexes.COMMONINDEXES_LAST_SCORE_UPDATE:
                    var currentTimestamp = cjs.dic.get("util_date").getTimestamp();
                    var game_hlscore_totime = fs_detail[feedIndexes.COMMONINDEXES_LAST_SCORE_UPDATE] + counter_duration_time;
                    if (fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID] == 2 && game_hlscore_totime > currentTimestamp && !document.body.classList.contains("spoilers-hidden")) {
                        detailPage = new DetailPage([document.title, page_hlscore_title], 1500);
                        detailPage.hlTitle_on("detailPage", game_hlscore_totime - currentTimestamp);
                    }
                    break;

                case feedIndexes.COMMONINDEXES_BETTING_TYPE:
                    detail_set_odds_winner();
                    break;

                case feedIndexes.COMMONINDEXES_EVENT_INFO:
                    if (fs_detail[feedIndexes.COMMONINDEXES_EVENT_INFO]) {
                        var ibHtml = '' +
                            '<div class="info-bubble">' +
                            '<span class="icon-ico info">&nbsp;</span>' +
                            '<span class="text">' + fs_detail[feedIndexes.COMMONINDEXES_EVENT_INFO] + '</span>' +
                            '</div>';
                        $("#flashscore .team-secondary-content").html(ibHtml);
                    } else {
                        $(".info-bubble").remove();
                    }
                    break;

                case feedIndexes.COMMONINDEXES_ACTIVE_LIVE_ODDS_BOOKMAKERS:
                    var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
                    feedContentLiveOdds.setCurrentEventStageType(fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID]);
                    if (displayTabInActualTab('tab_live_odds', actual_tab)) {
                        if (!feedContentLiveOdds.wasUpdateAlreadyUsed()) {
                            feedContentLiveOdds.downloadFeed();
                        }
                    } else {
                        feedContentLiveOdds.hide();
                    }
                    break;
        }
    }

    checkLoadedDetailParts();

    if (typeof fs_detail_updated[feedIndexes.COMMONINDEXES_AVAILABLE_TABS_NEW] != 'undefined' || typeof fs_detail_updated[feedIndexes.COMMONINDEXES_HIGHLIGHTS_RESTRICTIONS] != 'undefined') {
        cjs.Api.detailTabs.show();
    }
};

CommCore.prototype.response_detail_ext = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    if (r_trigger == 'detail-player-statistics-golf') {
        r_trigger = 'detail-player-statistics';
    } else if (r_trigger == 'detail-summary') {
        r_content = cjs.dic.getNewInstance('detail_fsdetail').getSummaryHtml(r_content);
    } else if (r_trigger == 'detail-odds-setup') {
        cjs.Api.loader.get('oddsManager').call(function(oddsManager) {
            var cb = function() {
                get_handicap_in_new_format('tab-prematch-odds', oddsManager);
            };

            cjs.Api.loader.get('detail/odds/HtmlDomController').call({
                oddsSetupRawData: cjs.oddsData.prematchOddsData,
                feedContent: r_content,
                bookmakersWithLiveOffer: cjs.oddsData.bookmakersWithLiveOffer,
                eventStageTypeId: event_stage_type_id
            }, function(htmlDomController) {
                cjs.Api.loader.get('detail/odds/HtmlDomControllerInstance').call(
                    function(_htmlDomController) {
                        htmlDomController.addCallback(cb);
                        cjs.dic.get('Feed_Content_LiveOdds').setBookmakerId(_htmlDomController.getDataProvider().getMainLiveOddsBookmakerId());
                    }
                );
            });
        });
    }

    if (updater.is_actual(r_status, r_headers)) {
        return;
    }
    CommCore.parse_custom_headers(r_custom_headers);

    var elm_id = r_trigger.replace('detail-', '');
    var elm_preload = elm_id + '-preload';
    elm_id += '-content';

    var elm = null;
    if ((elm = document.getElementById(elm_id))) {
        var hash = cjs.dic.get('Feed_Parser').getHash(r_content);
        var htmlContent = r_content;

        switch (r_trigger) {
            case 'detail-player-statistics':
            case 'detail-player-statistics-preview':
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH, hash, r_trigger)) {
                    return;
                }
                if (sport_id == cjs.Api.constantsManager.getSports().BASKETBALL) {
                    cjs.Api.loader.get('basketballCellHighlighter').call(function(basketballCellHighlighter) {
                        basketballCellHighlighter.setProps(elm);
                        basketballCellHighlighter.setHtmlContent(htmlContent);
                        basketballCellHighlighter.setPart(r_trigger);
                        htmlContent = basketballCellHighlighter.highlightData().getHtmlContent();
                    });
                }
                break;
            case 'fall-of-wickets':
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH, hash, r_trigger)) {
                    return;
                }
                break;

            case 'overs':
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_OVERS_HASH, hash, r_trigger)) {
                    return;
                }
                break;

            case 'detail-statistics':
                if (sport_id == cjs.Api.constantsManager.getSports().DARTS) {
                    var tabContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                        .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_EventStatisticsParser'))
                        .build(r_content);
                    htmlContent = (cjs.dic.get('Detail_EventStatistics_Factory').create(cjs.dic.get('HtmlTemplate'), dartsStatisticsTemplate, tabContainer, cjs.dic.get('utilTrans')))
                        .render();
                }
                if (!CommCore.checkCacheKeys(fs_detail.getEventStatisticsHashKey(sport_id), hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;

            case 'detail-match-history':
            case 'detail-match-history-preview':
                if (sport_id == cjs.Api.constantsManager.getSports().DARTS) {
                    var tabContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                        .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_MatchHistoryParser'))
                        .build(r_content);
                    var isMatchHistory = r_trigger == 'detail-match-history';
                    var isMatchHistoryPreview = r_trigger == 'detail-match-history-preview';
                    var htmlTemplate = cjs.dic.get('util_enviroment').getHtmlTemplate();
                    var htmlTemplateName = isMatchHistory ? htmlTemplate.TPL_DETAIL_MATCH_HISTORY : htmlTemplate.TPL_DETAIL_MATCH_HISTORY_PREVIEW;
                    htmlContent = (cjs.dic.get('Detail_MatchHistory_Factory').create(cjs.dic.get('HtmlTemplate'), htmlTemplateName, tabContainer, sport_id, cjs.dic.get('utilTrans'), cjs.Api.constantsManager.getSports()))
                        .render();

                    if (isMatchHistoryPreview && !htmlContent) {
                        $(elm).html(htmlContent);
                    }
                }
                if (!CommCore.checkCacheKeys(fs_detail.getMatchHistoryHashKey(sport_id), hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;

            case 'detail-statistics-preview':
                if (sport_id == cjs.Api.constantsManager.getSports().DARTS) {
                    var tabContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                        .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_EventStatisticsParser'))
                        .build(r_content);
                    htmlContent = (cjs.dic.get('Detail_EventStatistics_Factory').create(cjs.dic.get('HtmlTemplate'), dartsStatisticsPreviewTemplate, tabContainer, cjs.dic.get('utilTrans')))
                        .render();
                }
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;

            case 'detail-commentary':
                if (sport_id == cjs.Api.constantsManager.getSports().CRICKET) {
                    var tabContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                        .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_CricketLiveCommentParser'))
                        .build(r_content);
                    var htmlTemplateName = cjs.dic.get('util_enviroment').getHtmlTemplate().TPL_DETAIL_CRICKET_LIVE_COMMENTS;
                    htmlContent = cjs.dic.get("Detail_CricketLiveComments_Factory").create(cjs.dic.get('HtmlTemplate'), htmlTemplateName, tabContainer, cjs.dic.get('utilTrans'))
                        .render();
                }
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;
            case 'detail-commentary-preview':
                if (sport_id == cjs.Api.constantsManager.getSports().CRICKET) {
                    var CommentHtmlFormatterImpl = cjs.dic.getNewInstance("Detail_CommentHtmlFormatterImpl");
                    htmlContent = CommentHtmlFormatterImpl.getComment(r_content);
                }
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;
            case 'detail-match-comments':
                if ($.inArray(sport_id, cjs.Api.config.get('app', 'match_comments', 'sports')) !== -1) {
                    var tableContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                        .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_MatchCommentParser'))
                        .build(r_content);
                    var htmlTemplateName = cjs.dic.get('util_enviroment').getHtmlTemplate().TPL_DETAIL_MATCH_COMMENTS;
                    htmlContent = cjs.dic.get('Detail_MatchComments_Factory').create(cjs.dic.get('HtmlTemplate'), htmlTemplateName, tableContainer, cjs.dic.get('utilTrans'))
                        .render();

                    if (!htmlContent) {
                        $(elm).html(htmlContent);
                    }
                    $("#summary-content div.nodata-block").toggle(htmlContent == '');
                }
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_MATCH_COMMENT_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;

            case 'detail-lineups':
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_LINEUP_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;

            case 'detail-missing-players':
                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_MISSING_PLAYERS_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }

                $("#summary-content").show();
                elm_preload = "summary-preload";
                break;

            case 'detail-live-odds':
                htmlContent = null;
                updateDetailLiveOdds(r_content, hash);
                break;

            case 'detail-newsfeed':
                var tableContainer = cjs.dic.getNewInstance('Feed_Table_ContainerBuilder')
                    .setSpecificParser(cjs.dic.getNewInstance('Feed_Table_NewsfeedParser'))
                    .build(r_content);
                var newsfeedExpandedCategories = window.newsfeedExpandedCategories || [];
                var htmlTemplateName = cjs.dic.get('util_enviroment').getHtmlTemplate().TPL_DETAIL_NEWS_FEED;

                var newsfeedImpl = cjs.dic.get('Detail_Newsfeed_Factory').create(
                    cjs.dic.get('HtmlTemplate'),
                    htmlTemplateName,
                    tableContainer,
                    cjs.dic.get('util_enviroment'),
                    cjs.dic.get('util_date'),
                    cjs.Api.config,
                    cjs.dic.get('util_trans'),
                    newsfeedExpandedCategories
                );

                htmlContent = (newsfeedImpl).render();

                if (!htmlContent) {
                    $(elm).html(htmlContent);
                    detail_tab('summary', false);
                }

                if (!CommCore.checkCacheKeys(feedIndexes.DETAILHASHINDEXES_NEWSFEED_HASH, hash, r_trigger)) {
                    preload_hide();
                    return;
                }
                break;
        }

        if (htmlContent) {
            $(elm).html(htmlContent);
        }
        preload_hide(elm_preload);

        switch (r_trigger) {
            case 'detail-summary':
            case 'detail-summary-player-card':
                if (sport_id == cjs.Api.constantsManager.getSports().GOLF) {
                    cjs.Api.loader.get('detail/golfStartTimeFormatter').call();
                }

                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_ALL_RESULTS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_ALL_RESULTS_HASH, hash);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_ALL_RESULTS_HASH, hash)) {
                    detail_part_invalidate("summary");

                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000);
                    }

                    if (actual_tab == "player-statistics") {
                        updater.doc_update("detail-summary-player-card");
                    }
                }

                if (typeof fs_detail[feedIndexes.SHAREDINDEXES_CRICKET_SENTENCE] != 'undefined') {
                    var homeParticipantName = $("#flashscore .tname-home .tname").text();
                    var awayParticipantName = $("#flashscore .tname-away .tname").text();
                    var boundary = cjs.dic.get('Helper_CricketExtraRowInputBoundaryImpl');
                    var cricketExtraRowDataObj = boundary.setCricketSentenceData(fs_detail, homeParticipantName, awayParticipantName).getDataInputCricketExtraRow();
                    var cricketExtraRow = cjs.dic.get('Helper_CricketExtraRowBuilder').build();
                    $("#summary-content .extra-info").html(cricketExtraRow.renderFullPart(cricketExtraRowDataObj));
                }

                $('#summary-content .icon.video').each(function() {
                    var $el = $(this).parent();
                    var restriction = $el.data('restriction') || '1|';
                    cjs.Api.loader.get("videoHighlightRestriction").call(function(videoHighlightRestriction) {
                        if (!videoHighlightRestriction.hasHighlight(restriction)) {
                            $el.remove();
                        }
                    })
                });

                if (r_trigger == 'detail-summary' && $.inArray(sport_id, cjs.Api.config.get('app', 'match_comments', 'sports')) !== -1) {
                    var hasMatchComments = $("#match-comments-content table.match-comments").length;
                    if (hasMatchComments) {
                        $("#summary-content div.nodata-block").hide();
                    }
                }

                break;

            case 'detail-lineups':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_LINEUP_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_LINEUP_HASH, hash);
                    detail_tab("lineups", false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_LINEUP_HASH, hash)) {
                    detail_part_invalidate("lineups");

                    if (actual_tab == "lineups") {
                        setTimeout('detail_tab("lineups", true)', 2000);
                    }
                } else {
                    detail_tab("lineups", false);
                }
                break;

            case 'detail-missing-players':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_MISSING_PLAYERS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_MISSING_PLAYERS_HASH, hash);
                    detail_tab("summary", false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_MISSING_PLAYERS_HASH, hash)) {
                    detail_part_invalidate("summary", true);
                    detail_part_invalidate("missing_players", true);

                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000);
                    }
                } else {
                    detail_tab("summary", false);
                }
                break;

            case 'detail-match-history':
            case 'detail-match-history-preview':
                var matchHistoryHash = fs_detail.getMatchHistoryHashKey(sport_id);
                if (!fs_detail.hasHash(matchHistoryHash)) {
                    fs_detail.setHash(matchHistoryHash, hash);
                    if (r_trigger == 'detail-match-history') {
                        detail_tab("match-history", false);
                    }
                } else if (fs_detail.isHashValueChange(matchHistoryHash, hash)) {
                    detail_part_invalidate("match-history");
                    detail_part_invalidate("match-match-history-preview");

                    if (actual_tab == "match-history" || actual_tab == "summary") {
                        setTimeout('detail_tab(actual_tab, true)', 2000);
                    }
                } else {
                    if (r_trigger == 'detail-match-history') {
                        detail_tab("match-history", false);
                    }
                }
                break;

            case 'detail-statistics':

                var eventStatisticsHash = fs_detail.getEventStatisticsHashKey(sport_id);
                if (!fs_detail.hasHash(eventStatisticsHash)) {
                    fs_detail.setHash(eventStatisticsHash, hash);
                    detail_tab("statistics", false);
                } else if (fs_detail.isHashValueChange(eventStatisticsHash, hash)) {
                    detail_part_invalidate("statistics");

                    if (actual_tab == "statistics") {
                        setTimeout('detail_tab("statistics", true)', 2000);
                    }
                } else {
                    detail_tab("statistics", false);
                }
                break;

            case 'detail-statistics-preview':

                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH, hash);
                    detail_tab("summary", false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_STATS_STATISTICS_PREVIEW_HASH, hash)) {
                    detail_part_invalidate("statistics_preview");

                    if (actual_tab == "summary") {
                        setTimeout('detail_tab(actual_tab, true)', 2000);
                    }
                } else {
                    detail_tab('summary', false);
                }
                break;

            case 'detail-match-comments':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_MATCH_COMMENT_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_MATCH_COMMENT_HASH, hash);
                    detail_tab("summary", false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_MATCH_COMMENT_HASH, hash)) {
                    detail_part_invalidate("match-match-comments");

                    if (actual_tab == "summary") {
                        setTimeout('detail_tab(actual_tab, true)', 2000);
                    }
                } else {
                    detail_tab("summary", false);
                }
                break;

            case 'detail-commentary':
            case 'detail-commentary-preview':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH, hash);
                    if (r_trigger == 'detail-commentary') {
                        detail_tab("commentary", false);
                    }
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_STATIC_COMMENT_HASH, hash)) {
                    detail_part_invalidate("commentary");
                    detail_part_invalidate("commentary_preview");

                    if (actual_tab == "commentary") {
                        setTimeout('detail_tab("commentary", true)', 2000);
                    }

                    if (actual_tab == "summary") {
                        setTimeout('detail_tab("summary", true)', 2000);
                    }
                } else {
                    if (r_trigger == 'detail-commentary') {
                        detail_tab("commentary", false);
                    }
                }

                break;

            case 'detail-head-2-head':
                detail_tab("head-2-head", false);
                cjs.dic.get('utilDate').fromUnixtimeToDatetime('short', 'text', 'span.date');
                mark_last_row_in_h2h();
                break;

            case 'detail-tv':
                cjs.dic.get('utilDate').fromUnixtimeToDatetime('tv', 'text', 'td.tv-time');
                set_detail_bet_icon_states("tv-content");
                break;

            case 'detail-highlights':
            case 'detail-photoreport':
                var currentTabType = r_trigger.replace('detail-', '');
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH, hash);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_MATCH_HIGHLIGHTS_HASH, hash)) {
                    detail_part_invalidate(currentTabType);

                    if (actual_tab == currentTabType) {
                        setTimeout('detail_tab(currentTabType, true)', 2000);
                    }
                }

                if (currentTabType == 'highlights') {
                    detail_tabs.tabs.tab_highlights.contentBackup = r_content;
                    processHighlights();
                    cjs.Api.loader.get("detail/highlights").fulfill((cb) => cb());
                }
                break;

            case 'detail-standings':
                detail_tab("standings", false);
                break;
            case 'detail-draw':
                detail_tab("draw", false);
                break;
            case 'detail-player-statistics':
            case 'detail-player-statistics-preview':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH, hash);
                    if (actual_tab == "player-statistics")
                        detail_tab("player-statistics", false);

                    if (actual_tab == "summary")
                        detail_tab("summary", false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_PLAYER_STATISTICS_HASH, hash)) {
                    detail_part_invalidate("player-statistics");
                    detail_part_invalidate("player_statistics_preview");

                    if (actual_tab == "player-statistics")
                        setTimeout('detail_tab("player-statistics", true)', 2000);

                    if (actual_tab == "summary")
                        setTimeout('detail_tab("summary", true)', 2000);
                } else {
                    if (actual_tab == "player-statistics")
                        detail_tab("player-statistics", false);
                    if (actual_tab == "summary")
                        detail_tab("summary", false);
                }
                sortables_init();

                if (sport_id == cjs.Api.constantsManager.getSports().BASKETBALL) {
                    cjs.Api.loader.get('basketballCellHighlighter').call(function(basketballCellHighlighter) {
                        basketballCellHighlighter.triggerSorting(document);
                    });
                } else {
                    $('#player-statistics-content').find('th.sortable-default-col a.sortheader').each(function() {
                        $(this).click();
                    });
                }

                var playerStatisticsTabsCount = 3;
                var playerStatisticsTabsHide = [];
                for (var i = 0; i < playerStatisticsTabsCount; i++) {
                    var tab = $('#tab-player-statistics-' + i + '-statistic');
                    if (tab.length && !tab.is(':visible')) {
                        playerStatisticsTabsHide.push(tab);
                        tab.css('visibility', 'hidden');
                        tab.show();
                    }
                }

                $("table.ts-table").each(function(index) {
                    var tSlider = new cjs.TableSlider({
                        table: $(this),
                        fixedColumns: [".player-label", ".team-label"]
                    }, $);
                    tSlider.init();

                    if (sport_id == cjs.Api.constantsManager.getSports().BASKETBALL) {
                        cjs.Api.loader.get('basketballCellHighlighter').call(function(basketballCellHighlighter) {
                            basketballCellHighlighter.adjustTableSlider(index, tSlider);
                        });
                    }

                    var updateSortFixedColumnsCallback = function(sliderObject) {
                        return function() {
                            sliderObject.updateFixedColumns(true);
                        };
                    }(tSlider);

                    ts_addOnResortTableStopCallback(updateSortFixedColumnsCallback, this);
                    $(this).removeClass('ts-table');
                });

                for (var i in playerStatisticsTabsHide) {
                    playerStatisticsTabsHide[i].hide();
                    playerStatisticsTabsHide[i].css('visibility', 'visible');
                }

                break;

            case 'detail-fall-of-wickets':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH, hash);
                    if (actual_tab == "summary") {
                        detail_tab("summary", false);
                    }
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_FALL_OF_WICKETS_HASH, hash)) {
                    detail_part_invalidate('fall-of-wickets');

                    if (actual_tab == 'fall-of-wickets') {
                        setTimeout('detail_tab("fall-of-wickets", true)', 2000);
                    }
                }
                // html se zmenilo, je treba aplikovat selecty a podtaby
                if (actual_tab == 'fall-of-wickets') {
                    detail_tab("fall-of-wickets", false);
                }
                break;

            case 'detail-overs':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_OVERS_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_OVERS_HASH, hash);
                    if (actual_tab == 'summary') {
                        detail_tab('summary', false);
                    }
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_OVERS_HASH, hash)) {
                    detail_part_invalidate('overs');

                    if (actual_tab == 'overs') {
                        setTimeout('detail_tab("overs", true)', 2000);
                    }
                }
                // html se zmenilo, je treba aplikovat selecty a podtaby
                if (actual_tab == 'overs') {
                    detail_tab('overs', false);
                }
                break;

            case 'detail-live-table':
                jQuery.globalEval(jQuery(elm).find("script").text());
                //fsTable.initialize();

                break;

            case 'detail-odds-comparison':
                load_detail_odds_comparison_tabs();
                set_detail_bet_icon_states("odds-comparison-content");
                detail_tab("odds-comparison", false);
                sortables_init();
                backup_eu_odds_and_betslip_in_html('odds-comparison-content');
                cjs.Api.loader.get('oddsManager').call(function(oddsManager) {
                    get_handicap_in_new_format('odds-comparison-content', oddsManager);
                    detail_switch_odds_format(get_odds_format(), null, true, oddsManager);
                });
                break;

            case 'newsfeed':
                if (!fs_detail.hasHash(feedIndexes.DETAILHASHINDEXES_NEWSFEED_HASH)) {
                    fs_detail.setHash(feedIndexes.DETAILHASHINDEXES_NEWSFEED_HASH, hash);
                    detail_tab('newsfeed', false);
                } else if (fs_detail.isHashValueChange(feedIndexes.DETAILHASHINDEXES_NEWSFEED_HASH, hash)) {
                    detail_part_invalidate('newsfeed');

                    if (actual_tab == 'newsfeed') {
                        setTimeout('detail_tab("newsfeed", true)', 2000);
                    }
                } else {
                    detail_tab('newsfeed', false);
                }
                break;

            default:
                break;
        }

        cjs.Api.loader.get('detail/odds/HtmlDomControllerInstance').call(
            function(htmlDomController) {
                htmlDomController.addCallback(function() {
                    detail_set_odds_winner();
                });
            }
        );
    }

    checkLoadedDetailParts();

};

CommCore.prototype.response_sys = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    var row = r_content.split(JS_CELL_END);
    var row_length = row.length - 1;
    var ts = null;

    if (ts = getUtimeFromDate(r_custom_headers.Date)) {
        cjs.dic.get("util_date").setServerTimestamp(ts);
    }

    for (var i = 0; i < row_length; i++) {
        var key = row[i].substr(0, 3);
        var value = row[i].substr(4);

        // TLS time
        if (key == 'mlp') {
            setAjaxSyncMultiplier(value);
        } else if (key == 'sst') {
            set_service_status(value);
        } else if (key == 'fcr') {
            check_static_serial(value);
        } else if (key == 'dmo') {
            data = value.split(',');

            for (var j = 0; j < data.length; j++) {
                record = data[j].split('|');

                if (record[0] === 'all' || parseInt(record[0], 10) === 13) {
                    if (record[1] === 'p' && cjs.push) {
                        cjs.push.enable(true);
                        push_connect();
                    }
                }
            }
        }

        // Ajax time change: update feed
        else if (key == 'stu') {
            if (cjs.Api.ajaxSyncTime.setTime(cjs.Api.ajaxSyncTime.ACTION_UPDATE, value)) {
                updater.ajax_time_update = true;
            }
        }

        // Ajax time change: game feed
        else if (key == 'stg') {
            if (cjs.Api.ajaxSyncTime.setTime(cjs.Api.ajaxSyncTime.ACTION_GAME, value)) {
                updater.ajax_time_update = true;
            }
        }

        // manual push reconnect
        else if (key == 'mpr') {
            if (mpr != value) {
                mpr = value;
            }
        }

        // Update benchmark
        else if (key == 'ben') {
            cjs.Api.loader.get('benchmark').call({
                sportId: parseInt(sport_id)
            }, function(benchmark) {
                benchmark.init(parseInt(sport_id) || 0, parseInt(value) || 0);
            });
        }
    }
};

CommCore.prototype.response_utime = function(r_status, r_headers, r_content, r_trigger, r_custom_headers) {
    if (ts = getUtimeFromDate(r_custom_headers.Date)) {
        cjs.dic.get("util_date").setServerTimestamp(ts);
    }

    var server_date = new Date();
    server_date.setTime(cjs.dic.get("util_date").getTimestamp() * 1000);
    tudate = Date.UTC(server_date.getUTCFullYear(), server_date.getUTCMonth(), server_date.getUTCDate()) / 1000;

    //    end of day
    server_date.setDate(server_date.getDate() + 1);
    tudate_end = Date.UTC(server_date.getUTCFullYear(), server_date.getUTCMonth(), server_date.getUTCDate()) / 1000;
};

// CommCore service functions {{{
CommCore.prototype.is_actual = function(r_status, r_headers) {
    // no content, already have content
    if (r_status == 304 || r_status == 204 || r_status == 1223 || r_headers == '')
        return true;
    return false;
};

CommCore.prototype.set_interval = function(action, useTimeout) {
    if (typeof useTimeout === 'undefined') {
        useTimeout = false;
    }

    var timerFunction = useTimeout ? setTimeout : setInterval;

    // clear previous interval
    updater.clear_interval('set_interval: ' + action);

    if (action == 'odds') {
        updater.interval_sync = timerFunction('updater.doc_update(\'odds\')', 100);
    } else {
        var ajaxTime = cjs.Api.ajaxSyncTime.getTime(action);
        updater.interval_sync = timerFunction('updater.doc_update(\'' + action + '\')', ajaxTime * 1000);
    }
};

CommCore.prototype.clear_interval = function(pom) {
    if (updater.interval_sync != null) {
        clearTimeout(updater.interval_sync);
        clearInterval(updater.interval_sync);
        updater.interval_sync = null;

        return true;
    }

    return false;
};

CommCore.prototype.generate_data_odds = function() {
    if (category == 5) {
        start_updating_odds();
        return;
    }

    var page = cjs.dic.get('util_page');
    if (!page.isCountryPage() && !page.isSeasonPage()) {
        var param = 'load-full-odds';
    } else {
        if (!page.isSeasonPage()) {
            var param = 'load-country-odds';
        } else {
            if (!page.isParticipantPage()) {
                var param = 'load-tournament-odds';
            } else {
                var param = 'load-participant-odds';
            }
        }
    }
    updater.doc_update(param);
};

CommCore.prototype.generate_data = function() {
    cjs.mygames._startStorageSyncTimer();

    if (sub_category == 2 || sub_category == 3) {
        cjs.Api.loader.get('react').call(function(reactCalls) {
            reactCalls.loadingState("odds-calendar", true);
        });
        pgenerate_odds();
    }
};

/**
 * Synchronizes scores in global fs_data with core update.
 *
 * This method should be called after repair update and is
 * necessary for proper score highlighting when user browses
 * between several sports.
 *
 * @param {Number} sport_id sport indetifier to filter only
 * matches associated with that sport
 */
CommCore.prototype.sync_score_data_with_update = function(sportId) {
    // we rely on global variables, so check them first to be sure
    // a bit more
    if ('undefined' === typeof fs_update) {
        return;
    }

    // list of known score field indentifiers
    var scores = [
        feedIndexes.SHAREDINDEXES_HOME_CURRENT_RESULT,
        feedIndexes.SHAREDINDEXES_AWAY_CURRENT_RESULT,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_1,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_2,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_3,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_4,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_5,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_6,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_7,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_8,
        feedIndexes.SHAREDINDEXES_HOME_RESULT_PERIOD_9,
        feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_FIRST_HALF,
        feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_SECOND_HALF,
        feedIndexes.FULLFEEDINDEXES_HOME_SCORE_PART_PESAPALLO_PENALTIES,
        feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED,
        feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_ROUND,
        feedIndexes.SHAREDINDEXES_HOME_MARTIAL_ARTS_FINISHED_SUB,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_1,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_2,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_3,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_4,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_5,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_6,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_7,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_8,
        feedIndexes.SHAREDINDEXES_AWAY_RESULT_PERIOD_9,
        feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_FIRST_HALF,
        feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_SECOND_HALF,
        feedIndexes.FULLFEEDINDEXES_AWAY_SCORE_PART_PESAPALLO_PENALTIES,
        feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED,
        feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_ROUND,
        feedIndexes.SHAREDINDEXES_AWAY_MARTIAL_ARTS_FINISHED_SUB
    ];

    cjs.dic.get('dataEventHolderProxy').getHandler().each(function(index, id) {
        var eventItem = this.getItem(id);
        var scorePos, scoreIndex, historyScore;
        if (eventItem.getSportId() != sportId) {
            return;
        }
        scorePos = scores.length;
        while (scorePos--) {
            scoreIndex = scores[scorePos];
            if (eventItem.getValue(scoreIndex) === null) {
                continue;
            }

            historyScore = undefined;
            if (fs_update.property_defined(id, scoreIndex)) {
                historyScore = fs_update.data_update[id][scoreIndex];
            }

            fs_update.property_set(id, scoreIndex, eventItem.getValue(scoreIndex), historyScore);
        }

    });

    fs_update.clear_update();
};

// }}}

// }}}

// pushserver {{{

function sync_change() {
    cjs.Api.loader.get('syncIndicator').call(function(indicator) {
        indicator.update('off');
    });

    if (cjs.push) {
        if (cjs.push.isConnected()) {
            push_disconnect();
            cjs.push.startFallback()
        } else
            push_connect();
    }
};

cjs.fromGlobalScope.sync_change = sync_change;

function push_init() {
    // hack - tohle neni udelane dobre a ceka az se predela cely updaterovaci mechanizmus nad ajaxem a pushem {{{
    if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData() === false) {
        if (cjs.Api.config.get('app', 'game_notification_push', 'enable')) {
            cjs.gamesNotificationOnly = true;
            push_connect();
        } else {
            push_disconnect();
        }
    } else if (!cjs.push.isConnected()) {
        push_connect();
    }

    if (cjs.gamesNotificationOnly) {
        cjs.push.stopScheduledFallback();
    }
    // }}}
};

/** Switch to a standard ajax syncing
 */
function push_fallback(action, fail_msg) {
    if (typeof action == 'undefined' || (action != 'start' && action != 'stop'))
        action = 'start';

    if (action == 'start') {
        cjs.Api.loader.get('syncIndicator').call(function(indicator) {
            indicator.update('off');
        });
        if (ajax_updater == 'game') {
            updater.set_interval(ajax_updater);
        } else if (updater.interval_sync == null) {
            updater.set_interval('update');
        }

        updater.doc_update('sys'); // intentionally
        sys_interval_checker = setInterval('updater.doc_update(\'sys\')', 60 * 1000);
    } else {
        updater.clear_interval('push working, dissabling ajax');
        clearInterval(sys_interval_checker);
        push_connect();
    }
};

function push_connect() {
    if (cjs.dic.get('dataEventHolderProxy').getHolder().hasData() || typeof cjs.gamesNotificationOnly !== 'undefined') {
        if (cjs.push) {
            cjs.push.connect(sudate);
            push_update_subscription();
        }
    }
};

function push_update_subscription() {
    if (cjs.push) {
        var subscription = [];

        if (typeof cjs.gamesNotificationOnly === 'undefined') {
            subscription.push('sys_' + project_type_id); // always required
            subscription.push('service'); // always required

            var sportIds = [sport_id];
            if (cjs.dic.get('list_navigation').isMyGames()) {
                sportIds = sportIds.concat(Object.values(cjs.mygames.getSports()));
                if (cjs.myTeams) {
                    var myTeamsSportIds = cjs.myTeams.getSports().map(function(i) {
                        return parseInt(i);
                    });
                    sportIds = sportIds.concat(myTeamsSportIds);
                }
            }

            var uniqueSportIds = sportIds.filter(function(value, index, self) {
                return self.indexOf(value) == index;
            });
            for (var i in uniqueSportIds) {
                var sportId = uniqueSportIds[i];
                subscription.push("u_" + sportId + "_" + project_type_id);
                subscription.push('ul_' + sportId + '_' + project_id);
            }
        } else if (ajax_updater == 'game' && mpe_delivery == 'p') {
            subscription.push('sys_' + project_type_id); // always required
            subscription.push('service'); // always required
            subscription.push("g_" + project_type_id + "_" + updater.game);

            var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
            if (feedContentLiveOdds.isActive()) {
                subscription.push("lod2_" + feedContentLiveOdds.getBookmakerId() + "_" + updater.game);
            }
        }

        if (typeof ls !== 'undefined' && ls.loginClient && ls.loginClient.loggedIn()) {
            subscription.push("lsid_" + ls.loginClient.id() + "_" + ls.loginClient.namespace());
        }

        var utilPage = cjs.dic.get("util_page");
        if (cjs.Api.config.get('app', 'game_notification_push', 'enable') && (!utilPage.isDetailPage() || utilPage.isFullPage())) {
            var subscriptionInfo = {};
            if (typeof cjs.mygames !== 'undefined') {
                for (var index in cjs.mygames.getFromStorage()) {
                    subscription.push('games_' + cjs.Api.config.get('app', 'lang', 'web') + '_' + index.split('_')[2]);
                    subscriptionInfo[index.split('_')[2]] = {
                        sportId: index.split('_')[1],
                        timestamp: new Date().getTime()
                    };
                }
            }
            cjs.push.setSubscriptionInfo(subscriptionInfo);
        }
        cjs.push.updateSubscription(subscription);
    }
};

cjs.fromGlobalScope.push_update_subscription = push_update_subscription;

function push_disconnect() {
    if (cjs.push) {
        cjs.push.disconnect();
        cjs.Api.loader.get('syncIndicator').call(function(indicator) {
            indicator.update('off');
        });
    }
};

function push_refresh() {
    if (hasRepairFeed(sudate)) {
        delete cjs.gamesNotificationOnly;
    }

    push_connect();
    push_update_subscription();
};

function refresh_iframe() {
    setTimeout("updater.set_interval('" + updater.init_action + "', true)", (Math.random() * 60 + 20) * 1000);
};

function detail_set_odds_winner(tennis_game_score, score_1st_period, score_2nd_period) {
    var $cells = $("table#default-odds tr.odd td");
    var oddTds = $cells.filter('.kx').removeClass("winner");
    var score_current = {
        0: fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE],
        1: fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE]
    };
    var score_full = {
        0: fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE],
        1: fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE]
    };
    if (isSwapped) {
        score_current = {
            0: fs_detail[feedIndexes.COMMONINDEXES_AWAY_SCORE],
            1: fs_detail[feedIndexes.COMMONINDEXES_HOME_SCORE]
        };
        score_full = {
            0: fs_detail[feedIndexes.COMMONINDEXES_AWAY_FT_SCORE],
            1: fs_detail[feedIndexes.COMMONINDEXES_HOME_FT_SCORE]
        };
    }
    if (typeof(tennis_game_score) == "undefined")
        var tennis_game_score = [0, 0];
    if (typeof(score_1st_period) == "undefined")
        var score_1st_period = [0, 0];
    if (typeof(score_2nd_period) == "undefined")
        var score_2nd_period = [0, 0];

    cjs.Api.loader.get('oddsManager').call(function(oddsManager) {
        oddTds.each(function() {
            var handicap = null;
            var handicap_type = null;
            if (fs_detail[feedIndexes.COMMONINDEXES_BETTING_TYPE] == 5) {
                var $asianHandicapCell = $(this).parent().find('td.ah');
                if ($asianHandicapCell.length) {
                    handicap = $asianHandicapCell.find("span.odds.value").text().replace(/\s/g, '');
                    handicap_type = $asianHandicapCell.attr('class').replace(/.*ht([0-9]+).*/, "$1");
                    handicap_type = handicap_type ? parseInt(handicap_type) : handicap_type;
                }
            }

            var text = $(this).text().replace(/\s/g, '');
            var outcome_type = null;
            if ($(this).hasClass('o_1'))
                outcome_type = 1;
            if ($(this).hasClass('o_0'))
                outcome_type = 3;
            if ($(this).hasClass('o_2'))
                outcome_type = 2;
            if (outcome_type && text != '-') {
                var eventStageId = fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_ID] || 0;
                if (is_odd_winning(oddsManager.isEventStageWithoutWinner(eventStageId), eventStageId, fs_detail[feedIndexes.COMMONINDEXES_EVENT_STAGE_TYPE_ID], outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, sport_id, handicap, handicap_type)) {
                    $(this).addClass("winner");
                }
            }
        });
    });
};

function is_odd_winning(isEventStageWithoutWinner, stage_id, stage_type_id, outcome_type, score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, odd_sport, handicap, handicap_type) {
    if (stage_type_id != 3 || isEventStageWithoutWinner)
        return false;

    if (typeof score_current == 'undefined') {
        throw "Cannot evaluate odd - bad score definition";
        return NULL;
    }

    var scope_id = cjs.dic.get('util_sport').getOddsScope(odd_sport);
    var betting_type_id = cjs.dic.get('util_sport').getBettingTypeId(odd_sport);

    switch (outcome_type) {
        case '0':
            outcome_type = 3;
            break;
        case 'AH1':
            outcome_type = 1;
            break;
        case 'AH2':
            outcome_type = 2;
            break;
        case 'ML1':
            betting_type_id = Oddsportal_Evaluator.BT_ML;
            outcome_type = 1;
            break;
        case 'ML2':
            betting_type_id = Oddsportal_Evaluator.BT_ML;
            outcome_type = 2;
            break;
        case 'OU1':
            betting_type_id = Oddsportal_Evaluator.BT_OU;
            outcome_type = 4;
            break;
        case 'OU2':
            betting_type_id = Oddsportal_Evaluator.BT_OU;
            outcome_type = 5;
            break;
        case '10':
            return is_odd_winning(isEventStageWithoutWinner, stage_id, stage_type_id, '0', score_current, score_full, odd_sport) ||
                is_odd_winning(isEventStageWithoutWinner, stage_id, stage_type_id, '1', score_current, score_full, score_1st_period, score_2nd_period, tennis_game_score, odd_sport, handicap, handicap_type);
            break;
    }

    if (typeof score_current[0] != 'undefined' && typeof score_current[1] != 'undefined') {
        // Score: 0 => home, 1 => away
        score_current[0] = typeof score_current[0] == 'undefined' ? 0 : parseInt(score_current[0]);
        score_current[1] = typeof score_current[1] == 'undefined' ? 0 : parseInt(score_current[1]);

        typeof score_full[0] == 'undefined' && (score_full[0] = score_current[0]);
        typeof score_full[1] == 'undefined' && (score_full[0] = score_current[0]);

        score_full[0] = typeof score_full[0] == 'undefined' || score_full[0] === '' ? score_current[0] : score_full[0];
        score_full[1] = typeof score_full[1] == 'undefined' || score_full[1] === '' ? score_current[1] : score_full[1];

        if (sport == 'tennis' && handicap_type == 2) {
            score_current[0] = score_full[0] = typeof tennis_game_score[0] == 'undefined' ? 0 : parseInt(tennis_game_score[0]);
            score_current[1] = score_full[1] = typeof tennis_game_score[1] == 'undefined' ? 0 : parseInt(tennis_game_score[1]);
        }

        event_params = {
            "sportId": odd_sport,
            "score": {
                "1": score_current,
                "2": score_full,
                "3": score_1st_period,
                "4": score_2nd_period,
                "5": score_1st_period,
                "8": score_1st_period,
                "12": score_1st_period
            }
        };

        outcome_params = {
            "scopeId": scope_id,
            "outcome": outcome_type,
            "type": betting_type_id
        };

        if (betting_type_id == Oddsportal_Evaluator.BT_AH || betting_type_id == Oddsportal_Evaluator.BT_OU) {
            outcome_params['handicapValue'] = parseFloat(handicap);
            outcome_params['handicapTypeId'] = parseFloat(handicap_type);
        }

        var ret = false;
        try {
            ret = Oddsportal_Evaluator.evaluate(event_params, outcome_params) == Oddsportal_Evaluator.RESULT_WON;
        } catch (e) {}
        return ret;
    } else {
        return false;
    }

    return false;
};

// }}}

/* Check referrer for hostname difference and show ad linked to homepage if so
 * @return void
 */
function try_alien_referer_protection() {
    if (tournamentPage || cjs.Api.config.get('app', 'detail', 'version') == 2) {
        return;
    }

    if (typeof document.referrer != 'undefined' && document.referrer != '') {
        var tester = document.createElement('a');
        tester.href = document.referrer + "";
        if (typeof tester.hostname != 'undefined' && tester.hostname != '' && !tester.hostname.match(base_url) && !$(".alien-referer").length) {
            $("body").prepend(
                '<div class="alien-referer"><a href="/" onclick="window.open(this.href); return false">' +
                'MÃ¡s informaciÃ³n en MisMarcadores.com' +
                '</a></div>'
            );
        }
    }
};

function init_layout() {
    var viewportSwitcher = cjs.dic.get('Helper_ViewportSwitcher');
    viewportSwitcher.initViewport();
};

cjs.fromGlobalScope.init_layout = init_layout;

function page_utime_init_value(currentTimestamp) {
    refresh_utime = currentTimestamp;
    page_is_initialized = true;
    counter_update();

    if (updater) {
        updater.refresh_utime = currentTimestamp;
    }
};

function setDefaultOddsFormat(format) {
    default_odds_format = format;
}

function switch_odd_format(format) {
    clientStorage.store('fs_of_' + cjs.Api.config.get('app', 'lang', 'web'), format, 365 * 86400, 'self', '/');
    default_odds_format = format;
}

function disableLive() {
    cjs.push.disconnect();
    updater.clear_interval('push working, dissabling ajax');
    clearInterval(sys_interval_checker);
};

//needed for jsonp callback (don`t remove)
function jsonp_cb() {};

function getSpreadTrans() {
    var spreadTransArr = [];
    var utilTrans = cjs.dic.get('utilTrans');

    spreadTransArr['full'] = utilTrans.translate('TRANS_ODDS_COMPARISON_ASIAN_HANDICAP');
    spreadTransArr['short'] = utilTrans.translate('TRANS_ODDS_COMPARISON_ASIAN_HANDICAP_IFRAME_SHORT');


    return spreadTransArr;
};

function loadAndShowMygamesContent(downloadFeedsForMovedGames, downloadedFeedsInPrevCall, prevNeedRepair) {
    var loadTodayFeed = false;
    var feedRequest;
    prevNeedRepair = !!prevNeedRepair;
    downloadFeedsForMovedGames = !!downloadFeedsForMovedGames;
    if (typeof downloadedFeedsInPrevCall === 'undefined') {
        downloadedFeedsInPrevCall = {};
    }
    updater.last_doc_update_category = 5;

    var utilPage = cjs.dic.get("util_page");
    var myGamesCount = cjs.mygames.getCount();
    var myTeamsCount = 0;
    if (cjs.dic.exists('MyTeams')) {
        myTeamsCount = cjs.dic.get('MyTeams').getCount();
    }

    if (myGamesCount || myTeamsCount) {
        if (sudate != 0) {
            sudate = 0;

            if (myGamesCount) {
                loadTodayFeed = true;
            }

            push_refresh();
        }
    }
    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.loadingState('mygames', false);
    });
    if (myGamesCount) {
        cjs.Api.loader.get('react').call(function(reactCalls) {
            reactCalls.loadingStateReset();
        });
        cjs.feedLoader.reset();
        cjs.feedLoader.beforeCallback(function() {
            updater.parse_only = true;
        });

        cjs.feedLoader.executeFilterCallback(function(context) {
            return /^full|^odds/.test(context);
        });

        var eventHolderProxy = cjs.dic.get('dataEventHolderProxy');
        var leagueHolderProxy = cjs.dic.get('dataLeagueHolderProxy');
        eventHolderProxy.getHolder().addItemsFromRawObject(cjs.mygames.getData());
        leagueHolderProxy.getHolder().addItemsFromRawObject(cjs.mygames.getLabels());
        eventHolderProxy.getHandler().resetIds();
        leagueHolderProxy.getHandler().resetIds();

        var frepair = prevNeedRepair;
        var neededFeeds = []; //today feeds
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds(1));

        var tmpSudate = sudate;

        for (var i in neededFeeds) {
            if (neededFeeds[i].sport_id == sport_id && !utilPage.isMixed() && !utilPage.isParent() && !loadTodayFeed) {
                continue;
            }
            feedRequest = cjs.feedRequest.getFeedData('full', neededFeeds[i].sport_id);
            if (downloadedFeedsInPrevCall[feedRequest.context] === true) {
                continue;
            }
            downloadedFeedsInPrevCall[feedRequest.context] = true;
            cjs.feedLoader.addIntoQueue(feedRequest);


            frepair = true;
        }

        var neededFeeds = []; //other feeds
        neededFeeds = neededFeeds.concat(cjs.mygames.getNeededFeeds());

        for (var i in neededFeeds) {
            feedRequest = cjs.feedRequest.getFeedData('full', neededFeeds[i].sport_id, neededFeeds[i].day);
            if (downloadedFeedsInPrevCall[feedRequest.context] === true) {
                continue;
            }
            downloadedFeedsInPrevCall[feedRequest.context] = true;
            cjs.feedLoader.addIntoQueue(feedRequest);
            frepair = true;
        }

        cjs.feedLoader.afterCallback(function() {
            cjs.Api.loader.get('react').call(function(reactCalls) {
                reactCalls.loadingState('mygames', false);
            });
            if (downloadFeedsForMovedGames != true) {
                loadAndShowMygamesContent(true, downloadedFeedsInPrevCall, frepair);
                return;
            }
            var feedData = cjs.feedRequest.getFeedData('frepair', 0);
            cjs.feedLoader.executeCompleteCallback(feedData.context);
            updater.parse_only = false;
            expand_collapse_league_load();
            if (!frepair) {
                sort_fs_data();
            }
            if (cjs.mygames.getCount()) {
                cjs.mygames.load(true);
            }

            if (cjs.dic.get('list_navigation').isMyGames()) {
                generateMygames();
            }
        });

        sudate = tmpSudate;
        if (frepair && downloadFeedsForMovedGames === true) {
            cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('frepair', 0));
        }
        cjs.Api.loader.get('react').call(function(reactCalls) {
            reactCalls.loadingState('mygames', true);
        });
        cjs.feedLoader.downloadAndExecuteFeeds();
    } else {
        generateMygames();
    }
};

function generateMygames() {
    cjs.Api.loader.get('react').call(function(reactCalls) {
        var tabId = cjs.dic.get('list_navigation').MY_GAMES;
        reactCalls.reloadMyGamesTabCounter();
        reactCalls.reloadTabContent(tabId);
        reactCalls.loadingState('mygames', false);
    });
};

function lsClientRegisterCallbacksForTournamentPage() {
    if (cjs.dic.get('util_page').isSeasonPage()) {
        var updateMygamesCheckboxes = function() {
            $('#fs-results, #fs-fixtures, #fs-summary-results, #fs-summary-fixtures').find('thead tr span.tomyg, thead tr span.tomyga').each(function(i, headEl) {
                var hasCheckedMg = false;
                var $headEl = $(headEl);
                $headEl.closest('thead').next('tbody').find('tr span.tomyg, tr span.tomyga').each(function(i, gameEl) {
                    var $gameEl = $(gameEl);
                    var gameId = $gameEl.closest('tr').attr('id');
                    var checked = cjs.mygames.check(gameId);
                    $gameEl.toggleClass('tomyg', !checked);
                    $gameEl.toggleClass('tomyga', checked);
                    if (checked) {
                        hasCheckedMg = true;
                    }
                });
                $headEl.toggleClass('tomyg', !hasCheckedMg);
                $headEl.toggleClass('tomyga', hasCheckedMg);
            });
        };

        ls.loginClient.registerCallback('login', updateMygamesCheckboxes);
        ls.loginClient.registerCallback('logout', updateMygamesCheckboxes);
        cjs.mygames.registerLocalStorageSyncCB(updateMygamesCheckboxes);
        cjs.mygames._startStorageSyncTimer();
    }

};

cjs.fromGlobalScope.lsClientRegisterCallbacksForTournamentPage = lsClientRegisterCallbacksForTournamentPage;

function getUtimeFromDate(date) {
    date = new Date(date);
    if (isNaN(date.getTime())) {
        return false;
    }
    return Math.floor(date.getTime() / 1000);
};

function setPageUtimeFromDate(date) {
    var ts = null;
    if (ts = getUtimeFromDate(date)) {
        cjs.dic.get("util_date").setServerTimestamp(ts);
    }
};


function getIdFromClass(className) {
    className = className + "";
    var id = className.match(/([gxy]\_[0-9]*\_[a-z0-9]{8,16})/i);
    if (id != null && typeof id[1] != 'undefined') {
        return id[1];
    }

    return null;
};

function isNoDuelTournament(leagueId) {
    var holder = cjs.dic.get('dataLeagueHolderProxy').findHolderByItemId(leagueId);
    if (holder === false) {
        return false;
    }
    var leagueItem = holder.getLeague(leagueId);
    if ($.inArray(parseInt(leagueItem.getValue('sport_id')), cjs.cfg.noDuelSports) == -1) {
        return false;
    }
    if (leagueItem.getValue(feedIndexes.FSCORE_NODUELINDEXES_IS_DUEL) === null || leagueItem.getValue(feedIndexes.FSCORE_NODUELINDEXES_IS_DUEL) == 1) {
        return false;
    }
    return true;
};

function isNoDuelSport(sportId) {
    return $.inArray(sportId, cjs.cfg.noDuelSports) !== -1;
}

function checkLoadedDetailParts() {
    // Call refresh count check
    try {
        document.parts_counted_increase();
        if (document.have_all_parts()) {
            detail_loaded();
            document.refresh_alert('detail');
            cjs.Api.loader.get('detail/odds/HtmlDomControllerInstance').call(
                function(htmlDomController) {
                    htmlDomController.getDataProvider().setEventStageTypeId(event_stage_type_id);
                    htmlDomController.show();
                }
            );
        }
    } catch (e) {}

};

function hasRepairFeed(sd) {
    return sd == 0 || sd == -1;
};

function registerDetailTabCallbacks() {
    detail_tab_addOnDetailTabShowCallback(
        function(currentTab, lastTab) {
            if (currentTab.join() == lastTab.join()) {
                return;
            }
            processHighlights();
        },
        'highlights'
    );
    detail_tab_addOnDetailTabHideCallback(
        function(currentTab, lastTab) {
            if (currentTab.join() == lastTab.join()) {
                return;
            }
            $('#highlights-content').html('');
        },
        'highlights'
    );
};

/**
 * NEMAZAT!!! VOLA SE V ADMINU GTM
 */
function runAfterGtmLoaded() {
    if (typeof ga !== 'undefined') {
        var clientStorage = cjs.dic.get('ClientStorage');
        var tracker = ga.getAll()[0];
        var linkerParamValue = tracker.get('linkerParam').replace('_ga=', '');
        var twoYears = 3600 * 24 * 365 * 2;
        clientStorage.store_cookie('_lsga', linkerParamValue, twoYears);
    }
};

function setupInitialLoading(action) {
    cjs.Api.loader.get('react').call(function(reactCalls) {
        reactCalls.loadingStateReset();
        if (action == 'country') {
            reactCalls.loadingState("country", true);
        } else {
            reactCalls.loadingState("fullFeed", true);
        }
    });
}

function resetAndExecuteFeedRequests(sportId, feedName, afterCallback) {
    cjs.feedLoader.reset();
    setupInitialLoading(feedName);
    if (feedName !== 'full' || hasRepairFeed(sudate)) {
        cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData('frepair', sportId));
    }

    cjs.feedLoader.addIntoQueue(cjs.feedRequest.getFeedData(feedName, sportId));
    cjs.feedLoader.executeFilterCallback(function(contextName) {
        var pattern = "^" + feedName;
        var re = new RegExp(pattern);
        return re.test(contextName);
    });
    cjs.feedLoader.afterCallback(afterCallback);
    cjs.feedLoader.downloadAndExecuteFeeds();
};

function updateDetailLiveOdds(content, hash) {
    hash = hash || cjs.dic.get('Feed_Parser').getHash(content);
    cjs.Api.loader.get('detail/odds/HtmlDomControllerInstance').call(
        function(htmlDomController) {
            cjs.Api.loader.get('oddsManager').call(function(oddsManager) {
                var singleOddsInCurrentFormatGetter = function(odd, oddsFormatOverride) {
                    return oddsManager.getSingleOddsInCurrentFormat(odd, oddsFormatOverride);
                };
                var dataProvider = htmlDomController.getDataProvider();

                var cb = function() {
                    (function(hash, content) {
                        var feedContentLiveOdds = cjs.dic.get('Feed_Content_LiveOdds');
                        feedContentLiveOdds.setBookmakerId(dataProvider.getMainLiveOddsBookmakerId());

                        var isClickable = cjs.dic.get('Helper_ClickableBookmaker').isClickable(cjs.dic.get('util_enviroment').getGlobalGeoIp(), cjs.dic.get('util_enviroment').getGeoIpIsoSubdivisionCode0());
                        var data = {
                            'hash': hash,
                            'feedContent': content,
                            'callbackAfterShow': function() {
                                set_detail_bet_icon_states(feedContentLiveOdds.getTableId());
                                htmlDomController.switchTab('live');
                            },
                            'show': isClickable && displayTabInActualTab('tab_live_odds', actual_tab) && feedContentLiveOdds.isActive() && !htmlDomController.hasActivePrematchTab()
                        };
                        var keepHashUpdated = cjs.push.isConnected() == false;
                        feedContentLiveOdds.update(data, keepHashUpdated, singleOddsInCurrentFormatGetter);
                    })(hash, content);
                };

                htmlDomController.addCallback(cb);
            });
        }
    );
};

function clog() {
    try {
        if (window.console) {
            for (var i in arguments) {
                // @debug
                console.log(arguments[i]);
            }
        }
    } catch (err) {}
};

function cerr() {
    try {
        for (var i in arguments) {
            // @debug
            console.error(arguments[i]);
        }
    } catch (err) {

    }
};

function cdir() {
    try {
        for (var i in arguments) {
            // @debug
            console.dir(arguments[i]);
        }
    } catch (err) {}
};

function gamePlanLoader(sportId, gamePlanSettings, cat, fullfeedTrigger) {
    cjs.Api.loader.get('gamePlan').call(function(info) {
        cjs.Api.loader.get('gamePlanInDOM').call(function() {

        });
    });
};

cjs.Api.loader.get('localizationRedirector').call(function(localizationRedirector) {
    localizationRedirector.redirect();
});

cjs.Api.loader.get('tv/channelsStorage').call();

cjs.Api.loader.get('modules/eventTracking/search').call();

cjs.Api.loader.get('cjs').fulfill(function(cjsCallback) {
    cjsCallback(cjs);
});

var Oddsportal_Evaluator = new Oddsportal_Evaluator_Class({
    "BT_1X2": 1,
    "BT_OU": 2,
    "BT_ML": 3,
    "BT_DC": 4,
    "BT_AH": 5,
    "BT_DNB": 6,
    "BT_TQ": 7,
    "BT_CS": 8,
    "BT_HTFT": 9,
    "BT_OE": 10,
    "BT_LW": 11,
    "OUTCOME_HOME": 1,
    "OUTCOME_AWAY": 2,
    "OUTCOME_DRAW": 3,
    "OUTCOME_OVER": 4,
    "OUTCOME_UNDER": 5,
    "OUTCOME_AWAYDRAW": 7,
    "OUTCOME_HOMEDRAW": 6,
    "OUTCOME_HOMEAWAY": 8,
    "OUTCOME_YES": 9,
    "OUTCOME_NO": 10,
    "RESULT_LOST": 1,
    "RESULT_WON": 2,
    "RESULT_RETURN": 3,
    "RESULT_50RETURN50WON": 4,
    "RESULT_50RETURN50LOST": 4
}, {
    "4": 0,
    "5": 1,
    "8": 2,
    "9": 3,
    "36": 4,
    "37": 5,
    "54": 6
}, );