/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atm.js":
/*!**********************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atm.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable valid-jsdoc */

/**
 * Using this since IE is not supporting custom Event object
 * @param {string} eventName Event to dispatch
 * @param {object} detail object to send in event
 */

function dispatchCustomEvent(eventName, detail) {
  var evt = document.createEvent('CustomEvent');
  evt.initCustomEvent(eventName, false, false, detail);
  window.dispatchEvent(evt);
}
/**
 * Update ATM object for search suggestion
 * @param atmHelper
 * @returns
 */


function suggestedSearch(atmHelper) {
  atmHelper.suggestedSearch(function (search) {
    var detail = {
      search: search
    };
    dispatchCustomEvent('typeaheadSearchClick', detail);
  });
}
/**
 * Email Signup modal
 * @param atmHelper
 * @returns
 */


function emailSignupModal(atmHelper) {
  atmHelper.emailSignupModal(function (signup) {
    var detail = {
      signup: signup
    };
    dispatchCustomEvent('emailSignup', detail);
    var email = $('input[name="hpEmailSignUp"').val();
    var url = $('.footer-email-signup').data('encode-url') + '?email=' + email;
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        if (window.pageData.eventData.signup) {
          window.pageData.eventData.signup.MD5_hash_email_address = data.md5;
          window.pageData.eventData.signup.SHA256_hash_email_address = data.sha256;
        }
      }
    });
  });
}
/**
 * Open Minicart event
 * @param atmHelper
 * @returns
 */


function openMiniCart(atmHelper) {
  atmHelper.openMiniCart(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('openMinibag', detail);
  });
}
/**
 * On Updation of Minicart
 * @returns
 */


function updateMiniCart(atmHelper) {
  atmHelper.updateMiniCart(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bagQuantityChangeFromMiniBag', detail);
  });
}
/**
 * Fetch the object of product Array
 *
 * @param {*} atmHelper
 */


function productArrayUpdate(atmHelper) {
  atmHelper.productArrayUpdate(function (productArray, products) {
    var detail = {
      product_array: productArray,
      products: products
    };
    dispatchCustomEvent('productArrayUpdate', detail);
  });
}

function toggleModelView(atmHelper) {
  atmHelper.toggleModelView(function (productArray, products) {
    var detail = {
      product_array: productArray,
      products: products
    };
    dispatchCustomEvent('toggleModelView', detail);
  });
}
/**
 * Quick view events
 * @returns
 */


function showQuickView(atmHelper) {
  atmHelper.showQuickView(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('quickLook', detail);
  });
}
/**
 * Add to bag events
 * @returns
 */


function addToBag(atmHelper) {
  atmHelper.addToBag(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bagAdd', detail);
  });
}
/**
 * select bonus product
 * @returns
 */


function selectbonusProduct(atmHelper) {
  atmHelper.selectbonusProduct(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bagAdd', detail);
  });
}
/**
 * get bonus product on applied coupon
 * @returns
 */


function getbonusproductonAppliedCoupon(atmHelper) {
  atmHelper.getbonusproductonAppliedCoupon(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bagAdd', detail);
  });
}
/**
 * Adding to wishlist
 * @param atmHelper
 * @returns
 */


function addToFav(atmHelper) {
  atmHelper.addToFav(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('favoritesAdd', detail);
  });
}
/**
 * Adding to wishlist
 * @param atmHelper
 * @returns
 */


function moveFavToBag(atmHelper) {
  atmHelper.moveFavToBag(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('moveFavoritesToBag', detail);
  });
}
/**
 * Removing From wishlist
 * @param atmHelper
 * @returns
 */


function removeFromFav(atmHelper) {
  atmHelper.removeFromFav(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('favoritesRemove', detail);
  });
}
/**
 * Fetch the object of update quantity
 *
 * @param {*} atmHelper
 */


function udpateCartQuantity(atmHelper) {
  atmHelper.udpateCartQuantity(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bagQuantityChange', detail);
  });
}
/**
 * On moving Cart item to wishlist
 * @param atmHelper
 * @returns
 */


function cartMoveToFav(atmHelper) {
  atmHelper.cartMoveToFav(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('favoritesAdd', detail);
  });
}
/**
 * On providing coupon code
 * @param atmHelper
 * @returns
 */


function enterPromoCode(atmHelper) {
  atmHelper.enterPromoCode(function (order) {
    var detail = {
      order: order
    };
    dispatchCustomEvent('promoCodeEntered', detail);
  });
}
/**
 * On Exit to payment
 * @param atmHelper
 * @returns
 */


function exitToPaymentService(atmHelper) {
  atmHelper.exitToPaymentService(function (order) {
    var detail = {
      order: order
    };
    dispatchCustomEvent('paymentServiceExit', detail);
  });
}
/**
 * For any form error
 * @param atmHelper
 * @returns
 */


function formError(atmHelper) {
  atmHelper.formError(function (form) {
    var detail = {
      form: form
    };
    dispatchCustomEvent('formError', detail);
  });
}
/**
 * On changing steps from checkout
 * @param atmHelper
 * @returns
 */


function checkoutStepChange(atmHelper) {
  atmHelper.checkoutStepChange(function (page, products, visitor) {
    var detail = {
      page: page,
      products: products,
      visitor: visitor
    };
    dispatchCustomEvent('checkoutStepChange', detail);
  });
}
/**
 * On click of wishlist share
 * @param atmHelper
 * @returns
 */


function wishlistShare(atmHelper) {
  atmHelper.wishlistShare(function () {
    dispatchCustomEvent('wishlistShare', {});
  });
}
/**
 * On click of alternate imgae
 * @param atmHelper
 * @returns
 */


function altImageView(atmHelper) {
  atmHelper.altImageView(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('altImageView', detail);
  });
}
/**
 * On click of alternate imgae
 * @param atmHelper
 * @returns
 */


function quickViewAltImageView(atmHelper) {
  atmHelper.quickViewAltImageView(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('altImageView', detail);
  });
}
/**
 * Start of waitlist
 * @param atmHelper
 * @returns
 */


function waitListStart(atmHelper) {
  atmHelper.waitListStart(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('waitListAddStart', detail);
  });
}
/**
 * Completion of waitlist
 * @param atmHelper
 * @returns
 */


function waitListComplete(atmHelper) {
  atmHelper.waitListComplete(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('waitListAddComplete', detail);
  });
}
/**
 * Bopus Start
 * @param atmHelper
 * @returns
 */


function bopusStart(atmHelper) {
  atmHelper.bopusStart(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bopusStart', detail);
  });
}
/**
 * Bopus Search
 * @param atmHelper
 * @returns
 */


function bopusSearch(atmHelper) {
  atmHelper.bopusSearch(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bopusSearch', detail);
  });
}
/**
 * Bopus Cart Search
 * @param atmHelper
 * @returns
 */


function bopusCartSearch(atmHelper) {
  atmHelper.bopusCartSearch(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bopusSearch', detail);
  });
}
/**
 * Bopus Store Select
 * @param atmHelper
 * @returns
 */


function bopusCartSelect(atmHelper) {
  atmHelper.bopusCartSelect(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('bopusSelect', detail);
  });
}
/**
 * Bopus Search
 * @param atmHelper
 * @returns
 */


function findStoreSearch(atmHelper) {
  atmHelper.findStoreSearch(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('findStoreSearch', detail);
  });
}
/**
 * Search redirect
 * @param atmHelper
 * @returns
 */


function searchRedirect(atmHelper) {
  atmHelper.searchRedirect(function (search) {
    var detail = {
      search: search
    };
    dispatchCustomEvent('searchFormSubmit', detail);
  });
}
/**
 * BFX Order Confirmation
 * @param atmHelper
 * @returns
 */


function bfxOrderConfirmation(atmHelper) {
  atmHelper.bfxOrderConfirmation(function (order) {
    dispatchCustomEvent('borderFreeOrderConfirm', order);
  });
}
/**
 * Trigger Event on Cancel Order
 * @param atmHelper
 * @returns
 */


function cancelOrder(atmHelper) {
  atmHelper.cancelOrder(function (orderNo) {
    var detail = {
      order: {
        id: orderNo
      }
    };
    dispatchCustomEvent('cancelOrder', detail);
  });
}
/**
 * SDD Start
 * @param atmHelper
 * @returns
 */


function sddPDPStart(atmHelper) {
  atmHelper.sddPDPStart(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('sddStart', detail);
  });
}
/**
 * SDD Search
 * @param atmHelper
 * @returns
 */


function sddPDPSearch(atmHelper) {
  atmHelper.sddPDPSearch(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('sddSearch', detail);
  });
}

function sddCartSearch(atmHelper) {
  atmHelper.sddCartSearch(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('sddSearch', detail);
  });
}

function sddCartSelect(atmHelper) {
  atmHelper.sddCartSelect(function (products) {
    var detail = {
      products: products
    };
    dispatchCustomEvent('sddStart', detail);
  });
}

function checkAmexPoints(atmHelper) {
  atmHelper.checkAmexPoints(function () {
    dispatchCustomEvent('checkAmexPoints', {});
  });
}

function applyAmexPoints(atmHelper) {
  atmHelper.applyAmexPoints(function () {
    dispatchCustomEvent('applyAmexPoints', {});
  });
}

module.exports = function (atmHelper) {
  suggestedSearch(atmHelper);
  emailSignupModal(atmHelper);
  toggleModelView(atmHelper);
  openMiniCart(atmHelper);
  updateMiniCart(atmHelper);
  productArrayUpdate(atmHelper);
  showQuickView(atmHelper);
  addToBag(atmHelper);
  addToFav(atmHelper);
  moveFavToBag(atmHelper);
  udpateCartQuantity(atmHelper);
  removeFromFav(atmHelper);
  cartMoveToFav(atmHelper);
  enterPromoCode(atmHelper);
  exitToPaymentService(atmHelper);
  formError(atmHelper);
  checkoutStepChange(atmHelper);
  wishlistShare(atmHelper);
  altImageView(atmHelper);
  quickViewAltImageView(atmHelper);
  waitListStart(atmHelper);
  waitListComplete(atmHelper);
  bopusStart(atmHelper);
  bopusSearch(atmHelper);
  bopusCartSearch(atmHelper);
  bopusCartSelect(atmHelper);
  findStoreSearch(atmHelper);
  searchRedirect(atmHelper);
  bfxOrderConfirmation(atmHelper);
  cancelOrder(atmHelper);
  sddPDPStart(atmHelper);
  sddPDPSearch(atmHelper);
  sddCartSearch(atmHelper);
  sddCartSelect(atmHelper);
  selectbonusProduct(atmHelper);
  getbonusproductonAppliedCoupon(atmHelper);
  checkAmexPoints(atmHelper);
  applyAmexPoints(atmHelper);
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atmHelper.js":
/*!****************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atmHelper.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Load product object
 * @param {Object} qproduct product from response
 * @returns {Object} product updated product
 */

function loadProductObject(qproduct) {
  var product = {};

  if (qproduct) {
    product.brand = qproduct.brand.name ? qproduct.brand.name : '';
    product.code = qproduct.masterProductID;
    product.name = qproduct.productName;
    var orgPrice = null;

    if (qproduct.price.type && qproduct.price.type === 'range') {
      orgPrice = qproduct.price.max.list === null ? qproduct.price.max.sales.value : qproduct.price.max.list.value;
    } else if (qproduct.productType === 'set') {
      orgPrice = qproduct.price.list.value === null ? qproduct.price.sales.value : qproduct.price.list.value;
    } else {
      orgPrice = qproduct.price.list === null ? qproduct.price.sales.value : qproduct.price.list.value;
    }

    product.original_price = orgPrice !== null ? orgPrice.toString() : '';
    product.price = qproduct.price.type && qproduct.price.type === 'range' ? qproduct.price.max.sales.value.toString() : qproduct.price.sales.value.toString();
    product.selected_sku = qproduct.id;
  }

  return product;
}
/**
 * Helper class to provide Cart line item
 * @param {Object} cartModel cart response from model
 * @param {number} hidePrevQuantity add/remove attribute from object
 * @returns {Object} product object
 */


function provideCartLineItem(cartModel, hidePrevQuantity) {
  var products = [];
  var qproducts = [];
  var selectedLineItems = [];
  var recentproduct = cartModel.recentlyMovedProduct || cartModel.product;
  var newBonusDiscountLineItem = typeof cartModel.newBonusDiscountLineItem === 'undefined' ? null : cartModel.newBonusDiscountLineItem;
  cartModel = cartModel.cart ? cartModel.cart : cartModel; //eslint-disable-line

  if (cartModel && cartModel.items && cartModel.items.length && recentproduct) {
    $.each(cartModel.items, function (index, item) {
      if (item.id === recentproduct.id || item.qualifyingProductLineItemForBonusProduct && item.qualifyingProductLineItemForBonusProduct === recentproduct.id) {
        qproducts.push(item);
        selectedLineItems.push(item);
      }
    });
  }

  if (cartModel.deletedItem) {
    qproducts.push(cartModel.deletedItem);
    selectedLineItems.push(cartModel.deletedItem);
  }

  if (cartModel.deletedBonusProductsIDs && cartModel.deletedBonusProductsIDs.length) {
    $.each(cartModel.deletedBonusProductsIDs, function (index, deletedBonusProductsID) {
      qproducts.push(deletedBonusProductsID);
      selectedLineItems.push(deletedBonusProductsID);
    });
  }

  if (qproducts == null || typeof qproducts == 'undefined') {
    qproducts = [cartModel];
  }

  var deletedLineItem = false;

  if (typeof cartModel.deletedItem !== 'undefined') {
    deletedLineItem = true;
  }

  $.each(qproducts, function (index, qproduct) {
    if (qproduct) {
      var product = loadProductObject(qproduct);
      product.bopus_store_id = qproduct.fromStoreId ? qproduct.fromStoreId : '';
      product.ship_from_store_id = '';

      if (qproduct.quantity == null || typeof qproduct.quantity == 'undefined') {
        product.quantity = deletedLineItem ? '0' : qproduct.selectedQuantity.toString();
      } else {
        product.quantity = deletedLineItem ? '0' : qproduct.quantity.toString();
      }

      if (!hidePrevQuantity && cartModel.previousQuantity) {
        product.prev_quantity = cartModel.previousQuantity.toString();
      }

      products.push(product);
    }
  });
  return {
    product: products,
    selectedLineItem: selectedLineItems
  };
}
/**
 * Provide product info
 * @returns {Object} product get product info from PDP
 */


function provideProductInfoInPdp() {
  var product = {};
  product.brand = $('.product-detail h1.product-brand-name').length ? $('.product-detail h1.product-brand-name').text().trim() : '';
  product.code = $('div[data-atm-code]').length ? $('div[data-atm-code]').data('atm-code') : '';
  product.name = $('.product-detail .product-name').first().text().trim();
  var orgPrice = null;
  var tprice = null;

  if ($('.price .range').length) {
    orgPrice = $('.product-detail .bfx-list-price.formatted_price').first().data('unformatted-price').toString();
    tprice = $('.product-detail .bfx-list-price.formatted_price').last().data('unformatted-price').toString();
  } else {
    orgPrice = $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
    tprice = $('.product-detail .bfx-sale-price.formatted_price').length ? $('.product-detail .bfx-sale-price.formatted_price').data('unformatted-price').toString() : $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
  }

  product.original_price = orgPrice;
  product.price = tprice;
  product.quantity = '1';
  product.selected_sku = $('.product-detail').data('pid') ? $('.product-detail').data('pid').toString() : '';
  return product;
}
/**
 * Provide product info
 * @returns {Object} product get product info from Cart
 */


function provideProductInfoInCart(pid) {
  var cartProdID = pid;
  var cartProd = $('.prdt-cart-details').find('[data-atm-selectedsku="' + cartProdID + '"]');
  var product = {};
  product.brand = cartProd.find('.brand-name').length ? $('.brand-name').first().text().trim() : '';
  product.code = cartProd.length ? cartProd.data('atm-code') : '';
  product.name = cartProd.find('.bfx-product-name').first().text().trim();
  var orgPrice = null;
  var tprice = null;

  if ($('.price .range').length) {
    orgPrice = cartProd.find('.bfx-list-price.formatted_price').first().data('unformatted-price').toString();
    tprice = cartProd.find('.bfx-list-price.formatted_price').last().data('unformatted-price').toString();
  } else {
    orgPrice = cartProd.find('.bfx-list-price.formatted_price').data('unformatted-price').toString();
    tprice = cartProd.find('.bfx-sale-price.formatted_price').length ? cartProd.find('.bfx-sale-price.formatted_price').data('unformatted-price').toString() : cartProd.find('.bfx-list-price.formatted_price').data('unformatted-price').toString();
  }

  product.original_price = orgPrice;
  product.price = tprice;
  product.quantity = cartProd.find('.bfx-product-qty').val().toString();
  product.selected_sku = cartProdID.toString();
  return product;
}
/**
 * This ATM is used for search sugestion objec
 * @param {function} callback - callback function
 */


function suggestedSearch(callback) {
  $('body').on('click', '.search_results span.suggeted-item, .suggestion_list .atm-search', function () {
    var $this = $(this);
    var search = {
      term: $this.data('atm-term'),
      type: $this.closest('.search_results').find('.result_heading').data('atm-searchtype'),
      typedText: $('.search-form .search-field').val()
    };

    if (callback) {
      callback(search);
    }

    return true;
  });
}
/**
 * EMail Modal subscription
 * @param {function} callback - callback function
 */


function emailSignupModal(callback) {
  $('body').on('adobeTagManager:emailsignupmodal', function (e, location) {
    var signup = {
      location: location
    };

    if (callback) {
      callback(signup);
    }
  });
}
/**
 * Event on click of open minicart
 * @param {function} callback - Callback function
 */


function openMiniCart(callback) {
  $('body').on('adobeTagManager:openMiniCart', function (e, element) {
    var products = [];

    if ($(element).find('.adobelaunch_minicart_open').length > 0) {
      $.each($(element).find('.adobelaunch_minicart_open'), function (index, cartLineItem) {
        var product = {};
        product.brand = $(cartLineItem).find('.mini-cart-details .brand-name').length ? $(cartLineItem).find('.mini-cart-details .brand-name').text().trim() : '';
        product.bopus_store_id = $(cartLineItem).data('atm-bopusstoreid') ? $(cartLineItem).data('atm-bopusstoreid').toString() : '';
        product.code = $(cartLineItem).data('atm-code');
        product.name = $(cartLineItem).find('.line-item-name span').text().trim();
        var originalPrice = '0';

        if ($(cartLineItem).find('.strike-through').length) {
          originalPrice = $(cartLineItem).find('.strike-through').data('unformatted-amount').toString();
        } else if ($(cartLineItem).find('.line-item-total-price-amount').length) {
          originalPrice = $(cartLineItem).find('.line-item-total-price-amount').data('unformatted-amount').toString();
        }

        product.original_price = originalPrice;
        var price = '0';

        if ($(cartLineItem).find('.grand-tot-holder span').length) {
          price = $(cartLineItem).find('.grand-tot-holder span').data('unformatted-amount').toString();
        } else if ($(cartLineItem).find('.line-item-total-price-amount').length) {
          price = $(cartLineItem).find('.line-item-total-price-amount').data('unformatted-amount').toString();
        }

        product.price = price;
        product.quantity = $(cartLineItem).find('.quantity-val').length ? $(cartLineItem).find('.quantity-val').val() : '1';
        product.selected_sku = $(cartLineItem).data('atm-selectedsku').toString();
        product.ship_from_store_id = '';
        products.push(product);
      });

      if (callback) {
        callback(products);
      }
    }
  });
}
/**
 * On Updation of Minicart
 * @param {function} callback Callback function
 */


function updateMiniCart(callback) {
  $('body').on('adobeTagManager:quantityUpdateFromMiniCart', function (e, obj) {
    var products = provideCartLineItem(obj).product;

    if (callback) {
      callback(products);
    }
  });
}
/**
 * get selected stores
 * @returns {Object} array return all stores
 */


function getStores() {
  var refinementValuesArray = {};

  if ($('#bopisCheck:checked').length) {
    refinementValuesArray.name = $('a.change-store').text().trim();
    refinementValuesArray.type = 'selected';
  }

  return refinementValuesArray;
}
/**
 * Get refinement
 * @param {string} $this - current element
 * @returns {Object} - refinement object
 */


function getRefinement($this) {
  var refinements = [];
  $.each($('.refinements .refinement'), function (index, refinement) {
    var trefinement = {};
    trefinement.name = $(refinement).find('.card-header h2').text().trim();
    trefinement.values = [];
    var refinementValuesArray = {};

    if ($(refinement).hasClass('refinement-category') && $($this).find('.refinement-category').text()) {
      refinementValuesArray.name = $($this).find('.refinement-category').text().trim();
      refinementValuesArray.type = 'selected';
      trefinement.values.push(refinementValuesArray);
    } else if ($(refinement).hasClass('refinement-color')) {
      $.each($('.refinement-color .selected'), function (indexColor, colorRefinement) {
        refinementValuesArray = {};
        refinementValuesArray.name = $(colorRefinement).attr('title');
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-price')) {
      if ($($this).hasClass('go-price')) {
        var formElement = $this.form;
        var min = parseInt(formElement.minPrice.value); //eslint-disable-line

        var max = parseInt(formElement.maxPrice.value); //eslint-disable-line

        refinementValuesArray.name = min + ' - ' + max;
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      }

      $.each($('.refinement-price .selected'), function (indexPrice, priceRange) {
        refinementValuesArray.name = $(priceRange).closest('li').find('.bfx-price').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-promotion')) {
      $.each($('.refinement-promotion .selected'), function (indexPromo, promoRefinement) {
        refinementValuesArray.name = $(promoRefinement).next('span').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-sales--offers')) {
      $.each($('.refinement-sales--offers .selected'), function (indexPrice, promoRefinement) {
        refinementValuesArray.name = $(promoRefinement).next('span').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else {
      $.each($(refinement).find('ul li .selected'), function (indexother, attrRefinement) {
        refinementValuesArray = {};
        refinementValuesArray.name = $(attrRefinement).text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    }

    refinements.push(trefinement);
  });
  var storeRefinement = {};
  storeRefinement.name = 'stores';
  storeRefinement.values = [];
  var storesArray = getStores();

  if (!jQuery.isEmptyObject(storesArray)) {
    storeRefinement.values.push(storesArray);
  }

  refinements.push(storeRefinement);
  return refinements;
}
/**
 * Get All Products
 * @returns {Object} - return all products
 */


function getProducts() {
  var products = [];
  $.each($('div[data-pid].product'), function (index, item) {
    var product = {};
    product.code = $(item).data('pid') ? $(item).data('pid').toString() : '';
    products.push(product);
  });
  return products;
}
/**
 * Updates product array
 *
 * @param {function} callback - callback function
 */


function productArrayUpdate(callback) {
  $('body').on('adobeTagManager:productArrayUpdate', function (e, $this) {
    var refinements = getRefinement($this);
    var sortType = 'default';

    if ($('.refinement-bar').find('select[name="sort-order"] option:selected').index() > 0) {
      sortType = 'selected';
    }

    var productArray = {
      array_page_number: pageData.product_array ? pageData.product_array.array_page_number : '1',
      //eslint-disable-line
      refinements: refinements,
      results_per_page: getProducts().length ? getProducts().length.toString() : '0',
      sort: {
        name: $('.refinement-bar').find('select[name="sort-order"] option:selected').data('id'),
        type: sortType
      },
      total_results: $('.search-count').data('search-count') ? $('.search-count').data('search-count').toString() : '0',
      results_across: pageData.product_array ? pageData.product_array.results_across : '1' //eslint-disable-line

    };

    if (callback) {
      callback(productArray, getProducts());
    }
  });
}
/**
 * Quick view events
 * @param {function} callback - Callback function
 */


function showQuickView(callback) {
  $('body').on('adobeTagManager:showQuickView', function (e, qproduct) {
    var products = [];
    var product = loadProductObject(qproduct);
    product.average_rating = qproduct.starRating ? qproduct.starRating.toString() : '';
    delete product.selected_sku;
    product.skus = qproduct.allAvailableProducts;
    var priceType = '';

    if (qproduct.badge.isClearance) {
      priceType = 'clearance';
    } else if (qproduct.badge.isFinalSale) {
      priceType = 'final sale';
    }

    product.tags = {
      feature_type: qproduct.featuredType.value ? qproduct.featuredType.value : '',
      inventory_label: qproduct.availability.messages && qproduct.availability.messages.length > 0 ? qproduct.availability.messages[0] : '',
      pip_text: qproduct.promotions && qproduct.promotions.length > 0 ? qproduct.promotions[0].calloutMsg : '',
      price_type: priceType,
      publish_date: 'new',
      returnable: (!qproduct.isNotReturnable.value).toString()
    };
    product.total_reviews = qproduct.turntoReviewCount ? qproduct.turntoReviewCount.toString() : '';
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Add to bag events
 *
 * @param {function} callback - callback function
 */


function addToBag(callback) {
  $('body').on('adobeTagManager:addToBag', function (e, cartModel) {
    var products = [];
    var cartLineItem = provideCartLineItem(cartModel);
    var products = cartLineItem.product;
    $.each(products, function (index, product) {
      product.gwp_flag = cartLineItem.selectedLineItem[index].isBonusProductLineItem.toString();
    });

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Add the product to wishlist
 * @param {function} callback - callback function
 */


function addToFav(callback) {
  $('body').on('adobeTagManager:addToFav', function (e, obj) {
    var products = [];
    var product = loadProductObject(obj);
    product.quantity = '1';
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Add the product from wishlist to cart
 * @param {function} callback - callback function
 */


function moveFavToBag(callback) {
  $('body').on('adobeTagManager:moveFavToBag', function (e, cartModel) {
    var products = provideCartLineItem(cartModel, true).product;

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Remove product from wishlist
 * @param {function} callback - callback function
 */


function removeFromFav(callback) {
  $('body').on('adobeTagManager:removeFromFav', function (e, qproduct) {
    if (qproduct && callback) {
      var products = [];
      var product = loadProductObject(qproduct);
      product.quantity = '1';
      products.push(product);
      callback(products);
    }
  });
}
/**
 * Update Cart Quantity
 * @param {function} callback - callback function
 */


function udpateCartQuantity(callback) {
  $('body').on('adobeTagManager:udpateCartQuantity', function (e, cartModel) {
    var products = provideCartLineItem(cartModel).product;

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Move cart to wishlist
 * @param {function} callback - callback function
 */


function cartMoveToFav(callback) {
  $('body').on('adobeTagManager:cartMoveToFav', function (e, cartModel) {
    if (!cartModel.error) {
      var products = provideCartLineItem(cartModel).product;

      if (callback) {
        callback(products);
      }
    }
  });
}
/**
 * Promo code enter
 * @param {function} callback - callback function
 */


function enterPromoCode(callback) {
  $('body').on('adobeTagManager:promoCodeEntered', function (e, promoCoupon) {
    var order = {};
    order.promo_code = promoCoupon.coupon;
    order.promo_code_valid = promoCoupon.status.toString();

    if (callback) {
      callback(order);
    }
  });
}
/**
 * Exit to payment
 * @param {function} callback - callback function
 */


function exitToPaymentService(callback) {
  $('body').on('adobeTagManager:exitToPaymentService', function (e, paymentservice) {
    var order = {};
    order.payment_service = paymentservice;

    if (callback) {
      callback(order);
    }
  });
}
/**
 * Form Error
 * @param {function} callback - callback function
 */


function formError(callback) {
  $('body').on('adobeTagManager:formError', function (e, formData) {
    var form = {};
    form.errorFields = formData.errorFields;
    form.name = formData.formName;

    if (callback) {
      callback(form);
    }
  });
}
/**
 * On step change of checkout
 * @param {function} callback - callback function
 */


function checkoutStepChange(callback) {
  $('body').on('adobeTagManager:checkoutStepChange', function (e, steps) {
    if ($('body').find('.is-invalid').length > 0) {
      return;
    }

    var page = {};
    var visitor = {};
    page.checkoutStep = steps.step;
    visitor.email_opt_in = $('#add-to-email-list').length && steps.step === 'payment' ? $('#add-to-email-list').prop('checked').toString() : 'false';

    if (callback) {
      callback(page, pageData.products, visitor);
    }
  });
}
/**
 * Sharing wishlist
 * @param {function} callback - callback function
 */


function wishlistShare(callback) {
  $('body').on('adobeTagManager:wishlistShare', function () {
    if (callback) {
      callback();
    }
  });
}
/**
 * On changing alt image
 * @param {function} callback - callback function
 */


function altImageView(callback) {
  $('body').on('adobeTagManager:altImageView', function () {
    var products = [];
    var product = provideProductInfoInPdp();
    product.bopus_store_id = '';
    var orgPrice = null; //eslint-disable-line

    var tprice = null; //eslint-disable-line

    if ($('.price .range').length) {
      orgPrice = $('.product-detail .bfx-list-price.formatted_price').first().data('unformatted-price').toString();
      tprice = $('.product-detail .bfx-list-price.formatted_price').last().data('unformatted-price').toString();
    } else {
      orgPrice = $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
      tprice = $('.product-detail .bfx-sale-price.formatted_price').length ? $('.product-detail .bfx-sale-price.formatted_price').data('unformatted-price').toString() : $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
    }

    product.prev_quantity = '1';
    product.ship_from_store_id = '';
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * This is for on click of alternate image
 * @param {function} callback function
 */


function quickViewAltImageView(callback) {
  $('body').on('adobeTagManager:quickViewAltImageView', function () {
    var products = [];
    var product = {};
    product.brand = $('.product-quickview .product-name').length ? $('.product-quickview .product-name').text().trim() : '';
    product.bopus_store_id = '';
    product.code = $('.product-quickview').data('master-pid');
    product.name = $('.product-quickview .product-name').text().trim();
    var orgPrice = null;
    var tprice = null;

    if ($('.price .range').length) {
      orgPrice = $('.product-detail .bfx-list-price.formatted_price').first().data('unformatted-price').toString();
      tprice = $('.product-detail .bfx-list-price.formatted_price').last().data('unformatted-price').toString();
    } else {
      orgPrice = $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
      tprice = $('.product-detail .bfx-sale-price.formatted_price').length ? $('.product-detail .bfx-sale-price.formatted_price').data('unformatted-price').toString() : $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
    }

    product.original_price = orgPrice;
    product.price = tprice;
    product.prev_quantity = '1';
    product.quantity = $('.quantity-val').length ? $('.quantity-val').val() : '1';
    product.selected_sku = $('.product-detail').data('pid') ? $('.product-detail').data('pid').toString() : '';
    product.ship_from_store_id = '';
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Wait list start
 * @param {function} callback function
 */


function waitListStart(callback) {
  $('body').on('adobe:waitListStart', function () {
    var products = [];
    var product = provideProductInfoInPdp();
    product.quantity = $('.quantity-val').val();
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Wait list complete
 * @param {function} callback function
 */


function waitListComplete(callback) {
  $('body').on('adobe:waitListComplete', function () {
    var products = [];
    var product = provideProductInfoInPdp();
    product.quantity = $('.quantity-val').val();
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Bopis PDP Start
 * @param {function} callback function
 */


function bopusPDPStart(callback) {
  $('body').on('adobe:bopusStart', function (e, param) {
    var products = [];
    var product;

    if (param && param.page === 'cart' && param.pid && param.quantity) {
      // for cart page
      product = provideProductInfoInCart(param.pid);
      product.quantity = parseInt(param.quantity).toString();
    } else {
      // for PDP
      product = provideProductInfoInPdp();
      product.quantity = $('.quantity-val').val();
    }

    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * All Available stores
 * @param {Object} stores all stores
 * @returns {Object} provide all available stores
 */


function provideAvailableStores(stores) {
  var availableStores = [];
  $.each(stores, function (index, store) {
    if (store.unitsAtStores && store.unitsAtStores > 0) {
      availableStores.push(store);
    }
  });
  return availableStores;
}
/**
 * Bopus PDP Search
 * @param {function} callback function
 */


function bopusPDPSearch(callback) {
  $('body').on('adobe:bopusSearch', function (e, storeObj) {
    if (storeObj && storeObj.stores) {
      var products = [];
      var product = provideProductInfoInPdp();
      product.bopus_stores_available = provideAvailableStores(storeObj.stores).length.toString();
      product.bopus_stores_found = storeObj.stores.length ? storeObj.stores.length.toString() : '0';
      products.push(product);

      if (callback) {
        callback(products);
      }
    }
  });
}
/**
 * Bopus Cart Search
 * @param {function} callback function
 */


function bopusCartSearch(callback) {
  $('body').on('adobe:bopusCartSearch', function (e, storeObj) {
    var products = [];

    if (storeObj) {
      var product = provideProductInfoInCart(storeObj.pid);
      product.bopus_stores_available = '0';
      product.bopus_stores_found = '0';

      if (storeObj.stores) {
        product.bopus_stores_available = provideAvailableStores(storeObj.stores).length.toString();
        product.bopus_stores_found = storeObj.stores.length ? storeObj.stores.length.toString() : '0';
      }
    }

    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Bopus Store Select
 * @param {function} callback function
 */


function bopusCartSelect(callback) {
  $('body').on('adobe:bopusCartSelect', function (e, storeObj) {
    var products = [];

    if (storeObj) {
      var product = provideProductInfoInCart(storeObj.prodid);
      product.bopus_store_id = storeObj.storeId ? storeObj.storeId.toString() : '';
      product.ship_from_store_id = '';
    }

    products.push(product);

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Bopis find stores
 * @param {function} callback function
 */


function findStoreSearch(callback) {
  $('body').on('click', 'a.schedule-an-appointment', function () {
    var products = [];
    products.push(provideProductInfoInPdp());

    if (callback) {
      callback(products);
    }
  });
}
/**
 * Used for search redirects
 * @param {function} callback - callback function
 */


function searchRedirect(callback) {
  $('body').on('click', '.site-search form.search-form button[name="search-button"]', function (e) {
    var searchTerm = $(this).siblings('input.search-field').val();
    var search = {
      term: searchTerm
    };

    if (callback) {
      callback(search);
    }
  });
}
/**
 * Bopus Store Select
 * @param {function} callback function
 */


function bfxOrderConfirmation(callback) {
  $('body').on('adobe:borderFreeOrderConfirm', function (e, order) {
    var bfxOrder = {
      order: order
    };

    if (callback) {
      callback(bfxOrder);
    }
  });
}

module.exports = {
  suggestedSearch: suggestedSearch,
  emailSignupModal: emailSignupModal,
  openMiniCart: openMiniCart,
  updateMiniCart: updateMiniCart,
  productArrayUpdate: productArrayUpdate,
  showQuickView: showQuickView,
  addToBag: addToBag,
  addToFav: addToFav,
  moveFavToBag: moveFavToBag,
  udpateCartQuantity: udpateCartQuantity,
  removeFromFav: removeFromFav,
  cartMoveToFav: cartMoveToFav,
  enterPromoCode: enterPromoCode,
  exitToPaymentService: exitToPaymentService,
  formError: formError,
  checkoutStepChange: checkoutStepChange,
  wishlistShare: wishlistShare,
  altImageView: altImageView,
  quickViewAltImageView: quickViewAltImageView,
  waitListStart: waitListStart,
  waitListComplete: waitListComplete,
  bopusStart: bopusPDPStart,
  bopusSearch: bopusPDPSearch,
  bopusCartSearch: bopusCartSearch,
  bopusCartSelect: bopusCartSelect,
  findStoreSearch: findStoreSearch,
  searchRedirect: searchRedirect,
  bfxOrderConfirmation: bfxOrderConfirmation
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/cart/cartInstoreOptions.js":
/*!**************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/cart/cartInstoreOptions.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pdpInstoreInventory = __webpack_require__(/*! ../product/pdpInstoreInventory */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/pdpInstoreInventory.js");
/**
 * Updates the store name in the radio label with the new store selected from modal.
 * @param {Object} data - Contains the store info
 * @param {sting} pliUUID - item uuid to fetch the precise container
 */


function updateStoreContent(data, pliUUID) {
  var $container = $('.cart-options[data-product-uuid="' + pliUUID + '"]');
  var shipToContainer = $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').find('a');
  shipToContainer.removeClass('no-inventory'); // content update if store is found

  if (data.storeName && data.storeName !== undefined && data.storeId && data.storeId !== undefined && shipToContainer.length > 0) {
    $container.find('input[value=instore]').attr('data-store-id', data.storeId);
    $container.find('input[value=instore]').removeClass('change-store');
    shipToContainer.html(data.storeName);
  } else if (data.changeStoreHtml) {
    $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').html(data.changeStoreHtml);
  }
}
/**
 * remove the store selector modal when a store is selected out of results
 */


function removeSelectStoreModal() {
  if ($('#inStoreInventoryModal').length > 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
    $('#inStoreInventoryModal').attr('aria-modal', 'false');
    $('.modal-backdrop').remove();
  }
}
/**
 * triggers change store option for a product matching the UUID parameter
 * @param {sting} pliUUID - item uuid to fetch the precise container
 */


function triggerChangeStore(pliUUID, noInventory) {
  var $container = $('.cart-options[data-product-uuid="' + pliUUID + '"]');
  var shipToContainer = $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').find('a');

  if (noInventory) {
    shipToContainer.addClass('no-inventory');
  } else {
    shipToContainer.removeClass('no-inventory');
  }

  if (shipToContainer.length) {
    shipToContainer.trigger('click');
  }
}

module.exports = {
  /** *initiate change store event***/
  changeStore: pdpInstoreInventory.changeStore,

  /** *initiate select store from modal event***/
  selectStoreWithInventory: pdpInstoreInventory.selectStoreWithInventory,

  /** *trigger click with enter on store search***/
  triggerClickOnEnter: pdpInstoreInventory.triggerClickOnEnter,

  /** *********CUSTOM EVENT**************
   * updates ship to home and ship to store option on toggle of radio
   * updates item with the store info
   * */
  toggleShippingOption: function toggleShippingOption() {
    $('body').on('store:cart', function (e, reqdata) {
      var pliUUID = reqdata.pliUUID;
      var storeId = reqdata.storeId;
      var prodid = reqdata.prodid;
      $.spinner().start();
      var changeShiptoUrl = reqdata.url; // form data

      var form = {
        storeId: storeId,
        uuid: pliUUID,
        prodid: prodid
      };

      if (changeShiptoUrl) {
        $.ajax({
          url: changeShiptoUrl,
          data: form,
          success: function success(data) {
            var $cartLimitedMsgCont = $('.product-info.uuid-' + pliUUID).find('.limited-inventory.cond-3');

            if (reqdata.savefromModal) {
              if (reqdata.selected === 'instore' && !data.storeId) {
                removeSelectStoreModal();
                triggerChangeStore(pliUUID);
              } else {
                updateStoreContent(data, pliUUID); // if event invoke is from modal, updates store html with radio

                removeSelectStoreModal(); // close modal on successful update
              }
            } else if (!data.storeId && reqdata.selected === 'instore') {
              triggerChangeStore(pliUUID, true); // store id is returned on successful update. Trigger change store modal on failure
            } // update of store to item fails when inventory is insufficient or on exception


            if (data.limitedInventory && $cartLimitedMsgCont.length > 0) {
              $cartLimitedMsgCont.removeClass('d-none');
            } else {
              $cartLimitedMsgCont.addClass('d-none');
            }

            $.spinner().stop();
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },

  /**
   * CUSTOM EVENT TRIGGER
   * on toggle of radio button in cart
   */
  selectStoreCart: function selectStoreCart() {
    $('.cart-options').on('click', 'input:not(.change-store)', function (e) {
      // in input field has to change store event trigger required
      if (window.sessionStorage.getItem('change-store-click') === 'true') {
        e.preventDefault();
        window.sessionStorage.removeItem('change-store-click');
        return;
      } // prepare data


      var data = {
        url: $('.cart-options').data('toggle-url'),
        pliUUID: $(this).closest('.cart-options').data('product-uuid') !== undefined ? $(this).closest('.cart-options').data('product-uuid') : null,
        storeId: $(this).attr('data-store-id') !== undefined && $(this).attr('data-store-id') !== 'null' ? $(this).attr('data-store-id') : null,
        selected: $(this).val(),
        prodid: $(this).closest('.cart-options').data('pid') !== undefined ? $(this).closest('.cart-options').data('pid') : null,
        event: e
      }; // Trigger bopus start when radio is toggled to pick up in store

      if ($(this).val() === 'instore') {
        var quantity = $(this).closest('.cart-options').data('product-qty') && $(this).closest('.cart-options').data('product-qty') != 'null' ? $(this).closest('.cart-options').data('product-qty') : '';
        $('body').trigger('adobe:bopusStart', {
          pid: data.prodid,
          page: 'cart',
          quantity: quantity
        });
      }
      /** CUSTOM EVENT TRIGGER**/


      $('body').trigger('store:cart', data);
    });
  },

  /**
   * Trigger bopus start when radio is toggled to pick up in store
   */
  triggerBopusEventCart: function triggerBopusEventCart() {
    $('.cart-options').on('click', 'input.change-store', function () {
      var selectedValue = $(this).val();

      if (selectedValue === 'instore') {
        var quantity = $(this).closest('.cart-options').data('product-qty') && $(this).closest('.cart-options').data('product-qty') != 'null' ? $(this).closest('.cart-options').data('product-qty') : '';
        var prodid = $(this).closest('.cart-options').data('pid') !== undefined ? $(this).closest('.cart-options').data('pid') : null;
        $('body').trigger('adobe:bopusStart', {
          pid: prodid,
          page: 'cart',
          quantity: quantity
        });
      }
    });
  },

  /**
   * updates the store info on select of store from the modal.
   * non-transactional and updates html only.
   * USE CASE : change store with 'ship to' option selected
   * on toggle of radio button in cart
   */
  updateStoreCart: function updateStoreCart() {
    $('body').on('store:changeStore', function (e, data) {
      var pliUUID = data.pliUUID;
      $.spinner().start();
      updateStoreContent(data, pliUUID); // if event invoke is from modal, updates store html with radio

      removeSelectStoreModal(); // close modal on successful update

      $.spinner().stop();
    });
  },

  /**
   * update the radio button to 'Ship to' if store selector modal is closed
   */
  switchShiptoOnModalClose: function switchShiptoOnModalClose() {
    function maybeSwitchShipTo() {
      var $container, $changeStoreLink;

      if ($('.btn-storelocator-search').data('shipto-selected') === 'instore' && $('.btn-storelocator-search').data('product-pliuuid') !== undefined) {
        $container = $('.cart-options[data-product-uuid="' + $('.btn-storelocator-search').data('product-pliuuid') + '"]');

        if ($container.length > 0 && $container.find('input[value=instore]').length > 0) {
          $changeStoreLink = $container.find('input[value=instore]').siblings('label[for=instore_' + $('.btn-storelocator-search').data('product-pliuuid') + ']').find('a'); // only if Pick up in store has no store selected

          if ($changeStoreLink.length === 0 && $changeStoreLink.data('store-set') === undefined || $changeStoreLink.length > 0 && $changeStoreLink.hasClass('no-inventory')) {
            $changeStoreLink.removeClass('no-inventory');
            window.sessionStorage.removeItem('change-store-click');
            $container.find('input[value=shipto]').trigger('click');
          }
        }
      }
    }

    $('body').on('hidden.bs.modal', '#inStoreInventoryModal', function () {
      $('.modal-backdrop').remove();
      maybeSwitchShipTo();
    }); //handle back navigation

    $(window).on('beforeunload', function () {
      if ($('#inStoreInventoryModal').hasClass('show')) {
        maybeSwitchShipTo();
      }
    });
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/checkout/HBCCards.js":
/*!********************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/checkout/HBCCards.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var HBC_CARD_TYPE = [{
  name: 'TCC',
  label: 'Saks Temporary Credit Card',
  expiration: true,
  pattern: [/^600304\d*$/],
  length: [29]
}, {
  name: 'TCC',
  label: 'Saks Temporary Mastercard',
  expiration: true,
  pattern: [539662, /^5(22944|39226|39662)\d*$/],
  length: [29]
}, {
  name: 'HBC',
  label: 'HBC Credit Card',
  expiration: false,
  pattern: [600291, 600292, 600293, 600295, 600296, 600297, 600298, 600299, 600300, /(600291|600292|600293|600295|600296|600297|600298|600299|600300)[0-9]{10}/],
  length: [16, 17, 18, 19]
}, {
  name: 'HBCMC',
  label: 'HBC Mastercard',
  expiration: true,
  pattern: [524336, 524337, /524337[0-9]{10}/],
  length: [16]
}, {
  name: 'SAKSMC',
  label: 'SAKS Mastercard',
  expiration: true,
  pattern: [539662, /^5(22944|39226|39662)\d*$/],
  length: [16]
}, {
  name: 'SAKS',
  label: 'Saks Store Card',
  expiration: false,
  pattern: [73, 78, 10, 29, 39, 48, 49, 68, 75, 77, 80],
  length: [10]
}, {
  name: 'LAT',
  label: 'Lord & Taylor Rewards Card',
  expiration: false,
  pattern: [/^(6026(0[1-48]|[1-3]4|91))\d*$/],
  length: [16]
}, {
  name: 'MPA',
  label: 'SaksFirst Store Card',
  expiration: false,
  pattern: [8360, 8361, 8362, 8363, 8364, 8365, 8366, 8367, 8368, 8369, /(83[6-8][0-9]{7}|839[0-8][0-9]{6}|8399[0-8][0-9]{5}|83999[0-8][0-9]{4}|839999[0-8][0-9]{3}|8399999[0-8][0-9]{2}|83999999[0-8][0-9]|839999999[0-9])/],
  length: [10]
}, {
  name: 'SAKS',
  label: 'SaksFirst Store Card',
  expiration: true,
  pattern: [/^60030(4|5)\d*$/],
  length: [16]
}];

function saksCard(cardNumber) {
  if (cardNumber.length === 8) {
    return {
      name: 'SAKS',
      label: 'Saks Store Card',
      expiration: false,
      length: [8]
    };
  }
}
/**
 * Get the BIN Range
 * @param {Object} value - Card Number
 * @returns {Object} return the BIN Range
 */


function getBin(value) {
  return value.toString().replace(/\D/g, '').substr(0, 6);
}
/**
 * Check Pattern of the Card
 * @param {Object} bin - BIN range
 * @param {Object} pattern - Card Pattern
 * @returns {boolean} Return True/False if Pattern found
 */


function checkPattern(bin, pattern) {
  if (pattern instanceof RegExp) {
    return pattern.test(bin);
  }

  pattern = pattern.toString(); // eslint-disable-line

  return bin.substr(0, pattern.length) === pattern;
}
/**
 * Check the BIN range based on Card Type
 * @param {Object} bin - BIN Range
 * @param {Object[]} min [min, max] - MiX and Max of Range
 * @returns {boolean} Return True/False if Range found
 */


function checkRange(bin, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      min = _ref2[0],
      max = _ref2[1];

  var length = min.toString().length;
  var value = parseInt(bin.substr(0, length)); // eslint-disable-line

  return value >= min && value <= max;
}
/**
 * Check the Card based on BIN range or Pattern.
 * @param {Object} bin - BIN range
 * @param {Object} pattern - Type Pattern
 * @returns {boolean} Return True/False Bif card is based or Pattern or range
 */


function checkCard(bin, pattern) {
  return Array.isArray(pattern) ? checkRange(bin, pattern) : checkPattern(bin, pattern);
}
/**
 * Check the Card number length to make sure it's not too long for the Card Type
 * @param {Object} card - Entered Card
 * @param {Object} pattern - Type Pattern
 * @returns {boolean} Return True/False Bif card is under max length for the Card Type
 */


function checkLength(card, lengthArray) {
  var cardLength = card.toString().length;
  return lengthArray.some(function (typeLength) {
    return cardLength <= typeLength;
  });
}
/**
 * Check the Card Type of entered Card.
 * @param {Object} card - Entered Card
 * @returns {Object} Found Card
 */


function cardType(card) {
  var bin = getBin(card);
  var detectedTypes = [];
  HBC_CARD_TYPE.forEach(function (type) {
    type.pattern.forEach(function (pattern) {
      if (checkCard(bin, pattern) && checkLength(card, type.length)) {
        detectedTypes.unshift(type);
      }
    });
  });
  return detectedTypes[0] || {};
}

module.exports = {
  cardType: cardType,
  saksCard: saksCard
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js":
/*!**********************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! base/components/clientSideValidation */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/clientSideValidation.js");

var floatLabel = __webpack_require__(/*! ../floatLabel */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/floatLabel.js");

var creditCardValidator = __webpack_require__(/*! ../components/creditCardValidator */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/creditCardValidator.js");

var HBCCards = __webpack_require__(/*! ../checkout/HBCCards */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/checkout/HBCCards.js");
/**
 * function to validate form
 *
 * @param {event} event - trigger event
 * @returns {boolean} - returns validity of form
 */


function _validateForm(event) {
  var valid = true;

  if (this.checkValidity && !this.checkValidity()) {
    // safari
    valid = false;

    if (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    $(this).find('input, select').each(function () {
      if (!this.validity.valid) {
        $(this).trigger('invalid', this.validity);
      }
    });
  }

  return valid;
}
/**
 * Get All parent invalid fields
 * @returns
 */


function getAllinvalidFields(element) {
  // ATM for create account form or sign in
  if ($(element).closest('form.registration').length || $(element).closest('form.login').length) {
    if ($('label.is-invalid').length) {
      var formData = {};
      var errorData = [];
      $.each($('label.is-invalid'), function (index, item) {
        errorData.push($(item).text().trim());
      });
      formData.errorFields = errorData;
      formData.formName = $(element).closest('form.registration').length ? 'create account' : 'sign in'; // $('body').trigger('adobeTagManager:formError', formData);
    }
  }
}
/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */


function clearForm(form) {
  $(form).find('.form-control.is-invalid').not('.cardExpiration, #cardNumber, #gcCardNumber, #accessNumber, .saks-footer-email').removeClass('is-invalid');
  window.setTimeout(function () {
    getAllinvalidFields(form);
  }, 500);
}
/**
 * check CC
 *
 * @param {string} creditCard - credit card number
 * @returns {boolean} - return validtity check
 */


function luhnCheck(creditCard) {
  if (/[^0-9-\s]+/.test(creditCard)) return false;
  var nCheck = 0;
  var bEven = false; // eslint-disable-next-line no-param-reassign

  creditCard = creditCard.replace(/\D/g, '');

  for (var n = creditCard.length - 1; n >= 0; n--) {
    var cDigit = creditCard.charAt(n);
    var nDigit = parseInt(cDigit, 10); // eslint-disable-next-line no-cond-assign

    if (bEven && (nDigit *= 2) > 9) nDigit -= 9;
    nCheck += nDigit;
    bEven = !bEven;
  }

  return nCheck % 10 === 0;
}
/**
 * refreshing form before opening price override pop-up
 *
 */


$('#editCSCPrice').on('show.bs.modal', function () {
  clearForm($(this).find('.price-override-form'));
  $('.price-override-form .form-group').find('span').remove();
  $('#editCSCPrice #newPrice').parents('.form-group').find('.form-control-label').removeClass('is-invalid input-focus');
});
/**
 * validate form on blur
 *
 * @param {event} event - trigger event
 * @returns {boolean} - returns validity of form
 */

function validateFormonBlur(event) {
  var valid = true;
  var validationMessage;

  if (this.checkValidity && !this.checkValidity()) {
    // safari
    valid = false;

    if (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    if (!this.validity.valid) {
      this.setCustomValidity('');

      if (!this.validity.valid) {
        validationMessage = $(this).data('default-error') || this.validationMessage;
        $(this).addClass('is-invalid');
        $(this).closest('.form-group').find('.form-control-label').addClass('is-invalid');

        if ($(this).next('span').length === 0) {
          $('<span></span>').insertAfter(this);
          $(this).next('span').addClass('invalid');
        }

        if ($(this).next('span').hasClass('valid')) {
          $(this).next('span').removeClass('valid').addClass('invalid');
        }

        if (this.validity.patternMismatch && $(this).data('pattern-mismatch')) {
          validationMessage = $(this).data('pattern-mismatch');
        }

        if ((this.validity.rangeOverflow || this.validity.rangeUnderflow) && $(this).data('range-error')) {
          validationMessage = $(this).data('range-error');
        }

        if ((this.validity.tooLong || this.validity.tooShort) && $(this).data('range-error')) {
          validationMessage = $(this).data('range-error');
        }

        if (this.validity.valueMissing && $(this).data('missing-error')) {
          validationMessage = $(this).data('missing-error');
        }

        $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
      } // ATM for create account form or sign in


      getAllinvalidFields(this);
    }
  } else {
    if ($(this).attr('id') === 'cardNumber') {
      var isValidCardLength = false;

      if (!$('.card-number-wrapper').attr('data-type')) {
        var sakscreditCard = $(this).val().replace(/\D/g, '');

        if (sakscreditCard.length === 8 && luhnCheck($(this).val())) {
          var cartType = HBCCards.saksCard(sakscreditCard);

          if (cartType && cartType.name) {
            $('.card-number-wrapper').attr('data-type', cartType.name);
            $('.card-number-wrapper').attr('data-plcccard', 'true');
            $('#cardType').val(cartType.name);
            isValidCardLength = true;
          }
        } else {
          isValidCardLength = true;
        } // If we have empty card number on page load, don't validate it

      } else if ($('.card-number-wrapper').attr('data-type') && $('.card-number-wrapper').attr('data-type') !== 'unknown') {
        isValidCardLength = creditCardValidator.validateCreditCardTypeLength($(this).val(), $('.card-number-wrapper').attr('data-type'));
      }

      var cardType = $('.card-number-wrapper').attr('data-type') && $('.card-number-wrapper').attr('data-type');

      if (cardType === 'HBC' || cardType === 'SAKS' || cardType === 'MPA') {
        // Skip LUHN Check for HBC Card.
        if (!isValidCardLength) {
          validationMessage = $(this).data('pattern-mismatch');
          $(this).prev('.form-control-label').addClass('is-invalid');
          $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
          $(this).addClass('is-invalid');

          if ($(this).next('span').length === 0) {
            $('<span></span>').insertAfter(this);
            $(this).next('span').addClass('invalid');
          }

          if ($(this).next('span').hasClass('valid')) {
            $(this).next('span').removeClass('valid').addClass('invalid');
          }

          valid = false;
          var form = {};
          form.formName = 'payment';
          form.errorFields = ['cardNumber']; // $('body').trigger('adobeTagManager:formError', form);

          return valid;
        }
      } else if (!luhnCheck($(this).val()) || !isValidCardLength) {
        validationMessage = $(this).data('pattern-mismatch');
        $(this).closest('.form-group').find('.form-control-label').addClass('is-invalid');
        $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
        $(this).addClass('is-invalid');

        if ($(this).next('span').length === 0) {
          $('<span></span>').insertAfter(this);
          $(this).next('span').addClass('invalid');
        }

        if ($(this).next('span').hasClass('valid')) {
          $(this).next('span').removeClass('valid').addClass('invalid');
        }

        valid = false;
        var form = {};
        form.formName = 'payment';
        form.errorFields = ['cardNumber']; // $('body').trigger('adobeTagManager:formError', form);

        return valid;
      }
    }

    if ($(this).attr('id') === 'tccCardNumber') {
      var isValidCardLength = false;
      isValidCardLength = creditCardValidator.validateCreditCardTypeLength($(this).val(), $('.tcc-card-number-wrapper').attr('data-type'));
      var cardType = $('.tcc-card-number-wrapper').attr('data-type');

      if (!isValidCardLength) {
        validationMessage = $(this).data('pattern-mismatch');
        $(this).prev('.form-control-label').addClass('is-invalid');
        $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
        $(this).addClass('is-invalid');

        if ($(this).next('span').length === 0) {
          $('<span></span>').insertAfter(this);
          $(this).next('span').addClass('invalid');
        }

        if ($(this).next('span').hasClass('valid')) {
          $(this).next('span').removeClass('valid').addClass('invalid');
        }

        valid = false;
        var form = {};
        form.formName = 'payment';
        form.errorFields = ['tccCardNumber']; // $('body').trigger('adobeTagManager:formError', form);

        return valid;
      } else {
        if ($('#tccCardNumber').val() !== '') {
          // IF Card length is valid 29 digit, check if card itself is valid or not.
          var tccCardNumber = $('#tccCardNumber').data('cleave').getRawValue();
          var tccVerifyURL = $('.tcc-card-number').data('tccverify');
          var validateDate = $('.tcc-card-number').data('validateDate');
          var fullTCCUrl = tccVerifyURL + '?tcc=' + tccCardNumber + '&verifydate=' + validateDate;
          var cacheTCCfield = $(this);
          var isValidTCC = true;
          $('body').spinner().start();
          $.ajax({
            url: fullTCCUrl,
            type: 'get',
            dataType: 'json',
            async: false,
            success: function success(data) {
              if (!data.validTCC) {
                validationMessage = $(cacheTCCfield).data('pattern-mismatch');

                if (data.validationMessage) {
                  validationMessage = data.validationMessage;
                }

                $(cacheTCCfield).prev('.form-control-label').addClass('is-invalid');
                $(cacheTCCfield).parents('.form-group').find('.invalid-feedback').text(validationMessage);
                $(cacheTCCfield).addClass('is-invalid');

                if ($(cacheTCCfield).next('span').length === 0) {
                  $('<span></span>').insertAfter(cacheTCCfield);
                  $(cacheTCCfield).next('span').addClass('invalid');
                }

                if ($(cacheTCCfield).next('span').hasClass('valid')) {
                  $(cacheTCCfield).next('span').removeClass('valid').addClass('invalid');
                }

                isValidTCC = false;
                var form = {};
                form.formName = 'payment';
                form.errorFields = ['tccCardNumber'];
              }

              $('body').spinner().stop();
            },
            error: function error(data) {
              validationMessage = $(cacheTCCfield).data('pattern-mismatch');
              $(cacheTCCfield).prev('.form-control-label').addClass('is-invalid');
              $(cacheTCCfield).parents('.form-group').find('.invalid-feedback').text(validationMessage);
              $(cacheTCCfield).addClass('is-invalid');

              if ($(cacheTCCfield).next('span').length === 0) {
                $('<span></span>').insertAfter(this);
                $(cacheTCCfield).next('span').addClass('invalid');
              }

              if ($(cacheTCCfield).next('span').hasClass('valid')) {
                $(cacheTCCfield).next('span').removeClass('valid').addClass('invalid');
              }

              isValidTCC = false;
              var form = {};
              form.formName = 'payment';
              form.errorFields = ['tccCardNumber'];
              $('body').spinner().stop();
            }
          });

          if (!isValidTCC) {
            return false;
          }
        }
      }
    }

    if ($(this).prop('required') && $(this).val() !== '' || $(this).attr('data-validation')) {
      $(this).removeClass('is-invalid');
      $(this).closest('.form-group').find('.form-control-label').removeClass('is-invalid');
      $(this).closest('div').find('.invalid-feedback').text('');

      if ($(this).next('span').length === 0) {
        $('<span></span>').insertAfter(this);
        $(this).next('span').addClass('valid');
      }

      if ($(this).next('span').length !== 0 && $(this).next('span').hasClass('invalid')) {
        $(this).next('span').removeClass('invalid').addClass('valid');
      }
    }
  }

  if (!valid) {
    if ($(this).closest('.shipping-form').length) {
      var formShipping = {};
      formShipping.name = 'shipping address';
      var errorFields = [];
      $.each($('.shipping-form input[type="text"]'), function (index, item) {
        if (!item.validity.valid) {
          errorFields.push($(item).attr('name'));
        }
      });
      formShipping.errorFields = errorFields.join(','); // $('body').trigger('adobeTagManager:formError', formShipping);
    } else if ($(this).closest('.billing-form').length) {
      var _errorFields = [];
      $.each($('.billing-form input[type="text"]'), function (index, item) {
        if (!item.validity.valid) {
          _errorFields.push($(item).attr('name'));
        }
      });

      if (_errorFields.length) {
        var formBilling = {};
        formBilling.name = 'payment';
        formBilling.errorFields = _errorFields.join(','); // $('body').trigger('adobeTagManager:formError', formBilling);
      }
    }
  }

  return valid;
}
/**
 * check form validity of checkout
 *
 * @returns {boolean} - validity check return
 */


function checkFormvalidCheckout() {
  var valid = true;

  if ($(this).closest('.checkout-primary-section').length !== 0) {
    // eslint-disable-next-line consistent-return
    $(this).closest('form:visible').find('input:visible, select:visible').each(function () {
      if ($(this).prop('required') && $(this).parents('.gift-card-form-group').length === 0 && !$(this).prop('disabled')) {
        if ($(this).next('span').length !== 0 && $(this).next('span').hasClass('valid')) {
          valid = true;
        } else if ($(this).attr('type') === 'radio' && $(this).closest('.radio-holder').find('input[type="radio"]:checked').length === 1) {
          valid = true;
        } else if ($(this).attr('type') === 'checkbox') {
          valid = true;
        } else {
          valid = false;
          return false;
        }
      }
    });
  }

  return valid;
}

base.invalid = function () {
  $('form input, form select').on('invalid', function (e) {
    e.preventDefault();
    this.setCustomValidity('');

    if (!this.validity.valid) {
      var validationMessage = $(this).data('default-error') || this.validationMessage;
      $(this).closest('.gift-card-form-group').find('.generic-error').empty();
      $(this).addClass('is-invalid');
      $(this).closest('.form-group').find('.form-control-label').addClass('is-invalid');

      if ($(this).parents('.price-override-form')) {
        if ($(this).next('span').length === 0) {
          $('<span></span>').insertAfter(this);
        }

        $(this).next('span').addClass('invalid');

        if ($(this).next('span').hasClass('valid')) {
          $(this).next('span').removeClass('valid').addClass('invalid');
        }
      }

      if (this.validity.patternMismatch && $(this).data('pattern-mismatch')) {
        validationMessage = $(this).data('pattern-mismatch');
      }

      if ((this.validity.rangeOverflow || this.validity.rangeUnderflow) && $(this).data('range-error')) {
        validationMessage = $(this).data('range-error');
      }

      if ((this.validity.tooLong || this.validity.tooShort) && $(this).data('range-error')) {
        validationMessage = $(this).data('range-error');
      }

      if (this.validity.valueMissing && $(this).data('missing-error')) {
        validationMessage = $(this).data('missing-error');
      }

      $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
    } else {
      $(this).parents('.form-group').find('label').removeClass('is-invalid');
    }
  });
};

base.submit = function () {
  $('form').on('submit', function (e) {
    return _validateForm.call(this, e);
  });
};

base.buttonClick = function () {
  $('form button[type="submit"], form input[type="submit"]').on('click', function () {
    // clear all errors when trying to submit the form
    clearForm($(this).parents('form'));
  });
};

module.exports = {
  invalid: base.invalid,
  clearForm: base.clearForm,
  submit: base.submit,
  buttonClick: base.buttonClick,
  validateFormonBlur: validateFormonBlur,
  checkFormvalidCheckout: checkFormvalidCheckout,
  onblurValidation: function onblurValidation() {
    $('body').on('blur', 'form input, form select', function (e) {
      if ($(this).prop('required') || $(this).attr('data-validation')) {
        if ($(this).hasClass('CA-po-Validate') && !$.trim(this.value) == '' && $(this).closest('form').find('select[name$="country"]').val() == 'CA') {
          var zipVal = $(this).val().trim().replace(/\s/g, '').toUpperCase();
          var formatedVal = zipVal.substr(0, 3) + ' ' + zipVal.substr(3, zipVal.length);
          $(this).val(formatedVal);
        } else if ($(this).hasClass('cartPOTaxCAonly')) {
          var zipVal = $(this).val().trim().replace(/\s/g, '').toUpperCase();
          var formatedVal = zipVal.substr(0, 3) + ' ' + zipVal.substr(3, zipVal.length);
          $(this).val(formatedVal);
        }

        validateFormonBlur.call(this, e);
      }

      var result = checkFormvalidCheckout.call(this);
      /* if (!($(this).parents('.gift-card-form-group').length > 0 || $(this).parents('.promo-form-group').length > 0)) {
                if (result && $(this).closest('.checkout-primary-section').length !== 0) {
                    $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
                } else {
                    $('.next-step-button:visible').find('button[type="submit"]').attr('disabled', 'disabled');
                }
            }*/
      // show error message on restricted state code address entry on shipping form

      if ($(e.currentTarget.closest('.shipping-form')).length > 0) {
        var restrictedStates = $('.shipping-address-block').length ? $('.shipping-address-block').data('restricted-sates') : null;

        if (restrictedStates && restrictedStates !== 'null' && restrictedStates.length > 0 && $('select[name$=_shippingAddress_addressFields_states_stateCode]', '.shipping-form').val().length > 0 && $('.restricted-state-message').length) {
          var data = $('select[name$=_shippingAddress_addressFields_states_stateCode]', '.shipping-form').val(); // eslint-disable-next-line no-mixed-operators

          if (data && restrictedStates.indexOf(data.toLowerCase()) >= 0 || restrictedStates.indexOf(data.toUpperCase()) >= 0) {
            $('.restricted-state-message').removeClass('d-none'); // $('.next-step-button:visible').find('button[type="submit"]').attr('disabled', 'disabled');
          } else {
            $('.restricted-state-message').addClass('d-none');
          }
        } // show shipping methods only on the complete shipping address entry


        if (result && $(this).closest('.checkout-primary-section').length !== 0) {
          $('.shipping-method-heading.saks-only').removeClass('d-none');
          $('.shipping-method-list').removeClass('d-none');
          $('.shipping-method-list').removeClass('no-address');
          $('.hbc-shipping-method-description').removeClass('d-none');

          if ($('.no-shipping-method-msg').attr('data-has-methods') != undefined && $('.no-shipping-method-msg').attr('data-has-methods') === 'true') {
            $('.no-shipping-method-msg').addClass('d-none');
            $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
          } else if ($('.no-shipping-method-msg').attr('data-has-methods') != undefined && $('.no-shipping-method-msg').attr('data-has-methods') === 'false') {
            $('.no-shipping-method-msg').removeClass('d-none');
            $('.next-step-button-disable:visible').find('button[type="submit"]').attr('disabled', 'disabled');
          }

          $('.dr-msg').removeClass('d-none');
        } else if (!$('.gift-message.gift-content-section').is(':visible')) {
          $('.shipping-method-heading.saks-only').addClass('d-none');
          $('.shipping-method-list').addClass('d-none');
          $('.hbc-shipping-method-description').addClass('d-none');
          $('.no-shipping-method-msg').addClass('d-none');
          $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
          $('.dr-msg').addClass('d-none');
        }
      }
    });
  },
  checkValidationOnAjax: function checkValidationOnAjax($form, noValidate, noValidateShippingMethods, removeValidMark) {
    if ($form) {
      $form.find('input:visible, select:visible').each(function () {
        validateFormonBlur.call(this);

        if (noValidate) {
          $(this).removeClass('is-invalid');
          $(this).closest('.form-group').find('.form-control-label').removeClass('is-invalid');
          $(this).next('.invalid').remove();
          $(this).parent().find('.invalid-feedback').empty();
        }

        if (removeValidMark) {
          if ($(this).next('span').hasClass('valid')) {
            $(this).next('span').removeClass('valid');
          }
        }

        var result = checkFormvalidCheckout.call(this);
        /* if ($(this).parents('.gift-card-form-group').length === 0) {
                    if (result && $(this).closest('.checkout-primary-section').length !== 0) {
                        $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
                    } else {
                        $('.next-step-button:visible').find('button[type="submit"]').attr('disabled', 'disabled');
                    }
                }*/

        if ($('.shipping-method-list').length > 0 && (!noValidateShippingMethods || noValidateShippingMethods === undefined)) {
          // show shipping methods only on the complete shipping address entry
          if (result && $(this).closest('.checkout-primary-section').length !== 0) {
            $('.shipping-method-heading.saks-only').removeClass('d-none');
            $('.shipping-method-list').removeClass('d-none');
            $('.shipping-method-list').removeClass('no-address');
            $('.hbc-shipping-method-description').removeClass('d-none');

            if ($('.no-shipping-method-msg').attr('data-has-methods') != undefined && $('.no-shipping-method-msg').attr('data-has-methods') === 'true') {
              $('.no-shipping-method-msg').addClass('d-none');
              $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
            } else if ($('.no-shipping-method-msg').attr('data-has-methods') != undefined && $('.no-shipping-method-msg').attr('data-has-methods') === 'false') {
              $('.no-shipping-method-msg').removeClass('d-none');
              $('.next-step-button-disable:visible').find('button[type="submit"]').attr('disabled', 'disabled');
            }

            $('.dr-msg').removeClass('d-none');
          } else {
            $('.shipping-method-heading.saks-only').addClass('d-none');
            $('.shipping-method-list').addClass('d-none');
            $('.hbc-shipping-method-description').addClass('d-none');
            $('.no-shipping-method-msg').addClass('d-none');
            $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
            $('.dr-msg').addClass('d-none');
          }
        }
      });

      if (noValidate) {
        if ($('.po-check-message').is(':visible')) {
          $('.po-check-message').addClass('d-none');
        }

        if ($('.restricted-state-message').is(':visible')) {
          $('.restricted-state-message').addClass('d-none');
        }
      }
    }
  },
  updatePoPatterWithCountry: function updatePoPatterWithCountry($form) {
    if ($form !== undefined && $form.find('.validateZipCode').length > 0) {
      var country_id = $form.find('select[name$="country"] option:selected').attr('id');
      var zipfield = $form.find('.validateZipCode');

      if ($form.find('.billing-addr-form').length != 0) {
        country_id = $form.find('.billing-addr-form').find('#billingCountry option:selected').attr('id');
        zipfield = $form.find('.billing-addr-form').find('.billingZipCode');
      }

      var pattern_ca = zipfield.attr('data-pattern-ca').toString();
      var pattern_us = zipfield.attr('data-pattern-us').toString();
      var pattern_uk = zipfield.attr('data-pattern-uk').toString();

      if (country_id == 'CA') {
        zipfield.attr('pattern', pattern_ca);
        zipfield.attr('minlength', '');
        zipfield.attr('maxlength', '7');
      } else if (country_id == 'US') {
        zipfield.attr('pattern', pattern_us);
        zipfield.attr('minlength', '5');
        zipfield.attr('maxlength', '12');
      } else if (country_id == 'UK') {
        zipfield.attr('pattern', pattern_uk);
        zipfield.attr('minlength', '6');
        zipfield.attr('maxlength', '8');
        $('.state-drop-down').addClass('d-none');
        $('.state-drop-down').find('.form-group').removeClass('required');
        $('.state-drop-down').find('.remove-required-uk-address').prop('required', false);
        $('.state-drop-down').find('.remove-required-uk-address').removeClass('is-invalid');
        $('.state-input').removeClass('d-none');
      }
    }
  },
  checkIfFormElementFocused: function checkIfFormElementFocused() {
    $(window).on('load', function () {
      $('body').find('form:visible').each(function () {
        // eslint-disable-next-line consistent-return
        $(this).find('input:visible').each(function () {
          if ($(this).attr('autofocus') === 'autofocus') {
            $(this).closest('.form-group').find('.form-control-label').addClass('input-focus');
            return false;
          }
        });
      });
    });
  },
  functions: {
    validateForm: function validateForm(form, event) {
      _validateForm.call($(form), event || null);
    },
    clearForm: clearForm
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/collapsibleItem.js":
/*!*****************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/collapsibleItem.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  var sizes = ['xs', 'sm', 'md', 'lg', 'xl'];
  $('.menu-main-item').on('click', function (e) {
    $(this).toggleClass('active');
    $('.account-mainmenu').toggleClass('active');
  });
  /**
   *
   * @param {Element|jQuery} el The element that triggers the group toggle. Can be the title button or the group container
   * @param {Boolean} open Whether to open or close the group.
   */

  function toggleFilterGroup(el, open) {
    var $el = $(el);
    var $group;
    var $trigger;

    if ($el.is('[class*="collapsible-"]')) {
      $group = $el;
      $trigger = $group.find('.btn:first');
    } else {
      $trigger = $el;
      $group = $trigger.parents('[class*="collapsible-"]');
    }

    if (open) {
      $group.addClass('active');
      $trigger.attr('aria-expanded', true);
    } else {
      $group.removeClass('active');
      $trigger.attr('aria-expanded', false);
    }
  }
  /**
   * Opens a filter group
   * @param {Element|jQuery} el The element that triggers a filter group to open. Can be the title button or the group container
   */


  function openFilterGroup(el) {
    toggleFilterGroup(el, true);
  }
  /**
   * Closes a filter group
   * @param {Element|jQuery} el The element that triggers a filter group to close. Can be the title button or the group container
   */


  function closeFilterGroup(el) {
    toggleFilterGroup(el, false);
  }
  /**
   * Closes all filter group
   * @param {jQuery} $group The group that initiated. This function looks for open siblings of that group and closes them.
   */


  function closeAllFilterGroups($group) {
    $group.siblings('.active').each(function (_, group) {
      closeFilterGroup(group);
    });
  }

  var selectors = sizes.map(function (size) {
    return '.collapsible-' + size + ' .btn[aria-controls]';
  });
  $('body').on('click', selectors.join(','), function (evt) {
    evt.preventDefault();
    var $btn = $(evt.currentTarget);

    if ($btn.attr('aria-expanded') === 'true') {
      closeFilterGroup($btn);
    } else {
      if ($btn.data('closeSiblings')) {
        closeAllFilterGroups($btn.parents('[class*="collapsible-"]'));
      }

      openFilterGroup($btn);
    }
  }); // Open the first refinement filter group

  $('.refinements .collapsible-xl .btn[aria-controls]').first().trigger('click');
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/creditCardValidator.js":
/*!*********************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/creditCardValidator.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Get Card Type and their length
 * @param type
 * @returns {object} detectedType
 */

function creditCardType(type) {
  var card_types = [{
    name: 'amex',
    valid_length: [15]
  }, {
    name: 'diners',
    valid_length: [14]
  }, {
    name: 'jcb',
    valid_length: [16]
  }, {
    name: 'visa',
    valid_length: [13, 16]
  }, {
    name: 'mastercard',
    valid_length: [16]
  }, {
    name: 'discover',
    valid_length: [16]
  }, {
    name: 'unionPay',
    valid_length: [16]
  }, {
    name: 'HBC',
    valid_length: [16]
  }, {
    name: 'HBCMC',
    valid_length: [16]
  }, {
    name: 'SAKSMC',
    valid_length: [16]
  }, {
    name: 'SAKS',
    valid_length: [8, 10, 16]
  }, {
    name: 'LAT',
    valid_length: [16]
  }, {
    name: 'MPA',
    valid_length: [10]
  }, {
    name: 'tcc',
    valid_length: [29]
  }];
  var detectedType = card_types.find(function (cartType) {
    return cartType.name === type;
  });

  if (detectedType) {
    return detectedType;
  }

  return null;
}

module.exports = {
  validateCreditCardTypeLength: function validateCreditCardTypeLength(creditCard, type) {
    var cardType = creditCardType(type);

    if (cardType && cardType.valid_length) {
      var cc = creditCard.replace(/\D/g, '');
      var cardLength = cc.length;
      var enteredCardLength = cardType.valid_length.find(function (len) {
        return len === cardLength;
      });

      if (enteredCardLength) {
        return true;
      }
    }

    return false;
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/formValidation.js":
/*!****************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/formValidation.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function clearFormErrors(form) {
  $(form).find('.form-control.is-invalid').removeClass('is-invalid');
}

module.exports = function (formElement, payload) {
  // clear form validation first
  clearFormErrors(formElement);
  $('.alert', formElement).remove();

  if (_typeof(payload) === 'object' && payload.fields) {
    Object.keys(payload.fields).forEach(function (key) {
      if (payload.fields[key]) {
        var feedbackElement = $(formElement).find('[name="' + key + '"]').parent().children('.invalid-feedback');

        if (feedbackElement.length > 0) {
          if (Array.isArray(payload[key])) {
            feedbackElement.html(payload.fields[key].join('<br/>'));
          } else {
            feedbackElement.html(payload.fields[key]);
          }

          feedbackElement.siblings('.form-control').addClass('is-invalid');
        }

        if ($(formElement).find('[name="' + key + '"]').parent().children('.valid').length > 0) {
          $(formElement).find('[name="' + key + '"]').parent().children('.valid').removeClass('valid').addClass('invalid');
        } // ATM for create account form

        /*
                if ($(formElement).closest('form.registration').length) {
                	var formData = {};
                    formData.errorFields =  $(formElement).find('[name="' + key + '"]').parent().find('.form-control-label').text().trim();
                    formData.formName = 'create account';
                    $('body').trigger('adobeTagManager:formError', formData);	
                }
                */

      }
    });
  }

  if (payload && payload.error) {
    var form = $(formElement).prop('tagName') === 'FORM' ? $(formElement) : $(formElement).parents('form');
    form.prepend('<div class="alert alert-danger" role="alert">' + payload.error.join('<br/>') + '</div>');
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/promo-tray-widget.js":
/*!*******************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/promo-tray-widget.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var drawer;
var items;
var overlay;
var scrollholder;
var arrowB;
var arrowF;
var promoWidth;
var promoCount;
var cartFlag;
var transitionEvent = 'transitionend';
var MAX_TITLE_LEN = 25 - 1;
var MAX_DISCLAIMER_LEN = 34 - 1;
var MAX_DESC_LEN = 88 - 1; // iphone x

var devicesDisabledSwipeUp = ['Mobile/15A372'];
var passiveSupported = false;

var formFields = __webpack_require__(/*! ../formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js"); // test to determine whether browser supports passive event listeners for scroll events


try {
  var options = Object.defineProperty({}, 'passive', {
    get: function get() {
      passiveSupported = true;
    }
  });
  window.addEventListener('test', options, options);
  window.removeEventListener('test', options, options);
} catch (err) {
  passiveSupported = false;
}
/**
 * disable buttons via property, mouse and tab behavior. returns original set to maintain chainability
 * @param {Object} buttons disabled if url not available
 * @returns {Object} styled element.
 */


function disableButtons(buttons) {
  var $btns = $(buttons);

  if ($btns.length === 0) {
    return $btns;
  }

  $btns.each(function (i, el) {
    var $el = $(el);
    var canDisable = $el.is('button');
    var origIndex = $el.attr('tabindex');

    if (undefined !== origIndex) {
      $el.data('origIndex', origIndex);
    } // disabled class adds pointer-events: none;
    // -1 makes the button untabble


    if (canDisable) {
      $el.prop('disabled', true);
    } else {
      $el.addClass('disabled').attr('tabindex', -1);
    }
  });
  return $btns;
}
/**
 * coupon code is updated at session level
 * @param {string} code disabled if url not available
 */


function updateSessionCoupons(code) {
  if (typeof code !== 'string' || code === '' || !window.sessionStorage.hasOwnProperty.hasOwnProperty('APPLIED_COUPONS')) {
    return;
  } // eslint-disable-line


  if (!Array.isArray(window.sessionStorage.hasOwnProperty.APPLIED_COUPONS)) {
    window.sessionStorage.hasOwnProperty.APPLIED_COUPONS = [code];
  } else if (window.sessionStorage.hasOwnProperty.APPLIED_COUPONS.indexOf(code) === -1) {
    window.sessionStorage.hasOwnProperty.APPLIED_COUPONS.push(code);
  } // eslint-disable-line

}
/**
 * @param {Object} el element to be styled
 * @returns {Object} styled element.
 */


function outerWidth(el) {
  var style = getComputedStyle(el);
  return parseInt(style.width, 10) + parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
}
/**
 * @param {Object} el to be faded on page load
 */


function fadeIn(el) {
  var last = +new Date();
  el.style.opacity = 0; // eslint-disable-line

  el.style.display = 'block'; // eslint-disable-line

  (function tick() {
    el.style.opacity = +el.style.opacity + (new Date() - last) / 400; // eslint-disable-line

    if (+el.style.opacity < 0.5) {
      requestAnimationFrame(tick);
    } else {
      el.style.opacity = ''; // eslint-disable-line
    }
  })();
}
/**
 * @param {Object} el to be faded out on page load
 */


function fadeOut(el) {
  var last = +new Date();
  el.style.opacity = 0.5; // eslint-disable-line

  (function tick() {
    el.style.opacity = +el.style.opacity - (new Date() - last) / 400; // eslint-disable-line

    if (+el.style.opacity > 0) {
      requestAnimationFrame(tick);
    } else {
      el.style.opacity = 0; // eslint-disable-line

      el.style.display = 'none'; // eslint-disable-line
    }
  })();
}
/**
 * Sets the message to the button
 * @param {Object} btn to be styled
 */


function addCouponSuccessMessage(btn, appliedText) {
  btn.classList.add('success');
  var couponapplied = $('.promo-tray').data('couponapplied');
  btn.innerHTML = '<i class="icon-success"></i>' + couponapplied; // eslint-disable-line
}
/**
 * Sets the width of the promotional modal
 * @param {Object} data used to design promo tray modal
 * @returns {Object} style being set for the element promo tray modal
 */


var sanitizeData = function sanitizeData(data) {
  var nodes = document.createElement('div');
  var offers;
  var offerLen;
  var i;
  nodes.innerHTML = data;
  offers = nodes.getElementsByClassName('pd-offer');

  if (offers !== null) {
    for (i = 0, offerLen = offers.length; i < offerLen; i++) {
      var node = offers[i];
      var title = node.querySelector('.title');
      var details = node.querySelector('.details');
      var disclaimer = node.querySelector('.disclaimer');
      var coupon = node.querySelector('.coupon');
      var code;
      var url;
      var titleVal;
      var detailsVal;
      var appliedText;
      var btn = node.querySelector('button');

      if (btn === null) {
        btn = document.createElement('button');
      }

      if (title == null || details == null) break;
      titleVal = title.textContent;
      detailsVal = details.textContent; // enforce maximum lengths

      title.textContent = titleVal.slice(0, MAX_TITLE_LEN);
      details.textContent = detailsVal.slice(0, MAX_DESC_LEN);

      if (disclaimer !== null) {
        disclaimer.textContent = disclaimer.textContent.slice(0, MAX_DISCLAIMER_LEN);
      }

      if (coupon !== null) {
        code = coupon.getAttribute('data-couponcode');
        appliedText = coupon.getAttribute('data-appliedtext');

        if (code === null) {
          url = '#';
        } else {
          // enforce a correct coupon code URL
          url = $('.promo-tray').data('promodrawer-addcoupon');
        }

        btn.setAttribute('class', 'coupon');
        btn.setAttribute('href', url); //btn.textContent = 'Apply'; // CTA per reqs

        if (window.sessionStorage.hasOwnProperty('APPLIED_COUPONS') && // eslint-disable-line
        Array.isArray(window.sessionStorage.APPLIED_COUPONS) && window.sessionStorage.APPLIED_COUPONS.indexOf(code) !== -1) {
          addCouponSuccessMessage(btn, appliedText);
        }
      } else {
        btn.setAttribute('class', '');
        var icon = document.createElement('i');
        icon.setAttribute('class', 'icon-arrow-right');
        btn.appendChild(icon); // Append CTA icon to button
      } // disable coupon addition if a valid code isn't present


      if (url === '#') {
        disableButtons(btn);
      }
    }
  } else nodes.innerHTML = '';

  return nodes;
};
/**
 * function for slick arrow in carousel
 */

/**
 * function setting width of promo tray
 */


function showTransitionEnd() {
  fadeIn(overlay);
  drawer.removeEventListener(transitionEvent, showTransitionEnd);
}
/**
 * hiding of promo tray on page load
 */


function hideTransitionEnd() {
  fadeOut(overlay);
  drawer.querySelector('ul.toggleVis').style.display = 'none';
  drawer.removeEventListener(transitionEvent, hideTransitionEnd);
}
/**
 * Promo Tray Slider
 */


function promotraySlider() {
  var $promotray = $('.toggleVis');

  if ($promotray.hasClass('slick-initialized')) {
    $promotray.slick('unslick');
  }

  $promotray.slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    dots: true,
    arrows: true,
    infinite: false,
    responsive: [{
      breakpoint: 1023,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 767,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1,
        dots: false,
        arrows: false,
        centerMode: true,
        accessibility: true
      }
    }]
  });
  $('.slick-dots li').find('button').attr('tabindex', 0);
  $promotray.on('afterChange', function () {
    $promotray.find('.slick-list').addClass('center-content');

    if ($promotray.find('.slick-slide').first().hasClass('slick-active')) {
      $promotray.find('.slick-list').removeClass('center-content');
    }
  });
}
/**
 * function showing promo tray
 */


function showPromos() {
  if (drawer !== null) {
    drawer.className = 'promo-drawer-open';
    fadeIn(overlay);
    drawer.querySelector('ul.toggleVis').style.display = 'block';

    if (transitionEvent && drawer) {
      drawer.addEventListener(transitionEvent, showTransitionEnd);
    }

    promotraySlider();
    $('body').addClass('modal-open');
    $('a.bay-shop-details').on('click', function (e) {
      e.preventDefault();
      var contentURL = $(this).attr('href');
      showDetailsDialog(contentURL);
    }); // Hide the chat widget if it's open

    if ($('body').hasClass('chat-overlay')) {
      $('.liveChat-btn').trigger('click');
    }

    formFields.findInsiders($('#promo-drawer')); // Adding description to links for ADA

    var totalOffers = $('.scroll-holder ul').find('li.pd-offer').length;
    $('.scroll-holder ul').find('li.pd-offer').each(function (i) {
      $(this).find('.offer-main .text-bg').attr('id', i + 1 + '-of-' + totalOffers + '-offers');
      $(this).find('.offer-main .bottom-section a').attr('aria-describedby', i + 1 + '-of-' + totalOffers + '-offers');
    }); // Focus on the first focusable item in the drawer

    $('#promo-drawer .scroll-holder .slick-current *:focusable:first').focus();
  }
}
/**
 * function hiding promo tray
 */


function hidePromos() {
  if (drawer !== null) {
    if (transitionEvent && drawer) {
      drawer.addEventListener(transitionEvent, hideTransitionEnd);
    }

    drawer.className = '';
    fadeOut(overlay);
    $('body').removeClass('modal-open');

    if (cartFlag === true && document.getElementById('wrapper').classList.contains('pt_cart')) {
      location.reload(true);
    }

    drawer.querySelector('.drawer-trigger').focus();
  }
}
/**
 * updates the currently 'active' offer for mobile snap-to-scroll / arrows
 * @param {Object} direction to be styled
 */


function updateActive(direction) {
  var startPos = scrollholder.scrollLeft;
  var newLeft = startPos + (direction === 'right' ? -promoWidth : promoWidth); // animate scrollLeft property

  /* eslint-disable */

  (function animate() {
    var last = +new Date();
    var maxPos = scrollholder.scrollWidth - scrollholder.offsetWidth;
    var diff = Math.abs(startPos - newLeft);

    if (newLeft > maxPos) {
      newLeft = maxPos;
    }

    (function tick() {
      var step = diff * (new Date() - last) / 400;
      scrollholder.scrollLeft += startPos < newLeft ? step : -step;

      if (startPos > newLeft && scrollholder.scrollLeft > newLeft && scrollholder.scrollLeft > 0 || startPos < newLeft && scrollholder.scrollLeft < newLeft && scrollholder.scrollLeft <= maxPos) {
        requestAnimationFrame(tick);
      } else {
        scrollholder.scrollLeft = newLeft;
      }
    })();
  })();
  /* eslint-enable */

}
/**
 * function for initializing events for displaying promo tray
 */


function initializeEvents() {
  var trigger;
  var startX;
  var startY;
  var startTime;
  var elapsedTime;
  var allowedTime = 300;
  var restraint = 100;
  var i = 0;
  var len;

  var touchStart = function touchStart(e) {
    var touchobj = e.changedTouches[0];
    startX = touchobj.pageX;
    startY = touchobj.pageY;
    startTime = new Date().getTime();
  };
  /* eslint-disable */


  var touchEnd = function touchEnd(e) {
    var touchobj = e.changedTouches[0];
    var distX = touchobj.pageX - startX;
    var distY = touchobj.pageY - startY;
    var swipeDir = 'none';
    var i = 0;
    var len;
    elapsedTime = new Date().getTime() - startTime;

    if (elapsedTime <= allowedTime) {
      if (Math.abs(distY) >= 40 && Math.abs(distX) <= restraint) {
        swipeDir = distY < 0 ? 'up' : 'down';
      }
    }

    if (swipeDir !== 'none') {
      e.preventDefault();
    }

    if (swipeDir === 'up') {
      for (len = devicesDisabledSwipeUp.length; i < len; i++) {
        if (navigator.userAgent.indexOf(devicesDisabledSwipeUp[i]) !== -1) {
          e.preventDefault();
          return;
        }
      }

      showPromos();
    } else if (swipeDir === 'down') {
      hidePromos();
    }
  };
  /* eslint-enable */


  var toggleFn = function toggleFn(e) {
    e.preventDefault();

    if (drawer.classList.contains('promo-drawer-open')) {
      hidePromos();
    } else {
      showPromos();
    }
  }; // toggle drawer state


  trigger = document.getElementsByClassName('drawer-trigger');

  if (trigger !== null) {
    trigger[0].addEventListener('touchstart', touchStart, false);
    trigger[0].addEventListener('touchend', touchEnd, false);
    trigger[0].addEventListener('click', toggleFn, false);
  }
  /**
   * Button on click of which coupon to be added to cart
   * @param {Object} e direction to be styled
   */


  function btnClick(e) {
    var that = this;
    var href = this.getAttribute('href');
    /**
     * Append the data passed in the function to the coupon apply button
     * @param {Object} data direction to be styled
     */

    function processJSON(data) {
      var parent;
      var code;
      var appliedText;
      /* eslint-disable */

      data = typeof data === 'string' ? JSON.parse(data) : data;

      if (data && data.success) {
        parent = that.parentNode.parentNode;
        code = parent.getElementsByClassName('coupon')[0].getAttribute('data-couponcode');
        appliedText = parent.getElementsByClassName('coupon')[0].getAttribute('data-appliedtext');
        addCouponSuccessMessage(that, appliedText);
        updateSessionCoupons(code);
        cartFlag = true;
      }
      /* eslint-enable */


      var promoCoupon = {};
      promoCoupon.coupon = code;
      promoCoupon.status = data.success ? data.success : false;
      $('body').trigger('adobeTagManager:promoCodeEntered', promoCoupon);
    }

    if (this.classList.contains('coupon')) {
      e.preventDefault();
      if (this.classList.contains('success')) return;
      var form = {
        couponCode: this.getAttribute('data-couponcode')
      };
      $.ajax({
        url: href,
        method: 'POST',
        data: form,
        success: function success(data) {
          return processJSON(data);
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    } else {
      window.location = href;
    }
  } // nav arrows


  var btns = drawer.querySelectorAll('.arrow-back, .arrow-forward');

  if (btns) {
    for (i = 0, len = btns.length; i < len; i++) {
      btns[i].addEventListener('click', function () {
        updateActive(this.classList.contains('arrow-back') ? 'right' : 'left');
      });
    }
  } // add coupon / shop now


  btns = drawer.querySelectorAll('.pd-offer button');
  var appliedCouponCodes = $('span.applied-couponcodes').data('couponcodes');
  var couponCodes;
  var couponapplied = $('.promo-tray').data('couponapplied');

  if (appliedCouponCodes !== null && appliedCouponCodes !== '') {
    couponCodes = appliedCouponCodes.split('|');
  }

  if (btns) {
    for (i = 0, len = btns.length; i < len; i++) {
      btns[i].addEventListener('click', btnClick);

      if (couponCodes !== undefined && couponCodes.length >= 1) {
        if (couponCodes.indexOf(btns[i].dataset.couponcode) !== -1) {
          btns[i].classList.add('success');
          btns[i].innerHTML = '<i class="icon-success"></i>' + couponapplied;
        }
      }
    }
  }
}
/**
 * @function
 * @description appends the parameters to the given url and returns the changed url
 * @param {string} url the url to which the parameters will be added
 * @param {Object} name of the anchor tag
 * @param {string} value the url to which the parameters will be added
 * @returns {Object} url element.
 */


function appendParamToURL(url, name, value) {
  // quit if the param already exists

  /* eslint-disable */
  if (url.indexOf(name + '=') !== -1) {
    return url;
  }

  value = decodeURIComponent(value);
  var separator = url.indexOf('?') !== -1 ? '&' : '?';
  return url + separator + name + '=' + encodeURIComponent(value);
  /* eslint-disable */
}
/**
 * @function
 * @description appends the parameters to the given url and returns the changed url
 * @param {string} url the url to which the parameters will be added
 * @param {Object} params to be appended to url
 * @returns {string} url element.
 */


function appendParamsToUrl(url, params) {
  var _url = url;
  $.each(params, function (name, value) {
    _url = appendParamToURL(_url, name, value);
  });
  return _url;
}
/**
 * @function
 * @description appends the parameters to the given url and returns the changed url
 * @param {string} url the url to which the parameters will be added
 * @returns response for the url passed
 */


function fetch(url) {
  /* eslint-disable */
  return new TPromise(function (resolve, reject) {
    try {
      // tag vendor is partially patching fetch into the window object, breaking IE11
      fetch(new Request(url), {
        credentials: 'include'
      }).then(function (response) {
        if (response.ok) {
          resolve(response.text());
        } else {
          reject(new Error(response.statusText));
        }
      });
    } catch (e) {
      $.ajax({
        url: url
      }).done(function (response) {
        resolve(response);
      }).fail(function (jxhr, status, err) {
        reject(new Error(err));
      });
    }
  });
  /* eslint-enable */
}

function showDetailsDialog(contentUrl) {
  var htmlString = '<!-- Modal -->' + '<div class="modal show" id="bay-promotray-dialog" class="bay-promotray-dialog" role="dialog" style="display: block;">' + '<div class="modal-dialog">' + '<!-- Modal content-->' + '<div class="modal-content"><button type="button" class="promo-tray-close close svg-svg-22-cross-dims svg-svg-22-cross" data-dismiss="modal" aria-label="Close"></button>' + '<div class="modal-body"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $.ajax({
    url: contentUrl,
    type: 'get',
    dataType: 'html',
    success: function success(response) {
      $('#bay-promotray-dialog').find('.modal-body').html(response);
      $('#bay-promotray-dialog').modal('show');
      $('.promo-tray-close,.modal-backdrop').on('click', function () {
        $('#bay-promotray-dialog').modal('hide');
        $('#bay-promotray-dialog').remove();
      });
      $('#bay-promotray-dialog').on('hidden.bs.modal', function () {
        $('#bay-promotray-dialog').modal('hide');
        $('#bay-promotray-dialog').remove();
      });
    },
    error: function error(err) {
      console.log('error : ' + err);
      $('#bay-promotray-dialog').remove();
    }
  });
}

exports.init = function () {
  var wrapper = document.getElementById('wrapper');
  var url; // don't display on sign-in / checkout

  if ($('.promoTrayEnabled').length > 0 && $('.promoTrayEnabled').val() == 'true') {} else {
    return;
  }

  overlay = document.createElement('div');
  overlay.id = 'promo-drawer-overlay';
  document.body.appendChild(overlay); // hide drawer on click anywhere outside

  overlay.addEventListener('click', hidePromos);
  drawer = document.createElement('div');
  drawer.id = 'promo-drawer';
  var offertrayheader = $('.promo-tray').data('offertraymsg');
  drawer.innerHTML = "\n    <button type=\"button\" id=\"drawer-tab\" class=\"drawer-trigger\">\n        ".concat(offertrayheader, "\n    </button>\n    <div class=\"scroll-holder\">\n        <ul class=\"toggleVis custom-scrollbar\"></ul>\n    </div>");
  document.body.appendChild(drawer);
  arrowB = drawer.getElementsByClassName('arrow-back')[0];
  arrowF = drawer.getElementsByClassName('arrow-forward')[0];
  items = drawer.getElementsByTagName('ul')[0];
  /**
   * @function
   * @Places the data into promo tray
   * @param {Object} data which needs to be appended in promo tray
   */

  function buildDrawer(data) {
    var safeData = sanitizeData(data);
    var offers;
    items.innerHTML = safeData.innerHTML || '';
    offers = document.getElementsByClassName('pd-offer');

    if (offers) {
      promoCount = offers.length;

      if (promoCount) {
        promoWidth = outerWidth(offers[0]);
      }
    }

    if (promoCount > 0) {
      // slide into view via CSS transition
      if (!$('.search-result-options').hasClass('is-fixed')) {
        document.getElementById('drawer-tab').classList.add('ready');
      }

      document.documentElement.classList.add('promo-drawer');
      initializeEvents();
    } else {
      document.getElementById('promo-drawer').classList.add('hide');
    }
  } // Check if product listings options is on page


  if ($('.product-listings-options').length > 0) {
    // set variables
    var headerOffset = -50;
    var plo = $('.product-listings-options').offset().top + headerOffset;
    var resultHits = $('.results-hits').offset().top;
    var $window = $(window);
    var lastScrollTop = $window.scrollTop();
    /**
     * @function
     * @description hide/show product listing options and promo drawer based on scroll position
     */

    function updatePLO() {
      // Bind scroll event on small screens
      if (window.matchMedia('(max-width: 767px)').matches) {
        // Fix the Product Listings Options to top of Page and Hide Promo Drawer
        var scrollTop = $window.scrollTop();

        if (scrollTop >= plo && !(scrollTop >= resultHits)) {
          $('.search-result-options').addClass('is-fixed');
          if (scrollTop > lastScrollTop) $('#drawer-tab').removeClass('ready'); // scrolling down
          else $('#drawer-tab').addClass('ready'); // scrolling up
        } else {
          $('.search-result-options').removeClass('is-fixed');
          $('#drawer-tab').addClass('ready');
        }
      } else {
        $('#drawer-tab').addClass('ready');
      } // update lastScrollTop value


      lastScrollTop = scrollTop;
    } // Bind scroll


    $window.on('scroll', updatePLO); // Bind on page load

    if (window.matchMedia('(max-width: 767px)').matches) {
      // immediately run function on small screen sizes
      updatePLO();
    }
  }

  url = appendParamsToUrl($('.promo-tray').data('promodrawer-url'), {
    format: 'ajax'
  });
  $.ajax({
    url: url,
    type: 'get',
    dataType: 'html',
    success: function success(response) {
      // $('.modal-body').html(response);
      buildDrawer(response);
    },
    error: function error() {
      $('#consent-tracking').remove();
    }
  });
  /* customscrollbar(true);*/
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/slot.js":
/*!******************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/slot.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Collapse comments and whitespace in empty content slots
 * So they can be targeted in CSS properly with :empty
 */

function collapseEmptySlots() {
  var slots = document.querySelectorAll('.home-slots');

  if (!slots.length) {
    return;
  }

  Array.from(slots).forEach(function (slot) {
    if (!slot.childElementCount) {
      slot.innerHTML = '';
    }
  });
}

module.exports = {
  collapseEmptySlots: collapseEmptySlots
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js":
/*!************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  getCookie: function getCookie(name) {
    // eslint-disable-line
    var keyValue = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
    return keyValue ? keyValue[2] : null;
  },
  setCookie: function setCookie(name, value, days) {
    // eslint-disable-line
    var expires = new Date();
    expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
    document.cookie = name + '=' + value + ';path=/;Secure;SameSite=None;expires=' + expires.toUTCString();
  },
  deleteCookie: function deleteCookie(name) {
    var keyValue = getCookie(name); // eslint-disable-line

    setCookie(name, keyValue, '-1'); // eslint-disable-line
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/floatLabel.js":
/*!*************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/floatLabel.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Reset float label.
 */

function resetFloatLabel() {
  // eslint-disable-next-line consistent-return
  $('.form-group input, .form-group select, .form-group textarea').each(function () {
    var $label = $(this).closest('.form-group').find('label'); // Handled auto-focus issue only in case of IE for address select box CO flow.

    if ($(this).hasClass('selected-option') && $(this).text().length !== '') {
      return false;
    }

    if ($(this).val() !== null) {
      if (!$(this).hasClass('do-not-float')) {
        if (!$(this).val().length && $label.hasClass('input-focus')) {
          $label.removeClass('input-focus');
        }

        if ($(this).val().length) {
          $label.addClass('input-focus');
        }
      }
    } else if ($label.hasClass('input-focus')) {
      $label.removeClass('input-focus');
    }
  });
}

module.exports = {
  resetFloatLabel: resetFloatLabel
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js":
/*!************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clientSideValidation = __webpack_require__(/*! ../components/clientSideValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js");

var focusEnabled = false;
/**
 * Needed because there was the autofill suggestion occurs.
 */

function adjustForAutofill() {
  $('.form-group:visible').each(function () {
    var $self = $(this);
    var $input;
    var $inputLabel = $self.find('label');
    var $inputLength;

    if ($self.find('select').length) {
      if ($self.find('.selected-option').length > 0) {
        $input = $self.find('.selected-option');
        $inputLength = $input.text().trim();
      } else {
        $input = $self.find('select option:selected');
        $inputLength = $input.val();
      }
    } else if ($self.find('input').length) {
      $input = $self.find('input');
      $inputLength = $input.val();
    } else {
      $input = $self.find('textarea');
      $inputLength = $input.val();
    }

    if ($inputLength && $inputLength.length && !$inputLabel.hasClass('input-focus')) {
      $inputLabel.addClass('input-focus');
    }

    if (($input.hasClass('shippingZipCode') || $input.hasClass('billingZipCode') || $input.hasClass('addressFromZipcode')) && $inputLabel.hasClass('input-focus')) {
      focusEnabled = true;
    }
  });
}

function quantityHoverBorder() {
  $('body').find('.quantity-field').on('focus mouseover', ' .btn-number', function () {
    if ($(this).attr('disabled') !== 'disabled') {
      $(this).closest('.quantity-field').find('.input-number').addClass('hover-border');
    }
  }).on('focusout mouseout', ' .btn-number', function () {
    $(this).closest('.quantity-field').find('.input-number').removeClass('hover-border');
  });
}
/**
 * When clicking on the document we are closing the custom select dropdown.
 */


function closeCustomSelect() {
  $('.custom-select.current_item select').trigger('blur');
  $('.custom-select').removeClass('current_item');
  $('.custom-select li').removeClass('hover');
}
/**
 * color drop down activate perfect scroll
 *
 * @param {jquery} $element - DOM element for current element
 **/


var activatePerfectScroll = function activatePerfectScroll($element) {
  /* eslint-disable */
  var perfectScrollbar = new window.perfectScrollbar($element, {
    /* eslint-enable */
    wheelSpeed: 2,
    wheelPropagation: true,
    minScrollbarLength: 50,
    maxScrollbarLength: 68
  });
};

function findInsiders($element) {
  if (typeof $element === 'undefined') {
    return;
  }

  var tabbable = $element.find('select, input, textarea, button, a').filter(':visible');
  var firstTabbable = tabbable.first();
  var lastTabbable = tabbable.last();
  /*set focus on first input*/

  firstTabbable.focus();
  /*redirect last tab to first input*/

  lastTabbable.on('keydown', function (e) {
    if (e.which === 9 && !e.shiftKey) {
      e.preventDefault();
      firstTabbable.focus();
    }
  });
  /*redirect first shift+tab to last input*/

  firstTabbable.on('keydown', function (e) {
    if (e.which === 9 && e.shiftKey) {
      e.preventDefault();
      lastTabbable.focus();
    }
  });
}
/**
 * Converting the default select dropdown to unorder list HTML structure.
 */


function updateSelect() {
  $('.custom-select').each(function () {
    var $this = $(this);

    if ($this.find('.selected-option').length === 0) {
      $this.append('<div class="selected-option"></div>');
    }

    if ($this.find('.selection-list').length === 0) {
      $this.append('<ul class="selection-list"></ul>');
      var $list = '';
      var $listClass = '';
      $this.find('option').each(function () {
        if ($(this).attr('class') && $(this).attr('class') !== undefined && $(this).attr('class') !== '') {
          $listClass = $(this).attr('class');
        }

        if ($(this).attr('disabled') === 'disabled') {
          $listClass = 'option-disabled';
        }

        var styleAttr;

        if ($(this).data('background-color')) {
          styleAttr = 'style="background-color:' + $(this).data('background-color') + '"';
        } else if ($(this).data('background-image')) {
          styleAttr = 'style="background-image: url(' + $(this).data('background-image') + ')"';
        }

        if ($(this).closest('.custom-select').hasClass('custom-color-dropdown')) {
          if (!styleAttr) {
            $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '"><div class="item" style="text-align:center;"><div class="inner-item"></div>' + $(this).text() + '</div></li>';
          } else {
            $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '"><div class="item"><div class="inner-item"></div><span class="swatch-color-holder swatch-circle-' + $(this).text().toLocaleLowerCase().trim() + '"' + styleAttr + '></span>' + $(this).text() + '</div></li>';
          }
        } else {
          $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '">' + $(this).text() + '</li>';
        }
      });
      $this.find('.selection-list').append($list);
    } else {
      $this.find('.selection-list li').each(function () {
        $this.attr('label', $.trim($(this).text().toLocaleLowerCase()));
      });
    }

    if ($(this).hasClass('custom-color-dropdown')) {
      var styleAttr;
      var currElement = $(this).find('select option:selected');

      if (currElement.data('background-color')) {
        styleAttr = 'style="background-color:' + currElement.data('background-color') + '"';
      } else if (currElement.data('background-image')) {
        styleAttr = 'style="background-image: url(' + currElement.data('background-image') + ')"';
      }

      if (!styleAttr) {
        $this.find('.selected-option').html($(this).find('select option:selected').text());
      } else {
        $this.find('.selected-option').html('<span class="swatch-color-holder swatch-circle-' + currElement.text().toLocaleLowerCase().trim() + '"' + styleAttr + '></span>' + $(this).find('select option:selected').text());
      }
    } else {
      $this.find('.selected-option').text($(this).find('select option:selected').text());
    }

    $this.find('.selection-list li').removeClass('selected').removeClass('hover').eq($(this).find('select option:selected').index()).addClass('selected');

    if ($(this).find('select option:selected').val() !== '') {
      $this.find('.selected-option').addClass('selected');
    } else {
      $this.find('.selected-option').removeClass('selected');
    }

    if ($this.find('.selection-list li .bold').length > 0) {
      $this.find('.selected-option').html($this.find('.selection-list li').eq($this.find('select option:selected').index()).html());
    }

    $this.find('li').removeClass('selected');
    $this.find('li').eq($(this).find('select option:selected').index()).addClass('selected');
    $this.find('.invalid-feedback').appendTo(this);

    if ($(this).hasClass('custom-color-dropdown')) {
      activatePerfectScroll($('.custom-color-dropdown').find('.selection-list')[0]);
    }
  });
}

function addMenuOverlay() {
  $('.modal-background').addClass('background').css('top', 0);
}

function removeMenuOverlay() {
  $('.modal-background').removeClass('background').removeAttr('style');
}

module.exports = {
  updateSelect: updateSelect,
  adjustForAutofill: adjustForAutofill,
  addMenuOverlay: addMenuOverlay,
  removeMenuOverlay: removeMenuOverlay,
  quantityHoverBorder: quantityHoverBorder,
  findInsiders: findInsiders,
  adjustAddressAutoFill: function adjustAddressAutoFill() {
    $('body').on('mousedown', '.edq-global-intuitive-address-suggestions div', function () {
      // SFDEV-4665 | Changes for QAS float foxus and shipping blur
      var setFocus = setInterval(changeFocus, 200);

      function changeFocus() {
        if (focusEnabled) {
          clearInterval(setFocus);
          focusEnabled = false;
        } else {
          adjustForAutofill();

          if ($('body').find('.checkout-primary-section').length) {
            $('form:visible input.shippingAddressOne:visible, form:visible input.billingAddressOne:visible').closest('form').find('input:visible, select:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);

                if (this.name === 'dwfrm_shipping_shippingAddress_addressFields_postalCode') {
                  $('input[name$="shippingAddress_addressFields_postalCode"]').blur();
                }
              }

              var result = clientSideValidation.checkFormvalidCheckout.call(this);

              if (result && $(this).closest('.checkout-primary-section').length !== 0) {
                $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
              } else {//$('.next-step-button:visible').find('button[type="submit"]').attr('disabled', 'disabled');
              }
            });
          } else {
            $('form:visible input#address1:visible').closest('form').find('input:visible, select:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);
              }
            });
          }

          setTimeout(function () {
            adjustForAutofill();
          }, 1000);
        }
      }
    });
  },
  inputfocusEvent: function inputfocusEvent() {
    // Needs the focus event to do the floating label value.
    $('body').off('focus', '.form-group input, .form-group select, .form-group textarea').on('focus', '.form-group input, .form-group select, .form-group textarea', function () {
      var $label = $(this).closest('.form-group').find('label');

      if ($label.length && !$label.hasClass('input-focus')) {
        $label.addClass('input-focus');
      }
    }); // Needs blur event to set the float the label value as normal position.

    $('body').off('blur', '.form-group input, .form-group select, .form-group textarea').on('blur', '.form-group input, .form-group select, .form-group textarea', function () {
      // eslint-disable-line
      var $label = $(this).closest('.form-group').find('label'); // Handled auto-focus issue only in case of IE for address select box CO flow.

      if ($(this).hasClass('selected-option') && $(this).text().length !== '') {
        return false;
      }

      if ($(this).attr('id') === 'registration-form-hudsonbay-rewards' && $(this).next('span.hbc-loyalty-number-prefix:visible').length !== 0) {
        return false;
      }

      if ($(this).val() !== null) {
        if (!$(this).hasClass('do-not-float')) {
          if (!$(this).val().length && $label.hasClass('input-focus')) {
            $label.removeClass('input-focus');
          }
        }
      } else if ($label.hasClass('input-focus')) {
        $label.removeClass('input-focus');
      }
    });
  },
  // Animating the input changes periodically. Needed because there is no standard cross-browser event that fires when autofilling/autocorrecting occurs.
  setAdjustForAutofill: function setAdjustForAutofill() {
    $(window).on('load', function () {
      if (navigator.userAgent.indexOf('Firefox') > -1) {
        adjustForAutofill();
      } else {
        $('input[type="password"]:-webkit-autofill, input[type="email"]:-webkit-autofill, input[type="text"]:-webkit-autofill').each(function () {
          $(this).closest('.form-group').find('label').addClass('input-focus');
        });
      }
    });
  },
  selectbox: function selectbox() {
    // var $windowMedia = window.matchMedia('(min-width: 1025px)').matches;
    var $windowMedia = true;
    this.updateSelect();
    $(document).on('click', '.selected-option', function () {
      var $h = 0;
      var $this = $(this);

      if ($this.siblings('select').is(':disabled')) {
        return false;
      }

      if ($windowMedia) {
        $('.custom-select.current_item select').trigger('blur');
        window.$currentkeycode = '';
        $('.custom-select').not($this.closest('.custom-select')).removeClass('current_item');
        $this.siblings('.selection-list').css('top', $this.outerHeight());
        $this.closest('.custom-select').toggleClass('current_item');

        if (!$this.closest('.custom-select').hasClass('current_item')) {
          $this.siblings('select').trigger('blur');
        }

        if ($this.siblings('.selection-list').find('li').length > 10) {
          $.each($this.siblings('.selection-list').find('li:visible').slice(0, 10), function () {
            $h += $(this).outerHeight();
            $this.siblings('.selection-list').height($h - 1);
          });
          var h = 0;
          $.each($this.closest('.custom-select').find('.selection-list li:visible').splice(0, $this.closest('.custom-select').find('.selection-list li.selected:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
          $this.siblings('.selection-list').scrollTop(h);
        } else {
          $this.siblings('.selection-list').height('auto');
        }
      }

      return true;
    }).on('click', '.selection-list li', function () {
      if ($windowMedia) {
        var $item = $(this).closest('.custom-select');

        if ($item.find('select option').eq($(this).index()).text() === $item.find('.selected-option.selected').text()) {
          $item.removeClass('current_item');
          return false;
        }

        if ($(this).hasClass('option-disabled')) {
          return false;
        }

        $item.find('li').removeClass('hover selected');
        $(this).addClass('selected');
        $item.find('select option').eq($(this).index()).prop('selected', true);
        $item.find('.selected-option').text($(this).text());
        $item.removeClass('current_item');
        $item.find('select').trigger('change');
        $item.find('select').trigger('blur');

        if ($item.find('.selected-option').text().trim() === '') {
          $item.find('label').removeClass('input-focus');
        } else {
          $item.find('label:not(".input-focus")').addClass('input-focus');
        }
      }

      return true;
    }).on('change input', 'select', function () {
      updateSelect();
    });
    $(document).on('click', function (e) {
      if ($windowMedia && !$('.custom-select.current_item').is(e.target) && !$('.custom-select.current_item').find('*').is(e.target)) {
        closeCustomSelect();
      }
    });
    $('body').off('keydown').on('keydown', function (e) {
      /* eslint-disable */
      var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
      var $activeSelect = $('.custom-select.current_item');
      var $mac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;
      /* eslint-enable */

      if ($activeSelect.length > 0 && $windowMedia) {
        $activeSelect.find('select').focus();
        $activeSelect.addClass('current_item');
        var $list = $activeSelect.find('li');
        var $active;

        if (!$activeSelect.find('li.selected').length) {
          $activeSelect.find('li').eq($activeSelect.find('option:selected').index()).addClass('selected');
        }

        if (key === 8) {
          // Delete key
          window.$currentkeycode = window.$currentkeycode === undefined ? '' : window.$currentkeycode.slice(0, -1);
        } else {
          window.$currentkeycode += window.$currentkeycode === undefined ? '' : $.trim(String.fromCharCode(key).toLowerCase());
        }

        $active = $activeSelect.find('li[label^="' + window.$currentkeycode + '"]');

        if ($active.length === 0) {
          window.$currentkeycode += window.$currentkeycode === undefined ? '' : $.trim(String.fromCharCode(key));
          window.$currentkeycode = window.$currentkeycode.substr(window.$currentkeycode.length - 1, 1);
          $active = $activeSelect.find('li[label^="' + window.$currentkeycode + '"]');
        }

        if (key === 40) {
          if ($activeSelect.find('li.selected').length > 0 && $activeSelect.find('li.hover').length === 0) {
            $activeSelect.find('li.selected').addClass('hover');
          }

          $active = $activeSelect.find('li.hover');
          $activeSelect.find('li').removeClass('hover');
          $active.next().addClass('hover');
        } else if (key === 38) {
          if ($activeSelect.find('li.selected').length > 0 && $activeSelect.find('li.hover').length === 0) {
            $activeSelect.find('li.selected').addClass('hover');
          }

          $active = $activeSelect.find('li.hover');

          if (!$active.prev().hasClass('hide')) {
            $activeSelect.find('li').removeClass('hover');
            $active.prev().addClass('hover');
          }
        } else if (key === 13) {
          if ($active.length === 0 && $activeSelect.find('li.hover').length > 0) {
            $activeSelect.find('li.hover').trigger('click');
          } else {
            $active.eq(0).trigger('click');

            if ($mac) {
              $('.custom-select').find('select').css({
                /* eslint-disable */
                left: '0px'
                /* eslint-enable */

              });
            } else {
              $('.custom-select').find('select').css({
                /* eslint-disable */
                left: '-9999px'
                /* eslint-enable */

              });
            }
          }
        } else if (key === 9 || key === 27) {
          closeCustomSelect();

          if ($mac) {
            $('.custom-select').find('select').css({
              /* eslint-disable */
              left: '0px'
              /* eslint-enable */

            });
          } else {
            $('.custom-select').find('select').css({
              /* eslint-disable */
              left: '-9999px'
              /* eslint-enable */

            });
          }
        } else if ($active.length !== 0) {
          $list.removeClass('hover');
          $active.eq(0).addClass('hover');
        }

        if (key === 8) {
          // Delete key
          return false;
        }

        var h = 0;

        if ($activeSelect.find('.selection-list li.hover').length === 0) {
          $.each($activeSelect.find('.selection-list li:visible').splice(0, $activeSelect.find('.selection-list li.selected:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
        } else {
          $.each($activeSelect.find('.selection-list li:visible').splice(0, $activeSelect.find('.selection-list li.hover:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
        }

        $activeSelect.find('.selection-list').scrollTop(h);
      }

      return true;
    });
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/hbcSlider.js":
/*!************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/hbcSlider.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var debounce = __webpack_require__(/*! lodash/debounce */ "../sfra/node_modules/lodash/debounce.js");

var PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS = ['category-slider', 'recommendation-products', 'primary-images', 'primary-images-set'];

var isObject = function isObject(obj) {
  return obj && _typeof(obj) === 'object';
};

var isArray = function isArray(arr) {
  return arr && arr instanceof Array;
};
/**
 * Returns all unique values of an array, based on a provided comparator function.
 * @param {Array} arr An array of objects
 * @param {Function} fn A comparison function
 * @returns {Array} An array of unique elements, as determined by the comparison function
 */


var uniqueElementsBy = function uniqueElementsBy(arr, fn) {
  return arr.reduce(function (acc, v) {
    if (!acc.some(function (x) {
      return fn(v, x);
    })) acc.push(v);
    return acc;
  }, []);
};
/**
 * Merges two Slick 'responsive' config objects together
 * @param {Array} target A responsive object in the slick config
 * @param {Array} source A responsive object in the slick config
 */


var mergeBreakpoints = function mergeBreakpoints(target, source) {
  var mergedSources = uniqueElementsBy(source.concat(target), function (a, b) {
    return a.breakpoint === b.breakpoint;
  });
  return mergedSources.map(function (sourceElement) {
    var targetElement = target.find(function (el) {
      return sourceElement.breakpoint === el.breakpoint;
    });

    if (targetElement) {
      return {
        breakpoint: sourceElement.breakpoint,
        settings: Object.assign({}, sourceElement.settings, targetElement.settings)
      };
    }

    return sourceElement;
  });
};
/**
 * Returns a configuration object, based on the defaultSliderConfig, any property of which can be overridden
 * @param {Object} overrides Any overrides to the default slick carousel configuration
 * @return {Object} A slick carousel config object
 */


var getSliderConfig = function getSliderConfig(overrides) {
  var defaultConfigCopy = Object.assign({}, defaultSliderConfig);

  if (!isObject(overrides)) {
    return defaultConfigCopy;
  }

  var mergedConfig = Object.assign(defaultConfigCopy, overrides);

  if (!isArray(overrides.responsive)) {
    return mergedConfig;
  } // If we're here, we need to merge the responsive config


  mergedConfig.responsive = mergeBreakpoints(defaultConfigCopy.responsive, mergedConfig.responsive);
  return mergedConfig;
};
/**
 * The default Slick carousel config object.
 */


var defaultSliderConfig = {
  slidesToShow: 1,
  slidesToScroll: 1,
  speed: 150,
  swipe: true,
  draggable: true,
  swipeToSlide: false,
  touchThreshold: 10,
  dots: true,
  arrows: true,
  centerMode: false,
  infinite: false,
  focusOnSelect: false,
  variableWidth: false,
  accessibility: true,
  responsive: [{
    breakpoint: 1024,
    settings: {
      swipeToSlide: true
    }
  }]
};
/**
 * Configurations for individual slick carousels.
 */

var sliderData = {
  'recommendation-products': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    responsive: [{
      breakpoint: 1260,
      settings: {
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  }),
  'primary-images': getSliderConfig(),
  'shop-the-look': getSliderConfig(),
  'primary-images-set': getSliderConfig(),
  'quick-view-images': getSliderConfig(),
  'edit-product': getSliderConfig(),
  'category-slider': getSliderConfig({
    slidesToShow: 4,
    slidesToScroll: 4,
    responsive: [{
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  }),
  'homepage-slider': getSliderConfig({
    responsive: [{
      breakpoint: 1024,
      settings: {
        arrows: false
      }
    }]
  }),
  'homepage-cat-slider': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    responsive: [{
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 3,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  })
};

var cartReccommendationSliderInit = function cartReccommendationSliderInit() {
  var hbcRecSliders = document.querySelectorAll('.cart-page-content .hbc-slider');

  for (var i = 0; i < hbcRecSliders.length; i++) {
    var recSlider = hbcRecSliders[i];

    if ((recSlider.classList.contains('recommendation-products') || recSlider.classList.contains('homepage-cat-slider')) && recSlider.classList.contains('slick-initialized')) {
      $(recSlider).slick('unslick');
    }

    if (recSlider.classList.contains('recommendation-products')) {
      $(recSlider).slick(Object.assign({}, {
        slidesToShow: 5,
        slidesToScroll: 5,
        responsive: [{
          breakpoint: 1260,
          settings: {
            slidesToShow: 4,
            slidesToScroll: 4
          }
        }, {
          breakpoint: 1024,
          settings: {
            dots: false,
            arrows: false,
            slidesToShow: 3,
            slidesToScroll: 3
          }
        }, {
          breakpoint: 544,
          settings: {
            dots: false,
            arrows: false,
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }]
      }));
    } else if (recSlider.classList.contains('homepage-cat-slider')) {
      $(recSlider).slick(Object.assign({}, {
        slidesToShow: 5,
        slidesToScroll: 5,
        responsive: [{
          breakpoint: 1024,
          settings: {
            dots: false,
            arrows: false,
            slidesToShow: 3,
            slidesToScroll: 1
          }
        }, {
          breakpoint: 544,
          settings: {
            dots: false,
            arrows: false,
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }]
      }));
    }
  }
};
/**
 * Largescreen?
 * @returns {boolean} True for largescreen, otherwise false.
 */


function isDesktop() {
  return window.innerWidth >= 1024;
}
/**
 * Generates a unique ID.
 * @return {String} a unique ID.
 */


var generateUUID = function generateUUID() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
};
/**
 * Handles clicks on the dots on touchscreens.
 * @param {Event} evt The event object
 */


var handleTouchscreenDotClick = function handleTouchscreenDotClick(evt) {
  var targetSlide = document.querySelector("[data-dot-id=\"".concat(evt.target.parentElement.id, "\"]"));

  if (!targetSlide) {
    return;
  }

  var targetSlideContainer = targetSlide.parentElement;
  targetSlideContainer.scrollTo({
    left: targetSlide.offsetLeft - targetSlideContainer.offsetWidth / 2,
    // Try to center the clicked up slide.
    behavior: 'smooth'
  });
};
/**
 * Builds dot indiators for touchscreen sliders.
 * @param {Element} slider The slider wrapper element
 */


var buildNativeScrollSliderDots = function buildNativeScrollSliderDots(slider) {
  var list = document.createElement('ul');
  ['touchscreen-slider-dots', 'slick-dots'].forEach(function (str) {
    return list.classList.add(str);
  });
  var slides = Array.from(slider.children);
  slides.forEach(function (slide) {
    return slide.dataset.dotId = "touchscreen-slider-dot-".concat(generateUUID());
  });
  var dots = slides.map(function (slide, index) {
    return "<li id=\"".concat(slide.dataset.dotId, "\"><button type=\"button\">").concat(index + 1, "</button></li>");
  }).join('');
  list.innerHTML = dots;
  list.addEventListener('click', handleTouchscreenDotClick);
  slider.insertAdjacentElement('afterend', list);
};
/**
 * Sets up an intersection observer to update the active dot state on touchscreens.
 * @param {Element} slider A slider container element
 */


var observeNativeScrollSlides = function observeNativeScrollSlides(slider) {
  var handleIntersect = function handleIntersect(entries) {
    entries.forEach(function (entry) {
      var dot = document.getElementById(entry.target.dataset.dotId);

      if (entry.isIntersecting) {
        dot.classList.add('slick-active');
      } else {
        dot.classList.remove('slick-active');
      }
    });
  };

  var observer = new IntersectionObserver(handleIntersect, {
    root: slider,
    rootMargin: '0px',
    threshold: [0.5, 0.99]
  });
  var slides = Array.from(slider.children);
  slides.forEach(function (slide) {
    return observer.observe(slide);
  });
};
/**
 * Sets up touchscreen slider functionality.
 * @param {String} sliderType The key for the type of slider.
 */


var decorateNativeScrollSlider = function decorateNativeScrollSlider(sliderType) {
  var sliders;

  if (sliderType) {
    sliders = document.querySelectorAll(".".concat(sliderType));
  }

  if (!sliders.length) {
    return;
  }

  sliders.forEach(function (slider) {
    if (slider.classList.contains('touchscreen-slider-initialized')) {
      return;
    }

    if (slider.dataset.touchscreenSliderDots !== 'false') {
      buildNativeScrollSliderDots(slider);
      observeNativeScrollSlides(slider);
    }

    slider.classList.add('touchscreen-slider-initialized');
  });
};

var initResponsiveSlider = function initResponsiveSlider(slider, sliderType) {
  var $slider = $(slider);

  var determineResponsiveSliderStatus = function determineResponsiveSliderStatus() {
    if (isDesktop()) {
      if ($slider.hasClass('slick-initialized')) {
        $slider.slick('unslick');
      }

      return;
    }

    if (!$slider.hasClass('slick-initialized')) {
      $slider.slick(sliderData[sliderType]);
    }
  }; // Make sure no other call try to incorrectly intialize slick


  var desktopInitializationObserver = new MutationObserver(function () {
    if ($slider.hasClass('slick-initialized') && (isDesktop() || PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderType) && window.isTouchscreen())) {
      $slider.slick('unslick');
    }
  });
  desktopInitializationObserver.observe($slider.get(0), {
    attributes: true
  }); // Update on resize and orientation change

  var debounceDetermineResponsiveSliderStatus = debounce(determineResponsiveSliderStatus, 50);
  window.addEventListener('resize', debounceDetermineResponsiveSliderStatus);
  window.addEventListener('orientationchange', debounceDetermineResponsiveSliderStatus); // Set it up

  determineResponsiveSliderStatus();
};

var hbcSliderInit = function hbcSliderInit(sliderType, slider) {
  if (sliderType && PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderType) && window.isTouchscreen()) {
    decorateNativeScrollSlider(sliderType);
    return;
  }

  var $sliders;

  if (typeof sliderType === 'undefined') {
    $.each(sliderData, function (sliderTypeVal, sliderDataVal) {
      if (PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderTypeVal) && window.isTouchscreen()) {
        decorateNativeScrollSlider(sliderTypeVal);
        return;
      }

      $sliders = $('.' + sliderTypeVal + ':not(.slick-initialized)');

      if (!$sliders.is('.async-slider')) {
        $sliders.slick(sliderDataVal);
      }
    });
  } else {
    if (typeof slider === 'undefined') {
      $sliders = $('.' + sliderType + ':not(.slick-initialized)');
    } else {
      $sliders = slider;
    }

    $sliders.each(function () {
      if (this.classList.contains('responsive-slider')) {
        initResponsiveSlider(this, sliderType);
      } else {
        $(this).slick(sliderData[sliderType]);
      }
    });
  }
};

module.exports = {
  hbcSliderInit: hbcSliderInit,
  cartReccommendationSliderInit: cartReccommendationSliderInit
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/login/login.js":
/*!**************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/login/login.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! base/login/login */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/login/login.js");

var formValidation = __webpack_require__(/*! ../components/formValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/formValidation.js");

var createErrorNotification = __webpack_require__(/*! base/components/errorNotification */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js");

base.login = function () {
  $('form.login').submit(function (e) {
    e.preventDefault();
    var form = $(this); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'login'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var url = form.attr('action');
        form.spinner().start();
        $('form.login').trigger('login:submit', e);
        $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: form.serialize(),
          success: function success(data) {
            form.spinner().stop();

            if (!data.success) {
              formValidation(form, data);
              $('form.login').trigger('login:error', data);
            } else {
              $('form.login').trigger('login:success', data);
              location.href = data.redirectUrl;
            }

            if (data.botError) {
              $('form.login button.account-btn').attr('disabled', 'disabled');
              $('form.login button.sign-up-btn').attr('disabled', 'disabled');
            }
          },
          error: function error(data) {
            if (data.responseJSON.redirectUrl) {
              window.location.href = data.responseJSON.redirectUrl;
            } else {
              $('form.login').trigger('login:error', data);
              form.spinner().stop();
            }

            if (data.botError) {
              $('form.login button.account-btn').attr('disabled', 'disabled');
              $('form.login button.sign-up-btn').attr('disabled', 'disabled');
            }
          }
        });
        return false;
      });
    });
  });
};

base.resetPassword = function () {
  $('body .reset-password-form').submit(function (e) {
    e.preventDefault();
    var form = $(this); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'forgotpassword'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var url = form.attr('action');
        $('.forgot-password-error').empty().removeClass('invalid-email-alert');
        form.spinner().start();
        $('.reset-password-form').trigger('login:register', e);
        $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: form.serialize(),
          success: function success(data) {
            form.spinner().stop();

            if (!data.success && !data.invalid) {
              formValidation(form, data);
            } else if (data.invalid) {
              $('.forgot-password-error').text(data.invalidMsg).addClass('invalid-email-alert');
              $('#reset-password-email').val('');
              $('#reset-password-email').parent().find('label').removeClass('input-focus');
              $('#reset-password-email').parent().find('.valid').addClass('d-none');
            } else {
              $('.js-forgot-container').remove();
              $('#reset-message1').text(data.resetMessage1);
              $('#reset-message2').text(data.resetMessage2);
              $('.js-container-success').removeClass('d-none');
            }

            if (data.botError) {
              form.find('[id="submitEmailButton"]').attr('disabled', 'disabled');
            }
          },
          error: function error() {
            if (data.botError) {
              form.find('[id="submitEmailButton"]').attr('disabled', 'disabled');
            }

            form.spinner().stop();
          }
        });
        return false;
      });
    });
  });
};

base.validatePassword = function () {
  $('body').on('keyup', '#newPassword, #registration-form-password', function () {
    var regex = new RegExp(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#_?!@$%^()+=><~`}{|&*-])^[^'<>/]{8,}$/);

    if ($(this).val() !== '') {
      $('.password-condition').removeClass('d-none');

      if (regex.test($(this).val())) {
        $('.password-condition').addClass('d-none');
      } else {
        $('.password-condition').removeClass('d-none');
      }
    } else {
      $('.password-condition').addClass('d-none');
    }
  });
};

base.submitNewPassword = function () {
  $('body').on('click', '.submit-new-password', function (e) {
    e.preventDefault(); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'updatepassword'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var regex = new RegExp(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/);
        var password = $('#newPassword').val();

        if (password !== '') {
          if (!regex.test(password)) {
            $('#newPassword').addClass('is-invalid');
          } else {
            $('form.password-reset-form').submit();
          }
        } else {
          $('.password-condition').addClass('d-none');
        }
      });
    });
  });
};

base.register = function () {
  $('form.registration').submit(function (e) {
    e.preventDefault();
    var form = $(this); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'register'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var url = form.attr('action');
        form.spinner().start();
        var data = form.serialize();
        var rewardNo = $('#registration-form-hudsonbay-rewards').val();

        if (rewardNo !== undefined && rewardNo !== '') {
          var hbcCard = $('#registration-form-hudsonbay-rewards').val();
          data = data + '&hbcRewardNumber=' + hbcCard;
        }

        var confirmpwd = $('.registration #registration-form-password-confirm');
        ConfirmpwdValidation(confirmpwd);
        $('form.registration').trigger('login:register', e);
        $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: data,
          success: function success(resp) {
            form.spinner().stop();

            if (!resp.success) {
              formValidation(form, resp);
            } else {
              location.href = resp.redirectUrl;
            }

            if (resp.botError) {
              $('form.registration button.account-btn').attr('disabled', 'disabled');
            }
          },
          error: function error(err) {
            if (err.responseJSON.redirectUrl) {
              window.location.href = err.responseJSON.redirectUrl;
            } else {
              createErrorNotification($('.error-messaging'), err.responseJSON.errorMessage);
            }

            if (err.botError) {
              $('form.registration button.account-btn').attr('disabled', 'disabled');
            }

            form.spinner().stop();
          }
        });
        return false;
      });
    });
  });
};

base.enableOptInCheckbox = function () {
  $('.js-canadian-customer').on('change', function () {
    if ($('.js-canadian-customer:checked').val() === 'T') {
      $('.js-email-pref-checkobox').removeClass('d-none');
      $('.saks-canada-opt').prop('checked', false);
      $('.js-saks-canadat-opt').addClass('d-none');
      $('.create-apply-btn-label').addClass('d-none');
      $('.create-btn-label').removeClass('d-none');
    } else {
      $('.js-email-pref-checkobox').addClass('d-none');
      $('.js-saks-canadat-opt').removeClass('d-none');
      $('#add-to-email-list').prop('checked', false);
      $('.create-apply-btn-label').removeClass('d-none');
      $('.create-btn-label').addClass('d-none');
    }
  });
};

base.showPassword = function () {
  $('.show-pwd').click(function () {
    var input = $($(this).attr('toggle'));

    if (input.val() !== '') {
      if (input.attr('type') === 'password') {
        input.attr('type', 'text');
        $(this).text($(this).attr('data-hidepassword'));
      } else {
        input.attr('type', 'password');
        $(this).text($(this).attr('data-showpassword'));
      }
    }
  });
};
/**
 * validate email and confirm email on blur
 *
 */


function ConfirmpwdValidation($this) {
  var emailval = $('.registration #registration-form-password').val();
  var confirmemailval = $($this).val();

  if (emailval !== confirmemailval) {
    $($this).addClass('is-invalid');
    $($this).closest('.registration').find('label[for="registration-form-password-confirm"]').addClass('is-invalid');

    if ($($this).next('span').length === 0) {
      $('<span></span>').insertAfter($this);
    }

    $($this).next('span').addClass('invalid');

    if ($($this).next('span').hasClass('valid')) {
      $($this).next('span').removeClass('valid').addClass('invalid');
    }

    $($this).parents('.form-group').find('.invalid-feedback').text($($this).data('pattern-pwd-mismatch'));
  }

  return false;
}

base.pwdValidation = function () {
  $('.registration #registration-form-password-confirm').on('blur', function () {
    ConfirmpwdValidation($(this));
  });
};

base.validatepostalcode = function () {
  $('#registration-form-zipcode').on('blur', function () {
    if ($(this).val() !== '') {
      // If Zip Code is there, make it required for the validation.
      $(this).prop('required', true);
      var validate;

      if ($(this).hasClass('us-pattern')) {
        $(this).attr('pattern', '^[0-9]{5}(-[0-9]{4})?$');
        validate = /(^\d{5}(-\d{4})?$)/.test($(this).val()) === false;
      } else if ($(this).hasClass('ca-pattern')) {
        $(this).attr('pattern', '^(?!.*[DFIOQUdfioqu])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$');
        validate = /^(?!.*[DFIOQUdfioqu])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/.test($(this).val()) === false;
      }

      if (validate) {
        $(this).addClass('is-invalid');
        $(this).prev('label').addClass('is-invalid');
      } else {
        $(this).removeClass('is-invalid');
        $(this).prev('label').removeClass('is-invalid');

        if ($(this).hasClass('ca-pattern')) {
          // eslint-disable-next-line newline-per-chained-call
          var zipVal = $(this).val().trim().replace(/\s/g, '').toUpperCase();
          var formatedVal = zipVal.substr(0, 3) + ' ' + zipVal.substr(3, zipVal.length);
          $(this).val(formatedVal);
        }
      }
    } else if ($(this).hasClass('is-invalid')) {
      $(this).prop('required', false);
      $(this).removeClass('is-invalid');
      $(this).prev('label').removeClass('is-invalid');
      $(this).next('.invalid').remove();
    } else {
      $(this).prop('required', false);
      $(this).next('.invalid').remove();
    }
  });
};

base.validateHudsonNumner = function () {
  $('body').on('blur', '.register-page .hudson-reward', function () {
    var $this = $(this);
    var rewardNo = $this.val();
    var url = $this.data('check-balance-url');
    var regex = new RegExp('^[0-9]+$');

    if (rewardNo && url && regex.test(rewardNo)) {
      $.spinner().start();
      $.ajax({
        url: url,
        type: 'POST',
        data: {
          reward: rewardNo,
          check: true
        },
        success: function success(data) {
          if (!data.success) {
            $('.hudson-error').removeClass('d-none');
            $('.hudson-reward').val('');
            $('.hudson-reward').addClass('is-invalid');
            $('label.hudsonbay-rewards').addClass('is-invalid');
            $('<span class="invalid"></span>').insertAfter('.hbc-loyalty-number-prefix');

            if (data.counter >= 5) {
              $('.hudson-reward').attr('disabled', true);
              $('.hudson-error').addClass('d-none');
              $('.hudson-error-max').removeClass('d-none');
            }
          } else {
            $('.hudson-error').addClass('d-none');
            $('.hudson-reward').removeClass('is-invalid');
            $('label.hudsonbay-rewards').removeClass('is-invalid');
            $('.hbc-loyalty-number-prefix').nextAll('.invalid').remove();
          }

          $.spinner().stop();
        },
        error: function error() {
          $('.hudson-error').removeClass('d-none');
          $('.hudson-reward').val('');
          $('.hudson-reward').addClass('is-invalid');
          $('label.hudsonbay-rewards').addClass('is-invalid');
          $('<span class="invalid"></span>').insertAfter('.hudson-reward');
          $.spinner().stop();
        }
      });
    } else {
      $('.hudson-error').removeClass('d-none');
      $('label.hudsonbay-rewards').addClass('is-invalid');
      $('.hudson-reward').addClass('is-invalid');
      $('.hudson-reward').val('');
    }
  });
};

module.exports = base;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/base.js":
/*!***************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/base.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! base/product/base */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/product/base.js");

var hbcSlider = __webpack_require__(/*! ../hbcSlider */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/hbcSlider.js");

var persistentWishlist = __webpack_require__(/*! ./persistentWishlist */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/persistentWishlist.js");
/**
 * Retrieves the relevant pid value
 * @param {jquery} $el - DOM container for a given add to cart button
 * @return {string} - value to be used when adding product to cart
 */


base.getPidValue = function ($el) {
  var pid;

  if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {
    pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');
  } else if ($('.product-set-detail').length && $($el).closest('.product-detail').length && $($el).closest('.product-detail').data('pid') !== undefined || $('.product-set').length) {
    pid = $($el).closest('.product-detail').data('pid');
  } else if ($('.product-set').length) {
    pid = $($el).closest('.product-detail').find('.product-id').text();
  } else if ($el && $el.closest('.product-tile').length) {
    pid = $el.closest('.product').data('pid');
  } else {
    pid = $('.product-detail:not(".bundle-item")').data('pid');
  }

  return pid;
};
/**
 * Generates html for product attributes section
 *
 * @param {array} attributes - list of attributes
 * @return {string} - Compiled HTML
 */


function getAttributesHtml(attributes) {
  if (!attributes) {
    return '';
  }

  var html = '';
  attributes.forEach(function (attributeGroup) {
    if (attributeGroup.ID === 'mainAttributes') {
      attributeGroup.attributes.forEach(function (attribute) {
        html += '<div class="attribute-values">' + attribute.label + ': ' + attribute.value + '</div>';
      });
    }
  });
  return html;
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @return {string} - The provided URL to use when adding a product to the cart
 */


function getAddToCartUrl() {
  return $('.add-to-cart-url').val();
}
/**
 * Process the attribute values for an attribute that has image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 * @param {Object} msgs - object containing resource messages
 */


function processSwatchValues(attr, $productContainer, msgs) {
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find('[data-attr="' + attr.id + '"] [data-attr-value="' + attrValue.value + '"]');
    $attrValue.attr('value', attrValue.url);
    var $swatchButton = $attrValue.parent();

    if (attrValue.selected) {
      $attrValue.addClass('selected');
      $swatchButton.addClass('selected');
      $attrValue.siblings('.selected-assistive-text').text(msgs.assistiveSelectedText);
    } else {
      $attrValue.removeClass('selected');
      $swatchButton.removeClass('selected');
      $attrValue.siblings('.selected-assistive-text').empty();
    }

    if ($productContainer.find('.js-saks-newdesign').length > 0) {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayName').html(attr.displayName + ' ');
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayValue').html(attr.displayValue);
    } else {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html($('.edit_quickview_container').length > 0 ? attr.attrEditDisplay : attr.attrDisplay);
    }

    if (attrValue.url) {
      $swatchButton.attr('data-url', attrValue.url);
    } else {
      $swatchButton.removeAttr('data-url');
    } // Disable if not selectable


    $attrValue.removeClass('selectable unselectable');
    $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');
  });
}
/**
 * Process attribute values associated with an attribute that does not have image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function processNonSwatchValues(attr, $productContainer) {
  var $attr = '[data-attr="' + attr.id + '"]';
  var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');
  $defaultOption.attr('value', attr.resetUrl);
  $productContainer.find($('ul.' + attr.id + '-attribute').find('li[data-attr-value]')).removeAttr('selected');
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]');
    $attrValue.find('a').attr('href', attrValue.url).removeAttr('disabled');
    $attrValue.attr('disabled', false);

    if (!attrValue.selectable) {
      $attrValue.attr('disabled', true);
    }

    if (attrValue.selected) {
      $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]').attr('selected', 'selected');
    }

    if ($productContainer.find('.js-saks-newdesign').length > 0) {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayName').html(attr.displayName + ' ');
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayValue').html(attr.displayValue);
    } else {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html($('.edit_quickview_container').length > 0 ? attr.attrEditDisplay : attr.attrDisplay);
    }
  });
}
/**
 * Routes the handling of attribute processing depending on whether the attribute has image
 *     swatches or not
 *
 * @param {Object} attrs - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {jQuery} $productContainer - DOM element for a given product
 * @param {Object} msgs - object containing resource messages
 */


function updateAttrs(attrs, $productContainer, msgs) {
  // Currently, the only attribute type that has image swatches is Color.
  var attrsWithSwatches = ['color', 'Design'];
  attrs.forEach(function (attr) {
    if (attrsWithSwatches.indexOf(attr.id) > -1) {
      processSwatchValues(attr, $productContainer, msgs);
    } else {
      processNonSwatchValues(attr, $productContainer);
    }
  });
}
/**
 * Retrieve contextual quantity selector
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {jquery} - quantity selector DOM container
 */


function getQuantitySelector($el) {
  return $el && $('.set-items').length ? $($el).closest('.product-detail').find('.quantity-select') : $('.quantity-select');
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.choice-of-bonus-product');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @param {Object} data - data object used to fill in dynamic portions of the html
 */


function chooseBonusProducts(data) {
  $('.modal-body').spinner().start();

  if ($('#chooseBonusProductModal').length !== 0) {
    $('#chooseBonusProductModal').remove();
  }

  var bonusUrl;

  if (data.bonusChoiceRuleBased) {
    bonusUrl = data.showProductsUrlRuleBased;
  } else {
    bonusUrl = data.showProductsUrlListBased;
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade bonus-pdt" id="chooseBonusProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog choose-bonus-product-dialog quick-view-dialog" ' + 'data-total-qty="' + data.maxBonusItems + '"' + 'data-UUID="' + data.uuid + '"' + 'data-pliUUID="' + data.pliUUID + '"' + 'data-addToCartUrl="' + data.addToCartUrl + '"' + 'data-pageStart="0"' + 'data-pageSize="' + data.pageSize + '"' + 'data-moreURL="' + data.showProductsUrlRuleBased + '"' + 'data-bonusChoiceRuleBased="' + data.bonusChoiceRuleBased + '">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <span class="gwp_header"> </span>' + '    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">' + '        <span aria-hidden="true" class="previous-icon svg-svg-14-chevron-dims svg-svg-14-chevron"></span>' + '    </button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('.modal-body').spinner().start();
  $.ajax({
    url: bonusUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(response) {
      var parsedHtml = parseHtml(response.renderedTemplate);
      $('#chooseBonusProductModal .modal-body').empty();
      $('#chooseBonusProductModal .enter-message').text(response.enterDialogMessage);
      $('#chooseBonusProductModal .modal-header .close .sr-only').text(response.closeButtonText);
      $('#chooseBonusProductModal .gwp_header').text(response.labels.selectprods);
      $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);
      $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);
      $('#chooseBonusProductModal').modal('show');
      $.each(data.selectedBonusProducts, function (selProdIndex, selProd) {
        $('input[name="chooseBonusproductIds"][data-pid="' + selProd.pid + '"]').prop('checked', true);
      });
      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * Retrieves the bundle product item ID's for the Controller to replace bundle master product
 * items with their selected variants
 *
 * @return {string[]} - List of selected bundle product item ID's
 */


function getChildProducts() {
  var childProducts = [];
  $('.bundle-item').each(function () {
    childProducts.push({
      pid: $(this).find('.product-id').text(),
      quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
    });
  });
  return childProducts.length ? JSON.stringify(childProducts) : [];
}
/**
 * Retrieve product options
 *
 * @param {jQuery} $productContainer - DOM element for current product
 * @return {string} - Product options and their selected values
 */


function getOptions($productContainer) {
  var options = $productContainer.find('.product-option').map(function () {
    var $elOption = $(this).find('.options-select');
    var urlValue = $elOption.val();
    var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
    return {
      optionId: $(this).data('option-id'),
      selectedValueId: selectedValueId
    };
  }).toArray();
  return JSON.stringify(options);
}
/**
 * @param {Object} addToCartConfirmationModal popup after product added to cart
 */


function showAddToCartConfirmation(addToCartConfirmationModal) {
  if (!addToCartConfirmationModal) {
    return;
  }

  $('.product-added-to-cart-modal').remove();
  $('.menu-wrapper, .header').append(addToCartConfirmationModal);
  $('.product-added-to-cart-modal').show();
  setTimeout(function () {
    $('.product-added-to-cart-modal').hide();
  }, 3000);

  if ($('.minicart .popover').is(':visible')) {
    $('.product-added-to-cart-modal.modal').hide();
  }
}
/**
 * Updates the Mini-Cart quantity value after the customer has pressed the "Add to Cart" button
 * @param {string} response - ajax response from clicking the add to cart button
 */


function handlePostCartAdd(response) {
  $('.minicart').trigger('count:update', response);
  var messageType = response.error ? 'alert-danger' : 'alert-success';

  if (!response.error && response.addToCartConfirmationModal) {
    if ($('.pg-name').length > 0 && $('.pg-name').val() === 'wishlist') {
      $('body').trigger('adobeTagManager:moveFavToBag', response);
    } else {
      $('body').trigger('adobeTagManager:addToBag', response);
    }

    showAddToCartConfirmation(response.addToCartConfirmationModal);
    return;
  } // don't show the error message in PLP (Product array)-SFDEV-7748


  if (response.sourcepage && response.sourcepage == 'pdp') {
    if ($('.add-to-cart-messages').length === 0) {
      $('.attribute.quantity').append('<div class="add-to-cart-messages"></div>');
    }

    if (response.message != '') {
      $('.add-to-cart-messages').html( // eslint-disable-next-line no-undef
      '<div class="error" role="alert">' + response.message + '</div>');
    }

    setTimeout(function () {
      $('.add-to-cart-messages .error').remove();
    }, 5000);
  }
}
/**
 * PDP Swipe detect function.
 *
 * @param {el} el - Element
 * @param {callback} callback - Callback
 **/


function swipeDetect(el, callback) {
  var touchsurface = el;
  var swipedir;
  var startX;
  var startY;
  var distX;
  var distY;
  var threshold = 50;
  var restraint = 100;
  var allowedTime = 300;
  var elapsedTime;
  var startTime;

  var handleswipe = callback || function () {};
  /**
   * PDP Event Down
   *
   * @param {event} event - event
   **/


  function eventDown(event) {
    swipedir = 'none';
    startTime = new Date().getTime();
    event.preventDefault();
  }
  /**
   * PDP Event Up
   *
   * @param {distXLoc} distXLoc - distX
   * @param {distYLoc} distYLoc - distY
   * @param {event} event - event
   **/


  function eventUp(distXLoc, distYLoc, event) {
    elapsedTime = new Date().getTime() - startTime;

    if (elapsedTime <= allowedTime) {
      if (Math.abs(distXLoc) >= threshold && Math.abs(distYLoc) <= restraint) {
        swipedir = distXLoc < 0 ? 'left' : 'right';
      } else if (Math.abs(distYLoc) >= threshold && Math.abs(distXLoc) <= restraint) {
        swipedir = distYLoc < 0 ? 'up' : 'down';
      }
    }

    handleswipe(swipedir);
    event.preventDefault();
  }

  touchsurface.addEventListener('mousedown', function (e) {
    startX = e.pageX;
    startY = e.pageY;
    eventDown(e);
  }, false);
  touchsurface.addEventListener('mousemove', function (e) {
    e.preventDefault();
  }, false);
  touchsurface.addEventListener('mouseup', function (e) {
    distX = e.pageX - startX;
    distY = e.pageY - startY;
    eventUp(distX, distY, e);
  }, false);
  touchsurface.addEventListener('touchstart', function (e) {
    var touchobj = e.changedTouches[0];
    startX = touchobj.pageX;
    startY = touchobj.pageY;
    eventDown(e);
  }, false);
  touchsurface.addEventListener('touchmove', function (e) {
    e.preventDefault();
  }, false);
  touchsurface.addEventListener('touchend', function (e) {
    var touchobj = e.changedTouches[0];
    distX = touchobj.pageX - startX;
    distY = touchobj.pageY - startY;
    eventUp(distX, distY, e);
  }, false);
}
/**
 * PDP play select video player
 *
 * @param {pid} pid - Product id
 **/


var playVideoPlayer = function playVideoPlayer(pid) {
  $('.s7videoplayer .s7iconeffect').trigger('click');
};

base.playVideoPlayer = playVideoPlayer;
/**
 * PDP activate video player
 *
 **/

var activateVideoPlayer = function activateVideoPlayer() {
  if ($('.enablePDPVideoPlayer').length > 0) {
    $('.s7-viewer-video').empty();
    var serverurl = $('.product-detail').find('div.pdp-carousel').data('scene7hosturl');
    var videoserverUrl = $('.product-detail').find('div.pdp-carousel').data('scene7videohosturl');
    var asset;

    if ($('.product-detail').find('.thumb-nail.video-player').length > 0) {
      var image = $('.product-detail').find('.thumb-nail.video-player img').attr('src').split('image/'); // eslint-disable-line

      var imgAsset = image[image.length - 1];

      if (imgAsset && imgAsset.length > 0) {
        var videoPathAsset;
        var videoPath = imgAsset.split('/');

        if (videoPath[1].length > 0) {
          videoPathAsset = videoPath[1].split('?');

          if (videoPathAsset[0].length > 0) {
            asset = videoPath[0] + '/' + videoPathAsset[0];
          } else {
            asset = videoPath[0] + '/' + videoPath[1];
          }
        } else {
          asset = videoPath[0] + '/' + videoPath[1];
        }
      }

      var params = {
        asset: asset,
        serverurl: serverurl,
        videoserverUrl: videoserverUrl
      };
      console.log('s7 viewer params from core: ', params, $(this).attr('id'));
      $('.s7-viewer-video').each(function () {
        new s7viewers.VideoViewer({
          containerId: $(this).attr('id'),
          params: params
        }).init();
      });
    }
  }
};

base.activateVideoPlayer = activateVideoPlayer;
/**
 * PDP primary function slider functionality
 *
 * @param {jquery} slider - slider jquery element
 **/

var activatePrimarySlick = function activatePrimarySlick(slider) {
  var primaryImg = '.primary-images-container .primary-images';

  if ($('.product-detail').hasClass('product-set-detail')) {
    hbcSlider.hbcSliderInit('primary-images-set', slider);
  } else if ($('.product-detail').hasClass('product-quickview')) {
    hbcSlider.hbcSliderInit('quick-view-images');
  } else {
    hbcSlider.hbcSliderInit('primary-images');
  }

  $(primaryImg).on('afterChange', function () {
    $(this).find('.primary-image').removeClass('active');
    $(this).find('.slick-active .primary-image').addClass('active');

    if ($(this).find('.slick-current').find('.video-place-holder').is('.video-place-holder')) {
      $(this).next('.s7-viewer-video').addClass('active');
    } else {
      $(this).next('.s7-viewer-video').removeClass('active');
    }

    if ($(this).parents('.primary-images-wrapper').find('.s7playpausebutton[aria-label="Pause"]').length > 0 && (window.innerWidth < 1024 || $('.product-detail').hasClass('product-set-detail') || $('.product-detail').hasClass('product-quickview'))) {
      $(this).parents('.primary-images-wrapper').find('.s7playpausebutton[aria-label="Pause"]').trigger('click');
    }
  });
};

base.activatePrimarySlick = activatePrimarySlick;
/**
 * PDP create carousel functionality
 *
 * @param {imgs} imgs - Object of image details
 * @param {containerDetails} $productContainer - Container Details
 **/

var createCarousel = function createCarousel(imgs, $productContainer, video) {
  var $carousel = $productContainer.find('.pdp-carousel');
  var isQuickView = $productContainer.is('.product-quickview');
  var $primaryThumb = $carousel.find('.primary-thumbnails');
  var $primaryImage = $carousel.find('.primary-images');
  var $zoomWindowThumb = $productContainer.find('.zoom-thumbnails');
  var primaryThumbData = '';
  var primaryImageData = '';
  var zoomWindowThumbData = '';
  var s7ProductID = '';

  if ($('#s7Modal').length > 0) {
    s7ProductID = $('#s7Modal').data('productid');
  }

  for (var i = 0; i < imgs.length; i++) {
    primaryThumbData = primaryThumbData + '<li class="primary-thumbnail"><a href="#primary-image-' + i + '" class="thumb-nail d-lg-block"><img src="' + imgs[i].url + '" class="d-block img-fluid" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></a></li>';

    if (isQuickView) {
      primaryImageData = primaryImageData + '<div id="primary-image-' + i + '" data-index="' + i + '" class="primary-image"><img src="' + imgs[i].url + '" class="d-block img-fluid primary-image-img" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /><div id="s7viewer-qv-' + i + '" class="s7-viewer-qv"></div></div>';
    } else {
      primaryImageData = primaryImageData + '<div id="primary-image-' + i + '" data-index="' + i + '" class="primary-image"><img src="' + imgs[i].url + '" class="d-block img-fluid primary-image-img" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></div>';
    }

    zoomWindowThumbData = zoomWindowThumbData + '<div class="thumb-nail"><img src="' + imgs[i].url + '" class="d-block img-fluid" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></div>';
  }

  if (video) {
    for (var i = 0; i < video.length; i++) {
      if (video[i].url.indexOf('noimage') == -1) {
        primaryThumbData = primaryThumbData + '<li class="primary-thumbnail"><a href="#s7viewer-video-' + s7ProductID + '" class="thumb-nail d-lg-block video-player"><img src="' + video[i].url + '" class="d-block img-fluid" alt="' + video[i].alt + ' image number ' + parseInt(video[i].index, 10) + '" title="' + video[i].title + '" itemprop="image" /><span class="video-player-bg"></span></a>';
        primaryImageData = primaryImageData + '<div id="s7viewer-video-' + s7ProductID + '" class="s7-viewer-video"></div>';
      }
    }
  }

  if ($primaryThumb.hasClass('slick-initialized')) {
    $primaryThumb.slick('unslick');
  }

  $primaryThumb.empty().append(primaryThumbData).find('.thumb-nail').first().addClass('active');

  if (imgs && imgs.length == 1) {
    $primaryThumb.find('.thumb-nail').first().addClass('d-none');
  }

  if ($primaryImage.hasClass('slick-initialized')) {
    $primaryImage.slick('unslick');
    $('.s7-viewer-video').empty();
  }

  $primaryImage.empty().append(primaryImageData).find('.primary-image').first().addClass('active');
  activatePrimarySlick($primaryImage);

  if ($zoomWindowThumb.hasClass('slick-initialized')) {
    $zoomWindowThumb.slick('unslick');
  }

  $zoomWindowThumb.empty().append(zoomWindowThumbData).find('.thumb-nail').first().addClass('active');
};

base.createCarousel = createCarousel;
/**
 * Updates the availability status in the Product Detail Page
 *
 * @param {Object} response - Ajax response object after an
 *                            attribute value has been [de]selected
 * @param {jQuery} $productContainer - DOM element for a given product
 */

function updateAvailability(response, $productContainer, callback) {
  var availabilityValue = '';
  var availabilityMessages = response.product.availability.messages;
  var availabilityUrl = response.availabilityUrl;

  if (!response.product.readyToOrder) {
    availabilityValue = '<li><div>' + response.resources.info_selectforstock + '</div></li>';
    $($productContainer).trigger('product:updateAvailability', {
      product: response.product,
      $productContainer: $productContainer,
      message: availabilityValue,
      resources: response.resources
    });
    callback();
  } else {
    $.ajax({
      url: availabilityUrl,
      method: 'GET',
      success: function success(data) {
        response.product.availability = data.product.availability; // eslint-disable-line

        response.product.readyToOrder = data.product.readyToOrder; // eslint-disable-line

        availabilityMessages = data.product.availability.messages;
        availabilityValue = '';
        var qtyValue = $('.quantity-val', $productContainer).data('oldValue');
        availabilityMessages.forEach(function (message) {
          if (data.product.available && data.product.availability.isAboveThresholdLevel) {
            var colorStyle = data.availability.hexColorCode;

            if (colorStyle) {
              colorStyle = 'style=color:' + colorStyle;
            }

            availabilityValue += '<li><div ' + colorStyle + '>' + message + '</div></li>';
          }

          if (!data.product.available || !data.product.availability.isAboveThresholdLevel) {
            if (message != '') {
              if ($('.add-to-cart-messages').length === 0) {
                $('.attribute.quantity').append('<div class="add-to-cart-messages"></div>');
                $('.add-to-cart-messages').html('<div class="error" role="alert">' + message + '</div>');
                setTimeout(function () {
                  $('.add-to-cart-messages .error').remove();
                }, 5000);
              } else {
                $('.add-to-cart-messages').html('<div class="error" role="alert">' + message + '</div>');
                setTimeout(function () {
                  $('.add-to-cart-messages .error').remove();
                }, 5000);
              }
            }
          }
        });
        $('button.add-to-cart, button.add-to-cart-global', $productContainer).data('producttype', data.product.productType);
        $productContainer.find('.product-availability .purchaselimit').empty();

        if (data.product.orderableNotInPurchaselimit && data.product.readyToOrder && !data.product.availability.isInPurchaselimit) {
          $productContainer.find('.product-availability .purchaselimit').html(data.product.availability.isInPurchaselimitMessage);
          $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
          var formData = {};
          formData.errorFields = [data.product.availability.isInPurchaselimitMessage];
          formData.formName = 'Add to Cart';
          $('body').trigger('adobeTagManager:formError', formData);

          if (data.product.purchaselimit) {
            qtyValue = data.product.purchaselimit;
          }

          $('.quantity-val', $productContainer).val(qtyValue);
        } else {
          if (!data.product.available) {
            if (data.product.availability.ats > 0) {
              $('.quantity-val', $productContainer).val(data.product.availability.ats);
              $('.quantity-select').val(data.product.availability.ats).trigger('change'); // eslint-disable-next-line no-param-reassign

              data.product.available = true;
              $('button.add-to-cart, button.add-to-cart-global', $productContainer).text(data.resources.addtobag);
            }

            $productContainer.find('.product-availability .purchaselimit').html(data.product.availability.outofstockmessage);
          }

          $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !data.product.available);
        }

        $($productContainer).trigger('product:updateAvailability', {
          product: data.product,
          $productContainer: $productContainer,
          message: availabilityValue,
          resources: data.resources
        });
        callback();
      },
      error: function error() {
        $.spinner().stop();
        callback();
      }
    });
  }
}
/**
 * Get Error fields
 */


function getErrorFields() {
  if (!$('.adobelaunch__colorlink.selected').length && $('.adobelaunch__colorlink').length != 1) {
    // return $('.adobelaunch__colorlink').closest('div[data-attr]').data('attr');
    return $('.adobelaunch__colorlink').closest('div[data-attr]').data('attr');
  }

  if (!$('.adobelaunch__sizelink.selected').length && $('.adobelaunch__sizelink').length != 1) {
    // return $('.adobelaunch__sizelink').closest('div[data-attr]').data('attr');
    return $('.adobelaunch__sizelink').closest('div[data-attr]').data('attr');
  }

  return '';
}
/**
 * Parses JSON from Ajax call made whenever an attribute value is [de]selected
 * @param {Object} response - response from Ajax call
 * @param {Object} response.product - Product object
 * @param {string} response.product.id - Product ID
 * @param {Object[]} response.product.variationAttributes - Product attributes
 * @param {Object[]} response.product.images - Product images
 * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required
 *     attributes have been selected.  Used partially to
 *     determine whether the Add to Cart button can be enabled
 * @param {jQuery} $productContainer - DOM element for a given product.
 */


function handleVariantResponse(response, $productContainer, callback) {
  var isChoiceOfBonusProducts = $productContainer.parents('.choose-bonus-product-dialog').length > 0;
  var isVaraint;

  if ($productContainer.length && response.product.variationAttributes) {
    updateAttrs(response.product.variationAttributes, $productContainer, response.resources);
    isVaraint = response.product.productType === 'variant';

    if (isChoiceOfBonusProducts && isVaraint) {
      $productContainer.parent('.bonus-product-item').data('pid', response.product.id);
      $productContainer.parent('.bonus-product-item').data('ready-to-order', response.product.readyToOrder);
    }
  }

  var dialog = $($productContainer).closest('.quick-view-dialog'); // update to add to cart buttons

  $('button.add-to-cart').data('readytoorder', response.product.readyToOrder && response.product.available);
  $('button.add-to-cart').data('readytoordertext', response.product.readyToOrderMsg);
  var sDiv = $('<div class="col-12 select-size-div">');
  sDiv.attr('aria-describedby', getErrorFields());
  sDiv.html(response.product.readyToOrderMsg);
  $('.select-size-color').html(sDiv);
  $('button.add-to-cart-global', dialog).attr('data-readytoorder', response.product.readyToOrder && response.product.available);
  $('button.add-to-cart-global', dialog).attr('data-readytoordertext', response.product.readyToOrderMsg);
  $('.select-size-color', dialog).html(sDiv);
  $('button.update-cart-product-global', dialog).data('readytoorder', response.product.readyToOrder && response.product.available);
  $('button.update-cart-product-global', dialog).data('readytoordertext', response.product.readyToOrderMsg);
  $('.select-size-color', dialog).html(sDiv); // Update primary images

  var primaryImageUrls = response.product.images.large;
  var videoUrls = response.product.images.video;

  if (videoUrls) {
    createCarousel(primaryImageUrls, $productContainer, videoUrls);
    activateVideoPlayer();
  } else {
    createCarousel(primaryImageUrls, $productContainer);
  } // Update pricing


  if (!isChoiceOfBonusProducts) {
    var $priceSelector = $('.prices .price', $productContainer).length ? $('.prices .price', $productContainer) : $('.prices .price');
    $priceSelector.html(response.product.price.html);
  } // Update promotions


  if (response.product.promotionalPricing && response.product.promotionalPricing.isPromotionalPrice && response.product.promotionalPricing.promoMessage !== '') {
    $('.promotion-pricing', $productContainer).empty().html(response.product.promotionalPricing.priceHtml);
    $('.promotion-pricing', $productContainer).removeClass('d-none');
    $('.promotions', $productContainer).addClass('d-none');
  } else {
    $('.promotion-pricing', $productContainer).addClass('d-none');
    $('.promotions', $productContainer).removeClass('d-none');
    $('.promotions', $productContainer).empty().html(response.product.promotionsHtml);
  }

  updateAvailability(response, $productContainer, callback);
  persistentWishlist.makrSingleProductWishlisted(response.product.id, $productContainer);

  if (isChoiceOfBonusProducts) {
    var $selectButton = $productContainer.find('.select-bonus-product');
    $selectButton.trigger('bonusproduct:updateSelectButton', {
      product: response.product,
      $productContainer: $productContainer
    });
  } else {
    // Enable "Add to Cart" button if all required attributes have been selected
    // eslint-disable-next-line no-lonely-if
    if ($('.page').data('producttype') === 'set') {
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global', $productContainer).trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }).trigger('product:statusUpdate', response.product);
    } else {
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }).trigger('product:statusUpdate', response.product);
    }
  }

  if (response.product.readyToOrderMsg === '') {
    $('.select-size-color').empty();
  } // Update attributes


  $productContainer.find('.main-attributes').empty().html(getAttributesHtml(response.product.attributes));
}
/**
 * Updates DOM using post-option selection Ajax response
 *
 * @param {OptionSelectionResponse} options - Ajax response options from selecting a product option
 * @param {jQuery} $productContainer - DOM element for current product
 */


function updateOptions(options, $productContainer) {
  options.forEach(function (option) {
    var $optionEl = $productContainer.find('.product-option[data-option-id*="' + option.id + '"]');
    option.values.forEach(function (value) {
      var valueEl = $optionEl.find('option[data-value-id*="' + value.id + '"]');
      valueEl.val(value.url);
    });
  });
}
/**
 * Updates the quantity DOM elements post Ajax call
 * @param {UpdatedQuantity[]} quantities -
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function updateQuantities(quantities, $productContainer) {
  if (!($productContainer.parent('.bonus-product-item').length > 0)) {
    var optionsHtml = quantities.map(function (quantity) {
      var selected = quantity.selected ? ' selected ' : '';
      return '<option value="' + quantity.value + '"  data-url="' + quantity.url + '"' + selected + '>' + quantity.value + '</option>';
    }).join('');
    getQuantitySelector($productContainer).empty().html(optionsHtml);
  }
}
/**
 * Show basket limit messaging mmodal
 */


$('body').on('triggerBasketLimitMsgModal', function () {
  if ($('#pliLimitMessagingModal').length > 0) {
    $('#pliLimitMessagingModal').modal('show');
  }
});
/**
 * Updates the product shipping option DOM elements post Ajax call
 * @param {UpdatedQuantity[]} data - response of an Ajax
 * @param {jQuery} $productContainer - DOM container for a given product
 */

base.updateShippingOptions = function (data, $productContainer) {
  var $storeDataElement = $productContainer.find('.shipping-option');
  var product = data.product;

  if (data && data.isBopisEnabled && $storeDataElement.length > 0) {
    // show elements if bopis is enabled
    $storeDataElement.find('.product-pis').removeClass('change-store');
    $storeDataElement.show(); // update store id in DOM

    if (data.storeInfo) {
      $storeDataElement.find('input.product-pis').attr('data-store-id', data.storeInfo.ID);
    } // update store change link


    if ($('a.change-store').length > 0) {
      if (data.storeInfo && $storeDataElement.attr('data-changestore-text')) {
        $('a.change-store').text($storeDataElement.attr('data-changestore-text'));
      } else if ($storeDataElement.attr('data-choosestore-text')) {
        $('a.change-store').text($storeDataElement.attr('data-choosestore-text'));
      }
    } // set add to bag button text


    var selectedValue = $storeDataElement.find('input[name=shipto]:checked').val();
    var addToStoreText = $storeDataElement.data('addtostore-text');
    var addToCartButton = $storeDataElement.closest('.product-detail').find('.add-to-cart');

    if (addToStoreText !== undefined && addToStoreText.length && addToStoreText !== '') {
      if (selectedValue === 'instore') {
        addToCartButton.html(addToStoreText);
      }
    }

    if (product.productType !== 'variant') {
      // product is a master
      $storeDataElement.find('input[value=instore]').attr('disabled', true);
      $storeDataElement.find('.store-change-link').hide();
    } else if (data.storeInfo && (data.storeInfo.unitsAtStores === 0 || data.storeInfo.unitsAtStores < product.selectedQuantity)) {
      // product is variant and units are unavailable
      if (data.availabilityMessage) {
        $storeDataElement.find('.store-info').text(data.availabilityMessage);
      }

      if (data.storeInfo.distanceInUnits && data.storeInfo.distanceInUnits !== '0') {
        $storeDataElement.find('.distance-info').text(data.storeInfo.distanceInUnits);
      }

      $storeDataElement.find('input[value=instore]').attr('disabled', true);
      $storeDataElement.find('.store-change-link').show();

      if ($storeDataElement.find('input[name=shipto]:checked').val() === 'instore') {
        $storeDataElement.find('input[value=shipto]').trigger('click');
      }
    } else {
      // product is variant and units are available
      $storeDataElement.find('.product-pis').removeClass('change-store');

      if (data.storeInfo && data.storeInfo.distanceInUnits && data.storeInfo.distanceInUnits !== '0') {
        $storeDataElement.find('.distance-info').text(data.storeInfo.distanceInUnits);
      }

      if (data.storeInfo && data.availabilityMessage) {
        $storeDataElement.find('.store-info').text(data.availabilityMessage);
      } else {
        $storeDataElement.find('.store-info').text(data.availabilityPromptText);
        $storeDataElement.find('.product-pis').addClass('change-store');
      }

      $storeDataElement.find('input[value=instore]').removeAttr('disabled');
      $storeDataElement.find('.store-change-link').show();
    }
  } else {
    // hide elements if bopis is disabled
    $storeDataElement.find('.product-pis').removeClass('change-store');
    $storeDataElement.hide();
  }
};
/**
 *
 * @param {string} selectedValueUrl attribute URL
 * @param {Object} $productContainer product Detail container
 */


function attributeSelect(selectedValueUrl, $productContainer) {
  if ($productContainer.length && selectedValueUrl) {
    $('body').trigger('product:beforeAttributeSelect', {
      url: selectedValueUrl,
      container: $productContainer
    });
    $.ajax({
      url: selectedValueUrl,
      method: 'GET',
      success: function success(data) {
        handleVariantResponse(data, $productContainer, function () {
          updateOptions(data.product.options, $productContainer);
          updateQuantities(data.product.quantities, $productContainer); // update shipping option elements

          base.updateShippingOptions(data, $productContainer, true);

          if (data.product && data.product.badge && data.product.badge.isFinalSale) {
            $('div.final-sale-message', $productContainer).removeClass('d-none');
          } else {
            $('div.final-sale-message', $productContainer).addClass('d-none');
          } // update hudson reward point only for bay site


          if (data.product && data.product.hudsonPoint) {
            $('.product-detail').find('.reward-est-point').html(data.product.hudsonPoint);
          }

          $('body').trigger('product:afterAttributeSelect', {
            data: data,
            container: $productContainer
          });
          $.spinner().stop();
        });
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  }
}

base.colorAttribute = function () {
  $(document).on('click', '[data-attr="color"] button , [data-attr="Design"] button', function (e) {
    e.preventDefault();

    if ($(this).attr('disabled')) {
      return;
    }

    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    }

    attributeSelect($(this).attr('data-url'), $productContainer);
  });
  $(document).on('change', 'select[class*="select-"], .options-select', function (e) {
    e.preventDefault();
    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    }

    attributeSelect(e.currentTarget.value, $productContainer);
  });
};

base.selectAttribute = function () {
  $(document).on('click', 'li[data-attr-value] a', function (e) {
    e.preventDefault();
    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    }

    if ($(this).parent('li').length > 0 && $(this).parent('li').attr('selected') === 'selected') {
      return false;
    }

    attributeSelect($(this).attr('href'), $productContainer);
  });
};

base.availability = function () {
  $(document).off('change', '.quantity-select');
  $(document).on('change', '.quantity-select', function (e) {
    e.preventDefault(); // clear error message

    $('.cart-error').html('');
    var $productContainer = $(this).closest('.product-detail');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.modal-content').find('.product-quickview');
    }

    if ($('.bundle-items', $productContainer).length === 0) {
      attributeSelect($(e.currentTarget).find('option:selected').data('url'), $productContainer);
    }
  });
};

base.initQuantity = function () {
  $('body').on('click', '.btn-number', function (e) {
    e.preventDefault();
    $('.cart-error').html('');
    var fieldName = $(this).attr('data-field');
    var type = $(this).attr('data-type');
    var input = $(this).closest('div').find('input[name="' + fieldName + '"]');
    var currentVal = parseInt(input.val(), 10);

    if (!isNaN(currentVal)) {
      if (type === 'minus') {
        if (currentVal > input.attr('min')) {
          input.val(currentVal - 1).change();
        }

        if (parseInt(input.val(), 10) === input.attr('min')) {
          $(this).attr('disabled', true);
        }

        if ($(this).attr('disabled') !== 'disabled') {
          $(this).closest('.quantity-field').find('.input-number').addClass('active-border');
        }
      } else if (type === 'plus') {
        input.val(currentVal + 1).change();

        if (parseInt(input.val(), 10) === parseInt(input.attr('max'), 10)) {
          $(this).attr('disabled', true);
        }

        if ($(this).attr('disabled') !== 'disabled') {
          $(this).closest('.quantity-field').find('.input-number').addClass('active-border');
        }
      }
    } else {
      input.val(1);
    }
  });
  $('body').on('blur', '.btn-number', function (e) {
    if ($('.input-number').hasClass('active-border')) {
      $('.input-number').removeClass('active-border');
    }
  });
  $('body').on('mouseenter focusin', '.input-number', function () {
    $(this).data('oldValue', $(this).val());
  });
  $('body').on('change', '.input-number', function () {
    // clear error message
    $('.cart-error').html('');
    var minValue = parseInt($(this).attr('min'), 10);
    var maxValue = parseInt($(this).attr('max'), 10);
    var valueCurrent = parseInt($(this).val(), 10);
    var name = $(this).attr('name');

    if (valueCurrent >= minValue) {
      $(this).closest('div').find(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
    } else {
      $(this).val($(this).data('oldValue'));
    }

    if (valueCurrent <= maxValue) {
      $(this).closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
    }

    if (valueCurrent === 1) {
      $(this).closest('div').find(".btn-number[data-type='minus'][data-field='" + name + "']").attr('disabled', true); // eslint-disable-line
    } else if (valueCurrent === maxValue) {
      $(this).closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").attr('disabled', true); // eslint-disable-line
    } // update Drop Down


    var currentQty = parseInt($(this).val(), 10);
    $(this).closest('div').find('select[class*="quantity-select"]').val(currentQty).trigger('change');
  });
  $('body').on('keydown', '.input-number', function (e) {
    // Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 || // Allow: Ctrl+A
    e.keyCode === 65 && e.ctrlKey === true || // Allow: home, end, left, right
    e.keyCode >= 35 && e.keyCode <= 39) {
      // let it happen, don't do anything
      return;
    } // Ensure that it is a number and stop the keypress


    if ((e.shiftKey || e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105)) {
      e.preventDefault();
    }
  });
  $('body .quantity-val').on('input', function () {
    var element = $(this);
    var maxValue = parseInt($(this).attr('max'), 10);

    if (element.val() >= maxValue) {
      $('.cart-error').html('');
      $(this).val(maxValue);
      $(this).closest('div').find('select[class*="quantity-select"]').val(maxValue).trigger('change');
    }
  });
};

base.addToCart = function () {
  $(document).on('click', 'button.add-to-cart, button.add-to-cart-global, button.prdt_tile_btn', function () {
    var addToCartUrl;
    var pid;
    var pidsObj;
    var setPids;
    var sourceage = $(this).data('sourcepage');
    var atcOnTile = $(this).data('view');
    var $productTile = $(this).closest('.product-tile');
    var wlRemoveUrl = $productTile.find('.removefromwl').val();

    if (atcOnTile === 'tile') {
      var selectASize = $(this).data('selectsizemsg');
      var addToCarLabel = $(this).data('add-to-cart-label');
      $productTile.find('button.prdt_tile_btn').text(selectASize);
      $productTile.find('button.prdt_tile_btn').addClass('soldout').addClass('disabled');
      setTimeout(function () {
        $productTile.find('button.prdt_tile_btn').text(addToCarLabel); // eslint-disable-line

        $productTile.find('button.prdt_tile_btn').removeClass('soldout').removeClass('disabled'); // eslint-disable-line
      }, 3000);
    }

    var isReadyToOrder = $(this).data('readytoorder');
    $('.select-size-color').empty();

    if (!isReadyToOrder) {
      var formData = {};
      formData.errorFields = ['no variant selected'];
      formData.formName = 'Add to Cart';
      $('body').trigger('adobeTagManager:formError', formData);
      var sDiv = $('<div class="col-12 select-size-div" tabindex="0">');
      sDiv.html($(this).data('readytoordertext'));

      if ($('#missedattrSelection-ADA').length) {
        $('#missedattrSelection-ADA').html('Please select ' + getErrorFields() + ' to proceed');
      }

      $('.select-size-color').html(sDiv);

      if ($('.page').data('producttype') !== 'set') {
        $('.select-size-color').closest('.product-detail').find('.select-size-div').focus();
        $('.select-size-color').closest('.product-detail').find('.select-size-div').on('keydown', function (e) {
          if (e.which === 9 && !e.shiftKey) {
            e.preventDefault();

            if (getErrorFields() == 'size') {
              $(this).closest('.attributes').find('div[data-attr=' + getErrorFields() + ']').find('.attribute ul li a')[0].focus();
            } else if (getErrorFields() == 'color') {
              $(this).closest('.attributes').find('div[data-attr=' + getErrorFields() + ']').find('.attribute ul li button')[0].focus();
            }
          }
        });
      }

      if ($productTile.length > 0 || !($(this).data('producttype') != 'master')) {
        // eslint-disable-line
        // if the product is not a variant
        // do not attempt ajax call for atc. To reduce unnecessary
        return;
      }
    }

    $('body').trigger('product:beforeAddToCart', this);

    if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {
      setPids = [];
      $('.product-detail').each(function () {
        if (!$(this).hasClass('product-set-detail')) {
          setPids.push({
            pid: $(this).find('.product-id').text(),
            qty: $(this).find('.quantity-select').val(),
            options: getOptions($(this))
          });
        }
      });
      pidsObj = JSON.stringify(setPids);
    }

    pid = base.getPidValue($(this));

    if ((wlRemoveUrl === null || wlRemoveUrl === undefined) && $(this).closest('.product-quickview').length > 0) {
      var pidData = '?pid=' + pid;
      wlRemoveUrl = $(this).closest('.product-quickview').find('.removefromwlQV').length > 0 ? $(this).closest('.product-quickview').find('.removefromwlQV').val() : '';
      wlRemoveUrl += pidData;
    }

    var $productContainer = $(this).closest('.product-detail');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');
    }

    addToCartUrl = getAddToCartUrl(); // fetch the qty value on ATC, trigger change to ensure the purchase limit message is removed on interaction with ATC
    // It fetches the value from the qty input and sets it to qty select option

    var qtyValue = $productContainer.find('.quantity-val').val() || 1;
    $productContainer.find('select[class*="quantity-select"]').val(qtyValue).trigger('change');
    var form = {
      pid: pid,
      pidsObj: pidsObj,
      childProducts: getChildProducts(),
      quantity: !$(this).closest('div').hasClass('hover-content') && base.getQuantitySelected($(this)) ? base.getQuantitySelected($(this)) : 1
    };

    if (!$('.bundle-item').length) {
      form.options = getOptions($productContainer);
    }

    $(this).trigger('updateAddToCartFormData', form);

    if (addToCartUrl) {
      $.ajax({
        url: addToCartUrl,
        method: 'POST',
        data: form,
        success: function success(data) {
          // return and trigger a message product addition exceeded the basket preference limit
          if (data.message && data.message === 'LIMIT_EXCEEDED') {
            if ($productContainer.is('.product-quickview') && $productContainer.find('.qv-baskelimit-msg').length > 0) {
              $productContainer.find('.qv-baskelimit-msg').removeClass('d-none');
            } else {
              $('body').trigger('triggerBasketLimitMsgModal');
            }
          } else {
            data.sourcepage = sourceage;
            handlePostCartAdd(data);
            $('body').trigger('product:afterAddToCart', data); // changes made to remove the product from wishlist of the same is being added from WL - Start

            if ($('.pg-name').length > 0 && $('.pg-name').val() === 'wishlist') {
              $.ajax({
                url: wlRemoveUrl,
                type: 'get',
                dataType: 'json',
                data: {},
                success: function success() {
                  window.location.reload();
                },
                error: function error() {// do nothing
                }
              });
            }
          } // changes made to remove the product from wishlist of the same is being added from WL - End


          $.spinner().stop();
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  });
};

base.showAddToCartConfirmation = showAddToCartConfirmation;
base.methods = {
  editBonusProducts: function editBonusProducts(data) {
    chooseBonusProducts(data);
  }
};

base.checkProductAvailability = function (prodType, availUrl, context) {
  var $productContainer = $('body').find('.product-detail') || context;

  if ($('.page').data('producttype') || prodType) {
    var productType = prodType || $('.page').data('producttype').toLowerCase();
    var isVariant = productType === 'variant' || productType === 'product';
    var isMaster = productType === 'master';
    var isSet = productType === 'set';
    var url = $('.page').data('availabilityurl') || availUrl;
    var availabilityValue;

    if (!isSet) {
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(data) {
          if (isVariant) {
            var availabilityMessages = data.availability.messages;
            availabilityMessages.forEach(function (message) {
              var colorStyle = data.availability.hexColorCode;

              if (colorStyle) {
                colorStyle = 'style=color:' + colorStyle;
              }

              availabilityValue = '<li><div ' + colorStyle + '>' + message + '</div></li>';
            });
            $productContainer.find('.product-availability .purchaselimit').empty();
            $('button.add-to-cart, button.add-to-cart-global').attr('disabled', !data.product.available);

            if (data.product.readyToOrder && !data.product.availability.isInPurchaselimit) {
              $productContainer.find('.product-availability .purchaselimit').html(data.product.availability.isInPurchaselimitMessage);
              $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
              var formData = {};
              formData.errorFields = [data.product.availability.isInPurchaselimitMessage];
              formData.formName = 'Add to Cart';
              $('body').trigger('adobeTagManager:formError', formData);
            }

            if ((!data.product.available || !data.product.readyToOrder) && data.product.productType !== 'master') {
              $productContainer.find('button.atc-button-pdp').addClass('soldout');
              $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

              if ($productContainer.hasClass('product-quickview')) {
                $productContainer.find('button.add-to-cart-global').addClass('soldout');
                $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
              }
            }

            $($productContainer).trigger('product:updateAvailability', {
              product: data.product,
              $productContainer: $productContainer,
              message: availabilityValue,
              resources: data.resources
            });
          } else if (isMaster) {
            $('button.add-to-cart, button.add-to-cart-global').attr('disabled', !data.product.available);

            if (!data.product.available) {
              $productContainer.find('button.atc-button-pdp').addClass('soldout');
              $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

              if ($productContainer.hasClass('product-quickview')) {
                $productContainer.find('button.add-to-cart-global').addClass('soldout');
                $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
              }
            }
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    } else if (isSet) {
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(data) {
          data.product.individualProducts.forEach(function (item) {
            $productContainer = $('body').find('.product-detail.set-item.' + item.id);

            if (item.productType === 'variant' || item.productType === 'product') {
              var availabilityMessages = item.availability.messages;
              availabilityMessages.forEach(function (message) {
                var colorStyle = item.availability.hexColorCode;

                if (colorStyle) {
                  colorStyle = 'style=color:' + colorStyle;
                }

                availabilityValue = '<li><div ' + colorStyle + '>' + message + '</div></li>';
              });
              $productContainer.find('.product-availability .purchaselimit').empty();
              $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !item.available);

              if (item.readyToOrder && !item.availability.isInPurchaselimit) {
                $productContainer.find('.product-availability .purchaselimit').html(item.availability.isInPurchaselimitMessage);
                $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
                var formData = {};
                formData.errorFields = [item.availability.isInPurchaselimitMessage];
                formData.formName = 'Add to Cart';
                $('body').trigger('adobeTagManager:formError', formData);
              }

              if ((!item.available || !item.readyToOrder) && item.productType !== 'master') {
                $productContainer.find('button.atc-button-pdp').addClass('soldout');
                $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

                if ($productContainer.hasClass('product-quickview')) {
                  $productContainer.find('button.add-to-cart-global').addClass('soldout');
                  $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
                }
              }

              $($productContainer).trigger('product:updateAvailability', {
                product: item,
                $productContainer: $productContainer,
                message: availabilityValue,
                resources: data.resources
              });
            } else if (item.productType === 'master') {
              $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !item.available);

              if (!item.available) {
                $productContainer.find('button.atc-button-pdp').addClass('soldout');
                $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

                if ($productContainer.hasClass('product-quickview')) {
                  $productContainer.find('button.add-to-cart-global').addClass('soldout');
                  $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
                }
              }
            }
          });
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  }
};

base.addBonusProductsToCart = function () {
  $(document).on('click', '.add-bonus-products', function () {
    var $readyToOrderBonusProducts = $('input[name="chooseBonusproductIds"]:checked');
    var data = {};
    var url = $('.choose-bonus-product-dialog').data('addtocarturl');
    var pidsObject = {
      bonusProducts: []
    };
    $.each($readyToOrderBonusProducts, function () {
      var qtyOption = 1;
      var option = null;

      if (qtyOption > 0) {
        if ($(this).data('optionid') && $(this).data('option-selected-value')) {
          option = {};
          option.optionId = $(this).data('optionid');
          option.productId = $(this).data('pid');
          option.selectedValueId = $(this).data('option-selected-value');
        }

        pidsObject.bonusProducts.push({
          pid: $(this).data('pid'),
          qty: qtyOption,
          options: [option]
        });
        pidsObject.totalQty = parseInt($('.pre-cart-products').length > 0 ? $('.pre-cart-products').html() : 1, 10);
      }
    }); // Adding product from details

    if ($(this).hasClass('from-modal')) {
      pidsObject.bonusProducts = [];
      pidsObject.bonusProducts.push({
        pid: $(this).data('pid'),
        qty: 1,
        options: null
      });
    }

    data = {
      pids: JSON.stringify(pidsObject),
      uuid: $('.choose-bonus-product-dialog').data('uuid'),
      pliuuid: $('.choose-bonus-product-dialog').data('pliuuid')
    };
    $.spinner().start();
    $.ajax({
      url: url,
      data: data,
      method: 'POST',
      success: function success(response) {
        $.spinner().stop();

        if (response.error) {
          $('.choice-of-bonus-product .error-div').empty().append('<div class="alert alert-danger add-to-basket-alerts text-center">');
          $('.choice-of-bonus-product .error-div .add-to-basket-alerts').html(response.errorMessage);
        } else {
          $('.configure-bonus-product-attributes').html(response);
          $('.bonus-products-step2').removeClass('hidden-xl-down');
          $('#chooseBonusProductModal').modal('hide');
          $('#editProductModal').modal('hide');
          location.reload();
        }
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  });
};

module.exports = base;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/pdpInstoreInventory.js":
/*!******************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/pdpInstoreInventory.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var storeLocator = __webpack_require__(/*! ../storeLocator/storeLocator */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/storeLocator/storeLocator.js");

var base = __webpack_require__(/*! instorepickup/product/pdpInstoreInventory */ "../plugin_instorepickup/cartridges/plugin_instorepickup/cartridge/client/default/js/product/pdpInstoreInventory.js");

var baseBase = __webpack_require__(/*! ./base */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/base.js");

var formFields = __webpack_require__(/*! ../formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");
/**
 * Sets the data attribute of Quantity Selector to save its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function setOriginalQuantitySelect($quantitySelect) {
  if (!$quantitySelect.data('originalHTML')) {
    $quantitySelect.data('originalHTML', $quantitySelect.html());
  } // If it's already there, don't re-set it

}
/**
 * Postal code formatting for in store
 */


function bopisPostalCodeValidation() {
  $('#store-postal-code').on('keyup', function () {
    var postalCode = $(this).val();

    if (/[a-zA-Z][0-9][a-zA-Z]/.test(postalCode.substring(0, 3))) {
      if (postalCode.length === 4 && postalCode.indexOf(' ') === 3) {
        return;
      }

      if (postalCode.length === 5 && postalCode.lastIndexOf(' ') === 4) {
        $(this).val(postalCode.substring(0, postalCode.length - 1));
        return;
      }

      var formattedString = postalCode.replace(/ /g, '').replace(/(\w{3})/, '$1 ').replace(/(^\s+|\s+$)/, ' ').toUpperCase().trim();
      $(this).val(formattedString);
    }
  });
}
/**
 * Generates the modal window on the first call. Modal head and
 * main text is appended through parameter
 * @param {string} modalBodyText - main text in the modal
 * @param {string} modalCloseText - close title
 * @param {string} modalHeadText - modal header text
 */


function getModalHtmlElement(modalBodyText, modalCloseText, modalHeadText) {
  if ($('#inStoreInventoryModal').length !== 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
  }

  var modalHead = modalHeadText !== undefined ? modalHeadText : $('.store-change-link').data('modal-header-text'); // fallback to get content from DOM, PDP

  var modalClose = modalCloseText !== undefined ? modalCloseText : $('.store-change-link').data('modal-header-text'); // fallback to get content from DOM, PDP

  var modalBody = modalBodyText !== undefined ? modalBodyText : $('.store-change-link').data('modal-body-text'); // fallback to get content from DOM, PDP
  // set empty to avoid display of null

  modalHead = modalHead === null ? '' : modalHead;
  modalClose = modalClose === null ? '' : modalClose;
  modalBody = modalBody === null ? '' : modalBody;
  var htmlString = '<!-- Modal -->' + '<div class="modal inStoreInventoryModal" id="inStoreInventoryModal" role="dialog" aria-modal="true">' + '<div class="modal-dialog in-store-inventory-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '<span>' + modalHead + '</span>' + '    <button type="button" class="close svg-svg-22-cross svg-svg-22-cross-dims" data-dismiss="modal" aria-label="Close inventory modal" title="' + modalClose + '">' + // eslint-disable-line
  '    </button>' + '</div>' + '<div class="change-a-store">' + modalBody + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('#inStoreInventoryModal').modal('show');
  $('.change-store[aria-haspopup=true]').attr('aria-controls', 'inStoreInventoryModal');
  formFields.inputfocusEvent();
}
/**
 * Replaces the content in the modal window with find stores components and
 * the result store list.
 * @param {string} pid - The product ID to search for
 * @param {number} quantity - Number of products to search inventory for
 * @param {number} selectedPostalCode - The postal code to search for inventory
 * @param {number} selectedRadius - The radius to search for inventory
 * @param {string} pliUUID - unid id of an item
 * @param {string} selectedOption - selected option between shipto and instore
 * @param {string} instoreFieldLabel - default lable for instore
 * @param {string} source - source of invoke
 */


function fillModalElement(pid, quantity, selectedPostalCode, selectedRadius, pliUUID, selectedOption, instoreFieldLabel, source) {
  var requestData = {
    products: pid + ':' + quantity
  };

  if (selectedRadius) {
    requestData.radius = selectedRadius;
  }

  if (selectedPostalCode) {
    requestData.postalCode = selectedPostalCode;
  }

  $('#inStoreInventoryModal').spinner().start();
  $.ajax({
    url: $('.change-store').data('open-action'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      $('.inStoreInventoryModal .modal-body').empty();
      $('.inStoreInventoryModal .modal-body').html(response.storesResultsHtml);
      storeLocator.search();
      storeLocator.changeRadius();
      storeLocator.selectStore();
      storeLocator.updateSelectStoreButton();
      formFields.updateSelect();
      formFields.adjustForAutofill();
      $('.btn-storelocator-search').attr('data-search-pid', pid);
      $('.btn-storelocator-search').attr('data-product-pliuuid', pliUUID);
      $('.btn-storelocator-search').attr('data-shipto-selected', selectedOption);
      $('.btn-storelocator-search').attr('data-instorefieldlabel', instoreFieldLabel);
      $('.btn-storelocator-search').attr('data-source', source);

      if (selectedRadius) {
        $('#radius').val(selectedRadius);
      }

      if (selectedPostalCode) {
        $('#store-postal-code').val(selectedPostalCode);
      }

      if (!$('.results').data('has-results')) {
        $('.store-locator-no-results').show();
      } // do not show error message with the modal open


      if (!$('.results').data('searchexecuted')) {
        $('.store-locator-no-results').hide();
      }

      $('#inStoreInventoryModal').modal('show');
      $('#inStoreInventoryModal').spinner().stop();
      $('#inStoreInventoryModal').find('#store-postal-code').focus();
      bopisPostalCodeValidation();
    },
    error: function error() {
      $('#inStoreInventoryModal').spinner().stop();
    }
  });
}
/**
 * Update quantity options. Only display quantity options that are available for the store.
 * @param {sring} searchPID - The product ID of the selected product.
 * @param {number} storeId - The store ID selected for in store pickup.
 * @param {number} storeDistance - The store distance of the store selected for in store pickup.
 * @param {string} searchPlid - unique id of an item
 */


function updateQuantityOptions(searchPID, storeId, storeDistance, searchPlid) {
  var selectorPrefix = '.product-detail[data-pid="' + searchPID + '"]';
  var quantitySelector = selectorPrefix + ' .quantity-select';
  setOriginalQuantitySelect($(quantitySelector));
  var requestData = {
    pid: searchPID,
    quantitySelected: $(quantitySelector).val(),
    storeId: storeId,
    storeDistance: storeDistance,
    searchPlid: searchPlid,
    savetosession: true
  };
  $.ajax({
    url: $('.store-change-link').data('setstore'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      var $productContainer = $('.product-detail[data-pid="' + searchPID + '"]');
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }); // update shipping option elements

      baseBase.updateShippingOptions(response, $productContainer);
    }
  });
}
/**
 * CUSTOM EVENT
 * event handler triggered with the store selection on modal
 */


base.selectStoreWithInventory = function () {
  $('body').on('store:selected', function (e, data) {
    var searchPID = $('.btn-storelocator-search').attr('data-search-pid');
    var searchPlid = $('.btn-storelocator-search').attr('data-product-pliuuid');
    var storeElement = $('.product-detail[data-pid="' + searchPID + '"]') === undefined ? $('.cart-options[data-pid="' + searchPID + '"]') : $('.product-detail[data-pid="' + searchPID + '"]'); // fall back from cart, pick product id

    var $changeStoreButton = $(storeElement).find('.change-store');
    $($changeStoreButton).data('postal', data.searchPostalCode);
    $($changeStoreButton).data('radius', data.searchRadius);
    updateQuantityOptions(searchPID, data.storeID, data.storeDistance, searchPlid);
    $('#inStoreInventoryModal').attr('data-event-trigger', 'store');
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
    $('#inStoreInventoryModal').attr('aria-modal', 'false');
  });
};
/**
 * CLICK EVENT
 * event handler triggered with the click of change store in PDP
 */


base.changeStore = function () {
  $('body').on('click', '.change-store', function () {
    var pid = $(this).closest('.product-detail').attr('data-pid') === undefined ? $(this).closest('.cart-options').data('product-id') : $(this).closest('.product-detail').attr('data-pid');
    var quantity = $(this).closest('.product-detail').find('.quantity-select').val() === undefined ? $(this).closest('.cart-options').data('product-qty') : $(this).closest('.product-detail').find('.quantity-select').val();
    var pliUUID = $(this).closest('.cart-options').data('product-uuid');
    var modalBodyText = $(this).closest('.cart-options').data('modal-body-text');
    var modalCloseText = $(this).closest('.cart-options').data('modal-close-text');
    var modalHeadText = $(this).closest('.cart-options').data('modal-header-text');
    var instoreFieldLabel = $(this).closest('.cart-options').data('instorefieldlabel');
    var source = $('.change-store').parent().siblings('.store-refine').length > 0 ? 'search' : null;
    var selectedOption = $(this).closest('.cart-options').find('input[name*="shipto"]:checked').val();
    getModalHtmlElement(modalBodyText, modalCloseText, modalHeadText);
    fillModalElement(pid, quantity, $(this).data('postal'), $(this).data('radius'), pliUUID, selectedOption, instoreFieldLabel, source);
  });
};
/**
 * CLICK EVENT
 * event handler triggered with the click of change store in PDP
 */


base.updateAddToCartFormData = function () {
  $('body').on('updateAddToCartFormData', function (e, form) {
    var storeID = null; // eslint-disable-line

    var instoreStoreID;

    if (form.pidsObj) {
      var pidsObj = JSON.parse(form.pidsObj);
      pidsObj.forEach(function (product) {
        var storeElement = $('.product-detail[data-pid="' + product.pid + '"]').find('.shipping-option');
        $(':checked', '.shipping-option').val();
        instoreStoreID = $(storeElement).length && $(storeElement).find('input[name*="shipto"]').length ? $('input[name*="shipto"]:checked', '.shipping-option').data('store-id') : null;
        product.storeId = instoreStoreID && instoreStoreID !== undefined && instoreStoreID !== '' ? instoreStoreID : null; // eslint-disable-line

        storeID = product.storeId;
      });
      form.pidsObj = JSON.stringify(pidsObj); // eslint-disable-line no-param-reassign
    }

    var storeElement = $('.product-detail[data-pid="' + form.pid + '"]').find('.shipping-option');
    instoreStoreID = $(storeElement).length && $(storeElement).find('input[name*="shipto"]').length ? $('input[name*="shipto"]:checked', storeElement).data('store-id') : null;
    instoreStoreID = instoreStoreID && instoreStoreID !== undefined && instoreStoreID !== '' ? instoreStoreID : null;

    if (instoreStoreID) {
      form.storeId = instoreStoreID; // eslint-disable-line
    }
  });
};
/**
 * Changes add to bag text dynamically on toggle of shipping options
 */


base.changeButtonText = function () {
  $('.shipping-option').on('click', 'input:not(.change-store)', function () {
    var selectedValue = $(this).val();
    var addToBagText = $('.shipping-option').data('addtobag-text');
    var addToStoreText = $('.shipping-option').data('addtostore-text');
    var addToCartButton = $(this).closest('.product-detail').find('.add-to-cart');

    if (addToStoreText !== undefined && addToStoreText.length && addToStoreText !== '') {
      if (selectedValue === 'instore') {
        addToCartButton.html(addToStoreText);
        $('body').trigger('adobe:bopusStart');
      } else {
        addToCartButton.html(addToBagText);
      }
    }
  });
};
/**
 * Assign aria-checked boolean values to radio group items based on user input
 */


base.selectRadioFromGroupList = function () {
  $('.radio-group-list[role=radiogroup]').on('click', '.radio-group-trigger', function () {
    var $this = $(this);
    $this.closest('.radio-group-list').find('[role=radio]').attr('aria-checked', 'false');
    $this.closest('[role=radio]').attr('aria-checked', 'true');
  });
};
/**
 * Trigger bopus start when radio is toggled to pick up i store
 */


base.triggerBopusEvent = function () {
  $('.shipping-option').on('click', 'input.change-store', function () {
    var selectedValue = $(this).val();

    if (selectedValue === 'instore') {
      $('body').trigger('adobe:bopusStart');
    }
  });
  $('.shipping-option').on('click', 'a.change-store', function () {
    $('body').trigger('adobe:bopusStart');
  });
};
/**
 * update the radio button to 'Ship to' if store selector modal is closed
 */


base.switchShiptoOnModalClosePDP = function () {
  $('body').on('hidden.bs.modal', '#inStoreInventoryModal', function () {
    var $container = $('.shipping-option');

    if ($container.length > 0 && $container.find('input[name=shipto]:checked').length > 0 && $container.find('input[name=shipto]:checked').val() === 'instore') {
      if ($container.find('input[value=instore]').length > 0) {
        // only if Pick up in store has no store selected
        if (($container.find('input[value=instore]').attr('data-store-id') === undefined || $container.find('input[value=instore]').attr('data-store-id') === '') && !$('#inStoreInventoryModal').attr('data-event-trigger')) {
          $container.find('input[value=shipto]').trigger('click');
        }
      }
    }
  });
};
/**
 * trigger click on enter key with store search
 */


base.triggerClickOnEnter = function () {
  $('body').on('keydown', '#store-postal-code', function (event) {
    var keyCode = event.keyCode ? event.keyCode : event.which;

    if (keyCode == 13) {
      $('.btn-storelocator-search').trigger('click');
    }
  });
};

module.exports = base;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/persistentWishlist.js":
/*!*****************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/persistentWishlist.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // eslint-disable-next-line require-jsdoc

function addWishlistedClass(tile) {
  $('.product-tile', tile).find('.image-container').addClass('wishlist_checked');
  $('.wishlistTile', tile).find('span').addClass('svg-svg-96-heart-blue svg-svg-96-heart-blue-dims');
  $('.wishlistTile', tile).removeClass('select-wishlist').addClass('deselect-wishlist');
} // eslint-disable-next-line require-jsdoc


function removeWishlistedClass(tile) {
  $('.product-tile', tile).find('.image-container').removeClass('wishlist_checked').addClass('select-wishlist');
  $('.wishlistTile', tile).find('span').removeClass('svg-svg-96-heart-blue svg-svg-96-heart-blue-dims');
  $('.wishlistTile', tile).find('span').addClass('svg-svg-105-heart-o-22-19-dims svg-svg-105-heart-o-22-19');
  $('.wishlistTile', tile).removeClass('deselect-wishlist').addClass('select-wishlist');
  $('.wishlistTile', tile).find('span').show();
  $('.customer-content', tile).addClass('d-none');
  $('.image-container', tile).removeClass('wishlist_checked');
}
/**
 * cache wishlist ids in window
 *
 * @param {Object[]} products - wishlist structs
 */


function storeWishlistInWindow(products) {
  window.wishlistIds = products.map(function (each) {
    return each.id;
  });
}

module.exports = {
  markProductArrWishlisted: function markProductArrWishlisted() {
    var wishlistURL = $('body').data('wishlisturl');

    if (wishlistURL) {
      $.ajax({
        url: wishlistURL,
        success: function success(response) {
          if (response) {
            storeWishlistInWindow(response.wishlistProducts);
            response.wishlistProducts.forEach(function (product) {
              var tile = $('div[data-tile-pid=' + product.id + ']');

              if (tile.length > 0) {
                addWishlistedClass(tile);
              }

              var productDetail = $('.product-detail');
              productDetail.each(function () {
                var item = $(this);

                if (item.length > 0 && item.data('pid') == product.id) {
                  // eslint-disable-line
                  $('.wishlistTile', item.find('.primary-images-container')).removeClass('pdpdeselect-wishlist').removeClass('pdpselect-wishlist').addClass('pdpdeselect-wishlist'); // saks only change

                  if ($('.wishlist-pdp-button', item).find('span.button-text').length > 0 && !item.hasClass('product-set-detail')) {
                    $('.wishlist-pdp-button', item).removeClass('pdpdeselect-wishlist').removeClass('pdpselect-wishlist').addClass('pdpdeselect-wishlist');
                    $('.wishlist-pdp-button', item).find('span.button-text').html(response.wishListedMsg);
                  }
                }
              });
            });
          }
        },
        error: function error(err) {// eslint-disable-line
          // do nothing
        }
      });
    }
  },
  makrSingleProductWishlisted: function makrSingleProductWishlisted(pid, $productContainer) {
    var singlewishlisturl = $('body').data('singlewishlisturl');

    if (pid && singlewishlisturl && $productContainer) {
      $.ajax({
        url: singlewishlisturl + '?pid=' + pid,
        success: function success(response) {
          // if qv
          if ($productContainer.hasClass('product-quickview') || $productContainer.hasClass('product-detail')) {
            $('.wishlistTile', $productContainer).removeClass('pdpdeselect-wishlist').addClass('pdpselect-wishlist'); // saks only change

            if ($('.wishlist-pdp-button', $productContainer).find('span.button-text').length > 0) {
              $('.wishlist-pdp-button', $productContainer).find('span.button-text').html(response.wishListMsg);
            } // saks only change


            if ($('.wishlist-pdp-button').length > 0) {
              $('.wishlist-pdp-button').removeClass('pdp-wishlist-clicked');
            }

            if (response.wishlisted) {
              $('.wishlistTile', $productContainer).removeClass('pdpselect-wishlist').addClass('pdpdeselect-wishlist'); // saks only change

              if ($('.wishlist-pdp-button', $productContainer).find('span.button-text').length > 0) {
                $('.wishlist-pdp-button', $productContainer).removeClass('pdpselect-wishlist').addClass('pdpdeselect-wishlist');
                $('.wishlist-pdp-button', $productContainer).find('span.button-text').html(response.wishListedMsg);
              }
            } else {
              // saks only change
              if ($('.wishlist-pdp-button', $productContainer).find('span.button-text').length > 0) {
                $('.wishlist-pdp-button', $productContainer).removeClass('pdpdeselect-wishlist').addClass('pdpselect-wishlist');
              }
            }
          } else if ($productContainer.hasClass('product-tile') || $productContainer.hasClass('product')) {
            removeWishlistedClass($productContainer);

            if (response.wishlisted) {
              addWishlistedClass($productContainer);
            }
          }
        },
        error: function error(err) {// eslint-disable-line
          // do nothing
        }
      });
    }
  }
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/storeLocator/storeLocator.js":
/*!****************************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/storeLocator/storeLocator.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* globals google */


var base = __webpack_require__(/*! base/storeLocator/storeLocator */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/storeLocator/storeLocator.js");
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Uses google maps api to render a map
 */


function maps() {
  var map;
  var infowindow = new google.maps.InfoWindow(); // Init U.S. Map in the center of the viewport

  var latlng = new google.maps.LatLng(37.09024, -95.712891);
  var mapOptions = {
    scrollwheel: false,
    zoom: 4,
    center: latlng
  };
  map = new google.maps.Map($('.map-canvas')[0], mapOptions);
  var mapdiv = $('.map-canvas').attr('data-locations');
  mapdiv = JSON.parse(mapdiv);
  var bounds = new google.maps.LatLngBounds(); // Customized google map marker icon with svg format

  var markerImg = {
    path: 'M13.5,30.1460153 L16.8554555,25.5 L20.0024287,25.5 C23.039087,25.5 25.5,' + '23.0388955 25.5,20.0024287 L25.5,5.99757128 C25.5,2.96091298 23.0388955,0.5 ' + '20.0024287,0.5 L5.99757128,0.5 C2.96091298,0.5 0.5,2.96110446 0.5,5.99757128 ' + 'L0.5,20.0024287 C0.5,23.039087 2.96110446,25.5 5.99757128,25.5 L10.1445445,' + '25.5 L13.5,30.1460153 Z',
    fillColor: '#0070d2',
    fillOpacity: 1,
    scale: 1.1,
    strokeColor: 'white',
    strokeWeight: 1,
    anchor: new google.maps.Point(13, 30),
    labelOrigin: new google.maps.Point(12, 12)
  };
  Object.keys(mapdiv).forEach(function (key) {
    var item = mapdiv[key];
    var lable = parseInt(key, 10) + 1;
    var storeLocation = new google.maps.LatLng(item.latitude, item.longitude);
    var marker = new google.maps.Marker({
      position: storeLocation,
      map: map,
      title: item.name,
      icon: markerImg,
      label: {
        text: lable.toString(),
        color: 'white',
        fontSize: '16px'
      }
    });
    marker.addListener('click', function () {
      infowindow.setOptions({
        content: item.infoWindowHtml
      });
      infowindow.open(map, marker);
    }); // Create a minimum bound based on a set of storeLocations

    bounds.extend(marker.position);
  }); // Fit the all the store marks in the center of a minimum bounds when any store has been found.

  if (mapdiv && mapdiv.length !== 0) {
    map.fitBounds(bounds);
  }
}
/**
 * Renders the results of the search and updates the map
 * @param {Object} data - Response from the server
 */


function updateStoresResults(data) {
  var $resultsDiv = $('.results');
  var $mapDiv = $('.map-canvas');
  var hasResults = data.stores.length > 0;

  if (!hasResults) {
    $('.store-locator-no-results').show();
  } else {
    $('.store-locator-no-results').hide();
  }

  $resultsDiv.empty().data('has-results', hasResults).data('radius', data.radius).data('search-key', data.searchKey);
  $mapDiv.attr('data-locations', data.locations);

  if ($mapDiv.data('has-google-api')) {
    maps();
  } else {
    $('.store-locator-no-apiKey').show();
  }

  if (data.storesResultsHtml) {
    $resultsDiv.append(data.storesResultsHtml);
  }
}
/**
 * Search for stores with new zip code
 * @param {HTMLElement} element - the target html element
 * @returns {boolean} false to prevent default event
 */


function search(element) {
  var dialog = element.closest('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  spinner.start();
  var $form = element.closest('.store-locator');
  var radius = $('#inStoreInventoryModal').find('#radius option:selected').text();

  if (radius !== undefined && radius.length) {
    radius = radius.split(' ')[0];
  }

  var url = $form.attr('action');
  var urlParams = {
    radius: radius
  };
  var payload = $form.is('form') ? $form.serialize() : {
    postalCode: $form.find('[name="postalCode"]').val()
  }; // extra payload carrying the product ids with quantity in json serialized

  if (element.data('products') && element.data('products') !== undefined && element.data('products') !== 'null' && element.data('products').indexOf('undefined') === -1) {
    payload.products = element.data('products');
  }

  url = appendToUrl(url, urlParams);
  $.ajax({
    url: url,
    type: $form.attr('method'),
    data: payload,
    dataType: 'json',
    success: function success(data) {
      spinner.stop();

      if ($('body').find('.product-detail').length) {
        $('body').trigger('adobe:bopusSearch', data);
      }

      if ($('body').find('.prdt-cart-details').length) {
        var pid = $('.btn-storelocator-search').data('search-pid');
        data.pid = pid;
        $('body').trigger('adobe:bopusCartSearch', data);
      }

      updateStoresResults(data);
      $('.select-store').prop('disabled', true);
    }
  });
  return false;
}
/**
 * CUSTOM EVENT TRIGGER
 * trigger a custom event when store is selected on the store locator modal
 */


base.selectStore = function () {
  $('.store-locator-container').on('click', '.select-store', function (e) {
    e.preventDefault();
    var selectedStore = $(':checked', '.results-card .results');
    var data = {
      storeID: selectedStore.val(),
      searchRadius: $('#radius').val(),
      searchPostalCode: $('.results').data('search-key').postalCode,
      storeDetailsHtml: selectedStore.siblings('label').find('.store-details').html(),
      storeDistance: selectedStore.data('store-distance') !== undefined ? selectedStore.data('store-distance') : '',
      event: e
    };
    /** ** CUSTOM EVENT TRIGGER ****/

    if ($('.btn-storelocator-search').data('product-pliuuid') !== undefined && $('.btn-storelocator-search').data('product-pliuuid') !== 'null') {
      // store select cart
      if ($('.btn-storelocator-search').data('shipto-selected') === 'shipto') {
        // update pli with store info if 'Ship to' is toggled
        data.pliUUID = $('.btn-storelocator-search').data('product-pliuuid');
        data.storeName = selectedStore.data('store-info') !== undefined ? selectedStore.data('store-info').name : null;
        data.inStoreFieldLabel = $('.btn-storelocator-search').data('instorefieldlabel');
        data.storeId = selectedStore.val();
        data.prodid = $('.btn-storelocator-search').data('search-pid');
        $('body').trigger('store:changeStore', data);
      } else if ($('.btn-storelocator-search').data('shipto-selected') === 'instore') {
        // // update pli with store info if 'Pick up in store' is toggled
        data.storeId = selectedStore.val();
        data.pliUUID = $('.btn-storelocator-search').data('product-pliuuid');
        data.url = $('.cart-options').data('toggle-url');
        data.savefromModal = true;
        data.selected = 'instore';
        data.prodid = $('.btn-storelocator-search').data('search-pid');
        $('body').trigger('store:cart', data);

        if ($('.btn-storelocator-search').closest('.prdt-cart-details').length) {
          $('body').trigger('adobe:bopusCartSelect', data);
        }
      }
    } else if ($('.btn-storelocator-search').data('source') === 'search') {
      // store select search page
      data.url = $('.store-refine').data('storeurl');
      data.name = selectedStore.data('store-info').name;
      $('body').trigger('store:selectedSearch', data);
    } else {
      // store select PDP
      $('body').trigger('store:selected', data);
    }
  });
};
/**
 * CLICK AND SUBMIT EVENT
 * event handler triggered with store search on store locator modal
 */


base.search = function () {
  $('.store-locator-container form.store-locator').submit(function (e) {
    e.preventDefault();
    search($(this));
  });
  $('.store-locator-container .btn-storelocator-search[type="button"]').click(function (e) {
    e.preventDefault();
    var input = $('#inStoreInventoryModal').find('#store-postal-code');
    var inputVal = input.val(); // Some special characters to be allowed for City Search. SFDEV-7932

    var validate = /^[a-zA-ZÃÃ£Ã®Ã©Ã¨ÃªÃ´'Â¨.0-9- ]*$/.test(inputVal) === false;

    if (validate) {
      $('#inStoreInventoryModal').find('.store-locator').addClass('error');
      var formData = {};
      formData.errorFields = ['postalCode'];
      formData.formName = 'bopus search';
      $('body').trigger('adobeTagManager:formError', formData);
    } else if (inputVal === '') {
      $('#inStoreInventoryModal').find('.store-locator').addClass('error');
      input.focus();
      var formData = {};
      formData.errorFields = ['postalCode'];
      formData.formName = 'bopus search';
      $('body').trigger('adobeTagManager:formError', formData);
    } else {
      search($(this));
      $('#inStoreInventoryModal').find('.store-locator').removeClass('error');
    }
  });
};

base.changeRadius = function () {
  $('.store-locator-container .radius').change(function () {// do nothing
  });
};

base.updateSelectStoreButton = function () {
  $('body').on('change', '.select-store-input', function () {
    var storeInfo = $(this).data('store-info');

    if (storeInfo && storeInfo != '' && storeInfo.availabilityMessage && storeInfo.availabilityMessage != '' && storeInfo.availabilityMessage.indexOf('Not') > -1) {
      $('.select-store').prop('disabled', true);
    } else {
      $('.select-store').prop('disabled', false);
    }
  });
};

module.exports = base;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/tooltip.js":
/*!**********************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/tooltip.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createPopper = __webpack_require__(/*! @popperjs/core */ "../hbc_core/node_modules/@popperjs/core/lib/index.js"); // allow specific tooltip reinit without taxing entire DOM


function tooltipIterator(toggletip) {
  var trigger;
  var content;
  var liveRegion;
  var arrow;
  var liveRegionContent;
  var popperInstance;

  if (toggletip.dataset.initialized) {
    return;
  }

  trigger = toggletip.querySelector('button.tooltip-info, .tooltip-btn');
  content = toggletip.querySelector('.tooltip-content');
  liveRegion = toggletip.querySelector('div[role="status"]'); // eslint-disable-next-line no-param-reassign

  toggletip.dataset.initialized = true;

  if (!trigger || !content) {
    return;
  }

  if (!liveRegion && trigger) {
    liveRegion = document.createElement('div');
    liveRegion.setAttribute('role', 'status');
    trigger.insertAdjacentElement('afterend', liveRegion);
  }

  liveRegion.style.display = 'none';
  /* Add an element for the arrow */

  arrow = document.createElement('div');
  arrow.dataset.popperArrow = true;
  liveRegionContent = document.createElement('div');
  liveRegionContent.classList.add('content');
  liveRegion.insertAdjacentElement('beforeend', liveRegionContent);
  liveRegion.insertAdjacentElement('beforeend', arrow);
  /* Handle dynamic positioning */

  popperInstance = createPopper.createPopper(toggletip, liveRegion, {
    placement: 'top',
    modifiers: [{
      name: 'arrow',
      options: {
        element: arrow,
        padding: 2
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 12]
      }
    }, {
      name: 'computeStyles',
      options: {
        gpuAcceleration: false // true here was causing some intermittent horizontal scrolling on smaller screens

      }
    }]
  });
  /**
   * Closes the tooltip
   */

  function closeTooltip() {
    liveRegion.style.display = 'none';
    liveRegionContent.innerHTML = '';
    trigger.dataset.tooltipOpen = false;
    document.removeEventListener('click', checkForOutsideClick);
    $('body').hasClass('tooltipOpened') ? $('body').removeClass('tooltipOpened') : '';
  }
  /**
   * Checks for clicks outside the tooltip and closes them.
   * @param {Event} e The click event
   */


  function checkForOutsideClick(e) {
    if (!toggletip.contains(e.target)) {
      closeTooltip();
    }
  } // Toggle the message


  if (trigger) {
    var eventType = $(trigger).hasClass('saks-tooltip-info') ? 'mouseenter' : 'click';
    var isRewardPointsTooltip = $(trigger).closest('.saks-first-card.bfx-remove-element').length != 0;

    if ($(trigger).hasClass('saks-tooltip-info') && !isRewardPointsTooltip) {
      trigger.addEventListener('mouseleave', function () {
        closeTooltip();
      });
    }

    trigger.addEventListener(eventType, function () {
      // Close the tooltip if it is open
      if (trigger.dataset.tooltipOpen === 'true') {
        closeTooltip();
        return;
      } // Populate the tooltip.


      liveRegionContent.innerHTML = '';
      window.setTimeout(function () {
        liveRegionContent.innerHTML = '<div class="tooltip-content">' + content.innerHTML + '</div>';
        document.addEventListener('click', checkForOutsideClick);
        liveRegion.style.display = 'block';
        popperInstance.update();
      }, 100);
      trigger.dataset.tooltipOpen = true;
      $('body').addClass('tooltipOpened');
    });
  } // Remove toggletip on ESC


  if (trigger) {
    toggletip.addEventListener('keydown', function (e) {
      if ((e.keyCode || e.which) === 27) {
        liveRegion.innerHTML = '';
      }
    });
  }
}
/**
 * Initialize tooltip.
 */


function tooltipInit() {
  $('html.veiled').removeAttr('style'); // Get all the toggletip buttons

  var toggletips = document.querySelectorAll('.custom-tooltip'); // Iterate over them

  Array.prototype.forEach.call(toggletips, tooltipIterator);
}

module.exports = {
  tooltipInit: tooltipInit
};

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTouchscreen.js":
/*!*********************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTouchscreen.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Detects whether or not a user has a touchscreen as best we can figure.
 * Borrowed from https://patrickhlauke.github.io/touch/touchscreen-detection/
 * See that page for caveats
 * @return {boolean} True if touchscreen is detected, otherwise false
 */
var isTouchscreen = function isTouchscreen() {
  if (window.PointerEvent && 'maxTouchPoints' in navigator) {
    if (navigator.maxTouchPoints > 0) {
      return true;
    }
  } else {
    // no Pointer Events...
    if (window.matchMedia && window.matchMedia('(any-pointer:coarse)').matches) {
      // check for any-pointer:coarse which mostly means touchscreen
      return true;
    } else if (window.TouchEvent || 'ontouchstart' in window) {
      // last resort - check for exposed touch events API / event handler
      return true;
    }
  }

  return false;
};

module.exports = isTouchscreen;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTsys.js":
/*!**************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTsys.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checkes if TSYS mode enabled
 *  @returns {boolean} - tsys mode
 */
function isTsysMode() {
  return !!document.querySelector('.tsys-mode[data-mode=true]');
}

module.exports = isTsysMode;

/***/ }),

/***/ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/loginPopup.js":
/*!******************************************************************************************!*\
  !*** ../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/loginPopup.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var login = __webpack_require__(/*! ../login/login */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/login/login.js");

var cookiesUtil = __webpack_require__(/*! ../components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");

var isTsysMode = __webpack_require__(/*! ./isTsys */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTsys.js");
/**
 * Generates the modal window on the first call.
 *
 * @param {Object} data - render data
 */


function appendModalHtmlElement(data) {
  if ($('#signInApplyModal').length !== 0) {
    $('#signInApplyModal').empty();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal-dialog">' + '<div class="modal-content">' + '<div class="modal-body">' + '<div class="cancel-icon">' + '<button type="button" class="close svg-svg-22-cross svg-svg-22-cross-dims" data-dismiss="modal" aria-label="Close Modal Box"></button>' + '</div>' + '<div class="no-gutters modal-row align-items-start modal-contents">' + '<div class="modal-column">' + data + '</div>' + '</div>' + '</div>' + '</div>' + '</div>';

  if ($(document).find('#signInApplyModal').length) {
    $(document).find('#signInApplyModal').append(htmlString);
  }
}
/**
 * open login model
 * @param {string} url url to be open with
 */


function openLoginPopup(url) {
  $('body').spinner().start();
  $.ajax({
    url: url,
    dataType: 'html',
    success: function success(data) {
      if (data.redirect) {
        window.location.href = data.redirect;
      } else {
        appendModalHtmlElement(data);
        login.login();
        login.showPassword();
        $('#signInApplyModal').modal('hide');
        setTimeout(function () {
          $('body').spinner().stop();
          $('#signInApplyModal').modal('show');
        }, 200);
      }
    },
    error: function error() {
      $('body').spinner().stop();
    }
  });
}
/**
 * init for SignIn Model
 */


function initSignIn() {
  // TSYS: Remove the href value from links that should open the modal sign in window.
  // This is a temporary fix until the content asset is updated.
  if (isTsysMode()) {
    var saksApplyLinks = document.querySelectorAll('.js-apply-for-saks');

    if (saksApplyLinks) {
      Array.prototype.slice.call(saksApplyLinks).forEach(function (link) {
        if (link.hasAttribute('href')) {
          link.removeAttribute('href');
        }
      });
    }
  }

  $('body').on('click', '.js-apply-for-saks', function (event) {
    event.preventDefault();

    if (cookiesUtil.getCookie('bfx.country') === 'US') {
      if (isTsysMode()) {
        openLoginPopup($(this).data('url'));
      } else {
        window.open('https://saks.capitalonecards.com/#/apply');
      }
    }
  });
}
/**
 * Overrides for content assets
 */


function contentOverride() {
  // TSYS: Replace the original href with the TSYS value.
  // This is a temporary fix until the content asset is updated.
  if (isTsysMode()) {
    var footer = document.querySelector('.footer-apply-for-saks');

    if (footer && footer.getAttribute('data-url')) {
      footer.setAttribute('href', footer.getAttribute('data-url'));
    }
  }
}

module.exports = {
  initSignIn: initSignIn,
  contentOverride: contentOverride
};

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/createPopper.js":
/*!*******************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/createPopper.js ***!
  \*******************************************************************/
/*! exports provided: popperGenerator, createPopper, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return popperGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/debounce.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/mergeByName.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__["isElement"])(reference) ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference) : reference.contextElement ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference.contextElement) : [],
          popper: Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = Object(_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(Object(_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = Object(_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          Object(_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__["default"])(modifiers);

          if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_13__["auto"]) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update â it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: Object(_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(reference, Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper), state.options.strategy === 'fixed'),
          popper: Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update â it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: Object(_utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!*************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return contains; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__["isShadowRoot"])(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!**************************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBoundingClientRect; });
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getClippingRect; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getViewportRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./listScrollParents.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getOffsetParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getParentNode.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contains.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element) {
  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_0__["viewport"] ? Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__["default"])(Object(_getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) : Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isHTMLElement"])(clippingParent) ? getInnerBoundingClientRect(clippingParent) : Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__["default"])(Object(_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = Object(_listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isHTMLElement"])(element) ? Object(_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__["default"])(element) : element;

  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isElement"])(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isElement"])(clippingParent) && Object(_contains_js__WEBPACK_IMPORTED_MODULE_10__["default"])(clippingParent, clipperElement) && Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["max"])(rect.top, accRect.top);
    accRect.right = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["min"])(rect.right, accRect.right);
    accRect.bottom = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["min"])(rect.bottom, accRect.bottom);
    accRect.left = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["max"])(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!*********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getCompositeRect; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeScroll.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isScrollParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");






 // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent);
  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(elementOrVirtualElement);
  var isOffsetParentAnElement = Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(documentElement)) {
      scroll = Object(_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent);
    }

    if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(offsetParent)) {
      offsets = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!*********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getComputedStyle; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!***********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getDocumentElement; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__["isElement"])(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getDocumentRect; });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScroll.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/math.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);
  var y = -winScroll.scrollTop;

  if (Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body || html).direction === 'rtl') {
    x += Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!*************************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getHTMLElementScroll; });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getLayoutRect; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!****************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getNodeName; });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getNodeScroll; });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindowScroll.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(node) || !Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_2__["isHTMLElement"])(node)) {
    return Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  } else {
    return Object(_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOffsetParent; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTableElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getParentNode.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");







function getTrueOffsetParent(element) {
  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(element) || // https://github.com/popperjs/popper-core/issues/837
  Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element);

  while (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(currentNode) && ['html', 'body'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode)) < 0) {
    var css = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && Object(_isTableElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent) === 'html' || Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent) === 'body' && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getParentNode; });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_2__["isShadowRoot"])(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getScrollParent; });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getParentNode.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isScrollParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(node) && Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(node)) {
    return node;
  }

  return getScrollParent(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node));
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getViewportRect; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



function getViewportRect(element) {
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!**************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindow; });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindowScroll; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!************************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindowScrollBarX; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!***************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \***************************************************************************/
/*! exports provided: isElement, isHTMLElement, isShadowRoot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return isElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHTMLElement", function() { return isHTMLElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isShadowRoot", function() { return isShadowRoot; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return isScrollParent; });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return isTableElement; });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!**********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \**********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return listScrollParents; });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getParentNode.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isScrollParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = Object(_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_1__["default"])(target)));
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/enums.js":
/*!************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/enums.js ***!
  \************************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "top", function() { return top; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bottom", function() { return bottom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function() { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function() { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return auto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "basePlacements", function() { return basePlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "start", function() { return start; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "end", function() { return end; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clippingParents", function() { return clippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewport", function() { return viewport; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "popper", function() { return popper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reference", function() { return reference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variationPlacements", function() { return variationPlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "placements", function() { return placements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeRead", function() { return beforeRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "read", function() { return read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterRead", function() { return afterRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeMain", function() { return beforeMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterMain", function() { return afterMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeWrite", function() { return beforeWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "write", function() { return write; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterWrite", function() { return afterWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifierPhases", function() { return modifierPhases; });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/index.js":
/*!************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/index.js ***!
  \************************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases, applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow, popperGenerator, detectOverflow, createPopperBase, createPopper, createPopperLite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "top", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bottom", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "right", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "left", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["auto"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basePlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["basePlacements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "start", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "end", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["end"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clippingParents", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["clippingParents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "viewport", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["viewport"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popper", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["popper"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reference", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["reference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variationPlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["variationPlacements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "placements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["placements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "read", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["read"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "main", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["main"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "write", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["write"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modifierPhases", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["modifierPhases"]; });

/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/index.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["applyStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["arrow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["computeStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["eventListeners"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["flip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["hide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["offset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["popperOffsets"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["preventOverflow"]; });

/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPopper.js */ "../hbc_core/node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["detectOverflow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperBase", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["createPopper"]; });

/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popper.js */ "../hbc_core/node_modules/@popperjs/core/lib/popper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return _popper_js__WEBPACK_IMPORTED_MODULE_3__["createPopper"]; });

/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popper-lite.js */ "../hbc_core/node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperLite", function() { return _popper_lite_js__WEBPACK_IMPORTED_MODULE_4__["createPopper"]; });


 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!****************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__["isHTMLElement"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__["isHTMLElement"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!**********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/contains.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/within.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return Object(_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__["default"])(typeof padding !== 'number' ? padding : Object(_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_8__["basePlacements"]));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.placement);
  var axis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_8__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_8__["right"]].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__["left"];
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__["right"];
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_5__["default"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__["isHTMLElement"])(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!Object(_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \******************************************************************************/
/*! exports provided: mapToStyles, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapToStyles", function() { return mapToStyles; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/math.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js");






 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(x * dpr) / dpr) || 0,
    y: Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"];
  var win = window;

  if (adaptive) {
    var offsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)) {
      offsetParent = Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper);

      if (Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"]) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"]; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"]; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!*********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getVariation.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["auto"]) {
    return [];
  }

  var oppositePlacement = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  return [Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement), oppositePlacement, Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["auto"] ? Object(_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);

    var isStartVariation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["start"];
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["right"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["left"] : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["top"];

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(mainVariationSide);
    }

    var altVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases â research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!*********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/index.js":
/*!**********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \**********************************************************************/
/*! exports provided: applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!***********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \***********************************************************************/
/*! exports provided: distanceAndSkiddingToXY, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distanceAndSkiddingToXY", function() { return distanceAndSkiddingToXY; });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_1__["top"]].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_1__["right"]].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__["placements"].reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = Object(_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/within.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/getVariation.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(basePlacement);
  var altAxis = Object(_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"];
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"] ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"] ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : Object(_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["min"])(min, tetherMin) : min, offset, tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["max"])(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];

      var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"];

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["min"])(_min, tetherMin) : _min, _offset, tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["max"])(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/popper-lite.js":
/*!******************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/popper-lite.js ***!
  \******************************************************************/
/*! exports provided: createPopper, popperGenerator, defaultModifiers, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultModifiers", function() { return defaultModifiers; });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createPopper.js */ "../hbc_core/node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["detectOverflow"]; });

/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__["default"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/popper.js":
/*!*************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/popper.js ***!
  \*************************************************************/
/*! exports provided: createPopper, popperGenerator, defaultModifiers, detectOverflow, createPopperLite, applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultModifiers", function() { return defaultModifiers; });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createPopper.js */ "../hbc_core/node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["detectOverflow"]; });

/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/offset.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/flip.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/arrow.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modifiers/hide.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./popper-lite.js */ "../hbc_core/node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperLite", function() { return _popper_lite_js__WEBPACK_IMPORTED_MODULE_10__["createPopper"]; });

/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modifiers/index.js */ "../hbc_core/node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["applyStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["arrow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["computeStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["eventListeners"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["flip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["hide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["offset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["popperOffsets"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["preventOverflow"]; });











var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__["default"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!*********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return computeAutoPlacement; });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getVariation.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_1__["placements"] : _options$allowedAutoP;
  var variation = Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_1__["variationPlacements"] : _enums_js__WEBPACK_IMPORTED_MODULE_1__["variationPlacements"].filter(function (placement) {
    return Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_1__["basePlacements"];
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = Object(_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!***************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return computeOffsets; });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["top"]:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["bottom"]:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["right"]:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["left"]:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? Object(_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_3__["start"]:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_3__["end"]:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/debounce.js":
/*!*********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return debounce; });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!***************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return detectOverflow; });
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./computeOffsets.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rectToClientRect.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "../hbc_core/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mergePaddingObject.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./expandToHashMap.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["clippingParents"] : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["viewport"] : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = Object(_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])(typeof padding !== 'number' ? padding : Object(_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_5__["basePlacements"]));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["reference"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"];
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = Object(_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__["isElement"])(element) ? element : element.contextElement || Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = Object(_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(referenceElement);
  var popperOffsets = Object(_computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = Object(_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["right"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!****************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return expandToHashMap; });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/format.js":
/*!*******************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/format.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return format; });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!***********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getAltAxis; });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*****************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBasePlacement; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getFreshSideObject; });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!*************************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getMainAxisFromPlacement; });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!*********************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOppositePlacement; });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!******************************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOppositeVariationPlacement; });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!*************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getVariation; });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js":
/*!*****************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/math.js ***!
  \*****************************************************************/
/*! exports provided: max, min, round */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mergeByName; });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mergePaddingObject; });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, Object(_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!***************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return orderModifiers; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__["modifierPhases"].reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*****************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rectToClientRect; });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!*********************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return uniqueBy; });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!******************************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return validateModifiers; });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "../hbc_core/node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__["modifierPhases"].indexOf(modifier.phase) < 0) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__["modifierPhases"].join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "../hbc_core/node_modules/@popperjs/core/lib/utils/within.js":
/*!*******************************************************************!*\
  !*** ../hbc_core/node_modules/@popperjs/core/lib/utils/within.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return within; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "../hbc_core/node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return Object(_math_js__WEBPACK_IMPORTED_MODULE_0__["max"])(min, Object(_math_js__WEBPACK_IMPORTED_MODULE_0__["min"])(value, max));
}

/***/ }),

/***/ "../plugin_instorepickup/cartridges/plugin_instorepickup/cartridge/client/default/js/product/pdpInstoreInventory.js":
/*!**************************************************************************************************************************!*\
  !*** ../plugin_instorepickup/cartridges/plugin_instorepickup/cartridge/client/default/js/product/pdpInstoreInventory.js ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var storeLocator = __webpack_require__(/*! base/storeLocator/storeLocator */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/storeLocator/storeLocator.js");
/**
 * Restores Quantity Selector to its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function restoreQuantityOptions($quantitySelect) {
  var originalHTML = $quantitySelect.data('originalHTML');

  if (originalHTML) {
    $quantitySelect.html(originalHTML);
  }
}
/**
 * Sets the data attribute of Quantity Selector to save its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function setOriginalQuantitySelect($quantitySelect) {
  if (!$quantitySelect.data('originalHTML')) {
    $quantitySelect.data('originalHTML', $quantitySelect.html());
  } // If it's already there, don't re-set it

}
/**
 * Updates the Quantity Selector based on the In Store Quantity.
 * @param {string} quantitySelector - Quantity Selector
 * @param {string} quantityOptionSelector - Quantity Option Selector
 * @param {number} productAtsValue - Inventory in the selected store
 */


function updateQOptions(quantitySelector, quantityOptionSelector, productAtsValue) {
  var selectedQuantity = $(quantitySelector).val();
  restoreQuantityOptions($(quantitySelector));

  for (var i = $(quantityOptionSelector).length - 1; i >= productAtsValue; i--) {
    $(quantityOptionSelector).eq(i).remove();
  }

  $(quantitySelector + ' option[value="' + selectedQuantity + '"]').attr('selected', 'selected');
}
/**
 * Generates the modal window on the first call.
 */


function getModalHtmlElement() {
  if ($('#inStoreInventoryModal').length !== 0) {
    $('#inStoreInventoryModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal " id="inStoreInventoryModal" role="dialog" aria-modal="true">' + '<div class="modal-dialog in-store-inventory-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header justify-content-end">' + '    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close inventory modal" title="' + $('.btn-get-in-store-inventory').data('modal-close-text') + '">' + // eslint-disable-line
  '        &times;' + '    </button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('#inStoreInventoryModal').modal('show');
}
/**
 * Replaces the content in the modal window with find stores components and
 * the result store list.
 * @param {string} pid - The product ID to search for
 * @param {number} quantity - Number of products to search inventory for
 * @param {number} selectedPostalCode - The postal code to search for inventory
 * @param {number} selectedRadius - The radius to search for inventory
 */


function fillModalElement(pid, quantity, selectedPostalCode, selectedRadius) {
  var requestData = {
    products: pid + ':' + quantity
  };

  if (selectedRadius) {
    requestData.radius = selectedRadius;
  }

  if (selectedPostalCode) {
    requestData.postalCode = selectedPostalCode;
  }

  $('#inStoreInventoryModal').spinner().start();
  $.ajax({
    url: $('.btn-get-in-store-inventory').data('action-url'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      $('.modal-body').empty();
      $('.modal-body').html(response.storesResultsHtml);
      storeLocator.search();
      storeLocator.changeRadius();
      storeLocator.selectStore();
      storeLocator.updateSelectStoreButton();
      $('.btn-storelocator-search').attr('data-search-pid', pid);

      if (selectedRadius) {
        $('#radius').val(selectedRadius);
      }

      if (selectedPostalCode) {
        $('#store-postal-code').val(selectedPostalCode);
      }

      if (!$('.results').data('has-results')) {
        $('.store-locator-no-results').show();
      }

      $('#inStoreInventoryModal').modal('show');
      $('#inStoreInventoryModal').spinner().stop();
    },
    error: function error() {
      $('#inStoreInventoryModal').spinner().stop();
    }
  });
}
/**
 * Remove the selected store.
 * @param {HTMLElement} $container - the target html element
 */


function deselectStore($container) {
  var storeElement = $($container).find('.selected-store-with-inventory');
  $(storeElement).find('.card-body').empty();
  $(storeElement).addClass('display-none');
  $($container).find('.btn-get-in-store-inventory').show();
  $($container).find('.quantity-select').removeData('originalHTML');
}
/**
 * Update quantity options. Only display quantity options that are available for the store.
 * @param {sring} searchPID - The product ID of the selected product.
 * @param {number} storeId - The store ID selected for in store pickup.
 */


function updateQuantityOptions(searchPID, storeId) {
  var selectorPrefix = '.product-detail[data-pid="' + searchPID + '"]';
  var productIdSelector = selectorPrefix + ' .product-id';
  var quantitySelector = selectorPrefix + ' .quantity-select';
  var quantityOptionSelector = quantitySelector + ' option';
  setOriginalQuantitySelect($(quantitySelector));
  var requestData = {
    pid: $(productIdSelector).text(),
    quantitySelected: $(quantitySelector).val(),
    storeId: storeId
  };
  $.ajax({
    url: $('.btn-get-in-store-inventory').data('ats-action-url'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      // Update Quantity dropdown, Remove quantity greater than inventory
      var productAtsValue = response.atsValue;
      var availabilityValue = '';
      var $productContainer = $('.product-detail[data-pid="' + searchPID + '"]');

      if (!response.product.readyToOrder) {
        availabilityValue = '<div>' + response.resources.info_selectforstock + '</div>';
      } else {
        response.product.messages.forEach(function (message) {
          availabilityValue += '<div>' + message + '</div>';
        });
      }

      $($productContainer).trigger('product:updateAvailability', {
        product: response.product,
        $productContainer: $productContainer,
        message: availabilityValue,
        resources: response.resources
      });
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      });
      updateQOptions(quantitySelector, quantityOptionSelector, productAtsValue);
    }
  });
}

module.exports = {
  updateSelectStore: function updateSelectStore() {
    $('body').on('product:updateAddToCart', function (e, response) {
      $('.btn-get-in-store-inventory', response.$productContainer).attr('disabled', !response.product.readyToOrder || !response.product.available || !response.product.availableForInStorePickup);
    });
  },
  removeSelectedStoreOnAttributeChange: function removeSelectedStoreOnAttributeChange() {
    $('body').on('product:afterAttributeSelect', function (e, response) {
      response.container.attr('data-pid', response.data.product.id);
      deselectStore(response.container);
    });
  },
  updateAddToCartFormData: function updateAddToCartFormData() {
    $('body').on('updateAddToCartFormData', function (e, form) {
      if (form.pidsObj) {
        var pidsObj = JSON.parse(form.pidsObj);
        pidsObj.forEach(function (product) {
          var storeElement = $('.product-detail[data-pid="' + product.pid + '"]').find('.store-name');
          product.storeId = $(storeElement).length // eslint-disable-line no-param-reassign
          ? $(storeElement).attr('data-store-id') : null;
        });
        form.pidsObj = JSON.stringify(pidsObj); // eslint-disable-line no-param-reassign
      }

      var storeElement = $('.product-detail[data-pid="' + form.pid + '"]');

      if ($(storeElement).length) {
        form.storeId = $(storeElement).find('.store-name') // eslint-disable-line
        .attr('data-store-id');
      }
    });
  },
  showInStoreInventory: function showInStoreInventory() {
    $('.btn-get-in-store-inventory').on('click', function (e) {
      var pid = $(this).closest('.product-detail').attr('data-pid');
      var quantity = $(this).closest('.product-detail').find('.quantity-select').val();
      getModalHtmlElement();
      fillModalElement(pid, quantity);
      e.stopPropagation();
    });
  },
  removeStoreSelection: function removeStoreSelection() {
    $('body').on('click', '#remove-store-selection', function () {
      deselectStore($(this).closest('.product-detail'));
      $(document).trigger('store:afterRemoveStoreSelection', $(this).closest('.product-detail').find('.quantity-select'));
    });
  },
  selectStoreWithInventory: function selectStoreWithInventory() {
    $('body').on('store:selected', function (e, data) {
      var searchPID = $('.btn-storelocator-search').attr('data-search-pid');
      var storeElement = $('.product-detail[data-pid="' + searchPID + '"]');
      $(storeElement).find('.selected-store-with-inventory .card-body').empty();
      $(storeElement).find('.selected-store-with-inventory .card-body').append(data.storeDetailsHtml);
      $(storeElement).find('.store-name').attr('data-store-id', data.storeID);
      $(storeElement).find('.selected-store-with-inventory').removeClass('display-none');
      var $changeStoreButton = $(storeElement).find('.change-store');
      $($changeStoreButton).data('postal', data.searchPostalCode);
      $($changeStoreButton).data('radius', data.searchRadius);
      $(storeElement).find('.btn-get-in-store-inventory').hide();
      updateQuantityOptions(searchPID, data.storeID);
      $('#inStoreInventoryModal').modal('hide');
      $('#inStoreInventoryModal').remove();
      $('#inStoreInventoryModal').attr('aria-modal', 'false');
    });
  },
  changeStore: function changeStore() {
    $('body').on('click', '.change-store', function () {
      var pid = $(this).closest('.product-detail').attr('data-pid');
      var quantity = $(this).closest('.product-detail').find('.quantity-select').val();
      getModalHtmlElement();
      fillModalElement(pid, quantity, $(this).data('postal'), $(this).data('radius'));
    });
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/clientSideValidation.js":
/*!*************************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/clientSideValidation.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Validate whole form. Requires `this` to be set to form object
 * @param {jQuery.event} event - Event to be canceled if form is invalid.
 * @returns {boolean} - Flag to indicate if form is valid
 */

function _validateForm(event) {
  var valid = true;

  if (this.checkValidity && !this.checkValidity()) {
    // safari
    valid = false;

    if (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    $(this).find('input, select').each(function () {
      if (!this.validity.valid) {
        $(this).trigger('invalid', this.validity);
      }
    });
  }

  return valid;
}
/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */


function clearForm(form) {
  $(form).find('.form-control.is-invalid').removeClass('is-invalid');
}

module.exports = {
  invalid: function invalid() {
    $('form input, form select').on('invalid', function (e) {
      e.preventDefault();
      this.setCustomValidity('');

      if (!this.validity.valid) {
        var validationMessage = this.validationMessage;
        $(this).addClass('is-invalid');

        if (this.validity.patternMismatch && $(this).data('pattern-mismatch')) {
          validationMessage = $(this).data('pattern-mismatch');
        }

        if ((this.validity.rangeOverflow || this.validity.rangeUnderflow) && $(this).data('range-error')) {
          validationMessage = $(this).data('range-error');
        }

        if ((this.validity.tooLong || this.validity.tooShort) && $(this).data('range-error')) {
          validationMessage = $(this).data('range-error');
        }

        if (this.validity.valueMissing && $(this).data('missing-error')) {
          validationMessage = $(this).data('missing-error');
        }

        $(this).parents('.form-group').find('.invalid-feedback').text(validationMessage);
      }
    });
  },
  submit: function submit() {
    $('form').on('submit', function (e) {
      return _validateForm.call(this, e);
    });
  },
  buttonClick: function buttonClick() {
    $('form button[type="submit"], form input[type="submit"]').on('click', function () {
      // clear all errors when trying to submit the form
      clearForm($(this).parents('form'));
    });
  },
  functions: {
    validateForm: function validateForm(form, event) {
      _validateForm.call($(form), event || null);
    },
    clearForm: clearForm
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/cookie.js":
/*!***********************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/cookie.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Get cookie value by cookie name from browser
 * @param {string} cookieName - name of the cookie
 * @returns {string} cookie value of the found cookie name
 */

function getCookie(cookieName) {
  var name = cookieName + '=';
  var decodedCookie = decodeURIComponent(document.cookie);
  var cookieArray = decodedCookie.split(';');

  for (var i = 0; i < cookieArray.length; i++) {
    var cookieItem = cookieArray[i];

    while (cookieItem.charAt(0) === ' ') {
      cookieItem = cookieItem.substring(1);
    }

    if (cookieItem.indexOf(name) === 0) {
      return cookieItem.substring(name.length, cookieItem.length);
    }
  }

  return '';
}

module.exports = function () {
  if ($('.valid-cookie-warning').length > 0) {
    var previousSessionID = window.localStorage.getItem('previousSid');
    var currentSessionID = getCookie('sid');

    if (!previousSessionID && currentSessionID) {
      // When a user first time visit the home page,
      // set the previousSessionID to currentSessionID
      // and Show the cookie alert
      previousSessionID = currentSessionID;
      window.localStorage.setItem('previousSid', previousSessionID);
      $('.cookie-warning-messaging').show();
    } else if (previousSessionID && previousSessionID === currentSessionID) {
      // Hide the cookie alert if user is in the same session
      $('.cookie-warning-messaging').hide();
    } else {
      // Clear the previousSessionID from localStorage
      // when user session is changed or expired
      previousSessionID = '';
      window.localStorage.removeItem('previousSid');
    }
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/countrySelector.js":
/*!********************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/countrySelector.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keyboardAccessibility = __webpack_require__(/*! ./keyboardAccessibility */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js");

module.exports = function () {
  $('.country-selector a').click(function (e) {
    e.preventDefault();
    var action = $('.page').data('action');
    var localeCode = $(this).data('locale');
    var localeCurrencyCode = $(this).data('currencycode');
    var queryString = $('.page').data('querystring');
    var url = $('.country-selector').data('url');
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      data: {
        code: localeCode,
        queryString: queryString,
        CurrencyCode: localeCurrencyCode,
        action: action
      },
      success: function success(response) {
        $.spinner().stop();

        if (response && response.redirectUrl) {
          window.location.href = response.redirectUrl;
        }
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  });
  keyboardAccessibility('.navbar-header .country-selector', {
    40: function _($countryOptions) {
      // down
      if ($(this).is(':focus')) {
        $countryOptions.first().focus();
      } else {
        $(':focus').next().focus();
      }
    },
    38: function _($countryOptions) {
      // up
      if ($countryOptions.first().is(':focus') || $(this).is(':focus')) {
        $(this).focus();
        $(this).removeClass('show');
      } else {
        $(':focus').prev().focus();
      }
    },
    27: function _() {
      // escape
      $(this).focus();
      $(this).removeClass('show').children('.dropdown-menu').removeClass('show');
    },
    9: function _() {
      // tab
      $(this).removeClass('show').children('.dropdown-menu').removeClass('show');
    }
  }, function () {
    if (!$(this).hasClass('show')) {
      $(this).addClass('show');
    }

    return $(this).find('.dropdown-country-selector').children('a');
  });
  $('.navbar-header .country-selector').on('focusin', function () {
    $(this).addClass('show').children('.dropdown-menu').addClass('show');
  });
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js":
/*!**********************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element, message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $(element).append(errorHtml);
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js":
/*!**********************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  setTabNextFocus: function setTabNextFocus(focusParams) {
    var KEYCODE_TAB = 9;
    var isTabPressed = focusParams.event.key === 'Tab' || focusParams.event.keyCode === KEYCODE_TAB;

    if (!isTabPressed) {
      return;
    }

    var firstFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.firstElementSelector);
    var lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.lastElementSelector);

    if ($(focusParams.containerSelector + ' ' + focusParams.lastElementSelector).is(':disabled')) {
      lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.nextToLastElementSelector);

      if ($('.product-quickview.product-set').length > 0) {
        var linkElements = $(focusParams.containerSelector + ' a#fa-link.share-icons');
        lastFocusableEl = linkElements[linkElements.length - 1];
      }
    }

    if (focusParams.event.shiftKey)
      /* shift + tab */
      {
        if ($(':focus').is(firstFocusableEl)) {
          lastFocusableEl.focus();
          focusParams.event.preventDefault();
        }
      } else
      /* tab */
      {
        if ($(':focus').is(lastFocusableEl)) {
          // eslint-disable-line
          firstFocusableEl.focus();
          focusParams.event.preventDefault();
        }
      }
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/formValidation.js":
/*!*******************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/formValidation.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Remove all validation. Should be called every time before revalidating form
 * @param {element} form - Form to be cleared
 * @returns {void}
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function clearFormErrors(form) {
  $(form).find('.form-control.is-invalid').removeClass('is-invalid');
}

module.exports = function (formElement, payload) {
  // clear form validation first
  clearFormErrors(formElement);
  $('.alert', formElement).remove();

  if (_typeof(payload) === 'object' && payload.fields) {
    Object.keys(payload.fields).forEach(function (key) {
      if (payload.fields[key]) {
        var feedbackElement = $(formElement).find('[name="' + key + '"]').parent().children('.invalid-feedback');

        if (feedbackElement.length > 0) {
          if (Array.isArray(payload[key])) {
            feedbackElement.html(payload.fields[key].join('<br/>'));
          } else {
            feedbackElement.html(payload.fields[key]);
          }

          feedbackElement.siblings('.form-control').addClass('is-invalid');
        }
      }
    });
  }

  if (payload && payload.error) {
    var form = $(formElement).prop('tagName') === 'FORM' ? $(formElement) : $(formElement).parents('form');
    form.prepend('<div class="alert alert-danger" role="alert">' + payload.error.join('<br/>') + '</div>');
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js":
/*!**************************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (selector, keyFunctions, preFunction) {
  $(selector).on('keydown', function (e) {
    var key = e.which;
    var supportedKeyCodes = [37, 38, 39, 40, 27];

    if (supportedKeyCodes.indexOf(key) >= 0) {
      e.preventDefault();
    }

    var returnedScope = preFunction.call(this);

    if (keyFunctions[key]) {
      keyFunctions[key].call(this, returnedScope);
    }
  });
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!******************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (element) {
  var position = element && element.length ? element.offset().top : 0;
  $('html, body').animate({
    scrollTop: position
  }, 500);

  if (!element) {
    $('.logo-home').focus();
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/spinner.js":
/*!************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/spinner.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Show a spinner inside a given element
 * @param {element} $target - Element to block by the veil and spinner.
 *                            Pass body to block the whole page.
 */

function addSpinner($target) {
  var $veil = $('<div class="veil"><div class="underlay"></div></div>');
  $veil.append('<div class="spinner"><div class="dot1"></div><div class="dot2"></div></div>');

  if ($target.get(0).tagName === 'IMG') {
    $target.after($veil);
    $veil.css({
      width: $target.width(),
      height: $target.height()
    });

    if ($target.parent().css('position') === 'static') {
      $target.parent().css('position', 'relative');
    }
  } else {
    $target.append($veil);

    if ($target.css('position') === 'static') {
      $target.parent().css('position', 'relative');
      $target.parent().addClass('veiled');
    }

    if ($target.get(0).tagName === 'BODY') {
      $veil.find('.spinner').css('position', 'fixed');
    }
  }

  $veil.click(function (e) {
    e.stopPropagation();
  });
}
/**
 * Remove existing spinner
 * @param  {element} $veil - jQuery pointer to the veil element
 */


function removeSpinner($veil) {
  if ($veil.parent().hasClass('veiled')) {
    $veil.parent().css('position', '');
    $veil.parent().removeClass('veiled');
  }

  $veil.off('click');
  $veil.remove();
} // element level spinner:


$.fn.spinner = function () {
  var $element = $(this);

  var Fn = function Fn() {
    this.start = function () {
      if ($element.length) {
        addSpinner($element);
      }
    };

    this.stop = function () {
      if ($element.length) {
        var $veil = $('.veil');
        removeSpinner($veil);
      }
    };
  };

  return new Fn();
}; // page-level spinner:


$.spinner = function () {
  var Fn = function Fn() {
    this.start = function () {
      addSpinner($('body'));
    };

    this.stop = function () {
      removeSpinner($('.veil'));
    };
  };

  return new Fn();
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/toolTip.js":
/*!************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/toolTip.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  $('.info-icon').on('mouseenter focusin', function () {
    $(this).find('.tooltip').removeClass('d-none');
  });
  $('.info-icon').on('mouseleave focusout', function () {
    $(this).find('.tooltip').addClass('d-none');
  });
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/login/login.js":
/*!*****************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/login/login.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formValidation = __webpack_require__(/*! ../components/formValidation */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/formValidation.js");

var createErrorNotification = __webpack_require__(/*! ../components/errorNotification */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js");

module.exports = {
  login: function login() {
    $('form.login').submit(function (e) {
      var form = $(this);
      e.preventDefault();
      var url = form.attr('action');
      form.spinner().start();
      $('form.login').trigger('login:submit', e);
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: form.serialize(),
        success: function success(data) {
          form.spinner().stop();

          if (!data.success) {
            formValidation(form, data);
            $('form.login').trigger('login:error', data);
          } else {
            $('form.login').trigger('login:success', data);
            location.href = data.redirectUrl;
          }
        },
        error: function error(data) {
          if (data.responseJSON.redirectUrl) {
            window.location.href = data.responseJSON.redirectUrl;
          } else {
            $('form.login').trigger('login:error', data);
            form.spinner().stop();
          }
        }
      });
      return false;
    });
  },
  register: function register() {
    $('form.registration').submit(function (e) {
      var form = $(this);
      e.preventDefault();
      var url = form.attr('action');
      form.spinner().start();
      $('form.registration').trigger('login:register', e);
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: form.serialize(),
        success: function success(data) {
          form.spinner().stop();

          if (!data.success) {
            formValidation(form, data);
          } else {
            location.href = data.redirectUrl;
          }
        },
        error: function error(err) {
          if (err.responseJSON.redirectUrl) {
            window.location.href = err.responseJSON.redirectUrl;
          } else {
            createErrorNotification($('.error-messaging'), err.responseJSON.errorMessage);
          }

          form.spinner().stop();
        }
      });
      return false;
    });
  },
  resetPassword: function resetPassword() {
    $('.reset-password-form').submit(function (e) {
      var form = $(this);
      e.preventDefault();
      var url = form.attr('action');
      form.spinner().start();
      $('.reset-password-form').trigger('login:register', e);
      $.ajax({
        url: url,
        type: 'post',
        dataType: 'json',
        data: form.serialize(),
        success: function success(data) {
          form.spinner().stop();

          if (!data.success) {
            formValidation(form, data);
          } else {
            $('.request-password-title').text(data.receivedMsgHeading);
            $('.request-password-body').empty().append('<p>' + data.receivedMsgBody + '</p>');

            if (!data.mobile) {
              $('#submitEmailButton').text(data.buttonText).attr('data-dismiss', 'modal');
            } else {
              $('.send-email-btn').empty().html('<a href="' + data.returnUrl + '" class="btn btn-primary btn-block">' + data.buttonText + '</a>');
            }
          }
        },
        error: function error() {
          form.spinner().stop();
        }
      });
      return false;
    });
  },
  clearResetForm: function clearResetForm() {
    $('#login .modal').on('hidden.bs.modal', function () {
      $('#reset-password-email').val('');
      $('.modal-dialog .form-control.is-invalid').removeClass('is-invalid');
    });
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/product/base.js":
/*!******************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/product/base.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var focusHelper = __webpack_require__(/*! ../components/focus */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js");
/**
 * Retrieves the relevant pid value
 * @param {jquery} $el - DOM container for a given add to cart button
 * @return {string} - value to be used when adding product to cart
 */


function getPidValue($el) {
  var pid;

  if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {
    pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');
  } else if ($('.product-set-detail').length || $('.product-set').length) {
    pid = $($el).closest('.product-detail').find('.product-id').text();
  } else {
    pid = $('.product-detail:not(".bundle-item")').data('pid');
  }

  return pid;
}
/**
 * Retrieve contextual quantity selector
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {jquery} - quantity selector DOM container
 */


function getQuantitySelector($el) {
  return $el && $('.set-items').length ? $($el).closest('.product-detail').find('.quantity-select') : $('.quantity-select');
}
/**
 * Retrieves the value associated with the Quantity pull-down menu
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {string} - value found in the quantity input
 */


function getQuantitySelected($el) {
  return getQuantitySelector($el).val();
}
/**
 * Process the attribute values for an attribute that has image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 * @param {Object} msgs - object containing resource messages
 */


function processSwatchValues(attr, $productContainer, msgs) {
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find('[data-attr="' + attr.id + '"] [data-attr-value="' + attrValue.value + '"]');
    var $swatchButton = $attrValue.parent();

    if (attrValue.selected) {
      $attrValue.addClass('selected');
      $attrValue.siblings('.selected-assistive-text').text(msgs.assistiveSelectedText);
    } else {
      $attrValue.removeClass('selected');
      $attrValue.siblings('.selected-assistive-text').empty();
    }

    if (attrValue.url) {
      $swatchButton.attr('data-url', attrValue.url);
    } else {
      $swatchButton.removeAttr('data-url');
    } // Disable if not selectable


    $attrValue.removeClass('selectable unselectable');
    $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');
  });
}
/**
 * Process attribute values associated with an attribute that does not have image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function processNonSwatchValues(attr, $productContainer) {
  var $attr = '[data-attr="' + attr.id + '"]';
  var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');
  $defaultOption.attr('value', attr.resetUrl);
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]');
    $attrValue.attr('value', attrValue.url).removeAttr('disabled');

    if (!attrValue.selectable) {
      $attrValue.attr('disabled', true);
    }
  });
}
/**
 * Routes the handling of attribute processing depending on whether the attribute has image
 *     swatches or not
 *
 * @param {Object} attrs - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {jQuery} $productContainer - DOM element for a given product
 * @param {Object} msgs - object containing resource messages
 */


function updateAttrs(attrs, $productContainer, msgs) {
  // Currently, the only attribute type that has image swatches is Color.
  var attrsWithSwatches = ['color'];
  attrs.forEach(function (attr) {
    if (attrsWithSwatches.indexOf(attr.id) > -1) {
      processSwatchValues(attr, $productContainer, msgs);
    } else {
      processNonSwatchValues(attr, $productContainer);
    }
  });
}
/**
 * Updates the availability status in the Product Detail Page
 *
 * @param {Object} response - Ajax response object after an
 *                            attribute value has been [de]selected
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function updateAvailability(response, $productContainer) {
  var availabilityValue = '';
  var availabilityMessages = response.product.availability.messages;

  if (!response.product.readyToOrder) {
    availabilityValue = '<li><div>' + response.resources.info_selectforstock + '</div></li>';
  } else {
    availabilityMessages.forEach(function (message) {
      availabilityValue += '<li><div>' + message + '</div></li>';
    });
  }

  $($productContainer).trigger('product:updateAvailability', {
    product: response.product,
    $productContainer: $productContainer,
    message: availabilityValue,
    resources: response.resources
  });
}
/**
 * Generates html for product attributes section
 *
 * @param {array} attributes - list of attributes
 * @return {string} - Compiled HTML
 */


function getAttributesHtml(attributes) {
  if (!attributes) {
    return '';
  }

  var html = '';
  attributes.forEach(function (attributeGroup) {
    if (attributeGroup.ID === 'mainAttributes') {
      attributeGroup.attributes.forEach(function (attribute) {
        html += '<div class="attribute-values">' + attribute.label + ': ' + attribute.value + '</div>';
      });
    }
  });
  return html;
}
/**
 * @typedef UpdatedOptionValue
 * @type Object
 * @property {string} id - Option value ID for look up
 * @property {string} url - Updated option value selection URL
 */

/**
 * @typedef OptionSelectionResponse
 * @type Object
 * @property {string} priceHtml - Updated price HTML code
 * @property {Object} options - Updated Options
 * @property {string} options.id - Option ID
 * @property {UpdatedOptionValue[]} options.values - Option values
 */

/**
 * Updates DOM using post-option selection Ajax response
 *
 * @param {OptionSelectionResponse} options - Ajax response options from selecting a product option
 * @param {jQuery} $productContainer - DOM element for current product
 */


function updateOptions(options, $productContainer) {
  options.forEach(function (option) {
    var $optionEl = $productContainer.find('.product-option[data-option-id*="' + option.id + '"]');
    option.values.forEach(function (value) {
      var valueEl = $optionEl.find('option[data-value-id*="' + value.id + '"]');
      valueEl.val(value.url);
    });
  });
}
/**
 * Dynamically creates Bootstrap carousel from response containing images
 * @param {Object[]} imgs - Array of large product images,along with related information
 * @param {jQuery} $productContainer - DOM element for a given product
 */


function createCarousel(imgs, $productContainer) {
  var carousel = $productContainer.find('.carousel');
  $(carousel).carousel('dispose');
  var carouselId = $(carousel).attr('id');
  $(carousel).empty().append('<ol class="carousel-indicators"></ol><div class="carousel-inner" role="listbox"></div><a class="carousel-control-prev" href="#' + carouselId + '" role="button" data-slide="prev"><span class="fa icon-prev" aria-hidden="true"></span><span class="sr-only">' + $(carousel).data('prev') + '</span></a><a class="carousel-control-next" href="#' + carouselId + '" role="button" data-slide="next"><span class="fa icon-next" aria-hidden="true"></span><span class="sr-only">' + $(carousel).data('next') + '</span></a>');

  for (var i = 0; i < imgs.length; i++) {
    $('<div class="carousel-item"><img src="' + imgs[i].url + '" class="d-block img-fluid" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></div>').appendTo($(carousel).find('.carousel-inner'));
    $('<li data-target="#' + carouselId + '" data-slide-to="' + i + '" class=""></li>').appendTo($(carousel).find('.carousel-indicators'));
  }

  $($(carousel).find('.carousel-item')).first().addClass('active');
  $($(carousel).find('.carousel-indicators > li')).first().addClass('active');

  if (imgs.length === 1) {
    $($(carousel).find('.carousel-indicators, a[class^="carousel-control-"]')).detach();
  }

  $(carousel).carousel();
  $($(carousel).find('.carousel-indicators')).attr('aria-hidden', true);
}
/**
 * Parses JSON from Ajax call made whenever an attribute value is [de]selected
 * @param {Object} response - response from Ajax call
 * @param {Object} response.product - Product object
 * @param {string} response.product.id - Product ID
 * @param {Object[]} response.product.variationAttributes - Product attributes
 * @param {Object[]} response.product.images - Product images
 * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required
 *     attributes have been selected.  Used partially to
 *     determine whether the Add to Cart button can be enabled
 * @param {jQuery} $productContainer - DOM element for a given product.
 */


function handleVariantResponse(response, $productContainer) {
  var isChoiceOfBonusProducts = $productContainer.parents('.choose-bonus-product-dialog').length > 0;
  var isVaraint;

  if (response.product.variationAttributes) {
    updateAttrs(response.product.variationAttributes, $productContainer, response.resources);
    isVaraint = response.product.productType === 'variant';

    if (isChoiceOfBonusProducts && isVaraint) {
      $productContainer.parent('.bonus-product-item').data('pid', response.product.id);
      $productContainer.parent('.bonus-product-item').data('ready-to-order', response.product.readyToOrder);
    }
  } // Update primary images


  var primaryImageUrls = response.product.images.large;
  createCarousel(primaryImageUrls, $productContainer); // Update pricing

  if (!isChoiceOfBonusProducts) {
    var $priceSelector = $('.prices .price', $productContainer).length ? $('.prices .price', $productContainer) : $('.prices .price');
    $priceSelector.replaceWith(response.product.price.html);
  } // Update promotions


  $('.promotions').empty().html(response.product.promotionsHtml);
  updateAvailability(response, $productContainer);

  if (isChoiceOfBonusProducts) {
    var $selectButton = $productContainer.find('.select-bonus-product');
    $selectButton.trigger('bonusproduct:updateSelectButton', {
      product: response.product,
      $productContainer: $productContainer
    });
  } else {
    // Enable "Add to Cart" button if all required attributes have been selected
    $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
      product: response.product,
      $productContainer: $productContainer
    }).trigger('product:statusUpdate', response.product);
  } // Update attributes


  $productContainer.find('.main-attributes').empty().html(getAttributesHtml(response.product.attributes));
}
/**
 * @typespec UpdatedQuantity
 * @type Object
 * @property {boolean} selected - Whether the quantity has been selected
 * @property {string} value - The number of products to purchase
 * @property {string} url - Compiled URL that specifies variation attributes, product ID, options,
 *     etc.
 */

/**
 * Updates the quantity DOM elements post Ajax call
 * @param {UpdatedQuantity[]} quantities -
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function updateQuantities(quantities, $productContainer) {
  if (!($productContainer.parent('.bonus-product-item').length > 0)) {
    var optionsHtml = quantities.map(function (quantity) {
      var selected = quantity.selected ? ' selected ' : '';
      return '<option value="' + quantity.value + '"  data-url="' + quantity.url + '"' + selected + '>' + quantity.value + '</option>';
    }).join('');
    getQuantitySelector($productContainer).empty().html(optionsHtml);
  }
}
/**
 * updates the product view when a product attribute is selected or deselected or when
 *         changing quantity
 * @param {string} selectedValueUrl - the Url for the selected variation value
 * @param {jQuery} $productContainer - DOM element for current product
 */


function attributeSelect(selectedValueUrl, $productContainer) {
  if (selectedValueUrl) {
    $('body').trigger('product:beforeAttributeSelect', {
      url: selectedValueUrl,
      container: $productContainer
    });
    $.ajax({
      url: selectedValueUrl,
      method: 'GET',
      success: function success(data) {
        handleVariantResponse(data, $productContainer);
        updateOptions(data.product.options, $productContainer);
        updateQuantities(data.product.quantities, $productContainer);
        $('body').trigger('product:afterAttributeSelect', {
          data: data,
          container: $productContainer
        });
        $.spinner().stop();
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  }
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @return {string} - The provided URL to use when adding a product to the cart
 */


function getAddToCartUrl() {
  return $('.add-to-cart-url').val();
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.choice-of-bonus-product');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @param {Object} data - data object used to fill in dynamic portions of the html
 */


function chooseBonusProducts(data) {
  $('.modal-body').spinner().start();

  if ($('#chooseBonusProductModal').length !== 0) {
    $('#chooseBonusProductModal').remove();
  }

  var bonusUrl;

  if (data.bonusChoiceRuleBased) {
    bonusUrl = data.showProductsUrlRuleBased;
  } else {
    bonusUrl = data.showProductsUrlListBased;
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade" id="chooseBonusProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog choose-bonus-product-dialog" ' + 'data-total-qty="' + data.maxBonusItems + '"' + 'data-UUID="' + data.uuid + '"' + 'data-pliUUID="' + data.pliUUID + '"' + 'data-addToCartUrl="' + data.addToCartUrl + '"' + 'data-pageStart="0"' + 'data-pageSize="' + data.pageSize + '"' + 'data-moreURL="' + data.showProductsUrlRuleBased + '"' + 'data-bonusChoiceRuleBased="' + data.bonusChoiceRuleBased + '">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <span class="">' + data.labels.selectprods + '</span>' + '    <button type="button" class="close pull-right" data-dismiss="modal">' + '        <span aria-hidden="true">&times;</span>' + '        <span class="sr-only"> </span>' + '    </button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('.modal-body').spinner().start();
  $.ajax({
    url: bonusUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(response) {
      var parsedHtml = parseHtml(response.renderedTemplate);
      $('#chooseBonusProductModal .modal-body').empty();
      $('#chooseBonusProductModal .enter-message').text(response.enterDialogMessage);
      $('#chooseBonusProductModal .modal-header .close .sr-only').text(response.closeButtonText);
      $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);
      $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);
      $('#chooseBonusProductModal').modal('show');
      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * Updates the Mini-Cart quantity value after the customer has pressed the "Add to Cart" button
 * @param {string} response - ajax response from clicking the add to cart button
 */


function handlePostCartAdd(response) {
  $('.minicart').trigger('count:update', response);
  var messageType = response.error ? 'alert-danger' : 'alert-success'; // show add to cart toast

  if (response.newBonusDiscountLineItem && Object.keys(response.newBonusDiscountLineItem).length !== 0) {
    chooseBonusProducts(response.newBonusDiscountLineItem);
  } else {
    if ($('.add-to-cart-messages').length === 0) {
      $('body').append('<div class="add-to-cart-messages"></div>');
    }

    $('.add-to-cart-messages').append('<div class="alert ' + messageType + ' add-to-basket-alert text-center" role="alert">' + response.message + '</div>');
    setTimeout(function () {
      $('.add-to-basket-alert').remove();
    }, 5000);
  }
}
/**
 * Retrieves the bundle product item ID's for the Controller to replace bundle master product
 * items with their selected variants
 *
 * @return {string[]} - List of selected bundle product item ID's
 */


function getChildProducts() {
  var childProducts = [];
  $('.bundle-item').each(function () {
    childProducts.push({
      pid: $(this).find('.product-id').text(),
      quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
    });
  });
  return childProducts.length ? JSON.stringify(childProducts) : [];
}
/**
 * Retrieve product options
 *
 * @param {jQuery} $productContainer - DOM element for current product
 * @return {string} - Product options and their selected values
 */


function getOptions($productContainer) {
  var options = $productContainer.find('.product-option').map(function () {
    var $elOption = $(this).find('.options-select');
    var urlValue = $elOption.val();
    var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
    return {
      optionId: $(this).data('option-id'),
      selectedValueId: selectedValueId
    };
  }).toArray();
  return JSON.stringify(options);
}

module.exports = {
  attributeSelect: attributeSelect,
  methods: {
    editBonusProducts: function editBonusProducts(data) {
      chooseBonusProducts(data);
    }
  },
  focusChooseBonusProductModal: function focusChooseBonusProductModal() {
    $('body').on('shown.bs.modal', '#chooseBonusProductModal', function () {
      $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'true');
      $('#chooseBonusProductModal .close').focus();
    });
  },
  onClosingChooseBonusProductModal: function onClosingChooseBonusProductModal() {
    $('body').on('hidden.bs.modal', '#chooseBonusProductModal', function () {
      $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'false');
    });
  },
  trapChooseBonusProductModalFocus: function trapChooseBonusProductModalFocus() {
    $('body').on('keydown', '#chooseBonusProductModal', function (e) {
      var focusParams = {
        event: e,
        containerSelector: '#chooseBonusProductModal',
        firstElementSelector: '.close',
        lastElementSelector: '.add-bonus-products'
      };
      focusHelper.setTabNextFocus(focusParams);
    });
  },
  colorAttribute: function colorAttribute() {
    $(document).on('click', '[data-attr="color"] button', function (e) {
      e.preventDefault();

      if ($(this).attr('disabled')) {
        return;
      }

      var $productContainer = $(this).closest('.set-item');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.product-detail');
      }

      attributeSelect($(this).attr('data-url'), $productContainer);
    });
  },
  selectAttribute: function selectAttribute() {
    $(document).on('change', 'select[class*="select-"], .options-select', function (e) {
      e.preventDefault();
      var $productContainer = $(this).closest('.set-item');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.product-detail');
      }

      attributeSelect(e.currentTarget.value, $productContainer);
    });
  },
  availability: function availability() {
    $(document).on('change', '.quantity-select', function (e) {
      e.preventDefault();
      var $productContainer = $(this).closest('.product-detail');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.modal-content').find('.product-quickview');
      }

      if ($('.bundle-items', $productContainer).length === 0) {
        attributeSelect($(e.currentTarget).find('option:selected').data('url'), $productContainer);
      }
    });
  },
  addToCart: function addToCart() {
    $(document).on('click', 'button.add-to-cart, button.add-to-cart-global', function () {
      var addToCartUrl;
      var pid;
      var pidsObj;
      var setPids;
      $('body').trigger('product:beforeAddToCart', this);

      if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {
        setPids = [];
        $('.product-detail').each(function () {
          if (!$(this).hasClass('product-set-detail')) {
            setPids.push({
              pid: $(this).find('.product-id').text(),
              qty: $(this).find('.quantity-select').val(),
              options: getOptions($(this))
            });
          }
        });
        pidsObj = JSON.stringify(setPids);
      }

      pid = getPidValue($(this));
      var $productContainer = $(this).closest('.product-detail');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');
      }

      addToCartUrl = getAddToCartUrl();
      var form = {
        pid: pid,
        pidsObj: pidsObj,
        childProducts: getChildProducts(),
        quantity: getQuantitySelected($(this))
      };

      if (!$('.bundle-item').length) {
        form.options = getOptions($productContainer);
      }

      $(this).trigger('updateAddToCartFormData', form);

      if (addToCartUrl) {
        $.ajax({
          url: addToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            handlePostCartAdd(data);
            $('body').trigger('product:afterAddToCart', data);
            $.spinner().stop();
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  },
  selectBonusProduct: function selectBonusProduct() {
    $(document).on('click', '.select-bonus-product', function () {
      var $choiceOfBonusProduct = $(this).parents('.choice-of-bonus-product');
      var pid = $(this).data('pid');
      var maxPids = $('.choose-bonus-product-dialog').data('total-qty');
      var submittedQty = parseInt($choiceOfBonusProduct.find('.bonus-quantity-select').val(), 10);
      var totalQty = 0;
      $.each($('#chooseBonusProductModal .selected-bonus-products .selected-pid'), function () {
        totalQty += $(this).data('qty');
      });
      totalQty += submittedQty;
      var optionID = $choiceOfBonusProduct.find('.product-option').data('option-id');
      var valueId = $choiceOfBonusProduct.find('.options-select option:selected').data('valueId');

      if (totalQty <= maxPids) {
        var selectedBonusProductHtml = '' + '<div class="selected-pid row" ' + 'data-pid="' + pid + '"' + 'data-qty="' + submittedQty + '"' + 'data-optionID="' + (optionID || '') + '"' + 'data-option-selected-value="' + (valueId || '') + '"' + '>' + '<div class="col-sm-11 col-9 bonus-product-name" >' + $choiceOfBonusProduct.find('.product-name').html() + '</div>' + '<div class="col-1"><i class="fa fa-times" aria-hidden="true"></i></div>' + '</div>';
        $('#chooseBonusProductModal .selected-bonus-products').append(selectedBonusProductHtml);
        $('.pre-cart-products').html(totalQty);
        $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');
      } else {
        $('.selected-bonus-products .bonus-summary').addClass('alert-danger');
      }
    });
  },
  removeBonusProduct: function removeBonusProduct() {
    $(document).on('click', '.selected-pid', function () {
      $(this).remove();
      var $selected = $('#chooseBonusProductModal .selected-bonus-products .selected-pid');
      var count = 0;

      if ($selected.length) {
        $selected.each(function () {
          count += parseInt($(this).data('qty'), 10);
        });
      }

      $('.pre-cart-products').html(count);
      $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');
    });
  },
  enableBonusProductSelection: function enableBonusProductSelection() {
    $('body').on('bonusproduct:updateSelectButton', function (e, response) {
      $('button.select-bonus-product', response.$productContainer).attr('disabled', !response.product.readyToOrder || !response.product.available);
      var pid = response.product.id;
      $('button.select-bonus-product', response.$productContainer).data('pid', pid);
    });
  },
  showMoreBonusProducts: function showMoreBonusProducts() {
    $(document).on('click', '.show-more-bonus-products', function () {
      var url = $(this).data('url');
      $('.modal-content').spinner().start();
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(html) {
          var parsedHtml = parseHtml(html);
          $('.modal-body').append(parsedHtml.body);
          $('.show-more-bonus-products:first').remove();
          $('.modal-content').spinner().stop();
        },
        error: function error() {
          $('.modal-content').spinner().stop();
        }
      });
    });
  },
  addBonusProductsToCart: function addBonusProductsToCart() {
    $(document).on('click', '.add-bonus-products', function () {
      var $readyToOrderBonusProducts = $('.choose-bonus-product-dialog .selected-pid');
      var queryString = '?pids=';
      var url = $('.choose-bonus-product-dialog').data('addtocarturl');
      var pidsObject = {
        bonusProducts: []
      };
      $.each($readyToOrderBonusProducts, function () {
        var qtyOption = parseInt($(this).data('qty'), 10);
        var option = null;

        if (qtyOption > 0) {
          if ($(this).data('optionid') && $(this).data('option-selected-value')) {
            option = {};
            option.optionId = $(this).data('optionid');
            option.productId = $(this).data('pid');
            option.selectedValueId = $(this).data('option-selected-value');
          }

          pidsObject.bonusProducts.push({
            pid: $(this).data('pid'),
            qty: qtyOption,
            options: [option]
          });
          pidsObject.totalQty = parseInt($('.pre-cart-products').html(), 10);
        }
      });
      queryString += JSON.stringify(pidsObject);
      queryString = queryString + '&uuid=' + $('.choose-bonus-product-dialog').data('uuid');
      queryString = queryString + '&pliuuid=' + $('.choose-bonus-product-dialog').data('pliuuid');
      $.spinner().start();
      $.ajax({
        url: url + queryString,
        method: 'POST',
        success: function success(data) {
          $.spinner().stop();

          if (data.error) {
            $('#chooseBonusProductModal').modal('hide');

            if ($('.add-to-cart-messages').length === 0) {
              $('body').append('<div class="add-to-cart-messages"></div>');
            }

            $('.add-to-cart-messages').append('<div class="alert alert-danger add-to-basket-alert text-center"' + ' role="alert">' + data.errorMessage + '</div>');
            setTimeout(function () {
              $('.add-to-basket-alert').remove();
            }, 3000);
          } else {
            $('.configure-bonus-product-attributes').html(data);
            $('.bonus-products-step2').removeClass('hidden-xl-down');
            $('#chooseBonusProductModal').modal('hide');

            if ($('.add-to-cart-messages').length === 0) {
              $('body').append('<div class="add-to-cart-messages"></div>');
            }

            $('.minicart-quantity').html(data.totalQty);
            $('.add-to-cart-messages').append('<div class="alert alert-success add-to-basket-alert text-center"' + ' role="alert">' + data.msgSuccess + '</div>');
            setTimeout(function () {
              $('.add-to-basket-alert').remove();

              if ($('.cart-page').length) {
                location.reload();
              }
            }, 1500);
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    });
  },
  getPidValue: getPidValue,
  getQuantitySelected: getQuantitySelected
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/storeLocator/storeLocator.js":
/*!*******************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/storeLocator/storeLocator.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* globals google */

/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */

function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Uses google maps api to render a map
 */


function maps() {
  var map;
  var infowindow = new google.maps.InfoWindow(); // Init U.S. Map in the center of the viewport

  var latlng = new google.maps.LatLng(37.09024, -95.712891);
  var mapOptions = {
    scrollwheel: false,
    zoom: 4,
    center: latlng
  };
  map = new google.maps.Map($('.map-canvas')[0], mapOptions);
  var mapdiv = $('.map-canvas').attr('data-locations');
  mapdiv = JSON.parse(mapdiv);
  var bounds = new google.maps.LatLngBounds(); // Customized google map marker icon with svg format

  var markerImg = {
    path: 'M13.5,30.1460153 L16.8554555,25.5 L20.0024287,25.5 C23.039087,25.5 25.5,' + '23.0388955 25.5,20.0024287 L25.5,5.99757128 C25.5,2.96091298 23.0388955,0.5 ' + '20.0024287,0.5 L5.99757128,0.5 C2.96091298,0.5 0.5,2.96110446 0.5,5.99757128 ' + 'L0.5,20.0024287 C0.5,23.039087 2.96110446,25.5 5.99757128,25.5 L10.1445445,' + '25.5 L13.5,30.1460153 Z',
    fillColor: '#0070d2',
    fillOpacity: 1,
    scale: 1.1,
    strokeColor: 'white',
    strokeWeight: 1,
    anchor: new google.maps.Point(13, 30),
    labelOrigin: new google.maps.Point(12, 12)
  };
  Object.keys(mapdiv).forEach(function (key) {
    var item = mapdiv[key];
    var lable = parseInt(key, 10) + 1;
    var storeLocation = new google.maps.LatLng(item.latitude, item.longitude);
    var marker = new google.maps.Marker({
      position: storeLocation,
      map: map,
      title: item.name,
      icon: markerImg,
      label: {
        text: lable.toString(),
        color: 'white',
        fontSize: '16px'
      }
    });
    marker.addListener('click', function () {
      infowindow.setOptions({
        content: item.infoWindowHtml
      });
      infowindow.open(map, marker);
    }); // Create a minimum bound based on a set of storeLocations

    bounds.extend(marker.position);
  }); // Fit the all the store marks in the center of a minimum bounds when any store has been found.

  if (mapdiv && mapdiv.length !== 0) {
    map.fitBounds(bounds);
  }
}
/**
 * Renders the results of the search and updates the map
 * @param {Object} data - Response from the server
 */


function updateStoresResults(data) {
  var $resultsDiv = $('.results');
  var $mapDiv = $('.map-canvas');
  var hasResults = data.stores.length > 0;

  if (!hasResults) {
    $('.store-locator-no-results').show();
  } else {
    $('.store-locator-no-results').hide();
  }

  $resultsDiv.empty().data('has-results', hasResults).data('radius', data.radius).data('search-key', data.searchKey);
  $mapDiv.attr('data-locations', data.locations);

  if ($mapDiv.data('has-google-api')) {
    maps();
  } else {
    $('.store-locator-no-apiKey').show();
  }

  if (data.storesResultsHtml) {
    $resultsDiv.append(data.storesResultsHtml);
  }
}
/**
 * Search for stores with new zip code
 * @param {HTMLElement} element - the target html element
 * @returns {boolean} false to prevent default event
 */


function _search(element) {
  var dialog = element.closest('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  spinner.start();
  var $form = element.closest('.store-locator');
  var radius = $('.results').data('radius');
  var url = $form.attr('action');
  var urlParams = {
    radius: radius
  };
  var payload = $form.is('form') ? $form.serialize() : {
    postalCode: $form.find('[name="postalCode"]').val()
  };
  url = appendToUrl(url, urlParams);
  $.ajax({
    url: url,
    type: $form.attr('method'),
    data: payload,
    dataType: 'json',
    success: function success(data) {
      spinner.stop();
      updateStoresResults(data);
      $('.select-store').prop('disabled', true);
    }
  });
  return false;
}

module.exports = {
  init: function init() {
    if ($('.map-canvas').data('has-google-api')) {
      maps();
    } else {
      $('.store-locator-no-apiKey').show();
    }

    if (!$('.results').data('has-results')) {
      $('.store-locator-no-results').show();
    }
  },
  detectLocation: function detectLocation() {
    // clicking on detect location.
    $('.detect-location').on('click', function () {
      $.spinner().start();

      if (!navigator.geolocation) {
        $.spinner().stop();
        return;
      }

      navigator.geolocation.getCurrentPosition(function (position) {
        var $detectLocationButton = $('.detect-location');
        var url = $detectLocationButton.data('action');
        var radius = $('.results').data('radius');
        var urlParams = {
          radius: radius,
          lat: position.coords.latitude,
          long: position.coords.longitude
        };
        url = appendToUrl(url, urlParams);
        $.ajax({
          url: url,
          type: 'get',
          dataType: 'json',
          success: function success(data) {
            $.spinner().stop();
            updateStoresResults(data);
            $('.select-store').prop('disabled', true);
          }
        });
      });
    });
  },
  search: function search() {
    $('.store-locator-container form.store-locator').submit(function (e) {
      e.preventDefault();

      _search($(this));
    });
    $('.store-locator-container .btn-storelocator-search[type="button"]').click(function (e) {
      e.preventDefault();

      _search($(this));
    });
  },
  changeRadius: function changeRadius() {
    $('.store-locator-container .radius').change(function () {
      var radius = $(this).val();
      var searchKeys = $('.results').data('search-key');
      var url = $('.radius').data('action-url');
      var urlParams = {};

      if (searchKeys.postalCode) {
        urlParams = {
          radius: radius,
          postalCode: searchKeys.postalCode
        };
      } else if (searchKeys.lat && searchKeys.long) {
        urlParams = {
          radius: radius,
          lat: searchKeys.lat,
          long: searchKeys.long
        };
      }

      url = appendToUrl(url, urlParams);
      var dialog = $(this).closest('.in-store-inventory-dialog');
      var spinner = dialog.length ? dialog.spinner() : $.spinner();
      spinner.start();
      $.ajax({
        url: url,
        type: 'get',
        dataType: 'json',
        success: function success(data) {
          spinner.stop();
          updateStoresResults(data);
          $('.select-store').prop('disabled', true);
        }
      });
    });
  },
  selectStore: function selectStore() {
    $('.store-locator-container').on('click', '.select-store', function (e) {
      e.preventDefault();
      var selectedStore = $(':checked', '.results-card .results');
      var data = {
        storeID: selectedStore.val(),
        searchRadius: $('#radius').val(),
        searchPostalCode: $('.results').data('search-key').postalCode,
        storeDetailsHtml: selectedStore.siblings('label').find('.store-details').html(),
        event: e
      };
      $('body').trigger('store:selected', data);
    });
  },
  updateSelectStoreButton: function updateSelectStoreButton() {
    $('body').on('change', '.select-store-input', function () {
      $('.select-store').prop('disabled', false);
    });
  }
};

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/thirdParty/bootstrap.js":
/*!**************************************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/thirdParty/bootstrap.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! bootstrap/js/src/util.js */ "../sfra/node_modules/bootstrap/js/src/util.js");

__webpack_require__(/*! bootstrap/js/src/alert.js */ "../sfra/node_modules/bootstrap/js/src/alert.js"); // require('bootstrap/js/src/button.js');


__webpack_require__(/*! bootstrap/js/src/carousel.js */ "../sfra/node_modules/bootstrap/js/src/carousel.js");

__webpack_require__(/*! bootstrap/js/src/collapse.js */ "../sfra/node_modules/bootstrap/js/src/collapse.js"); // require('bootstrap/js/src/dropdown.js');


__webpack_require__(/*! bootstrap/js/src/modal.js */ "../sfra/node_modules/bootstrap/js/src/modal.js");

__webpack_require__(/*! bootstrap/js/src/scrollspy.js */ "../sfra/node_modules/bootstrap/js/src/scrollspy.js");

__webpack_require__(/*! bootstrap/js/src/tab.js */ "../sfra/node_modules/bootstrap/js/src/tab.js"); // require('bootstrap/js/src/tooltip.js');
// require('bootstrap/js/src/popover.js');

/***/ }),

/***/ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/util.js":
/*!**********************************************************************************!*\
  !*** ../sfra/cartridges/app_storefront_base/cartridge/client/default/js/util.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (include) {
  if (typeof include === 'function') {
    include();
  } else if (_typeof(include) === 'object') {
    Object.keys(include).forEach(function (key) {
      if (typeof include[key] === 'function') {
        include[key]();
      }
    });
  }
};

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/alert.js":
/*!******************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/alert.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'alert';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.alert';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var Selector = {
  DISMISS: '[data-dismiss="alert"]'
};
var Event = {
  CLOSE: "close".concat(EVENT_KEY),
  CLOSED: "closed".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  ALERT: 'alert',
  FADE: 'fade',
  SHOW: 'show'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Alert = /*#__PURE__*/function () {
  function Alert(element) {
    _classCallCheck(this, Alert);

    this._element = element;
  } // Getters


  _createClass(Alert, [{
    key: "close",
    // Public
    value: function close(element) {
      var rootElement = this._element;

      if (element) {
        rootElement = this._getRootElement(element);
      }

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private

  }, {
    key: "_getRootElement",
    value: function _getRootElement(element) {
      var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = document.querySelector(selector);
      }

      if (!parent) {
        parent = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).closest(".".concat(ClassName.ALERT))[0];
      }

      return parent;
    }
  }, {
    key: "_triggerCloseEvent",
    value: function _triggerCloseEvent(element) {
      var closeEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.CLOSE);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).trigger(closeEvent);
      return closeEvent;
    }
  }, {
    key: "_removeElement",
    value: function _removeElement(element) {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).removeClass(ClassName.SHOW);

      if (!jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);

        return;
      }

      var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(element);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(transitionDuration);
    }
  }, {
    key: "_destroyElement",
    value: function _destroyElement(element) {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).detach().trigger(Event.CLOSED).remove();
    } // Static

  }], [{
    key: "_jQueryInterface",
    value: function _jQueryInterface(config) {
      return this.each(function () {
        var $element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    }
  }, {
    key: "_handleDismiss",
    value: function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }]);

  return Alert;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = Alert._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = Alert;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return Alert._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (Alert);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/carousel.js":
/*!*********************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/carousel.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'carousel';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.carousel';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

var SWIPE_THRESHOLD = 40;
var Default = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: 'hover',
  wrap: true,
  touch: true
};
var DefaultType = {
  interval: '(number|boolean)',
  keyboard: 'boolean',
  slide: '(boolean|string)',
  pause: '(string|boolean)',
  wrap: 'boolean',
  touch: 'boolean'
};
var Direction = {
  NEXT: 'next',
  PREV: 'prev',
  LEFT: 'left',
  RIGHT: 'right'
};
var Event = {
  SLIDE: "slide".concat(EVENT_KEY),
  SLID: "slid".concat(EVENT_KEY),
  KEYDOWN: "keydown".concat(EVENT_KEY),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY),
  TOUCHSTART: "touchstart".concat(EVENT_KEY),
  TOUCHMOVE: "touchmove".concat(EVENT_KEY),
  TOUCHEND: "touchend".concat(EVENT_KEY),
  POINTERDOWN: "pointerdown".concat(EVENT_KEY),
  POINTERUP: "pointerup".concat(EVENT_KEY),
  DRAG_START: "dragstart".concat(EVENT_KEY),
  LOAD_DATA_API: "load".concat(EVENT_KEY).concat(DATA_API_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  CAROUSEL: 'carousel',
  ACTIVE: 'active',
  SLIDE: 'slide',
  RIGHT: 'carousel-item-right',
  LEFT: 'carousel-item-left',
  NEXT: 'carousel-item-next',
  PREV: 'carousel-item-prev',
  ITEM: 'carousel-item',
  POINTER_EVENT: 'pointer-event'
};
var Selector = {
  ACTIVE: '.active',
  ACTIVE_ITEM: '.active.carousel-item',
  ITEM: '.carousel-item',
  ITEM_IMG: '.carousel-item img',
  NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
  INDICATORS: '.carousel-indicators',
  DATA_SLIDE: '[data-slide], [data-slide-to]',
  DATA_RIDE: '[data-ride="carousel"]'
};
var PointerType = {
  TOUCH: 'touch',
  PEN: 'pen'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Carousel = /*#__PURE__*/function () {
  function Carousel(element, config) {
    _classCallCheck(this, Carousel);

    this._items = null;
    this._interval = null;
    this._activeElement = null;
    this._isPaused = false;
    this._isSliding = false;
    this.touchTimeout = null;
    this.touchStartX = 0;
    this.touchDeltaX = 0;
    this._config = this._getConfig(config);
    this._element = element;
    this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);
    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

    this._addEventListeners();
  } // Getters


  _createClass(Carousel, [{
    key: "next",
    // Public
    value: function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    }
  }, {
    key: "nextWhenVisible",
    value: function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).is(':visible') && jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).css('visibility') !== 'hidden') {
        this.next();
      }
    }
  }, {
    key: "prev",
    value: function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    }
  }, {
    key: "pause",
    value: function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (this._element.querySelector(Selector.NEXT_PREV)) {
        _util__WEBPACK_IMPORTED_MODULE_1__["default"].triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    }
  }, {
    key: "cycle",
    value: function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    }
  }, {
    key: "to",
    value: function to(index) {
      var _this = this;

      this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).one(Event.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).off(EVENT_KEY);
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default), config);
      _util__WEBPACK_IMPORTED_MODULE_1__["default"].typeCheckConfig(NAME, config, DefaultType);
      return config;
    }
  }, {
    key: "_handleSwipe",
    value: function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    }
  }, {
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(Event.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    }
  }, {
    key: "_addTouchEventListeners",
    value: function _addTouchEventListeners() {
      var _this3 = this;

      if (!this._touchSupported) {
        return;
      }

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.originalEvent.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.originalEvent.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
        }
      };

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element.querySelectorAll(Selector.ITEM_IMG)).on(Event.DRAG_START, function (e) {
        return e.preventDefault();
      });

      if (this._pointerEvent) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.POINTERDOWN, function (event) {
          return start(event);
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(ClassName.POINTER_EVENT);
      } else {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.TOUCHSTART, function (event) {
          return start(event);
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.TOUCHMOVE, function (event) {
          return move(event);
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.TOUCHEND, function (event) {
          return end(event);
        });
      }
    }
  }, {
    key: "_keydown",
    value: function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;

        default:
      }
    }
  }, {
    key: "_getItemIndex",
    value: function _getItemIndex(element) {
      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM)) : [];
      return this._items.indexOf(element);
    }
  }, {
    key: "_getItemByDirection",
    value: function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    }
  }, {
    key: "_triggerSlideEvent",
    value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));

      var slideEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(slideEvent);
      return slideEvent;
    }
  }, {
    key: "_setActiveIndicatorElement",
    value: function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(indicators).removeClass(ClassName.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextIndicator).addClass(ClassName.ACTIVE);
        }
      }
    }
  }, {
    key: "_slide",
    value: function _slide(direction, element) {
      var _this4 = this;

      var activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName.LEFT;
        orderClassName = ClassName.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName.RIGHT;
        orderClassName = ClassName.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextElement).hasClass(ClassName.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.SLIDE)) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextElement).addClass(orderClassName);
        _util__WEBPACK_IMPORTED_MODULE_1__["default"].reflow(nextElement);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(activeElement).addClass(directionalClassName);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextElement).addClass(directionalClassName);
        var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);

        if (nextElementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = nextElementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }

        var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(activeElement);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(activeElement).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, function () {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextElement).removeClass("".concat(directionalClassName, " ").concat(orderClassName)).addClass(ClassName.ACTIVE);
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(activeElement).removeClass("".concat(ClassName.ACTIVE, " ").concat(orderClassName, " ").concat(directionalClassName));
          _this4._isSliding = false;
          setTimeout(function () {
            return jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this4._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(activeElement).removeClass(ClassName.ACTIVE);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(nextElement).addClass(ClassName.ACTIVE);
        this._isSliding = false;
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    } // Static

  }], [{
    key: "_jQueryInterface",
    value: function _jQueryInterface(config) {
      return this.each(function () {
        var data = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY);

        var _config = _objectSpread(_objectSpread({}, Default), jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data());

        if (_typeof(config) === 'object') {
          _config = _objectSpread(_objectSpread({}, _config), config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"".concat(action, "\""));
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      });
    }
  }, {
    key: "_dataApiClickHandler",
    value: function _dataApiClickHandler(event) {
      var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(selector)[0];

      if (!target || !jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).hasClass(ClassName.CAROUSEL)) {
        return;
      }

      var config = _objectSpread(_objectSpread({}, jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).data()), jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data());

      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call(jquery__WEBPACK_IMPORTED_MODULE_0___default()(target), config);

      if (slideIndex) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).data(DATA_KEY).to(slideIndex);
      }

      event.preventDefault();
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default;
    }
  }]);

  return Carousel;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(Event.LOAD_DATA_API, function () {
  var carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));

  for (var i = 0, len = carousels.length; i < len; i++) {
    var $carousel = jquery__WEBPACK_IMPORTED_MODULE_0___default()(carousels[i]);

    Carousel._jQueryInterface.call($carousel, $carousel.data());
  }
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = Carousel._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = Carousel;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return Carousel._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (Carousel);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/collapse.js":
/*!*********************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/collapse.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'collapse';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.collapse';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var Default = {
  toggle: true,
  parent: ''
};
var DefaultType = {
  toggle: 'boolean',
  parent: '(string|element)'
};
var Event = {
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  SHOW: 'show',
  COLLAPSE: 'collapse',
  COLLAPSING: 'collapsing',
  COLLAPSED: 'collapsed'
};
var Dimension = {
  WIDTH: 'width',
  HEIGHT: 'height'
};
var Selector = {
  ACTIVES: '.show, .collapsing',
  DATA_TOGGLE: '[data-toggle="collapse"]'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Collapse = /*#__PURE__*/function () {
  function Collapse(element, config) {
    _classCallCheck(this, Collapse);

    this._isTransitioning = false;
    this._element = element;
    this._config = this._getConfig(config);
    this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#".concat(element.id, "\"],") + "[data-toggle=\"collapse\"][data-target=\"#".concat(element.id, "\"]")));
    var toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));

    for (var i = 0, len = toggleList.length; i < len; i++) {
      var elem = toggleList[i];
      var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(elem);
      var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
        return foundElem === element;
      });

      if (selector !== null && filterElement.length > 0) {
        this._selector = selector;

        this._triggerArray.push(elem);
      }
    }

    this._parent = this._config.parent ? this._getParent() : null;

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._element, this._triggerArray);
    }

    if (this._config.toggle) {
      this.toggle();
    }
  } // Getters


  _createClass(Collapse, [{
    key: "toggle",
    // Public
    value: function toggle() {
      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: "show",
    value: function show() {
      var _this = this;

      if (this._isTransitioning || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(function (elem) {
          if (typeof _this._config.parent === 'string') {
            return elem.getAttribute('data-parent') === _this._config.parent;
          }

          return elem.classList.contains(ClassName.COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = jquery__WEBPACK_IMPORTED_MODULE_0___default()(actives).not(this._selector).data(DATA_KEY);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SHOW);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call(jquery__WEBPACK_IMPORTED_MODULE_0___default()(actives).not(this._selector), 'hide');

        if (!activesData) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(actives).data(DATA_KEY, null);
        }
      }

      var dimension = this._getDimension();

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this._element).trigger(Event.SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll".concat(capitalizedDimension);
      var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._element);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this2 = this;

      if (this._isTransitioning || !jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.SHOW)) {
        return;
      }

      var startEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.HIDE);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
      _util__WEBPACK_IMPORTED_MODULE_1__["default"].reflow(this._element);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);
      var triggerArrayLength = this._triggerArray.length;

      if (triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = jquery__WEBPACK_IMPORTED_MODULE_0___default()([].slice.call(document.querySelectorAll(selector)));

            if (!$elem.hasClass(ClassName.SHOW)) {
              jquery__WEBPACK_IMPORTED_MODULE_0___default()(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
      };

      this._element.style[dimension] = '';
      var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._element);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
    }
  }, {
    key: "setTransitioning",
    value: function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default), config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      _util__WEBPACK_IMPORTED_MODULE_1__["default"].typeCheckConfig(NAME, config, DefaultType);
      return config;
    }
  }, {
    key: "_getDimension",
    value: function _getDimension() {
      var hasWidth = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    }
  }, {
    key: "_getParent",
    value: function _getParent() {
      var _this3 = this;

      var parent;

      if (_util__WEBPACK_IMPORTED_MODULE_1__["default"].isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = document.querySelector(this._config.parent);
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"".concat(this._config.parent, "\"]");
      var children = [].slice.call(parent.querySelectorAll(selector));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(children).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    }
  }, {
    key: "_addAriaAndCollapsedClass",
    value: function _addAriaAndCollapsedClass(element, triggerArray) {
      var isOpen = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).hasClass(ClassName.SHOW);

      if (triggerArray.length) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
      }
    } // Static

  }], [{
    key: "_getTargetFromElement",
    value: function _getTargetFromElement(element) {
      var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(element);
      return selector ? document.querySelector(selector) : null;
    }
  }, {
    key: "_jQueryInterface",
    value: function _jQueryInterface(config) {
      return this.each(function () {
        var $this = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        var data = $this.data(DATA_KEY);

        var _config = _objectSpread(_objectSpread(_objectSpread({}, Default), $this.data()), _typeof(config) === 'object' && config ? config : {});

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default;
    }
  }]);

  return Collapse;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
  if (event.currentTarget.tagName === 'A') {
    event.preventDefault();
  }

  var $trigger = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
  var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(this);
  var selectors = [].slice.call(document.querySelectorAll(selector));
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(selectors).each(function () {
    var $target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
    var data = $target.data(DATA_KEY);
    var config = data ? 'toggle' : $trigger.data();

    Collapse._jQueryInterface.call($target, config);
  });
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = Collapse._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = Collapse;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return Collapse._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (Collapse);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/modal.js":
/*!******************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/modal.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'modal';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.modal';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

var Default = {
  backdrop: true,
  keyboard: true,
  focus: true,
  show: true
};
var DefaultType = {
  backdrop: '(boolean|string)',
  keyboard: 'boolean',
  focus: 'boolean',
  show: 'boolean'
};
var Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  FOCUSIN: "focusin".concat(EVENT_KEY),
  RESIZE: "resize".concat(EVENT_KEY),
  CLICK_DISMISS: "click.dismiss".concat(EVENT_KEY),
  KEYDOWN_DISMISS: "keydown.dismiss".concat(EVENT_KEY),
  MOUSEUP_DISMISS: "mouseup.dismiss".concat(EVENT_KEY),
  MOUSEDOWN_DISMISS: "mousedown.dismiss".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  SCROLLABLE: 'modal-dialog-scrollable',
  SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
  BACKDROP: 'modal-backdrop',
  OPEN: 'modal-open',
  FADE: 'fade',
  SHOW: 'show'
};
var Selector = {
  DIALOG: '.modal-dialog',
  MODAL_BODY: '.modal-body',
  DATA_TOGGLE: '[data-toggle="modal"]',
  DATA_DISMISS: '[data-dismiss="modal"]',
  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
  STICKY_CONTENT: '.sticky-top'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Modal = /*#__PURE__*/function () {
  function Modal(element, config) {
    _classCallCheck(this, Modal);

    this._config = this._getConfig(config);
    this._element = element;
    this._dialog = element.querySelector(Selector.DIALOG);
    this._backdrop = null;
    this._isShown = false;
    this._isBodyOverflowing = false;
    this._ignoreBackdropClick = false;
    this._isTransitioning = false;
    this._scrollbarWidth = 0;
  } // Getters


  _createClass(Modal, [{
    key: "toggle",
    // Public
    value: function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
  }, {
    key: "show",
    value: function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SHOW, {
        relatedTarget: relatedTarget
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    }
  }, {
    key: "hide",
    value: function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.HIDE);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).off(Event.FOCUSIN);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).removeClass(ClassName.SHOW);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).off(Event.CLICK_DISMISS);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._dialog).off(Event.MOUSEDOWN_DISMISS);

      if (transition) {
        var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._element);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        this._hideModal();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      [window, this._element, this._dialog].forEach(function (htmlElement) {
        return jquery__WEBPACK_IMPORTED_MODULE_0___default()(htmlElement).off(EVENT_KEY);
      });
      /**
       * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `Event.CLICK_DATA_API` event that should remain
       */

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).off(Event.FOCUSIN);
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._isTransitioning = null;
      this._scrollbarWidth = null;
    }
  }, {
    key: "handleUpdate",
    value: function handleUpdate() {
      this._adjustDialog();
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default), config);
      _util__WEBPACK_IMPORTED_MODULE_1__["default"].typeCheckConfig(NAME, config, DefaultType);
      return config;
    }
  }, {
    key: "_showElement",
    value: function _showElement(relatedTarget) {
      var _this3 = this;

      var transition = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.FADE);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._dialog).hasClass(ClassName.SCROLLABLE)) {
        this._dialog.querySelector(Selector.MODAL_BODY).scrollTop = 0;
      } else {
        this._element.scrollTop = 0;
      }

      if (transition) {
        _util__WEBPACK_IMPORTED_MODULE_1__["default"].reflow(this._element);
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).addClass(ClassName.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this3._config.focus) {
          _this3._element.focus();
        }

        _this3._isTransitioning = false;
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this3._element).trigger(shownEvent);
      };

      if (transition) {
        var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._dialog);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._dialog).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
      } else {
        transitionComplete();
      }
    }
  }, {
    key: "_enforceFocus",
    value: function _enforceFocus() {
      var _this4 = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).off(Event.FOCUSIN) // Guard against infinite focus loop
      .on(Event.FOCUSIN, function (event) {
        if (document !== event.target && _this4._element !== event.target && jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this4._element).has(event.target).length === 0) {
          _this4._element.focus();
        }
      });
    }
  }, {
    key: "_setEscapeEvent",
    value: function _setEscapeEvent() {
      var _this5 = this;

      if (this._isShown && this._config.keyboard) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE) {
            event.preventDefault();

            _this5.hide();
          }
        });
      } else if (!this._isShown) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).off(Event.KEYDOWN_DISMISS);
      }
    }
  }, {
    key: "_setResizeEvent",
    value: function _setResizeEvent() {
      var _this6 = this;

      if (this._isShown) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(Event.RESIZE, function (event) {
          return _this6.handleUpdate(event);
        });
      } else {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).off(Event.RESIZE);
      }
    }
  }, {
    key: "_hideModal",
    value: function _hideModal() {
      var _this7 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._isTransitioning = false;

      this._showBackdrop(function () {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).removeClass(ClassName.OPEN);

        _this7._resetAdjustments();

        _this7._resetScrollbar();

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this7._element).trigger(Event.HIDDEN);
      });
    }
  }, {
    key: "_removeBackdrop",
    value: function _removeBackdrop() {
      if (this._backdrop) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).remove();
        this._backdrop = null;
      }
    }
  }, {
    key: "_showBackdrop",
    value: function _showBackdrop(callback) {
      var _this8 = this;

      var animate = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName.BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).appendTo(document.body);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).on(Event.CLICK_DISMISS, function (event) {
          if (_this8._ignoreBackdropClick) {
            _this8._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          if (_this8._config.backdrop === 'static') {
            _this8._element.focus();
          } else {
            _this8.hide();
          }
        });

        if (animate) {
          _util__WEBPACK_IMPORTED_MODULE_1__["default"].reflow(this._backdrop);
        }

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).addClass(ClassName.SHOW);

        if (!callback) {
          return;
        }

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._backdrop);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).removeClass(ClassName.SHOW);

        var callbackRemove = function callbackRemove() {
          _this8._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.FADE)) {
          var _backdropTransitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(this._backdrop);

          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._backdrop).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------

  }, {
    key: "_adjustDialog",
    value: function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = "".concat(this._scrollbarWidth, "px");
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = "".concat(this._scrollbarWidth, "px");
      }
    }
  }, {
    key: "_resetAdjustments",
    value: function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    }
  }, {
    key: "_checkScrollbar",
    value: function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    }
  }, {
    key: "_setScrollbar",
    value: function _setScrollbar() {
      var _this9 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
        var stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT)); // Adjust fixed content padding

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(fixedContent).each(function (index, element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).css('padding-right');
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).data('padding-right', actualPadding).css('padding-right', "".concat(parseFloat(calculatedPadding) + _this9._scrollbarWidth, "px"));
        }); // Adjust sticky content margin

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(stickyContent).each(function (index, element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).css('margin-right');
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).data('margin-right', actualMargin).css('margin-right', "".concat(parseFloat(calculatedMargin) - _this9._scrollbarWidth, "px"));
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).css('padding-right');
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).data('padding-right', actualPadding).css('padding-right', "".concat(parseFloat(calculatedPadding) + this._scrollbarWidth, "px"));
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).addClass(ClassName.OPEN);
    }
  }, {
    key: "_resetScrollbar",
    value: function _resetScrollbar() {
      // Restore fixed content padding
      var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(fixedContent).each(function (index, element) {
        var padding = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).data('padding-right');
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).removeData('padding-right');
        element.style.paddingRight = padding ? padding : '';
      }); // Restore sticky content

      var elements = [].slice.call(document.querySelectorAll("".concat(Selector.STICKY_CONTENT)));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(elements).each(function (index, element) {
        var margin = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).data('margin-right');

        if (typeof margin !== 'undefined') {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).data('padding-right');
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document.body).removeData('padding-right');
      document.body.style.paddingRight = padding ? padding : '';
    }
  }, {
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static

  }], [{
    key: "_jQueryInterface",
    value: function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY);

        var _config = _objectSpread(_objectSpread(_objectSpread({}, Default), jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data()), _typeof(config) === 'object' && config ? config : {});

        if (!data) {
          data = new Modal(this, _config);
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default;
    }
  }]);

  return Modal;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
  var _this10 = this;

  var target;
  var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(this);

  if (selector) {
    target = document.querySelector(selector);
  }

  var config = jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).data(DATA_KEY) ? 'toggle' : _objectSpread(_objectSpread({}, jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).data()), jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data());

  if (this.tagName === 'A' || this.tagName === 'AREA') {
    event.preventDefault();
  }

  var $target = jquery__WEBPACK_IMPORTED_MODULE_0___default()(target).one(Event.SHOW, function (showEvent) {
    if (showEvent.isDefaultPrevented()) {
      // Only register focus restorer if modal will actually get shown
      return;
    }

    $target.one(Event.HIDDEN, function () {
      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this10).is(':visible')) {
        _this10.focus();
      }
    });
  });

  Modal._jQueryInterface.call(jquery__WEBPACK_IMPORTED_MODULE_0___default()(target), config, this);
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = Modal._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = Modal;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return Modal._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (Modal);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/scrollspy.js":
/*!**********************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/scrollspy.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'scrollspy';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.scrollspy';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var Default = {
  offset: 10,
  method: 'auto',
  target: ''
};
var DefaultType = {
  offset: 'number',
  method: 'string',
  target: '(string|element)'
};
var Event = {
  ACTIVATE: "activate".concat(EVENT_KEY),
  SCROLL: "scroll".concat(EVENT_KEY),
  LOAD_DATA_API: "load".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  DROPDOWN_ITEM: 'dropdown-item',
  DROPDOWN_MENU: 'dropdown-menu',
  ACTIVE: 'active'
};
var Selector = {
  DATA_SPY: '[data-spy="scroll"]',
  ACTIVE: '.active',
  NAV_LIST_GROUP: '.nav, .list-group',
  NAV_LINKS: '.nav-link',
  NAV_ITEMS: '.nav-item',
  LIST_ITEMS: '.list-group-item',
  DROPDOWN: '.dropdown',
  DROPDOWN_ITEMS: '.dropdown-item',
  DROPDOWN_TOGGLE: '.dropdown-toggle'
};
var OffsetMethod = {
  OFFSET: 'offset',
  POSITION: 'position'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var ScrollSpy = /*#__PURE__*/function () {
  function ScrollSpy(element, config) {
    var _this = this;

    _classCallCheck(this, ScrollSpy);

    this._element = element;
    this._scrollElement = element.tagName === 'BODY' ? window : element;
    this._config = this._getConfig(config);
    this._selector = "".concat(this._config.target, " ").concat(Selector.NAV_LINKS, ",") + "".concat(this._config.target, " ").concat(Selector.LIST_ITEMS, ",") + "".concat(this._config.target, " ").concat(Selector.DROPDOWN_ITEMS);
    this._offsets = [];
    this._targets = [];
    this._activeTarget = null;
    this._scrollHeight = 0;
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._scrollElement).on(Event.SCROLL, function (event) {
      return _this._process(event);
    });
    this.refresh();

    this._process();
  } // Getters


  _createClass(ScrollSpy, [{
    key: "refresh",
    // Public
    value: function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = [].slice.call(document.querySelectorAll(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(element);

        if (targetSelector) {
          target = document.querySelector(targetSelector);
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [jquery__WEBPACK_IMPORTED_MODULE_0___default()(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._scrollElement).off(EVENT_KEY);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default), _typeof(config) === 'object' && config ? config : {});

      if (typeof config.target !== 'string') {
        var id = jquery__WEBPACK_IMPORTED_MODULE_0___default()(config.target).attr('id');

        if (!id) {
          id = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getUID(NAME);
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(config.target).attr('id', id);
        }

        config.target = "#".concat(id);
      }

      _util__WEBPACK_IMPORTED_MODULE_1__["default"].typeCheckConfig(NAME, config, DefaultType);
      return config;
    }
  }, {
    key: "_getScrollTop",
    value: function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }
  }, {
    key: "_getScrollHeight",
    value: function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }
  }, {
    key: "_getOffsetHeight",
    value: function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }
  }, {
    key: "_process",
    value: function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      var offsetLength = this._offsets.length;

      for (var i = offsetLength; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    }
  }, {
    key: "_activate",
    value: function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',').map(function (selector) {
        return "".concat(selector, "[data-target=\"").concat(target, "\"],").concat(selector, "[href=\"").concat(target, "\"]");
      });

      var $link = jquery__WEBPACK_IMPORTED_MODULE_0___default()([].slice.call(document.querySelectorAll(queries.join(','))));

      if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
        $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
        $link.addClass(ClassName.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(Selector.NAV_LIST_GROUP).prev("".concat(Selector.NAV_LINKS, ", ").concat(Selector.LIST_ITEMS)).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

        $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._scrollElement).trigger(Event.ACTIVATE, {
        relatedTarget: target
      });
    }
  }, {
    key: "_clear",
    value: function _clear() {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
        return node.classList.contains(ClassName.ACTIVE);
      }).forEach(function (node) {
        return node.classList.remove(ClassName.ACTIVE);
      });
    } // Static

  }], [{
    key: "_jQueryInterface",
    value: function _jQueryInterface(config) {
      return this.each(function () {
        var data = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY);

        var _config = _typeof(config) === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default;
    }
  }]);

  return ScrollSpy;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on(Event.LOAD_DATA_API, function () {
  var scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));
  var scrollSpysLength = scrollSpys.length;

  for (var i = scrollSpysLength; i--;) {
    var $spy = jquery__WEBPACK_IMPORTED_MODULE_0___default()(scrollSpys[i]);

    ScrollSpy._jQueryInterface.call($spy, $spy.data());
  }
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = ScrollSpy._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = ScrollSpy;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return ScrollSpy._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (ScrollSpy);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/tab.js":
/*!****************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/tab.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "../sfra/node_modules/bootstrap/js/src/util.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */


/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'tab';
var VERSION = '4.3.1';
var DATA_KEY = 'bs.tab';
var EVENT_KEY = ".".concat(DATA_KEY);
var DATA_API_KEY = '.data-api';
var JQUERY_NO_CONFLICT = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME];
var Event = {
  HIDE: "hide".concat(EVENT_KEY),
  HIDDEN: "hidden".concat(EVENT_KEY),
  SHOW: "show".concat(EVENT_KEY),
  SHOWN: "shown".concat(EVENT_KEY),
  CLICK_DATA_API: "click".concat(EVENT_KEY).concat(DATA_API_KEY)
};
var ClassName = {
  DROPDOWN_MENU: 'dropdown-menu',
  ACTIVE: 'active',
  DISABLED: 'disabled',
  FADE: 'fade',
  SHOW: 'show'
};
var Selector = {
  DROPDOWN: '.dropdown',
  NAV_LIST_GROUP: '.nav, .list-group',
  ACTIVE: '.active',
  ACTIVE_UL: '> li > .active',
  DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
  DROPDOWN_TOGGLE: '.dropdown-toggle',
  DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Tab = /*#__PURE__*/function () {
  function Tab(element) {
    _classCallCheck(this, Tab);

    this._element = element;
  } // Getters


  _createClass(Tab, [{
    key: "show",
    // Public
    value: function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.ACTIVE) || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).hasClass(ClassName.DISABLED)) {
        return;
      }

      var target;
      var previous;
      var listElement = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).closest(Selector.NAV_LIST_GROUP)[0];
      var selector = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
        previous = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.makeArray(jquery__WEBPACK_IMPORTED_MODULE_0___default()(listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.HIDE, {
        relatedTarget: this._element
      });
      var showEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(previous).trigger(hideEvent);
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = document.querySelector(selector);
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.HIDDEN, {
          relatedTarget: _this._element
        });
        var shownEvent = jquery__WEBPACK_IMPORTED_MODULE_0___default.a.Event(Event.SHOWN, {
          relatedTarget: previous
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(previous).trigger(hiddenEvent);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private

  }, {
    key: "_activate",
    value: function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).find(Selector.ACTIVE_UL) : jquery__WEBPACK_IMPORTED_MODULE_0___default()(container).children(Selector.ACTIVE);
      var active = activeElements[0];
      var isTransitioning = callback && active && jquery__WEBPACK_IMPORTED_MODULE_0___default()(active).hasClass(ClassName.FADE);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        var transitionDuration = _util__WEBPACK_IMPORTED_MODULE_1__["default"].getTransitionDurationFromElement(active);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(active).removeClass(ClassName.SHOW).one(_util__WEBPACK_IMPORTED_MODULE_1__["default"].TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    }
  }, {
    key: "_transitionComplete",
    value: function _transitionComplete(element, active, callback) {
      if (active) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(active).removeClass(ClassName.ACTIVE);
        var dropdownChild = jquery__WEBPACK_IMPORTED_MODULE_0___default()(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(dropdownChild).removeClass(ClassName.ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).addClass(ClassName.ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      _util__WEBPACK_IMPORTED_MODULE_1__["default"].reflow(element);

      if (element.classList.contains(ClassName.FADE)) {
        element.classList.add(ClassName.SHOW);
      }

      if (element.parentNode && jquery__WEBPACK_IMPORTED_MODULE_0___default()(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
        var dropdownElement = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).closest(Selector.DROPDOWN)[0];

        if (dropdownElement) {
          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(dropdownToggleList).addClass(ClassName.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static

  }], [{
    key: "_jQueryInterface",
    value: function _jQueryInterface(config) {
      return this.each(function () {
        var $this = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this);
        var data = $this.data(DATA_KEY);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }]);

  return Tab;
}();
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
  event.preventDefault();

  Tab._jQueryInterface.call(jquery__WEBPACK_IMPORTED_MODULE_0___default()(this), 'show');
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = Tab._jQueryInterface;
jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].Constructor = Tab;

jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME].noConflict = function () {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn[NAME] = JQUERY_NO_CONFLICT;
  return Tab._jQueryInterface;
};

/* harmony default export */ __webpack_exports__["default"] = (Tab);

/***/ }),

/***/ "../sfra/node_modules/bootstrap/js/src/util.js":
/*!*****************************************************!*\
  !*** ../sfra/node_modules/bootstrap/js/src/util.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.3.1): util.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Private TransitionEnd Helpers
 * ------------------------------------------------------------------------
 */

var TRANSITION_END = 'transitionend';
var MAX_UID = 1000000;
var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

function toType(obj) {
  return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
}

function getSpecialTransitionEndEvent() {
  return {
    bindType: TRANSITION_END,
    delegateType: TRANSITION_END,
    handle: function handle(event) {
      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(event.target).is(this)) {
        return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
      }

      return undefined; // eslint-disable-line no-undefined
    }
  };
}

function transitionEndEmulator(duration) {
  var _this = this;

  var called = false;
  jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).one(Util.TRANSITION_END, function () {
    called = true;
  });
  setTimeout(function () {
    if (!called) {
      Util.triggerTransitionEnd(_this);
    }
  }, duration);
  return this;
}

function setTransitionEndSupport() {
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.fn.emulateTransitionEnd = transitionEndEmulator;
  jquery__WEBPACK_IMPORTED_MODULE_0___default.a.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
}
/**
 * --------------------------------------------------------------------------
 * Public Util Api
 * --------------------------------------------------------------------------
 */


var Util = {
  TRANSITION_END: 'bsTransitionEnd',
  getUID: function getUID(prefix) {
    do {
      // eslint-disable-next-line no-bitwise
      prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
    } while (document.getElementById(prefix));

    return prefix;
  },
  getSelectorFromElement: function getSelectorFromElement(element) {
    var selector = element.getAttribute('data-target');

    if (!selector || selector === '#') {
      var hrefAttr = element.getAttribute('href');
      selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
    }

    try {
      return document.querySelector(selector) ? selector : null;
    } catch (err) {
      return null;
    }
  },
  getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
    if (!element) {
      return 0;
    } // Get transition-duration of the element


    var transitionDuration = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).css('transition-duration');
    var transitionDelay = jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).css('transition-delay');
    var floatTransitionDuration = parseFloat(transitionDuration);
    var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0;
    } // If multiple durations are defined, take the first


    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];
    return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
  },
  reflow: function reflow(element) {
    return element.offsetHeight;
  },
  triggerTransitionEnd: function triggerTransitionEnd(element) {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(element).trigger(TRANSITION_END);
  },
  // TODO: Remove in v5
  supportsTransitionEnd: function supportsTransitionEnd() {
    return Boolean(TRANSITION_END);
  },
  isElement: function isElement(obj) {
    return (obj[0] || obj).nodeType;
  },
  typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
    for (var property in configTypes) {
      if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
        var expectedTypes = configTypes[property];
        var value = config[property];
        var valueType = value && Util.isElement(value) ? 'element' : toType(value);

        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new Error("".concat(componentName.toUpperCase(), ": ") + "Option \"".concat(property, "\" provided type \"").concat(valueType, "\" ") + "but expected type \"".concat(expectedTypes, "\"."));
        }
      }
    }
  },
  findShadowRoot: function findShadowRoot(element) {
    if (!document.documentElement.attachShadow) {
      return null;
    } // Can find the shadow root otherwise it'll return the document


    if (typeof element.getRootNode === 'function') {
      var root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null;
    }

    if (element instanceof ShadowRoot) {
      return element;
    } // when we don't find a shadow root


    if (!element.parentNode) {
      return null;
    }

    return Util.findShadowRoot(element.parentNode);
  }
};
setTransitionEndSupport();
/* harmony default export */ __webpack_exports__["default"] = (Util);

/***/ }),

/***/ "../sfra/node_modules/jquery/dist/jquery.js":
/*!**************************************************!*\
  !*** ../sfra/node_modules/jquery/dist/jquery.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "../sfra/node_modules/lodash/_Symbol.js":
/*!**********************************************!*\
  !*** ../sfra/node_modules/lodash/_Symbol.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../sfra/node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../sfra/node_modules/lodash/_baseGetTag.js":
/*!**************************************************!*\
  !*** ../sfra/node_modules/lodash/_baseGetTag.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../sfra/node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../sfra/node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../sfra/node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../sfra/node_modules/lodash/_freeGlobal.js":
/*!**************************************************!*\
  !*** ../sfra/node_modules/lodash/_freeGlobal.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../hbc_saksfifthavenue/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../sfra/node_modules/lodash/_getRawTag.js":
/*!*************************************************!*\
  !*** ../sfra/node_modules/lodash/_getRawTag.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../sfra/node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../sfra/node_modules/lodash/_objectToString.js":
/*!******************************************************!*\
  !*** ../sfra/node_modules/lodash/_objectToString.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../sfra/node_modules/lodash/_root.js":
/*!********************************************!*\
  !*** ../sfra/node_modules/lodash/_root.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../sfra/node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../sfra/node_modules/lodash/debounce.js":
/*!***********************************************!*\
  !*** ../sfra/node_modules/lodash/debounce.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../sfra/node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "../sfra/node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "../sfra/node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "../sfra/node_modules/lodash/isObject.js":
/*!***********************************************!*\
  !*** ../sfra/node_modules/lodash/isObject.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../sfra/node_modules/lodash/isObjectLike.js":
/*!***************************************************!*\
  !*** ../sfra/node_modules/lodash/isObjectLike.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../sfra/node_modules/lodash/isSymbol.js":
/*!***********************************************!*\
  !*** ../sfra/node_modules/lodash/isSymbol.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../sfra/node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../sfra/node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../sfra/node_modules/lodash/now.js":
/*!******************************************!*\
  !*** ../sfra/node_modules/lodash/now.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../sfra/node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "../sfra/node_modules/lodash/toNumber.js":
/*!***********************************************!*\
  !*** ../sfra/node_modules/lodash/toNumber.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../sfra/node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../sfra/node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/atm/atmHelper.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/atm/atmHelper.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var atmHelper = __webpack_require__(/*! core/atm/atmHelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atmHelper.js");
/**
 * Updates product array
 *
 * @param {function} callback - callback function
 */

/**
 * Provide product info
 * @returns {Object} product get product info from Cart
 */


function provideProductInfoInCart(pid) {
  var cartProdID = pid;
  var cartProd = $('.prdt-cart-details').find('[data-atm-selectedsku="' + cartProdID + '"]');
  var product = {};
  product.brand = cartProd.find('.brand-name').length ? $('.brand-name').first().text().trim() : '';
  product.code = cartProd.length ? cartProd.data('atm-code') : '';
  product.name = cartProd.find('.bfx-product-name').first().text().trim();
  var orgPrice = null;
  var tprice = null;

  if ($('.price .range').length) {
    orgPrice = cartProd.find('.bfx-list-price.formatted_price').first().data('unformatted-price').toString();
    tprice = cartProd.find('.bfx-list-price.formatted_price').last().data('unformatted-price').toString();
  } else {
    orgPrice = cartProd.find('.bfx-list-price.formatted_price').data('unformatted-price').toString();
    tprice = cartProd.find('.bfx-sale-price.formatted_price').length ? cartProd.find('.bfx-sale-price.formatted_price').data('unformatted-price').toString() : cartProd.find('.bfx-list-price.formatted_price').data('unformatted-price').toString();
  }

  product.original_price = orgPrice;
  product.price = tprice;
  product.quantity = cartProd.find('.bfx-product-qty').val().toString();
  product.selected_sku = cartProdID.toString();
  return product;
}
/**
 * Load product object
 * @param {Object} qproduct product from response
 * @returns {Object} product updated product
 */


function loadProductObject(qproduct) {
  var product = {};

  if (qproduct) {
    product.brand = qproduct.brand.name ? qproduct.brand.name : '';
    product.code = qproduct.masterProductID;
    product.name = qproduct.productName;
    var orgPrice = null;

    if (qproduct.price.type && qproduct.price.type === 'range') {
      orgPrice = qproduct.price.max.list === null ? qproduct.price.max.sales.value : qproduct.price.max.list.value;
    } else if (qproduct.productType === 'set') {
      orgPrice = qproduct.price.list.value === null ? qproduct.price.sales.value : qproduct.price.list.value;
    } else {
      orgPrice = qproduct.price.list === null ? qproduct.price.sales.value : qproduct.price.list.value;
    }

    product.original_price = orgPrice !== null ? orgPrice.toString() : '';
    product.price = qproduct.price.type && qproduct.price.type === 'range' ? qproduct.price.max.sales.value.toString() : qproduct.price.sales.value.toString();
    product.selected_sku = qproduct.id;
  }

  return product;
}
/**
 * Provide product info
 * @returns {Object} same day delivery product get product info from Cart
 */


function getsddProductsArray(data) {
  var productsarray = [];

  if (data.cartModel && data.cartModel.items && data.cartModel.items.length) {
    $.each(data.cartModel.items, function (index, item) {
      if (typeof item.sddDetails.unitsAvailable !== 'undefined' && item.sddDetails.unitsAvailable >= item.quantity && typeof ssdstoreid !== 'null') {
        var product = {};
        var orgPrice = null;
        product.sdd_stores_available = '1';
        product.sdd_stores_found = '1';
        product.sdd_zip_code = data.ssdPostal;
        product.brand = item.brand.name;
        product.code = item.masterProductID;
        product.name = item.productName;
        product.quantity = item.quantity.toString();
        product.selected_sku = item.id.toString();

        if (typeof item.price.type !== 'undefined' && item.price.type === 'range' && typeof item.price.max !== 'undefined') {
          product.price = item.price.max.sales.value.toString();
        } else {
          product.price = item.price.sales.value.toString();
        }

        if (typeof item.price.type !== 'undefined' && item.price.type === 'range' && typeof item.price.max !== 'undefined') {
          orgPrice = item.price.max.list !== null ? item.price.max.list.value : tem.price.max.sales.value;
        } else if (item.productType === 'set') {
          orgPrice = item.price.list.value === null ? item.price.sales.value : item.price.list.value;
        } else {
          orgPrice = item.price.list === null ? item.price.sales.value : item.price.list.value;
        }

        item.original_price = orgPrice !== null ? orgPrice.toString() : '';
        productsarray.push(product);
      }
    });
  }

  return productsarray;
}
/**
 * get selected stores
 * @returns {Object} array return all stores
 */


function getStores() {
  var refinementValuesArray = {};

  if ($('#bopisCheck:checked').length) {
    refinementValuesArray.name = $('a.change-store').text().trim();
    refinementValuesArray.type = 'selected';
  }

  return refinementValuesArray;
}
/**
 * Get refinement
 * @param {string} $this - current element
 * @returns {Object} - refinement object
 */


function getRefinement($this) {
  var refinements = [];
  $.each($('.refinements .refinement'), function (index, refinement) {
    var trefinement = {};
    trefinement.name = $(refinement).find('.card-header h2').text().trim();
    trefinement.values = [];
    var refinementValuesArray = {};

    if ($(refinement).hasClass('refinement-category') && $($this).find('.refinement-category').text()) {
      refinementValuesArray.name = $($this).find('.refinement-category').text().trim();
      refinementValuesArray.type = 'selected';
      trefinement.values.push(refinementValuesArray);
    } else if ($(refinement).hasClass('refinement-color')) {
      $.each($('.refinement-color .selected'), function (indexColor, colorRefinement) {
        refinementValuesArray = {};
        refinementValuesArray.name = $(colorRefinement).attr('title');
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-price')) {
      $.each($('.refinement-price .selected'), function (indexPrice, priceRange) {
        refinementValuesArray.name = $(priceRange).closest('li').find('.bfx-price').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });

      if (trefinement.values.length === 0 && $('input[name="filterMinprice"]').length > 0 && $('input[name="filterMaxprice"]').length > 0) {
        var minVal = parseInt($('input[name$="filterMinprice"]').val());
        var maxVal = parseInt($('input[name$="filterMaxprice"]').val());

        if (!isNaN(minVal) && !isNaN(maxVal)) {
          refinementValuesArray.name = '$' + minVal + '-' + '$' + maxVal;
          refinementValuesArray.type = 'selected';
          trefinement.values.push(refinementValuesArray);
        }
      }

      if (trefinement.values.length === 0 && $('input[name$="minPrice"]').val() != '' && $('input[name$="maxPrice"]').val() != '') {
        var minVal = parseInt($('input[name$="minPrice"]').val());
        var maxVal = parseInt($('input[name$="maxPrice"]').val());

        if (!isNaN(minVal) && !isNaN(maxVal)) {
          refinementValuesArray.name = '$' + minVal + '-' + '$' + maxVal;
          refinementValuesArray.type = 'selected';
          trefinement.values.push(refinementValuesArray);
        }
      }
    } else if ($(refinement).hasClass('refinement-promotion')) {
      $.each($('.refinement-promotion .selected'), function (indexPromo, promoRefinement) {
        refinementValuesArray.name = $(promoRefinement).next('span').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-sales--offers')) {
      $.each($('.refinement-sales--offers .selected'), function (indexPrice, promoRefinement) {
        refinementValuesArray.name = $(promoRefinement).next('span').text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else if ($(refinement).hasClass('refinement-get-it-fast')) {
      $.each($('#refinement-get-it-fast input:checked'), function (indexPrice, getitfastRefinement) {
        refinementValuesArray.name = $(getitfastRefinement).val().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    } else {
      $.each($(refinement).find('ul li .selected'), function (indexother, attrRefinement) {
        refinementValuesArray = {};
        refinementValuesArray.name = $(attrRefinement).clone().children().remove().end().text().trim();
        refinementValuesArray.type = 'selected';
        trefinement.values.push(refinementValuesArray);
      });
    }

    refinements.push(trefinement);
  });
  var storeRefinement = {};
  storeRefinement.name = 'stores';
  storeRefinement.values = [];
  var storesArray = getStores();

  if (!jQuery.isEmptyObject(storesArray)) {
    storeRefinement.values.push(storesArray);
  }

  refinements.push(storeRefinement);
  return refinements;
}
/**
 * Get All Products
 * @returns {Object} - return all products
 */


function getProducts() {
  var products = [];
  $.each($('div[data-pid].product'), function (index, item) {
    var product = {};
    product.code = $(item).data('pid') ? $(item).data('pid').toString() : '';
    products.push(product);
  });
  return products;
}
/**
 * Provide product info
 * @returns {Object} product get product info from PDP
 */


function provideProductInfoInPdp() {
  var product = {};
  product.brand = $('.product-detail h1.product-brand-name').length ? $('.product-detail h1.product-brand-name').first().text().trim() : '';
  product.code = $('div[data-atm-code]').length ? $('div[data-atm-code]').data('atm-code') : '';
  product.name = $('.product-detail .product-name').first().text().trim();
  var orgPrice = null;
  var tprice = null;

  if ($('.price .range').length) {
    orgPrice = $('.product-detail .bfx-list-price.formatted_price').first().data('unformatted-price').toString();
    tprice = $('.product-detail .bfx-list-price.formatted_price').last().data('unformatted-price').toString();
  } else {
    orgPrice = $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
    tprice = $('.product-detail .bfx-sale-price.formatted_price').length ? $('.product-detail .bfx-sale-price.formatted_price').data('unformatted-price').toString() : $('.product-detail .bfx-list-price.formatted_price').data('unformatted-price').toString();
  }

  product.original_price = orgPrice;
  product.price = tprice;
  product.quantity = '1';
  product.selected_sku = $('.product-detail').data('pid') ? $('.product-detail').data('pid').toString() : '';
  return product;
}
/**
 * Provide product info
 * @returns {Object} product get product info from Saks landing page
 */


function provideProductInfoInSaksplus() {
  var product = {};
  product.brand = $('input[class*="saksplus-product-brandname"]').data('brandname').toString();
  product.code = $('input[class*="saksplus-product-atm-code"]').data('atm-code').toString();
  product.name = $('input[class*="saksplus-product-name"]').data('product-name').toString();
  product.original_price = $('input[class*="saksplus-product-price"]').data('price').toString();
  product.price = $('input[class*="saksplus-product-price"]').data('price').toString();
  product.quantity = '1';
  product.selected_sku = $('input[class*="product-detail"]').data('pid').toString();
  return product;
}

atmHelper.productArrayUpdate = function (callback) {
  $('body').on('adobeTagManager:productArrayUpdate', function (e, $this) {
    var refinements = getRefinement($this);
    var sortType = 'default';
    var selectedOption = $('.sort-selection-block').find('select[name="sort-order"]')[0].selectedOptions[0];

    if ($(selectedOption).index() > 0) {
      sortType = 'selected';
    }

    var productArray = {
      array_page_number: pageData.product_array ? pageData.product_array.array_page_number : '1',
      //eslint-disable-line
      model_view: pageData.product_array ? pageData.product_array.model_view : 'off',
      refinements: refinements,
      results_per_page: getProducts().length ? getProducts().length.toString() : '0',
      sort: {
        name: $(selectedOption).data('id'),
        type: sortType
      },
      total_results: $('.search-count').data('search-count') ? $('.search-count').data('search-count').toString() : '0',
      results_across: pageData.product_array ? pageData.product_array.results_across : '1' //eslint-disable-line

    };

    if (callback) {
      callback(productArray, getProducts());
    }

    if (window.pageData) {
      window.pageData.product_array = productArray;
      window.pageData.products = getProducts();
    }

    if (window.pageDataObj) {
      window.pageDataObj.product_array = productArray;
      window.pageDataObj.products = getProducts();
    }
  });
};
/**
 * On step change of checkout
 * @param {function} callback - callback function
 */


atmHelper.checkoutStepChange = function (callback) {
  $('body').on('adobeTagManager:checkoutStepChange', function (e, steps) {
    if ($('body').find('.is-invalid').length > 0) {
      return;
    }

    var page = {};

    if (!pageData.visitor) {
      pageData.visitor = {};
    }

    pageData.visitor.amex_points_available = steps.hasAmexPoint;
    page.checkoutStep = steps.step;
    pageData.visitor.email_opt_in = $('#add-to-email-list').length && steps.step === 'payment' ? $('#add-to-email-list').prop('checked').toString() : 'false';

    if (steps.optIn) {
      pageData.visitor.email_opt_in = 'true';
    }

    pageData.visitor.new_account = steps.new_account != 'undefined' && steps.new_account ? 'true' : 'false';
    pageData.visitor.new_payment = steps.newpayment != 'undefined' && steps.newpayment ? 'true' : 'false';

    if (callback) {
      callback(page, pageData.products, pageData.visitor);
    }
  });
};

atmHelper.checkAmexPoints = function (callback) {
  $("body").on("checkout:updateAmexForm", function (e) {
    var orderTotal = parseFloat($(".grand-total-sum").text().replace("$", "").replace(",", ""));
    var amexAmount = parseFloat($("#amex-amount").data("amount"));
    var maxTotal = orderTotal;
    $("#amex-amount").data("amount", maxTotal);
    $(".amex-order-total").text("$" + maxTotal);

    if (callback) {
      callback();
    }
  });
};

atmHelper.applyAmexPoints = function (callback) {
  $('body').on('checkout:applyAmex', function (e) {
    if ($('body').find('.is-invalid').length > 0) {
      return;
    }

    if (callback) {
      callback();
    }
  });
};
/**
 * Quick view events
 * @param {function} callback - Callback function
 */


atmHelper.showQuickView = function (callback) {
  $('body').on('adobeTagManager:showQuickView', function (e, qproduct) {
    var products = [];
    var product = loadProductObject(qproduct);
    product.average_rating = qproduct.starRating ? qproduct.starRating.toString() : '';
    delete product.selected_sku;
    product.skus = qproduct.allAvailableProducts;
    var priceType = '';

    if (qproduct.badge.isClearance) {
      priceType = 'clearance';
    } else if (qproduct.badge.isFinalSale) {
      priceType = 'final sale';
    }

    product.tags = {
      feature_type: qproduct.featuredType.value ? qproduct.featuredType.value : '',
      inventory_label: qproduct.availability.messages && qproduct.availability.messages.length > 0 ? qproduct.availability.messages[0] : '',
      pip_text: qproduct.promotions && qproduct.promotions.length > 0 ? qproduct.promotions[0].calloutMsg : '',
      price_type: priceType,
      publish_date: qproduct.preOrder && qproduct.preOrder.applicable == true ? 'preorder' : 'new',
      returnable: (!qproduct.isNotReturnable.value).toString()
    };
    product.total_reviews = qproduct.turntoReviewCount ? qproduct.turntoReviewCount.toString() : '';
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};
/**
 * trigger on select modelview
 * @param {function} callback function
 */


atmHelper.toggleModelView = function (callback) {
  $('body').on('adobeTagManager:toggleModelView', function (e, $this) {
    var enablemodelview = 'off';

    if ($($this).hasClass('model-view-on')) {
      enablemodelview = 'on';
    }

    var refinements = getRefinement($this);
    var sortType = 'default';

    if ($('.sort-selection-block').find('select[name="sort-order"] option:selected').index() > 0) {
      sortType = 'selected';
    }

    if ($($this).closest('.wishlist-header-wrap').length > 0) {
      var productArray = {
        array_page_number: pageData.product_array ? pageData.product_array.array_page_number : '1',
        //eslint-disable-line
        model_view: enablemodelview,
        results_per_page: getProducts().length ? getProducts().length.toString() : '0',
        total_results: getProducts().length ? getProducts().length.toString() : '0',
        results_across: pageData.product_array ? pageData.product_array.results_across : '1' //eslint-disable-line

      };
    } else {
      var productArray = {
        array_page_number: pageData.product_array ? pageData.product_array.array_page_number : '1',
        //eslint-disable-line
        model_view: enablemodelview,
        refinements: refinements,
        results_per_page: getProducts().length ? getProducts().length.toString() : '0',
        sort: {
          name: $('.sort-selection-block').find('select[name="sort-order"] option:selected').data('id'),
          type: sortType
        },
        total_results: $('.search-count').data('search-count') ? $('.search-count').data('search-count').toString() : '0',
        results_across: pageData.product_array ? pageData.product_array.results_across : '1' //eslint-disable-line

      };
    }

    if (callback) {
      callback(productArray, getProducts());
    }
  });
};
/**
 * Wait list start
 * @param {function} callback function
 */


atmHelper.waitListStart = function (callback) {
  $('body').on('adobe:waitListStart', function () {
    var products = [];

    if ($('#waitlist-form-saksplus').length) {
      var product = provideProductInfoInSaksplus();
    } else {
      var product = provideProductInfoInPdp();
      product.quantity = $('.quantity-val').val();
    }

    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};
/**
 * Wait list complete
 * @param {function} callback function
 */


atmHelper.waitListComplete = function (callback) {
  $('body').on('adobe:waitListComplete', function () {
    var products = [];

    if ($('#waitlist-form-saksplus').length) {
      var product = provideProductInfoInSaksplus();
    } else {
      var product = provideProductInfoInPdp();
      product.quantity = $('.quantity-val').val();
    }

    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};
/**
 * trigger on cancel order
 * @param {function} callback - callback function
 */


atmHelper.cancelOrder = function (callback) {
  $('body').on('adobeTagManager:cancelOrder', function (e, orderNo) {
    if (callback) {
      callback(orderNo);
    }
  });
};
/**
 * Move cart to wishlist
 * @param {function} callback - callback function
 */


atmHelper.cartMoveToFav = function (callback) {
  $('body').on('adobeTagManager:cartMoveToFav', function (e, product) {
    var products = [];
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.sddPDPStart = function (callback) {
  $('body').on('click', '.atm-sdd', function () {
    var products = [];
    var product;
    product = provideProductInfoInPdp();
    product.quantity = $('.quantity-val').val();
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.sddPDPSearch = function (callback) {
  $('body').on('adobe:sddSearch', function (e, data) {
    var products = [];
    var storesfound = '0';
    var availableStore = '';
    var product = provideProductInfoInPdp();

    if (data && data.storeid && typeof data.unitsAvailable !== 'undefined' && data.unitsAvailable > 0) {
      availableStore = data.storeid;
      storesfound = '1';
    }

    product.sdd_stores_available = storesfound;
    product.sdd_stores_found = storesfound;
    product.sdd_zip_code = data.postalCode;
    products.push(product);

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.sddCartSearch = function (callback) {
  $('body').on('adobe:sddCartSearch', function (e, data) {
    if (data) {
      var products = getsddProductsArray(data);
    }

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.sddCartSelect = function (callback) {
  $('body').on('adobe:sddCartSelect', function (e) {
    var products = [];

    if ($('.product-info').length > 0) {
      $('.card').closest('.product-info').each(function () {
        if ($(this).data('issddeligibile')) {
          var pid = $(this).data('atm-selectedsku');
          var product = provideProductInfoInCart(pid);
          products.push(product);
        }
      });
    }

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.selectbonusProduct = function (callback) {
  $('body').on('adobe:selectbonusProduct', function (e, response) {
    var products = [];
    $.each(response.selectedbonusitems, function (index, item) {
      products.push(item);
    });

    if (callback) {
      callback(products);
    }
  });
};

atmHelper.getbonusproductonAppliedCoupon = function (callback) {
  $('body').on('adobe:getbonusproductonAppliedCoupon', function (e, item) {
    var products = [];
    products.push(item);

    if (callback) {
      callback(products);
    }
  });
};
/**
 * Used for search redirects
 * @param {function} callback - callback function
 */


atmHelper.searchRedirect = function (callback) {
  $('body').on('click', 'form.search-form button[name="search-button"]', function (e) {
    var searchTerm = $(this).siblings('input.search-field').val();
    var search = {
      term: searchTerm
    };

    if (callback) {
      callback(search);
    }
  });
};
/**
 * This ATM is used for search sugestion objec
 * @param {function} callback - callback function
 */


atmHelper.suggestedSearch = function (callback) {
  $('body').on('click', '.search-suggestions .search-atm', function () {
    var $this = $(this);
    var search = {
      term: $this.data('term'),
      type: $(this).closest('.search-suggestions').find('header h3').data('atm-searchtype'),
      typedText: $('.search-form .search-field').val()
    };

    if (callback) {
      callback(search);
    }

    return true;
  });
};

module.exports = atmHelper;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cart.js":
/*!*************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cart.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! ../product/base */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/base.js");

var focusHelper = __webpack_require__(/*! base/components/focus */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js");

var login = __webpack_require__(/*! ../login/login */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/login/login.js");

var hbcSlider = __webpack_require__(/*! ../hbcSlider */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js");

var formField = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var hbcTooltip = __webpack_require__(/*! core/tooltip */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/tooltip.js");

var floatLabel = __webpack_require__(/*! core/floatLabel */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/floatLabel.js");

var clientSideValidation = __webpack_require__(/*! core/components/clientSideValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js");

var cartInstoreOptions = __webpack_require__(/*! ../cart/cartInstoreOptions */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cartInstoreOptions.js");

var klarnaClient = __webpack_require__(/*! ../klarnaClientUtils */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/klarnaClientUtils.js");
/**
 * replace content of modal
 * @param {Object} data - discount updation
 */


function updateDiscountsHtml(data) {
  var productLineItems = data.items;
  productLineItems.forEach(function (productLineItem) {
    if (!productLineItem || !productLineItem.isBonusProductLineItem) {
      $('.price_discount-' + productLineItem.UUID).html(productLineItem.discountTotalHtml);
    }
  });
}
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Checks whether the basket is valid. if invalid displays error message and disables
 * checkout button
 * @param {Object} data - AJAX response from the server
 */


function validateBasket(data) {
  if (data.valid.error) {
    if (data.valid.message) {
      var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + data.valid.message + '</div>';
      $('.cart-error').html('');
      $('.cart-error').append(errorHtml);
    } else {
      $('.cart').empty().append('<div class="row"> ' + '<div class="col-12 text-center"> ' + '<h1>' + data.resources.emptyCartMsg + '</h1> ' + '</div> ' + '</div>');
      $('.number-of-items').empty().append(data.resources.numberOfItems);
      $('.minicart-quantity').empty().append(data.numItems);
      $('.minicart-link').attr({
        'aria-label': data.resources.minicartCountOfItems,
        title: data.resources.minicartCountOfItems
      });
      $('.minicart .popover').empty();
      $('.minicart .popover').removeClass('show');
    }

    $('.checkout-btn, .proxy-checkout-btn').addClass('disabled');
  } else {
    $('.checkout-btn, .proxy-checkout-btn').removeClass('disabled');
  }
}
/**
 * Update tax totals
 *
 * @param {Object} data - Tax totals data
 */


function updateTaxTotal(data) {
  if (data.totals.canadaTaxation && data.totals.canadaTaxation.PST) {
    $('.tax-PST-total').empty().append(data.totals.canadaTaxation.PST);
    $('.tax-pst').removeClass('d-none');
  } else if (!$('.tax-pst').hasClass('d-none')) {
    $('.tax-pst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation['GST/HST']) {
    $('.tax-GST-total').empty().append(data.totals.canadaTaxation['GST/HST']);
    $('.tax-gst').removeClass('d-none');
  } else if (!$('.tax-gst').hasClass('d-none')) {
    $('.tax-gst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.QST) {
    $('.tax-QST-total').empty().append(data.totals.canadaTaxation.QST);
    $('.tax-qst').removeClass('d-none');
  } else if (!$('.tax-qst').hasClass('d-none')) {
    $('.tax-qst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.RST) {
    $('.tax-RST-total').empty().append(data.totals.canadaTaxation.RST);
    $('.tax-rst').removeClass('d-none');
  } else if (!$('.tax-rst').hasClass('d-none')) {
    $('.tax-rst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.ECO) {
    $('.tax-ECO-total').empty().append(data.totals.canadaTaxation.ECO);
    $('.tax-eco').removeClass('d-none');
  } else if (!$('.tax-eco').hasClass('d-none')) {
    $('.tax-eco').addClass('d-none');
  }

  if (!data.totals.canadaTaxation) {
    $('.tax-total').empty().append(data.totals.totalTax);
    $('.tax-normal').removeClass('d-none');
  } else if (!$('.tax-normal').hasClass('d-none')) {
    $('.tax-normal').addClass('d-none');
  }
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} data - AJAX response from the server
 */


function updateCartTotals(data) {
  $('.number-of-items').empty().append(data.resources.numberOfItems);
  $('.shipping-total-cost').empty().append(data.totals.totalShippingCost);
  $('.shipping-method-price').empty().append('- ' + data.totals.totalShippingCost);
  updateTaxTotal(data);
  $('.grand-total-sum').empty().append(data.totals.grandTotal);
  $('.amex-amount').empty().val(data.totals.grandTotal);
  $('.grand-total-value').empty().append(data.totals.grandTotalValue);
  klarnaClient.toggleKlarnaOrderSummary(data.totals.grandTotalValue, data.items);
  $('body').trigger('checkout:updateApplicablePaymentMethods', [data.applicablePaymentMethods]);
  $('.sub-total').empty().append(data.totals.subTotal);
  $('.mini-sub-total').empty().append(data.totals.miniCartEstimatedTotal);
  $('.minicart-quantity').empty().append(data.numItems);
  $('.minicart-link').attr({
    'aria-label': data.resources.minicartCountOfItems,
    title: data.resources.minicartCountOfItems
  });

  if (data.totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  }

  if (data.totals.totalShippingCostUnformatted == 0 || data.totals.totalShippingCostUnformatted == data.totals.shippingLevelDiscountTotal.value) {
    $('.shipping-total-cost').empty().append(data.totals.freeShippingText);
    $('.shipping-method-price').empty().append('- ' + data.totals.freeShippingText);
  } else {
    $('.shipping-total-cost').empty().append(data.totals.totalShippingCost);
  }

  if (data.totals.shippingLevelDiscountTotal.value > 0 && data.totals.totalShippingCostUnformatted != data.totals.shippingLevelDiscountTotal.value) {
    $('.shipping-discount').removeClass('hide-shipping-discount');
    $('.shipping-discount-total').empty().append('- ' + data.totals.shippingLevelDiscountTotal.formatted);
  } else {
    $('.shipping-discount').addClass('hide-shipping-discount');
    $('.shipping-discount-total').empty().append('- ' + data.totals.shippingLevelDiscountTotal.formatted);
  } // append hidden values for bfx-order discount. This tag excludes the product promo price unlike the above orderLevetotalDiscount


  if (data.totals.orderLevelDiscTotalExc.value > 0) {
    $('.order-discount-exlc-total').empty().append('- ' + data.totals.orderLevelDiscTotalExc.formatted);
  }

  if (data.totals.totalSavings.value > 0) {
    $('.grand-total-saving-container').removeClass('d-none');
    $('.checkout-total-savings').empty().append(data.totals.totalSavings.formatted);
  } else {
    $('.grand-total-saving-container').addClass('d-none');
  }

  data.items.forEach(function (item) {
    if (item.checkoutDiscountTotalHtml) {
      $('.checkout_discount-' + item.UUID).html(item.checkoutDiscountTotalHtml);
    }
  });

  if (data.totals.associateOrFDDMsg !== '') {
    $('.associate-fdd-promo').removeClass('d-none');
    $('.associate-promo-msg').empty().append(data.totals.associateOrFDDMsg);
  } else {
    $('.associate-fdd-promo').addClass('d-none');
  }

  if (data.totals.hudsonpoint > 0) {
    $('.hudson-reward-points .hudson-point').html(data.totals.hudsonpoint);
  } else {
    $('.hudson-reward-points').addClass('d-none');
  }

  try {
    $('body').trigger('checkout:amexSummaryUpdate', data);

    if (data.totals.preorder && data.totals.preorder && data.totals.preorder.hasOnePreOrderItem) {
      var bfxpreorderhtml = '<div class="hidden d-none bfxpreorder"><div class="bfx-customData-label hidden d-none">PreOrder-CustomData</div>' + '<div class="bfx-customData-value hidden d-none">' + 'RequestProcessed:Y,RequestAmount:' + data.totals.preorder.RequestAmount + ',ExtnTenderMaxLimit:' + data.totals.preorder.ExtnTenderMaxLimit + '</div></div>';
      $('.bfxpreorder').remove();
      $('.cart-summary-details').before(bfxpreorderhtml);
    }
  } catch (e) {}

  if ($('.sr_express_checkout').length > 0) {
    if (!!data.shopRunnerEnabled && !!data.isAllProductsSREligible) {
      $('.sr_express_checkout').empty().append(data.shoprunnerExpressHTML);
    } else {
      $('.sr_express_checkout').empty();
    }
  }

  if ($('.MP-wrap').length > 0) {
    if (!!data.shopRunnerEnabled && !!data.isAllProductsSREligible && data.showExpressCheckoutButtonOnCart) {
      $('.MP-wrap').addClass('SR-MP-both');
    } else {
      $('.MP-wrap').removeClass('SR-MP-both');
    }
  }
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} message - Error message to display
 */


function createErrorNotification(message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $('.cart-error').html('');
  $('.cart-error').html(errorHtml);
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} message - Error message to display
 */


function createErrorNotificationOnLineItem(message, lineItem) {
  var errorHtml = '<div class="alert alert-dismissible valid-cart-error line-item-error' + 'fade show" role="alert">' + message + '</div>';
  $(lineItem).find('.qty-error-message').html('');
  $(lineItem).find('.qty-error-message').html(errorHtml);
  setTimeout(function () {
    $(lineItem).find('.qty-error-message').html('');
  }, 3000);
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} message - Error message to display
 */


function createPurchaseErrorNotificationAtLineItem(message, element) {
  element.closest('.product-info').find('.cannot-shipping-message').remove();
  var errorHtml = '<div class="col12 value content cannot-shipping-message cannot-ship-error">' + message + '</div>';
  element.closest('.product-info').prepend(errorHtml);
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} message - Error message to display
 */


function createErrorNotificationQuickView(message) {
  var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + message + '</div>';
  $('div.error-msg').append(errorHtml);
}
/**
 * re-renders the approaching discount messages
 * @param {Object} approachingDiscounts - updated approaching discounts for the cart
 */


function updateApproachingDiscounts(approachingDiscounts) {
  var html = '';
  $('.approaching-discounts').empty();

  if (approachingDiscounts.length > 0) {
    approachingDiscounts.forEach(function (item) {
      html += '<div class="single-approaching-discount text-center">' + item.discountMsg + '</div>';
    });
  }

  $('.approaching-discounts').append(html);
}
/**
 * Updates the promo code count in the header of the Coupon Section
 * @param {Object} data - updates the promo code count in the header of the Coupon Section
 */


function updateAppliedCouponCount(data) {
  var html = '';
  $('.promo-heading.promo-label').empty();
  $('.promo-code-form .form-control').removeClass('is-invalid');
  $('.coupon-error-message').empty(); // eslint-disable-next-line radix

  if (parseInt(data.totalAppliedCoupons) === 0) {
    html = data.noCouponMsg; // eslint-disable-next-line radix
  } else if (parseInt(data.totalAppliedCoupons) === 1) {
    html = data.singleCouponMsg + ' (' + data.totalAppliedCoupons + ')';
  } else {
    html = data.multipleCouponMsg + ' (' + data.totalAppliedCoupons + ')';
  }

  $('.promo-heading.promo-label').append(html);
}

function updateSDDInfo(data, uuid) {
  if (data.isSDDEligible && $('input[name="shipto_' + uuid + '"]:checked').length > 0 && $('input[name="shipto_' + uuid + '"]:checked').val() === 'shipto') {
    if (data.ssdQtyUpdated && data.ssdQtyUpdated === true && data.ssdQtyErrorMsg) {
      $('.uuid-' + uuid).find('.cannot-shipping-message').html(data.ssdQtyErrorMsg);
    } else {
      $('.uuid-' + uuid).find('.cannot-shipping-message').html('');
    }
  }
}
/**
 * Updates the Total Savings value on Cart update.
 * @param {Object} data - Updates the Total Savings value on Cart update.
 */


function updateTotalSavings(data) {
  if (data.totals.totalSavings.value > 0) {
    $('.estm-saved').removeClass('d-none');
    $('.total-savings').empty().append(data.totals.totalSavings.formatted);
  } else {
    $('.estm-saved').addClass('d-none');
  }
}
/**
 * Updates the order summary on cart.
 * @param {Object} data - Updates the Total Savings value on Cart update.
 */


function updateOrderSummary(data) {
  if ($('.card.order-product-summary').length > 0) {
    $('.card.order-product-summary').html($(data.orderProductSummary).children());
  }
}
/**
 * Updates the availability of a product line item
 * @param {Object} data - AJAX response from the server
 * @param {string} uuid - The uuid of the product line item to update
 */


function updateAvailability(data, uuid) {
  var lineItem;
  var messages = '';

  for (var i = 0; i < data.items.length; i++) {
    if (data.items[i].UUID === uuid) {
      lineItem = data.items[i];
      break;
    }
  }

  $('.availability-' + lineItem.UUID).empty();

  if (lineItem.availability) {
    if (lineItem.availability.messages) {
      lineItem.availability.messages.forEach(function (message) {
        messages += '<p class="line-item-attributes">' + message + '</p>';
      });
    }

    if (lineItem.availability.inStockDate) {
      messages += '<p class="line-item-attributes line-item-instock-date">' + lineItem.availability.inStockDate + '</p>';
    }

    $('.uuid-' + uuid).find('.cannot-shipping-message').empty();
  }

  $('.availability-' + lineItem.UUID).html(messages);
}
/**
 * Finds an element in the array that matches search parameter
 * @param {array} array - array of items to search
 * @param {function} match - function that takes an element and returns a boolean indicating if the match is made
 * @returns {Object|null} - returns an element of the array that matched the query.
 */


function findItem(array, match) {
  for (var i = 0, l = array.length; i < l; i++) {
    if (match.call(this, array[i])) {
      return array[i];
    }
  }

  return null;
}
/**
 * Updates details of a product line item
 * @param {Object} data - AJAX response from the server
 * @param {string} uuid - The uuid of the product line item to update
 */


function updateProductDetails(data, uuid) {
  var lineItem = findItem(data.cartModel.items, function (item) {
    return item.UUID === uuid;
  });
  updateItemsHTML(data.cartModel);

  if (lineItem.waitlistable && !lineItem.available) {
    var addwaitlistText = $('.js-cart-edit[data-uuid="' + uuid + '"]').data('addwaitlisttext');
    $('.js-cart-edit[data-uuid="' + uuid + '"]').text(addwaitlistText);
  } else {
    var editText = $('.js-cart-edit[data-uuid="' + uuid + '"]').data('edit');
    $('.js-cart-edit[data-uuid="' + uuid + '"]').text(editText);
  }
}
/**
 * Updates details of a product line item in the Cart Section
 * @param {Object} data - AJAX response from the server
 */


function updateItemsHTML(data) {
  if ($('.cart-page-content').length && $('.prdt-cart-details').length === 0 && data && data.items.length > 0) {
    window.location.reload();
  } else {
    $('.container.cart-page-content .cart-plis.product-line-item').empty().html($(data.itemsHTML).html());

    var cookieUtil = __webpack_require__(/*! core/components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");

    var bfxCookieCountryCode = cookieUtil.getCookie('bfx.country');

    if (bfxCookieCountryCode !== 'US') {
      $('.shop-runner-eligible-section').remove();
      $('.bopis-cntr').remove();
      $('.shop-runner-section').remove();
    } else if ($(data.itemsHTML).children('.shop-runner-section').length > 0) {
      $('.container.cart-page-content .cart-plis.product-line-item .shop-runner-section').empty().append($(data.itemsHTML).children('.shop-runner-section').html());
    }

    formField.updateSelect();
    hbcTooltip.tooltipInit();
    cartInstoreOptions.selectStoreCart();
  }
}
/**
 * Updates details of a product line items in the Mini-Cart Section
 * @param {Object} data - AJAX response from the server
 */


function updateMiniCartItemsHTML(data) {
  $('.mini-cart-container').empty();
  $('.mini-cart-container').html(data.minicart);
  formField.updateSelect();
}
/**
 * Get Product options
 * @param {Object} $productContainer product container
 * @return {string} returns json value
 */


function getOptions($productContainer) {
  var options = $productContainer.find('.product-option').map(function () {
    var $elOption = $(this).find('.options-select');
    var urlValue = $elOption.val();
    var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
    return {
      optionId: $(this).data('option-id'),
      selectedValueId: selectedValueId
    };
  }).toArray();
  return JSON.stringify(options);
}
/**
 * Get all bundled products
 * @return {string} returns json value
 */


function getChildProducts() {
  var childProducts = [];
  $('.bundle-item').each(function () {
    childProducts.push({
      pid: $(this).find('.product-id').text(),
      quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
    });
  });
  return childProducts.length ? JSON.stringify(childProducts) : [];
}
/**
 * Generates the modal window on the first call.
 *
 */


function getOptionalBonusModalHtmlElement() {
  if ($('#editProductModal').length !== 0) {
    $('#editProductModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade gwp" id="editProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog gift-offers quick-view-dialog ">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <button type="button" class="close pull-right" data-dismiss="modal">' + '        <span aria-hidden="true" class="cancel-icon svg-svg-22-cross svg-svg-22-cross-dims"></span>' + '    </button>' + '    <span aria-hidden="true" class="choice-bonus-header"></span>' + '    <span class="sr-only"> </span>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * Generates the modal window on the first call.
 *
 */


function getModalHtmlElement() {
  if ($('#editProductModal').length !== 0) {
    $('#editProductModal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade" id="editProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog quick-view-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <button type="button" class="close pull-right" data-dismiss="modal">' + '        <span aria-hidden="true" class="cancel-icon svg-36-avenue-Up_Copy svg-36-avenue-Up_Copy-dims"></span>' + '    </button>' + '    <span class="sr-only"> </span>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.product-quickview');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}

function displayWaitListOptMsg() {
  $('body').on('focus keyup', '.js-waitlist-mobile, .js-waitlist-email', function () {
    if ($('.js-waitlist-mobile').val() !== '' || $('.js-waitlist-email').val() !== '') {
      $('.js-mobile-opt-msg').removeClass('d-none');

      if ($('.js-waitlist-mobile').val() !== '') {
        $('.js-waitlist-mobile').attr('required', true);
        $('.js-waitlist-mobile').attr('pattern', $(this).attr('data-pattern'));
      } else {
        $('.js-waitlist-mobile').removeAttr('required');
        $('.js-waitlist-mobile').removeAttr('pattern');
      }
    } else {
      $('.js-mobile-opt-msg').addClass('d-none');

      if ($('.js-waitlist-mobile').val() == '') {
        $('.js-waitlist-mobile').removeAttr('required');
        $('.js-waitlist-mobile').removeAttr('pattern');
      }
    }
  });
  $('body').on('blur', '.js-waitlist-mobile', function () {
    if ($(this).val() == '') {
      $('.js-waitlist-mobile').removeAttr('required');
      $('.js-waitlist-mobile').removeAttr('pattern');
      $('.js-waitlist-mobile').removeClass('is-invalid').next('span').remove();
      $('.js-waitlist-mobile').closest('.form-group').find('.invalid-feedback').empty();
      $('.js-waitlist-mobile').closest('.form-group').find('label').removeClass('is-invalid').removeClass('input-focus');
    }
  });
}

function submitWaitList() {
  $('body').on('submit', 'form.waitlistForm', function (e) {
    var form = $(this);
    e.preventDefault();
    var url = form.attr('action');
    form.spinner().start();
    $.ajax({
      url: url,
      type: 'post',
      dataType: 'json',
      data: form.serialize(),
      success: function success(data) {
        var $productContainer = $(form).closest('.container.product-detail');

        if (data.success) {
          $productContainer.find('.wait-list-success').removeClass('d-none').empty().html('<div class="alert-success"><div class="success-message"><span class="message">' + data.msg + '</span></div></div>');
          $productContainer.find('.js-wait-list-form').addClass('d-none');
          $productContainer.find('.waitlistForm')[0].reset();
          $productContainer.find('.waitlistForm').find('.input-focus').removeClass('input-focus');
          $('body').trigger('adobe:waitListComplete');
        } else {
          $productContainer.find('.wait-list-success').empty().text(data.msg);
        }

        form.spinner().stop();
      },
      error: function error(data) {
        $productContainer.find('.wait-list-success').empty().text(data.msg);
        form.spinner().stop();
      }
    });
    return false;
  });
}
/**
 * replaces the content in the modal window for product variation to be edited.
 * @param {string} editProductUrl - url to be used to retrieve a new product model
 */


function fillModalElement(editProductUrl) {
  $('#editProductModal').modal('show');
  $('.quick-view-dialog .modal-content').spinner().start();
  $.ajax({
    url: editProductUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(data) {
      var parsedHtml = parseHtml(data.renderedTemplate);
      $('#editProductModal .modal-body').empty();
      $('#editProductModal .modal-body').html(parsedHtml.body);
      $('#editProductModal .modal-footer').html(parsedHtml.footer);
      $('#editProductModal .modal-header .close .sr-only').text(data.closeButtonText);
      $('#editProductModal .enter-message').text(data.enterDialogMessage);
      $('#editProductModal .pdt-name-edit').empty();

      if (data.product.brand.name) {
        $('#editProductModal .pdt-name-edit').text(data.product.brand.name);
      } // Remove sizechart on cart edit


      $('#editProductModal').find('.size_guide').empty();
      hbcSlider.hbcSliderInit('edit-product');
      formField.updateSelect();
      $('#editProductModal .modal-body').find('.js-mobile-opt-msg').empty().html($('.js-waitlist-opt-message').html());
      displayWaitListOptMsg();
      submitWaitList();
      hbcTooltip.tooltipInit();

      if ($('form.waitlistForm').is(':visible')) {
        floatLabel.resetFloatLabel();
        $('form.waitlistForm').find('input:visible').each(function () {
          if ($(this).val() !== '') {
            clientSideValidation.validateFormonBlur.call(this);
          }
        });
      }

      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * replaces the content in the modal window for product variation to be edited.
 * @param {string} data - render data html string
 */


function fillChoiceOfBonusModalElement(data) {
  var parsedHtml = data.renderedTemplate;
  $('#editProductModal .modal-body').empty();
  $('#editProductModal .modal-body').html(parsedHtml);
  $('#editProductModal .choice-bonus-header').html(data.bonusModel.title);
  $('#editProductModal').modal('show');
}
/**
 * replace content of modal
 * @param {string} actionUrl - url to be used to remove product
 * @param {string} productID - pid
 * @param {string} productName - product name
 * @param {string} uuid - uuid
 */


function confirmDelete(actionUrl, productID, productName, uuid) {
  var $deleteConfirmBtn = $('.cart-delete-confirmation-btn');
  var $productToRemoveSpan = $('.product-to-remove');
  $deleteConfirmBtn.data('pid', productID);
  $deleteConfirmBtn.data('action', actionUrl);
  $deleteConfirmBtn.data('uuid', uuid);
  $productToRemoveSpan.empty().append(productName);
}
/**
 * Changes done for wishlist
 * @param {Object} attrs product varition attributes
 * @param {Object} $productContainer product container
 */


function updateAttrs(attrs, $productContainer) {
  attrs.forEach(function (attr) {
    var $attr = '[data-attr="' + attr.id + '"]';
    var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');
    $defaultOption.attr('value', attr.resetUrl);
    attr.values.forEach(function (attrValue) {
      var $attrValue = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]');
      $attrValue.attr('value', attrValue.url).removeAttr('disabled');

      if (!attrValue.selectable) {
        $attrValue.attr('disabled', true);
      }
    });
  });
}
/**
 * Changes done for wishlist
 * @param {Object} selectedValueUrl product selected variant
 * @param {Object} $productContainer product container
 */


function attributeSelect(selectedValueUrl, $productContainer) {
  if ($productContainer.length && selectedValueUrl) {
    $productContainer.spinner().start();
    $.ajax({
      url: selectedValueUrl,
      method: 'GET',
      success: function success(data) {
        updateAttrs(data.product.variationAttributes, $productContainer);
        $productContainer.closest('.product-detail-wlcart').data('pid', data.product.id);
        $productContainer.closest('.product-detail-wlcart').data('producttype', data.product.productType);
        $productContainer.closest('.product-detail-wlcart').find('.prod_wl_bttn').data('readytoorder', data.product.readyToOrder && data.product.available);
        var $priceSelector = $('.prod-price', $productContainer);
        $priceSelector.empty().html(data.product.price.html);

        if (data.product.price.sales !== undefined && data.product.price.sales != null) {
          $('.product-price-selected', $productContainer).empty().text(data.product.price.sales.formatted);
        } // Update promotions


        if (data.product.promotionalPricing && data.product.promotionalPricing.isPromotionalPrice && data.product.promotionalPricing.promoMessage !== '') {
          $('.promotion-pricing', $productContainer).empty().html(data.product.promotionalPricing.priceHtml);
          $('.promotion-pricing', $productContainer).removeClass('d-none');
          $('.promotions', $productContainer).addClass('d-none');
        } else {
          $('.promotion-pricing', $productContainer).addClass('d-none');
          $('.promotions', $productContainer).removeClass('d-none');
          $('.promotions', $productContainer).empty().html(data.product.promotionsHtml);
        } // Update limited inventory message


        if (data.product.availability.isAboveThresholdLevel) {
          $('.limited-inventory', $productContainer).empty().text(data.resources.limitedInventory);
        } else {
          $('.limited-inventory', $productContainer).empty();
        }

        if (data.product.productType === 'master') {
          $productContainer.find('.alert-msg').show();
        } else if ((!data.product.available || !data.product.readyToOrder) && data.product.productType !== 'master') {
          $productContainer.find('button.prod_wl_bttn').addClass('soldout');
          $productContainer.find('button.prod_wl_bttn').removeClass('add-to-cart');
          $productContainer.find('button.prod_wl_bttn').text(data.resources.soldout);
          $productContainer.find('button.prod_wl_bttn').attr('disabled', true);
        } else {
          $productContainer.find('button.prod_wl_bttn').addClass('add-to-cart');
          $productContainer.find('button.prod_wl_bttn').removeClass('soldout');
          $productContainer.find('button.prod_wl_bttn').text(data.resources.movetobag);
          $productContainer.find('button.prod_wl_bttn').removeAttr('disabled');
        }

        $productContainer.spinner().stop();
        var isSelectReady = $productContainer.find('button.add-to-cart').data('readytoorder');

        if (isSelectReady) {
          $productContainer.find('.alert-msg').addClass('d-none');
          $productContainer.find('.selected-option').removeClass('error');
        }
      },
      error: function error() {
        $productContainer.spinner().stop();
      }
    });
  }
}
/**
 * Changes done for wishlist
 * @param {Object} $elementAppendTo element
 * @param {string} msg message to display
 */


function displayErrorMessage($elementAppendTo, msg) {
  if ($('.remove-from-wishlist-messages').length === 0) {
    $elementAppendTo.append('<div class="remove-from-wishlist-messages "></div>');
  }

  $('.remove-from-wishlist-messages').append('<div class="remove-from-wishlist-alert text-center alert-danger">' + msg + '</div>');
  setTimeout(function () {
    $('.remove-from-wishlist-messages').remove();
  }, 3000);
}
/**
 * Generates the modal window on the first call.
 *
 * @param {Object} data - render data
 */


function appendModalHtmlElement(data) {
  if ($('#signInModal').length !== 0) {
    $('#signInModal').empty();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal-dialog">' + '<div class="modal-content">' + '<div class="modal-body">' + '<div class="cancel-icon">' + '<button type="button" class="close svg-svg-22-cross svg-svg-22-cross-dims" data-dismiss="modal" aria-label="Close Modal Box"></button>' + '</div>' + '<div class="no-gutters modal-row align-items-start modal-contents">' + '<div class="modal-column">' + data.template + '</div>' + '</div>' + '</div>' + '</div>' + '</div>';

  if ($(document).find('#signInModal').length) {
    $(document).find('#signInModal').append(htmlString);
  }
}
/**
 * open login model
 * @param {string} url url to be open with
 */


function openLoginPopup(url) {
  $('body').spinner().start();
  $.ajax({
    url: url,
    dataType: 'json',
    success: function success(data) {
      $('body').spinner().stop();

      if (data.redirect) {
        window.location.href = data.redirect;
      } else {
        appendModalHtmlElement(data);
        login.login();
        $('#signInModal').modal();
        login.showPassword();
        setTimeout(function () {
          formField.adjustForAutofill();
        }, 300);
      }
    },
    error: function error() {
      $('body').spinner().stop();
    }
  });
}
/**
 * init for SignIn Model
 */


function initSignIn() {
  $('body').on('click', '.cart-empty .signin', function () {
    openLoginPopup($(this).data('url'));
  });
}
/**
 * Init for validate bonus product
 */


function initValidateOptionalBonusSelect() {
  $('body').on('validateBonusChoiceProduct', function (e, $this) {
    var maxPids = $('.choose-bonus-product-dialog').data('total-qty');
    var totalQty = $('input[name="chooseBonusproductIds"]:checked').length;

    if (totalQty <= maxPids) {
      $('.choice-of-bonus-product .error-div').empty();
      $('.pre-cart-products').html($('input[name="chooseBonusproductIds"]:checked').length);
      $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');
    } else {
      $($this).prop('checked', false); // $('.selected-bonus-products .bonus-summary').addClass('alert-danger');
    }
  });
}
/**
 * Init for tax calculation
 */


function initOptionalBonusSelect() {
  $('body').on('click', '.bonus-product-item input[name="chooseBonusproductIds"]', function () {
    $('body').trigger('validateBonusChoiceProduct', this);
  });
}
/**
 * Init for product detail bonus product
 */


function initChooseBonusProductDetails() {
  $('body').on('click', '.gwp-pdt-details .product-details', function () {
    $(this).closest('div').find('.productDetailModal').addClass('show');
  });
} // wishlist Floating labelwithout selecting the value.


var floatinglabelWishlist = function floatinglabelWishlist() {
  $('.wishlistItemCards .add-to-cart').each(function () {
    var isReadyToOrder = $(this).data('readytoorder');

    if (!isReadyToOrder) {
      $(this).closest('.card').find('.non-input-label').removeClass('input-focus');
      $(this).closest('.card').find('.selected-option span').addClass('d-none');
    }
  });
}; // wishlist product Tool tip.


var tooltipWishlist = function tooltipWishlist() {
  $('body').on('mouseover', '.wl-tooltip', function () {
    $(this).parents('.custom-tooltip').find('.tooltip-wlsale').attr('aria-hidden', 'false');
  });
  $('body').on('mouseleave', '.wl-tooltip', function () {
    $(this).parents('.custom-tooltip').find('.tooltip-wlsale').attr('aria-hidden', 'true');
  });
  $('body').on('focus', '.wl-tooltip', function () {
    $(this).parents('.custom-tooltip').find('.tooltip-wlsale').attr('aria-hidden', 'false');
  });
  $('body').on('keydown', '.wl-tooltip', function (e) {
    if (e.which === 27) {
      $(this).parents('.custom-tooltip').find('.tooltip-wlsale').attr('aria-hidden', 'true');
      e.preventDefault();
      return false;
    }

    return true;
  });
  $('body').on('click', '.js-cart-wishlist-tile', function (e) {
    e.preventDefault();
    var element = $(this);

    if ($('.pg-name').length > 0 && $('.pg-name').val() === 'wishlist') {
      return;
    }

    if (element.hasClass('deselect-wishlist')) {
      var wishlistItems = $('body').find('.wishlist-cart-slider');
      removeWishlistSlider();
      element.closest('div.product').remove();
      var products = wishlistItems.find('.product');

      if (products.length < 16) {
        $('body').find('.wishlist-all').addClass('d-none');
      }

      if (products.length === 0) {
        $('body').find('.wishlist-cart').find('.wishlist-cart-heading').remove();
        $('body').find('.wishlist-cart').find('.wishlist-cart-slider').remove();
      }

      if (products.length > 0) {
        hbcSlider.hbcSliderInit('wishlist-cart-slider');
        hbcSlider.cartReccommendationSliderInit();
      }
    }
  });
  $('body').on('click', '.select-wishlist', function (e) {
    e.preventDefault();
    var $this = $(this).closest('.product');

    if ($('body').hasClass('cart-page')) {
      var wishlistCart = $('body').find('.wishlist-cart');

      if (wishlistCart && wishlistCart.find('.wishlist-cart-slider').length === 0) {
        wishlistCart.find('.row').html('<div class="wishlist-cart-heading slider-heading text-center"><a class="link-wishlist" href="' + wishlistCart.data('wishlisturl') + '">' + '<span class="svg-24-avenue-wishlist-heart-dims svg-24-avenue-wishlist-heart heart-icon"></span> ' + wishlistCart.data('wishlistheader') + '</a></div><div class="col-12 hbc-slider wishlist-cart-slider"></div>');
        wishlistCart.find('.wishlist-cart-slider').html($this.clone());
      } else {
        removeWishlistSlider();
        var tile = wishlistCart.find('.wishlist-cart-slider').find('.product-tile');

        if (tile.closest('.product').length > 0) {
          tile.closest('.product').eq(0).before($this.clone());
        } else {
          tile.eq(0).before($this.clone());
        }
      } // eslint-disable-next-line newline-per-chained-call


      wishlistCart.find('.wishlist-cart-slider').find('.product-tile').eq(0).find('.wishlistTile').removeClass('select-wishlist').addClass('deselect-wishlist');

      if (wishlistCart.find('.wishlist-cart-slider').find('.product-tile').length >= 16) {
        $('body').find('.wishlist-all').removeClass('d-none');
      }

      hbcSlider.hbcSliderInit('wishlist-cart-slider');
      hbcSlider.cartReccommendationSliderInit();
    }
  });
  $(document).ready(function () {
    floatinglabelWishlist();
    $('.checkout-btn, .proxy-checkout-btn').removeClass('disabled');
  });
};

tooltipWishlist();
/* Display size swatches for wishlist slider for mobile */

$(window).on('load resize orientationchange', function () {
  $('.wishlist-cart-slider .product-tile').each(function () {
    var initialIndex = 0;

    if ($(this).find('.firstSelectableIndex').length > 0) {
      var initialIndex = $(this).find('.firstSelectableIndex').eq(0).attr('data-firstSelectableIndex');
    }

    if ($(window).width() < 1023.99) {
      if (!$(this).find('.size').hasClass('slick-initialized')) {
        $(this).find('.size').slick({
          dots: false,
          infinite: false,
          speed: 300,
          slidesToShow: 2,
          slidesToScroll: 1,
          arrows: true,
          autoplay: false
        });

        if ($(this).find('.size').eq(0).find('.slick-slide').length - 1 == Number(initialIndex)) {
          $(this).find('.size').slick('slickGoTo', Number(initialIndex) - 1, true);
        } else {
          $(this).find('.size').slick('slickGoTo', Number(initialIndex), true);
        }
      }
    }
  });
});
/**
Mini cart height
*/

function getMiniCartHeight() {
  if ($('.main-menu').is('.fixed')) {
    $($('.minicart .product-summary')[1]).css('height', $($('.minicart .popover')[1]).outerHeight(true) - ($($('.minicart-footer')[1]).outerHeight(true) + $($('.bag-heading')[1]).outerHeight(true) + $('.main-menu').outerHeight(true)));
  } else {
    $($('.minicart .product-summary')[0]).css('height', $($('.minicart .popover')[0]).outerHeight(true) - ($($('.minicart-footer')[0]).outerHeight(true) + $($('.bag-heading')[0]).outerHeight(true) + $('.header').outerHeight(true) - $(window).scrollTop() + 33));
  }
}
/**
 * Mini cart Scroll Height
 */


function setMiniCartScrollHeight() {
  var winHt = $(window).outerHeight();
  var mcFooterHt = $('.minicart-footer').outerHeight();

  if ($('.main-menu').is('.fixed')) {
    mcFooterHt = $($('.minicart-footer')[1]).outerHeight();
  } else {
    mcFooterHt = $($('.minicart-footer')[0]).outerHeight();
  }

  if (winHt < 786) {
    $('.minicart .cart').css('height', 410);
    $('.minicart .product-summary').css({
      'max-height': 410 - mcFooterHt
    });
  } else {
    $('.minicart .cart').css('height', 610);
    $('.minicart .product-summary').css({
      'max-height': 610 - mcFooterHt
    });
  }
}
/**
 * Function to remove slider from wishlist
 */


function removeWishlistSlider() {
  var $wishlistSlider = $('body').find('.wishlist-cart-slider');

  if ($wishlistSlider.is('.slick-initialized')) {
    $wishlistSlider.slick('unslick');
  }

  if ($wishlistSlider.is('.touchscreen-slider-initialized')) {
    $wishlistSlider.removeClass('touchscreen-slider-initialized');
  }
}

module.exports = function () {
  $('body').on('afterRemoveFromCart', function (e, data) {
    e.preventDefault();
    confirmDelete(data.actionUrl, data.productID, data.productName, data.uuid);
  });
  $('.optional-promo').click(function (e) {
    e.preventDefault();
    $('.promo-code-form').toggle();
  });
  $('body').on('product:beforeAttributeSelect', function () {
    $('.modal.show .modal-content').spinner().start();
  }); // wishlist changes

  $('body').on('click', '.remove-prod-from-wishlist', function (e) {
    e.preventDefault();
    var url = $(this).data('url');
    $.spinner().start();
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        if (data.totals && data.totals.discountsHtml) {
          $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
        } // Since deleting product in wishlist will not affect anything I am deleting this


        updateItemsHTML(data);
        formField.adjustForAutofill();
        floatinglabelWishlist();

        if (data.deletedProduct) {
          $('body').trigger('adobeTagManager:removeFromFav', data.deletedProduct);
        }

        if ($('.enableShopRunner').length > 0) {
          if (typeof window.parent.sr_updateMessages === 'function') {
            window.parent.sr_updateMessages();
          }
        }

        $.spinner().stop();
      },
      error: function error() {
        $.spinner().stop();
        var $elToAppendWL = $('.wishlistItemCards');
        var msg = $elToAppendWL.data('error-msg');
        displayErrorMessage($elToAppendWL, msg);
      }
    });
  });
  $('body').on('click', '.remove-product, .remove-prod-minicart', function (e) {
    e.preventDefault();
    e.stopPropagation();
    var productID = $(this).data('pid');
    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var updatedLineItems = $(this).closest('.prdt-cart-details').attr('updatedLineItems');

    if (updatedLineItems) {
      var urlParams = {
        pid: productID,
        uuid: uuid,
        updatedLineItems: updatedLineItems
      };
    } else {
      var urlParams = {
        pid: productID,
        uuid: uuid
      };
    }

    url = appendToUrl(url, urlParams);
    var isMiniCart = $(this).hasClass('remove-prod-minicart');
    var $currElement;

    if (isMiniCart) {
      $currElement = $('.uuid-' + uuid).closest('.prdt-section').prev('.prdt-section');
    }

    $('body > .modal-backdrop').remove();
    $('.cart-error').html('');

    if (isMiniCart) {
      $('.minicart .popover').spinner().start();
    } else {
      $.spinner().start();
    }

    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        if (isMiniCart) {
          $('body').trigger('adobeTagManager:quantityUpdateFromMiniCart', data);
        } else {
          $('body').trigger('adobeTagManager:udpateCartQuantity', data);
        }

        if (data.basket.items.length === 0) {
          $('.pdt-cntr').empty().append(data.basket.emptyCartHtml);
          $('.shopping-bag-count').empty();
          $('.cart-summary-section').remove();
          $('.minicart-quantity').empty();
          $('.minicart-link').attr({
            'aria-label': data.basket.resources.minicartCountOfItems,
            title: data.basket.resources.minicartCountOfItems
          });
          $('.minicart .popover').empty();
          $('.minicart .popover').removeClass('show');
          $('body').removeClass('modal-open');
          $('html').removeClass('veiled');
          $('.minicart-overlay').removeClass('background').removeAttr('style');
          $('body').css({
            'overflow-y': 'auto'
          });

          if ($('.cart-recommendation-umal').length > 0 && $('.cart-recommendation-umal').html().trim().length === 0) {
            $('body').trigger('cart:emptycart');
          }

          if ($('.cart-recommendation-umal').hasClass('d-none')) {
            $('.cart-recommendation-umal').removeClass('d-none');
            hbcSlider.cartReccommendationSliderInit();
          }
        } else {
          if (data.toBeDeletedUUIDs && data.toBeDeletedUUIDs.length > 0) {
            for (var i = 0; i < data.toBeDeletedUUIDs.length; i++) {
              $('.uuid-' + data.toBeDeletedUUIDs[i]).remove();
            }
          }

          $('.uuid-' + uuid).remove();

          if (!data.basket.hasBonusProduct) {
            $('.bonus-product').remove();
          }

          $('.minicart .popover .minicart-item-count').empty().append(data.basket.items.length);
          $('.coupons-and-promos').empty().append(data.basket.totals.discountsHtml);
          updateCartTotals(data.basket);
          updateItemsHTML(data.basket);
          updateApproachingDiscounts(data.basket.approachingDiscounts);
          updateAppliedCouponCount(data.basket);
          updateTotalSavings(data.basket);
          updateDiscountsHtml(data.basket);

          if ($('.enableShopRunner').length > 0) {
            if (typeof window.parent.sr_updateMessages === 'function') {
              window.parent.sr_updateMessages();
            }
          }

          $('body').trigger('setShippingMethodSelection', data.basket);
          validateBasket(data.basket);

          if (!$('.cart-recommendation-umal').hasClass('d-none')) {
            $('.cart-recommendation-umal').addClass('d-none');
          }

          $('.remove-prod-minicart').closest('.product-summary .prdt-section').first().find('.brand-name').focus(); // we are reloading the page to initiate the payment js functions which are to be triggered on the page load

          if (data && data.deletedItem && data.deletedItem.productName && data.deletedItem.productName.toLowerCase().indexOf('saks +') !== -1) {
            window.location.reload();
          }
        }

        $('body').trigger('cart:update');

        if (isMiniCart) {
          setMiniCartScrollHeight();
        }

        if (data.releatedBonusPLIs && data.releatedBonusPLIs.length > 0 && data.mainProdItem && data.releatedBonusPLIs.indexOf(data.mainProdItem.productID) > -1) {
          $('.cannot-shipping-message.bonus-soldout').addClass('d-none');
        }

        $.spinner().stop();
      },
      error: function error(err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        } else {
          createErrorNotification(err.responseJSON.errorMessage);
          $.spinner().stop();
        }
      }
    });
  });
  $('body').on('afterRemoveFromCart', function (e, data) {
    e.preventDefault();
    confirmDelete(data.actionUrl, data.productID, data.productName, data.uuid);
  });
  $('.optional-promo').click(function (e) {
    e.preventDefault();
    $('.promo-code-form').toggle();
  });
  $('body').on('click', '.cart-delete-confirmation-btn', function (e) {
    e.preventDefault();
    var productID = $(this).data('pid'); // eslint-disable-next-line no-unused-vars

    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var urlParams = {
      pid: productID,
      uuid: uuid
    };
    url = appendToUrl(url, urlParams);
    $('body > .modal-backdrop').remove();
    var couponCode = $(this).data('code'); // eslint-disable-next-line no-redeclare

    var uuid = $(this).data('uuid');
    var $deleteConfirmBtn = $('.delete-coupon-confirmation-btn');
    var $productToRemoveSpan = $('.coupon-to-remove');
    $deleteConfirmBtn.data('uuid', uuid);
    $deleteConfirmBtn.data('code', couponCode);
    $productToRemoveSpan.empty().append(couponCode);
  });
  $('body').on('click', '.delete-coupon-confirmation-btn', function (e) {
    e.preventDefault();
    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var couponCode = $(this).data('code');
    var urlParams = {
      code: couponCode,
      uuid: uuid
    };
    url = appendToUrl(url, urlParams);
    $('body > .modal-backdrop').remove();
    $.spinner().start();
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        $('.coupon-uuid-' + uuid).remove();
        updateCartTotals(data);
        updateApproachingDiscounts(data.approachingDiscounts);
        updateDiscountsHtml(data);
        updateAppliedCouponCount(data);
        validateBasket(data);
        $.spinner().stop();
      },
      error: function error(err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        } else {
          createErrorNotification(err.responseJSON.errorMessage);
          $.spinner().stop();
        }
      }
    });
  });
  $('body').on('showOptionalProduct', function (e, data) {
    getOptionalBonusModalHtmlElement();
    $.spinner().start();
    $.ajax({
      url: $(data).data('url'),
      method: 'GET',
      dataType: 'json',
      success: function success(resp) {
        fillChoiceOfBonusModalElement(resp);
        $.spinner().stop();
      },
      error: function error() {
        $.spinner().stop();
      }
    });
    return;
  });
  $('body').on('click', '.bonus-product-button', function () {
    $(this).addClass('launched-modal');

    if ($(this).data('intermediate')) {
      $('body').trigger('showOptionalProduct', this);
      return;
    }

    $.spinner().start();
    $.ajax({
      url: $(this).data('url'),
      method: 'GET',
      dataType: 'json',
      success: function success(data) {
        base.methods.editBonusProducts(data);
        $.spinner().stop();
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  });
  $('body').on('hidden.bs.modal', '#chooseBonusProductModal', function () {
    $('#chooseBonusProductModal').remove();
    $('#chooseBonusProductModal').next().remove();

    if ($('#editProductModal').hasClass('show')) {
      $('body').addClass('modal-open');

      if ($(window).width() > 1024) {
        $('body').css('padding-right', '17px');
      }
    }

    if ($('.cart-page').length) {
      $('.launched-modal .btn-outline-primary').trigger('focus');
      $('.launched-modal').removeClass('launched-modal');
    } else {
      $('.product-detail .add-to-cart').focus();
    }
  });
  $('body').on('click', '.cart-page .item-attributes .edit .brand-name', function (e) {
    e.preventDefault(); // handle events after ajax, since to avaoid multiple time registration of events

    var editProductUrl = $(this).parent().data('href') ? $(this).parent().data('href') : $(this).parent().attr('href');
    getModalHtmlElement();
    fillModalElement(editProductUrl);
  });
  $('body').on('click', '.cart-page .item-attributes .edit .line-item-name', function (e) {
    e.preventDefault(); // handle events after ajax, since to avaoid multiple time registration of events

    var editProductUrl = $(this).parent().parent().data('href') ? $(this).parent().parent().data('href') : $(this).parent().parent().attr('href');
    getModalHtmlElement();
    fillModalElement(editProductUrl);
  });
  $('body').on('click', '.cart-page .product-edit .item-edit, .cart-page .bundle-edit .edit, .cart-page .item-image .edit, .product-tile .item-edit', function (e) {
    e.preventDefault(); // handle events after ajax, since to avaoid multiple time registration of events

    var editProductUrl = $(this).data('href') ? $(this).data('href') : $(this).data('href');
    getModalHtmlElement();
    fillModalElement(editProductUrl);
  }); // wishlist changes done to add to cart from wishlist

  if ($('.page').data('action') === 'Cart-Show') {
    $(document).on('change', 'select[class*="select-"]', function (e) {
      e.preventDefault();
      var $productContainer = $(this).closest('.set-item');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.card.product-info');
      }

      attributeSelect(e.currentTarget.value, $productContainer);
    }); // Changes made to cart - add to cart

    $(document).on('click', 'button.add-to-cart, button.add-to-cart-global', function () {
      var addToCartUrl;
      var pid;
      var pidsObj;
      var setPids;
      var isReadyToOrder = $(this).data('readytoorder');

      if (!isReadyToOrder) {
        $(this).closest('.card').find('.alert-msg').removeClass('d-none');
        $(this).closest('.card').find('.selected-option').addClass('error');
        return;
      }

      var wlRemoveUrl = $(this).closest('.card').data('removefromlist');
      $('body').trigger('product:beforeAddToCart', this);

      if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {
        setPids = [];
        $('.product-detail').each(function () {
          if (!$(this).hasClass('product-set-detail')) {
            setPids.push({
              pid: $(this).find('.product-id').text(),
              qty: $(this).find('.quantity-select').val(),
              options: getOptions($(this))
            });
          }
        });
        pidsObj = JSON.stringify(setPids);
      }

      pid = $(this).closest('.product').data('pid');
      addToCartUrl = $(this).closest('.wishlist-cart').data('addtobagurl');

      if (pid === undefined && $(this).data('wishlist-addtobag') === true && $(this).attr('data-addwl-pid') !== undefined) {
        pid = $(this).attr('data-addwl-pid');
        addToCartUrl = $(this).siblings('.add-to-cart-url').val();
      }

      var $productContainer = $(this).closest('.product-detail');

      if (!$productContainer.length) {
        $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');
      }

      var form = {
        pid: pid,
        pidsObj: pidsObj,
        childProducts: getChildProducts(),
        quantity: 1,
        loadBasketModel: true
      };

      if (!$('.bundle-item').length) {
        form.options = getOptions($productContainer);
      }

      $(this).trigger('updateAddToCartFormData', form);

      if (addToCartUrl) {
        $.spinner().start();
        var $this = $(this);
        $.ajax({
          url: addToCartUrl,
          method: 'POST',
          data: form,
          success: function success(data) {
            if (!data.error) {
              var productToRemove = $('#editProductModal').find('.product-detail').data('wlmaster-pid');

              if ($('#editProductModal').length > 0) {
                $('#editProductModal').modal('hide');
              } // return and trigger a message product addition exceeded the basket preference limit


              if (data.message && data.message === 'LIMIT_EXCEEDED') {
                $('body').trigger('triggerBasketLimitMsgModal');
                $.spinner().stop();
              } else {
                if ($($this).hasClass('prod_wl_bttn')) {// Commented bagAdd event as per ticket SFDEV-3970
                  // $('body').trigger('adobeTagManager:addToBag', data);
                } else if ($($this).hasClass('wishlist-add-to-bag')) {
                  // changes made to remove the product from wishlist of the same is being added from WL - Start
                  $('body').trigger('adobeTagManager:moveFavToBag', data);
                } else {
                  $('body').trigger('adobeTagManager:addToBag', data);
                }

                base.showAddToCartConfirmation(data.addToCartConfirmationModal);
                $('body').trigger('product:afterAddToCart', data);

                if (data && data.totals && data.totals.discountsHtml) {
                  $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
                }

                updateItemsHTML(data);

                if (data && data.totals) {
                  updateCartTotals(data);
                  updateAppliedCouponCount(data);
                  updateTotalSavings(data);
                }

                formField.adjustForAutofill();
                floatinglabelWishlist();

                if ($('.enableShopRunner').length > 0) {
                  if (typeof window.parent.sr_updateMessages === 'function') {
                    window.parent.sr_updateMessages();
                  }
                }

                if ($('.cart-recommendation-umal').length > 0 && $('.cart-recommendation-umal').html().trim().length === 0) {
                  $('body').trigger('cart:emptycart');
                }

                if (data.items && data.items.length === 0 && $('.cart-recommendation-umal').hasClass('d-none')) {
                  $('.cart-recommendation-umal').removeClass('d-none');
                  hbcSlider.cartReccommendationSliderInit();
                } else if (data.items && data.items.length > 0 && !$('.cart-recommendation-umal').hasClass('d-none')) {
                  $('.cart-recommendation-umal').addClass('d-none');
                }

                $this.closest('div.product').remove();

                if (productToRemove != undefined) {
                  $('.wishlist-cart').find('div.product[data-pid=' + productToRemove + ']').remove();
                }

                if (!$('.wishlist-cart-slider').find('.product').length) {
                  $('.cart-wl-content').addClass('d-none');
                }

                hbcSlider.cartReccommendationSliderInit();

                if ($('.wishlist-cart-slider').length > 0) {
                  removeWishlistSlider();
                  hbcSlider.hbcSliderInit('wishlist-cart-slider');
                }

                $.spinner().stop();
              }
            }

            $.spinner().stop();
          },
          error: function error() {
            $.spinner().stop();
          }
        });
      }
    });
  } // Changes done for cart - add to wishlist - Start


  $('body').on('click', '.cart-page .product-move .move', function (e) {
    e.preventDefault();
    var uuid = $(this).data('uuid');
    var pid = $(this).data('pid');
    var actionurl = $(this).data('action');
    var url = $('.prdt-cart-details').data('wltileurl');
    url = appendToUrl(url, {
      pid: pid
    });
    var urlParams = {
      pid: pid,
      uuid: uuid
    };
    actionurl = appendToUrl(actionurl, urlParams);
    $.spinner().start();
    $.ajax({
      url: url,
      success: function success(response) {
        try {
          var productData = {};
          productData.brand = $(response).find('.tileproduct-brandname').data('brandname');
          productData.bopus_store_id = $(response).find('.tileproduct-storeid').data('bopus_store_id');
          productData.code = $(response).find('.tileproduct-atm-code').data('atm-code');
          productData.name = $(response).find('.tileproduct-name').data('product-name');
          productData.original_price = $(response).find('.tileproduct-orignalprice').data('orignalprice').toString();
          productData.price = $(response).find('.tileproduct-price').data('price').toString();
          productData.quantity = '1';
          productData.selected_sku = $(response).find('.tileproduct-detail').data('pid').toString();
          productData.ship_from_store_id = '';
          $('body').trigger('adobeTagManager:cartMoveToFav', productData);
          removeWishlistSlider();
          $('.cart-wl-content').removeClass('d-none');
          var wishlistCart = $('body').find('.wishlist-cart');

          if (wishlistCart && wishlistCart.find('.wishlist-cart-slider').length === 0) {
            wishlistCart.find('.row').html('<div class="wishlist-cart-heading slider-heading text-center"><a class="link-wishlist" href="' + wishlistCart.data('wishlisturl') + '">' + '<span class="svg-24-avenue-wishlist-heart-dims svg-24-avenue-wishlist-heart heart-icon"></span> ' + wishlistCart.data('wishlistheader') + '</a></div><div class="col-12 hbc-slider wishlist-cart-slider"></div>');
            wishlistCart.find('.wishlist-cart-slider').html(response);
          } else {
            if (wishlistCart.find('.wishlist-cart-slider').find('.product').length) {
              wishlistCart.find('.wishlist-cart-slider').find('.product').eq(0).before(response);
            } else {
              wishlistCart.find('.wishlist-cart-slider').find('.veiwall-wrapper').eq(0).before(response);
            }
          } // eslint-disable-next-line newline-per-chained-call


          wishlistCart.find('.wishlist-cart-slider').find('.product').eq(0).find('.wishlistTile').removeClass('select-wishlist').addClass('deselect-wishlist'); // eslint-disable-next-line newline-per-chained-call

          hbcSlider.hbcSliderInit('wishlist-cart-slider');
          hbcSlider.cartReccommendationSliderInit();
        } catch (e) {}

        $.ajax({
          url: actionurl,
          type: 'get',
          dataType: 'json',
          success: function success(data) {
            if (data.basket.items.length === 0) {
              $('.cart').empty().append('<div class="row"> ' + '<div class="col-12 text-center"> ' + '<h1>' + data.basket.resources.emptyCartMsg + '</h1> ' + '</div> ' + '</div>');
              $('.cart-plis').empty().append(data.basket.emptyCartHtml);
              $('.number-of-items').empty().append(data.basket.resources.numberOfItems);
              $('.cart-summary-section').remove();
              $('.minicart-quantity').empty();
              $('.minicart-link').attr({
                'aria-label': data.basket.resources.minicartCountOfItems,
                title: data.basket.resources.minicartCountOfItems
              });
              $('.minicart .popover').empty();
              $('.minicart .popover').removeClass('show');
              $('body').removeClass('modal-open');
              $('html').removeClass('veiled');

              if ($('.cart-recommendation-umal').length > 0 && $('.cart-recommendation-umal').html().trim().length === 0) {
                $('body').trigger('cart:emptycart');
              }

              if ($('.cart-recommendation-umal').hasClass('d-none')) {
                $('.cart-recommendation-umal').removeClass('d-none');
                hbcSlider.cartReccommendationSliderInit();
              }
            } else {
              if (data.toBeDeletedUUIDs && data.toBeDeletedUUIDs.length > 0) {
                for (var i = 0; i < data.toBeDeletedUUIDs.length; i++) {
                  $('.uuid-' + data.toBeDeletedUUIDs[i]).remove();
                }
              }

              $('.uuid-' + uuid).remove();

              if (!data.basket.hasBonusProduct) {
                $('.bonus-product').remove();
              }

              $('.coupons-and-promos').empty().append(data.basket.totals.discountsHtml);
              updateCartTotals(data.basket);
              updateApproachingDiscounts(data.basket.approachingDiscounts);
              updateAppliedCouponCount(data.basket);
              updateTotalSavings(data.basket);
              $('body').trigger('setShippingMethodSelection', data.basket);
              validateBasket(data.basket);

              if (!$('.cart-recommendation-umal').hasClass('d-none')) {
                $('.cart-recommendation-umal').addClass('d-none');
              }
            }

            $('body').trigger('cart:update');
            updateItemsHTML(data.basket);
            formField.adjustForAutofill();
            floatinglabelWishlist();

            if ($('.enableShopRunner').length > 0) {
              if (typeof window.parent.sr_updateMessages === 'function') {
                window.parent.sr_updateMessages();
              }
            }

            $.spinner().stop();
          },
          error: function error(err) {
            if (err.responseJSON.redirectUrl) {
              window.location.href = err.responseJSON.redirectUrl;
            } else {
              createErrorNotification(err.responseJSON.errorMessage);
              $.spinner().stop();
            }
          }
        });
      }
    });
  }); // Changes done for cart - add to wishlist - End

  $('body').on('shown.bs.modal', '#editProductModal', function () {
    $('#editProductModal').siblings().attr('aria-hidden', 'true');
    $('#editProductModal .close').focus();
  });
  $('body').on('cart:emptycart', function () {
    if ($('.cart-recommendation-umal').length > 0 && $('.cart-recommendation-umal').data('url')) {
      var url = $('.cart-recommendation-umal').data('url');
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(data) {
          $('.cart-recommendation-umal').append(data);
        }
      });
    }
  });
  $('body').on('click', '.promo-click', function (e) {
    e.stopImmediatePropagation();
    $(this).toggleClass('open-state');
    $(this).closest('.form-group').find('.promo-detail-section').toggleClass('expand');
  });
  $('body').on('hidden.bs.modal', '#editProductModal', function () {
    $('#editProductModal').siblings().attr('aria-hidden', 'false');
  });
  $('body').on('keydown', '#editProductModal', function (e) {
    var focusParams = {
      event: e,
      containerSelector: '#editProductModal',
      firstElementSelector: '.close',
      lastElementSelector: '.update-cart-product-global',
      nextToLastElementSelector: '.modal-footer .quantity-select'
    };
    focusHelper.setTabNextFocus(focusParams);
  });
  $('body').on('product:updateAddToCart', function (e, response) {
    // update global add to cart (single products, bundles)

    /* var dialog = $(response.$productContainer)
            .closest('.quick-view-dialog'); */
    $('button.add-to-cart-global').text(response.product.availability.buttonName);
    $('.update-cart-product-global').attr('disabled', !response.product.available);

    if (!response.product.available) {
      $('.js-cart-update').addClass('d-none');
    } else {
      $('.js-cart-update').removeClass('d-none');
    }

    if (response.product.waitlistable && response.product.productType !== 'master' && !response.product.available) {
      if ($('.page').data('producttype') === 'set') {
        var $productContainer = response.$productContainer;
        var action = response.product.pdpURL + '#waitlistenabled';
        $productContainer.find('.add-to-waitlist-link').attr('href', action);
        $productContainer.find('.add-to-cart-global').addClass('d-none');
        $productContainer.find('.js-add-to-cart ').find('.hideInWaitList').addClass('d-none');
        $productContainer.find('.update-cart-btn').addClass('d-none');
        $productContainer.find('.js-wait-list-form').removeClass('d-none');
        $productContainer.find('.js-add-to-waitlist-link').removeClass('d-none');
        $productContainer.find('.js-wait-list-form').find('.waitlist-product-id').val(response.product.id);
        $productContainer.find('.wait-list-success').empty();
        $productContainer.find('.wait-list-success').removeClass('d-none');
        $productContainer.find('.js-wait-list-form').find('input.js-waitlist-email').on('focus', function () {
          $('body').trigger('adobe:waitListStart');
        });
        $productContainer.find('.js-wait-list-form').find('input.js-waitlist-email').on('blur', function () {
          $productContainer.find('.js-wait-list-form').find('input.js-waitlist-email').off('focus');
        });
      } else {
        var action = response.product.pdpURL + '#waitlistenabled';
        $('.add-to-waitlist-link').attr('href', action);
        $('.add-to-cart-global').addClass('d-none');
        $('.js-add-to-cart ').find('.hideInWaitList').addClass('d-none');
        $('.update-cart-btn').addClass('d-none');
        $('.js-wait-list-form').removeClass('d-none');
        $('.js-add-to-waitlist-link').removeClass('d-none');
        $('.js-wait-list-form').find('.waitlist-product-id').val(response.product.id);
        $('.wait-list-success').empty();
        $('.wait-list-success').removeClass('d-none');
        $('.js-wait-list-form').find('input.js-waitlist-email').on('focus', function () {
          $('body').trigger('adobe:waitListStart');
        });
        $('.js-wait-list-form').find('input.js-waitlist-email').on('blur', function () {
          $('.js-wait-list-form').find('input.js-waitlist-email').off('focus');
        });
      }
    } else {
      $('.add-to-cart-global').removeClass('d-none');
      $('.update-cart-btn').removeClass('d-none');
      $('.js-add-to-cart ').find('.hideInWaitList').removeClass('d-none');
      $('.js-add-to-waitlist-link').addClass('d-none');
      $('.js-wait-list-form').addClass('d-none');
      $('.wait-list-success').empty();
    }
  }); // trigger event waitListAddStart on Saks plus landing page

  $('.js-wait-list-form').find('input.js-waitlist-email').on('focus', function () {
    $('body').trigger('adobe:waitListStart');
  });
  $('.js-wait-list-form').find('input.js-waitlist-email').on('blur', function () {
    $('.js-wait-list-form').find('input.js-waitlist-email').off('focus');
  });
  $('body').on('product:updateAvailability', function (e, response) {
    // bundle individual products
    $('.product-availability', response.$productContainer).data('ready-to-order', response.product.readyToOrder).data('available', response.product.available).find('.availability-msg').empty().html(response.message);
    $('div.error-msg').empty();

    if (!response.product.available && !response.product.waitlistable) {
      if (!response.product.availability.isInPurchaselimit) {
        createErrorNotificationQuickView(response.product.availability.isInPurchaselimitMessage);
      } else if (response.product.availability.messages && response.product.availability.messages.length > 0) {
        createErrorNotificationQuickView(response.product.availability.messages[0]);
      }
    }

    var dialog = $(response.$productContainer).closest('.quick-view-dialog');

    if ($('.product-availability', dialog).length) {
      // bundle all products
      var allAvailable = $('.product-availability', dialog).toArray().every(function (item) {
        return $(item).data('available');
      });
      var allReady = $('.product-availability', dialog).toArray().every(function (item) {
        return $(item).data('ready-to-order');
      });
      $('.global-availability', dialog).data('ready-to-order', allReady).data('available', allAvailable);
      $('.global-availability .availability-msg', dialog).empty().html(allReady ? response.message : response.resources.info_selectforstock);
    } else {
      // single product
      $('.global-availability', dialog).data('ready-to-order', response.product.readyToOrder).data('available', response.product.available).find('.availability-msg').empty().html(response.message);
    }
  });
  $('body').on('product:afterAttributeSelect', function (e, response) {
    if ($('.modal.show .product-quickview .bundle-items').length) {
      $('.modal.show').find(response.container).data('pid', response.data.product.id);
      $('.modal.show').find(response.container).find('.product-id').text(response.data.product.id);
    } else {
      $('.modal.show .product-quickview').data('pid', response.data.product.id);
    }

    TurnToCmd('set', {
      //eslint-disable-line
      sku: response.data.product.id //eslint-disable-line

    }); //eslint-disable-line
  });
  $('body').on('change', '.quantity-select', function () {
    var selectedQuantity = $(this).val();
    $('.modal.show .update-cart-url').data('selected-quantity', selectedQuantity);
  });
  $('body').on('change', '.options-select', function () {
    var selectedOptionValueId = $(this).children('option:selected').data('value-id');
    $('.modal.show .update-cart-url').data('selected-option', selectedOptionValueId);
  });
  $('body').on('change', '.quantity-form select', function () {
    $('.qty-error-message').empty();
    var preSelectQty = $(this).data('pre-select-qty');
    var quantity = $(this).val();

    if (!quantity && $(this).parent().find('.quantity-val')) {
      quantity = $(this).parent().find('.quantity-val').attr('max');
    }

    var productID = $(this).data('pid');
    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var shiptoSeleted = $('input[name="shipto_' + uuid + '"]').val();
    var urlParams = {
      pid: productID,
      quantity: quantity,
      uuid: uuid
    };
    urlParams.shipto = shiptoSeleted && shiptoSeleted.length > 0 ? shiptoSeleted : null;
    var isFromMiniCart = $(this).closest('.mini-cart-container').length > 0;
    var currElementPos = 0;

    if (isFromMiniCart) {
      currElementPos = $(this).closest('.product-summary').scrollTop();
    }

    url = appendToUrl(url, urlParams);
    $(this).parents('.card').spinner().start();
    $.ajax({
      url: url,
      type: 'get',
      context: this,
      dataType: 'json',
      success: function success(data) {
        $('.quantity[data-uuid="' + uuid + '"]').val(quantity);
        $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
        updateItemsHTML(data);
        updateMiniCartItemsHTML(data);
        updateCartTotals(data);
        updateApproachingDiscounts(data.approachingDiscounts);
        updateAvailability(data, uuid);
        validateBasket(data);
        updateDiscountsHtml(data);
        updateAppliedCouponCount(data);
        updateTotalSavings(data); // item quantity reset message

        updateSDDInfo(data, uuid);

        if ($('.enableShopRunner').length > 0) {
          if (typeof window.parent.sr_updateMessages === 'function') {
            window.parent.sr_updateMessages();
          }
        }

        if (isFromMiniCart) {
          $('body').trigger('adobeTagManager:quantityUpdateFromMiniCart', data);
          setMiniCartScrollHeight();
          $('.minicart .product-summary').each(function () {
            $(this).scrollTop(currElementPos);
          });
        } else {
          $('body').trigger('adobeTagManager:udpateCartQuantity', data);
        }

        $(this).data('pre-select-qty', quantity);
        $('body').trigger('cart:update');
        $.spinner().stop();
      },
      error: function error(err) {
        if (err.responseJSON) {
          if (err.responseJSON.redirectUrl) {
            window.location.href = err.responseJSON.redirectUrl;
          } else {
            /* if (err.responseJSON.isInStock === false) {
                          } else if (err.responseJSON.isInPurchaseLimit === false && $('body').hasClass('cart-page')) {
                              createPurchaseErrorNotificationAtLineItem(err.responseJSON.errorMessage, $(this));
                          } else {
                              createErrorNotification(err.responseJSON.errorMessage);
                          }*/
            createErrorNotificationOnLineItem(err.responseJSON.errorMessage, $(this).closest('.cart-minicart-error-msg')); // SFDEV-1933

            var $this = $(this).closest('div').find('input[class*="quantity-val"]');
            var currentVal = $this.val();
            var previousVal = parseInt(preSelectQty, 10);
            var availableATS = parseInt(err.responseJSON.availableATS || '1');

            if (currentVal > availableATS) {
              $this.val(parseInt(availableATS, 10));
            }

            var minValue = parseInt($this.attr('min'), 10);
            var maxValue = parseInt($this.attr('max'), 10);
            var valueCurrent = parseInt($this.val(), 10);
            var name = $this.attr('name');

            if (valueCurrent >= minValue) {
              $this.closest('div').find(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
            } else {
              $this.val($(this).data('oldValue'));
            }

            if (valueCurrent <= maxValue) {
              $this.closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
            }

            if (valueCurrent === maxValue) {
              $this.closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").attr('disabled', true); // eslint-disable-line
            } // update Drop Down

          }

          $.spinner().stop();
        }
      }
    });
  });
  $('.shippingMethods').change(function () {
    var url = $(this).attr('data-actionUrl');
    var urlParams = {
      methodID: $(this).find(':selected').attr('data-shipping-id')
    }; // url = appendToUrl(url, urlParams);

    $('.totals').spinner().start();
    $.ajax({
      url: url,
      type: 'post',
      dataType: 'json',
      data: urlParams,
      success: function success(data) {
        if (data.error) {
          window.location.href = data.redirectUrl;
        } else {
          $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
          updateCartTotals(data);
          updateApproachingDiscounts(data.approachingDiscounts);
          updateAppliedCouponCount(data);
          updateTotalSavings(data);
          validateBasket(data);
        }

        $.spinner().stop();
      },
      error: function error(err) {
        if (err.redirectUrl) {
          window.location.href = err.redirectUrl;
        } else {
          createErrorNotification(err.responseJSON.errorMessage);
          $.spinner().stop();
        }
      }
    });
  });
  $('body').on('click', '.add-sec-associate', function (e) {
    $('.js-comx-container-2').toggleClass('d-none');
    $(this).toggleClass('expanded');
    var $fields = $('.js-comx-container-2').find('select,input');

    if ($(this).hasClass('expanded')) {//$fields.prop('required', true);
    } else {
      //$fields.prop('required', false);
      $fields.removeClass('is-invalid').next('span').remove();
      $fields.val('');
      $('#comxAssociate2').closest('.form-group').find('.invalid-feedback').empty();
      $('#comxAssociate2').closest('.form-group').find('label').removeClass('is-invalid').removeClass('input-focus');
    }
  });
  $('body').on('click', '.add-comx-note', function (e) {
    $('.js-comx-add-note').toggleClass('d-none');
    $(this).toggleClass('expanded');
    $(this).hasClass('expanded') ? '' : $('.js-comx-add-note').find('textarea').val('').next('label').removeClass('input-focus');
  });
  $('body').on('keyup', '#comxAssociate2', function (event) {
    if ($(this).val().length > 0) {
      $(this).prop('required', true);
    } else {
      $('#comxAssociate2').prop('required', false);
      $('#comxAssociate2').removeClass('is-invalid');
      $('#comxAssociate2').closest('.form-group').find('label').removeClass('is-invalid');
      $('#comxAssociate2').next('span').remove();
      $('#comxAssociate2').closest('.form-group').find('.invalid-feedback').empty();
    }
  });
  $('body').on('change', '#comxStore2', function (e) {
    if ($(this).val() != '') {
      $('#comxAssociate2').prop('required', true);
    } else {
      $('#comxAssociate2').prop('required', false);
      $('#comxAssociate2').removeClass('is-invalid');
      $('#comxAssociate2').closest('.form-group').find('label').removeClass('input-focus is-invalid');
      $('#comxAssociate2').next('span.invalid').remove();
      $('#comxAssociate2').closest('.form-group').find('.invalid-feedback').empty();
    }
  });
  $('body').on('submit', '.promo-code-form', function (e) {
    e.preventDefault();
    $.spinner().start();
    $('.coupon-missing-error').hide();
    $('.coupon-error-message').empty();

    if (!$('.coupon-code-field').val()) {
      $('.promo-code-form .form-control').addClass('is-invalid');
      $('.promo-input label').addClass('is-invalid');
      $(this).find('.coupon-code-field').next('span.invalid').remove();
      $('<span class="invalid"></span>').insertAfter('.coupon-code-field');
      $('.promo-code-form .form-control').attr('aria-describedby', 'missingCouponCode');
      $('.coupon-missing-error').show();
      $.spinner().stop();
      var formData = {};
      formData.errorFields = ['coupon code'];
      formData.formName = 'cart';
      $('body').trigger('adobeTagManager:formError', formData);
      return false;
    }

    var $form = $('.promo-code-form');
    $('.promo-code-form .form-control').removeClass('is-invalid');
    $('.promo-input label').removeClass('is-invalid');
    $('.coupon-code-field').next('.invalid').remove();
    $('.coupon-error-message').empty();
    $.ajax({
      url: $form.attr('action'),
      type: 'GET',
      dataType: 'json',
      data: $form.serialize(),
      success: function success(data) {
        var promoCoupon = {};
        promoCoupon.status = data && !data.error;
        promoCoupon.coupon = $($form).find('.coupon-code-field').val();
        $('body').trigger('adobeTagManager:promoCodeEntered', promoCoupon);

        if (data.error) {
          $('.promo-code-form .form-control').addClass('is-invalid');
          $('.promo-input label').addClass('is-invalid');
          $('<span class="invalid"></span>').insertAfter('.coupon-code-field');
          $('.promo-code-form .form-control').attr('aria-describedby', 'invalidCouponCode');
          $('.coupon-error-message').empty().append(data.errorMessage);
          $('.coupon-code-field').val(promoCoupon.coupon);
        } else {
          $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
          updateItemsHTML(data);
          updateCartTotals(data);
          updateApproachingDiscounts(data.approachingDiscounts);
          updateDiscountsHtml(data);
          updateAppliedCouponCount(data);
          updateTotalSavings(data);
          updateOrderSummary(data);
          validateBasket(data);

          if ($('.enableShopRunner').length > 0) {
            if (typeof window.parent.sr_updateMessages === 'function') {
              window.parent.sr_updateMessages();
            }
          }

          $('.coupon-code-field').val('');

          if (data.iseligibledbonusitem && data.eligibledbonusitem != undefined) {
            $('body').trigger('adobe:getbonusproductonAppliedCoupon', data.eligibledbonusitem);
          }

          $('body').trigger('klarna:payment-stage', data.order);
        }

        if (data.order && data.order.orderSummaryPaymentHtml) {
          $('.order-summary-payment-applied').empty().html(data.order.orderSummaryPaymentHtml);
        }

        $('body').trigger('checkout:removeAmexPoints');
        $('.amex-main').removeClass('d-none');
        $('.amex-points-container').addClass('d-none');
        hbcTooltip.tooltipInit();
        $.spinner().stop();
      },
      error: function error(err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        } else {
          createErrorNotification(err.errorMessage);
          $.spinner().stop();
        }
      }
    });
    return false;
  });
  $('body').on('focusout', '.coupon-code-field', function (e) {
    e.preventDefault();
    var form = $('.promo-code-form');
    var couponCode = $('.coupon-code-field').val();

    if (!couponCode) {
      $('.coupon-missing-error').hide();
      $(form).find('.coupon-code-field').removeClass('is-invalid');
      $(form).find('.coupon-code-field').next('span').remove();
      $(form).find('span.coupon-error-message').empty();
      $(form).find('.coupon-code-field').next('label').removeClass('is-invalid').removeClass('input-focus');
    }
  });
  $('body').on('click', '.remove-coupon', function (e) {
    e.preventDefault();
    var url = $(this).data('action');
    var uuid = $(this).data('uuid');
    var couponCode = $(this).data('code');
    var urlParams = {
      code: couponCode,
      uuid: uuid
    };
    url = appendToUrl(url, urlParams);
    $('body > .modal-backdrop').remove();
    $('body').trigger('checkout:removeAmexPoints');
    $('.amex-main').removeClass('d-none');
    $('.amex-points-container').addClass('d-none');
    $.spinner().start();
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success(data) {
        $('.coupon-uuid-' + uuid).remove();
        $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
        updateItemsHTML(data);
        updateCartTotals(data);
        updateApproachingDiscounts(data.approachingDiscounts);
        updateAppliedCouponCount(data);
        updateDiscountsHtml(data);
        updateTotalSavings(data);
        validateBasket(data);
        updateOrderSummary(data);
        $('body').trigger('klarna:payment-stage', data.order);

        if ($('.enableShopRunner').length > 0) {
          if (typeof window.parent.sr_updateMessages === 'function') {
            window.parent.sr_updateMessages();
          }
        }

        if (data.order && data.order.orderSummaryPaymentHtml) {
          $('.order-summary-payment-applied').empty().html(data.order.orderSummaryPaymentHtml);
        }

        $.spinner().stop();
      },
      error: function error(err) {
        if (err.responseJSON.redirectUrl) {
          window.location.href = err.responseJSON.redirectUrl;
        } else {
          createErrorNotification(err.responseJSON.errorMessage);
          $.spinner().stop();
        }
      }
    });
  });
  $('body').on('hidden.bs.modal', '#chooseBonusProductModal', function () {
    $('#chooseBonusProductModal').remove();
    $('#chooseBonusProductModal').next().remove();

    if ($('#editProductModal').hasClass('show')) {
      $('body').addClass('modal-open');

      if ($(window).width() > 1024) {
        $('body').css('padding-right', '17px');
      }
    }

    if ($('.cart-page').length) {
      $('.launched-modal .btn-outline-primary').trigger('focus');
      $('.launched-modal').removeClass('launched-modal');
    } else {
      $('.product-detail .add-to-cart').focus();
    }
  });
  $('body').on('shown.bs.modal', '#editProductModal', function () {
    $('#editProductModal').siblings().attr('aria-hidden', 'true');
    $('#editProductModal .close').focus();
  });
  /* $('body')
        .on('click', '.form-group', '.promo-heading', function () {
            $('.form-group')
                .toggleClass('open-state');
            $('.form-group')
                .find('.promo-apply')
                .toggleClass('expand');
        });*/

  $('body').on('click', '.productDetailModal .back-icon, .productDetailModal .close', function () {
    $('.productDetailModal').removeClass('show').attr('aria-modal style');
  });
  $('body').on('hidden.bs.modal', '#editProductModal', function () {
    $('#editProductModal').siblings().attr('aria-hidden', 'false');
  });
  $('body').on('keydown', '#editProductModal', function (e) {
    var focusParams = {
      event: e,
      containerSelector: '#editProductModal',
      firstElementSelector: '.close',
      lastElementSelector: '.update-cart-product-global',
      nextToLastElementSelector: '.modal-footer .quantity-select'
    };
    focusHelper.setTabNextFocus(focusParams);
  });
  $('body').on('product:afterAttributeSelect', function (e, response) {
    if ($('.modal.show .product-quickview .bundle-items').length) {
      $('.modal.show').find(response.container).data('pid', response.data.product.id);
      $('.modal.show').find(response.container).find('.product-id').text(response.data.product.id);
      $('.modal.show').find(response.container).find('.bf-product-id').text(response.data.product.id);
    } else {
      $('.modal.show .product-quickview').data('pid', response.data.product.id);
      $('.modal.show .bf-product-id').text(response.data.product.id);
    }
  });
  $('body').on('change', '.quantity-select', function () {
    var selectedQuantity = $(this).val();
    $('.modal.show .update-cart-url').data('selected-quantity', selectedQuantity);
  });
  $('body').on('change', '.options-select', function () {
    var selectedOptionValueId = $(this).children('option:selected').data('value-id');
    $('.modal.show .update-cart-url').data('selected-option', selectedOptionValueId);
  });
  $('body').on('click', '.update-cart-product-global', function (e) {
    e.preventDefault();

    if (!$(this).data('readytoorder')) {
      $('.select-size-color').html($(this).data('readytoordertext'));
      return;
    }

    var updateProductUrl = $(this).closest('.cart-and-ipay').find('.update-cart-url').val();
    var selectedQuantity = $(this).closest('.cart-and-ipay').find('.update-cart-url').data('selected-quantity');
    var selectedOptionValueId = $(this).closest('.cart-and-ipay').find('.update-cart-url').data('selected-option');
    var uuid = $(this).closest('.cart-and-ipay').find('.update-cart-url').data('uuid');
    var selectedShipto = $('input[name="shipto_' + uuid + '"]:checked').length > 0 ? $('input[name="shipto_' + uuid + '"]:checked').val() : null;
    var form = {
      uuid: uuid,
      pid: base.getPidValue($(this)),
      quantity: selectedQuantity,
      selectedOptionValueId: selectedOptionValueId,
      selectedShipto: selectedShipto
    };
    $(this).parents('.card').spinner().start();

    if (updateProductUrl) {
      $.ajax({
        url: updateProductUrl,
        type: 'post',
        context: this,
        data: form,
        dataType: 'json',
        success: function success(data) {
          $('#editProductModal').modal('hide');
          $('.coupons-and-promos').empty().append(data.cartModel.totals.discountsHtml);
          updateCartTotals(data.cartModel);
          updateApproachingDiscounts(data.cartModel.approachingDiscounts);
          updateAvailability(data.cartModel, uuid);
          updateProductDetails(data, uuid);
          updateAppliedCouponCount(data.cartModel);
          updateTotalSavings(data.cartModel); // item quantity reset message

          updateSDDInfo(data, uuid);

          if (data.uuidToBeDeleted) {
            $('.uuid-' + data.uuidToBeDeleted).remove();
          }

          validateBasket(data.cartModel);
          $('body').trigger('cart:update');
          $.spinner().stop();
        },
        error: function error(err) {
          if (err.responseJSON.redirectUrl) {
            window.location.href = err.responseJSON.redirectUrl;
          } else {
            createErrorNotificationQuickView(err.responseJSON.errorMessage);
            $.spinner().stop();
          }
        }
      });
    }
  });
  /**
   * Initialize proxy checkout
   *
   */

  function initProxyCheckout() {
    $('body').on('click', '.proxy-checkout-btn', function (e) {
      e.preventDefault(); // Get the BFX Country Code sleected.

      $('.bfx-error-message').empty();

      if ($('.bfx-cc-countries').length > 0) {
        var bfxCountryCode = $('.bfx-cc-countries').val();

        if (bfxCountryCode !== 'US') {
          var bfxMerchatNumber = $('.bordefree-merchat-reference-number').text().trim();
          $('body').spinner().start();
          $.ajax({
            url: $(this).attr('href'),
            type: 'post',
            data: {
              bfxCountryCode: bfxCountryCode,
              bfxMerchatNumber: encodeURIComponent(bfxMerchatNumber)
            },
            dataType: 'json',
            success: function success(data) {
              if (data && data.success) {
                $('.trigger-checkout-btn')[0].click();
                setTimeout(function () {
                  $('body').spinner().stop();
                }, 3000);
              } else if (data.error && data.errorMessage) {
                var errorHtml = '<div class="alert alert-danger alert-dismissible valid-cart-error ' + 'fade show" role="alert">' + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' + '<span aria-hidden="true">&times;</span>' + '</button>' + data.errorMessage + '</div>';
                $('.cart-error').html('');
                $('.cart-error').append(errorHtml);
                $('body').spinner().stop();
              } else if (data.error && data.redirectURL) {
                window.location.href = data.redirectURL;
                $('body').spinner().stop();
              }
            },
            error: function error() {
              $('body').spinner().stop();
              window.location.reload();
            }
          });
        } else {
          $('.trigger-checkout-btn')[0].click();
        }
      } else {
        $('.trigger-checkout-btn')[0].click();
      }
    });
  }
  /**
   * Initialize checkout
   *
   */


  function initCheckout() {
    $('body').on('click', '.cart-summary-section .checkout-btn', function (e) {
      e.preventDefault();

      if (this.getAttribute('href').charAt(0) !== '#') {
        openLoginPopup($(this).attr('href'));
      }
    });
  }
  /**
   * initializing calculate tax
   *
   */


  function initCalculateTax() {
    $('body').on('submit', '.cart-tax-calculation-form', function (e) {
      e.preventDefault();
      $('body').spinner().start();
      $.ajax({
        url: $(this).attr('action'),
        type: 'post',
        data: $(this).serialize(),
        dataType: 'json',
        success: function success(data) {
          $('body').spinner().stop();
          $('.cart-summary-details .invalid-feedback-error').empty();

          if (!data.error) {
            updateCartTotals(data.data);
            $('.shipping-postal-code').text(data.postalCode);
            $('.postal-container').toggleClass('active');
            $('.tax_calculate').parents('.form-group').find('label, input').removeClass('is-invalid');
          } else {
            $('.cart-summary-details .invalid-feedback-error').html(data.error);
            $('.tax_calculate').parents('.form-group').find('label, input').addClass('is-invalid');
          }
        },
        error: function error() {
          $('body').spinner().stop();
        }
      });
    });
    $('body').on('click', '.cart-summary-details .shipping-postal-code', function (e) {
      e.preventDefault();
      $('.postal-container').toggleClass('active');
    });
    $('body').on('click', '.cart-summary-details .tax_cancel', function (e) {
      e.preventDefault();
      $('.postal-container').removeClass('active');
    });
  }

  function openCSCMOdel() {
    $('body').on('click', '.js-open-csc-price-model', function (e) {
      e.preventDefault();
      $('body').spinner().start();
      var itemPrice = $(this).closest('.cart-pdt-deatils').find('.formatted_price').last().text();
      var itemUUID = $(this).data('pliuuid');
      $('#editCSCPrice .csc-current-price').val(itemPrice);
      $('#editCSCPrice #newPrice').val('');
      $('.price-override-reason-options').val('');
      $('#editCSCPrice .csc-pli-uuid').val(itemUUID);
      $('#editCSCPrice .csr_error_message').removeClass('alert alert-danger alert-dismissible');
      $('#editCSCPrice .csr_error_message').empty();
      $('#editCSCPrice').modal('show');
      $('body').spinner().stop();
    });
  }

  $(document).on('keydown', '#newPrice', function (e) {
    if (e.ctrlKey === true && (e.which === 118 || e.which === 86)) {
      e.preventDefault();
    }

    var keyVal = e.which ? e.which : e.keyCode;

    if (keyVal === 46 || keyVal === 190 || keyVal === 8) {
      return true;
    } else if (!(keyVal >= 48 && keyVal <= 57)) {
      return false;
    }
  });
  $(document).on('cart:removeitem', function (e, data) {
    var itemContainer = $(e.target).closest('.uuid-' + data.uuid);

    if (itemContainer) {
      var removeButton = itemContainer.find('.remove-product, .remove-prod-minicart');

      if (removeButton.length === 0) {
        var removeButtonElement = "<button type='button' class='d-none remove-product' " + "data-target='.cart.cart-page #removeProductModal' data-pid='${data.pid}' " + "data-action=${data.url} data-uuid='${data.uuid}'>" + "<span aria-hidden='true' class='svg-image svg-36-avenue-Up_Copy svg-36-avenue-Up_Copy-dims'></span>" + '</button>';
        itemContainer.append(removeButtonElement);
        removeButton = itemContainer.find('.remove-product');
      }

      $(removeButton[0]).trigger('click');
    }
  });

  function submitCSCPrice() {
    $('body').on('submit', '.price-override-form', function (e) {
      e.preventDefault();
      var $form = $(this);
      var pliuuid = $('#editCSCPrice .csc-pli-uuid').val();
      $('.csr_error_message').empty();
      $('.csr_error_message').removeClass('alert alert-danger alert-dismissible');
      $('body').spinner().start();
      $.ajax({
        url: $form.attr('action'),
        type: 'post',
        data: $(this).closest('form').serialize(),
        dataType: 'json',
        success: function success(data) {
          $('body').spinner().stop();
          $('.coupons-and-promos').empty().append(data.totals.discountsHtml);
          updateItemsHTML(data);
          updateMiniCartItemsHTML(data);
          updateCartTotals(data);
          updateApproachingDiscounts(data.approachingDiscounts);
          updateAvailability(data, pliuuid);
          validateBasket(data);
          updateDiscountsHtml(data);
          updateAppliedCouponCount(data);
          updateTotalSavings(data);
          $('body').trigger('cart:update');

          if (!data.CSRSuccess && data.CSRerrorMessage) {
            $('.csr_error_message').empty().text(data.CSRerrorMessage);
            $('.csr_error_message').addClass('alert alert-danger alert-dismissible');
          } else {
            $('#editCSCPrice').modal('hide');
          }

          $('body').spinner().stop();

          if ($('.enableShopRunner').length > 0) {
            if (typeof window.parent.sr_updateMessages === 'function') {
              window.parent.sr_updateMessages();
            }
          }
        },
        error: function error() {
          $('body').spinner().stop();
        }
      });
    });
  }
  /**
   * Init on click of alternate image
   */


  function initAlternateImage() {
    $('body').on('click', '.product-quickview .slick-next, .product-quickview .slick-prev', function () {
      $('body').trigger('adobeTagManager:quickViewAltImageView');
    });
  }
  /**
   * Init on click of alternate image
   */


  function initAlternateBubble() {
    $('body').on('click', '.product-quickview .slick-dots button', function () {
      $('body').trigger('adobeTagManager:quickViewAltImageView');
    });
  }
  /**
   * Init Adobe Analytices paymentServiceExit event
   */


  function initPaymentServiceExit() {
    /*
     *   paypal cart button click event handled in LINK_PayPal/cartridges/int_paypal_sfra/cartridge/static/default/js/paypalUtils.js
     *   paypal billing button click event handled in LINK_PayPal/cartridges/int_paypal_sfra/cartridge/static/default/js/paypalMFRA.js
     */
    $('.pass-cart-buttons-container').find('img#masterpass-payment').on('click', function () {
      $('body').trigger('adobeTagManager:exitToPaymentService', 'masterpass');
    }); //Shoprunner Button CLick on Signin

    if (typeof _shoprunner_com !== 'undefined') {
      _shoprunner_com.calls = {};

      _shoprunner_com.calls.on_ec_open = function () {
        $('body').trigger('adobeTagManager:exitToPaymentService', 'shoprunner_express');
      };
    }
  }
  /**
   * function to enable button if data/input available in promo and hbc rewards field
   */


  function promoRewardsButtonUpdate() {
    $('.promoRewHolder').on('input', 'input.emptyCheck', function () {
      if ($(this).val().length > 0) {
        $(this).closest('.promoRewHolder').find('.prmoRewBtnHolder button').removeAttr('disabled');
      } else {
        $(this).closest('.promoRewHolder').find('.prmoRewBtnHolder button').attr('disabled', true);
        $(this).closest('.promoRewHolder').find('span.coupon-error-message').empty();
        $(this).removeClass('is-invalid');
        $(this).next('span').remove();
        $(this).closest('.promo-code-entry').find('label').removeClass('is-invalid');
      }
    });
  }
  /**
   * Trigger basket limit messaging modal
   */


  function triggerBasketMimitModal() {
    if ($('.cart-page-content').length > 0 && $('.cart-page-content').attr('data-basketlimit-reached') != undefined && $('.cart-page-content').attr('data-basketlimit-reached') === 'true' || $('.welcome-account-header').length > 0 && $('.welcome-account-header').attr('data-basketlimit-reached') != undefined && $('.welcome-account-header').attr('data-basketlimit-reached') === 'true') {
      $('body').trigger('triggerBasketLimitMsgModal');
    }
  }

  function checkAvailabilityOnHover() {
    $('body').on('mouseenter', '.product-tile', function (e) {
      // check avaiability of the product upon hover and update the button text and treatment on tile
      // Ajax call is necessary to determine the availability without compromising tile cache
      var performedCheck = $(this).closest('.product-tile').hasClass('updated-availability');

      if (!performedCheck) {
        $(this).closest('.product-tile').addClass('updated-availability');
        var url = $(this).closest('.product-tile').data('availabilityurl');
        var $productContainer = $(this).closest('.product-tile');
        var atcButton = $(this).closest('.product-tile').find('.ajax-update-atc-button');
        var pid = $(this).closest('.product').data('pid');

        if (!url) {
          return;
        } // removing hover due to sfsx-2039


        $.ajax({
          url: url,
          method: 'GET',
          success: function success(data) {
            atcButton.attr('disabled', !data.product.available);

            if (!data.product.available) {
              atcButton.addClass('soldout');
              atcButton.text(data.resources.soldout);
            } else if (data.product.preOrder && data.product.preOrder.applicable && data.product.preOrder.applicable === true) {
              atcButton.removeClass('soldout');
              atcButton.text(data.product.preOrder.preorderButtonName);
            } else {
              atcButton.removeClass('soldout');
              atcButton.text(data.resources.addtobag);
            }
          },
          error: function error() {}
        });
      }
    });
  }

  function loadCartWishlistAsync() {
    if ($('.page').data('action') === 'Cart-Show') {
      $.ajax({
        url: $('.cart-page-content').data('cart-wishlist'),
        success: function success(response) {
          $('body').find('.cart-wl-content').html(response);
          hbcSlider.hbcSliderInit('wishlist-cart-slider');
          hbcSlider.cartReccommendationSliderInit();
        }
      });
    }
  }

  hbcTooltip.tooltipInit();
  base.initQuantity();
  base.availability();
  base.selectAttribute();
  base.colorAttribute();
  base.removeBonusProduct();
  base.selectBonusProduct();
  base.enableBonusProductSelection();
  base.showMoreBonusProducts();
  base.addBonusProductsToCart();
  base.focusChooseBonusProductModal();
  base.trapChooseBonusProductModalFocus();
  base.onClosingChooseBonusProductModal();
  initSignIn();
  initCheckout();
  initCalculateTax();
  initValidateOptionalBonusSelect();
  initOptionalBonusSelect();
  initChooseBonusProductDetails();
  initProxyCheckout();
  openCSCMOdel();
  submitCSCPrice();
  initAlternateImage();
  initAlternateBubble();
  initPaymentServiceExit();
  promoRewardsButtonUpdate();
  triggerBasketMimitModal();
  checkAvailabilityOnHover();
  loadCartWishlistAsync();
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cartInstoreOptions.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cartInstoreOptions.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! core/cart/cartInstoreOptions */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/cart/cartInstoreOptions.js");

var pdpInstoreInventory = __webpack_require__(/*! ../product/pdpInstoreInventory */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/pdpInstoreInventory.js");
/**
 * Update tax totals
 *
 * @param {Object} data - Tax totals data
 */


function updateTaxTotal(data) {
  if (data.totals.canadaTaxation && data.totals.canadaTaxation.PST) {
    $('.tax-PST-total').empty().append(data.totals.canadaTaxation.PST);
    $('.tax-pst').removeClass('d-none');
  } else if (!$('.tax-pst').hasClass('d-none')) {
    $('.tax-pst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation['GST/HST']) {
    $('.tax-GST-total').empty().append(data.totals.canadaTaxation['GST/HST']);
    $('.tax-gst').removeClass('d-none');
  } else if (!$('.tax-gst').hasClass('d-none')) {
    $('.tax-gst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.QST) {
    $('.tax-QST-total').empty().append(data.totals.canadaTaxation.QST);
    $('.tax-qst').removeClass('d-none');
  } else if (!$('.tax-qst').hasClass('d-none')) {
    $('.tax-qst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.RST) {
    $('.tax-RST-total').empty().append(data.totals.canadaTaxation.RST);
    $('.tax-rst').removeClass('d-none');
  } else if (!$('.tax-rst').hasClass('d-none')) {
    $('.tax-rst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.ECO) {
    $('.tax-ECO-total').empty().append(data.totals.canadaTaxation.ECO);
    $('.tax-eco').removeClass('d-none');
  } else if (!$('.tax-eco').hasClass('d-none')) {
    $('.tax-eco').addClass('d-none');
  }

  if (!data.totals.canadaTaxation) {
    $('.tax-total').empty().append(data.totals.totalTax);
    $('.tax-normal').removeClass('d-none');
  } else if (!$('.tax-normal').hasClass('d-none')) {
    $('.tax-normal').addClass('d-none');
  }
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} data - AJAX response from the server
 */


function updateCartTotals(data) {
  $('.shipping-method-price').empty().append('- ' + data.totals.totalShippingCost);
  updateTaxTotal(data);
  $('.grand-total-sum').empty().append(data.totals.grandTotal);
  $('.grand-total-value').empty().append(data.totals.grandTotalValue);
  $('.sub-total').empty().append(data.totals.subTotal);

  if (data.totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  }

  if (data.totals.totalShippingCostUnformatted == 0 || data.totals.totalShippingCostUnformatted == data.totals.shippingLevelDiscountTotal.value) {
    $('.shipping-total-cost').empty().append(data.totals.freeShippingText);
    $('.shipping-method-price').empty().append('- ' + data.totals.freeShippingText);
  } else {
    $('.shipping-total-cost').empty().append(data.totals.totalShippingCost);
  }

  if (data.totals.shippingLevelDiscountTotal.value > 0 && data.totals.totalShippingCostUnformatted != data.totals.shippingLevelDiscountTotal.value) {
    $('.shipping-discount').removeClass('hide-shipping-discount');
    $('.shipping-discount-total').empty().append('- ' + data.totals.shippingLevelDiscountTotal.formatted);
  } else {
    $('.shipping-discount').addClass('hide-shipping-discount');
    $('.shipping-discount-total').empty().append('- ' + data.totals.shippingLevelDiscountTotal.formatted);
  } // append hidden values for bfx-order discount. This tag excludes the product promo price unlike the above orderLevetotalDiscount


  if (data.totals.orderLevelDiscTotalExc.value > 0) {
    $('.order-discount-exlc-total').empty().append('- ' + data.totals.orderLevelDiscTotalExc.formatted);
  }

  if (data.totals.totalSavings.value > 0) {
    $('.grand-total-saving-container').removeClass('d-none');
    $('.checkout-total-savings').empty().append(data.totals.totalSavings.formatted);
  } else {
    $('.grand-total-saving-container').addClass('d-none');
  }
}
/**
 * triggers change store option for a product matching the UUID parameter
 * @param {sting} pliUUID - item uuid to fetch the precise container
 */


function triggerChangeStore(pliUUID, noInventory) {
  var $container = $('.cart-options[data-product-uuid="' + pliUUID + '"]');
  var shipToContainer = $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').find('a');

  if (noInventory) {
    shipToContainer.addClass('no-inventory');
  } else {
    shipToContainer.removeClass('no-inventory');
  }

  if (shipToContainer.length) {
    shipToContainer.trigger('click');
  }
}
/**
 * remove the store selector modal when a store is selected out of results
 */


function removeSelectStoreModal() {
  if ($('#inStoreInventoryModal').length > 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
    $('#inStoreInventoryModal').attr('aria-modal', 'false');
    $('.modal-backdrop').remove();
  }
}
/**
 * Updates the store name in the radio label with the new store selected from modal.
 * @param {Object} data - Contains the store info
 * @param {sting} pliUUID - item uuid to fetch the precise container
 */


function updateStoreContent(data, pliUUID) {
  var $container = $('.cart-options[data-product-uuid="' + pliUUID + '"]');
  var shipToContainer = $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').find('a');
  shipToContainer.removeClass('no-inventory'); // content update if store is found

  if (data.storeName && data.storeName !== undefined && data.storeId && data.storeId !== undefined && shipToContainer.length > 0) {
    $container.find('input[value=instore]').attr('data-store-id', data.storeId);
    $container.find('input[value=instore]').removeClass('change-store');
    shipToContainer.html(data.storeName.toLowerCase());
  } else if (data.changeStoreHtml) {
    $container.find('input[value=instore]').siblings('label[for=instore_' + pliUUID + ']').html(data.changeStoreHtml);
  }

  if (data.storeName && data.storeName !== undefined && data.storeId && data.storeId !== undefined) {
    $container.find('input[value=instore]').removeClass('change-store');
  }
}

base.changeStore = pdpInstoreInventory.changeStore;
base.searchSDDWithPostal = pdpInstoreInventory.searchSDDWithPostal; // sdd zip search modal

base.selectZipWithInventory = pdpInstoreInventory.selectZipWithInventory; //set inventory

base.toggleShippingOption = function () {
  $('body').on('store:cart', function (e, reqdata) {
    var pliUUID = reqdata.pliUUID;
    var storeId = reqdata.storeId;
    var prodid = reqdata.prodid;
    $.spinner().start();
    var changeShiptoUrl = reqdata.url; // form data

    var form = {
      storeId: storeId,
      uuid: pliUUID,
      prodid: prodid
    };

    if (changeShiptoUrl) {
      $.ajax({
        url: changeShiptoUrl,
        data: form,
        success: function success(data) {
          var $cartLimitedMsgCont = $('.product-info.uuid-' + pliUUID).find('.limited-inventory.cond-3');

          if (reqdata.savefromModal) {
            if (reqdata.selected === 'instore' && !data.storeId) {
              removeSelectStoreModal();
              triggerChangeStore(pliUUID);
            } else {
              updateStoreContent(data, pliUUID); // if event invoke is from modal, updates store html with radio

              removeSelectStoreModal(); // close modal on successful update
            }
          }

          if (data.limitedInventory && $cartLimitedMsgCont.length > 0) {
            $cartLimitedMsgCont.removeClass('d-none');
          } else {
            $cartLimitedMsgCont.addClass('d-none');
          }
          /*
                    if (data.basketModel.totals.totalShippingCostUnformatted == 0) {
                        $(".shipping-total-cost").empty().append(data.basketModel.totals.freeShippingText);
                    } else {
                        $(".shipping-total-cost").empty().append(data.basketModel.totals.totalShippingCost);
                    } */


          updateCartTotals(data.basketModel);
          setTimeout(function () {
            $.spinner().stop();
          }, 2000);
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  });
};

base.updateStoreCart = function () {
  $('body').on('store:changeStore', function (e, data) {
    var pliUUID = data.pliUUID;
    $.spinner().start();
    updateStoreContent(data, pliUUID); // if event invoke is from modal, updates store html with radio

    removeSelectStoreModal(); // close modal on successful update

    $.spinner().stop();
  });
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/commissionCookies.js":
/*!********************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/commissionCookies.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Store cookies with commission vendor data
 * @param request
 * @returns
 */
function manageCommissionCookies(sfData) {
  var site_refer = sfData.site_refer; // do not store cookies if site_refer parameter does not exist or empty

  if (!validateSiteRefer(site_refer)) {
    return;
  }

  var commissionCookieNames = ['site_refer', 'sf_storeid', 'sf_associd'];
  var age = 14 * 24 * 60 * 60 * 1000;
  commissionCookieNames.forEach(function (name) {
    var value = sfData[name];
    var expires = new Date();
    expires.setTime(expires.getTime() + age);
    document.cookie = name + '=' + value + ';path=/;Secure;SameSite=None;expires=' + expires.toUTCString();
  });
}

function getUrlParameter(name, queryString) {
  name = name.replace(/[\[\]]/g, '\\$&');
  var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
  var results = regex.exec(queryString);
  return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

function getCookie(name) {
  var value = '; ' + document.cookie;
  var parts = value.split('; ' + name + '=');
  if (parts.length >= 2) return parts.pop().split(';').shift();
}
/**
 * Attribution logic for cookies
 * @param value
 * @returns
 */


function validateSiteRefer(value) {
  if (!value) {
    return false;
  } // If Site Refer contains EML, TRP or TR, Do not set the Site Refere if existing site refer is CNCT and COMX


  if (value.indexOf('EML') > 0 || value.indexOf('TRP') > 0 || value.indexOf('TR') > 0) {
    var getSite_Refer = getCookie('site_refer');

    if (getSite_Refer.indexOf('CNCT') > 0 || getSite_Refer.indexOf('COMX') > 0) {
      return false;
    }
  }

  var site_ref_search = 'SEM';
  var site_ref_email = 'EML';
  var site_ref_email_SF = 'EMLHB_SF';
  var emlRegexp = new RegExp('^(' + site_ref_email + '|' + site_ref_search + ')');

  if (emlRegexp.test(value)) {
    if (value !== site_ref_email_SF) {
      return false;
    }
  }

  return true;
}

function prepareSFdate(data) {
  var sfData = {};
  var queryString = window.location.search;
  var site_refer = getUrlParameter('site_refer', queryString);

  if (site_refer) {
    sfData.site_refer = site_refer;
  } else if (data.site_refer) {
    sfData.site_refer = data.site_refer;
  } else {
    sfData.site_refer = 'salesfloor';
  }

  if (sfData.site_refer == 'salesfloor') {
    if (data.store_id) sfData.sf_storeid = data.store_id;
    if (data.employee_id) sfData.sf_associd = data.employee_id;
  } else {
    sfData.sf_associd = getUrlParameter('sf_associd', queryString);
    sfData.sf_storeid = getUrlParameter('sf_storeid', queryString);
  }

  return sfData;
}

module.exports = function () {
  $(window).on('load', function () {
    if (window.sf_widget && window.sf_widget.utils) {
      try {
        window.sf_widget.utils.isWithinGeo().then(function (data) {
          if (data === true) {
            $('.stylist-chat-btn').prop('disabled', false);
            sessionStorage.setItem('sf_within_geo', true);
          } else {
            $('.stylist-chat-btn').prop('disabled', true);
          }
        });
      } catch (err) {
        console.log(err); //eslint-disable-line
      }
    }
  });
  $(window).on('load', function () {
    try {
      sf_widget.utils.getTrackingEmployeeObjectAsPromise().then(function (data) {
        if (data) {
          var sfData = prepareSFdate(data);
          manageCommissionCookies(sfData);
        }
      });
    } catch (e) {
      console.log('There was an error with the SF_widget : ' + e.message);
    }
  });

  if (window.location.search.indexOf('site_refer')) {
    var queryString = window.location.search;
    var site_refer = getUrlParameter('site_refer', queryString);

    if (site_refer !== '') {
      var data = {};
      data.site_refer = site_refer;
      data.sf_associd = getUrlParameter('sf_associd', queryString);
      data.sf_storeid = getUrlParameter('sf_storeid', queryString);
      manageCommissionCookies(data);
    }
  }

  $(window).on('load', function () {
    try {
      // Initialize the COMX Session
      var comxURL = $('.comx-init').attr('data-url');
      $.ajax({
        url: comxURL,
        type: 'get',
        dataType: 'json',
        success: function success(data) {}
      });
    } catch (e) {
      console.log('There was an error with the COMX Session Init : ' + e.message);
    }
  });
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/consentTracking.js":
/*!******************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/consentTracking.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Renders a modal window that will track the users consenting to accepting site tracking policy
 */

function showConsentModal() {
  if (!$('.tracking-consent.consent').data('caonline')) {
    return;
  }

  var urlContent = $('.tracking-consent').data('url');
  var urlAccept = $('.tracking-consent').data('accept');
  var urlReject = $('.tracking-consent').data('reject');
  var textYes = $('.tracking-consent').data('accepttext');
  var htmlString = '<!-- Modal -->' + '<div class="modal show" id="consent-tracking" role="dialog" style="display: block;">' + '<div class="modal-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '<div class="button-wrapper">' + '<button aria-label="Close cookie" type="button" class="close svg-svg-22-cross svg-svg-22-cross-dims" data-url="' + urlReject + '">' + // eslint-disable-line
  '</button>' + '</div>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer">' + '<div class="button-wrapper">' + '<button role="button" class="affirm btn btn-primary" data-url="' + urlAccept + '">' + textYes + '</button>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>';
  $.spinner().start();
  $('body').append(htmlString);
  $.ajax({
    url: urlContent,
    type: 'get',
    dataType: 'html',
    success: function success(response) {
      $('#consent-tracking').find('.modal-body').html(response);
      trapFocus();
      $.spinner().stop();
    },
    error: function error() {
      $('#consent-tracking').remove();
      $.spinner().stop();
    }
  });
  $('#consent-tracking .button-wrapper button').click(function (e) {
    e.preventDefault();
    var url = $(this).data('url');
    $.ajax({
      url: url,
      type: 'get',
      dataType: 'json',
      success: function success() {
        releaseFocus();
        $('#consent-tracking').remove();
        $.spinner().stop();
      },
      error: function error() {
        $('#consent-tracking').remove();
        $.spinner().stop();
      }
    });
  });
}
/**
 * Finds the first visible focusable element in the body and focuses on it
 */


function focusOnFirstVisibleElement() {
  $('#header-container').find(':focusable:visible:first').get(0).focus();
}
/**
 * Finds the next focusable element in the modal overlay and focuses that
 * @param {Element} currentItem DOM element representing the currenly focussed item.
 * @param {boolean} forward determines the direction of the next item to find
 */


function focusNextItem(currentItem, forward) {
  var focusableItems = document.querySelectorAll('#consent-tracking a, #consent-tracking button');
  var currentItemIndex = Array.prototype.indexOf.call(focusableItems, currentItem);
  var nextItem;

  if (currentItemIndex > -1) {
    switch (currentItemIndex) {
      case 0:
        nextItem = forward ? focusableItems[1] : focusableItems[focusableItems.length - 1];
        break;

      case focusableItems.length - 1:
        nextItem = forward ? focusableItems[0] : focusableItems[currentItemIndex - 1];
        break;

      default:
        nextItem = forward ? focusableItems[currentItemIndex + 1] : focusableItems[currentItemIndex - 1];
        break;
    }

    nextItem.focus();
  } else {
    focusableItems[0].focus();
  }
}
/**
 * Handles keyboard events to cycle through focusable items in the modal overlay
 * @param {Event} evt The event object
 */


function keepFocusInModal(evt) {
  var currentItem = evt.target;

  switch (evt.keyCode) {
    case 9: // Tab

    case 39: // Right Arrow

    case 40:
      // Down Arrow
      evt.preventDefault();
      focusNextItem(currentItem, true);
      break;

    case 37: // Left Arrow

    case 38:
      // Up Arrow
      evt.preventDefault();
      focusNextItem(currentItem, false);
      break;

    case 27:
      // Escape key
      evt.preventDefault();
      focusOnFirstVisibleElement();
  }
}
/**
 * Traps focus within the consent overlay
 */


function trapFocus() {
  var modal = $('#consent-tracking');
  var acceptButton = modal.find('button.affirm'); // Default focusing on the accept button

  acceptButton.focus();
  modal.on('keydown', keepFocusInModal);
}
/**
 * Releases focus from the modal and kills the keydown listener
 */


function releaseFocus() {
  $('#consent-tracking').off('keydown', keepFocusInModal);
  focusOnFirstVisibleElement();
}

module.exports = function () {
  if ($('.consented').length === 0 && $('.tracking-consent.consent').hasClass('api-true')) {
    showConsentModal();
  }

  if ($('.tracking-consent.consent').hasClass('api-true')) {
    $('.tracking-consent.consent').click(function () {
      showConsentModal();
    });
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/designerIndex.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/designerIndex.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // code for anchoring

$(document).on('click', '.designer-alphas a[href]', function (e) {
  e.preventDefault();
  var activeLetter = $('.designer-alphas .active a').text().trim() || 0;
  var currentOffcet = activeLetter != 0 ? parseInt($('#' + activeLetter).offset().top) : 0;
  var href = $(this).attr('href');
  var scrollPosition = parseInt($('#' + href).offset().top);
  var height = parseInt($('#' + href + ' .alpha-bet').height());
  var margin = parseInt($('#' + href).css('margin-top').substring(0, 2));
  var space = margin + height;
  $('.designer-alphas').find('li').removeClass('active');
  $(this).closest('li').addClass('active');
  $('html, body').animate({
    /* eslint-disable */
    scrollTop: scrollPosition < currentOffcet ? scrollPosition - $('.navigation-section').height() - space : scrollPosition - space
    /* eslint-enable */

  }, 500);
});
/**
 * Designer Index Slider
 *
 */

function stickyDesignerAlphas() {
  $('.designer-alphas').removeClass('fixed-alphas');

  if ($('.main-menu').hasClass('fixed') || $('#header-container').hasClass('fixed')) {
    $('.designer-alphas').addClass('fixed-alphas');
  }
}
/**
 * Designer Index Slider
 *
 */


function designerSlider() {
  if ($(window).width() <= 1023.99) {
    $('.designer-main').find('.designer-alphas').not('.slick-initialized').slick({
      responsive: [{
        breakpoint: 1025,
        settings: 'unslick'
      }, {
        breakpoint: 769,
        settings: {
          slidesToShow: 16,
          slidesToScroll: 16,
          infinite: false,
          arrows: false
        }
      }, {
        breakpoint: 767,
        settings: {
          slidesToShow: 8,
          slidesToScroll: 8,
          infinite: false,
          arrows: false
        }
      }]
    });
  }
}

designerSlider();
$(window).resize(function () {
  designerSlider();
  stickyDesignerAlphas();
});
$(window).scroll(function () {
  stickyDesignerAlphas();
});
var stickyHeight = $('.navigation-section').outerHeight();
$(document).on('page:scrollDown', function () {
  $('.designer-alphas').css('top', '0');
}).on('page:scrollUp', function () {
  $('.designer-alphas').css('top', stickyHeight);
});

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/footer.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/footer.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js");
/**
 * appends params to a url
 * @param {string} data - data returned from the server's ajax call
 * @param {Object} button - button that was clicked for email sign-up
 */


function displayMessage(data, button) {
  $.spinner().stop();
  var status;
  var $this = $('.home-email-signup').find('.email-signup-input input');
  $('.home-email-signup').find('.error-container .error').remove();
  $('.email-signup-input').removeClass('error');

  if (data.success) {
    status = 'alert-success';
  } else {
    status = 'alert-danger';
  }

  if ($('.email-signup-message-footer').length === 0) {
    $('div.email-signup-input').append('<div class="email-signup-message-footer"></div>');
  }

  if (data.success) {
    $('.email-signup-message-footer').append('<div class="d-flex align-items-center ' + status + '"><span class="success-content-ave">' + data.msg + '<span class="svg-21-avenue-thick-success-dims svg-21-avenue-thick-success success-img"></span></span></div>');
    $('.email-signup-input').addClass('success');
    $this.next('span').remove();
    button.closest('.signup-wrap').find('input,label,button').addClass('invisible');
    button.closest('form').find('.sign-up-bottom').addClass('invisible');
    setTimeout(function () {
      $('.email-signup-message-footer').remove();
      $('.email-signup-input').removeClass('success');
      $('.email-signup-input').find('input').val(''); // remove the email prefill as he has already submitted

      $('.email-signup-input').find('input').next('label').removeClass('input-focus');
      button.closest('.signup-wrap').find('input,label,button').removeClass('invisible');
      button.closest('form').find('.sign-up-bottom').removeClass('invisible');
      button.removeAttr('disabled');
    }, 3000);
  } else {
    $('.home-email-signup').find('.error-container').append('<span class="error">' + data.msg + '</span>');

    if ($this.next('span').length === 0) {
      $('<span class="invalid"></span>').insertAfter($this);
    }

    $('.email-signup-input').addClass('error');
    button.removeAttr('disabled');
  }
}

module.exports = function () {
  $(window).scroll(function () {
    if ($(window).scrollTop() > 100 && ($('.grecaptcha-badge').css('visibility') == 'hidden' || $('.grecaptcha-badge:visible').length <= 0)) {
      $('.back-to-top').addClass('active');
    } else $('.back-to-top').removeClass('active');
  });
  $('.back-to-top').click(function () {
    scrollAnimate();
  });
  $('.subscribe-email').on('click', function (e) {
    e.preventDefault();
    var url = $(this).data('href');
    var button = $(this);
    var subscribeForm = $(this).closest('form');
    var emailId = $('input[name=hpEmailSignUp]').val();
    var reg = /^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/;
    if (!reg.test($('input[name=hpEmailSignUp]').val())) return false;
    $.spinner().start();
    $(this).attr('disabled', true);
    $.ajax({
      url: url,
      type: 'post',
      dataType: 'json',
      data: {
        emailId: emailId
      },
      success: function success(data) {
        displayMessage(data, button);

        if (data.success) {
          $('body').trigger('adobeTagManager:emailsignupmodal', 'footer');
        }
      },
      error: function error(err) {
        displayMessage(err, button);
      }
    });
  });
  $('.signup-wrap').on('input', '.email-signup-input input', function () {
    if ($(this).val() == 0 && $(this).parent().hasClass('error')) {
      $(this).next('span').remove();
      $(this).closest('.email-input-box').find('.error-container span').empty();
      $(this).parent().removeClass('error');
    }
  });
  $('.liveChat-btn').on('click', function () {
    var isInternalUser = $('#isInternalUser').data('internaluser'); // Make sure that User is external using SFCC Geolaction along with Salesfloor Geolocation

    if (!sessionStorage.sf_within_geo && !isInternalUser) {
      $('.arrow-left').toggleClass('d-sm-block');
      $('.live-chat-view-3').removeClass('d-none');
      $('.live-chat-view-2').addClass('d-none');
      $('.chat-img').toggleClass('d-none');
      $('.chat-img-cross').toggleClass('d-none');
    } else {
      $('.live-chat-view-2').removeClass('d-none');
      $('.live-chat-view-3').addClass('d-none');
      $('.chat-img').toggleClass('d-none');
      $('.chat-img-cross').toggleClass('d-none');
    }

    $('body').toggleClass('chat-overlay');
    $('.live-chat-content').toggleClass('d-none');
    $('.page').addClass('non-scrollable');

    if (!$('.chat-img-cross').hasClass('d-none')) {
      // Make sure if user is internal,should see the connect with stylist.
      if (sessionStorage.sf_within_geo || isInternalUser) {
        $('.live-chat-view-2').removeClass('d-none');
        $('.live-chat-view-3').addClass('d-none');
        $('.live-chat-view-4').addClass('d-none');
      }
    }

    if ($('.embeddedServiceHelpButton .helpButton .uiButton.helpButtonDisabled').length > 0) {
      $('.chat-service-links .customer-service-chat-link').addClass('live-chat-offline');
    } else if ($('.embeddedServiceHelpButton .helpButton .uiButton.helpButtonEnabled').length > 0) {
      $('.chat-service-links .customer-service-chat-link').addClass('live-chat-online');
    }
  });
  $('.stylist-chat-btn').on('click', function () {
    $('.live-chat-content').toggleClass('d-none');
    $('.live-chat-view-2').toggleClass('d-none');
    $('.chat-img').toggleClass('d-none');
    $('.chat-img-cross').toggleClass('d-none');
    $('.page').removeClass('non-scrollable');
  });
  $('.customer-service-button').on('click', function () {
    $('.live-chat-view-2').toggleClass('d-none');
    $('.live-chat-view-3').toggleClass('d-none');
  });
  $('.customer-service').on('click', function () {
    $('.live-chat-view-2').toggleClass('d-none');
    $('.live-chat-view-3').toggleClass('d-none');
  });
  $('.customer-service-call-link').on('click', function () {
    $('.live-chat-view-3').toggleClass('d-none');
    $('.live-chat-view-4').toggleClass('d-none');
  });
  $('.customer-service-call-link-saks').on('click', function () {
    $('.live-chat-view-2').toggleClass('d-none');
    $('.live-chat-view-3').toggleClass('d-none');
  });
  $('.call-customer-service').on('click', function () {
    $('.live-chat-view-3').toggleClass('d-none');
    $('.live-chat-view-4').toggleClass('d-none');
  });
  $('.call-customer-service-saks').on('click', function () {
    $('.live-chat-view-2').toggleClass('d-none');
    $('.live-chat-view-3').toggleClass('d-none');
  });
  $('.chat-img-cross-black').on('click', function () {
    $('body').toggleClass('chat-overlay');
    $('.chat-img-cross').addClass('d-none');
    $('.chat-img').removeClass('d-none');
    $('.live-chat-content').addClass('d-none');
    $('.page').removeClass('non-scrollable');
    $('.live-chat-view-2').addClass('d-none');
    $('.live-chat-view-3').addClass('d-none');
  });
  $('body').on('click', '.customer-service-chat-link', function () {
    if ($('.embeddedServiceHelpButton .helpButton .uiButton.helpButtonEnabled').length > 0) {
      $('.live-chat-content').toggleClass('d-none');
      $('.live-chat-view-3').toggleClass('d-none');
      $('.chat-img').toggleClass('d-none');
      $('.chat-img-cross').toggleClass('d-none');
      $('.embeddedServiceHelpButton .helpButton .uiButton.helpButtonEnabled').trigger('click');
    }
  });
  $('body').on('click', '#bfx-cc-btn', function (e) {
    e.preventDefault();
    var bfxCountryCode = $('.bfx-cc-countries').val();
    var bfxURL = $('.bfxcountrycodeURL').attr('data-bfxcountrycode');
    $.ajax({
      url: bfxURL,
      type: 'post',
      dataType: 'json',
      data: {
        bfxCountryCode: bfxCountryCode
      },
      success: function success() {
        // Just Redirect
        return true;
      }
    });
  });
  $(document).ready(function () {
    $('.stylist-btn button#sf-contextual-widget-landing-page').prop("disabled", false);
  });
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/header.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/header.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var debounce = __webpack_require__(/*! lodash/debounce */ "../sfra/node_modules/lodash/debounce.js");

var utilhelper = __webpack_require__(/*! ./utilhelper */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/utilhelper.js");
/**
 * Is the window large-ish?
 * @returns {Boolean} true if large, otherwise false.
 */


function isDesktop() {
  return window.innerWidth >= 1024;
}

function isPrefCenter() {
  return !!document.querySelector('.preference-center-page');
}

function getBannerHeight() {
  //var headerContainer = document.querySelector('#header-container');
  var headerBanner = document.querySelector('.header-banner');
  return headerBanner === null ? 0 : headerBanner.offsetHeight;
}
/**
 * Adjusts the `top` value on the .page-header,
 * Because the header has a position: sticky, this will showing or hiding it.
 *
 * @param {String} action 'show' or 'hide'
 */


function adjustStickyHeaderDisplay(action) {
  var header = document.querySelector('.page-header');

  if (!header) {
    return;
  }

  if (action === 'show') {
    // When revealing the header on scroll up, we don't want to reveal the banner.
    header.style.top = "".concat(getBannerHeight() * -1, "px");
  } else {
    // With position: sticky, this allows the header to normally when you scroll to the top of the page
    // But scroll out of view and stay there until you scroll up.
    header.style.top = "".concat(header.offsetHeight * -1, "px");
  }
}

function showStickyHeader() {
  adjustStickyHeaderDisplay('show');
}

function allowStickyHeaderToHide() {
  adjustStickyHeaderDisplay('hide');
}

module.exports = function () {
  /**
   * Homepage Dots dynamic position
   */
  function homepagedots() {
    setTimeout(function () {
      if ($(window).width() <= 1023.99) {
        var h = $('.hero-banner').find('.content-image').height() - 30;
        $('.hero-banner').find('.slick-dots').css('top', h);
      }
    }, 100);
  }
  /**
   * Terms and condition pop up
   */


  function termclose() {
    $('.terms-overlay').remove();
    $('.terms-overlay').removeClass('show');
    $('.term-condition-section').addClass('hide');
  }

  $('body').on('click touchstart', '.terms-overlay', function () {
    termclose();
  });
  $('body').on('click', '.terms-condition', function (e) {
    e.preventDefault();
    $('body').append('<div class="terms-overlay"></div>');
    $('.terms-overlay').addClass('show');

    if ($(this).hasClass('bannerModal')) {
      var data = $(this).closest('.banner-asset').find('.term-condition-section').clone();
      $('.custom-modal-container.term-condition-section').html($(data).html()).removeClass('hide');
    } else {
      $('.term-condition-section').removeClass('hide');
    }
  });
  $('body').on('click', '#terms-condition-close, .term-condition-section .continue-shop', function (e) {
    e.preventDefault();
    termclose();
  });
  /**
   * View Details section Pop up
   */

  function detailsClose() {
    $('.view-details-overlay').remove();
    $('body').find('div.view-details-popup-main').remove();
  }

  $('body').on('click', '.view-details-home', function (e) {
    e.preventDefault();
    $('body').append('<div class="view-details-popup-main"><div class="view-details-overlay"></div></div>');
    $('body').find('div.view-details-popup-main').append($('.' + $(this).attr('id')).html());
  });
  $('body').on('click', '.view-details-popup-main .view-details-overlay', function () {
    detailsClose();
  });
  $('body').on('click', '.view-details-popup-main #view-detail-close', function () {
    detailsClose();
  });
  /**
   * View Details section Pop up
   */

  function detailsClose() {
    $('.view-details-overlay').remove();
    $('body').find('div.view-details-popup-main').remove();
  }

  $('body').on('click', '.view-details-home', function (e) {
    e.preventDefault();
    $('body').append('<div class="view-details-popup-main"><div class="view-details-overlay"></div></div>');
    $('body').find('div.view-details-popup-main').append($('.' + $(this).attr('id')).html());
  });
  $('body').on('click', '.view-details-popup-main .view-details-overlay', function () {
    detailsClose();
  });
  $('body').on('click', '.view-details-popup-main #view-detail-close', function () {
    detailsClose();
  }); // Listen to the page:scroll events to show and hide the header.

  if (!isPrefCenter()) {
    $(document).on('page:scrollDown', allowStickyHeaderToHide).on('page:scrollUp', showStickyHeader);
  } else {
    $(document).on('page:scrollDown', allowStickyHeaderToHide);
  } // Make sure to show the header when a item is added to the cart.


  $('body').on('product:afterAddToCart', showStickyHeader); // Set up the header display before a user scrolls.

  allowStickyHeaderToHide(); // Watch scrolling

  $(window).scroll(function () {
    var footerUtilitySection = $('.footer-top-utility-section');

    if (footerUtilitySection.length) {
      if (window.innerHeight + window.scrollY > footerUtilitySection.offset().top) {
        if (!$('#promo-drawer').hasClass('promo-drawer-open')) {
          $('#drawer-tab').removeClass('ready');
        }
      } else {
        $('#drawer-tab').addClass('ready');
      }
    }
  });
  $(window).resize(function () {
    homepagedots();
  });

  if ($('#banner-content').find('.banner-asset').length > 1) {
    $('#banner-content, #banner-contentmenu').slick({
      infinite: true,
      speed: 300,
      slidesToShow: 1,
      slidesToScroll: 1,
      autoplay: true,
      autoplaySpeed: 5000
    });
    var totalSlides = $('#banner-content.slick-initialized .slick-list').find('.slick-slide').length;
    $('#banner-content.slick-initialized').find('.slick-list').attr('aria-live', 'polite');
    $('#banner-content.slick-initialized .slick-list').find('.slick-slide').each(function (i) {
      $(this).attr('aria-label', i + 1 + ' of ' + totalSlides);
    });
  }

  homepagedots();
  var flagLoadInterval = setInterval(pullFlagLoad, 500);

  function pullFlagLoad() {
    if ($('#bfx-cc-wrapper').length > 0) {
      $('.bf-promo-loginHolder').prepend($('#bfx-cc-wrapper'));
      clearInterval(flagLoadInterval);
    }
  } // If Couldn't find the flag after 10 Sec, remove interval


  setTimeout(function () {
    clearInterval(flagLoadInterval);
  }, 10000); // Add Flex Break for Hero Banner CTAs

  $('.hero-banner .content-text').each(function () {
    var ctaLen = $(this).find('.cta-link').length;

    if (ctaLen == 6) {
      $(this).find('.cta-link:nth-child(3)').after("<div class='break'></div>");
    }

    if (ctaLen == 9) {
      $(this).find('.cta-link:nth-child(3)').after("<div class='break'></div>");
      $(this).find('.cta-link:nth-child(6)').after("<div class='break'></div>");
    }
  }); // copy the product count from the search API to the tile template

  if ($('.category-slider .product-count-in-cat').length > 0) {
    $('.category-product-count').html($('.category-slider .product-count-in-cat').attr('attr-product-count'));
  }

  function navigateAccPg(link) {
    if ($(link).next('.popover').hasClass('logged-out-user')) {
      window.location = $(link).next('.popover.logged-out-user').find('.signin-link').attr('href');
    } else if ($(link).next('.popover').hasClass('logged-in-user')) {
      window.location = $(link).next('.popover.logged-in-user').find('.my-account').attr('href');
    }
  }

  var wlcsignin = document.querySelector('.navbar-header .user-links .header-account-drawer-toggle');

  if (wlcsignin) {
    $(wlcsignin).on('click', function () {
      navigateAccPg(wlcsignin);
    });
  } //Add BFX event handler for adding the currency


  if ($('.bfx-cc-menu').length > 0) {
    $('.bfx-cc-menu').append("<span class='bfx-cc-code'>" + utilhelper.getCookie('bfx.currency') + '</span>');
  } //The call back is to handle the country change using bfx


  utilhelper.eventListener('bfx-contextChooser-loadEnd', function () {
    if ($('.bfx-cc-menu').length > 0) {
      $('.bfx-cc-menu .bfx-cc-code').remove();
      $('.bfx-cc-menu').append("<span class='bfx-cc-code'>" + utilhelper.getCookie('bfx.currency') + '</span>');
    }
  });
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/menu.js":
/*!*******************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/menu.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keyboardAccessibility = __webpack_require__(/*! base/components/keyboardAccessibility */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js");

var formFields = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var cookieUtil = __webpack_require__(/*! core/components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");

var keyboardAccessibility = __webpack_require__(/*! base/components/keyboardAccessibility */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js");

var formFields = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var cookieUtil = __webpack_require__(/*! core/components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");

var pageScrollManager = __webpack_require__(/*! ../util/pageScrollManager */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/pageScrollManager.js");

var DROPDOWN_NAV_ITEMS_SELECTOR = '.navbar-nav > .nav-item.dropdown:not(.disabled)';
var FOCUSABLE_MENU_ITEM_SELECTOR = '.main-menu .nav-link:focusable, .main-menu .dropdown-link:focusable, .close-menu .close-button';
var LEVEL_1_DROPDOWN_SELECTOR = '.navbar-nav > .dropdown > .nav-link';
var LEVEL_2_NAV_CLASS = 'l2-nav';
var MIN_DESKTOP_WIDTH = 1024;
var level2NavHeader;
var level2BackButton;
var activeNavItem;
var hoverDelay = 250; // ms

var enterTimeout = null;
var exitTimeout = null;
var previousWindowWidth = window.innerWidth;
/**
 * Opens the small screen menu
 * @param {*} e The Event object
 */

function openMobileMenu(e) {
  if (e) {
    e.preventDefault();
  }

  $(this).attr('aria-expanded', 'true');
  $('.main-menu').toggleClass('in');
  $('body').addClass('mobile-menu-open');
  $('.modal-background').on('click', closeMobileMenu);
  $('.main-menu').removeClass('d-none');
  $('.main-menu').attr('aria-hidden', 'false');
  $('.main-menu').attr('aria-modal', 'true');
  $('.main-menu').siblings().attr('aria-hidden', 'true');
  $('header').siblings().attr('aria-hidden', 'true');
  var bfxContainer = $('.navbar .nav .bfx-cc');

  if (!bfxContainer.length) {
    bfxContainer = $('<li class="nav-item nav-item-secondary d-lg-none bfx-cc"></li>');
    $('.navbar .nav').append(bfxContainer);
  }

  if (bfxContainer.is(':empty')) {
    bfxContainer.append($('#bfx-cc-wrapper'));
  }

  $('.livechat-wrapper').hide();
  $('.cart-and-ipay').hide();
  $('.navbar-toggler').blur();
  window.setTimeout(function () {
    var visibleNavElements = getFocusableNavElements();

    if (visibleNavElements.length) {
      visibleNavElements[0].focus();
    }
  }, 100);
  pageScrollManager.preventPageScroll();
  addWindowChangeListeners();
  formFields.findInsiders($('#sg-navbar-collapse'));
}
/**
 * Closes the small screen menu
 * @param {*} e The Event object
 */


function closeMobileMenu(e) {
  if (e) {
    e.preventDefault();
    e.stopPropagation();
  }

  $('.menu-toggleable-left').removeClass('in');
  $('body').removeClass('mobile-menu-open');
  $('.modal-background').off('click', closeMobileMenu);
  $('.navbar-toggler').attr('aria-expanded', 'false').focus();
  $('.main-menu').attr('aria-hidden', 'true');
  $('.main-menu').siblings().attr('aria-hidden', 'false');
  $('header').siblings().attr('aria-hidden', 'false');
  $('.dropdown').removeClass(' show');
  removeWindowChangeListeners();
  $('.cart-and-ipay').show();
  var mainMenu = document.querySelector('.main-menu');

  if (mainMenu) {
    var closeL2Nav = function closeL2Nav() {
      document.body.classList.remove(LEVEL_2_NAV_CLASS);
      mainMenu.removeEventListener('transitionend', closeL2Nav);
    };

    mainMenu.addEventListener('transitionend', closeL2Nav);
  } else {
    document.body.classList.remove(LEVEL_2_NAV_CLASS);
  }

  pageScrollManager.allowPageScroll();
}

function returnToLevelOneNav() {
  document.body.classList.remove(LEVEL_2_NAV_CLASS);
  var menuGroup = document.querySelector('.menu-group');

  var resetOpenL1NavItems = function resetOpenL1NavItems() {
    [].slice.call(document.querySelectorAll('.navbar-nav > .nav-item.show')).forEach(function (item) {
      return item.classList.remove('show');
    });
    menuGroup.removeEventListener('transitionend', resetOpenL1NavItems);
  };

  menuGroup.addEventListener('transitionend', resetOpenL1NavItems);
}

function scrollToTop() {
  if (isDesktop()) {
    return;
  }

  document.querySelector('.main-menu').scrollTo(0, 0);
}

function showLevelTwoNav(label) {
  if (isDesktop()) {
    return;
  }

  var menuGroup = document.querySelector('.menu-group');

  if (!level2NavHeader) {
    level2NavHeader = document.createElement('h2');
    level2NavHeader.setAttribute('class', 'l2-nav-header');
    level2NavHeader.setAttribute('aria-live', 'polite');

    if (menuGroup) {
      menuGroup.insertAdjacentElement('beforebegin', level2NavHeader);
    }
  }

  level2NavHeader.innerText = label; // And the back button

  if (!level2BackButton) {
    level2BackButton = document.createElement('button');
    level2BackButton.setAttribute('role', 'button');
    level2BackButton.setAttribute('class', 'l2-back-button');
    level2BackButton.addEventListener('click', returnToLevelOneNav);
    var arrow = document.createElement('span');
    arrow.setAttribute('class', 'svg-06-avenue-chevron-left svg-06-avenue-chevron-left-dims');
    level2BackButton.appendChild(arrow);

    if (menuGroup) {
      level2BackButton.setAttribute('aria-label', menuGroup.dataset.goBackLabel);
      menuGroup.insertAdjacentElement('beforebegin', level2BackButton);
    }
  } // Slide the menu into view.


  document.body.classList.add(LEVEL_2_NAV_CLASS);
  scrollToTop();

  if (label === 'For Me') {
    menuGroup.classList.add('formemenugroup');
    var screenHeight = document.body.clientHeight - 400;
    menuGroup.style.height = screenHeight.toString() + 'px';
  }
}
/**
 * Binds keyboard events for the user popover menu
 */


function userPopoverKeyboardEvents() {
  var userLinkSelector = '.navbar-header .user .user-links';
  keyboardAccessibility(userLinkSelector, {
    40: function _($wrapper) {
      // down
      var $children = $wrapper.find('.popover').children('a, button');

      if (!$children.filter(':focus').length || $children.last().is(':focus')) {
        $children.first().focus();
      } else {
        $children.filter(':focus').next().focus();
      }
    },
    38: function _($wrapper) {
      // up
      var $children = $wrapper.find('.popover').children('a, button');

      if (!$children.filter(':focus').length || $children.first().is(':focus')) {
        $children.last().focus();
      } else {
        $children.filter(':focus').prev().focus();
      }
    },
    27: function _() {
      // Escape
      hideUserPopover();
    }
  }, function () {
    return $(userLinkSelector);
  });
}
/**
 * Shows the user popover
 */


function showUserPopover() {
  var popover = document.querySelector('.navbar-header .user .popover');
  var toggler = document.querySelector('.navbar-header .user .header-account-drawer-toggle');

  if (!popover) {
    return;
  }

  popover.classList.add('show');
  toggler.setAttribute('aria-expanded', 'true'); // Close the minicart popover

  $('.minicart .popover').removeClass('show'); // Close Country Selector if Open

  if ($('.bfx-cc-expanded:visible') && $(window).width() >= 1023.99) {
    $('.bfx-cc-expanded').slideUp();
  }
}
/**
 * Hides the user popover
 */


function hideUserPopover() {
  var popover = document.querySelector('.navbar-header .user .popover');
  var toggler = document.querySelector('.navbar-header .user .header-account-drawer-toggle');

  if (!popover) {
    return;
  }

  popover.classList.remove('show');
  toggler.setAttribute('aria-expanded', 'false');
}
/**
 * Checks to see if the screen is above a certian width.
 * @return {boolean} True if large screen, otherwise false
 */


function isDesktop() {
  return window.innerWidth >= MIN_DESKTOP_WIDTH;
}
/**
 * Checks to see if the mouse moved outside of the currently active nav item.
 * Waits a beat to check user intent, and if we determine they've moved away from the menu, close it.
 * Bound to the mouseover event on the body, and only applicable to large screen treatment
 * @param {*} evt The Event Object
 */


function listenForNavExit(evt) {
  if (!activeNavItem || $.contains(activeNavItem, evt.target)) {
    clearTimeout(exitTimeout);
    return;
  }

  exitTimeout = window.setTimeout(function () {
    if (!activeNavItem || $.contains(activeNavItem, evt.target)) {
      return;
    }

    closeLargescreenMenu({
      currentTarget: activeNavItem
    });
  }, hoverDelay);
}
/**
 * Checks the mouse position to see if it's close to the bottom edge of the window. If it is,
 * it triggers the active menu item to close.
 * @param {*} evt The event object. Bound to the mousemove event on the body when a menu is open
 */


function windowBottomEdgeCheck(evt) {
  var threshold = 12; // Pixels from the bottom edge that should trigger the menu to close

  if (!activeNavItem || window.innerHeight - evt.clientY > threshold) {
    return;
  }

  closeLargescreenMenu({
    currentTarget: activeNavItem
  });
}
/**
 * Sizes the white underlay element that goes full width under a mega menu. Creates it if ncessary.
 * @param {jQuery} $navListElement The list element triggering the mega menu behind which to add the underlay.
 */


function setMenuUnderlay($navListElement) {
  var $underlay = $navListElement.find('> .dropdown-underlay');
  var $dropdownMenu = $navListElement.find('> .dropdown-menu');

  if (!$underlay.length) {
    $underlay = $('<div class="dropdown-underlay"></div>');
    $navListElement.append($underlay);
  }

  $underlay.height($dropdownMenu.get(0).scrollHeight + 'px');
}
/**
 * Sets the max-height value on the active mega menu so the user can always scroll
 * to the bottom of the menu, regardless of the state of the header it's attached to.
 */


function setMenuMaxHeight() {
  if (!activeNavItem || !isDesktop()) {
    return;
  }

  var dropdownMenu = activeNavItem.querySelector('.dropdown-menu');
  var underlay = activeNavItem.querySelector('.dropdown-underlay');
  var mainMenu = document.querySelector('.main-menu');
  var pageHeader = document.querySelector('header');
  var visibleHeaderHeight;

  if (mainMenu && mainMenu.classList.contains('fixed')) {
    visibleHeaderHeight = mainMenu.offsetHeight;
  } else {
    visibleHeaderHeight = Math.max(pageHeader.offsetHeight - window.scrollY, 0);
  }

  dropdownMenu.style.maxHeight = 'calc(100vh - ' + visibleHeaderHeight + 'px)';
  underlay.style.maxHeight = 'calc(100vh - ' + visibleHeaderHeight + 'px)';
}
/**
 * Swaps menu systems when a user goes from small screen to large screen
 */


function desktopMobileTransitionCheck() {
  var currentWindowWidth = window.innerWidth;

  if (previousWindowWidth === currentWindowWidth) {
    return;
  }

  if (previousWindowWidth < MIN_DESKTOP_WIDTH && currentWindowWidth >= MIN_DESKTOP_WIDTH) {
    // Transitioned to largescreen
    closeMobileMenu();
    openLargescreenMenu();
  } else if (previousWindowWidth >= MIN_DESKTOP_WIDTH && currentWindowWidth < MIN_DESKTOP_WIDTH) {
    closeLargescreenMenu({
      currentTarget: activeNavItem
    });
    openMobileMenu();
  }

  previousWindowWidth = currentWindowWidth;
}
/**
 * Binds resize and orientation change listeners
 */


function addWindowChangeListeners() {
  window.addEventListener('resize', desktopMobileTransitionCheck);
  window.addEventListener('orientationchange', desktopMobileTransitionCheck);
}
/**
 * Releases resize and orientation change listeners
 */


function removeWindowChangeListeners() {
  window.removeEventListener('resize', desktopMobileTransitionCheck);
  window.removeEventListener('orientationchange', desktopMobileTransitionCheck);
} //For me NAV AJAX BLOCK


function openForMeSubNav() {
  if (sessionStorage.forMeOpened != 'true') {
    //Setting up session VAR - Ony make AJAX call one per page load on HOVER
    if (document.getElementById('ForMeNavUrl')) {
      var ForMeNavUrl = document.getElementById('ForMeNavUrl').href;
      $.ajax({
        url: ForMeNavUrl,
        success: function success(response) {
          $('#formenav').empty();
          $('#formenav').append(response);

          if ($('#isMinTiles').length > 0) {
            $('#formenav').addClass('isMinTiles');
          }

          sessionStorage.setItem('forMeOpened', true);
          $('#for-me-by-category').on('click', function () {
            if ($(this).hasClass('show')) {
              //Close the contents of "New In My Categories"
              $(this).removeClass('opened');
              var mobileTiles = $(this).parent().parent().parent().parent().find('.noncattiles');
              $(this).removeClass('show').parent().children('.dropdown-menu').removeClass('show');
              $(this).parent().removeAttr('style');
              mobileTiles.removeAttr('style');
            } else {
              //SHOW the contents of "New In My Categories"
              $(this).addClass('opened');
              $(this).addClass('show').parent().children('.dropdown-menu').addClass('show'); //get height of dropdown-menu

              var categoryHeight = $(this).parent().children('.dropdown-menu').height();
              var mobileTiles = '';
              mobileTiles = $(this).parent().parent().parent().parent().find('.noncattiles');
              mobileTiles.css('padding-top', categoryHeight);
              $(this).parent().css('border-bottom', '1px solid #DDD');
            }
          });
          $('#formenav').spinner().stop();
        }
      });
    }
  }
}
/**
 * Opens a large screen mega menu treatment.
 * @param {*} evt The event object. The currentTarget property should be the list element in the main navigation
 */


function openLargescreenMenu(evt) {
  if (!isDesktop()) {
    return;
  }

  var $navListElement = $(evt.currentTarget);
  var $navLink = $navListElement.find('[data-toggle="dropdown"]');
  var $dropdownMenu = $navListElement.find('> .dropdown-menu');
  $navListElement.addClass('show');
  $dropdownMenu.addClass('show');
  $dropdownMenu.get(0).scrollTop = 0;
  formFields.addMenuOverlay();
  $navLink.attr('aria-expanded', 'true');
  document.body.classList.add('horizontal-scroll');
  activeNavItem = $navListElement.get(0);
  setMenuUnderlay($navListElement);
  setMenuMaxHeight();
  window.clearTimeout(enterTimeout);
  document.body.addEventListener('mouseover', listenForNavExit);
  document.body.addEventListener('mousemove', windowBottomEdgeCheck);
  window.addEventListener('scroll', setMenuMaxHeight);
  addWindowChangeListeners();
}
/**
 * Closes a large screen mega menu treatment.
 * @param {*} evt The event object. The currentTarget property should be the list element in the main navigation
 */


function closeLargescreenMenu(evt) {
  if (!isDesktop()) {
    return;
  }

  var $navListElement = $(evt.currentTarget);
  var $navLink = $navListElement.find('[data-toggle="dropdown"]');
  var $dropdownMenu = $navListElement.find('> .dropdown-menu');
  $navListElement.removeClass('show');
  $dropdownMenu.removeClass('show');
  $navLink.attr('aria-expanded', 'false');
  formFields.removeMenuOverlay();
  activeNavItem = null;
  document.body.classList.remove('horizontal-scroll');
  document.body.removeEventListener('mouseover', listenForNavExit);
  document.body.removeEventListener('mousemove', windowBottomEdgeCheck);
  window.removeEventListener('scroll', setMenuMaxHeight);
  removeWindowChangeListeners();
}
/**
 * Closes all open largescreen screen mega menu treatments, except the one determined to be currently active.
 * @param {*} evt The event object. The currentTarget property should be a list element in the main navigation
 */


function closeAllLargescreenMenus(evt) {
  if (!isDesktop() || !activeNavItem) {
    return;
  }

  $('.navbar-nav > li.dropdown.show').each(function () {
    // Skip over closing the current menu
    if (evt.currentTarget === this) {
      return;
    }

    closeLargescreenMenu({
      currentTarget: this
    });
  });
}
/**
 * Handles tap events on the navbar on touchscreen capable devices.
 */


function bindNavTouchEvents() {
  if (!window.isTouchscreen()) {
    return;
  }

  var touchStarted = false;
  var cachedX = 0;
  var cachedY = 0;
  $('body').on('touchstart', DROPDOWN_NAV_ITEMS_SELECTOR + ' > a, ' + DROPDOWN_NAV_ITEMS_SELECTOR + ' > span', function (e) {
    e.preventDefault();
    cachedX = e.pageX;
    cachedY = e.pageY;
    touchStarted = true;
    setTimeout(function () {
      if (!touchStarted && Math.abs(cachedX - e.pageX) < 3 && Math.abs(cachedY - e.pageY) < 3) {
        // If we get here, we can consider this a tap event.
        if (!isDesktop()) {
          return;
        }

        evt.preventDefault();
        var listItem = evt.currentTarget.parentNode;

        if (activeNavItem && activeNavItem === listItem) {
          closeLargescreenMenu({
            currentTarget: listItem
          });
          evt.currentTarget.blur();
        } else {
          closeAllLargescreenMenus({
            currentTarget: listItem
          });
          openLargescreenMenu({
            currentTarget: listItem
          });
        }
      }
    }, 200);
  }).on('touchend touchcancel', function (e) {
    touchStarted = false;
  });
}
/**
 * Handles mouse events on the main nav.
 */


function bindNavMouseEvents() {
  $('body').on('mouseenter', DROPDOWN_NAV_ITEMS_SELECTOR, function (evt) {
    enterTimeout = setTimeout(function () {
      closeAllLargescreenMenus(evt);
      openLargescreenMenu(evt);
    }, activeNavItem ? 0 : hoverDelay);
    var $navListElement = $(evt.currentTarget);
    var $dropdownMenu = $navListElement.find('> .dropdown-menu');

    if ($dropdownMenu.attr('id') == 'formenav') {
      if (sessionStorage.forMeOpened != 'true') {
        $('#formenav').spinner().start();
        openForMeSubNav();
      }
    }
  }).on('mouseleave', DROPDOWN_NAV_ITEMS_SELECTOR, function (evt) {
    if (!evt.currentTarget.classList.contains('show')) {
      clearTimeout(enterTimeout);
    }
  });
}
/**
 * Gets an array of focusable elements in the main nav
 * @returns {Array} array of focusable elements
 */


function getFocusableNavElements() {
  return $(FOCUSABLE_MENU_ITEM_SELECTOR).filter(':visible').toArray();
}
/**
 * Finds the next focusable element in the modal overlay and focuses that
 * @param {Element} currentItem DOM element representing the currenly focussed item.
 * @param {boolean} forward determines the direction of the next item to find. true is forward, next is back. Defaults to true.
 * @returns {Element} The next focusable element.
 */


function getNextFocusableItem(currentItem, forward) {
  var focusableItems = getFocusableNavElements();
  var currentItemIndex = Array.prototype.indexOf.call(focusableItems, currentItem);
  var nextItem;
  forward = typeof forward === 'boolean' ? forward : true;

  if (!focusableItems.length) {
    return currentItem;
  }

  if (currentItemIndex === -1) {
    return focusableItems[forward ? 0 : focusableItems.length - 1];
  }

  switch (currentItemIndex) {
    case 0:
      nextItem = forward ? focusableItems[1] : focusableItems[focusableItems.length - 1];
      break;

    case focusableItems.length - 1:
      nextItem = forward ? focusableItems[0] : focusableItems[currentItemIndex - 1];
      break;

    default:
      nextItem = forward ? focusableItems[currentItemIndex + 1] : focusableItems[currentItemIndex - 1];
      break;
  }

  return nextItem;
}

var keystrokeHandlers = {
  largescreen: {
    down: function down(menuLink) {
      var menuItem = menuLink.parent();

      if (menuItem.hasClass('nav-item')) {
        // top level
        openLargescreenMenu({
          currentTarget: menuItem
        });
        menuItem.find('ul > li > a').first().focus();
      } else {
        menuItem.removeClass('show').children('.dropdown-menu').removeClass('show');

        if (!(menuItem.next().length > 0)) {
          // if this is the last menuItem
          menuItem.parent().parent().find('li > a') // set focus to the first menuitem
          .first().focus();
        } else {
          menuItem.next().children().first().focus();
        }
      }
    },
    up: function up(menuLink) {
      var menuItem = menuLink.parent();

      if (menuItem.hasClass('nav-item')) {
        // top level
        closeLargescreenMenu({
          currentTarget: menuItem
        });
      } else if (menuItem.prev().length === 0) {
        // first menuItem
        menuItem.parent().parent().removeClass('show').children('.nav-link').attr('aria-expanded', 'false');
        menuItem.parent().children().last().children() // set the focus to the last menuItem
        .first().focus();
      } else {
        menuItem.prev().children().first().focus();
      }
    },
    left: function left(menuLink) {
      var menuItem = menuLink.parent();

      if (menuItem.hasClass('nav-item')) {
        // top level
        closeAllLargescreenMenus({
          currentTarget: menuItem
        });
        var next = getNextFocusableItem(menuLink.get(0), false);
        next.focus();
      } else {
        menuItem.closest('.show').removeClass('show').closest('li.show').removeClass('show').children().first().focus().attr('aria-expanded', 'false');
      }
    },
    right: function right(menuLink) {
      var menuItem = menuLink.parent();

      if (menuItem.hasClass('nav-item')) {
        // top level
        closeAllLargescreenMenus({
          currentTarget: menuItem
        });
        var next = getNextFocusableItem(menuLink.get(0));
        next.focus();
      } else if (menuItem.hasClass('dropdown')) {
        menuItem.addClass('show').children('.dropdown-menu').addClass('show');
        $(this).attr('aria-expanded', 'true');
        menuItem.find('ul > li > a').first().focus();
      }
    },
    escape: function escape(menuItem) {
      var parentMenu = menuItem.hasClass('show') ? menuItem : menuItem.closest('li.show');
      parentMenu.children().first().focus();
      closeLargescreenMenu({
        currentTarget: parentMenu
      });
    }
  },
  smallscreen: {
    down: function down(menuLink) {
      var next = getNextFocusableItem(menuLink.get(0));
      next.focus();
    },
    up: function up(menuLink) {
      var next = getNextFocusableItem(menuLink.get(0), false);
      next.focus();
    },
    right: function right(menuLink) {
      var next = getNextFocusableItem(menuLink.get(0));
      next.focus();
    },
    left: function left(menuLink) {
      var next = getNextFocusableItem(menuLink.get(0), false);
      next.focus();
    },
    escape: function escape() {
      closeMobileMenu();
    }
  }
};
/**
 * Finds the appropriate handler function in the keystrokeHandlers object and fires that function
 * @param {string} key The keystroke name that maps to a property name in the keystrokeHandlers object (e.g. 'down', 'up', 'escape')
 * @param {jQuery} menuItem The menu item which the keystroke was bound to.
 * @param {Element} scope The scope from which the function should be called.
 */

function keystrokeHandlerForLayout(key, menuItem, scope) {
  var handler = keystrokeHandlers[isDesktop() ? 'largescreen' : 'smallscreen'];

  if (typeof handler[key] === 'function') {
    handler[key].call(scope, menuItem);
  }
}
/**
 * @function
 * @description appends the parameters to the given url and returns the changed url
 * @param {string} url the url to which the parameters will be added
 * @param {Object} name of the anchor tag
 * @param {string} value the url to which the parameters will be added
 * @returns {Object} url element.
 */


function appendParamToURL(url, name, value) {
  // quit if the param already exists

  /* eslint-disable */
  if (url.indexOf(name + '=') !== -1) {
    return url;
  }

  value = decodeURIComponent(value);
  var separator = url.indexOf('?') !== -1 ? '&' : '?';
  return url + separator + name + '=' + encodeURIComponent(value);
  /* eslint-disable */
}

module.exports = function () {
  var headerBannerStatus = window.sessionStorage.getItem('hide_header_banner');
  $('.header-banner .close').on('click', function () {
    $('.header-banner').addClass('d-none');
    window.sessionStorage.setItem('hide_header_banner', '1');
  });

  if (!headerBannerStatus || headerBannerStatus < 0) {
    $('.header-banner').removeClass('d-none');
  }

  keyboardAccessibility(FOCUSABLE_MENU_ITEM_SELECTOR, {
    40: function _(menuItem) {
      // down
      keystrokeHandlerForLayout('down', menuItem, this);
    },
    39: function _(menuItem) {
      // right
      keystrokeHandlerForLayout('right', menuItem, this);
    },
    38: function _(menuItem) {
      // up
      keystrokeHandlerForLayout('up', menuItem, this);
    },
    37: function _(menuItem) {
      // left
      keystrokeHandlerForLayout('left', menuItem, this);
    },
    27: function _(menuItem) {
      // escape
      keystrokeHandlerForLayout('escape', menuItem, this);
    }
  }, function () {
    return $(this);
  });
  sessionStorage.setItem('forMeOpened', false); //By Default on page load - False

  $('.navbar-nav > .nav-item.dropdown:not(.disabled) [data-toggle="dropdown"]').on('click', function (e) {
    if (isDesktop()) {
      return;
    } // Slide the level one nav over.


    if (e.currentTarget.matches(LEVEL_1_DROPDOWN_SELECTOR)) {
      showLevelTwoNav(e.currentTarget.parentNode.getAttribute('data-adobelaunchtopnavigation'));
    }

    $('.modal-background').show();

    if ($('.modal-background').length) {
      $('.modal-background').addClass('search-backdrop');
    } // copy parent element into current UL
    // copy navigation menu into view


    if ($(this).parent().hasClass('nav-item')) {
      $(this).parent().toggleClass('show');
      $(this).parent().find('li:first').focus();
      $(this).parent().siblings('li').removeClass('show').find('li').removeClass('show');
      $(this).parent().siblings('li').children('.nav-link').attr('aria-expanded', 'false');

      if ($(this).parent().hasClass('show')) {
        $(this).attr('aria-expanded', 'true');
      } else {
        $(this).attr('aria-expanded', 'false');
      }
    } else {
      $(this).siblings('ul').not($(this).next('ul')).removeClass('show');
      $(this).next('ul').toggleClass('show');
      $(this).parent().find('.dropdown-toggle').not($(this)).removeClass('opened');
      $(this).toggleClass('opened');
      var mobileTiles = '';
      mobileTiles = $(this).parent().parent().parent().parent().find('.noncattiles');
      $(this).next('ul').focus();

      if ($(this).siblings('ul').hasClass('show')) {
        $(this).attr('aria-expanded', 'true');

        if ($(this).parent().find('#for-me-by-category')[0]) {
          var catBottomBorder = '';
          catBottomBorder = $(this).parent().parent().find('.mobilecatborder');
          var categoryHeight = $(this).siblings('ul').height();
          mobileTiles.css('padding-top', categoryHeight);
          catBottomBorder.css('border-bottom', '1px solid #DDD');
        }
      } else {
        $(this).attr('aria-expanded', 'false');

        if ($(this).parent().find('#for-me-by-category')[0]) {
          var catBottomBorder = '';
          catBottomBorder = $(this).parent().parent().find('.mobilecatborder');
          var categoryHeight = $(this).siblings('ul').height();
          catBottomBorder.removeAttr('style');
          mobileTiles.removeAttr('style');
        }
      }
    }

    e.preventDefault();
  });
  bindNavTouchEvents();
  bindNavMouseEvents();
  /* Changed traversing of the close button click event as per the structure change */

  $('.close-menu>.close-button').on('click', closeMobileMenu);
  $('body').on('click', '.close-button', function (e) {
    e.preventDefault();
    $('.navbar-nav').find('.top-category').detach();
    $('.navbar-nav').find('.nav-menu').detach();
    $('.navbar-nav').find('.show').removeClass('show');
    $('.menu-toggleable-left').removeClass('in');
    $('.main-menu').siblings().attr('aria-hidden', 'false');
    $('header').siblings().attr('aria-hidden', 'false');

    if ($('.modal-background').length) {
      $('.modal-background').removeClass('search-backdrop');
    }

    $('.modal-background').hide();
    $('.header-login').prepend($('#bfx-cc-wrapper'));
    $('.livechat-wrapper').show();
    $('.navbar').find('.borderfree-modal').remove();
    $('.cart-and-ipay').show();
  });
  $('.navbar-toggler').click(openMobileMenu);
  $('body').on('click', '#bfx-cc-wrapper', function (e) {
    e.stopPropagation();

    if ($(window).width() <= 1023.99) {
      $('<span class="borderfree-modal"></span>').insertAfter('#bfx-cc-wrapper');
      $('.bfx-cc-expanded').append('<span class="borderfree-close svg-13-avenue-large-close svg-13-avenue-large-close-dims"></span>');
      $('.main-menu').addClass('overflow-control');
      $('.navigation-section').find('.close-button').hide();
    }
  });
  $('body').on('click', '.bfx-cc-expanded', function (e) {
    e.stopPropagation();
  });
  $('body').on('click touchstart', '.borderfree-close', function (e) {
    e.stopPropagation();

    if ($(window).width() <= 1023.99) {
      $('.navbar').find('.borderfree-modal').remove();
      $('#bfx-cc-wrapper').find('.borderfree-close').remove();
      $('.bfx-cc-expanded').hide();
      $('.main-menu').removeClass('overflow-control');
      $('.navigation-section').find('.close-button').show();
    }
  });
  $('body').on('click', '#bfx-wm-switch-country a', function () {
    if ($(window).width() <= 1023.99) {
      $('.navbar-toggler').trigger('click');
      $('.navbar').append('<span class="borderfree-modal"></span>');
      $('.main-menu').addClass('overflow-control');
      $('.navigation-section').find('.close-button').hide();
    }
  });
  keyboardAccessibility('.navbar-header .user', {
    40: function _($popover) {
      // down
      if ($popover.children('a').first().is(':focus')) {
        $popover.next().children().first().focus();
      } else {
        $popover.children('a').first().focus();
      }
    },
    38: function _($popover) {
      // up
      if ($popover.children('a').first().is(':focus')) {
        $(this).focus();
        $popover.removeClass('show');
      } else {
        $popover.children('a').first().focus();
      }
    },
    27: function _() {
      // escape
      $('.navbar-header .user .popover').removeClass('show');
      $('.user').attr('aria-expanded', 'false');
    },
    9: function _() {
      // tab
      $('.navbar-header .user .popover').removeClass('show');
      $('.user').attr('aria-expanded', 'false');
    }
  }, function () {
    var $popover = $('.user .popover li.nav-item');
    return $popover;
  });
  var userLinks = document.querySelector('.navbar-header .user-links');

  if (userLinks) {
    userLinks.addEventListener('mouseenter', showUserPopover);
    userLinks.addEventListener('mouseleave', hideUserPopover);
    userLinks.addEventListener('focusin', showUserPopover);
  }

  userPopoverKeyboardEvents();
  $('body').on('click', '#myaccount', function () {
    event.preventDefault();
  });

  if ($(window).width() >= 1023.99) {
    $('.navbar .dropdown-item.d-lg-none').remove();
  }

  if (isDesktop()) {
    var visibleNavItems = document.querySelectorAll('.navbar-nav > li.dropdown:not(.d-lg-none)');
    var last = visibleNavItems[visibleNavItems.length - 1];

    if (typeof last !== 'undefined') {
      last.classList.add('d-last-visible');
    }
  }

  if (!isDesktop()) {
    $('.dropdown-link.dropdown-toggle').each(function () {
      if ($(this).next('ul').children().length === $(this).next('ul').find('li.d-lg-block').length) {
        $(this).removeClass('dropdown-toggle').unbind('click');
      }
    });
  }

  $('body').on('click', '.shop-preference .cat-heads', function (e) {
    e.preventDefault();
    $('.cat-heads').removeClass('active');
    $(this).addClass('active');
    var url = $(this).closest('.shop-preference').data('url');
    var shopperPreference = $(this).data('type');
    url = appendParamToURL(url, 'shopperPreference', shopperPreference);
    $.ajax({
      url: url,
      success: function success(response) {
        if (isDesktop()) {
          window.location.href = response.redirectUrl;
        } else {
          history.pushState({}, '', response.redirectUrl);
          $('body').toggleClass('hide-mens').toggleClass('hide-womens');
        }
      }
    });
  }); // add mens vs womens class to the body of the page

  var shopPreference = cookieUtil.getCookie('shopPreference') || 'women'; // the body tag classes was getting cached on production, hence doing it via JS as well.

  var shopPrefClassOnBody = shopPreference == 'men' ? 'hide-womens' : 'hide-mens';
  $('body').removeClass('hide-womens').removeClass('hide-mens').addClass(shopPrefClassOnBody);

  try {
    // The cache headers on the home requests prevent from performing a redirect.
    //Hence if we have a host setup, the path is updated for the logo anchor
    if (shopPreference) {
      var shopPreferenceURL = shopPreference == 'men' ? $('.page').data('homemen') : $('.page').data('homewomen');
      $('body').find('a.logo-home').attr('href', shopPreferenceURL);
    }

    if ($('.user-links').length > 0 && $('.js-waitlist-email').length > 0) {
      var email = $('.user-links').data('useremail');
      $('.js-waitlist-email').val(email);
      var $label = $('.js-waitlist-email').closest('.form-group').find('label');

      if ($('.js-waitlist-email').val().length) {
        $label.addClass('input-focus');
      }
    }
  } catch (e) {
    console.log('did not update Home logo URL via javascript');
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/miniCart.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/miniCart.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var cart = __webpack_require__(/*! ../cart/cart */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/cart/cart.js");

var formFields = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var keyboardAccessibility = __webpack_require__(/*! base/components/keyboardAccessibility */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/keyboardAccessibility.js");

var updateMiniCart = true;
/**
 appending html content to the div based on shoprunner enabled condition
 */

function checkShopRunnerEnabled() {
  if ($('.enableShopRunner').length > 0) {
    if (typeof window.parent.sr_updateMessages === 'function') {
      window.parent.sr_updateMessages();
    }
  }
}
/**
  Mini cart height
*/


function getMiniCartHeight() {
  setTimeout(function () {
    if ($('.main-menu').is('.fixed')) {
      $($('.minicart .product-summary')[1]).css('height', $($('.minicart .popover')[1]).outerHeight(true) - ($($('.minicart-footer')[1]).outerHeight(true) + $('.main-menu').outerHeight(true)));
    } else {
      $($('.minicart .product-summary')[0]).css('height', $($('.minicart .popover')[0]).outerHeight(true) - ($($('.minicart-footer')[0]).outerHeight(true) + $('.header').outerHeight(true) - $(window).scrollTop() + 33));
    }
  }, 200);
} // Expose hoverintent in/out functions outside of hoverintent function
// so that they can be accessed by keyboard events


var focusIn = function focusIn(element) {
  if ($('.search:visible').length === 0) {
    return;
  }

  var _element;

  var url = $('.minicart').data('action-url');
  var count = parseInt($('.minicart .minicart-quantity').text(), 10);
  var bannerHeightoverlay = parseInt($('.header-banner').outerHeight()) + parseInt($('#header-container').outerHeight()) - $(window).scrollTop(); // eslint-disable-line

  var bannerHeight = parseInt($('.navbar').offset().top) - parseInt($('.minicart-link').offset().top) + parseInt($('.minicart-link').outerHeight() - 7); // eslint-disable-line

  var stkyHeight = parseInt($('.menu-wrapper').height()) - 11; // eslint-disable-line

  var hideOverflowY = function hideOverflowY() {
    $('body').css({
      'overflow-y': 'hidden'
    });
  };

  $('.minicart-link').removeClass('minicart-count-zero');

  if (!(count > 0)) {
    $('.minicart-link').addClass('minicart-count-zero');
  }

  if (count > 0 && $('.minicart .popover.show').length === 0) {
    $(element.relatedTarget).focus();
    hideOverflowY();
    _element = element || $('.minicart'); // Swap Minicart Content for Duplicate content

    if ($('body').find('.main-menu').hasClass('fixed') && $('.minicart-popup-container .popover').text().length > 0) {
      $('.minicart-popup-container-sticky .popover').empty().append($('.minicart-popup-container .popover').html());
      $('.minicart-popup-container .popover').empty();
    } else {
      if (!$('body').find('.main-menu').hasClass('fixed') && $('.minicart-popup-container-sticky .popover').text().length > 0) {
        $('.minicart-popup-container .popover').empty().append($('.minicart-popup-container-sticky .popover').html());
        $('.minicart-popup-container-sticky .popover').empty();
      }
    }

    if (!updateMiniCart) {
      $('.minicart .popover').addClass('show').css('top', $('.minicart').outerHeight() + 3);

      if ($('body').find('.main-menu').hasClass('fixed')) {
        $('.minicart .popover').addClass('show').css('top', stkyHeight);
      }

      setMiniCartScrollHeight();
      $('body').trigger('adobeTagManager:openMiniCart', _element);
      return;
    }

    $('.minicart .popover').addClass('show').css('top', $('.minicart').outerHeight() + 3);

    if ($('body').find('.main-menu').hasClass('fixed')) {
      $('.minicart .popover').addClass('show').css('top', stkyHeight);
    }

    $('.minicart .popover').spinner().start();
    $.get(url, function (data) {
      // Line Item is 0, don't popup the minicart.
      var miniCartContainer = $(data).filter('.mini-cart-container');
      var noOFLineItem = parseInt(miniCartContainer.attr('data-numItems'));
      var minicartTitle = miniCartContainer.attr('data-title');
      var minicartLabel = miniCartContainer.attr('data-aria-label');
      $('.minicart .minicart-quantity').empty();

      if (noOFLineItem > 0) {
        $('.minicart .minicart-quantity').text(noOFLineItem);
      }

      $('.minicart .minicart-link').attr({
        'aria-label': minicartLabel,
        title: minicartTitle
      });
      $('.minicart .popover').empty();

      if (noOFLineItem > 0) {
        $('.minicart .popover').append(data);

        if ($('body').find('.main-menu').hasClass('fixed')) {
          $('.minicart-popup-container .popover').empty();
        } else {
          $('.minicart-popup-container-sticky .popover').empty();
        }

        updateMiniCart = false;
        $.spinner().stop();
        $('.minicart .product-summary').each(function () {
          $(this).scrollTop(1);
        });
        $('body').trigger('adobeTagManager:openMiniCart', data);
        formFields.quantityHoverBorder();
        setMiniCartScrollHeight();
      } else {
        // Update the quantity and don't open up the mini cart.
        $.spinner().stop();
        $('.minicart .popover').removeClass('show');
      }
    });
  } // Hide the chat widget if it's open


  if ($('body').hasClass('chat-overlay')) {
    $('.liveChat-btn').trigger('click');
  } // Hide Confirmation Modal if open


  $('.product-added-to-cart-modal.modal:visible').hide();
};

var focusOut = function focusOut() {
  // Code for hover intent out
  $('.minicart .popover').removeClass('show');
  $('.minicart-link').removeClass('minicart-count-zero');
  $('body').css({
    'overflow-y': 'auto',
    'padding-right': ''
  });
  checkShopRunnerEnabled();
};

function minicartKeyboardEvents() {
  var minicartSelector = '.minicart';
  keyboardAccessibility(minicartSelector, {
    40: function _($wrapper) {
      // down
      var $children = $wrapper.find('.popover a, .popover button, .popover input');

      if (!$children.length) {
        return;
      }

      var focusIndex = $children.index(document.activeElement);

      if (focusIndex === -1 || focusIndex === $children.length - 1) {
        $children.eq(0).focus();
      } else {
        $children.eq(focusIndex + 1).focus();
      }
    },
    38: function _($wrapper) {
      // up
      var $children = $wrapper.find('.popover a, .popover button, .popover input');

      if (!$children.length) {
        return;
      }

      var focusIndex = $children.index(document.activeElement);

      if (focusIndex === 0 || focusIndex === -1) {
        $children.eq($children.length - 1).focus();
      } else {
        $children.eq(focusIndex - 1).focus();
      }
    },
    27: function _() {
      // Escape
      document.querySelector('.minicart-link').focus();
      focusOut();
    }
  }, function () {
    return $(minicartSelector);
  });
}
/**
 * Mini cart Scroll Height
 */


function setMiniCartScrollHeight() {
  var winHt = $(window).outerHeight();
  var mcFooterHt = $('.minicart-footer').outerHeight();
  setTimeout(function () {
    if ($('.main-menu').is('.fixed')) {
      $('.minicart .product-summary').scrollTop(0);
      mcFooterHt = $($('.minicart-footer')[1]).outerHeight();

      if (winHt < 786) {
        $('.minicart .product-summary').css({
          'max-height': 410 - mcFooterHt
        });
      } else {
        $('.minicart .product-summary').css({
          'max-height': 610 - mcFooterHt
        });
      }
    } else {
      $('.minicart .product-summary').scrollTop(0);
      mcFooterHt = $($('.minicart-footer')[0]).outerHeight();

      if (winHt < 786) {
        $('.minicart .product-summary').css({
          'max-height': 410 - mcFooterHt
        });
      } else {
        $('.minicart .product-summary').css({
          'max-height': 610 - mcFooterHt
        });
      }
    }
  }, 200);
}

module.exports = function () {
  cart();
  checkShopRunnerEnabled();
  $('.minicart').on('count:update', function (event, count) {
    if (count && $.isNumeric(count.quantityTotal)) {
      $('.minicart .minicart-quantity').text(count.quantityTotal);
      $('.minicart .minicart-link').attr({
        'aria-label': count.cart.resources.minicartCountOfItems,
        title: count.cart.resources.minicartCountOfItems
      });
    }
  });
  /**
   * Hover intent functionality for minicart.
   * @param {element} element minicart bag.
   */

  function hoverIntentFunctionality(element) {
    var hoverListener = hoverintent(element, // eslint-disable-line
    focusIn, focusOut).options(opts); // eslint-disable-line
  }

  var opts = {
    timeout: 500,
    interval: 0
  };
  var el = $('.minicart');

  if (el.length > 0) {
    hoverIntentFunctionality(el[0]);
    hoverIntentFunctionality(el[1]);
  } // Open the cart from the keyboard


  $('.minicart-link').on('focusin', function (evt) {
    focusIn(evt.target);
  }); // Close minicart when tabbing away from:
  // 1. cart container
  // 2. the cart icon itself

  $('body').on('keyup', function (e) {
    // Halt if minicart popover is shown
    if (!$('.minicart .popover').hasClass('show')) {
      return;
    }

    var target;
    var code;
    var cartContainer = '.mini-cart-container';
    var TAB_KEY = 9;
    code = e.keyCode || e.which;

    if (code === TAB_KEY) {
      target = $(e.target);

      if (!target.parents(cartContainer).length && !target.hasClass('minicart-link')) {
        focusOut();
      }
    }
  });
  minicartKeyboardEvents();
  $('body').on('touchstart click', function (e) {
    if ($('.minicart').has(e.target).length <= 0 || $('.popover').has(e.target).length <= 0) {
      $('.minicart .popover').removeClass('show');
      $('body').css({
        'overflow-y': 'auto'
      });
    }
  });
  /* $('.minicart').on('mouseleave', function (event) {
        if ((event.type === 'focusout' && $('.minicart').has(event.target).length > 0)
            || (event.type === 'mouseleave' && $(event.target).is('.minicart .quantity'))
            || $('body').hasClass('modal-open')) {
            event.stopPropagation();
            return;
        }
    });*/

  $('body').on('change', '.minicart .quantity', function () {
    if ($(this).parents('.bonus-product-line-item').length && $('.cart-page').length) {
      location.reload();
    }
  });
  $('body').on('product:afterAddToCart', function () {
    updateMiniCart = true;
  });
  $('body').on('cart:update', function () {
    updateMiniCart = true;
  });
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/refinementBar.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/refinementBar.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Checks to see if the screen is above a certian width.
 * @return {boolean} True if large screen, otherwise false
 */

function isDesktop() {
  return window.innerWidth > 1023;
}
/**
 *
 */


function initStickyRefinement() {
  var refinementBar = document.querySelector('.refinement-bar');
  var filterBar = document.querySelector('.product-search-results');
  var pageHeader = document.querySelector('.page-header');
  var headerBanner = document.querySelector('.header-banner');

  if (!refinementBar || !pageHeader) {
    return;
  }

  var setRefinementBarDimensions = function setRefinementBarDimensions(offset) {
    var topPadding = 10;
    refinementBar.style.maxHeight = "calc(100vh - ".concat(offset + topPadding, "px)");
    refinementBar.style.top = "".concat(offset + topPadding, "px");
  };

  var setFilterBarDimensions = function setFilterBarDimensions(offset) {
    var topPadding;

    if ($('.category-refinement-bar li').length > 0) {
      topPadding = -120;
      filterBar.style.top = "".concat(offset + topPadding, "px");
    } else {
      topPadding = -66;
      filterBar.style.top = "".concat(offset + topPadding, "px");
    }
  };

  $(document).on('page:scrollDown', function () {
    setRefinementBarDimensions(0);
    setFilterBarDimensions(0);
  });
  $(document).on('page:scrollUp', function () {
    setRefinementBarDimensions(pageHeader.offsetHeight - (headerBanner ? headerBanner.offsetHeight : 0));
    setFilterBarDimensions(pageHeader.offsetHeight - (headerBanner ? headerBanner.offsetHeight : 0));
  });
} // Scrolls the refinement bar to the top of the open category if necessary.


function initRefinementBarScrollTopHandler() {
  var $refinementBar = $('.refinement-bar');

  if (!$refinementBar.data('scrollRefinementIntialized')) {
    $refinementBar.on('click', '.card-header button[aria-controls]', function (evt) {
      // Largescreen only.
      if (!isDesktop()) {
        return;
      } // Jank city here. Using a timeout to ensure the accordion functionality happens first


      window.setTimeout(function () {
        var card = evt.target.closest('.card');
        var bar = $refinementBar.get(0);

        if (bar.scrollTop > card.offsetTop) {
          bar.scrollTop = card.offsetTop;
        }
      }, 10);
    });
    $refinementBar.data('scrollRefinementIntialized', true);
  }
}

module.exports = initRefinementBarScrollTopHandler;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/stickyColumnTop.js":
/*!******************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/stickyColumnTop.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Checks to see if the screen is above a certian width.
 * @return {boolean} True if large screen, otherwise false
 */

function isDesktop() {
  return window.innerWidth > 1023;
}
/**
 * Sets the sticky column top, and if appropriate, the max-height as well.
 */


function initStickyColumn() {
  var stickyColumns = document.querySelectorAll('.sticky-column');
  var pageHeader = document.querySelector('.page-header');
  var headerBanner = document.querySelector('.header-banner');

  if (!stickyColumns.length || !pageHeader) {
    return;
  }

  var setDimensionsFor = function setDimensionsFor(column, offset) {
    var topPadding = 10;

    if (column.classList.contains('restrict-max-height')) {
      column.style.maxHeight = "calc(100vh - ".concat(offset + topPadding, "px)");
    }

    column.style.top = "".concat(offset + topPadding, "px");
  };

  var $document = $(document);

  var handleScrollDown = function handleScrollDown() {
    if (!isDesktop()) {
      return;
    }

    stickyColumns.forEach(function (column) {
      return setDimensionsFor(column, 0);
    });
  };

  var handleScrollUp = function handleScrollUp() {
    if (!isDesktop()) {
      return;
    }

    var offset = pageHeader.offsetHeight - (headerBanner ? headerBanner.offsetHeight : 0);
    stickyColumns.forEach(function (column) {
      return setDimensionsFor(column, offset);
    });
  };

  $document.on('page:scrollDown', handleScrollDown);
  $document.on('page:scrollUp', handleScrollUp); // Trigger it on page load.

  handleScrollDown();
}

module.exports = initStickyColumn();

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/utilhelper.js":
/*!*************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/utilhelper.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! core/components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");

base.eventListener = function (eventName, eventHandler) {
  if (window.addEventListener) {
    window.addEventListener(eventName, eventHandler, false);
  } else if (window.attachEvent) {
    //IE 8 and older
    if (eventName.indexOf('bfx') > -1) {
      //custom bfx events
      window.attachEvent('onpropertychange', function (event) {
        if (event.propertyName == eventName) {
          eventHandler(eventHandler);
        }
      });
    } else {
      //standard js events
      window.attachEvent(eventName, eventHandler);
    }
  }
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/welcomeemailSignUp.js":
/*!*********************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/welcomeemailSignUp.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formFields = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var utilhelper = __webpack_require__(/*! core/components/utilhelper */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/utilhelper.js");
/**
 * appends params to a url
 * @param {string} data - data returned from the server's ajax call
 * @param {Object} button - button that was clicked for email sign-up
 */


function displayMessage(data, button) {
  $.spinner().stop();
  var status;
  $('.welcome-email-input-box').find('.error-container .error').remove();
  $('.welcome-email-signup-input').removeClass('error');

  if (data.success) {
    status = 'alert-success';
  } else {
    status = 'alert-danger';
  }

  if ($('.welcome-email-signup-message-footer').length === 0) {
    $('div.welcome-email-signup-input').append('<div class="welcome-email-signup-message-footer"></div>');
  }

  if (data.success) {
    $('.welcome-email-signup-message-footer').append('<div class="d-flex align-items-center ' + status + '"><span class="svg-svg-95-check-green-thick-dims svg-svg-95-check-green-thick success-img"></span>' + data.msg + '</div>');
    $('.welcome-email-signup-input').addClass('success');
    setTimeout(function () {
      $('.welcome-email-signup-message-footer').remove();
      $('.welcome-email-signup-input').removeClass('success');
      $('.welcome-email-signup-input').find('input').val(''); // remove the email prefill as he has already submitted

      button.removeAttr('disabled');
    }, 3000);
  } else {
    $('.welcome-email-input-box').find('.error-container').append('<span class="error">' + data.msg + '</span>');
    $('.welcome-email-signup-input').addClass('error');
    button.removeAttr('disabled');
  }
}
/**
 * function to create/delete cookie
 *
 */


function welcomeModalCloseFunctionality(redirecttoNewPage) {
  var emailId = 'welcomeemailsignupdecline';
  var form = {
    emailId: emailId
  };
  var declineurl = $('#welcome-email-modal .button-wrapper button.subscribe-email').data('href-unsubcribe');
  $.ajax({
    url: declineurl,
    type: 'post',
    dataType: 'json',
    data: form,
    success: function success(data) {
      if (data.success) {
        // emailsunbsciptiondeclinecookie is set and closing the welcome email signup modal
        $('#welcome-email-modal').attr('aria-modal', 'false');
        $('#welcome-email-modal').modal('hide');

        if (redirecttoNewPage) {
          window.open($('#welcome-email-modal').find('a').attr('href'));
        }
      }
    }
  });
}
/**
 * validate email and confirm email on blur
 *
 */


$('.email-signup .user-confirm-email').on('blur', function () {
  var emailval = $('.email-signup .user-email').val();
  var confirmemailval = $(this).val();

  if (emailval !== confirmemailval) {
    $(this).addClass('is-invalid');
    $(this).prev('label').addClass('is-invalid');

    if ($(this).next('span').length === 0) {
      $('<span></span>').insertAfter(this);
    }

    $(this).next('span').addClass('invalid');

    if ($(this).next('span').hasClass('valid')) {
      $(this).next('span').removeClass('valid').addClass('invalid');
    }

    $(this).parents('.form-group').find('.invalid-feedback').text($(this).data('message-doesnt-match'));
  }
});
/**
 * validate postal code on blur
 *
 */

$('#registration-form-zipcode').on('blur', function () {
  if ($(this).val() !== '') {
    var validate;

    if ($(this).hasClass('us-pattern')) {
      validate = /(^\d{5}(-\d{4})?$)/.test($(this).val()) === false;
    } else if ($(this).hasClass('ca-pattern')) {
      validate = /^(?!.*[DFIOQUdfioqu])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/.test($(this).val()) === false;
    }

    if (validate) {
      $(this).addClass('is-invalid');
      $(this).prev('label').addClass('is-invalid');
      $(this).parents('.form-group').find('.invalid-feedback').text($(this).attr('data-pattern-mismatch'));

      if ($(this).next('span').length === 0) {
        $('<span></span>').insertAfter(this);
      }

      $(this).next('span').addClass('invalid');

      if ($(this).next('span').hasClass('valid')) {
        $(this).next('span').removeClass('valid').addClass('invalid');
      }
    } else {
      $(this).removeClass('is-invalid');
      $(this).prev('label').removeClass('is-invalid');
      $(this).parents('.form-group').find('.invalid-feedback').text();

      if ($(this).next('span').length === 0) {
        $('<span></span>').insertAfter(this);
      }

      $(this).next('span').addClass('valid');

      if ($(this).next('span').hasClass('invalid')) {
        $(this).next('span').removeClass('invalid').addClass('valid');
      }

      if ($(this).hasClass('ca-pattern')) {
        // eslint-disable-next-line newline-per-chained-call
        var zipVal = $(this).val().trim().replace(/\s/g, '').toUpperCase();
        var formatedVal = zipVal.substr(0, 3) + ' ' + zipVal.substr(3, zipVal.length);
        $(this).val(formatedVal);
      }
    }
  }
}); // Hudson bay number check on email sign up page

$('body').on('blur', '.email-signup-form .hudson-reward', function () {
  var $this = $(this);
  var rewardNo = $this.val();
  var url = $this.data('check-balance-url');
  var regex = new RegExp('^[0-9]+$');

  if (rewardNo && url && regex.test(rewardNo)) {
    $.spinner().start();
    $.ajax({
      url: url,
      type: 'GET',
      data: {
        reward: rewardNo,
        check: true
      },
      success: function success(data) {
        if (!data.success) {
          $('.hudson-error').removeClass('d-none');
          $('.hudson-reward').val('');
          $('.hudson-reward').addClass('is-invalid');
          $('label.hudsonbay-rewards').addClass('is-invalid');
          $('<span class="invalid"></span>').insertAfter('.hbc-loyalty-number-prefix');

          if (data.counter >= 5) {
            $('.hudson-reward').attr('disabled', true);
            $('.hudson-error').addClass('d-none');
            $('.hudson-error-max').removeClass('d-none');
          }
        } else {
          $('.hudson-error').addClass('d-none');
          $('.hudson-reward').removeClass('is-invalid');
          $('label.hudsonbay-rewards').removeClass('is-invalid');
          $('.hbc-loyalty-number-prefix').nextAll('.invalid').remove();
        }

        $.spinner().stop();
      },
      error: function error() {
        $('.hudson-error').removeClass('d-none');
        $('.hudson-reward').val('');
        $('.hudson-reward').addClass('is-invalid');
        $('label.hudsonbay-rewards').addClass('is-invalid');
        $('<span class="invalid"></span>').insertAfter('.hudson-reward');
        $.spinner().stop();
      }
    });
  } else {
    $('.hudson-error').removeClass('d-none');
    $('label.hudsonbay-rewards').addClass('is-invalid');
    $('.hudson-reward').addClass('is-invalid');
    $('.hudson-reward').val('');
  }
}); // Handle the enable and disable of the button

$('body').on('blur', 'form input, form select', function () {
  var emailval = $('.email-signup .user-email').val();
  var confirmemailval = $('.email-signup .user-confirm-email').val();
  var validate = true;
  var fname = $('.email-signup .user-fname').val();
  var lname = $('.email-signup .user-lname').val();
  var zipcode = $('.email-signup-form #registration-form-zipcode').val();

  if (zipcode !== '' && zipcode !== null && $('.email-signup-form #registration-form-zipcode').hasClass('us-pattern')) {
    validate = /(^\d{5}(-\d{4})?$)|(^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Za-z]{1} *\d{1}[A-Za-z]{1}\d{1}$)/.test(zipcode) === false;
  } else if (zipcode !== '' && zipcode !== null && $('.email-signup-form #registration-form-zipcode').hasClass('ca-pattern')) {
    validate = /^(?!.*[DFIOQUdfioqu])[A-VXYa-vxy][0-9][A-Za-z] ?[0-9][A-Za-z][0-9]$/.test(zipcode) === false;
  }

  if (fname === null || fname === '' || lname === null || lname === '' || zipcode === null || zipcode === '' || validate || emailval === null || emailval === '' || confirmemailval === null || confirmemailval === '' || emailval !== confirmemailval) {
    $('.email-signup-form').find('.email-signup-submit').attr('disabled', 'disabled');
  } else {
    $('.email-signup-form').find('.email-signup-submit').removeAttr('disabled');
  }
});
/**
 * Renders a modal window that will track the users consenting to accepting site tracking policy
 */

function showWelcomeEmailSignUpModal() {
  if ($('.tracking-consent.welcome').hasClass('api-true')) {
    return;
  }

  var urlContent = $('.tracking-consent.welcome').data('url');
  var urlContentForResponse = $('.tracking-consent.welcome').data('responseurl');
  var htmlString = '<!-- Modal -->' + '<div class="modal show" id="welcome-email-modal" class="consent-tracking-modal" role="dialog" aria-modal="true">' + '<div class="modal-dialog email-signup-modal modal-dialog-centered">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="welcome-modal-body"></div>' + '</div>' + '</div>' + '</div>';
  $.spinner().start();
  $('body').append(htmlString);
  $.ajax({
    url: urlContent,
    type: 'get',
    dataType: 'html',
    success: function success(response) {
      $('.welcome-modal-body').html(response);
      $('#welcome-email-modal').modal('show');
      formFields.adjustForAutofill();
      $.spinner().stop();
      $('.consent-tracking-close,.modal-backdrop').on('click', function () {
        welcomeModalCloseFunctionality(false);
      });
      $('#welcome-email-modal').find('a').on('click', function (e) {
        e.preventDefault();
        welcomeModalCloseFunctionality(true);
      });
      $('#welcome-email-modal').on('hidden.bs.modal', function () {
        welcomeModalCloseFunctionality(false);
      });
      $('#welcome-email-modal .button-wrapper button.subscribe-email').click(function (e) {
        e.preventDefault();
        var button = $(this);
        $(this).attr('disabled', true);
        var emailId = $(this).parent().parent('.welcome-email-signup-input').find('input[name=welcomeEmailSignUp]').val();
        var form = {
          emailId: emailId
        };
        var url = $(this).data('href');
        $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: form,
          success: function success(data) {
            if (data.success) {
              $('body').trigger('adobeTagManager:emailsignupmodal', 'welcome overlay');
              $.ajax({
                url: urlContentForResponse,
                type: 'get',
                dataType: 'html',
                success: function success(response) {
                  // eslint-disable-line
                  $('.welcome-modal-body').html(response);
                  $('#thank-email-close,.modal-backdrop').on('click', function () {
                    $('#welcome-email-modal').attr('aria-modal', 'false');
                    $('#welcome-email-modal').modal('hide');
                  });
                  $.spinner().stop();
                },
                error: function error() {
                  $('#welcome-email-modal').attr('aria-modal', 'false');
                  $('#welcome-email-modal').remove();
                  $.spinner().stop();
                }
              });
            } else {
              $('#email-signup').focus().blur();
              displayMessage(data, button);
              $.spinner().stop();
            } // $('#consent-tracking').remove();
            // $.spinner().stop();

          },
          error: function error(err) {
            $('#email-signup').focus().blur();
            displayMessage(err, button);
            $.spinner().stop();
          }
        });
      });
      $('#email-signup').on('blur', function () {
        if ($('#form-email-error').text().length > 0) {
          $(this).attr('aria-invalid', 'true');
        } else {
          $(this).attr('aria-invalid', 'false');
        }
      });
    },
    error: function error() {
      $('#welcome-email-modal').attr('aria-modal', 'false');
      $('#welcome-email-modal').remove();
    }
  });
}

function hbcEmailSignup() {
  $('.email-signup-form form.email-signup').submit(function (e) {
    var errors = $(this).find('span.invalid').length;

    if (errors === 0) {
      $('body').trigger('adobeTagManager:emailsignupmodal', 'email signup');
    }
  });
}
/**
 * Is the window large-ish?
 * @returns {Boolean} true if large, otherwise false.
 */


function isDesktop() {
  return window.innerWidth >= 1024;
}

module.exports = function () {
  if ($('.tracking-consent.welcome').hasClass('api-false')) {
    showWelcomeEmailSignUpModal();
  }

  if ($('.tracking-consent.welcome').hasClass('api-false')) {
    $('.tracking-consent').click(function () {
      showWelcomeEmailSignUpModal();
    });
  }

  hbcEmailSignup();
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/formFields/formFields.js":
/*!*************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/formFields/formFields.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var clientSideValidation = __webpack_require__(/*! core/components/clientSideValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js");

var focusEnabled = false;
/**
 * Needed because there was the autofill suggestion occurs.
 */

function adjustForAutofill() {
  $('.form-group:visible').each(function () {
    var $self = $(this);
    var $input;
    var $inputLabel = $self.find('label');
    var $inputLength;

    if ($self.find('select').length) {
      if ($self.find('.selected-option').length > 0) {
        $input = $self.find('.selected-option');
        $inputLength = $input.text().trim();
      } else {
        $input = $self.find('select option:selected');
        $inputLength = $input.val();
      }
    } else if ($self.find('input').length) {
      $input = $self.find('input');
      $inputLength = $input.val();
    } else {
      $input = $self.find('textarea');
      $inputLength = $input.val();
    }

    if ($inputLength && $inputLength.length && !$inputLabel.hasClass('input-focus')) {
      $inputLabel.addClass('input-focus');
    }

    if (($input.hasClass('shippingZipCode') || $input.hasClass('billingZipCode') || $input.hasClass('addressFromZipcode')) && $inputLabel.hasClass('input-focus')) {
      focusEnabled = true;
    }
  });
}

function quantityHoverBorder() {
  $('body').find('.quantity-field').on('focus mouseover', ' .btn-number', function () {
    if ($(this).attr('disabled') !== 'disabled') {
      $(this).closest('.quantity-field').find('.input-number').addClass('hover-border');
    }
  }).on('focusout mouseout', ' .btn-number', function () {
    $(this).closest('.quantity-field').find('.input-number').removeClass('hover-border');
  });
}
/**
 * When clicking on the document we are closing the custom select dropdown.
 */


function closeCustomSelect() {
  $('.custom-select.current_item select').trigger('blur');
  $('.custom-select').removeClass('current_item');
  $('.custom-select li').removeClass('hover');
}
/**
 * color drop down activate perfect scroll
 *
 * @param {jquery} $element - DOM element for current element
 **/


var activatePerfectScroll = function activatePerfectScroll($element) {
  /* eslint-disable */
  var perfectScrollbar = new window.perfectScrollbar($element, {
    /* eslint-enable */
    wheelSpeed: 2,
    wheelPropagation: true,
    minScrollbarLength: 50,
    maxScrollbarLength: 68
  });
};

function findInsiders($element) {
  if (typeof $element === 'undefined') {
    return;
  }

  var tabbable = $element.find('select, input, textarea, button, a').filter(':visible');
  var firstTabbable = tabbable.first();
  var lastTabbable = tabbable.last();
  /*set focus on first input*/

  firstTabbable.focus();
  /*redirect last tab to first input*/

  lastTabbable.on('keydown', function (e) {
    if (e.which === 9 && !e.shiftKey) {
      e.preventDefault();
      firstTabbable.focus();
    }
  });
  /*redirect first shift+tab to last input*/

  firstTabbable.on('keydown', function (e) {
    if (e.which === 9 && e.shiftKey) {
      e.preventDefault();
      lastTabbable.focus();
    }
  });
}
/**
 * Converting the default select dropdown to unorder list HTML structure.
 */


function updateSelect() {
  $('.custom-select').each(function () {
    var $this = $(this);

    if ($this.find('.selected-option').length === 0) {
      $this.append('<div class="selected-option"></div>');
    }

    if ($this.find('.selection-list').length === 0) {
      $this.append('<ul class="selection-list"></ul>');
      var $list = '';
      var $listClass = '';
      $this.find('option').each(function () {
        if ($(this).attr('class') && $(this).attr('class') !== undefined && $(this).attr('class') !== '') {
          $listClass = $(this).attr('class');
        }

        if ($(this).attr('disabled') === 'disabled') {
          $listClass = 'option-disabled';
        }

        var styleAttr;

        if ($(this).data('background-color')) {
          styleAttr = 'style="background-color:' + $(this).data('background-color') + '"';
        } else if ($(this).data('background-image')) {
          styleAttr = 'style="background-image: url(' + $(this).data('background-image') + ')"';
        }

        if ($(this).closest('.custom-select').hasClass('custom-color-dropdown')) {
          if (!styleAttr) {
            $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '"><div class="item" style="text-align:center;"><div class="inner-item"></div>' + $(this).text() + '</div></li>';
          } else {
            $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '"><div class="item"><div class="inner-item"></div><span class="swatch-color-holder swatch-circle-' + $(this).text().toLocaleLowerCase().trim() + '"' + styleAttr + '></span>' + $(this).text().toLocaleLowerCase() + '</div></li>';
          }
        } else {
          $list += '<li label="' + $(this).text().toLocaleLowerCase() + '" class="' + $listClass + '">' + $(this).text() + '</li>';
        }
      });
      $this.find('.selection-list').append($list);
    } else {
      $this.find('.selection-list li').each(function () {
        $this.attr('label', $.trim($(this).text().toLocaleLowerCase()));
      });
    }

    if ($(this).hasClass('custom-color-dropdown')) {
      var styleAttr;
      var currElement = $(this).find('select option:selected');

      if (currElement.data('background-color')) {
        styleAttr = 'style="background-color:' + currElement.data('background-color') + '"';
      } else if (currElement.data('background-image')) {
        styleAttr = 'style="background-image: url(' + currElement.data('background-image') + ')"';
      }

      if (!styleAttr) {
        $this.find('.selected-option').html($(this).find('select option:selected').text());
      } else {
        $this.find('.selected-option').html('<span class="swatch-color-holder swatch-circle-' + currElement.text().toLocaleLowerCase().trim() + '"' + styleAttr + '></span>' + $(this).find('select option:selected').text().toLocaleLowerCase());
      }
    } else {
      $this.find('.selected-option').text($(this).find('select option:selected').text());
    }

    $this.find('.selection-list li').removeClass('selected').removeClass('hover').eq($(this).find('select option:selected').index()).addClass('selected');

    if ($(this).find('select option:selected').val() !== '') {
      $this.find('.selected-option').addClass('selected');
    } else {
      $this.find('.selected-option').removeClass('selected');
    }

    if ($this.find('.selection-list li .bold').length > 0) {
      $this.find('.selected-option').html($this.find('.selection-list li').eq($this.find('select option:selected').index()).html());
    }

    $this.find('li').removeClass('selected');
    $this.find('li').eq($(this).find('select option:selected').index()).addClass('selected');
    $this.find('.invalid-feedback').appendTo(this);
    /* if ($(this).hasClass("custom-color-dropdown")) {
      if (window.innerWidth >= 544) {
        activatePerfectScroll(
          $(".custom-color-dropdown").find(".selection-list")[0]
        );
      }
      
    }*/
  });
}

function addMenuOverlay() {
  $('.modal-background').addClass('background').css('top', 0);
}

function removeMenuOverlay() {
  $('.modal-background').removeClass('background').removeAttr('style');
}

module.exports = {
  updateSelect: updateSelect,
  adjustForAutofill: adjustForAutofill,
  addMenuOverlay: addMenuOverlay,
  removeMenuOverlay: removeMenuOverlay,
  quantityHoverBorder: quantityHoverBorder,
  findInsiders: findInsiders,
  handleEDQCallbackAddress: function handleEDQCallbackAddress() {
    if ($('#edq-verification-suggestion-box').length > 0) {
      window.MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
      var target = document.querySelector('#edq-verification-suggestion-box'),
          observer = new MutationObserver(function (mutation) {
        if (!$('#edq-verification-suggestion-box').is(':visible')) {
          setTimeout(function () {
            $('form.address-form').find('input:visible, select:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);
              }
            });
            adjustForAutofill();
          }, 1500);
        }
      }),
          config = {
        attributes: true
      };
      observer.observe(target, config);
    }
  },
  adjustAddressAutoFill: function adjustAddressAutoFill() {
    $('body').on('mousedown', '.edq-global-intuitive-address-suggestions div', function () {
      // SFDEV-4665 | Changes for QAS float foxus and shipping blur
      var setFocus = setInterval(changeFocus, 200);

      function changeFocus() {
        if (focusEnabled) {
          clearInterval(setFocus);
          focusEnabled = false;
        } else {
          adjustForAutofill();

          if ($('body').find('.checkout-primary-section').length) {
            $('form:visible input.shippingAddressOne:visible, form:visible input.billingAddressOne:visible').closest('form').find('input:visible, select:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);

                if (this.name === 'dwfrm_shipping_shippingAddress_addressFields_postalCode') {
                  $('input[name$="shippingAddress_addressFields_postalCode"]').blur();
                }
              }

              var result = clientSideValidation.checkFormvalidCheckout.call(this);

              if (result && $(this).closest('.checkout-primary-section').length !== 0) {
                $('.next-step-button:visible').find('button[type="submit"]').removeAttr('disabled');
              } else {//$('.next-step-button:visible').find('button[type="submit"]').attr('disabled', 'disabled');
              }
            });
          } else {
            $('form:visible input#address1:visible').closest('form').find('input:visible, select:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);
              }
            });
          }

          setTimeout(function () {
            adjustForAutofill();
          }, 1000);
        }
      }
    });
  },
  inputfocusEvent: function inputfocusEvent() {
    // Needs the focus event to do the floating label value.
    $('body').off('focus', '.form-group input, .form-group select, .form-group textarea').on('focus', '.form-group input, .form-group select, .form-group textarea', function () {
      var $label = $(this).closest('.form-group').find('label');

      if ($label.length && !$label.hasClass('input-focus')) {
        $label.addClass('input-focus');
      }
    }); // Needs blur event to set the float the label value as normal position.

    $('body').off('blur', '.form-group input, .form-group select, .form-group textarea').on('blur', '.form-group input, .form-group select, .form-group textarea', function () {
      // eslint-disable-line
      var $label = $(this).closest('.form-group').find('label'); // Handled auto-focus issue only in case of IE for address select box CO flow.

      if ($(this).hasClass('selected-option') && $(this).text().length !== '') {
        return false;
      }

      if ($(this).attr('id') === 'registration-form-hudsonbay-rewards' && $(this).next('span.hbc-loyalty-number-prefix:visible').length !== 0) {
        return false;
      }

      if ($(this).val() !== null) {
        if (!$(this).hasClass('do-not-float')) {
          if (!$(this).val().length && $label.hasClass('input-focus')) {
            $label.removeClass('input-focus');
          }
        }
      } else if ($label.hasClass('input-focus')) {
        $label.removeClass('input-focus');
      }
    });
  },
  // Animating the input changes periodically. Needed because there is no standard cross-browser event that fires when autofilling/autocorrecting occurs.
  setAdjustForAutofill: function setAdjustForAutofill() {
    $(window).on('load', function () {
      if (navigator.userAgent.indexOf('Firefox') > -1) {
        adjustForAutofill();
      } else {
        $('input[type="password"]:-webkit-autofill, input[type="email"]:-webkit-autofill, input[type="text"]:-webkit-autofill').each(function () {
          $(this).closest('.form-group').find('label').addClass('input-focus');
        });
      }
    });
  },
  selectbox: function selectbox() {
    // var $windowMedia = window.matchMedia('(min-width: 1025px)').matches;
    var $windowMedia = true;
    this.updateSelect();
    $(document).on('click', '.selected-option', function () {
      var $h = 0;
      var $this = $(this);

      if ($this.siblings('select').is(':disabled')) {
        return false;
      }

      if ($windowMedia) {
        $('.custom-select.current_item select').trigger('blur');
        window.$currentkeycode = '';
        $('.custom-select').not($this.closest('.custom-select')).removeClass('current_item');

        if (window.innerWidth < 600) {
          //Mobile fix
          $this.siblings('.selection-list').css('top', '5px');
        } else {
          $this.siblings('.selection-list').css('top', $this.outerHeight());
        }

        $this.closest('.custom-select').toggleClass('current_item');

        if (!$this.closest('.custom-select').hasClass('current_item')) {
          $this.siblings('select').trigger('blur');
        }

        if ($this.siblings('.selection-list').find('li').length > 10) {
          $.each($this.siblings('.selection-list').find('li:visible').slice(0, 10), function () {
            $h += $(this).outerHeight();
            $this.siblings('.selection-list').height($h - 1);
          });
          var h = 0;
          $.each($this.closest('.custom-select').find('.selection-list li:visible').splice(0, $this.closest('.custom-select').find('.selection-list li.selected:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
          $this.siblings('.selection-list').scrollTop(h);
        } else {
          $this.siblings('.selection-list').height('auto');
        }
      }

      return true;
    }).on('click', '.selection-list li', function () {
      if ($windowMedia) {
        var $item = $(this).closest('.custom-select');

        if ($item.find('select option').eq($(this).index()).text() === $item.find('.selected-option.selected').text()) {
          $item.removeClass('current_item');
          return false;
        } //removing as per delta in avenue to make unavailable color clickable

        /*if ($(this).hasClass('option-disabled')) {
                  return false;
              }*/


        $item.find('li').removeClass('hover selected');
        $(this).addClass('selected');
        $item.find('select option').eq($(this).index()).prop('selected', true);
        $item.find('.selected-option').text($(this).text());
        $item.removeClass('current_item');
        $item.find('select').trigger('change');
        $item.find('select').trigger('blur');

        if ($item.find('.selected-option').text().trim() === '') {
          $item.find('label').removeClass('input-focus');
        } else {
          $item.find('label:not(".input-focus")').addClass('input-focus');
        }
      }

      return true;
    }).on('change input', 'select', function () {
      updateSelect();
    });
    $(document).on('click', function (e) {
      if ($windowMedia && !$('.custom-select.current_item').is(e.target) && !$('.custom-select.current_item').find('*').is(e.target)) {
        closeCustomSelect();
      }
    });
    $('body').off('keydown').on('keydown', function (e) {
      /* eslint-disable */
      var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
      var $activeSelect = $('.custom-select.current_item');
      var $mac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;
      /* eslint-enable */

      if ($activeSelect.length > 0 && $windowMedia) {
        $activeSelect.find('select').focus();
        $activeSelect.addClass('current_item');
        var $list = $activeSelect.find('li');
        var $active;

        if (!$activeSelect.find('li.selected').length) {
          $activeSelect.find('li').eq($activeSelect.find('option:selected').index()).addClass('selected');
        }

        if (key === 8) {
          // Delete key
          window.$currentkeycode = window.$currentkeycode === undefined ? '' : window.$currentkeycode.slice(0, -1);
        } else {
          window.$currentkeycode += window.$currentkeycode === undefined ? '' : $.trim(String.fromCharCode(key).toLowerCase());
        }

        $active = $activeSelect.find('li[label^="' + window.$currentkeycode + '"]');

        if ($active.length === 0) {
          window.$currentkeycode += window.$currentkeycode === undefined ? '' : $.trim(String.fromCharCode(key));
          window.$currentkeycode = window.$currentkeycode.substr(window.$currentkeycode.length - 1, 1);
          $active = $activeSelect.find('li[label^="' + window.$currentkeycode + '"]');
        }

        if (key === 40) {
          if ($activeSelect.find('li.selected').length > 0 && $activeSelect.find('li.hover').length === 0) {
            $activeSelect.find('li.selected').addClass('hover');
          }

          $active = $activeSelect.find('li.hover');
          $activeSelect.find('li').removeClass('hover');
          $active.next().addClass('hover');
        } else if (key === 38) {
          if ($activeSelect.find('li.selected').length > 0 && $activeSelect.find('li.hover').length === 0) {
            $activeSelect.find('li.selected').addClass('hover');
          }

          $active = $activeSelect.find('li.hover');

          if (!$active.prev().hasClass('hide')) {
            $activeSelect.find('li').removeClass('hover');
            $active.prev().addClass('hover');
          }
        } else if (key === 13) {
          if ($active.length === 0 && $activeSelect.find('li.hover').length > 0) {
            $activeSelect.find('li.hover').trigger('click');
          } else {
            $active.eq(0).trigger('click');

            if ($mac) {
              $('.custom-select').find('select').css({
                /* eslint-disable */
                left: '0px'
                /* eslint-enable */

              });
            } else {
              $('.custom-select').find('select').css({
                /* eslint-disable */
                left: '-9999px'
                /* eslint-enable */

              });
            }
          }
        } else if (key === 9 || key === 27) {
          closeCustomSelect();

          if ($mac) {
            $('.custom-select').find('select').css({
              /* eslint-disable */
              left: '0px'
              /* eslint-enable */

            });
          } else {
            $('.custom-select').find('select').css({
              /* eslint-disable */
              left: '-9999px'
              /* eslint-enable */

            });
          }
        } else if ($active.length !== 0) {
          $list.removeClass('hover');
          $active.eq(0).addClass('hover');
        }

        if (key === 8) {
          // Delete key
          return false;
        }

        var h = 0;

        if ($activeSelect.find('.selection-list li.hover').length === 0) {
          $.each($activeSelect.find('.selection-list li:visible').splice(0, $activeSelect.find('.selection-list li.selected:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
        } else {
          $.each($activeSelect.find('.selection-list li:visible').splice(0, $activeSelect.find('.selection-list li.hover:visible').index() - 1), function () {
            h += $(this).outerHeight();
          });
        }

        $activeSelect.find('.selection-list').scrollTop(h);
      }

      return true;
    });
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/giftcard/giftcard.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/giftcard/giftcard.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Generates the modal window on the first call.
 *
 */

function getModalHtmlElement() {
  if ($('#giftcard-modal').length !== 0) {
    $('#giftcard-modal').remove();
  }

  if ($('#consent-tracking').length !== 0) {
    $('#consent-tracking').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade giftcard-modal-sec" id="giftcard-modal" role="dialog" aria-modal="true">' + '<span class="giftcard-message sr-only" ></span>' + '<div class="modal-dialog giftcard-dialog modal-dialog-centered">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-body"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * wherearegc model html .
 *
 **/


function getGCCModalHtmlElement() {
  if ($('#wherearegcmodal').length !== 0) {
    $('#wherearegcmodal').remove();
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade wherearegcmodal" id="wherearegcmodal" role="dialog" aria-modal="true">' + '<div class="modal-dialog wherearegcmodal-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-body">' + '</div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
}
/**
 * Validation check and actions on the form elements
 *
 * @param {Object} elem - DOM element on which validation should be performed
 */


function validationOfElements(elem) {
  var val = elem.val();
  elem.parent().toggleClass('error', !val).toggleClass('success', !!val);
  elem.parent().find('.error-img').toggleClass('d-none', !!val);
  elem.parent().find('.success-img').toggleClass('d-none', !val);
  elem.parent().find('.missing-error-required').toggleClass('d-none', !!val);
}
/**
 * validate GC data on blur
 *
 */


function validateOnBlur(elem) {
  if (!elem) {
    $('.giftcard-dialog-body .giftcard-form input:visible').each(function () {
      validationOfElements($(this));
    });
  } else {
    validationOfElements(elem);
  }
}
/**
 * Gift card error notifications
 * @param {Object} message - Error message to display
 */


function createErrorNotification(message) {
  var errorHtml = '<div class="alert alert-danger" role="alert">' + message + '</div>';
  $('.giftcard-error').html(errorHtml);
}
/**
 * fill modal gc form
 *
 * @param {string} urlHit - url to be hit
 */


function fillModalElement(urlHit) {
  $.spinner().start();
  $.ajax({
    url: urlHit,
    method: 'GET',
    dataType: 'json',
    success: function success(data) {
      var template = data.renderedTemplate;
      $('#giftcard-modal .modal-body').empty();
      $('#giftcard-modal .modal-body').html(template);
      $('#giftcard-modal').modal('show'); // reCaptcha.callToken('giftcardpage');

      $('.svg-svg-22-cross-dims').on('click', function () {
        $('.modal-backdrop').remove();
        $('#giftcard-modal').modal('hide');
      });
      $('body .giftcard-dialog').off('blur').on(' blur', '.giftcard-form input', function () {
        validateOnBlur($(this));
      });
      $('.gift-card-check-submit button').on('click', function (e) {
        e.preventDefault();
        $.spinner().start(); // eslint-disable-next-line no-undef

        grecaptcha.ready(function () {
          // eslint-disable-next-line no-undef
          grecaptcha.execute($('.google-recaptcha-key').html(), {
            action: 'gcbalancecheck'
          }).then(function (token) {
            $('.giftcard-form .g-recaptcha-token').val(token);
            validateOnBlur();
            var gcNumb = $('.gc-numb').val();
            var gcPin = $('.gc-pin').val();

            if (!gcNumb || !gcPin) {
              $('.generic-error').addClass('d-none');
              $.spinner().stop();
              return;
            }

            $.ajax({
              url: $('.gift-card-check-submit button').data('action'),
              method: 'POST',
              data: {
                token: $('.g-recaptcha-token').val(),
                apiKey: $('.g-recaptcha-token').data('secret'),
                gcNumber: gcNumb,
                gcPin: gcPin,
                checkbalance: true
              },
              success: function success(responseData) {
                if (responseData.success) {
                  var htmlData = responseData.renderedTemplate;
                  $('#giftcard-modal .modal-body').empty();
                  $('#giftcard-modal .modal-body').html(htmlData);
                  $('.svg-svg-22-cross-dims').on('click', function () {
                    $('#giftcard-modal').modal('hide');
                    $('body').removeClass('modal-open');
                    $('.modal-backdrop').remove();
                    $('#giftcard-modal').remove();
                  });
                  $('.generic-error').addClass('d-none');
                  $.spinner().stop();
                  $('.giftcard-continue button').on('click', function (event) {
                    event.preventDefault();
                    $('#giftcard-modal').modal('hide');
                    $('body').removeClass('modal-open');
                    $('.modal-backdrop').remove();
                    $('#giftcard-modal').remove();
                  });
                  $('.giftcard-check-balance button').on('click', function (eve) {
                    eve.preventDefault();
                    var url = $(this).data('action');
                    fillModalElement(url);
                  });
                } else if (typeof responseData.serviceError !== 'undefined' && responseData.serviceError) {
                  $('.generic-error').addClass('d-none');
                  createErrorNotification(responseData.message); // reCaptcha.callToken('giftcardpage');

                  $.spinner().stop();
                } else {
                  $('.giftcard-error').empty();
                  $('.gc-numb').parent().find('.success-img').addClass('d-none');
                  $('.gc-pin').parent().find('.success-img').addClass('d-none');
                  $('.generic-error').html(responseData.message);
                  $('.generic-error').removeClass('d-none');
                  $('.gc-numb').parent().addClass('error');
                  $('.gc-numb').parent().find('.error-img').removeClass('d-none');
                  $('.gc-pin').parent().addClass('error');
                  $('.gc-pin').parent().find('.error-img').removeClass('d-none'); // reCaptcha.callToken('giftcardpage');

                  $.spinner().stop();
                }

                if (responseData.botError) {
                  $('.check-bal-bttn').attr('disabled', 'disabled');
                  createErrorNotification(responseData.error);
                }
              },
              error: function error(responseData) {
                $('.gc-numb').parent().find('.success-img').addClass('d-none');
                $('.gc-pin').parent().find('.success-img').addClass('d-none'); // $('.generic-error').html(responseData.message);

                $('.generic-error').removeClass('d-none');
                $('.gc-numb').parent().addClass('error');
                $('.gc-numb').parent().find('.error-img').removeClass('d-none');
                $('.gc-pin').parent().addClass('error');
                $('.gc-pin').parent().find('.error-img').removeClass('d-none'); // reCaptcha.callToken('giftcardpage');

                $.spinner().stop();

                if (responseData.botError) {
                  $('.check-bal-bttn').attr('disabled', 'disabled');
                  createErrorNotification(responseData.error);
                }
              }
            });
          });
        });
      });
      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * wherearegc model actions.
 *
 **/


function fillGCCModalElement() {
  $.spinner().start();
  $.ajax({
    url: $('a.wherearegc').attr('href'),
    method: 'GET',
    success: function success(data) {
      var template = data.renderedTemplate;
      $('.wherearegcmodal-dialog .modal-body').html('<button class="close gc-close-btn svg-svg-22-cross svg-svg-22-cross-dims" type="button"/>' + template);
      $('#wherearegcmodal').modal('show');
      $('.svg-svg-22-cross-dims').on('click', function () {
        $('#wherearegcmodal').attr('aria-modal', 'false');
        $('#wherearegcmodal').next('.modal-backdrop').remove();
        $('#wherearegcmodal').modal('hide');
      });
      $.spinner().stop();
    },
    error: function error() {
      $('#wherearegcmodal').attr('aria-modal', 'false');
      $('#wherearegcmodal').next('.modal-backdrop').remove();
      $('#wherearegcmodal').modal('hide');
      $.spinner().stop();
    }
  });
}

module.exports = {
  giftcardPopup: function giftcardPopup() {
    $('body').on('click', '.check-balance', function (e) {
      e.preventDefault();
      var urlHit = $(this).attr('href');
      getModalHtmlElement();
      fillModalElement(urlHit);
    });
  },
  wherearegc: function wherearegc() {
    $('body').on('click', '.wherearegc', function (e) {
      e.preventDefault();
      getGCCModalHtmlElement();
      fillGCCModalElement();
    });
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js":
/*!*************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _getSliderConfig;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var base = __webpack_require__(/*! core/hbcSlider */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/hbcSlider.js");

var debounce = __webpack_require__(/*! lodash/debounce */ "../sfra/node_modules/lodash/debounce.js");

var PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS = ['category-slider', 'recommendation-products', 'primary-images', 'primary-images-set', 'homepage-cat-slider', 'wishlist-cart-slider', 'ctl-images'];

var isObject = function isObject(obj) {
  return obj && _typeof(obj) === 'object';
};

var isArray = function isArray(arr) {
  return arr && arr instanceof Array;
};
/**
 * Returns all unique values of an array, based on a provided comparator function.
 * @param {Array} arr An array of objects
 * @param {Function} fn A comparison function
 * @returns {Array} An array of unique elements, as determined by the comparison function
 */


var uniqueElementsBy = function uniqueElementsBy(arr, fn) {
  return arr.reduce(function (acc, v) {
    if (!acc.some(function (x) {
      return fn(v, x);
    })) acc.push(v);
    return acc;
  }, []);
};
/**
 * Merges two Slick 'responsive' config objects together
 * @param {Array} target A responsive object in the slick config
 * @param {Array} source A responsive object in the slick config
 */


var mergeBreakpoints = function mergeBreakpoints(target, source) {
  var mergedSources = uniqueElementsBy(source.concat(target), function (a, b) {
    return a.breakpoint === b.breakpoint;
  });
  return mergedSources.map(function (sourceElement) {
    var targetElement = target.find(function (el) {
      return sourceElement.breakpoint === el.breakpoint;
    });

    if (targetElement) {
      return {
        breakpoint: sourceElement.breakpoint,
        settings: Object.assign({}, sourceElement.settings, targetElement.settings)
      };
    }

    return sourceElement;
  });
};
/**
 * Returns a configuration object, based on the defaultSliderConfig, any property of which can be overridden
 * @param {Object} overrides Any overrides to the default slick carousel configuration
 * @return {Object} A slick carousel config object
 */


var getSliderConfig = function getSliderConfig(overrides) {
  var defaultConfigCopy = Object.assign({}, defaultSliderConfig);

  if (!isObject(overrides)) {
    return defaultConfigCopy;
  }

  var mergedConfig = Object.assign(defaultConfigCopy, overrides);

  if (!isArray(overrides.responsive)) {
    return mergedConfig;
  } // If we're here, we need to merge the responsive config


  mergedConfig.responsive = mergeBreakpoints(defaultConfigCopy.responsive, mergedConfig.responsive);
  return mergedConfig;
};
/**
 * The default Slick carousel config object.
 */


var defaultSliderConfig = {
  slidesToShow: 1,
  slidesToScroll: 1,
  speed: 150,
  swipe: true,
  draggable: true,
  swipeToSlide: false,
  touchThreshold: 10,
  dots: true,
  arrows: true,
  centerMode: false,
  infinite: false,
  focusOnSelect: false,
  variableWidth: false,
  accessibility: true,
  responsive: [{
    breakpoint: 1024,
    settings: {
      swipeToSlide: true
    }
  }]
};
/**
 * Configurations for individual slick carousels.
 */

var sliderData = {
  'recommendation-products': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    dots: false,
    responsive: [{
      breakpoint: 1260,
      settings: {
        dots: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  }),
  'wishlist-cart-slider': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    dots: false,
    responsive: [{
      breakpoint: 1260,
      settings: {
        dots: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 3.5,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 2,
        slidesToScroll: 1
      }
    }]
  }),
  'primary-images': getSliderConfig({
    infinite: true
  }),
  'complete-the-look': getSliderConfig({
    slidesToShow: 2,
    slidesToScroll: 1,
    dots: false,
    responsive: [{
      breakpoint: 1024,
      settings: {
        dots: true,
        arrows: false,
        slidesToShow: 2,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: true,
        arrows: false,
        slidesToShow: 2,
        slidesToScroll: 2
      }
    }]
  }),
  'complete-the-look-full-width': getSliderConfig({
    slidesToShow: 4,
    slidesToScroll: 1,
    dots: false,
    responsive: [{
      breakpoint: 1024,
      settings: {
        dots: true,
        arrows: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: true,
        arrows: false,
        slidesToShow: 2,
        slidesToScroll: 2
      }
    }]
  }),
  'primary-images-set': getSliderConfig(),
  'quick-view-images': getSliderConfig(),
  'ctl-images': getSliderConfig({
    dots: false
  }),
  'edit-product': getSliderConfig({
    dots: false
  }),
  'category-slider': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    dots: false,
    responsive: [{
      breakpoint: 1260,
      settings: {
        dots: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  }),
  'homepage-slider': getSliderConfig({
    autoplay: true,
    autoplaySpeed: 4500,
    speed: 1000,
    infinite: true
  }),
  'homepage-cat-slider': getSliderConfig({
    slidesToShow: 5,
    slidesToScroll: 5,
    dots: false,
    responsive: [{
      breakpoint: 1260,
      settings: {
        dots: false,
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 4.5,
        slidesToScroll: 4,
        swipeToSlide: false,
        touchThreshold: 500
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 2.5,
        slidesToScroll: 2,
        swipeToSlide: false,
        touchThreshold: 500
      }
    }]
  }),
  'category-refinement-bar': getSliderConfig((_getSliderConfig = {
    dots: false,
    infinite: false,
    speed: 300,
    slidesToShow: 1
  }, _defineProperty(_getSliderConfig, "slidesToShow", 1), _defineProperty(_getSliderConfig, "centerMode", false), _defineProperty(_getSliderConfig, "variableWidth", true), _defineProperty(_getSliderConfig, "arrows", false), _defineProperty(_getSliderConfig, "swipeToSlide", true), _defineProperty(_getSliderConfig, "mobileFirst", true), _defineProperty(_getSliderConfig, "responsive", [{
    breakpoint: 1024,
    settings: {
      dots: false,
      arrows: false,
      slidesToShow: 16,
      slidesToScroll: 16
    }
  }]), _getSliderConfig)),
  'two-up-row': getSliderConfig({
    slidesToShow: 2,
    slidesToScroll: 2,
    dots: false,
    responsive: [{
      breakpoint: 1024,
      settings: {
        dots: false,
        arrows: false,
        slidesToShow: 2.5,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 544,
      settings: {
        dots: true,
        arrows: false,
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  })
};
/**
 * Largescreen?
 * @returns {boolean} True for largescreen, otherwise false.
 */

function isDesktop() {
  return window.innerWidth >= 1024;
}
/**
 * Generates a unique ID.
 * @return {String} a unique ID.
 */


var generateUUID = function generateUUID() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
};
/**
 * Handles clicks on the dots on touchscreens.
 * @param {Event} evt The event object
 */


var handleTouchscreenDotClick = function handleTouchscreenDotClick(evt) {
  var targetSlide = document.querySelector("[data-dot-id=\"".concat(evt.target.parentElement.id, "\"]"));

  if (!targetSlide) {
    return;
  }

  var targetSlideContainer = targetSlide.parentElement;
  targetSlideContainer.scrollTo({
    left: targetSlide.offsetLeft,
    behavior: 'smooth'
  });
};
/**
 * Builds dot indiators for touchscreen sliders.
 * @param {Element} slider The slider wrapper element
 */


var buildNativeScrollSliderDots = function buildNativeScrollSliderDots(slider) {
  var list = document.createElement('ul');
  ['touchscreen-slider-dots', 'slick-dots'].forEach(function (str) {
    return list.classList.add(str);
  });
  var slides = Array.from(slider.children);
  slides.forEach(function (slide) {
    return slide.dataset.dotId = "touchscreen-slider-dot-".concat(generateUUID());
  });
  var dots = slides.map(function (slide, index) {
    return "<li id=\"".concat(slide.dataset.dotId, "\"><button type=\"button\">").concat(index + 1, "</button></li>");
  }).join('');
  list.innerHTML = dots;
  list.addEventListener('click', handleTouchscreenDotClick);
  slider.insertAdjacentElement('afterend', list);
};
/**
 * Sets up an intersection observer to update the active dot state on touchscreens.
 * @param {Element} slider A slider container element
 */


var observeNativeScrollSlides = function observeNativeScrollSlides(slider) {
  var handleIntersect = function handleIntersect(entries) {
    entries.forEach(function (entry) {
      var dot = document.getElementById(entry.target.dataset.dotId);

      if (!dot) {
        return;
      }

      if (entry.isIntersecting) {
        dot.classList.add('slick-active');

        if (entry.intersectionRatio >= 0.99 && entry.intersectionRatio <= 0.998 && $(entry.target).is('.primary-image') && dot.classList.contains('slick-active')) {
          $('body').trigger('adobeTagManager:altImageView');
        }
      } else {
        dot.classList.remove('slick-active');
      }
    });
  };

  var observer = new IntersectionObserver(handleIntersect, {
    root: slider,
    rootMargin: '0px',
    threshold: [0.5, 0.99]
  });
  var slides = Array.from(slider.children);
  slides.forEach(function (slide) {
    return observer.observe(slide);
  });
};
/**
 * Sets up touchscreen slider functionality.
 * @param {String} sliderType The key for the type of slider.
 */


var decorateNativeScrollSlider = function decorateNativeScrollSlider(sliderType) {
  var sliders;

  if (sliderType) {
    sliders = document.querySelectorAll(".".concat(sliderType));
  }

  if (!sliders.length) {
    return;
  }

  sliders.forEach(function (slider) {
    if (slider.classList.contains('touchscreen-slider-initialized')) {
      return;
    }

    if (slider.dataset.touchscreenSliderDots !== 'false') {
      buildNativeScrollSliderDots(slider);
      observeNativeScrollSlides(slider);
    }

    slider.classList.add('touchscreen-slider-initialized');
  });
};

var initResponsiveSlider = function initResponsiveSlider(slider, sliderType) {
  var $slider = $(slider);

  var determineResponsiveSliderStatus = function determineResponsiveSliderStatus() {
    if (isDesktop()) {
      if ($slider.hasClass('slick-initialized')) {
        $slider.slick('unslick');
      }

      return;
    }

    if (!$slider.hasClass('slick-initialized')) {
      $slider.slick(sliderData[sliderType]);
    }
  }; // Make sure no other call try to incorrectly intialize slick


  var desktopInitializationObserver = new MutationObserver(function () {
    if ($slider.hasClass('slick-initialized') && (isDesktop() || PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderType) && window.isTouchscreen())) {
      $slider.slick('unslick');
    }
  });
  desktopInitializationObserver.observe($slider.get(0), {
    attributes: true
  }); // Update on resize and orientation change

  var debounceDetermineResponsiveSliderStatus = debounce(determineResponsiveSliderStatus, 50);
  window.addEventListener('resize', debounceDetermineResponsiveSliderStatus);
  window.addEventListener('orientationchange', debounceDetermineResponsiveSliderStatus); // Set it up

  determineResponsiveSliderStatus();
};

base.hbcSliderInit = function (sliderType, slider) {
  if (sliderType && PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderType) && window.isTouchscreen()) {
    decorateNativeScrollSlider(sliderType);
    return;
  }

  var $sliders;

  if (typeof sliderType === 'undefined') {
    $.each(sliderData, function (sliderTypeVal, sliderDataVal) {
      if (PREFER_NATIVE_SCROLL_ON_TOUCHSCREENS.includes(sliderTypeVal) && window.isTouchscreen()) {
        decorateNativeScrollSlider(sliderTypeVal);
        return;
      }

      $sliders = $('.' + sliderTypeVal + ':not(.slick-initialized)');

      if (!$sliders.is('.async-slider')) {
        $sliders.slick(sliderDataVal);
      }
    });
  } else {
    if (typeof slider === 'undefined') {
      $sliders = $('.' + sliderType + ':not(.slick-initialized)');
    } else {
      $sliders = slider;
    }

    $sliders.each(function () {
      if (this.classList.contains('responsive-slider')) {
        initResponsiveSlider(this, sliderType);
      } else {
        $(this).slick(sliderData[sliderType]);
      }
    });
  }
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/klarnaClientUtils.js":
/*!*********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/klarnaClientUtils.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");

var hasGiftCard = function hasGiftCard(items) {
  return items.some(function (_ref) {
    var hbcProductType = _ref.hbcProductType;
    return hbcProductType === 'giftcard';
  });
};

function toggleKlarnaOrderSummary(amount) {
  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (amount && window.KlarnaOnsiteService && !hasGiftCard(items)) {
    var kosm = document.getElementsByClassName('kosm-cart')[0];
    if (!kosm) return;
    kosm.classList.remove('d-none');
    var klarnaTag = kosm.getElementsByTagName('klarna-placement')[0];
    klarnaTag.setAttribute('data-purchase-amount', Math.round(amount * 100));
    window.KlarnaOnsiteService.push({
      eventName: 'refresh-placements'
    });
  }
}

module.exports = {
  toggleKlarnaOrderSummary: toggleKlarnaOrderSummary,

  /**
   * change klarna payment checkout tab looks
   * @param show
   */
  toggleKlarnaCheckoutTab: function toggleKlarnaCheckoutTab(show) {
    var klarnaTabNav = $('.nav-item.klarna-payment-item');

    if (!klarnaTabNav) {
      return;
    }

    klarnaTabNav.show(); // always have klarna show if in isml

    var klarnaEnableEl = klarnaTabNav.find('label .no-tooltip');
    var klarnaDisableEl = klarnaTabNav.find('label .custom-tooltip');
    klarnaEnableEl.toggleClass('d-none', !show);
    klarnaDisableEl.toggleClass('d-none', show);
    klarnaTabNav.find('input').prop('disabled', !show);
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/login/login.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/login/login.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! core/login/login */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/login/login.js");

base.resetPassword = function () {
  $('body .reset-password-form').submit(function (e) {
    e.preventDefault();
    var form = $(this); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'forgotpassword'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var url = form.attr('action');
        $('.forgot-password-error').empty().removeClass('invalid-email-alert');
        form.spinner().start();
        $('.reset-password-form').trigger('login:register', e);
        $.ajax({
          url: url,
          type: 'post',
          dataType: 'json',
          data: form.serialize(),
          success: function success(data) {
            form.spinner().stop();

            if (!data.success && !data.invalid) {
              formValidation(form, data);
            } else if (data.invalid) {
              $('.forgot-password-error').text(data.invalidMsg).addClass('invalid-email-alert').show();
              $('#reset-password-email').val('');
              $('#reset-password-email').parent().find('label').removeClass('input-focus');
              $('#reset-password-email').next('span').remove();
            } else {
              $('.js-forgot-container').remove();
              $('#reset-message1').text(data.resetMessage1);
              $('#reset-message2').text(data.resetMessage2);
              $('.js-container-success').removeClass('d-none');
            }

            if (data.botError) {
              form.find('[id="submitEmailButton"]').attr('disabled', 'disabled');
            }
          },
          error: function error() {
            if (data.botError) {
              form.find('[id="submitEmailButton"]').attr('disabled', 'disabled');
            }

            form.spinner().stop();
          }
        });
        return false;
      });
    });
  });
  $('body .reset-password-form').find('#reset-password-email').on('keypress', function () {
    if (!$('.forgot-password-error').is(':empty')) {
      $('.forgot-password-error').slideUp('slow');
    }
  });
};

base.enableOptInCheckbox = function () {
  $('.js-canadian-customer').on('change', function () {
    var zipCodeField = $(this).closest('form').find('.saks-zip-code');

    if (zipCodeField.val()) {
      zipCodeField.val('');
      zipCodeField.hasClass('is-invalid') ? zipCodeField.removeClass('is-invalid') : '';
      zipCodeField.next('label').removeClass('is-invalid').removeClass('input-focus');
      zipCodeField.next('span') ? zipCodeField.next('span').remove() : '';
      zipCodeField.parents('.form-group').find('.invalid-feedback').empty();
    }

    if ($('.js-canadian-customer:checked').val() === 'T') {
      $('.js-email-pref-checkobox').removeClass('d-none');
      $('.saks-canada-opt').prop('checked', false);
      $('.js-saks-canadat-opt').addClass('d-none');
      $('.customer-apply-msg').removeClass('d-none');
      $('.create-apply-btn-label').addClass('d-none');
      $('.create-btn-label').removeClass('d-none');

      if (zipCodeField) {
        zipCodeField.closest('div').find('.saks-zip-text').text($(this).attr('data-ziptext'));
        zipCodeField.removeClass('us-pattern').addClass('ca-pattern');
        zipCodeField.attr('data-pattern-mismatch', $(this).attr('data-postal-error'));
      }
    } else {
      $('.js-email-pref-checkobox').addClass('d-none');
      $('.js-saks-canadat-opt').removeClass('d-none');
      $('#add-to-email-list').prop('checked', false);
      $('.customer-apply-msg').addClass('d-none');
      $('.create-apply-btn-label').removeClass('d-none');
      $('.create-btn-label').addClass('d-none');

      if (zipCodeField) {
        zipCodeField.closest('div').find('.saks-zip-text').text($(this).attr('data-ziptext'));
        zipCodeField.removeClass('us-pattern').addClass('us-pattern');
        zipCodeField.attr('data-pattern-mismatch', $(this).attr('data-postal-error'));
      }
    }
  });
};

base.submitNewPassword = function () {
  $('body').on('click', '.submit-new-password', function (e) {
    e.preventDefault(); // eslint-disable-next-line no-undef

    grecaptcha.ready(function () {
      // eslint-disable-next-line no-undef
      grecaptcha.execute($('.google-recaptcha-key').html(), {
        action: 'updatepassword'
      }).then(function (token) {
        $('.g-recaptcha-token').val(token);
        var regex = new RegExp(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/);
        var password = $('#newPassword').val();
        var cnfPassword = $('#newPasswordConfirm').val();
        var $this = $('.confirm-password #newPasswordConfirm');

        if (password !== '') {
          if (password === cnfPassword) {
            if ($this.hasClass('is-invalid')) {
              $this.removeClass('is-invalid');
              $this.prev('label').removeClass('is-invalid');

              if ($this.next('span').hasClass('invalid')) {
                $this.next('span').removeClass('invalid').addClass('valid');
              }

              $this.parents('.form-group').find('.invalid-feedback').empty();
            }

            if (!regex.test(password)) {
              $('#newPassword').addClass('is-invalid');
            } else {
              $('form.password-reset-form').submit();
            }
          } else {
            $this.addClass('is-invalid');
            $this.prev('label').addClass('is-invalid');

            if ($this.next('span').length === 0) {
              $('<span></span>').insertAfter($this);
            }

            $this.next('span').addClass('invalid');

            if ($this.next('span').hasClass('valid')) {
              $this.next('span').removeClass('valid').addClass('invalid');
            }

            $this.parents('.form-group').find('.invalid-feedback').text($this.data('pattern-pwd-mismatch')).show();
          }
        } else {
          $('.password-condition').addClass('d-none');
        }
      });
    });
  });
};

base.phoneFocusKey = function () {
  $('body').on('focus keyup', '#registration-form-phone', function () {
    if ($(this).val() !== '') {
      $(this).prop('required', true);
    } else {
      $(this).prop('required', false);
    }
  });
};

base.validatePhoneNumber = function () {
  $('#registration-form-phone').on('blur', function () {
    if ($(this).val() !== '') {
      $(this).prop('required', true);
    } else if ($(this).hasClass('is-invalid')) {
      $(this).prop('required', false);
      $(this).removeClass('is-invalid');
      $(this).next('.invalid').remove();
      $(this).next('.valid').remove();
      $(this).next('label').removeClass('is-invalid');
    } else {
      $(this).prop('required', false);
      $(this).next('.invalid').remove();
      $(this).next('.valid').remove();
      $(this).next('label').removeClass('is-invalid');
    }
  });
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/main.js":
/*!********************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/main.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

window.jQuery = window.$ = __webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js");
window.slick = window.Slick = __webpack_require__(/*! slick-carousel/slick/slick */ "./node_modules/slick-carousel/slick/slick.js");
window.perfectScrollbar = __webpack_require__(/*! perfect-scrollbar/dist/perfect-scrollbar */ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js");
window.hoverintent = __webpack_require__(/*! hoverintent/dist/hoverintent.min */ "./node_modules/hoverintent/dist/hoverintent.min.js");
window.maskFun = __webpack_require__(/*! jquery-mask-plugin/dist/jquery.mask.min */ "./node_modules/jquery-mask-plugin/dist/jquery.mask.min.js");

__webpack_require__(/*! focus-visible/dist/focus-visible.min */ "./node_modules/focus-visible/dist/focus-visible.min.js");

var smoothscroll = __webpack_require__(/*! smoothscroll-polyfill */ "./node_modules/smoothscroll-polyfill/dist/smoothscroll.js");

var processInclude = __webpack_require__(/*! base/util */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/util.js");

var scrollDir = __webpack_require__(/*! ./util/scrollDirection */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/scrollDirection.js");

window.isTouchscreen = __webpack_require__(/*! core/util/isTouchscreen */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/isTouchscreen.js");
window.hbcSlider = __webpack_require__(/*! ./hbcSlider */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js");
$(document).ready(function () {
  processInclude(__webpack_require__(/*! core/util/loginPopup */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/util/loginPopup.js"));
  processInclude(__webpack_require__(/*! ./components/menu */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/menu.js"));
  processInclude(__webpack_require__(/*! ./components/header */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/header.js"));
  processInclude(__webpack_require__(/*! ./search/searchsuggestion */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/search/searchsuggestion.js"));
  processInclude(__webpack_require__(/*! ./components/refinementBar */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/refinementBar.js"));
  processInclude(__webpack_require__(/*! ./components/stickyColumnTop */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/stickyColumnTop.js"));
  processInclude(__webpack_require__(/*! base/components/cookie */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/cookie.js"));
  processInclude(__webpack_require__(/*! ./components/consentTracking */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/consentTracking.js"));
  processInclude(__webpack_require__(/*! ./components/commissionCookies */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/commissionCookies.js"));
  processInclude(__webpack_require__(/*! ./components/footer */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/footer.js"));
  processInclude(__webpack_require__(/*! ./components/miniCart */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/miniCart.js"));
  processInclude(__webpack_require__(/*! core/components/collapsibleItem */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/collapsibleItem.js"));
  processInclude(__webpack_require__(/*! core/components/clientSideValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js"));
  processInclude(__webpack_require__(/*! base/components/countrySelector */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/countrySelector.js"));
  processInclude(__webpack_require__(/*! base/components/toolTip */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/toolTip.js"));
  processInclude(__webpack_require__(/*! ./formFields/formFields */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/formFields/formFields.js"));
  processInclude(__webpack_require__(/*! ./hbcSlider */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js"));
  processInclude(__webpack_require__(/*! core/components/slot */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/slot.js"));
  processInclude(__webpack_require__(/*! ./components/welcomeemailSignUp */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/welcomeemailSignUp.js"));
  processInclude(__webpack_require__(/*! core/components/promo-tray-widget */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/promo-tray-widget.js"));
  processInclude(__webpack_require__(/*! ./components/designerIndex */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/components/designerIndex.js"));
  processInclude(__webpack_require__(/*! ./product/tileFocusManager */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/tileFocusManager.js")); //processInclude(require("./components/chanel"));

  processInclude(__webpack_require__(/*! ./giftcard/giftcard */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/giftcard/giftcard.js"));
  processInclude(__webpack_require__(/*! ./util/viewportHeightCalculator */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/viewportHeightCalculator.js"));

  if ($('input[name="isAtmEnabled"]').val() === 'true') {
    var atmHelper = __webpack_require__(/*! ./atm/atmHelper */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/atm/atmHelper.js");

    var adobeTagManger = __webpack_require__(/*! core/atm/atm */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/atm/atm.js");

    adobeTagManger(atmHelper);
  }

  smoothscroll.polyfill();
  scrollDir();
});

__webpack_require__(/*! base/thirdParty/bootstrap */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/thirdParty/bootstrap.js");

__webpack_require__(/*! base/components/spinner */ "../sfra/cartridges/app_storefront_base/cartridge/client/default/js/components/spinner.js");
/**
 * Extend jQuery selectors to allow for :focusable
 */


jQuery.extend(jQuery.expr[':'], {
  focusable: function focusable(el) {
    return $(el).is('a, button, :input, [tabindex]');
  }
});
jQuery.event.special.touchstart = {
  setup: function setup(_, ns, handle) {
    this.addEventListener('touchstart', handle, {
      passive: true
    });
  }
};
jQuery.event.special.touchend = {
  setup: function setup(_, ns, handle) {
    this.addEventListener('touchend', handle, {
      passive: true
    });
  }
};
jQuery.event.special.touchmove = {
  setup: function setup(_, ns, handle) {
    this.addEventListener('touchmove', handle, {
      passive: true
    });
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/base.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/base.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = __webpack_require__(/*! core/product/base */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/base.js");

var hbcSlider = __webpack_require__(/*! ../hbcSlider */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/hbcSlider.js");

var persistentWishlist = __webpack_require__(/*! core/product/persistentWishlist */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/persistentWishlist.js");

var formFields = __webpack_require__(/*! ../formFields/formFields */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/formFields/formFields.js");

var floatLabel = __webpack_require__(/*! core/floatLabel */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/floatLabel.js");

var clientSideValidation = __webpack_require__(/*! core/components/clientSideValidation */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/components/clientSideValidation.js");
/**
 * Retrieves the relevant pid value
 * @param {jquery} $el - DOM container for a given add to cart button
 * @return {string} - value to be used when adding product to cart
 */


base.getPidValue = function ($el) {
  var pid;

  if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {
    pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');
  } else if ($('#completeTheLookDrawer').hasClass('show')) {
    pid = $($el).closest('.complete-the-look').data('pid');
  } else if ($('.product-set-detail').length && $($el).closest('.product-detail').length && $($el).closest('.product-detail').data('pid') !== undefined || $('.product-set').length) {
    pid = $($el).closest('.product-detail').data('pid');
  } else if ($('.product-set').length) {
    pid = $($el).closest('.product-detail').find('.product-id').text();
  } else if ($el && $el.closest('.product-tile').length) {
    pid = $el.closest('.product').data('pid');
  } else {
    pid = $('.product-detail:not(".bundle-item")').data('pid');
  }

  return pid;
};
/**
 * Generates html for product attributes section
 *
 * @param {array} attributes - list of attributes
 * @return {string} - Compiled HTML
 */


function getAttributesHtml(attributes) {
  if (!attributes) {
    return '';
  }

  var html = '';
  attributes.forEach(function (attributeGroup) {
    if (attributeGroup.ID === 'mainAttributes') {
      attributeGroup.attributes.forEach(function (attribute) {
        html += '<div class="attribute-values">' + attribute.label + ': ' + attribute.value + '</div>';
      });
    }
  });
  return html;
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @return {string} - The provided URL to use when adding a product to the cart
 */


function getAddToCartUrl() {
  return $('.add-to-cart-url').val();
}
/**
 * Process the attribute values for an attribute that has image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 * @param {Object} msgs - object containing resource messages
 */


function processSwatchValues(attr, $productContainer, msgs) {
  var attrSelected = false;
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find('[data-attr="' + attr.id + '"] [data-attr-value="' + attrValue.value + '"]');
    $attrValue.attr('value', attrValue.url);
    var $swatchButton = $attrValue.parent();

    if (attrValue.selected) {
      $attrValue.addClass('selected');
      $swatchButton.addClass('selected');
      $attrValue.siblings('.selected-assistive-text').text(msgs.assistiveSelectedText);
      attrSelected = true;
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html(attr.attrDisplay); //Color dropdown update on change of color swatch

      if ($($attrValue).closest('.color-wrapper').length > 0 && $('.custom-color-dropdown').length > 0 && $('.select-color').length > 0) {
        $('.select-color option').each(function (i) {
          if ($(this).text().trim() === $($attrValue).html().trim()) {
            $(this).closest('.select-color').prop('selectedIndex', i);
            formFields.updateSelect();
          }
        });
      }
    } else {
      $attrValue.removeClass('selected');
      $swatchButton.removeClass('selected');
      $attrValue.siblings('.selected-assistive-text').empty();
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html(attr.attrDisplay);
    }

    if ($productContainer.find('.js-saks-newdesign').length > 0) {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayName').html(attr.displayName + ' ');
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayValue').html(attr.displayValue);
    } else {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html($('.edit_quickview_container').length > 0 ? attr.attrEditDisplay : attr.attrDisplay);
    }

    if (attrValue.url) {
      $swatchButton.attr('data-url', attrValue.url);
    } else {
      $swatchButton.removeAttr('data-url');
    } // Disable if not selectable


    $attrValue.removeClass('selectable unselectable');
    $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');
  });

  if (!attrSelected) {
    $productContainer.find('select.select-color').find('option:first').prop('selected', true).change();
  }
}
/**
 * Process attribute values associated with an attribute that does not have image swatches
 *
 * @param {Object} attr - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {Object[]} attr.values - Array of attribute value objects
 * @param {string} attr.values.value - Attribute coded value
 * @param {string} attr.values.url - URL to de/select an attribute value of the product
 * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be
 *     selected.  If there is no variant that corresponds to a specific combination of attribute
 *     values, an attribute may be disabled in the Product Detail Page
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function processNonSwatchValues(attr, $productContainer) {
  var $attr = '[data-attr="' + attr.id + '"]';
  var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');
  $defaultOption.attr('value', attr.resetUrl);
  $productContainer.find($('ul.' + attr.id + '-attribute').find('li[data-attr-value]')).removeAttr('selected');
  $productContainer.find('.attribute .' + attr.id + ' .attr-name .text2').remove();
  var sizeSelected = false;
  attr.values.forEach(function (attrValue) {
    var $attrValue = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]');

    if ($attrValue.length == 2) {
      // update 'option' values along with 'li'
      var $element = $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]' + 'option');

      if ($element.length > 0) {
        $attrValue.val(attrValue.url).removeAttr('disabled');
        $attrValue.attr('disabled', false);

        if (!attrValue.selectable) {
          $attrValue.attr('disabled', true);
        }

        if (attrValue.selected) {
          $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]' + 'option').attr('selected', 'selected');
          $productContainer.find('.attribute .' + attr.id + ' .attr-name').html(attr.attrDisplay);
          sizeSelected = true;
        }
      }
    }

    $attrValue.find('a').attr('href', attrValue.url).removeAttr('disabled');
    $attrValue.attr('disabled', false);

    if (!attrValue.selectable) {
      $attrValue.attr('disabled', true);
    }

    if (attrValue.selected) {
      $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]').attr('selected', 'selected');
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html(attr.attrDisplay);
    }

    if ($productContainer.find('.js-saks-newdesign').length > 0) {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayName').html(attr.displayName + ' ');
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').find('.attribute-displayValue').html(attr.displayValue);
    } else {
      $productContainer.find('.attribute .' + attr.id + ' .attr-name').html($('.edit_quickview_container').length > 0 ? attr.attrEditDisplay : attr.attrDisplay);
    }

    $productContainer.find($attr + ' [data-attr-value="' + attrValue.value + '"]').attr('data-selectableattribute', attrValue.selectable || !attrValue.selectable && attrValue.waitlist);
  });

  if (!sizeSelected) {
    $productContainer.find('.js-size-dropdown').prop('selectedIndex', 0);
  }
}
/**
 * Routes the handling of attribute processing depending on whether the attribute has image
 *     swatches or not
 *
 * @param {Object} attrs - Attribute
 * @param {string} attr.id - Attribute ID
 * @param {jQuery} $productContainer - DOM element for a given product
 * @param {Object} msgs - object containing resource messages
 */


function updateAttrs(attrs, $productContainer, msgs) {
  // Currently, the only attribute type that has image swatches is Color.
  var attrsWithSwatches = ['color', 'Design'];
  attrs.forEach(function (attr) {
    if (attrsWithSwatches.indexOf(attr.id) > -1) {
      processSwatchValues(attr, $productContainer, msgs);
    } else {
      processNonSwatchValues(attr, $productContainer);
    }
  });
}

function updateAttrsForMaster(attrs, $productContainer) {
  try {
    attrs.forEach(function (attr) {
      attr.values.forEach(function (attrValue) {
        var $attrValue = $productContainer.find('[data-attr="' + attr.id + '"] [data-attr-value="' + attrValue.value + '"]');
        $attrValue.attr('disabled', false);

        if (!attrValue.selectable) {
          $attrValue.attr('disabled', true);
        } // Disable if not selectable


        $attrValue.removeClass('selectable unselectable');
        $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');
      });
    });
  } catch (e) {}
}
/**
 * Retrieve contextual quantity selector
 * @param {jquery} $el - DOM container for the relevant quantity
 * @return {jquery} - quantity selector DOM container
 */


function getQuantitySelector($el) {
  return $el && $('.set-items').length ? $($el).closest('.product-detail').find('.quantity-select') : $('.quantity-select');
}
/**
 * Parses the html for a modal window
 * @param {string} html - representing the body and footer of the modal window
 *
 * @return {Object} - Object with properties body and footer.
 */


function parseHtml(html) {
  var $html = $('<div>').append($.parseHTML(html));
  var body = $html.find('.choice-of-bonus-product');
  var footer = $html.find('.modal-footer').children();
  return {
    body: body,
    footer: footer
  };
}
/**
 * Retrieves url to use when adding a product to the cart
 *
 * @param {Object} data - data object used to fill in dynamic portions of the html
 */


function chooseBonusProducts(data) {
  $('.modal-body').spinner().start();

  if ($('#chooseBonusProductModal').length !== 0) {
    $('#chooseBonusProductModal').remove();
  }

  var bonusUrl;

  if (data.bonusChoiceRuleBased) {
    bonusUrl = data.showProductsUrlRuleBased;
  } else {
    bonusUrl = data.showProductsUrlListBased;
  }

  var htmlString = '<!-- Modal -->' + '<div class="modal fade bonus-pdt" id="chooseBonusProductModal" tabindex="-1" role="dialog">' + '<span class="enter-message sr-only" ></span>' + '<div class="modal-dialog choose-bonus-product-dialog quick-view-dialog" ' + 'data-total-qty="' + data.maxBonusItems + '"' + 'data-UUID="' + data.uuid + '"' + 'data-pliUUID="' + data.pliUUID + '"' + 'data-addToCartUrl="' + data.addToCartUrl + '"' + 'data-pageStart="0"' + 'data-pageSize="' + data.pageSize + '"' + 'data-moreURL="' + data.showProductsUrlRuleBased + '"' + 'data-bonusChoiceRuleBased="' + data.bonusChoiceRuleBased + '">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '    <span class="gwp_header"> </span>' + '    <button type="button" class="close pull-right" data-dismiss="modal" aria-label="Close">' + '        <span aria-hidden="true" class="cancel-icon svg-36-avenue-Up_Copy svg-36-avenue-Up_Copy-dims"></span>' + '    </button>' + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('.modal-body').spinner().start();
  $.ajax({
    url: bonusUrl,
    method: 'GET',
    dataType: 'json',
    success: function success(response) {
      var parsedHtml = parseHtml(response.renderedTemplate);
      $('#chooseBonusProductModal .modal-body').empty();
      $('#chooseBonusProductModal .enter-message').text(response.enterDialogMessage);
      $('#chooseBonusProductModal .modal-header .close .sr-only').text(response.closeButtonText);
      $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);
      $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);
      $('#chooseBonusProductModal').modal('show');
      $.each(data.selectedBonusProducts, function (selProdIndex, selProd) {
        $('input[name="chooseBonusproductIds"][data-pid="' + selProd.pid + '"]').prop('checked', true);
      });
      $.spinner().stop();
    },
    error: function error() {
      $.spinner().stop();
    }
  });
}
/**
 * Retrieves the bundle product item ID's for the Controller to replace bundle master product
 * items with their selected variants
 *
 * @return {string[]} - List of selected bundle product item ID's
 */


function getChildProducts() {
  var childProducts = [];
  $('.bundle-item').each(function () {
    childProducts.push({
      pid: $(this).find('.product-id').text(),
      quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)
    });
  });
  return childProducts.length ? JSON.stringify(childProducts) : [];
}
/**
 * Retrieve product options
 *
 * @param {jQuery} $productContainer - DOM element for current product
 * @return {string} - Product options and their selected values
 */


function getOptions($productContainer) {
  var options = $productContainer.find('.product-option').map(function () {
    var $elOption = $(this).find('.options-select');
    var urlValue = $elOption.val();
    var selectedValueId = $elOption.find('option[value="' + urlValue + '"]').data('value-id');
    return {
      optionId: $(this).data('option-id'),
      selectedValueId: selectedValueId
    };
  }).toArray();
  return JSON.stringify(options);
}
/**
 * @param {Object} addToCartConfirmationModal popup after product added to cart
 */


function showAddToCartConfirmation(addToCartConfirmationModal) {
  if (!addToCartConfirmationModal) {
    return;
  }

  $('.product-added-to-cart-modal').remove();
  $('.menu-wrapper, .header').append(addToCartConfirmationModal);
  $('.product-added-to-cart-modal').show();
  setTimeout(function () {
    $('.product-added-to-cart-modal').hide();

    if ($('.prices-add-to-cart-actions').find('.add-to-cart').hasClass('ATC-addedToBag')) {
      $('.prices-add-to-cart-actions').find('.add-to-cart').removeClass('disabled').text($('.prices-add-to-cart-actions').find('.add-to-cart').attr('temp-btn-data')).removeClass('ATC-addedToBag');
    }
  }, 3000);

  if ($('.minicart .popover').is(':visible')) {
    $('.product-added-to-cart-modal.modal').hide();
  }
}
/**
 * Updates the Mini-Cart quantity value after the customer has pressed the "Add to Cart" button
 * @param {string} response - ajax response from clicking the add to cart button
 */


function handlePostCartAdd(response) {
  $('.minicart').trigger('count:update', response);
  var messageType = response.error ? 'alert-danger' : 'alert-success';

  if (!response.error && response.addToCartConfirmationModal) {
    $('body').find('.ATC-addedToBag').attr('temp-btn-data', $('body').find('.ATC-addedToBag').text());
    $('body').find('.ATC-addedToBag').addClass('disabled').text('ADDED TO BAG');

    if ($('.pg-name').length > 0 && $('.pg-name').val() === 'wishlist') {
      $('body').trigger('adobeTagManager:moveFavToBag', response);
    } else {
      $('body').trigger('adobeTagManager:addToBag', response);
    }

    showAddToCartConfirmation(response.addToCartConfirmationModal);
    return;
  } // don't show the error message in PLP (Product array)-SFDEV-7748


  if (response.sourcepage && response.sourcepage == 'pdp') {
    if ($('.add-to-cart-messages').length === 0) {
      $('.attribute.quantity').append('<div class="add-to-cart-messages"></div>');
    }

    if (response.message != '') {
      $('.add-to-cart-messages').html( // eslint-disable-next-line no-undef
      '<div class="error" role="alert">' + response.message + '</div>');
    }

    setTimeout(function () {
      $('.add-to-cart-messages .error').remove();
    }, 5000);
  }
}
/**
 * PDP Swipe detect function.
 *
 * @param {el} el - Element
 * @param {callback} callback - Callback
 **/


function swipeDetect(el, callback) {
  var touchsurface = el;
  var swipedir;
  var startX;
  var startY;
  var distX;
  var distY;
  var threshold = 50;
  var restraint = 100;
  var allowedTime = 300;
  var elapsedTime;
  var startTime;

  var handleswipe = callback || function () {};
  /**
   * PDP Event Down
   *
   * @param {event} event - event
   **/


  function eventDown(event) {
    swipedir = 'none';
    startTime = new Date().getTime();
    event.preventDefault();
  }
  /**
   * PDP Event Up
   *
   * @param {distXLoc} distXLoc - distX
   * @param {distYLoc} distYLoc - distY
   * @param {event} event - event
   **/


  function eventUp(distXLoc, distYLoc, event) {
    elapsedTime = new Date().getTime() - startTime;

    if (elapsedTime <= allowedTime) {
      if (Math.abs(distXLoc) >= threshold && Math.abs(distYLoc) <= restraint) {
        swipedir = distXLoc < 0 ? 'left' : 'right';
      } else if (Math.abs(distYLoc) >= threshold && Math.abs(distXLoc) <= restraint) {
        swipedir = distYLoc < 0 ? 'up' : 'down';
      }
    }

    handleswipe(swipedir);
    event.preventDefault();
  }

  touchsurface.addEventListener('mousedown', function (e) {
    startX = e.pageX;
    startY = e.pageY;
    eventDown(e);
  }, false);
  touchsurface.addEventListener('mousemove', function (e) {
    e.preventDefault();
  }, false);
  touchsurface.addEventListener('mouseup', function (e) {
    distX = e.pageX - startX;
    distY = e.pageY - startY;
    eventUp(distX, distY, e);
  }, false);
  touchsurface.addEventListener('touchstart', function (e) {
    var touchobj = e.changedTouches[0];
    startX = touchobj.pageX;
    startY = touchobj.pageY;
    eventDown(e);
  }, false);
  touchsurface.addEventListener('touchmove', function (e) {
    e.preventDefault();
  }, false);
  touchsurface.addEventListener('touchend', function (e) {
    var touchobj = e.changedTouches[0];
    distX = touchobj.pageX - startX;
    distY = touchobj.pageY - startY;
    eventUp(distX, distY, e);
  }, false);
}
/* Color swatch Slick needs no get Reinitialized on window Resize after it was destroyed */


$(window).on('load resize orientationchange', function () {
  $('.color-wrapper').each(function () {
    var $colorwrapper = $(this);
    /* Initializes a slick carousel only on mobile screens */

    /* slick on mobile */

    if ($(window).width() > 767) {
      if ($colorwrapper.hasClass('slick-initialized')) {
        $colorwrapper.slick('unslick');
      }
    } else {
      if (!$colorwrapper.hasClass('slick-initialized')) {
        $colorwrapper.slick({
          dots: false,
          infinite: false,
          slidesToShow: 7.5,
          slidesToScroll: 7.5,
          mobileFirst: true,
          arrows: false,
          autoplay: false
        });
      }
    }
  });
});
/**
 * PDP play select video player
 *
 * @param {pid} pid - Product id
 **/

var playVideoPlayer = function playVideoPlayer(pid) {
  $('.s7videoplayer .s7iconeffect').trigger('click');
};

base.playVideoPlayer = playVideoPlayer;
/**
 * PDP activate video player
 *
 **/

var activateVideoPlayer = function activateVideoPlayer() {
  if ($('.enablePDPVideoPlayer').length > 0) {
    $('.s7-viewer-video').empty();
    var serverUrl = $('.product-detail').find('div.pdp-carousel').data('scene7hosturl');
    var videoserverUrl = $('.product-detail').find('div.pdp-carousel').data('scene7videohosturl');
    var asset;
    var image;
    var params = {};
    var videoAsset;

    if ($('.product-detail').find('.thumb-nail.video-player').length > 0) {
      image = $('.product-detail').find('.thumb-nail.video-player').find('img').attr('src').split('image/'); // eslint-disable-line

      asset = image[image.length - 1];

      if (asset && asset.length > 0) {
        var videoPath = asset.split('/');
        var videoPathAsset;

        if (videoPath[1].length > 0) {
          videoPathAsset = videoPath[1].split('?');

          if (videoPathAsset[0].length > 0) {
            videoAsset = videoPath[0] + '/' + videoPathAsset[0];
          } else {
            videoAsset = videoPath[0] + '/' + videoPath[1];
          }
        } else {
          videoAsset = videoPath[0] + '/' + videoPath[1];
        }
      }

      params.asset = videoAsset;
      params.serverurl = serverUrl;
      params.videoserverUrl = videoserverUrl;
      console.log('s7 viewer params from saks: ', params, $(this).attr('id'));
      $('.s7-viewer-video').each(function () {
        new s7viewers.VideoViewer({
          // eslint-disable-line
          containerId: $(this).attr('id'),
          // eslint-disable-line
          params: params // eslint-disable-line

        }).init(); // eslint-disable-line
      });
    }
  }
};

base.activateVideoPlayer = activateVideoPlayer;
/**
 * PDP primary function slider functionality
 *
 * @param {jquery} slider - slider jquery element
 **/

var activatePrimarySlick = function activatePrimarySlick(slider) {
  var primaryImg = '.primary-images-container .primary-images';

  if ($('.product-detail').hasClass('product-set-detail')) {
    hbcSlider.hbcSliderInit('primary-images-set', slider);
  } else if ($('.product-detail').hasClass('product-quickview')) {
    hbcSlider.hbcSliderInit('quick-view-images');
  } else {
    hbcSlider.hbcSliderInit('primary-images');
  }

  $(primaryImg).on('afterChange', function () {
    $(this).find('.primary-image').removeClass('active');
    $(this).find('.slick-active .primary-image').addClass('active');

    if ($(this).find('.slick-current').find('.video-place-holder').is('.video-place-holder')) {
      $(this).next('.s7-viewer-video').addClass('active');
    } else {
      $(this).next('.s7-viewer-video').removeClass('active');
    }

    if ($(this).parents('.primary-images-wrapper').find('.s7playpausebutton[aria-label="Pause"]').length > 0 && (window.innerWidth < 1024 || $('.product-detail').hasClass('product-set-detail') || $('.product-detail').hasClass('product-quickview'))) {
      $(this).parents('.primary-images-wrapper').find('.s7playpausebutton[aria-label="Pause"]').trigger('click');
    }
  });
};

base.activatePrimarySlick = activatePrimarySlick;
/**
 * PDP create carousel functionality
 *
 * @param {imgs} imgs - Object of image details
 * @param {containerDetails} $productContainer - Container Details
 **/

var createCarousel = function createCarousel(imgs, $productContainer, video) {
  var $carousel = $productContainer.find('.pdp-carousel');
  var isQuickView = $productContainer.is('.product-quickview');
  var $primaryThumb = $carousel.find('.primary-thumbnails');
  var $primaryImage = $carousel.find('.primary-images');
  var $zoomWindowThumb = $productContainer.find('.zoom-thumbnails');
  var primaryThumbData = '';
  var primaryImageData = '';
  var zoomWindowThumbData = '';
  var s7ProductID = '';

  if ($('#s7Modal').length > 0) {
    s7ProductID = $('#s7Modal').data('productid');
  }

  for (var i = 0; i < imgs.length; i++) {
    primaryThumbData = primaryThumbData + '<li class="primary-thumbnail"><a href="#primary-image-' + i + '" class="thumb-nail d-lg-block"><img loading="lazy" src="' + imgs[i].url + '" class="d-block img-fluid" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></a></li>';

    if (isQuickView) {
      primaryImageData = primaryImageData + '<div id="primary-image-' + i + '" data-index="' + i + '" class="primary-image"><img loading="lazy" src="' + imgs[i].url + '" class="d-block img-fluid primary-image-img" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /><div id="s7viewer-qv-' + i + '" class="s7-viewer-qv"></div></div>';
    } else {
      primaryImageData = primaryImageData + '<div id="primary-image-' + i + '" data-index="' + i + '" class="primary-image"><img loading="lazy" src="' + imgs[i].url + '" class="d-block img-fluid primary-image-img" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></div>';
    }

    zoomWindowThumbData = zoomWindowThumbData + '<div class="thumb-nail"><img loading="lazy" src="' + imgs[i].url + '" class="d-block img-fluid" alt="' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '" title="' + imgs[i].title + '" itemprop="image" /></div>';
  }

  if (video) {
    for (var i = 0; i < video.length; i++) {
      if (video[i].url.indexOf('noimage') == -1) {
        primaryThumbData = primaryThumbData + '<li class="primary-thumbnail"><a href="#s7viewer-video-' + s7ProductID + '" class="thumb-nail d-lg-block video-player"><img loading="lazy" src="' + video[i].url + '" class="d-block img-fluid" alt="' + video[i].alt + ' image number ' + parseInt(video[i].index, 10) + '" title="' + video[i].title + '" itemprop="image" /><span class="video-player-bg"></span></a>';
        primaryImageData = primaryImageData + '<div id="s7viewer-video-' + s7ProductID + '" class="s7-viewer-video"></div>';
      }
    }
  }

  if ($primaryThumb.hasClass('slick-initialized')) {
    $primaryThumb.slick('unslick');
  }

  $primaryThumb.empty().append(primaryThumbData).find('.thumb-nail').first().addClass('active');

  if (imgs && imgs.length == 1) {
    $primaryThumb.find('.thumb-nail').first().addClass('d-none');
  }

  if ($primaryImage.hasClass('slick-initialized')) {
    $primaryImage.slick('unslick');
    $('.s7-viewer-video').empty();
  }

  $primaryImage.empty().append(primaryImageData).find('.primary-image').first().addClass('active');
  activatePrimarySlick($primaryImage);

  if ($zoomWindowThumb.hasClass('slick-initialized')) {
    $zoomWindowThumb.slick('unslick');
  }

  $zoomWindowThumb.empty().append(zoomWindowThumbData).find('.thumb-nail').first().addClass('active');
};

base.createCarousel = createCarousel;
/**
 * Updates the availability status in the Product Detail Page
 *
 * @param {Object} response - Ajax response object after an
 *                            attribute value has been [de]selected
 * @param {jQuery} $productContainer - DOM element for a given product
 */

function updateAvailability(response, $productContainer, callback) {
  var availabilityValue = '';
  var availabilityMessages = response.product.availability.messages;
  var availabilityUrl = response.availabilityUrl;

  if (!response.product.readyToOrder) {
    availabilityValue = '<li><div>' + response.resources.info_selectforstock + '</div></li>';
  } else {
    var qtyValue = $('.quantity-val', $productContainer).data('oldValue');

    if (isNaN(qtyValue)) {
      qtyValue = 1;
    }

    availabilityMessages.forEach(function (message) {
      if (response.product.available && response.product.availability.isAboveThresholdLevel) {
        var colorStyle = response.product.availability.hexColorCode;

        if (colorStyle) {
          colorStyle = 'style=color:' + colorStyle;
        }

        availabilityValue += '<li><div ' + colorStyle + '>' + message + '</div></li>';
      }

      if (!response.product.available || !response.product.availability.isAboveThresholdLevel) {
        if (message != '') {
          if ($('.add-to-cart-messages').length === 0) {
            $('.attribute.quantity').append('<div class="add-to-cart-messages"></div>');
            $('.add-to-cart-messages').html('<div class="error" role="alert">' + message + '</div>');
            setTimeout(function () {
              $('.add-to-cart-messages .error').remove();
            }, 3000);
          } else {
            $('.add-to-cart-messages').html('<div class="error" role="alert">' + message + '</div>');
            setTimeout(function () {
              $('.add-to-cart-messages .error').remove();
            }, 3000);
          }
        }
      }
    });
    $('button.add-to-cart, button.add-to-cart-global', $productContainer).data('producttype', response.product.productType);
    $productContainer.find('.product-availability .purchaselimit').empty();

    if (response.product.orderableNotInPurchaselimit && response.product.readyToOrder && !response.product.availability.isInPurchaselimit) {
      $productContainer.find('.product-availability .purchaselimit').html(response.product.availability.isInPurchaselimitMessage);
      $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
      var formData = {};
      formData.errorFields = [response.product.availability.isInPurchaselimitMessage];
      formData.formName = 'Add to Cart';
      $('body').trigger('adobeTagManager:formError', formData);

      if (response.product.purchaselimit) {
        qtyValue = response.product.purchaselimit;
      }

      $('.quantity-val', $productContainer).val(qtyValue);
    } else {
      if (!response.product.available) {
        if (response.product.availability.ats > 0) {
          $('.quantity-val', $productContainer).val(response.product.availability.ats);
          $('.quantity-select').val(response.product.availability.ats).trigger('change');
          response.product.available = true;
          $('button.add-to-cart, button.add-to-cart-global', $productContainer).text(response.resources.addtobag);
        }

        $productContainer.find('.product-availability .purchaselimit').html(response.product.availability.outofstockmessage);
      }

      $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !response.product.available);
    }
  }

  $($productContainer).trigger('product:updateAvailability', {
    product: response.product,
    $productContainer: $productContainer,
    message: availabilityValue,
    resources: response.resources
  });
  callback();
}
/**
 * Get Error fields
 */


function getErrorFields() {
  if (!$('.adobelaunch__colorlink.selected').length && $('.adobelaunch__colorlink').length != 1) {
    // return $('.adobelaunch__colorlink').closest('div[data-attr]').data('attr');
    return $('.adobelaunch__colorlink').closest('div[data-attr]').data('attr');
  }

  if (!$('.adobelaunch__sizelink.selected').length && $('.adobelaunch__sizelink').length != 1) {
    // return $('.adobelaunch__sizelink').closest('div[data-attr]').data('attr');
    return $('.adobelaunch__sizelink').closest('div[data-attr]').data('attr');
  }

  return '';
}
/**
 * Parses JSON from Ajax call made whenever an attribute value is [de]selected
 * @param {Object} response - response from Ajax call
 * @param {Object} response.product - Product object
 * @param {string} response.product.id - Product ID
 * @param {Object[]} response.product.variationAttributes - Product attributes
 * @param {Object[]} response.product.images - Product images
 * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required
 *     attributes have been selected.  Used partially to
 *     determine whether the Add to Cart button can be enabled
 * @param {jQuery} $productContainer - DOM element for a given product.
 */


function handleVariantResponse(response, $productContainer, callback) {
  var isChoiceOfBonusProducts = $productContainer.parents('.choose-bonus-product-dialog').length > 0;
  var isVaraint;

  if ($productContainer.length && response.product.variationAttributes) {
    updateAttrs(response.product.variationAttributes, $productContainer, response.resources);
    isVaraint = response.product.productType === 'variant';

    if (isChoiceOfBonusProducts && isVaraint) {
      $productContainer.parent('.bonus-product-item').data('pid', response.product.id);
      $productContainer.parent('.bonus-product-item').data('ready-to-order', response.product.readyToOrder);
    }
  }

  var dialog = $($productContainer).closest('.quick-view-dialog'); // update to add to cart buttons

  $('button.add-to-cart').data('readytoorder', response.product.readyToOrder && response.product.available);
  $('button.add-to-cart').data('readytoordertext', response.product.readyToOrderMsg);
  var sDiv = $('<div class="col-12 select-size-div">');
  sDiv.attr('aria-describedby', getErrorFields());
  sDiv.html(response.product.readyToOrderMsg);
  $('button.add-to-cart-global', dialog).attr('data-addwl-pid', response.product.id);
  $('button.add-to-cart-global', dialog).attr('data-readytoorder', response.product.readyToOrder && response.product.available);
  $('button.add-to-cart-global', dialog).attr('data-readytoordertext', response.product.readyToOrderMsg);
  $('.select-size-color', dialog).html(sDiv);
  $('button.update-cart-product-global', dialog).data('readytoorder', response.product.readyToOrder && response.product.available);
  $('button.update-cart-product-global', dialog).data('readytoordertext', response.product.readyToOrderMsg);
  $('.select-size-color', dialog).html(sDiv); // Update primary images

  var primaryImageUrls = response.product.images.large;
  var videoUrls = response.product.images.video;

  if (videoUrls) {
    createCarousel(primaryImageUrls, $productContainer, videoUrls);
    activateVideoPlayer();
  } else {
    createCarousel(primaryImageUrls, $productContainer);
  } // Update pricing


  if (!isChoiceOfBonusProducts) {
    var $priceSelector = $('.prices .price', $productContainer).length ? $('.prices .price', $productContainer) : $('.prices .price');
    $priceSelector.html(response.product.price.html);
  } // Update promotions


  if (response.product.promotionalPricing && response.product.promotionalPricing.isPromotionalPrice && response.product.promotionalPricing.promoMessage !== '') {
    $('.promotion-pricing', $productContainer).empty().html(response.product.promotionalPricing.priceHtml);
    $('.promotion-pricing', $productContainer).removeClass('d-none');
    $('.promotions', $productContainer).addClass('d-none');
  } else {
    $('.promotion-pricing', $productContainer).addClass('d-none');
    $('.promotions', $productContainer).removeClass('d-none');
    $('.promotions', $productContainer).empty().html(response.product.promotionsHtml);
  }

  updateAvailability(response, $productContainer, callback);
  persistentWishlist.makrSingleProductWishlisted(response.product.id, $productContainer);

  if (isChoiceOfBonusProducts) {
    var $selectButton = $productContainer.find('.select-bonus-product');
    $selectButton.trigger('bonusproduct:updateSelectButton', {
      product: response.product,
      $productContainer: $productContainer
    });
  } else {
    // Enable "Add to Cart" button if all required attributes have been selected
    // eslint-disable-next-line no-lonely-if
    if ($('.page').data('producttype') === 'set') {
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global', $productContainer).trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }).trigger('product:statusUpdate', response.product);
    } else {
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }).trigger('product:statusUpdate', response.product);
    }
  }

  if (response.product.readyToOrderMsg === '') {
    $('.select-size-color').empty();
  } // Update attributes


  $productContainer.find('.main-attributes').empty().html(getAttributesHtml(response.product.attributes));
}
/**
 * Updates DOM using post-option selection Ajax response
 *
 * @param {OptionSelectionResponse} options - Ajax response options from selecting a product option
 * @param {jQuery} $productContainer - DOM element for current product
 */


function updateOptions(options, $productContainer) {
  options.forEach(function (option) {
    var $optionEl = $productContainer.find('.product-option[data-option-id*="' + option.id + '"]');
    option.values.forEach(function (value) {
      var valueEl = $optionEl.find('option[data-value-id*="' + value.id + '"]');
      valueEl.val(value.url);
    });
  });
}
/**
 * Updates the quantity DOM elements post Ajax call
 * @param {UpdatedQuantity[]} quantities -
 * @param {jQuery} $productContainer - DOM container for a given product
 */


function updateQuantities(quantities, $productContainer) {
  if (!($productContainer.parent('.bonus-product-item').length > 0)) {
    var optionsHtml = quantities.map(function (quantity) {
      var selected = quantity.selected ? ' selected ' : '';
      return '<option value="' + quantity.value + '"  data-url="' + quantity.url + '"' + selected + '>' + quantity.value + '</option>';
    }).join('');
    getQuantitySelector($productContainer).empty().html(optionsHtml);
  }
}
/**
 * Show basket limit messaging mmodal
 */


$('body').on('triggerBasketLimitMsgModal', function () {
  if ($('#pliLimitMessagingModal').length > 0) {
    $('#pliLimitMessagingModal').modal('show');
  }
});
/**
 * Updates the product shipping option DOM elements post Ajax call
 * @param {UpdatedQuantity[]} data - response of an Ajax
 * @param {jQuery} $productContainer - DOM container for a given product
 */

base.updateShippingOptions = function (data, $productContainer, updateVariantEvent) {
  var $storeDataElement = $productContainer.find('.shipping-option');
  var product = data.product;

  if (data && data.isBopisEnabled && $storeDataElement.length > 0) {
    // update add to cart button name
    if ($('.shipping-option[data-addtobag-text]').length > 0 && data.product && data.product.availability) {
      $('.shipping-option[data-addtobag-text]').data('addtobag-text', data.product.availability.preorderButtonName || data.product.availability.buttonName);
    } // show elements if bopis is enabled


    $storeDataElement.find('.product-pis').removeClass('change-store');
    $storeDataElement.show(); // update store id in DOM

    if (data.storeInfo) {
      $storeDataElement.find('input.product-pis').attr('data-store-id', data.storeInfo.ID);
    } // update store name


    if ($('a.change-store').length > 0) {
      $storeDataElement.find('.product-pis').removeClass('change-store');

      if (data.storeInfo && data.storeInfo.name) {
        $('a.change-store').text(data.storeInfo.name.toLowerCase());
      }
    } // set add to bag button text


    var selectedValue = $storeDataElement.find('input[name=shipto]:checked').val();
    var addToStoreText = $storeDataElement.data('addtostore-text');
    var addToCartButton = $storeDataElement.closest('.product-detail').find('.add-to-cart');

    if (addToStoreText !== undefined && addToStoreText.length && addToStoreText !== '') {
      if (selectedValue === 'instore') {
        addToCartButton.html(addToStoreText);
      }
    }

    if (product.productType !== 'variant') {
      // product is a master
      $storeDataElement.find('input[value=shipto]').trigger('click');
    } else if (!data.storeInfo) {
      $storeDataElement.find('.product-pis').addClass('change-store');
      $storeDataElement.find('input[value=instore]').removeAttr('disabled');
      $storeDataElement.find('input[value=shipto]').trigger('click');
    } else if (data.storeInfo && (data.storeInfo.unitsAtStores === 0 || data.storeInfo.unitsAtStores < product.selectedQuantity)) {
      // product is variant and units are unavailable
      if (data.notavailableMsg) {
        $storeDataElement.find('input[value=instore]').siblings('label').find('.main-label').html(data.notavailableMsg);
        $storeDataElement.find('input[value=instore]').attr('disabled', 'disabled');
        $storeDataElement.find('input[value=shipto]').trigger('click');
      }
    } else if (data.storeInfo && data.storeInfo.unitsAtStores > 0 && data.storeInfo.unitsAtStores >= product.selectedQuantity) {
      if (data.availableMsg) {
        $storeDataElement.find('input[value=instore]').siblings('label').find('.main-label').html(data.availableMsg);
        $storeDataElement.find('input[value=instore]').removeAttr('disabled');

        if (!updateVariantEvent) {
          $storeDataElement.find('input[value=instore]').trigger('click');
        }
      }
    }
  } else {
    // hide elements if bopis is disabled
    $storeDataElement.hide();
  }
};
/**
 * Updates the product shipping option DOM elements post Ajax call
 * @param {UpdatedQuantity[]} data - response of an Ajax
 * @param {jQuery} $productContainer - DOM container for a given product
 */


base.updateSDDInfo = function (data, $productContainer) {
  var $storeDataElement = $productContainer.find('.shipping-option');
  var product = data.product;

  if (data && data.isEnabledforSameDayDelivery && data.isAvailableForSDD && $storeDataElement.length > 0) {
    var selectedValue = $storeDataElement.find('input[name=shipto]:checked').val();

    if (selectedValue === 'shipto' && data.sddStore && data.sddStore.pdpSDDAvailabilityMessage) {
      if (product.productType && product.productType !== 'variant') {
        var varAttrs = ['color', 'size'];
        var slectedAttr = [];
        $('.zip-information .available-messaging').removeClass('d-none');

        if (data.product && data.product.variationAttributes && data.product.variationAttributes.length > 0) {
          var sizeSelected = data.product.variationAttributes.forEach(function (attr) {
            attr.values.forEach(function (attrValue) {
              if (attrValue.selected) {
                slectedAttr.push(attr.id);
              }
            });
          });

          if (varAttrs.length > 0 && slectedAttr.length > 0) {
            varAttrs = varAttrs.filter(function (el) {
              return slectedAttr.indexOf(el) < 0;
            });
          }
        }

        if (varAttrs.length > 0 && slectedAttr.length > 0) {
          var sddMsg = $('.zip-information .available-messaging').find('span.variation-msg').html();
          sddMsg = sddMsg.replace(slectedAttr[0], varAttrs[0]);
          $('.zip-information .available-messaging').find('span.variation-msg').html(sddMsg).removeClass('d-none');
        } else {
          $('.zip-information .available-messaging').find('span.variation-msg').removeClass('d-none');
        }

        $('.zip-information .available-messaging').find('span.server-msg').html('');
      } else if (product.productType && product.productType === 'variant') {
        $('.zip-information .available-messaging').removeClass('d-none');
        $('.zip-information .available-messaging').find('span.variation-msg').addClass('d-none');
        $('.zip-information .available-messaging').find('span.server-msg').html(data.sddStore.pdpSDDAvailabilityMessage);
      }
    }
  }
};

base.preOrderBadge = function (product, productContainer) {
  if (product.preOrder && product.preOrder.applicable && product.preOrder.applicable === true) {
    productContainer.find('.edit-cart-preorder-badge').empty().text(product.preOrder.preorderButtonName);
  } else {
    productContainer.find('.edit-cart-preorder-badge').empty();
  }
};
/**
 *
 * @param {string} selectedValueUrl attribute URL
 * @param {Object} $productContainer product Detail container
 */


function attributeSelect(selectedValueUrl, $productContainer) {
  if ($productContainer.length && selectedValueUrl) {
    $('body').trigger('product:beforeAttributeSelect', {
      url: selectedValueUrl,
      container: $productContainer
    });
    $.ajax({
      url: selectedValueUrl,
      method: 'GET',
      success: function success(data) {
        handleVariantResponse(data, $productContainer, function () {
          updateOptions(data.product.options, $productContainer);
          updateQuantities(data.product.quantities, $productContainer); // update shipping option elements

          base.updateShippingOptions(data, $productContainer, true);
          base.updateSDDInfo(data, $productContainer);
          base.preOrderBadge(data.product, $productContainer);

          if (data.product && data.product.badge && data.product.badge.isFinalSale) {
            $('div.final-sale-message', $productContainer).removeClass('d-none');
          } else {
            $('div.final-sale-message', $productContainer).addClass('d-none');
          }

          try {
            var price = data.product.price.sales.value;
            var multiplier = $('.product-earn-points-message').data('multiplier');
            var points = Math.ceil(Number(price) * Number(multiplier));

            if (!isNaN(points) && points > 0) {
              $('.saks-points').empty().html(points);
            }
          } catch (e) {}

          if ($('form.waitlistForm').is(':visible')) {
            floatLabel.resetFloatLabel();
            $('form.waitlistForm').find('input:visible').each(function () {
              if ($(this).val() !== '') {
                clientSideValidation.validateFormonBlur.call(this);
              }
            });
          } // update hudson reward point only for bay site


          if (data.product && data.product.hudsonPoint) {
            $('.product-detail').find('.reward-est-point').html(data.product.hudsonPoint);
          }

          $.spinner().stop();
          $('body').trigger('product:afterAttributeSelect', {
            data: data,
            container: $productContainer
          });
        });
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  }
}

base.colorAttribute = function () {
  $(document).on('click', '[data-attr="color"] button, [data-attr="color"] .slick-slide div button , [data-attr="Design"] button', function (e) {
    e.preventDefault();

    if ($(this).attr('disabled')) {
      return;
    }

    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    } // If Color Swatch Dropdown is enabled


    if ($(this).closest('.js-color-swatch-wrapper').length > 0 && $(this).closest('.js-color-swatch-wrapper').find('select.select-color').length > 0) {
      var url = $(this).attr('data-url');
      var $option = $(this).closest('div.js-color-swatch-wrapper').find('.select-color').find('option[value="' + url + '"]');

      if ($option.length > 0) {
        $option.prop('selected', true).change();
      }
    } else {
      attributeSelect($(this).attr('data-url'), $productContainer);
    }
  });
  $(document).on('change', 'select[class*="select-"], .options-select', function (e) {
    e.preventDefault();
    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    }

    attributeSelect(e.currentTarget.value, $productContainer);
  });
};

base.selectAttribute = function () {
  $(document).on('click', 'li[data-attr-value] a', function (e) {
    e.preventDefault();
    var $productContainer = $(this).closest('.set-item');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.product-detail');
    }

    if ($(this).parent('li').length > 0 && $(this).parent('li').attr('selected') === 'selected') {
      return false;
    }

    attributeSelect($(this).attr('href'), $productContainer);
  });
};

base.availability = function () {
  $(document).off('change', '.quantity-select');
  $(document).on('change', '.quantity-select', function (e) {
    e.preventDefault(); // clear error message

    $('.cart-error').html('');
    var $productContainer = $(this).closest('.product-detail');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.modal-content').find('.product-quickview');
    }

    if ($('.bundle-items', $productContainer).length === 0) {
      attributeSelect($(e.currentTarget).find('option:selected').data('url'), $productContainer);
    }
  });
};

base.initQuantity = function () {
  $('body').on('click', '.btn-number', function (e) {
    e.preventDefault();
    $('.cart-error').html('');
    var fieldName = $(this).attr('data-field');
    var type = $(this).attr('data-type');
    var input = $(this).closest('div').find('input[name="' + fieldName + '"]');
    var currentVal = parseInt(input.val(), 10);

    if (!isNaN(currentVal)) {
      if (type === 'minus') {
        if (currentVal === 1 && $(this).closest('.mini-cart-container, .cart-page-content').length > 0) {
          input.val(currentVal - 1);
          $(this).trigger('cart:removeitem', {
            uuid: input.data('uuid'),
            pid: input.data('pid'),
            url: input.data('remove-action')
          });
        } else {
          if (currentVal > parseInt(input.attr('min'), 10)) {
            input.val(currentVal - 1).change();
          }

          if (parseInt(input.val(), 10) === parseInt(input.attr('min'), 10)) {
            $(this).attr('disabled', true);
          }
        }

        if ($(this).attr('disabled') !== 'disabled') {
          $(this).closest('.quantity-field').find('.input-number').addClass('active-border');
        }
      } else if (type === 'plus') {
        input.val(currentVal + 1).change();

        if (parseInt(input.val(), 10) === parseInt(input.attr('max'), 10)) {
          $(this).attr('disabled', true);
        }

        if ($(this).attr('disabled') !== 'disabled') {
          $(this).closest('.quantity-field').find('.input-number').addClass('active-border');
        }
      }
    } else {
      input.val(1);
    }
  });
  $('body').on('blur', '.btn-number', function (e) {
    if ($('.input-number').hasClass('active-border')) {
      $('.input-number').removeClass('active-border');
    }
  });
  $('body').on('mouseenter focusin', '.input-number', function () {
    $(this).data('oldValue', $(this).val());
  });
  $('body').on('change', '.input-number', function () {
    // clear error message
    $('.cart-error').html('');
    var minValue = parseInt($(this).attr('min'), 10);
    var maxValue = parseInt($(this).attr('max'), 10);
    var valueCurrent = parseInt($(this).val(), 10);
    var name = $(this).attr('name');

    if (valueCurrent >= minValue) {
      $(this).closest('div').find(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
    } else {
      $(this).val($(this).data('oldValue'));
    }

    if (valueCurrent <= maxValue) {
      $(this).closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled'); // eslint-disable-line
    }

    if (valueCurrent === 1) {
      $(this).closest('div').find(".btn-number[data-type='minus'][data-field='" + name + "']").attr('disabled', true); // eslint-disable-line
    } else if (valueCurrent === maxValue) {
      $(this).closest('div').find(".btn-number[data-type='plus'][data-field='" + name + "']").attr('disabled', true); // eslint-disable-line
    } // update Drop Down


    var currentQty = parseInt($(this).val(), 10);
    $(this).closest('div').find('select[class*="quantity-select"]').val(currentQty).trigger('change');
  });
  $('body').on('keydown', '.input-number', function (e) {
    // Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 || // Allow: Ctrl+A
    e.keyCode === 65 && e.ctrlKey === true || // Allow: home, end, left, right
    e.keyCode >= 35 && e.keyCode <= 39) {
      // let it happen, don't do anything
      return;
    } // Ensure that it is a number and stop the keypress


    if ((e.shiftKey || e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105)) {
      e.preventDefault();
    }
  });
  $('body .quantity-val').on('input', function () {
    var element = $(this);
    var maxValue = parseInt($(this).attr('max'), 10);

    if (element.val() >= maxValue) {
      $('.cart-error').html('');
      $(this).val(maxValue);
      $(this).closest('div').find('select[class*="quantity-select"]').val(maxValue).trigger('change');
      element.prev('span').find('button').removeAttr('disabled');
    }
  });
};

base.addToCart = function () {
  $(document).on('click', 'button.add-to-cart, button.add-to-cart-global, button.prdt_tile_btn', function () {
    var addToCartUrl;
    var pid;
    var pidsObj;
    var setPids;
    var sourceage = $(this).data('sourcepage');
    var atcOnTile = $(this).data('view');
    var $productTile = $(this).closest('.product-tile');
    var $productDetail = $(this).closest('.product-detail');
    var $selectSizeColor = $productDetail.find('.select-size-color');
    var wlRemoveUrl = $productTile.find('.removefromwl').val();

    if (atcOnTile === 'tile') {
      var selectASize = $(this).data('selectsizemsg');
      var addToCarLabel = $(this).data('add-to-cart-label');
      $productTile.find('button.prdt_tile_btn').text(selectASize);
      $productTile.find('button.prdt_tile_btn').addClass('soldout').addClass('disabled');
      setTimeout(function () {
        $productTile.find('button.prdt_tile_btn').text(addToCarLabel); // eslint-disable-line

        $productTile.find('button.prdt_tile_btn').removeClass('soldout').removeClass('disabled'); // eslint-disable-line
      }, 3000);
    }

    var isReadyToOrder = $(this).data('readytoorder');
    $selectSizeColor.empty();

    if (!isReadyToOrder) {
      var formData = {};
      formData.errorFields = ['no variant selected'];
      formData.formName = 'Add to Cart';
      $('body').trigger('adobeTagManager:formError', formData);
      var sDiv = $('<div class="col-12 select-size-div" tabindex="0">');
      sDiv.html($(this).data('readytoordertext'));

      if ($('#missedattrSelection-ADA').length) {
        $('#missedattrSelection-ADA').html('Please select ' + getErrorFields() + ' to proceed');
      }

      $selectSizeColor.html(sDiv);

      if ($('.page').data('producttype') !== 'set') {
        $('.select-size-color').closest('.product-detail').find('.select-size-div').focus();
        $('.select-size-color').closest('.product-detail').find('.select-size-div').on('keydown', function (e) {
          if (e.which === 9 && !e.shiftKey) {
            e.preventDefault();

            if (getErrorFields() == 'size') {
              $(this).closest('.attributes').find('div[data-attr=' + getErrorFields() + ']').find('.attribute ul li a')[0].focus();
            } else if (getErrorFields() == 'color') {
              $(this).closest('.attributes').find('div[data-attr=' + getErrorFields() + ']').find('.attribute ul li button')[0].focus();
            }
          }
        });
      }

      if ($productTile.length > 0 || !($(this).data('producttype') != 'master')) {
        // eslint-disable-line
        // if the product is not a variant
        // do not attempt ajax call for atc. To reduce unnecessary
        return;
      } // If Product is not ready to Order,


      return;
    }

    $('body').trigger('product:beforeAddToCart', this);

    if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {
      setPids = [];
      $('.product-detail').each(function () {
        if (!$(this).hasClass('product-set-detail')) {
          setPids.push({
            pid: $(this).find('.product-id').text(),
            qty: $(this).find('.quantity-select').val(),
            options: getOptions($(this))
          });
        }
      });
      pidsObj = JSON.stringify(setPids);
    }

    pid = base.getPidValue($(this));

    if ((wlRemoveUrl === null || wlRemoveUrl === undefined) && $(this).closest('.product-quickview').length > 0) {
      var pidData = '?pid=' + pid;
      wlRemoveUrl = $(this).closest('.product-quickview').find('.removefromwlQV').length > 0 ? $(this).closest('.product-quickview').find('.removefromwlQV').val() : '';
      wlRemoveUrl += pidData;
    }

    var $productContainer = $(this).closest('.product-detail');

    if (!$productContainer.length) {
      $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');
    }

    addToCartUrl = getAddToCartUrl(); // fetch the qty value on ATC, trigger change to ensure the purchase limit message is removed on interaction with ATC
    // It fetches the value from the qty input and sets it to qty select option

    var qtyValue = $productContainer.find('.quantity-val').val() || 1;
    $productContainer.find('select[class*="quantity-select"]').val(qtyValue).trigger('change');
    var form = {
      pid: pid,
      pidsObj: pidsObj,
      childProducts: getChildProducts(),
      quantity: !$(this).closest('div').hasClass('hover-content') && base.getQuantitySelected($(this)) ? base.getQuantitySelected($(this)) : 1
    };

    if (!$('.bundle-item').length) {
      form.options = getOptions($productContainer);
    }

    $(this).trigger('updateAddToCartFormData', form);

    if (sourceage == 'pdp') {
      $(this).addClass('ATC-addedToBag');
    }

    if (addToCartUrl) {
      $.ajax({
        url: addToCartUrl,
        method: 'POST',
        data: form,
        success: function success(data) {
          // return and trigger a message product addition exceeded the basket preference limit
          if (data.message && data.message === 'LIMIT_EXCEEDED') {
            if ($productContainer.is('.product-quickview') && $productContainer.find('.qv-baskelimit-msg').length > 0) {
              $productContainer.find('.qv-baskelimit-msg').removeClass('d-none');
            } else {
              $('body').trigger('triggerBasketLimitMsgModal');
            }
          } else {
            data.sourcepage = sourceage;
            handlePostCartAdd(data);
            $('body').trigger('product:afterAddToCart', data); // changes made to remove the product from wishlist of the same is being added from WL - Start

            if ($('.pg-name').length > 0 && $('.pg-name').val() === 'wishlist') {
              $.ajax({
                url: wlRemoveUrl,
                type: 'get',
                dataType: 'json',
                data: {},
                success: function success() {
                  window.location.reload();
                },
                error: function error() {// do nothing
                }
              });
            }
          } // changes made to remove the product from wishlist of the same is being added from WL - End


          $.spinner().stop(); //For wishlist landing page to hide the edit modal after product add to cart

          if ($('.wishlist-page').length > 0 && $('#editProductModal').length > 0) {
            $('#editProductModal').modal('hide');
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  });
};

base.showAddToCartConfirmation = showAddToCartConfirmation;
base.methods = {
  editBonusProducts: function editBonusProducts(data) {
    chooseBonusProducts(data);
  }
};

function removeURLParameter(url, parameter) {
  //prefer to use l.search if you have a location/link object
  var urlparts = url.split('?');

  if (urlparts.length >= 2) {
    var prefix = encodeURIComponent(parameter) + '=';
    var pars = urlparts[1].split(/[&;]/g); //reverse iteration as may be destructive

    for (var i = pars.length; i-- > 0;) {
      //idiom for string.startsWith
      if (pars[i].lastIndexOf(prefix) !== -1) {
        pars.splice(i, 1);
      }
    }

    url = urlparts[0] + '?' + pars.join('&');
    return url;
  } else {
    return url;
  }
}

base.checkProductAvailability = function (prodType, availUrl, context) {
  var $productContainer = $('body').find('.product-detail') || context;

  if ($('.page').data('producttype') || prodType) {
    var productType = prodType || $('.page').data('producttype').toLowerCase();
    var isVariant = productType === 'variant' || productType === 'product';
    var isMaster = productType === 'master';
    var isSet = productType === 'set';
    var url;

    if (availUrl) {
      url = availUrl;
    } else {
      var availabilityurl = $('.page').data('availabilityurl');

      if (availabilityurl) {
        availabilityurl = removeURLParameter(availabilityurl, 'pid');
        url = availabilityurl + '&' + $('.page').data('querystring');
      }
    }

    var availabilityValue;

    if (!isSet) {
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(data) {
          if (isVariant) {
            var availabilityMessages = data.availability.messages;
            availabilityMessages.forEach(function (message) {
              var colorStyle = data.availability.hexColorCode;

              if (colorStyle) {
                colorStyle = 'style=color:' + colorStyle;
              }

              availabilityValue = '<li><div ' + colorStyle + '>' + message + '</div></li>';
            });
            $productContainer.find('.product-availability .purchaselimit').empty();
            $('button.add-to-cart, button.add-to-cart-global').attr('disabled', !data.product.available);

            if (data.product.readyToOrder && !data.product.availability.isInPurchaselimit) {
              $productContainer.find('.product-availability .purchaselimit').html(data.product.availability.isInPurchaselimitMessage);
              $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
              var formData = {};
              formData.errorFields = [data.product.availability.isInPurchaselimitMessage];
              formData.formName = 'Add to Cart';
              $('body').trigger('adobeTagManager:formError', formData);
            }

            if ((!data.product.available || !data.product.readyToOrder) && data.product.productType !== 'master') {
              $productContainer.find('button.atc-button-pdp').addClass('soldout');
              $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

              if ($productContainer.hasClass('product-quickview')) {
                $productContainer.find('button.add-to-cart-global').addClass('soldout');
                $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
              }
            }

            $($productContainer).trigger('product:updateAvailability', {
              product: data.product,
              $productContainer: $productContainer,
              message: availabilityValue,
              resources: data.resources
            });
          } else if (isMaster) {
            updateAttrsForMaster(data.product.variationAttributes, $productContainer);
            $('button.add-to-cart, button.add-to-cart-global').attr('disabled', !data.product.available);

            if (!data.product.available) {
              $productContainer.find('button.atc-button-pdp').addClass('soldout');
              $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

              if ($productContainer.hasClass('product-quickview')) {
                $productContainer.find('button.add-to-cart-global').addClass('soldout');
                $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
              }
            }
          }
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    } else if (isSet) {
      $.ajax({
        url: url,
        method: 'GET',
        success: function success(data) {
          data.product.individualProducts.forEach(function (item) {
            $productContainer = $('body').find('.product-detail.set-item.' + item.id);

            if (item.productType === 'variant' || item.productType === 'product') {
              var availabilityMessages = item.availability.messages;
              availabilityMessages.forEach(function (message) {
                var colorStyle = item.availability.hexColorCode;

                if (colorStyle) {
                  colorStyle = 'style=color:' + colorStyle;
                }

                availabilityValue = '<li><div ' + colorStyle + '>' + message + '</div></li>';
              });
              $productContainer.find('.product-availability .purchaselimit').empty();
              $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !item.available);

              if (item.readyToOrder && !item.availability.isInPurchaselimit) {
                $productContainer.find('.product-availability .purchaselimit').html(item.availability.isInPurchaselimitMessage);
                $productContainer.find('.product-availability .purchaselimit').attr('aria-describedby', 'purchase-limit');
                var formData = {};
                formData.errorFields = [item.availability.isInPurchaselimitMessage];
                formData.formName = 'Add to Cart';
                $('body').trigger('adobeTagManager:formError', formData);
              }

              if ((!item.available || !item.readyToOrder) && item.productType !== 'master') {
                $productContainer.find('button.atc-button-pdp').addClass('soldout');
                $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

                if ($productContainer.hasClass('product-quickview')) {
                  $productContainer.find('button.add-to-cart-global').addClass('soldout');
                  $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
                }
              }

              $($productContainer).trigger('product:updateAvailability', {
                product: item,
                $productContainer: $productContainer,
                message: availabilityValue,
                resources: data.resources
              });
            } else if (item.productType === 'master') {
              $('button.add-to-cart, button.add-to-cart-global', $productContainer).attr('disabled', !item.available);

              if (!item.available) {
                $productContainer.find('button.atc-button-pdp').addClass('soldout');
                $productContainer.find('button.atc-button-pdp').text(data.resources.soldout);

                if ($productContainer.hasClass('product-quickview')) {
                  $productContainer.find('button.add-to-cart-global').addClass('soldout');
                  $productContainer.find('button.add-to-cart-global').text(data.resources.soldout);
                }
              }
            }
          });
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  }
};

base.addBonusProductsToCart = function () {
  $(document).on('click', '.add-bonus-products', function () {
    var $readyToOrderBonusProducts = $('input[name="chooseBonusproductIds"]:checked');
    var data = {};
    var url = $('.choose-bonus-product-dialog').data('addtocarturl');
    var pidsObject = {
      bonusProducts: []
    };
    $.each($readyToOrderBonusProducts, function () {
      var qtyOption = 1;
      var option = null;

      if (qtyOption > 0) {
        if ($(this).data('optionid') && $(this).data('option-selected-value')) {
          option = {};
          option.optionId = $(this).data('optionid');
          option.productId = $(this).data('pid');
          option.selectedValueId = $(this).data('option-selected-value');
        }

        pidsObject.bonusProducts.push({
          pid: $(this).data('pid'),
          qty: qtyOption,
          options: [option]
        });
        pidsObject.totalQty = parseInt($('.pre-cart-products').length > 0 ? $('.pre-cart-products').html() : 1, 10);
      }
    }); // Adding product from details

    if ($(this).hasClass('from-modal')) {
      pidsObject.bonusProducts = [];
      pidsObject.bonusProducts.push({
        pid: $(this).data('pid'),
        qty: 1,
        options: null
      });
    }

    data = {
      pids: JSON.stringify(pidsObject),
      uuid: $('.choose-bonus-product-dialog').data('uuid'),
      pliuuid: $('.choose-bonus-product-dialog').data('pliuuid')
    };
    $.spinner().start();
    $.ajax({
      url: url,
      data: data,
      method: 'POST',
      success: function success(response) {
        $.spinner().stop();

        if (response.error) {
          $('.choice-of-bonus-product .error-div').empty().append('<div class="alert alert-danger add-to-basket-alerts text-center">');
          $('.choice-of-bonus-product .error-div .add-to-basket-alerts').html(response.errorMessage);
        } else {
          $('body').trigger('adobe:selectbonusProduct', response);
          $('.configure-bonus-product-attributes').html(response);
          $('.bonus-products-step2').removeClass('hidden-xl-down');
          $('#chooseBonusProductModal').modal('hide');
          $('#editProductModal').modal('hide');
          location.reload();
        }
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  });
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/pdpInstoreInventory.js":
/*!*******************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/pdpInstoreInventory.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var storeLocator = __webpack_require__(/*! ../storeLocator/storeLocator */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/storeLocator/storeLocator.js");

var base = __webpack_require__(/*! core/product/pdpInstoreInventory */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/product/pdpInstoreInventory.js");

var formFields = __webpack_require__(/*! core/formFields/formFields */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/formFields/formFields.js");

var hbcTooltip = __webpack_require__(/*! core/tooltip */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/tooltip.js");

var zipCodeValidator = __webpack_require__(/*! ../zipCodeValidator */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/zipCodeValidator.js");

var klarnaClient = __webpack_require__(/*! ../klarnaClientUtils */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/klarnaClientUtils.js");
/**
 * remove the store selector modal when a store is selected out of results
 */


function removeSelectStoreModal() {
  if ($('#inStoreInventoryModal').length > 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
    $('#inStoreInventoryModal').attr('aria-modal', 'false');
  }
}
/**
 * Updates details of a product line item in the Cart Section
 * @param {Object} data - AJAX response from the server
 */


function updateItemsHTML(data) {
  if (data.ssdPostal && data.ssdPostal !== 'null') {
    $('.change-zipcode ').html(data.ssdPostal);
  }

  if (data.cartModel && data.cartModel.itemsHTML) {
    $('.container.cart-page-content .cart-plis.product-line-item').empty().html($(data.cartModel.itemsHTML).children().html());
    formFields.updateSelect();
    hbcTooltip.tooltipInit();
  }
}
/**
 * CUSTOM EVENT
 * event handler triggered with the store selection on modal
 */


base.selectZipWithInventory = function () {
  $('body').on('zip:selected', function (e, data) {
    var searchPIDQuantity = $('.btn-sddzipcode-search').attr('data-search-pid');
    var searchPID = searchPIDQuantity.split(':')[0];
    var searchPlid = $('.btn-storelocator-search').attr('data-product-pliuuid');
    var productElement = $('.product-detail[data-pid="' + searchPID + '"]') === undefined ? $('.cart-options[data-pid="' + searchPID + '"]') : $('.product-detail[data-pid="' + searchPID + '"]'); // fall back from cart, pick product id

    var $changeZipCodeElement = $(productElement).find('.change-zipcode');

    if (data.postalCode && $changeZipCodeElement.length > 0) {
      $changeZipCodeElement.html(data.postalCode);
    }

    if (data.productType && data.productType !== 'variant') {
      $('.zip-information .available-messaging').removeClass('d-none');
      $('.zip-information .available-messaging').find('span.variation-msg').removeClass('d-none');
      $('.zip-information .available-messaging').find('span.server-msg').html('');
    } else if (data.productType && data.productType === 'variant') {
      $('.zip-information .available-messaging').removeClass('d-none');
      $('.zip-information .available-messaging').find('span.variation-msg').addClass('d-none');
      $('.zip-information .available-messaging').find('span.server-msg').html(data.pdpSDDAvailabilityMessage);
    }

    if ($('body').find('.product-detail').length) {
      $('body').trigger('adobe:sddSearch', data);
    }

    removeSelectStoreModal();
  });
};
/**
 * Update tax totals
 *
 * @param {Object} data - Tax totals data
 */


function updateTaxTotal(data) {
  if (data.totals.canadaTaxation && data.totals.canadaTaxation.PST) {
    $('.tax-PST-total').empty().append(data.totals.canadaTaxation.PST);
    $('.tax-pst').removeClass('d-none');
  } else if (!$('.tax-pst').hasClass('d-none')) {
    $('.tax-pst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation['GST/HST']) {
    $('.tax-GST-total').empty().append(data.totals.canadaTaxation['GST/HST']);
    $('.tax-gst').removeClass('d-none');
  } else if (!$('.tax-gst').hasClass('d-none')) {
    $('.tax-gst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.QST) {
    $('.tax-QST-total').empty().append(data.totals.canadaTaxation.QST);
    $('.tax-qst').removeClass('d-none');
  } else if (!$('.tax-qst').hasClass('d-none')) {
    $('.tax-qst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.RST) {
    $('.tax-RST-total').empty().append(data.totals.canadaTaxation.RST);
    $('.tax-rst').removeClass('d-none');
  } else if (!$('.tax-rst').hasClass('d-none')) {
    $('.tax-rst').addClass('d-none');
  }

  if (data.totals.canadaTaxation && data.totals.canadaTaxation.ECO) {
    $('.tax-ECO-total').empty().append(data.totals.canadaTaxation.ECO);
    $('.tax-eco').removeClass('d-none');
  } else if (!$('.tax-eco').hasClass('d-none')) {
    $('.tax-eco').addClass('d-none');
  }

  if (!data.totals.canadaTaxation) {
    $('.tax-total').empty().append(data.totals.totalTax);
    $('.tax-normal').removeClass('d-none');
  } else if (!$('.tax-normal').hasClass('d-none')) {
    $('.tax-normal').addClass('d-none');
  }
}
/**
 * re-renders the order totals and the number of items in the cart
 * @param {Object} data - AJAX response from the server
 */


function updateCartTotals(data) {
  klarnaClient.toggleKlarnaOrderSummary(data.totals.grandTotalValue, data.items);
  $('.number-of-items').empty().append(data.resources.numberOfItems);
  $('.shipping-total-cost').empty().append(data.totals.totalShippingCost);
  $('.shipping-method-price').empty().append('- ' + data.totals.totalShippingCost);
  updateTaxTotal(data);
  $('.grand-total-sum').empty().append(data.totals.grandTotal);
  $('.grand-total-value').empty().append(data.totals.grandTotalValue);
  $('.sub-total').empty().append(data.totals.subTotal);
  $('.mini-sub-total').empty().append(data.totals.miniCartEstimatedTotal);
  $('.minicart-quantity').empty().append(data.numItems);
  $('.minicart-link').attr({
    'aria-label': data.resources.minicartCountOfItems,
    title: data.resources.minicartCountOfItems
  });

  if (data.totals.orderLevelDiscountTotal.value > 0) {
    $('.order-discount').removeClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  } else {
    $('.order-discount').addClass('hide-order-discount');
    $('.order-discount-total').empty().append('- ' + data.totals.orderLevelDiscountTotal.formatted);
  }

  if (data.totals.shippingLevelDiscountTotal.value > 0) {
    $('.shipping-total-cost').empty().append(data.totals.freeShippingText);
    $('.shipping-method-price').empty().append('- ' + data.totals.freeShippingText);
  }

  if (data.totals.totalSavings.value > 0) {
    $('.grand-total-saving-container').removeClass('d-none');
    $('.checkout-total-savings').empty().append(data.totals.totalSavings.formatted);
  } else {
    $('.grand-total-saving-container').addClass('d-none');
  }

  data.items.forEach(function (item) {
    if (item.checkoutDiscountTotalHtml) {
      $('.checkout_discount-' + item.UUID).html(item.checkoutDiscountTotalHtml);
    }
  });

  if (data.totals.associateOrFDDMsg !== '') {
    $('.associate-fdd-promo').removeClass('d-none');
    $('.associate-promo-msg').empty().append(data.totals.associateOrFDDMsg);
  } else {
    $('.associate-fdd-promo').addClass('d-none');
  }

  if (data.totals.hudsonpoint > 0) {
    $('.hudson-reward-points .hudson-point').html(data.totals.hudsonpoint);
  } else {
    $('.hudson-reward-points').addClass('d-none');
  }
}
/**
 * updates ship to home and ship to store option on toggle of radio
 * updates item with the store info
 * */


$('body').on('sdd:cart', function (e, reqdata) {
  e.stopImmediatePropagation();
  var changeShiptoUrl = reqdata.url;
  $.spinner().start();

  if (changeShiptoUrl) {
    $.ajax({
      url: changeShiptoUrl,
      success: function success(data) {
        $('body').trigger('adobe:sddCartSearch', data);
        updateItemsHTML(data);
        removeSelectStoreModal();
        updateCartTotals(data.cartModel);
        $.spinner().stop();
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  }
});
/**
 * Postal code formatting for in store
 */

function bopisPostalCodeValidation() {
  $('#store-postal-code').on('keyup', function () {
    var postalCode = $(this).val();

    if (/[a-zA-Z][0-9][a-zA-Z]/.test(postalCode.substring(0, 3))) {
      if (postalCode.length === 4 && postalCode.indexOf(' ') === 3) {
        return;
      }

      if (postalCode.length === 5 && postalCode.lastIndexOf(' ') === 4) {
        $(this).val(postalCode.substring(0, postalCode.length - 1));
        return;
      }

      var formattedString = postalCode.replace(/ /g, '').replace(/(\w{3})/, '$1 ').replace(/(^\s+|\s+$)/, ' ').toUpperCase().trim();
      $(this).val(formattedString);
    }
  });
}
/**
 * Removes the specified parameter from url
 *
 * @param {string} url - the url
 * @param {string} parameter - parameter to be removed
 * @returns {string} url - url after removing the parameter
 */


function removeURLParameter(url, parameter) {
  // prefer to use l.search if you have a location/link object
  var urlparts = url.split('?');

  if (urlparts.length >= 2) {
    var prefix = encodeURIComponent(parameter) + '=';
    var pars = urlparts[1].split(/[&;]/g); // reverse iteration as may be destructive

    for (var i = pars.length; i-- > 0;) {
      // idiom for string.startsWith
      if (pars[i].lastIndexOf(prefix, 0) !== -1) {
        pars.splice(i, 1);
      }
    } // eslint-disable-next-line no-param-reassign


    url = urlparts[0] + '?' + pars.join('&');
    return url;
  }

  return url;
}
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Search for stores with new zip code
 * @param {HTMLElement} element - the target html element
 * @returns {boolean} false to prevent default event
 */


function search(element) {
  var dialog = element.closest('.in-store-inventory-dialog'); //var spinner = $("#inStoreInventoryModal").spinner();

  $.spinner().start();
  var $form = element.closest('.zipcode-locator');
  var url = $form.attr('action');
  var searchPID = $('.btn-sddzipcode-search').attr('data-search-pid');
  var payload = {};
  payload.postalCode = $form.find('[name="postalCode"]').val(); // extra payload carrying the product ids with quantity in json serialized

  if (element.data('products') !== undefined && element.data('products') !== 'null' && element.data('products') !== null && element.data('products').indexOf('undefined') === -1) {
    payload.pidquan = element.data('products');
  }
  /*    if (searchPID && searchPID !== '') {
    	payload.pidquan = searchPID;
    }*/


  $.ajax({
    url: url,
    type: $form.attr('method'),
    data: payload,
    dataType: 'json',
    success: function success(data) {
      /** ** CUSTOM EVENT TRIGGER ****/
      if ($('.btn-sddzipcode-search').data('cart-source') !== undefined && $('.btn-sddzipcode-search').data('cart-source') === true) {
        // store select cart
        data.url = $('.btn-sddzipcode-search').data('cart-setzipurl');
        $('body').trigger('sdd:cart', data);
        $.spinner().stop();
      } else if ($('.btn-sddzipcode-search').data('source') === 'search') {
        // store select search page
        var storeRefine = $('.delivery-refinements').find('input[id="sddCheck"]');
        var valueSelected = $('input[name="refinestore"]:checked').val();

        if (storeRefine.length > 0) {
          if ($('.delivery-refinements').find('input[id="sddCheck"]').siblings('div.store-change-link-sdd').find('a.change-zipcode').length > 0) {
            $('.delivery-refinements').find('input[id="sddCheck"]').siblings('div.store-change-link-sdd').find('a.change-zipcode').html(data.postalCode);
          }

          if (storeRefine.siblings('label[for=sddCheck]').length > 0) {
            storeRefine.siblings('label[for=sddCheck]').find('span').html(data.message);
          }

          if (data.storeid) {
            storeRefine.removeAttr('disabled');
            var dataUrl = storeRefine.attr('data-href');
            var storeUrl = removeURLParameter(dataUrl, 'storeid');
            storeUrl = removeURLParameter(storeUrl, 'srchsrc');
            storeUrl = appendToUrl(storeUrl, {
              storeid: data.storeid,
              srchsrc: 'sdd'
            });
            storeRefine.attr('data-href', storeUrl);
            $('input[id="sddCheck"]').trigger('click');
          } else {
            storeRefine.attr('disabled', 'disabled');

            if (valueSelected === 'sameday') {
              $('input[id="noStore"]').trigger('click');
            }

            $.spinner().stop();
          }
        } else {
          $.spinner().stop();
        }

        removeSelectStoreModal();
      } else {
        // store select PDP
        $('body').trigger('zip:selected', data);
        $.spinner().stop();
      }
    },
    error: function error() {
      $.spinner().stop();
    }
  });
  return false;
}
/**
 * Generates the modal window on the first call. Modal head and
 * main text is appended through parameter
 * @param {string} modalBodyText - main text in the modal
 * @param {string} modalCloseText - close title
 * @param {string} modalHeadText - modal header text
 */


function getModalHtmlElement(modalBodyText, modalCloseText, modalHeadText, event) {
  if ($('#inStoreInventoryModal').length !== 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
  }

  var modalHead = modalHeadText !== undefined ? modalHeadText : $(event.currentTarget).hasClass('change-zipcode') ? $('.store-change-link-sdd').data('modal-header-text-sdd') : $('.store-change-link').data('modal-header-text'); // fallback to get content from DOM, PDP

  var modalClose = modalCloseText !== undefined ? modalCloseText : $('.store-change-link').data('modal-header-text'); // fallback to get content from DOM, PDP

  var modalBody = modalBodyText !== undefined ? modalBodyText : $(event.currentTarget).hasClass('change-zipcode') ? $('.store-change-link-sdd').data('modal-body-text-sdd') : $('.store-change-link').data('modal-body-text'); // fallback to get content from DOM, PDP
  // set empty to avoid display of null

  modalHead = modalHead === null ? '' : modalHead;
  modalClose = modalClose === null ? '' : modalClose;
  modalBody = modalBody === null ? '' : modalBody;
  var htmlString = '<!-- Modal -->' + '<div class="modal inStoreInventoryModal" id="inStoreInventoryModal" role="dialog" aria-modal="true">' + '<div class="modal-dialog in-store-inventory-dialog">' + '<!-- Modal content-->' + '<div class="modal-content">' + '<div class="modal-header">' + '<span>' + modalHead + '</span>' + '    <button type="button" class="close svg-36-avenue-Up_Copy svg-36-avenue-Up_Copy-dims" data-dismiss="modal" aria-label="Close inventory modal" title="' + modalClose + '">' + // eslint-disable-line
  '    </button>' + '</div>' + '<div class="change-a-store">' + modalBody + '</div>' + '<div class="modal-body"></div>' + '<div class="modal-footer"></div>' + '</div>' + '</div>' + '</div>';
  $('body').append(htmlString);
  $('#inStoreInventoryModal').modal('show');
  $('.change-store[aria-haspopup=true]').attr('aria-controls', 'inStoreInventoryModal');
  formFields.inputfocusEvent();
}
/**
 * Replaces the content in the modal window with find stores components and
 * the result store list.
 * @param {string} pid - The product ID to search for
 * @param {number} quantity - Number of products to search inventory for
 * @param {number} selectedPostalCode - The postal code to search for inventory
 * @param {number} selectedRadius - The radius to search for inventory
 * @param {string} pliUUID - unid id of an item
 * @param {string} selectedOption - selected option between shipto and instore
 * @param {string} instoreFieldLabel - default lable for instore
 * @param {string} source - source of invoke
 */


function fillModalElement(pid, quantity, selectedPostalCode, selectedRadius, pliUUID, selectedOption, instoreFieldLabel, source) {
  var requestData = {};

  if (pid && quantity) {
    requestData.products = pid + ':' + quantity;
  }

  if (selectedRadius) {
    requestData.radius = selectedRadius;
  }

  if (selectedPostalCode) {
    requestData.postalCode = selectedPostalCode;
  }

  $('#inStoreInventoryModal').spinner().start();
  $.ajax({
    url: $('.change-store').data('open-action'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      $('.inStoreInventoryModal .modal-body').empty();
      $('.inStoreInventoryModal .modal-body').html(response.storesResultsHtml);
      storeLocator.search();
      storeLocator.changeRadius(); //storeLocator.selectStore();
      //storeLocator.updateSelectStoreButton();
      // storeLocator.setMyHomeStore();

      formFields.updateSelect();
      formFields.adjustForAutofill();
      $('.btn-storelocator-search').attr('data-search-pid', pid);
      $('.btn-storelocator-search').attr('data-product-pliuuid', pliUUID);
      $('.btn-storelocator-search').attr('data-shipto-selected', selectedOption);
      $('.btn-storelocator-search').attr('data-instorefieldlabel', instoreFieldLabel);
      $('.btn-storelocator-search').attr('data-source', source);

      if (selectedRadius) {
        $('#radius').val(selectedRadius);
      }

      if (selectedPostalCode) {
        $('#store-postal-code').val(selectedPostalCode);
      }

      if (!$('.results').data('has-results')) {
        $('.store-locator-no-results').show();
      } // do not show error message with the modal open


      if (!$('.results').data('searchexecuted')) {
        $('.store-locator-no-results').hide();
      }

      $('#inStoreInventoryModal').modal('show');
      $('#inStoreInventoryModal').spinner().stop();
      $('#inStoreInventoryModal').find('#store-postal-code').focus();
      bopisPostalCodeValidation();
    },
    error: function error() {
      $('#inStoreInventoryModal').spinner().stop();
    }
  });
}
/**
 * Search for stores with new zip code
 */


base.searchSDDWithPostal = function () {
  $('.zipcode-locator .btn-sddzipcode-search[type="button"]').click(function (e) {
    e.preventDefault();

    if (!$('form.zipcode-locator').is(':valid')) {
      return;
    }

    var input = $('#inStoreInventoryModal').find('#search-sdd-postal');
    var inputVal = input.val();

    if (inputVal === '') {
      $('#inStoreInventoryModal').find('.zipcode-locator').addClass('error');
      input.focus();
      var formData = {};
      formData.errorFields = ['postalCode'];
    } else {
      search($(this));
      $('#inStoreInventoryModal').find('.zipcode-locator').removeClass('error');
    }
  });
  $('form.zipcode-locator').on('submit', function (e) {
    e.preventDefault();
    $('.zipcode-locator .btn-sddzipcode-search[type="button"]').trigger('click');
  });
  zipCodeValidator.validateZip($('#search-sdd-postal'));
};
/**
 * Replaces the content in the modal window with find stores components and
 * the result store list.
 * @param {string} pid - The product ID to search for
 * @param {number} quantity - Number of products to search inventory for
 * @param {number} selectedPostalCode - The postal code to search for inventory
 * @param {number} selectedRadius - The radius to search for inventory
 * @param {string} pliUUID - unid id of an item
 * @param {string} selectedOption - selected option between shipto and instore
 * @param {string} instoreFieldLabel - default lable for instore
 * @param {string} source - source of invoke
 */


function fillSDDModalElement(pid, quantity, selectedPostalCode, source, cartSetZipUrl, cartSource) {
  var requestData = {
    products: pid + ':' + quantity
  };

  if (selectedPostalCode) {
    requestData.postalCode = selectedPostalCode;
  }

  $('#inStoreInventoryModal').spinner().start();
  $.ajax({
    url: $('.change-zipcode').data('open-action-sdd'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      $('.inStoreInventoryModal .modal-body').empty();
      $('.inStoreInventoryModal .modal-body').html(response.zipCodeSearchHtml);
      base.searchSDDWithPostal(); // change store modal

      $('.btn-sddzipcode-search').attr('data-search-pid', requestData.products);
      $('.btn-sddzipcode-search').attr('data-source', source);
      $('.btn-sddzipcode-search').data('cart-setzipurl', cartSetZipUrl);
      $('.btn-sddzipcode-search').data('cart-source', cartSource);
      $('#inStoreInventoryModal').modal('show');
      $('#inStoreInventoryModal').spinner().stop();
      $('#inStoreInventoryModal').find('#store-postal-code').focus();
    },
    error: function error() {
      $('#inStoreInventoryModal').spinner().stop();
    }
  });
}
/**
 * CLICK EVENT
 * event handler triggered with the click of change store in PDP
 */


base.changeStore = function () {
  $('body').on('click', '.change-store, .change-zipcode', function (e) {
    window.sessionStorage.setItem('change-store-click', true);
    var pid = $(this).closest('.product-detail').attr('data-pid') === undefined ? $(this).closest('.cart-options').data('product-id') : $(this).closest('.product-detail').attr('data-pid');
    var quantity = $(this).closest('.product-detail').find('.quantity-select').val() === undefined ? $(this).closest('.cart-options').data('product-qty') : $(this).closest('.product-detail').find('.quantity-select').val();
    var modalBodyText = $(this).closest('.cart-options').data('modal-body-text');
    var modalCloseText = $(this).closest('.cart-options').data('modal-close-text');
    var modalHeadText = $(this).closest('.cart-options').data('modal-header-text');
    var source = $('.change-store').parent().siblings('.store-refine').length > 0 ? 'search' : null;
    var cartSetZipUrl = $('.change-zipcode').parent().attr('data-setcart');
    var cartSource = $('.change-zipcode').parent().hasClass('source-cart') ? true : false;
    var selectedOption = $(this).closest('.cart-options').find('input[name*="shipto"]:checked').val();
    var pliUUID = $(this).closest('.cart-options').data('product-uuid');
    var instoreFieldLabel = $(this).closest('.cart-options').data('instorefieldlabel');
    getModalHtmlElement(modalBodyText, modalCloseText, modalHeadText, e);

    if ($(e.currentTarget).hasClass('change-zipcode')) {
      source = $('.change-zipcode').parent().closest('.sdd-refine').length > 0 ? 'search' : null;
      fillSDDModalElement(pid, quantity, $(this).data('postal'), source, cartSetZipUrl, cartSource);

      if (cartSource) {
        $('body').trigger('adobe:sddCartSelect');
      }
    } else {
      source = $('.change-store').parent().closest('.store-refine').length > 0 ? 'search' : null;
      fillModalElement(pid, quantity, $(this).data('postal'), $(this).data('radius'), pliUUID, selectedOption, instoreFieldLabel, source);
    }
  });
};
/**
 * Changes add to bag text dynamically on toggle of shipping options
 */


base.changeButtonText = function () {
  $('.shipping-option').on('click', 'input:not(.change-store)', function () {
    var selectedValue = $(this).val();
    var addToBagText = $('.shipping-option').data('addtobag-text');
    var addToStoreText = $('.shipping-option').data('addtostore-text');
    var addToCartButton = $(this).closest('.product-detail').find('.add-to-cart');

    if (addToStoreText !== undefined && addToStoreText.length && addToStoreText !== '') {
      if (selectedValue === 'instore') {
        addToCartButton.html(addToStoreText);
        $('body').trigger('adobe:bopusStart');
        $('.zip-information .available-messaging').addClass('d-none');
      } else {
        $('.zip-information .available-messaging').removeClass('d-none');
        addToCartButton.html(addToBagText);
      }
    }
  });
};

base.setMyHomeStore = storeLocator.setMyHomeStore();
base.selectStore = storeLocator.selectStore();
base.updateSelectStoreButton = storeLocator.updateSelectStoreButton();
module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/tileFocusManager.js":
/*!****************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/tileFocusManager.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Bound to the mouseenter event on .product-tile elements,
 * It checks to see if there's focus on another product tile and blurs it if necessary.
 * @param {Event} evt The event object
 */

function hoverEnterTile(evt) {
  var target = evt.currentTarget;
  var focusable;

  if (!document.activeElement) {
    return;
  } // Shift focussed element in a product tile when we roll over another product tile.


  if ($(document.activeElement).closest('.product-tile').length && !target.contains(document.activeElement)) {
    focusable = $(target).find(':focusable:first');

    if (focusable.length) {
      focusable.focus();
    } else {
      document.activeElement.blur();
    }
  }
}
/**
 * Bound to the mouseleave event on .product-tile elements,
 * It blurs focussed elements if there are any within the tile.
 * @param {*} evt An event object
 */


function hoverExitTile(evt) {
  var target = evt.currentTarget;

  if (!document.activeElement) {
    return;
  }

  if ($(document.activeElement).closest('.product-tile').length && target.contains(document.activeElement)) {
    document.activeElement.blur();
  }
}

$('.product-grid, .recommendations, .wishlistItemCards, .wishlist-cart-slider').on('mouseenter', '.product-tile', hoverEnterTile).on('mouseleave', '.product-tile', hoverExitTile);

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/search/searchsuggestion.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/search/searchsuggestion.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = {};

var debounce = __webpack_require__(/*! lodash/debounce */ "../sfra/node_modules/lodash/debounce.js");

var pageScrollManager = __webpack_require__(/*! ../util/pageScrollManager */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/pageScrollManager.js");

var htmlFragments = __webpack_require__(/*! ../util/htmlFragments */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/htmlFragments.js");

var MIN_CHARS = 1;
var headerSearchForms = document.querySelectorAll('.search-form');
var searchOverlayTemplate = document.getElementById('search-overlay-template');
var searchOverlay;
var scrim;
var resultsContainer;
var overlayInput;
var SUGGESTION_ENDPOINT;
var POPULARSEARCH_ENDPOINT;
var RECOMMENDATIONS_ENDPOINT;
var checkRecommendation = true;

if (searchOverlayTemplate !== null) {
  SUGGESTION_ENDPOINT = searchOverlayTemplate.dataset.suggestionEndpoint;
  POPULARSEARCH_ENDPOINT = searchOverlayTemplate.dataset.popularsearchEndpoint;
  RECOMMENDATIONS_ENDPOINT = searchOverlayTemplate.dataset.recommendationsEndpoint;
}
/**
 * Process Ajax response for SearchServices-GetSuggestions
 *
 * @param {Object|string} response - Empty object literal if null response or string with rendered
 *                                   suggestions template contents
 */


function processResponse(response) {
  $.spinner().stop();

  if (typeof response === 'string') {
    // Render results
    var sanitizedResponse = removeEmptyResultSections(response);
    resultsContainer.innerHTML = htmlFragments.fragmentToString(sanitizedResponse);

    if (checkRecommendation) {
      handleFirstRecommendation();
    } else {
      appendRecommendation(resultsContainer);
    }
  } else {
    // Handle no results
    console.dir(response);
  }
}

function appendRecommendation(resultsContainer) {
  var responseDOM = resultsContainer;
  [].forEach.call(responseDOM.querySelectorAll('.search-suggestions'), function (block) {
    if (block.classList.contains('recently-viewed')) {
      document.querySelector('.recently-viewed.search-suggestions').innerHTML = document.querySelector('.recently-viewed-search-suggestion').innerHTML;
    }

    if (block.classList.contains('you-might-like')) {
      document.querySelector('.you-might-like.search-suggestions').innerHTML = document.querySelector('.you-might-like-search-suggestion').innerHTML;
    }

    if (block.classList.contains('best-sellers')) {
      document.querySelector('.best-sellers.search-suggestions').innerHTML = document.querySelector('.best-sellers-search-suggestion').innerHTML;
    }
  });
}
/**
 * Looks for empty search-suggestion lists and removes those blocks from the HTML.
 * @param {String} response The response HTML string
 * @returns {DocumentFragment} The response with emtpy blocks removed.
 */


function removeEmptyResultSections(response) {
  var responseDOM = htmlFragments.createFragment(response);
  [].forEach.call(responseDOM.querySelectorAll('.search-suggestions'), function (block) {
    var list = block.querySelector('ul');

    if (list && !list.childElementCount) {
      block.parentElement.removeChild(block);
    }
  });
  return responseDOM;
}
/**
 * Triggers a search suggestion Ajax Request
 * @param {String} endpoint The URL to GET
 */


function doSuggestionRequest(endpoint) {
  $.spinner().start();
  $.ajax({
    url: endpoint,
    method: 'GET'
  }).done(processResponse).always(function () {
    return $.spinner().stop();
  });
}
/**
 * Gets popular suggests. Used when there's no
 * @param {Event} evt The `input` event on the search input element
 */


function fetchPopularSuggestions() {
  doSuggestionRequest(POPULARSEARCH_ENDPOINT);
}
/**
 * Kicks off the request for search suggestions.
 * @param {Event} evt The `input` event on the search input element
 */


function retrieveSuggestions(evt) {
  var input = evt.target;

  if (input.value.trim().length < MIN_CHARS) {
    return;
  }

  doSuggestionRequest(SUGGESTION_ENDPOINT + encodeURIComponent(input.value.trim()));
}
/**
 * Adds a debounce to the retrieveSuggestions function
 * to wait for a gap in typing before kicking off the ajax request.
 */


var retrieveSuggestionsAfterInput = debounce(retrieveSuggestions, 300);
/**
 * Keeps the input values of different instances of search forms in sync.
 * Bound to the `input` event of each search form instance.
 * @param {Event} evt
 */

function mirrorQueryInput(evt) {
  document.querySelectorAll('.search-form input[name="q"]').forEach(function (input) {
    if (input === evt.target) {
      return;
    }

    input.value = evt.target.value;
  });
}
/**
 * Shows or hides the "Clear" reset button on a search form.
 * Bound to either the form `reset` event and the search field `input` event.
 * @param {Event} evt The event object
 */


function setResetButtonVisiblity(evt) {
  var form;
  var input;

  if (evt.target.matches('.search-form')) {
    form = evt.target;
    input = form.querySelector('input[name="q"]');
  } else {
    input = evt.target;
    form = input.form;
  }

  var resetButton = form.querySelector('button[type="reset"]');

  if (input.value === '') {
    resetButton.classList.add('d-none');
  } else {
    resetButton.classList.remove('d-none');
  }
}
/**
 * Handles resetting the current search form. Bound to the form's `reset` event.
 * @param {Event} evt The event object
 * @param {Boolean} resetOthers Do we want to reset the other forms? true by default
 */


function doFormReset(evt) {
  var resetOthers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (typeof evt.preventDefault === 'function') {
    evt.preventDefault();
  }

  var resetButton = evt.target;
  var form = resetButton.form;
  var input = form.querySelector('input[name="q"]');
  form.reset();
  resetButton.classList.add('d-none'); // Reset other search forms too.

  if (resetOthers) {
    [].slice.call(document.querySelectorAll('.search-form button[type="reset"]')).filter(function (el) {
      return resetButton !== el;
    }).forEach(function (el) {
      return doFormReset({
        target: el
      }, false);
    });
  }

  input.focus();

  if (searchOverlay) {
    fetchPopularSuggestions();
  }
}

function dismissKeyboard() {
  if (document.activeElement === overlayInput) {
    overlayInput.blur();
  }
}
/**
 * Opens up the search overlay, building it based on the searchOverlayTemplate HTML.
 * Bound to the triggering search input's 'focus' event.
 * @param {Event} evt The event object
 */


function showSearchOverlay(evt) {
  document.body.appendChild(htmlFragments.createFragment(searchOverlayTemplate.innerHTML));
  searchOverlay = document.querySelector('.search-overlay');
  scrim = document.querySelector('.search-overlay + .scrim');
  var searchForm = searchOverlay.querySelector('.search-form');
  searchForm.addEventListener('reset', setResetButtonVisiblity);
  var closeButton = searchOverlay.querySelector('button.close');
  closeButton.addEventListener('click', dismissSearchOverlay);
  scrim.addEventListener('click', dismissSearchOverlay);
  overlayInput = searchForm.querySelector('input[name="q"]');
  overlayInput.addEventListener('input', mirrorQueryInput);
  overlayInput.addEventListener('input', setResetButtonVisiblity);
  overlayInput.addEventListener('input', function (evt) {
    return retrieveSuggestionsAfterInput(evt);
  });
  mirrorQueryInput(evt);
  var resetButton = searchForm.querySelector('button[type="reset"]');
  resetButton.addEventListener('click', doFormReset);
  setResetButtonVisiblity({
    target: overlayInput
  });
  resultsContainer = searchOverlay.querySelector('.suggestions-wrapper');
  resultsContainer.addEventListener('scroll', dismissKeyboard);
  pageScrollManager.preventPageScroll();

  var focusSearch = function focusSearch() {
    overlayInput.focus();
    searchOverlay.removeEventListener('animationend', focusSearch);
  };

  searchOverlay.addEventListener('animationend', focusSearch); // Do the initial population of the search panel

  if (overlayInput.value.trim().length >= MIN_CHARS) {
    retrieveSuggestions({
      target: overlayInput
    });
  } else {
    fetchPopularSuggestions();
  }
}
/**
 * Append recommendation to search overlay on first time search overlay opened.
 */


function handleFirstRecommendation() {
  var recommendationClasses = ['recently-viewed', 'you-might-like', 'best-sellers'];
  checkRecommendation = false;
  $.each(recommendationClasses, function (index, recommendClass) {
    if ($('.search-suggestions.' + recommendClass).length === 0) {
      return;
    }

    var recommendedDiv = $('.' + recommendClass + '-search-suggestion');

    if (recommendedDiv.length > 0 && recommendedDiv.find('div').length > 0) {
      var endTime = Date.now() + 5000;
      var checkTimer = setInterval(function () {
        if (recommendedDiv.find('div').html().trim().length > 0 || Date.now() > endTime) {
          appendRecommendation(resultsContainer);
          clearInterval(checkTimer);
        }
      }, 1000);
    }
  });
}
/**
 * Opens up the search overlay, building it based on the searchOverlayTemplate HTML.
 * Bound to the triggering search input's 'focus' event.
 * @param {Event} evt The event object
 */


function openSearchOverlay(evt) {
  if (searchOverlay) {
    return;
  }

  if ($('.search-recommendations').is(':empty')) {
    $.ajax({
      url: RECOMMENDATIONS_ENDPOINT,
      method: 'GET',
      success: function success(data) {
        if (data !== null) {
          $('.search-recommendations').append(data);
          showSearchOverlay(evt);
        }
      }
    });
  } else {
    showSearchOverlay(evt);
  }
}
/**
 * Dismisses the search overlay, with a fade out effect, driven by CSS on the .search-overlay element.
 */


function dismissSearchOverlay() {
  searchOverlay.addEventListener('animationend', closeSearchOverlay);
  [searchOverlay, scrim].forEach(function (el) {
    return el.classList.add('exit');
  });
}
/**
 * Destroys the search overlay.
 * Called after the fade out completes in the `dismissSearchOverlay` function
 */


function closeSearchOverlay() {
  if (!searchOverlay) {
    return;
  }

  pageScrollManager.allowPageScroll();
  [searchOverlay, scrim].forEach(function (el) {
    return el.parentNode.removeChild(el);
  });
  searchOverlay = null;
}
/**
 * Sets up all search forms present on the page.
 */


base.initSearch = function () {
  if (searchOverlayTemplate === null) {
    return;
  }

  headerSearchForms.forEach(function (form) {
    var input = form.querySelector('input[name="q"]');
    var reset = form.querySelector('button[type="reset"]');
    form.addEventListener('reset', setResetButtonVisiblity);
    input.addEventListener('focus', openSearchOverlay);
    input.addEventListener('input', mirrorQueryInput);
    input.addEventListener('input', setResetButtonVisiblity);
    reset.addEventListener('click', doFormReset);
  });
  var searchButtons = document.querySelectorAll('.site-search .search-form button[name="search-button"]');

  if (searchButtons.length > 0) {
    for (var i = 0; i < searchButtons.length; i++) {
      searchButtons[i].addEventListener('click', function (evt) {
        evt.preventDefault();
        openSearchOverlay(evt);
      });
    }
  }
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/storeLocator/storeLocator.js":
/*!*****************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/storeLocator/storeLocator.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* globals google */


var base = __webpack_require__(/*! core/storeLocator/storeLocator */ "../hbc_core/cartridges/app_hbc_core/cartridge/client/default/js/storeLocator/storeLocator.js");

var baseBase = __webpack_require__(/*! ../product/base */ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/product/base.js");
/**
 * Renders the results of the search and updates the map
 * @param {Object} data - Response from the server
 */


function updateStoresResults(data) {
  var $resultsDiv = $('.results');
  var $mapDiv = $('.map-canvas');
  var hasResults = data.stores.length > 0;

  if (!hasResults) {
    $('.store-locator-no-results').show();
  } else {
    $('.store-locator-no-results').hide();
  }

  $resultsDiv.empty().data('has-results', hasResults).data('radius', data.radius).data('search-key', data.searchKey);
  $mapDiv.attr('data-locations', data.locations);

  if ($mapDiv.data('has-google-api')) {
    maps();
  } else {
    $('.store-locator-no-apiKey').show();
  }

  if (data.storesResultsHtml) {
    $resultsDiv.append(data.storesResultsHtml);
  }
}
/**
 * Search for stores with new zip code
 * @param {HTMLElement} element - the target html element
 * @returns {boolean} false to prevent default event
 */


function search(element) {
  var dialog = element.closest('.in-store-inventory-dialog');
  var spinner = dialog.length ? dialog.spinner() : $.spinner();
  spinner.start();
  var $form = element.closest('.store-locator');
  var radius = $('#inStoreInventoryModal').find('#radius option:selected').text();

  if (radius !== undefined && radius.length) {
    radius = radius.split(' ')[0];
  }

  var url = $form.attr('action');
  var urlParams = {
    radius: radius
  };

  if ($('.btn-storelocator-search').data('product-pliuuid') !== undefined && $('.btn-storelocator-search').data('product-pliuuid') !== 'null') {
    urlParams.source = 'cart';
  }

  var payload = $form.is('form') ? $form.serialize() : {
    postalCode: $form.find('[name="postalCode"]').val()
  }; // extra payload carrying the product ids with quantity in json serialized

  if (element.data('products') && element.data('products') !== undefined && element.data('products') !== 'null' && element.data('products').indexOf('undefined') === -1) {
    payload.products = element.data('products');
  }

  url = appendToUrl(url, urlParams);
  $.ajax({
    url: url,
    type: $form.attr('method'),
    data: payload,
    dataType: 'json',
    success: function success(data) {
      spinner.stop();

      if ($('body').find('.product-detail').length) {
        $('body').trigger('adobe:bopusSearch', data);
      }

      if ($('body').find('.prdt-cart-details').length) {
        var pid = $('.btn-storelocator-search').data('search-pid');
        data.pid = pid;
        $('body').trigger('adobe:bopusCartSearch', data);
      }

      updateStoresResults(data);
      $('.select-store').prop('disabled', true);
    }
  });
  return false;
}
/**
 * appends params to a url
 * @param {string} url - Original url
 * @param {Object} params - Parameters to append
 * @returns {string} result url with appended parameters
 */


function appendToUrl(url, params) {
  var newUrl = url;
  newUrl += (newUrl.indexOf('?') !== -1 ? '&' : '?') + Object.keys(params).map(function (key) {
    return key + '=' + encodeURIComponent(params[key]);
  }).join('&');
  return newUrl;
}
/**
 * Removes the specified parameter from url
 *
 * @param {string} url - the url
 * @param {string} parameter - parameter to be removed
 * @returns {string} url - url after removing the parameter
 */


function removeURLParameter(url, parameter) {
  // prefer to use l.search if you have a location/link object
  var urlparts = url.split('?');

  if (urlparts.length === 2 && urlparts[1] === '') {
    urlparts = url.slice(0, -1).split('?');
  }

  if (urlparts.length >= 2) {
    var prefix = encodeURIComponent(parameter) + '=';
    var pars = urlparts[1].split(/[&;]/g); // reverse iteration as may be destructive

    for (var i = pars.length; i-- > 0;) {
      // idiom for string.startsWith
      if (pars[i].lastIndexOf(prefix, 0) !== -1) {
        pars.splice(i, 1);
      }
    } // eslint-disable-next-line no-param-reassign


    url = urlparts[0] + '?' + pars.join('&');
    return url;
  }

  return url;
}
/**
 * remove the store selector modal when a store is selected out of results
 */


function removeSelectStoreModal() {
  if ($('#inStoreInventoryModal').length > 0) {
    $('#inStoreInventoryModal').modal('hide');
    $('#inStoreInventoryModal').remove();
    $('#inStoreInventoryModal').attr('aria-modal', 'false');
  }
}
/**
 * Sets the data attribute of Quantity Selector to save its original state.
 * @param {HTMLElement} $quantitySelect - The Quantity Select Element
 */


function setOriginalQuantitySelect($quantitySelect) {
  if (!$quantitySelect.data('originalHTML')) {
    $quantitySelect.data('originalHTML', $quantitySelect.html());
  } // If it's already there, don't re-set it

}
/**
 * Update quantity options. Only display quantity options that are available for the store.
 * @param {sring} searchPID - The product ID of the selected product.
 * @param {number} storeId - The store ID selected for in store pickup.
 * @param {number} storeDistance - The store distance of the store selected for in store pickup.
 * @param {string} searchPlid - unique id of an item
 */


function updateQuantityOptions(searchPID, storeId, storeDistance, searchPlid) {
  var selectorPrefix = '.product-detail[data-pid="' + searchPID + '"]';
  var quantitySelector = selectorPrefix + ' .quantity-select';
  setOriginalQuantitySelect($(quantitySelector));
  var requestData = {
    pid: searchPID,
    quantitySelected: $(quantitySelector).val(),
    storeId: storeId,
    storeDistance: storeDistance,
    searchPlid: searchPlid,
    savetosession: true
  };
  $.ajax({
    url: $('.store-change-link').data('setstore'),
    data: requestData,
    method: 'GET',
    success: function success(response) {
      var $productContainer = $('.product-detail[data-pid="' + searchPID + '"]');
      $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {
        product: response.product,
        $productContainer: $productContainer
      }); // update shipping option elements

      baseBase.updateShippingOptions(response, $productContainer);
    }
  });
}
/**
 * Updates the store name
 * @param {Object} data - Contains the store info
 */


function updateStoreContent(data) {
  var storeId = data.storeID;
  var storeDistance = data.storeDistance;
  var storeName = data.name.toLowerCase();
  $.spinner().start();
  var setStoreUrl = data.url; // form data

  var form = {
    storeId: storeId,
    storeDistance: storeDistance,
    ajax: true,
    savetosession: true,
    noviewdata: true
  };

  if (setStoreUrl) {
    $.ajax({
      url: setStoreUrl,
      data: form,
      success: function success(data) {
        //eslint-disable-line
        var storeRefine = $('.change-store').parent().closest('.store-refine');
        var valueSelected = $('input[name="refinestore"]:checked').val();
        $('.change-store').html(storeName);
        var dataUrl = storeRefine.find('input[id="bopisCheck"]').data('href');
        dataUrl = removeURLParameter(dataUrl, 'storeid');
        dataUrl = removeURLParameter(dataUrl, 'srchsrc');
        dataUrl = appendToUrl(dataUrl, {
          storeid: storeId
        });
        storeRefine.find('input[id="bopisCheck"]').attr('data-href', dataUrl);
        $('input[id="bopisCheck"]').removeAttr('disabled');
        $('input[id="bopisCheck"]').siblings('label').find('span').html(data.bopisDefaultLabel);
        $('input[id="bopisCheck"]').trigger('click');
      },
      error: function error() {
        $.spinner().stop();
      }
    });
  }
}
/**
 * updates the store info on select of store from the modal.
 */


$('body').on('store:searchPage', function (e, data) {
  updateStoreContent(data); // if event invoke is from modal, updates store html

  removeSelectStoreModal(); // close modal on successful update
});
/**
 * CUSTOM EVENT
 * event handler triggered with the store selection on modal
 */

$('body').on('store:pdp', function (e, data) {
  var searchPID = $('.btn-storelocator-search').attr('data-search-pid');
  var searchPlid = $('.btn-storelocator-search').attr('data-product-pliuuid');
  var storeElement = $('.product-detail[data-pid="' + searchPID + '"]') === undefined ? $('.cart-options[data-pid="' + searchPID + '"]') : $('.product-detail[data-pid="' + searchPID + '"]'); // fall back from cart, pick product id

  var $changeStoreButton = $(storeElement).find('.change-store');
  $($changeStoreButton).data('postal', data.searchPostalCode);
  $($changeStoreButton).data('radius', data.searchRadius);
  updateQuantityOptions(searchPID, data.storeID, data.storeDistance, searchPlid);
  $('#inStoreInventoryModal').attr('data-event-trigger', 'store');
  $('#inStoreInventoryModal').modal('hide');
  $('#inStoreInventoryModal').remove();
  $('#inStoreInventoryModal').attr('aria-modal', 'false');
});
/**
 * CUSTOM EVENT TRIGGER
 * trigger a custom event when store is selected on the store locator modal
 */

base.updateSelectStoreButton = function () {
  $('body').on('change', '.select-store-input', function (e) {
    e.preventDefault();
    var selectedStore = $(':checked', '.results-card .results');
    var data = {
      storeID: selectedStore.val(),
      searchRadius: $('#radius').val(),
      searchPostalCode: $('.results').data('search-key') !== undefined ? $('.results').data('search-key').postalCode : null,
      storeDetailsHtml: selectedStore.siblings('label').find('.store-details').html(),
      storeDistance: selectedStore.data('store-distance') !== undefined ? selectedStore.data('store-distance') : '',
      event: e
    };
    /** ** CUSTOM EVENT TRIGGER ****/

    if ($('.btn-storelocator-search').data('product-pliuuid') !== undefined && $('.btn-storelocator-search').data('product-pliuuid') !== 'null') {
      // store select cart
      if ($('.btn-storelocator-search').data('shipto-selected') === 'shipto') {
        // update pli with store info if 'Ship to' is toggled
        data.pliUUID = $('.btn-storelocator-search').data('product-pliuuid');
        data.storeName = selectedStore.data('store-info') !== undefined ? selectedStore.data('store-info').name : null;
        data.inStoreFieldLabel = $('.btn-storelocator-search').data('instorefieldlabel');
        data.storeId = selectedStore.val();
        data.prodid = $('.btn-storelocator-search').data('search-pid');
        $('body').trigger('store:changeStore', data);
      } else if ($('.btn-storelocator-search').data('shipto-selected') === 'instore') {
        // // update pli with store info if 'Pick up in store' is toggled
        data.storeId = selectedStore.val();
        data.pliUUID = $('.btn-storelocator-search').data('product-pliuuid');
        data.url = $('.cart-options').data('toggle-url');
        data.savefromModal = true;
        data.selected = 'instore';
        data.prodid = $('.btn-storelocator-search').data('search-pid');
        $('body').trigger('store:cart', data);

        if ($('.btn-storelocator-search').closest('.prdt-cart-details').length) {
          $('body').trigger('adobe:bopusCartSelect', data);
        }
      }
    } else if ($('.btn-storelocator-search').data('source') === 'search') {
      // store select search page
      data.url = $('.store-refine').data('storeurl');
      data.name = selectedStore.data('store-info').name;
      updateStoreContent(data);
      removeSelectStoreModal();
    } else if ($('.btn-storelocator-search').data('search-pid') != undefined) {
      // store select PDP
      $('body').trigger('store:pdp', data);
    }
  });
};
/**
 * CLICK EVENT
 * event handler triggered with the click of change store in PDP
 */


base.setMyHomeStore = function () {
  $('body').on('click', 'a.set-my-store:not(.no-click)', function (e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    var url = e.target.href;
    var storeId = e.target.closest('.store-details').dataset.storeId;
    var storeDistance = e.target.parentElement.dataset.storeDistance;

    if (storeId && storeDistance) {
      $.spinner().start();
      url = appendToUrl(url, {
        storeID: storeId,
        distance: storeDistance
      });
      $.ajax({
        url: url,
        success: function success(data) {
          [].forEach.call(document.querySelectorAll('.set-my-store'), function (el) {
            if (el !== e.target && el.matches('span')) {
              // Swap the previous "my store" span for a link
              var link = document.createElement('a');
              link.setAttribute('class', 'set-my-store underline');
              link.href = el.parentElement.dataset.href;
              link.innerText = data.otherStoreMsg;
              el.parentElement.appendChild(link);
              el.parentElement.removeChild(el);
            } else if (el === e.target) {
              // Swap out the clicked on link for a span indicating the home store
              var span = document.createElement('span');
              span.setAttribute('class', 'set-my-store home-store');
              span.innerText = data.myStoreMsg;
              el.parentElement.appendChild(span);
              el.parentElement.removeChild(el);
            }
          });
          $.spinner().stop();
        },
        error: function error() {
          $.spinner().stop();
        }
      });
    }
  });
};
/**
 * CLICK AND SUBMIT EVENT
 * event handler triggered with store search on store locator modal
 */


base.search = function () {
  $('.store-locator-container form.store-locator').submit(function (e) {
    e.preventDefault();
    search($(this));
  });
  $('.store-locator-container .btn-storelocator-search[type="button"]').click(function (e) {
    e.preventDefault();
    var input = $('#inStoreInventoryModal').find('#store-postal-code');
    var inputVal = input.val(); // Some special characters to be allowed for City Search. SFDEV-7932

    var validate = /^[0-9]{5}(-[0-9]{4})?$/.test(inputVal) === false;

    if (validate) {
      $('#inStoreInventoryModal').find('.store-locator').addClass('error');

      if ($(input).next('span').length === 0) {
        $("<span class='invalid'></span>").insertAfter(input);
      }

      var formData = {};
      formData.errorFields = ['postalCode'];
      formData.formName = 'bopus search';
      $('body').trigger('adobeTagManager:formError', formData);
    } else if (inputVal === '') {
      $('#inStoreInventoryModal').find('.store-locator').addClass('error');
      input.focus();
      var formData = {};
      formData.errorFields = ['postalCode'];
      formData.formName = 'bopus search';
      $('body').trigger('adobeTagManager:formError', formData);
    } else {
      search($(this));
      $('#inStoreInventoryModal').find('.store-locator').removeClass('error');
      $(input).next('span').remove();
    }
  });
};

module.exports = base;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/htmlFragments.js":
/*!**********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/htmlFragments.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  /**
   * Creates a document fragment out of an HTML string
   * @param {String} htmlStr A string of HTML
   * @returns a Document Fragment representing the HTML string
   */
  createFragment: function createFragment(htmlStr) {
    return document.createRange().createContextualFragment(htmlStr.trim());
  },

  /**
   * Creates a string out of a document fragment. Strips out comment nodes.
   * @param {Object} fragment A document fragment
   * @returns an HTML string representing the document fragment.
   */
  fragmentToString: function fragmentToString(fragment) {
    var nodes = [].slice.call(fragment.childNodes); // Array from the node list.

    return nodes.filter(function (node) {
      return node.nodeType !== 8;
    }) // Strip out comments
    .reduce(function (result, node) {
      return result + (node.outerHTML || node.nodeValue);
    }, ''); // Convert it to a string.
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/pageScrollManager.js":
/*!**************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/pageScrollManager.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var bodyObserver;
module.exports = {
  /**
   * Stops the page from scrolling.
   */
  preventPageScroll: function preventPageScroll() {
    var style = document.body.style;
    var scrollY = window.scrollY;
    style.position = 'fixed';
    style.top = "-".concat(scrollY, "px");
    style.left = '0';
    style.right = '0';

    var enforceScrollbarVisibility = function enforceScrollbarVisibility() {
      if (document.body.scrollHeight > window.innerHeight) {
        style.overflowY = 'scroll'; // Force scrollbar track to remain to prevent width shift.
      }
    };

    var callback = function callback(mutationsList) {
      var _iterator = _createForOfIteratorHelper(mutationsList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var mutation = _step.value;

          if (mutation.type === 'attributes' && mutation.attributeName === 'style' && document.body.style.overflowY !== 'scroll') {
            enforceScrollbarVisibility();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };

    bodyObserver = bodyObserver || new MutationObserver(callback);
    bodyObserver.observe(document.body, {
      attributes: true
    });
    enforceScrollbarVisibility();
  },

  /**
   * Allows the page to scroll, resetting the scroll to where it was before if applicable.
   */
  allowPageScroll: function allowPageScroll() {
    var style = document.body.style;
    var scrollY = style.top;
    ['position', 'top', 'left', 'right', 'overflowY'].forEach(function (property) {
      return style[property] = '';
    });
    window.scrollTo(0, parseInt(scrollY || '0') * -1);
    bodyObserver.disconnect();
  }
};

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/scrollDirection.js":
/*!************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/scrollDirection.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Scroll Direction detection
 * Sets the `data-scrolldir` attribute on the `html` element to `up` or `down`
 *
 *  Code borrowed from https://github.com/yowainwright/scrolldir
 */


var attribute = 'data-scrolldir';
var dir = 'down'; // 'up' or 'down'

var thresholdPixels = 64; // Ignore moves smaller than this.

var el = document.documentElement;
var win = window;
var body = document.body;
var historyLength = 32; // Ticks to keep in history.

var historyMaxAge = 512; // History data time-to-live (ms).

var history = Array(historyLength);
var e; // last scroll event

var pivot; // "high-water mark"

var pivotTime = 0;

function tick() {
  var y = win.scrollY || win.pageYOffset;
  var t = e.timeStamp;
  var furthest = dir === 'down' ? Math.max : Math.min; // Apply bounds to handle rubber banding

  var yMax = body.scrollHeight - win.innerHeight;
  y = Math.max(0, y);
  y = Math.min(yMax, y); // Update history

  history.unshift({
    y: y,
    t: t
  });
  history.pop(); // Are we continuing in the same direction?

  if (y === furthest(pivot, y)) {
    // Update "high-water mark" for current direction
    pivotTime = t;
    pivot = y;
    return;
  } // else we have backed off high-water mark
  // Apply max age to find current reference point


  var cutoffTime = t - historyMaxAge;

  if (cutoffTime > pivotTime) {
    pivot = y;

    for (var i = 0; i < historyLength; i += 1) {
      if (!history[i] || history[i].t < cutoffTime) break;
      pivot = furthest(pivot, history[i].y);
    }
  } // Have we exceeded threshold?


  if (Math.abs(y - pivot) > thresholdPixels) {
    pivot = y;
    pivotTime = t;
    dir = dir === 'down' ? 'up' : 'down';
    el.setAttribute(attribute, dir);

    if (dir === 'down') {
      $(document).trigger('page:scrollDown');
    } else {
      $(document).trigger('page:scrollUp');
    }
  }
}

function handler(event) {
  e = event;
  return win.requestAnimationFrame(tick);
}

function scrollDir(opts) {
  if (opts) {
    if (opts.attribute) attribute = opts.attribute;
    if (opts.el) el = opts.el;
    if (opts.win) win = opts.win;
    if (opts.dir) dir = opts.dir;
    if (opts.thresholdPixels) thresholdPixels = opts.thresholdPixels; // If opts.off, turn it off
    // - set html[data-scrolldir="off"]
    // - remove the event listener

    if (opts.off === true) {
      el.setAttribute(attribute, 'off');
      return win.removeEventListener('scroll', handler);
    }
  } // else, turn it on
  // - set html[data-scrolldir="down"]
  // - add the event listener


  pivot = win.scrollY || win.pageYOffset;
  el.setAttribute(attribute, dir);
  return win.addEventListener('scroll', handler);
}

module.exports = scrollDir;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/viewportHeightCalculator.js":
/*!*********************************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/util/viewportHeightCalculator.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var debounce = __webpack_require__(/*! lodash/debounce */ "../sfra/node_modules/lodash/debounce.js");
/**
 * Sets a style property on the document equal to 1% of the pixel height of the window.
 * That value is referenced in CSS when we need more accurate viewport height than what vh units give us.
 * This is particularly useful in mobile Safari, where the vh units don't take browser chrome into account.
 */


function calculateViewportHeight() {
  var vh = window.innerHeight / 100;
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
}

window.addEventListener('resize', debounce(calculateViewportHeight, 20));
module.exports = calculateViewportHeight;

/***/ }),

/***/ "./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/zipCodeValidator.js":
/*!********************************************************************************************!*\
  !*** ./cartridges/app_hbc_saksfifthavenue/cartridge/client/default/js/zipCodeValidator.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  validateZip: function validateZip($target) {
    $target.on('keyup', function () {
      var zipCode = $(this).val(); //For US zip code only

      if (/^[0-9]{5}(-[0-9]{4})?$/.test(zipCode.substring(0, 5)) && $(this).attr('pattern') === '(^[0-9]{5}(-[0-9]{4})?$)') {
        if (zipCode.length === 6 && zipCode.indexOf('-') === 5) {
          return;
        }

        if (zipCode.length === 7 && zipCode.lastIndexOf('-') === 6) {
          $(this).val(zipCode.substring(0, zipCode.length - 1));
          return;
        } //For replacing/adding - after 6 digits


        if (zipCode.length >= 6 && zipCode.indexOf('-') === -1) {
          var formattedString = zipCode.replace(/ /g, '').replace(/(\w{5})/, '$1-').replace(/(-+)/, '-').trim();
          $(this).val(formattedString);
        }
      }
    });
  }
};

/***/ }),

/***/ "./node_modules/focus-visible/dist/focus-visible.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/focus-visible/dist/focus-visible.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?t():undefined}(0,function(){"use strict";function e(e){var t=!0,n=!1,o=null,d={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function u(e){t=!1}function a(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(e){e.target.nodeName&&"html"===e.target.nodeName.toLowerCase()||(t=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",function(n){n.metaKey||n.altKey||n.ctrlKey||(i(e.activeElement)&&s(e.activeElement),t=!0)},!0),document.addEventListener("mousedown",u,!0),document.addEventListener("pointerdown",u,!0),document.addEventListener("touchstart",u,!0),document.addEventListener("visibilitychange",function(e){"hidden"===document.visibilityState&&(n&&(t=!0),a())},!0),a(),e.addEventListener("focus",function(e){var n,o,u;i(e.target)&&(t||(n=e.target,o=n.type,"INPUT"===(u=n.tagName)&&d[o]&&!n.readOnly||"TEXTAREA"===u&&!n.readOnly||n.isContentEditable))&&s(e.target)},!0),e.addEventListener("blur",function(e){var t;i(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(n=!0,window.clearTimeout(o),o=window.setTimeout(function(){n=!1},100),(t=e.target).hasAttribute("data-focus-visible-added")&&(t.classList.remove("focus-visible"),t.removeAttribute("data-focus-visible-added")))},!0),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&e.host?e.host.setAttribute("data-js-focus-visible",""):e.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var t;window.applyFocusVisiblePolyfill=e;try{t=new CustomEvent("focus-visible-polyfill-ready")}catch(e){(t=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(t)}"undefined"!=typeof document&&e(document)});
//# sourceMappingURL=focus-visible.min.js.map


/***/ }),

/***/ "./node_modules/hoverintent/dist/hoverintent.min.js":
/*!**********************************************************!*\
  !*** ./node_modules/hoverintent/dist/hoverintent.min.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(e,t){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var n; }}(this,function(e){"use strict";var t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};e.exports=function(e,n,o){function i(e,t){return y&&(y=clearTimeout(y)),b=0,p?void 0:o.call(e,t)}function r(e){m=e.clientX,d=e.clientY}function u(e,t){if(y&&(y=clearTimeout(y)),Math.abs(h-m)+Math.abs(E-d)<x.sensitivity)return b=1,p?void 0:n.call(e,t);h=m,E=d,y=setTimeout(function(){u(e,t)},x.interval)}function s(t){return L=!0,y&&(y=clearTimeout(y)),e.removeEventListener("mousemove",r,!1),1!==b&&(h=t.clientX,E=t.clientY,e.addEventListener("mousemove",r,!1),y=setTimeout(function(){u(e,t)},x.interval)),this}function c(t){return L=!1,y&&(y=clearTimeout(y)),e.removeEventListener("mousemove",r,!1),1===b&&(y=setTimeout(function(){i(e,t)},x.timeout)),this}function v(t){L||(p=!0,n.call(e,t))}function a(t){!L&&p&&(p=!1,o.call(e,t))}function f(){e.addEventListener("focus",v,!1),e.addEventListener("blur",a,!1)}function l(){e.removeEventListener("focus",v,!1),e.removeEventListener("blur",a,!1)}var m,d,h,E,L=!1,p=!1,T={},b=0,y=0,x={sensitivity:7,interval:100,timeout:0,handleFocus:!1};return T.options=function(e){var n=e.handleFocus!==x.handleFocus;return x=t({},x,e),n&&(x.handleFocus?f():l()),T},T.remove=function(){e&&(e.removeEventListener("mouseover",s,!1),e.removeEventListener("mouseout",c,!1),l())},e&&(e.addEventListener("mouseover",s,!1),e.addEventListener("mouseout",c,!1)),T}});


/***/ }),

/***/ "./node_modules/jquery-mask-plugin/dist/jquery.mask.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery-mask-plugin/dist/jquery.mask.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// jQuery Mask Plugin v1.14.16
// github.com/igorescobar/jQuery-Mask-Plugin
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,n,f){a instanceof String&&(a=String(a));for(var p=a.length,k=0;k<p;k++){var b=a[k];if(n.call(f,b,k,a))return{i:k,v:b}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,n,f){a!=Array.prototype&&a!=Object.prototype&&(a[n]=f.value)};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);
$jscomp.polyfill=function(a,n,f,p){if(n){f=$jscomp.global;a=a.split(".");for(p=0;p<a.length-1;p++){var k=a[p];k in f||(f[k]={});f=f[k]}a=a[a.length-1];p=f[a];n=n(p);n!=p&&null!=n&&$jscomp.defineProperty(f,a,{configurable:!0,writable:!0,value:n})}};$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,f){return $jscomp.findInternal(this,a,f).v}},"es6","es3");
(function(a,n,f){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined})(function(a){var n=function(b,d,e){var c={invalid:[],getCaret:function(){try{var a=0,r=b.get(0),h=document.selection,d=r.selectionStart;if(h&&-1===navigator.appVersion.indexOf("MSIE 10")){var e=h.createRange();e.moveStart("character",-c.val().length);a=e.text.length}else if(d||"0"===d)a=d;return a}catch(C){}},setCaret:function(a){try{if(b.is(":focus")){var c=
b.get(0);if(c.setSelectionRange)c.setSelectionRange(a,a);else{var g=c.createTextRange();g.collapse(!0);g.moveEnd("character",a);g.moveStart("character",a);g.select()}}}catch(B){}},events:function(){b.on("keydown.mask",function(a){b.data("mask-keycode",a.keyCode||a.which);b.data("mask-previus-value",b.val());b.data("mask-previus-caret-pos",c.getCaret());c.maskDigitPosMapOld=c.maskDigitPosMap}).on(a.jMaskGlobals.useInput?"input.mask":"keyup.mask",c.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){b.keydown().keyup()},
100)}).on("change.mask",function(){b.data("changed",!0)}).on("blur.mask",function(){f===c.val()||b.data("changed")||b.trigger("change");b.data("changed",!1)}).on("blur.mask",function(){f=c.val()}).on("focus.mask",function(b){!0===e.selectOnFocus&&a(b.target).select()}).on("focusout.mask",function(){e.clearIfNotMatch&&!k.test(c.val())&&c.val("")})},getRegexMask:function(){for(var a=[],b,c,e,t,f=0;f<d.length;f++)(b=l.translation[d.charAt(f)])?(c=b.pattern.toString().replace(/.{1}$|^.{1}/g,""),e=b.optional,
(b=b.recursive)?(a.push(d.charAt(f)),t={digit:d.charAt(f),pattern:c}):a.push(e||b?c+"?":c)):a.push(d.charAt(f).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));a=a.join("");t&&(a=a.replace(new RegExp("("+t.digit+"(.*"+t.digit+")?)"),"($1)?").replace(new RegExp(t.digit,"g"),t.pattern));return new RegExp(a)},destroyEvents:function(){b.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask "))},val:function(a){var c=b.is("input")?"val":"text";if(0<arguments.length){if(b[c]()!==a)b[c](a);
c=b}else c=b[c]();return c},calculateCaretPosition:function(a){var d=c.getMasked(),h=c.getCaret();if(a!==d){var e=b.data("mask-previus-caret-pos")||0;d=d.length;var g=a.length,f=a=0,l=0,k=0,m;for(m=h;m<d&&c.maskDigitPosMap[m];m++)f++;for(m=h-1;0<=m&&c.maskDigitPosMap[m];m--)a++;for(m=h-1;0<=m;m--)c.maskDigitPosMap[m]&&l++;for(m=e-1;0<=m;m--)c.maskDigitPosMapOld[m]&&k++;h>g?h=10*d:e>=h&&e!==g?c.maskDigitPosMapOld[h]||(e=h,h=h-(k-l)-a,c.maskDigitPosMap[h]&&(h=e)):h>e&&(h=h+(l-k)+f)}return h},behaviour:function(d){d=
d||window.event;c.invalid=[];var e=b.data("mask-keycode");if(-1===a.inArray(e,l.byPassKeys)){e=c.getMasked();var h=c.getCaret(),g=b.data("mask-previus-value")||"";setTimeout(function(){c.setCaret(c.calculateCaretPosition(g))},a.jMaskGlobals.keyStrokeCompensation);c.val(e);c.setCaret(h);return c.callbacks(d)}},getMasked:function(a,b){var h=[],f=void 0===b?c.val():b+"",g=0,k=d.length,n=0,p=f.length,m=1,r="push",u=-1,w=0;b=[];if(e.reverse){r="unshift";m=-1;var x=0;g=k-1;n=p-1;var A=function(){return-1<
g&&-1<n}}else x=k-1,A=function(){return g<k&&n<p};for(var z;A();){var y=d.charAt(g),v=f.charAt(n),q=l.translation[y];if(q)v.match(q.pattern)?(h[r](v),q.recursive&&(-1===u?u=g:g===x&&g!==u&&(g=u-m),x===u&&(g-=m)),g+=m):v===z?(w--,z=void 0):q.optional?(g+=m,n-=m):q.fallback?(h[r](q.fallback),g+=m,n-=m):c.invalid.push({p:n,v:v,e:q.pattern}),n+=m;else{if(!a)h[r](y);v===y?(b.push(n),n+=m):(z=y,b.push(n+w),w++);g+=m}}a=d.charAt(x);k!==p+1||l.translation[a]||h.push(a);h=h.join("");c.mapMaskdigitPositions(h,
b,p);return h},mapMaskdigitPositions:function(a,b,d){a=e.reverse?a.length-d:0;c.maskDigitPosMap={};for(d=0;d<b.length;d++)c.maskDigitPosMap[b[d]+a]=1},callbacks:function(a){var g=c.val(),h=g!==f,k=[g,a,b,e],l=function(a,b,c){"function"===typeof e[a]&&b&&e[a].apply(this,c)};l("onChange",!0===h,k);l("onKeyPress",!0===h,k);l("onComplete",g.length===d.length,k);l("onInvalid",0<c.invalid.length,[g,a,b,c.invalid,e])}};b=a(b);var l=this,f=c.val(),k;d="function"===typeof d?d(c.val(),void 0,b,e):d;l.mask=
d;l.options=e;l.remove=function(){var a=c.getCaret();l.options.placeholder&&b.removeAttr("placeholder");b.data("mask-maxlength")&&b.removeAttr("maxlength");c.destroyEvents();c.val(l.getCleanVal());c.setCaret(a);return b};l.getCleanVal=function(){return c.getMasked(!0)};l.getMaskedVal=function(a){return c.getMasked(!1,a)};l.init=function(g){g=g||!1;e=e||{};l.clearIfNotMatch=a.jMaskGlobals.clearIfNotMatch;l.byPassKeys=a.jMaskGlobals.byPassKeys;l.translation=a.extend({},a.jMaskGlobals.translation,e.translation);
l=a.extend(!0,{},l,e);k=c.getRegexMask();if(g)c.events(),c.val(c.getMasked());else{e.placeholder&&b.attr("placeholder",e.placeholder);b.data("mask")&&b.attr("autocomplete","off");g=0;for(var f=!0;g<d.length;g++){var h=l.translation[d.charAt(g)];if(h&&h.recursive){f=!1;break}}f&&b.attr("maxlength",d.length).data("mask-maxlength",!0);c.destroyEvents();c.events();g=c.getCaret();c.val(c.getMasked());c.setCaret(g)}};l.init(!b.is("input"))};a.maskWatchers={};var f=function(){var b=a(this),d={},e=b.attr("data-mask");
b.attr("data-mask-reverse")&&(d.reverse=!0);b.attr("data-mask-clearifnotmatch")&&(d.clearIfNotMatch=!0);"true"===b.attr("data-mask-selectonfocus")&&(d.selectOnFocus=!0);if(p(b,e,d))return b.data("mask",new n(this,e,d))},p=function(b,d,e){e=e||{};var c=a(b).data("mask"),f=JSON.stringify;b=a(b).val()||a(b).text();try{return"function"===typeof d&&(d=d(b)),"object"!==typeof c||f(c.options)!==f(e)||c.mask!==d}catch(w){}},k=function(a){var b=document.createElement("div");a="on"+a;var e=a in b;e||(b.setAttribute(a,
"return;"),e="function"===typeof b[a]);return e};a.fn.mask=function(b,d){d=d||{};var e=this.selector,c=a.jMaskGlobals,f=c.watchInterval;c=d.watchInputs||c.watchInputs;var k=function(){if(p(this,b,d))return a(this).data("mask",new n(this,b,d))};a(this).each(k);e&&""!==e&&c&&(clearInterval(a.maskWatchers[e]),a.maskWatchers[e]=setInterval(function(){a(document).find(e).each(k)},f));return this};a.fn.masked=function(a){return this.data("mask").getMaskedVal(a)};a.fn.unmask=function(){clearInterval(a.maskWatchers[this.selector]);
delete a.maskWatchers[this.selector];return this.each(function(){var b=a(this).data("mask");b&&b.remove().removeData("mask")})};a.fn.cleanVal=function(){return this.data("mask").getCleanVal()};a.applyDataMask=function(b){b=b||a.jMaskGlobals.maskElements;(b instanceof a?b:a(b)).filter(a.jMaskGlobals.dataMaskAttr).each(f)};k={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,keyStrokeCompensation:10,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&
k("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};a.jMaskGlobals=a.jMaskGlobals||{};k=a.jMaskGlobals=a.extend(!0,{},k,a.jMaskGlobals);k.dataMask&&a.applyDataMask();setInterval(function(){a.jMaskGlobals.watchDataMask&&a.applyDataMask()},k.watchInterval)},window.jQuery,window.Zepto);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js":
/*!******************************************************************!*\
  !*** ./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * perfect-scrollbar v1.5.0
 * Copyright 2020 Hyunje Jun, MDBootstrap and Contributors
 * Licensed under MIT
 */

(function (global, factory) {
   true ? module.exports = factory() :
  undefined;
}(this, (function () { 'use strict';

  function get(element) {
    return getComputedStyle(element);
  }

  function set(element, obj) {
    for (var key in obj) {
      var val = obj[key];
      if (typeof val === 'number') {
        val = val + "px";
      }
      element.style[key] = val;
    }
    return element;
  }

  function div(className) {
    var div = document.createElement('div');
    div.className = className;
    return div;
  }

  var elMatches =
    typeof Element !== 'undefined' &&
    (Element.prototype.matches ||
      Element.prototype.webkitMatchesSelector ||
      Element.prototype.mozMatchesSelector ||
      Element.prototype.msMatchesSelector);

  function matches(element, query) {
    if (!elMatches) {
      throw new Error('No element matching method supported');
    }

    return elMatches.call(element, query);
  }

  function remove(element) {
    if (element.remove) {
      element.remove();
    } else {
      if (element.parentNode) {
        element.parentNode.removeChild(element);
      }
    }
  }

  function queryChildren(element, selector) {
    return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }
    );
  }

  var cls = {
    main: 'ps',
    rtl: 'ps__rtl',
    element: {
      thumb: function (x) { return ("ps__thumb-" + x); },
      rail: function (x) { return ("ps__rail-" + x); },
      consuming: 'ps__child--consume',
    },
    state: {
      focus: 'ps--focus',
      clicking: 'ps--clicking',
      active: function (x) { return ("ps--active-" + x); },
      scrolling: function (x) { return ("ps--scrolling-" + x); },
    },
  };

  /*
   * Helper methods
   */
  var scrollingClassTimeout = { x: null, y: null };

  function addScrollingClass(i, x) {
    var classList = i.element.classList;
    var className = cls.state.scrolling(x);

    if (classList.contains(className)) {
      clearTimeout(scrollingClassTimeout[x]);
    } else {
      classList.add(className);
    }
  }

  function removeScrollingClass(i, x) {
    scrollingClassTimeout[x] = setTimeout(
      function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },
      i.settings.scrollingThreshold
    );
  }

  function setScrollingClassInstantly(i, x) {
    addScrollingClass(i, x);
    removeScrollingClass(i, x);
  }

  var EventElement = function EventElement(element) {
    this.element = element;
    this.handlers = {};
  };

  var prototypeAccessors = { isEmpty: { configurable: true } };

  EventElement.prototype.bind = function bind (eventName, handler) {
    if (typeof this.handlers[eventName] === 'undefined') {
      this.handlers[eventName] = [];
    }
    this.handlers[eventName].push(handler);
    this.element.addEventListener(eventName, handler, false);
  };

  EventElement.prototype.unbind = function unbind (eventName, target) {
      var this$1 = this;

    this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
      if (target && handler !== target) {
        return true;
      }
      this$1.element.removeEventListener(eventName, handler, false);
      return false;
    });
  };

  EventElement.prototype.unbindAll = function unbindAll () {
    for (var name in this.handlers) {
      this.unbind(name);
    }
  };

  prototypeAccessors.isEmpty.get = function () {
      var this$1 = this;

    return Object.keys(this.handlers).every(
      function (key) { return this$1.handlers[key].length === 0; }
    );
  };

  Object.defineProperties( EventElement.prototype, prototypeAccessors );

  var EventManager = function EventManager() {
    this.eventElements = [];
  };

  EventManager.prototype.eventElement = function eventElement (element) {
    var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];
    if (!ee) {
      ee = new EventElement(element);
      this.eventElements.push(ee);
    }
    return ee;
  };

  EventManager.prototype.bind = function bind (element, eventName, handler) {
    this.eventElement(element).bind(eventName, handler);
  };

  EventManager.prototype.unbind = function unbind (element, eventName, handler) {
    var ee = this.eventElement(element);
    ee.unbind(eventName, handler);

    if (ee.isEmpty) {
      // remove
      this.eventElements.splice(this.eventElements.indexOf(ee), 1);
    }
  };

  EventManager.prototype.unbindAll = function unbindAll () {
    this.eventElements.forEach(function (e) { return e.unbindAll(); });
    this.eventElements = [];
  };

  EventManager.prototype.once = function once (element, eventName, handler) {
    var ee = this.eventElement(element);
    var onceHandler = function (evt) {
      ee.unbind(eventName, onceHandler);
      handler(evt);
    };
    ee.bind(eventName, onceHandler);
  };

  function createEvent(name) {
    if (typeof window.CustomEvent === 'function') {
      return new CustomEvent(name);
    } else {
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(name, false, false, undefined);
      return evt;
    }
  }

  function processScrollDiff(
    i,
    axis,
    diff,
    useScrollingClass,
    forceFireReachEvent
  ) {
    if ( useScrollingClass === void 0 ) useScrollingClass = true;
    if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

    var fields;
    if (axis === 'top') {
      fields = [
        'contentHeight',
        'containerHeight',
        'scrollTop',
        'y',
        'up',
        'down' ];
    } else if (axis === 'left') {
      fields = [
        'contentWidth',
        'containerWidth',
        'scrollLeft',
        'x',
        'left',
        'right' ];
    } else {
      throw new Error('A proper axis should be provided');
    }

    processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
  }

  function processScrollDiff$1(
    i,
    diff,
    ref,
    useScrollingClass,
    forceFireReachEvent
  ) {
    var contentHeight = ref[0];
    var containerHeight = ref[1];
    var scrollTop = ref[2];
    var y = ref[3];
    var up = ref[4];
    var down = ref[5];
    if ( useScrollingClass === void 0 ) useScrollingClass = true;
    if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

    var element = i.element;

    // reset reach
    i.reach[y] = null;

    // 1 for subpixel rounding
    if (element[scrollTop] < 1) {
      i.reach[y] = 'start';
    }

    // 1 for subpixel rounding
    if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
      i.reach[y] = 'end';
    }

    if (diff) {
      element.dispatchEvent(createEvent(("ps-scroll-" + y)));

      if (diff < 0) {
        element.dispatchEvent(createEvent(("ps-scroll-" + up)));
      } else if (diff > 0) {
        element.dispatchEvent(createEvent(("ps-scroll-" + down)));
      }

      if (useScrollingClass) {
        setScrollingClassInstantly(i, y);
      }
    }

    if (i.reach[y] && (diff || forceFireReachEvent)) {
      element.dispatchEvent(createEvent(("ps-" + y + "-reach-" + (i.reach[y]))));
    }
  }

  function toInt(x) {
    return parseInt(x, 10) || 0;
  }

  function isEditable(el) {
    return (
      matches(el, 'input,[contenteditable]') ||
      matches(el, 'select,[contenteditable]') ||
      matches(el, 'textarea,[contenteditable]') ||
      matches(el, 'button,[contenteditable]')
    );
  }

  function outerWidth(element) {
    var styles = get(element);
    return (
      toInt(styles.width) +
      toInt(styles.paddingLeft) +
      toInt(styles.paddingRight) +
      toInt(styles.borderLeftWidth) +
      toInt(styles.borderRightWidth)
    );
  }

  var env = {
    isWebKit:
      typeof document !== 'undefined' &&
      'WebkitAppearance' in document.documentElement.style,
    supportsTouch:
      typeof window !== 'undefined' &&
      ('ontouchstart' in window ||
        ('maxTouchPoints' in window.navigator &&
          window.navigator.maxTouchPoints > 0) ||
        (window.DocumentTouch && document instanceof window.DocumentTouch)),
    supportsIePointer:
      typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
    isChrome:
      typeof navigator !== 'undefined' &&
      /Chrome/i.test(navigator && navigator.userAgent),
  };

  function updateGeometry(i) {
    var element = i.element;
    var roundedScrollTop = Math.floor(element.scrollTop);
    var rect = element.getBoundingClientRect();

    i.containerWidth = Math.ceil(rect.width);
    i.containerHeight = Math.ceil(rect.height);
    i.contentWidth = element.scrollWidth;
    i.contentHeight = element.scrollHeight;

    if (!element.contains(i.scrollbarXRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }
      );
      element.appendChild(i.scrollbarXRail);
    }
    if (!element.contains(i.scrollbarYRail)) {
      // clean up and append
      queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }
      );
      element.appendChild(i.scrollbarYRail);
    }

    if (
      !i.settings.suppressScrollX &&
      i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
    ) {
      i.scrollbarXActive = true;
      i.railXWidth = i.containerWidth - i.railXMarginWidth;
      i.railXRatio = i.containerWidth / i.railXWidth;
      i.scrollbarXWidth = getThumbSize(
        i,
        toInt((i.railXWidth * i.containerWidth) / i.contentWidth)
      );
      i.scrollbarXLeft = toInt(
        ((i.negativeScrollAdjustment + element.scrollLeft) *
          (i.railXWidth - i.scrollbarXWidth)) /
          (i.contentWidth - i.containerWidth)
      );
    } else {
      i.scrollbarXActive = false;
    }

    if (
      !i.settings.suppressScrollY &&
      i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
    ) {
      i.scrollbarYActive = true;
      i.railYHeight = i.containerHeight - i.railYMarginHeight;
      i.railYRatio = i.containerHeight / i.railYHeight;
      i.scrollbarYHeight = getThumbSize(
        i,
        toInt((i.railYHeight * i.containerHeight) / i.contentHeight)
      );
      i.scrollbarYTop = toInt(
        (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /
          (i.contentHeight - i.containerHeight)
      );
    } else {
      i.scrollbarYActive = false;
    }

    if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
      i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
    }
    if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
      i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
    }

    updateCss(element, i);

    if (i.scrollbarXActive) {
      element.classList.add(cls.state.active('x'));
    } else {
      element.classList.remove(cls.state.active('x'));
      i.scrollbarXWidth = 0;
      i.scrollbarXLeft = 0;
      element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;
    }
    if (i.scrollbarYActive) {
      element.classList.add(cls.state.active('y'));
    } else {
      element.classList.remove(cls.state.active('y'));
      i.scrollbarYHeight = 0;
      i.scrollbarYTop = 0;
      element.scrollTop = 0;
    }
  }

  function getThumbSize(i, thumbSize) {
    if (i.settings.minScrollbarLength) {
      thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
    }
    if (i.settings.maxScrollbarLength) {
      thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
    }
    return thumbSize;
  }

  function updateCss(element, i) {
    var xRailOffset = { width: i.railXWidth };
    var roundedScrollTop = Math.floor(element.scrollTop);

    if (i.isRtl) {
      xRailOffset.left =
        i.negativeScrollAdjustment +
        element.scrollLeft +
        i.containerWidth -
        i.contentWidth;
    } else {
      xRailOffset.left = element.scrollLeft;
    }
    if (i.isScrollbarXUsingBottom) {
      xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;
    } else {
      xRailOffset.top = i.scrollbarXTop + roundedScrollTop;
    }
    set(i.scrollbarXRail, xRailOffset);

    var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };
    if (i.isScrollbarYUsingRight) {
      if (i.isRtl) {
        yRailOffset.right =
          i.contentWidth -
          (i.negativeScrollAdjustment + element.scrollLeft) -
          i.scrollbarYRight -
          i.scrollbarYOuterWidth -
          9;
      } else {
        yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
      }
    } else {
      if (i.isRtl) {
        yRailOffset.left =
          i.negativeScrollAdjustment +
          element.scrollLeft +
          i.containerWidth * 2 -
          i.contentWidth -
          i.scrollbarYLeft -
          i.scrollbarYOuterWidth;
      } else {
        yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
      }
    }
    set(i.scrollbarYRail, yRailOffset);

    set(i.scrollbarX, {
      left: i.scrollbarXLeft,
      width: i.scrollbarXWidth - i.railBorderXWidth,
    });
    set(i.scrollbarY, {
      top: i.scrollbarYTop,
      height: i.scrollbarYHeight - i.railBorderYWidth,
    });
  }

  function clickRail(i) {
    var element = i.element;

    i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });
    i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
      var positionTop =
        e.pageY -
        window.pageYOffset -
        i.scrollbarYRail.getBoundingClientRect().top;
      var direction = positionTop > i.scrollbarYTop ? 1 : -1;

      i.element.scrollTop += direction * i.containerHeight;
      updateGeometry(i);

      e.stopPropagation();
    });

    i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });
    i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
      var positionLeft =
        e.pageX -
        window.pageXOffset -
        i.scrollbarXRail.getBoundingClientRect().left;
      var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;

      i.element.scrollLeft += direction * i.containerWidth;
      updateGeometry(i);

      e.stopPropagation();
    });
  }

  function dragThumb(i) {
    bindMouseScrollHandler(i, [
      'containerWidth',
      'contentWidth',
      'pageX',
      'railXWidth',
      'scrollbarX',
      'scrollbarXWidth',
      'scrollLeft',
      'x',
      'scrollbarXRail' ]);
    bindMouseScrollHandler(i, [
      'containerHeight',
      'contentHeight',
      'pageY',
      'railYHeight',
      'scrollbarY',
      'scrollbarYHeight',
      'scrollTop',
      'y',
      'scrollbarYRail' ]);
  }

  function bindMouseScrollHandler(
    i,
    ref
  ) {
    var containerHeight = ref[0];
    var contentHeight = ref[1];
    var pageY = ref[2];
    var railYHeight = ref[3];
    var scrollbarY = ref[4];
    var scrollbarYHeight = ref[5];
    var scrollTop = ref[6];
    var y = ref[7];
    var scrollbarYRail = ref[8];

    var element = i.element;

    var startingScrollTop = null;
    var startingMousePageY = null;
    var scrollBy = null;

    function mouseMoveHandler(e) {
      if (e.touches && e.touches[0]) {
        e[pageY] = e.touches[0].pageY;
      }
      element[scrollTop] =
        startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
      addScrollingClass(i, y);
      updateGeometry(i);

      e.stopPropagation();
      e.preventDefault();
    }

    function mouseUpHandler() {
      removeScrollingClass(i, y);
      i[scrollbarYRail].classList.remove(cls.state.clicking);
      i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    }

    function bindMoves(e, touchMode) {
      startingScrollTop = element[scrollTop];
      if (touchMode && e.touches) {
        e[pageY] = e.touches[0].pageY;
      }
      startingMousePageY = e[pageY];
      scrollBy =
        (i[contentHeight] - i[containerHeight]) /
        (i[railYHeight] - i[scrollbarYHeight]);
      if (!touchMode) {
        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
        e.preventDefault();
      } else {
        i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);
      }

      i[scrollbarYRail].classList.add(cls.state.clicking);

      e.stopPropagation();
    }

    i.event.bind(i[scrollbarY], 'mousedown', function (e) {
      bindMoves(e);
    });
    i.event.bind(i[scrollbarY], 'touchstart', function (e) {
      bindMoves(e, true);
    });
  }

  function keyboard(i) {
    var element = i.element;

    var elementHovered = function () { return matches(element, ':hover'); };
    var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };

    function shouldPreventDefault(deltaX, deltaY) {
      var scrollTop = Math.floor(element.scrollTop);
      if (deltaX === 0) {
        if (!i.scrollbarYActive) {
          return false;
        }
        if (
          (scrollTop === 0 && deltaY > 0) ||
          (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)
        ) {
          return !i.settings.wheelPropagation;
        }
      }

      var scrollLeft = element.scrollLeft;
      if (deltaY === 0) {
        if (!i.scrollbarXActive) {
          return false;
        }
        if (
          (scrollLeft === 0 && deltaX < 0) ||
          (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)
        ) {
          return !i.settings.wheelPropagation;
        }
      }
      return true;
    }

    i.event.bind(i.ownerDocument, 'keydown', function (e) {
      if (
        (e.isDefaultPrevented && e.isDefaultPrevented()) ||
        e.defaultPrevented
      ) {
        return;
      }

      if (!elementHovered() && !scrollbarFocused()) {
        return;
      }

      var activeElement = document.activeElement
        ? document.activeElement
        : i.ownerDocument.activeElement;
      if (activeElement) {
        if (activeElement.tagName === 'IFRAME') {
          activeElement = activeElement.contentDocument.activeElement;
        } else {
          // go deeper if element is a webcomponent
          while (activeElement.shadowRoot) {
            activeElement = activeElement.shadowRoot.activeElement;
          }
        }
        if (isEditable(activeElement)) {
          return;
        }
      }

      var deltaX = 0;
      var deltaY = 0;

      switch (e.which) {
        case 37: // left
          if (e.metaKey) {
            deltaX = -i.contentWidth;
          } else if (e.altKey) {
            deltaX = -i.containerWidth;
          } else {
            deltaX = -30;
          }
          break;
        case 38: // up
          if (e.metaKey) {
            deltaY = i.contentHeight;
          } else if (e.altKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = 30;
          }
          break;
        case 39: // right
          if (e.metaKey) {
            deltaX = i.contentWidth;
          } else if (e.altKey) {
            deltaX = i.containerWidth;
          } else {
            deltaX = 30;
          }
          break;
        case 40: // down
          if (e.metaKey) {
            deltaY = -i.contentHeight;
          } else if (e.altKey) {
            deltaY = -i.containerHeight;
          } else {
            deltaY = -30;
          }
          break;
        case 32: // space bar
          if (e.shiftKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = -i.containerHeight;
          }
          break;
        case 33: // page up
          deltaY = i.containerHeight;
          break;
        case 34: // page down
          deltaY = -i.containerHeight;
          break;
        case 36: // home
          deltaY = i.contentHeight;
          break;
        case 35: // end
          deltaY = -i.contentHeight;
          break;
        default:
          return;
      }

      if (i.settings.suppressScrollX && deltaX !== 0) {
        return;
      }
      if (i.settings.suppressScrollY && deltaY !== 0) {
        return;
      }

      element.scrollTop -= deltaY;
      element.scrollLeft += deltaX;
      updateGeometry(i);

      if (shouldPreventDefault(deltaX, deltaY)) {
        e.preventDefault();
      }
    });
  }

  function wheel(i) {
    var element = i.element;

    function shouldPreventDefault(deltaX, deltaY) {
      var roundedScrollTop = Math.floor(element.scrollTop);
      var isTop = element.scrollTop === 0;
      var isBottom =
        roundedScrollTop + element.offsetHeight === element.scrollHeight;
      var isLeft = element.scrollLeft === 0;
      var isRight =
        element.scrollLeft + element.offsetWidth === element.scrollWidth;

      var hitsBound;

      // pick axis with primary direction
      if (Math.abs(deltaY) > Math.abs(deltaX)) {
        hitsBound = isTop || isBottom;
      } else {
        hitsBound = isLeft || isRight;
      }

      return hitsBound ? !i.settings.wheelPropagation : true;
    }

    function getDeltaFromEvent(e) {
      var deltaX = e.deltaX;
      var deltaY = -1 * e.deltaY;

      if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
        // OS X Safari
        deltaX = (-1 * e.wheelDeltaX) / 6;
        deltaY = e.wheelDeltaY / 6;
      }

      if (e.deltaMode && e.deltaMode === 1) {
        // Firefox in deltaMode 1: Line scrolling
        deltaX *= 10;
        deltaY *= 10;
      }

      if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
        // IE in some mouse drivers
        deltaX = 0;
        deltaY = e.wheelDelta;
      }

      if (e.shiftKey) {
        // reverse axis with shift key
        return [-deltaY, -deltaX];
      }
      return [deltaX, deltaY];
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      // FIXME: this is a workaround for <select> issue in FF and IE #571
      if (!env.isWebKit && element.querySelector('select:focus')) {
        return true;
      }

      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor);

        // if deltaY && vertical scrollable
        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
          if (maxScrollTop > 0) {
            if (
              (cursor.scrollTop > 0 && deltaY < 0) ||
              (cursor.scrollTop < maxScrollTop && deltaY > 0)
            ) {
              return true;
            }
          }
        }
        // if deltaX && horizontal scrollable
        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
          if (maxScrollLeft > 0) {
            if (
              (cursor.scrollLeft > 0 && deltaX < 0) ||
              (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
            ) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function mousewheelHandler(e) {
      var ref = getDeltaFromEvent(e);
      var deltaX = ref[0];
      var deltaY = ref[1];

      if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
        return;
      }

      var shouldPrevent = false;
      if (!i.settings.useBothWheelAxes) {
        // deltaX will only be used for horizontal scrolling and deltaY will
        // only be used for vertical scrolling - this is the default
        element.scrollTop -= deltaY * i.settings.wheelSpeed;
        element.scrollLeft += deltaX * i.settings.wheelSpeed;
      } else if (i.scrollbarYActive && !i.scrollbarXActive) {
        // only vertical scrollbar is active and useBothWheelAxes option is
        // active, so let's scroll vertical bar using both mouse wheel axes
        if (deltaY) {
          element.scrollTop -= deltaY * i.settings.wheelSpeed;
        } else {
          element.scrollTop += deltaX * i.settings.wheelSpeed;
        }
        shouldPrevent = true;
      } else if (i.scrollbarXActive && !i.scrollbarYActive) {
        // useBothWheelAxes and only horizontal bar is active, so use both
        // wheel axes for horizontal bar
        if (deltaX) {
          element.scrollLeft += deltaX * i.settings.wheelSpeed;
        } else {
          element.scrollLeft -= deltaY * i.settings.wheelSpeed;
        }
        shouldPrevent = true;
      }

      updateGeometry(i);

      shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
      if (shouldPrevent && !e.ctrlKey) {
        e.stopPropagation();
        e.preventDefault();
      }
    }

    if (typeof window.onwheel !== 'undefined') {
      i.event.bind(element, 'wheel', mousewheelHandler);
    } else if (typeof window.onmousewheel !== 'undefined') {
      i.event.bind(element, 'mousewheel', mousewheelHandler);
    }
  }

  function touch(i) {
    if (!env.supportsTouch && !env.supportsIePointer) {
      return;
    }

    var element = i.element;

    function shouldPrevent(deltaX, deltaY) {
      var scrollTop = Math.floor(element.scrollTop);
      var scrollLeft = element.scrollLeft;
      var magnitudeX = Math.abs(deltaX);
      var magnitudeY = Math.abs(deltaY);

      if (magnitudeY > magnitudeX) {
        // user is perhaps trying to swipe up/down the page

        if (
          (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||
          (deltaY > 0 && scrollTop === 0)
        ) {
          // set prevent for mobile Chrome refresh
          return window.scrollY === 0 && deltaY > 0 && env.isChrome;
        }
      } else if (magnitudeX > magnitudeY) {
        // user is perhaps trying to swipe left/right across the page

        if (
          (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||
          (deltaX > 0 && scrollLeft === 0)
        ) {
          return true;
        }
      }

      return true;
    }

    function applyTouchMove(differenceX, differenceY) {
      element.scrollTop -= differenceY;
      element.scrollLeft -= differenceX;

      updateGeometry(i);
    }

    var startOffset = {};
    var startTime = 0;
    var speed = {};
    var easingLoop = null;

    function getTouch(e) {
      if (e.targetTouches) {
        return e.targetTouches[0];
      } else {
        // Maybe IE pointer
        return e;
      }
    }

    function shouldHandle(e) {
      if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
        return false;
      }
      if (e.targetTouches && e.targetTouches.length === 1) {
        return true;
      }
      if (
        e.pointerType &&
        e.pointerType !== 'mouse' &&
        e.pointerType !== e.MSPOINTER_TYPE_MOUSE
      ) {
        return true;
      }
      return false;
    }

    function touchStart(e) {
      if (!shouldHandle(e)) {
        return;
      }

      var touch = getTouch(e);

      startOffset.pageX = touch.pageX;
      startOffset.pageY = touch.pageY;

      startTime = new Date().getTime();

      if (easingLoop !== null) {
        clearInterval(easingLoop);
      }
    }

    function shouldBeConsumedByChild(target, deltaX, deltaY) {
      if (!element.contains(target)) {
        return false;
      }

      var cursor = target;

      while (cursor && cursor !== element) {
        if (cursor.classList.contains(cls.element.consuming)) {
          return true;
        }

        var style = get(cursor);

        // if deltaY && vertical scrollable
        if (deltaY && style.overflowY.match(/(scroll|auto)/)) {
          var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
          if (maxScrollTop > 0) {
            if (
              (cursor.scrollTop > 0 && deltaY < 0) ||
              (cursor.scrollTop < maxScrollTop && deltaY > 0)
            ) {
              return true;
            }
          }
        }
        // if deltaX && horizontal scrollable
        if (deltaX && style.overflowX.match(/(scroll|auto)/)) {
          var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
          if (maxScrollLeft > 0) {
            if (
              (cursor.scrollLeft > 0 && deltaX < 0) ||
              (cursor.scrollLeft < maxScrollLeft && deltaX > 0)
            ) {
              return true;
            }
          }
        }

        cursor = cursor.parentNode;
      }

      return false;
    }

    function touchMove(e) {
      if (shouldHandle(e)) {
        var touch = getTouch(e);

        var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };

        var differenceX = currentOffset.pageX - startOffset.pageX;
        var differenceY = currentOffset.pageY - startOffset.pageY;

        if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
          return;
        }

        applyTouchMove(differenceX, differenceY);
        startOffset = currentOffset;

        var currentTime = new Date().getTime();

        var timeGap = currentTime - startTime;
        if (timeGap > 0) {
          speed.x = differenceX / timeGap;
          speed.y = differenceY / timeGap;
          startTime = currentTime;
        }

        if (shouldPrevent(differenceX, differenceY)) {
          e.preventDefault();
        }
      }
    }
    function touchEnd() {
      if (i.settings.swipeEasing) {
        clearInterval(easingLoop);
        easingLoop = setInterval(function() {
          if (i.isInitialized) {
            clearInterval(easingLoop);
            return;
          }

          if (!speed.x && !speed.y) {
            clearInterval(easingLoop);
            return;
          }

          if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
            clearInterval(easingLoop);
            return;
          }

          applyTouchMove(speed.x * 30, speed.y * 30);

          speed.x *= 0.8;
          speed.y *= 0.8;
        }, 10);
      }
    }

    if (env.supportsTouch) {
      i.event.bind(element, 'touchstart', touchStart);
      i.event.bind(element, 'touchmove', touchMove);
      i.event.bind(element, 'touchend', touchEnd);
    } else if (env.supportsIePointer) {
      if (window.PointerEvent) {
        i.event.bind(element, 'pointerdown', touchStart);
        i.event.bind(element, 'pointermove', touchMove);
        i.event.bind(element, 'pointerup', touchEnd);
      } else if (window.MSPointerEvent) {
        i.event.bind(element, 'MSPointerDown', touchStart);
        i.event.bind(element, 'MSPointerMove', touchMove);
        i.event.bind(element, 'MSPointerUp', touchEnd);
      }
    }
  }

  var defaultSettings = function () { return ({
    handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
    maxScrollbarLength: null,
    minScrollbarLength: null,
    scrollingThreshold: 1000,
    scrollXMarginOffset: 0,
    scrollYMarginOffset: 0,
    suppressScrollX: false,
    suppressScrollY: false,
    swipeEasing: true,
    useBothWheelAxes: false,
    wheelPropagation: true,
    wheelSpeed: 1,
  }); };

  var handlers = {
    'click-rail': clickRail,
    'drag-thumb': dragThumb,
    keyboard: keyboard,
    wheel: wheel,
    touch: touch,
  };

  var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
    var this$1 = this;
    if ( userSettings === void 0 ) userSettings = {};

    if (typeof element === 'string') {
      element = document.querySelector(element);
    }

    if (!element || !element.nodeName) {
      throw new Error('no element is specified to initialize PerfectScrollbar');
    }

    this.element = element;

    element.classList.add(cls.main);

    this.settings = defaultSettings();
    for (var key in userSettings) {
      this.settings[key] = userSettings[key];
    }

    this.containerWidth = null;
    this.containerHeight = null;
    this.contentWidth = null;
    this.contentHeight = null;

    var focus = function () { return element.classList.add(cls.state.focus); };
    var blur = function () { return element.classList.remove(cls.state.focus); };

    this.isRtl = get(element).direction === 'rtl';
    if (this.isRtl === true) {
      element.classList.add(cls.rtl);
    }
    this.isNegativeScroll = (function () {
      var originalScrollLeft = element.scrollLeft;
      var result = null;
      element.scrollLeft = -1;
      result = element.scrollLeft < 0;
      element.scrollLeft = originalScrollLeft;
      return result;
    })();
    this.negativeScrollAdjustment = this.isNegativeScroll
      ? element.scrollWidth - element.clientWidth
      : 0;
    this.event = new EventManager();
    this.ownerDocument = element.ownerDocument || document;

    this.scrollbarXRail = div(cls.element.rail('x'));
    element.appendChild(this.scrollbarXRail);
    this.scrollbarX = div(cls.element.thumb('x'));
    this.scrollbarXRail.appendChild(this.scrollbarX);
    this.scrollbarX.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarX, 'focus', focus);
    this.event.bind(this.scrollbarX, 'blur', blur);
    this.scrollbarXActive = null;
    this.scrollbarXWidth = null;
    this.scrollbarXLeft = null;
    var railXStyle = get(this.scrollbarXRail);
    this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);
    if (isNaN(this.scrollbarXBottom)) {
      this.isScrollbarXUsingBottom = false;
      this.scrollbarXTop = toInt(railXStyle.top);
    } else {
      this.isScrollbarXUsingBottom = true;
    }
    this.railBorderXWidth =
      toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);
    // Set rail to display:block to calculate margins
    set(this.scrollbarXRail, { display: 'block' });
    this.railXMarginWidth =
      toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);
    set(this.scrollbarXRail, { display: '' });
    this.railXWidth = null;
    this.railXRatio = null;

    this.scrollbarYRail = div(cls.element.rail('y'));
    element.appendChild(this.scrollbarYRail);
    this.scrollbarY = div(cls.element.thumb('y'));
    this.scrollbarYRail.appendChild(this.scrollbarY);
    this.scrollbarY.setAttribute('tabindex', 0);
    this.event.bind(this.scrollbarY, 'focus', focus);
    this.event.bind(this.scrollbarY, 'blur', blur);
    this.scrollbarYActive = null;
    this.scrollbarYHeight = null;
    this.scrollbarYTop = null;
    var railYStyle = get(this.scrollbarYRail);
    this.scrollbarYRight = parseInt(railYStyle.right, 10);
    if (isNaN(this.scrollbarYRight)) {
      this.isScrollbarYUsingRight = false;
      this.scrollbarYLeft = toInt(railYStyle.left);
    } else {
      this.isScrollbarYUsingRight = true;
    }
    this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
    this.railBorderYWidth =
      toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
    set(this.scrollbarYRail, { display: 'block' });
    this.railYMarginHeight =
      toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
    set(this.scrollbarYRail, { display: '' });
    this.railYHeight = null;
    this.railYRatio = null;

    this.reach = {
      x:
        element.scrollLeft <= 0
          ? 'start'
          : element.scrollLeft >= this.contentWidth - this.containerWidth
          ? 'end'
          : null,
      y:
        element.scrollTop <= 0
          ? 'start'
          : element.scrollTop >= this.contentHeight - this.containerHeight
          ? 'end'
          : null,
    };

    this.isAlive = true;

    this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });

    this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only
    this.lastScrollLeft = element.scrollLeft; // for onScroll only
    this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });
    updateGeometry(this);
  };

  PerfectScrollbar.prototype.update = function update () {
    if (!this.isAlive) {
      return;
    }

    // Recalcuate negative scrollLeft adjustment
    this.negativeScrollAdjustment = this.isNegativeScroll
      ? this.element.scrollWidth - this.element.clientWidth
      : 0;

    // Recalculate rail margins
    set(this.scrollbarXRail, { display: 'block' });
    set(this.scrollbarYRail, { display: 'block' });
    this.railXMarginWidth =
      toInt(get(this.scrollbarXRail).marginLeft) +
      toInt(get(this.scrollbarXRail).marginRight);
    this.railYMarginHeight =
      toInt(get(this.scrollbarYRail).marginTop) +
      toInt(get(this.scrollbarYRail).marginBottom);

    // Hide scrollbars not to affect scrollWidth and scrollHeight
    set(this.scrollbarXRail, { display: 'none' });
    set(this.scrollbarYRail, { display: 'none' });

    updateGeometry(this);

    processScrollDiff(this, 'top', 0, false, true);
    processScrollDiff(this, 'left', 0, false, true);

    set(this.scrollbarXRail, { display: '' });
    set(this.scrollbarYRail, { display: '' });
  };

  PerfectScrollbar.prototype.onScroll = function onScroll (e) {
    if (!this.isAlive) {
      return;
    }

    updateGeometry(this);
    processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
    processScrollDiff(
      this,
      'left',
      this.element.scrollLeft - this.lastScrollLeft
    );

    this.lastScrollTop = Math.floor(this.element.scrollTop);
    this.lastScrollLeft = this.element.scrollLeft;
  };

  PerfectScrollbar.prototype.destroy = function destroy () {
    if (!this.isAlive) {
      return;
    }

    this.event.unbindAll();
    remove(this.scrollbarX);
    remove(this.scrollbarY);
    remove(this.scrollbarXRail);
    remove(this.scrollbarYRail);
    this.removePsClasses();

    // unset elements
    this.element = null;
    this.scrollbarX = null;
    this.scrollbarY = null;
    this.scrollbarXRail = null;
    this.scrollbarYRail = null;

    this.isAlive = false;
  };

  PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
    this.element.className = this.element.className
      .split(' ')
      .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })
      .join(' ');
  };

  return PerfectScrollbar;

})));
//# sourceMappingURL=perfect-scrollbar.js.map


/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.js":
/*!****************************************************!*\
  !*** ./node_modules/slick-carousel/slick/slick.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
;(function(factory) {
    'use strict';
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "../sfra/node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 0) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 0) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }
        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick', '*', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                 ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                coef = -1

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2
                    }
                }
                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this,
                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                    return (val >= 0) && (val < _.slideCount);
                });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });

                if (slideControlIndex !== -1) {
                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex
                   if ($('#' + ariaButtonControl).length) {
                     $(this).attr({
                         'aria-describedby': ariaButtonControl
                     });
                   }
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                var mappedSlideIndex = tabControlIndexes[i];

                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': (i + 1) + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });

            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
          if (_.options.focusOnChange) {
            _.$slides.eq(i).attr({'tabindex': '0'});
          } else {
            _.$slides.eq(i).removeAttr('tabindex');
          }
        }

        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {

                            if (imageSrcSet) {
                                image
                                    .attr('srcset', imageSrcSet );

                                if (imageSizes) {
                                    image
                                        .attr('sizes', imageSizes );
                                }
                            }

                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy data-srcset data-sizes')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                if (imageSrcSet) {
                    image
                        .attr('srcset', imageSrcSet );

                    if (imageSizes) {
                        image
                            .attr('sizes', imageSizes );
                    }
                }

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy data-srcset data-sizes')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    // loop through the responsive object and splice out duplicates.
                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                    _.$slides
                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                    .removeClass('slick-active')
                    .end();

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));


/***/ }),

/***/ "./node_modules/smoothscroll-polyfill/dist/smoothscroll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/smoothscroll-polyfill/dist/smoothscroll.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* smoothscroll v0.4.4 - 2019 - Dustan Kasten, Jeremias Menichelli - MIT License */
(function () {
  'use strict';

  // polyfill
  function polyfill() {
    // aliases
    var w = window;
    var d = document;

    // return if scroll behavior is supported and polyfill is not forced
    if (
      'scrollBehavior' in d.documentElement.style &&
      w.__forceSmoothScrollPolyfill__ !== true
    ) {
      return;
    }

    // globals
    var Element = w.HTMLElement || w.Element;
    var SCROLL_TIME = 468;

    // object gathering original scroll methods
    var original = {
      scroll: w.scroll || w.scrollTo,
      scrollBy: w.scrollBy,
      elementScroll: Element.prototype.scroll || scrollElement,
      scrollIntoView: Element.prototype.scrollIntoView
    };

    // define timing method
    var now =
      w.performance && w.performance.now
        ? w.performance.now.bind(w.performance)
        : Date.now;

    /**
     * indicates if a the current browser is made by Microsoft
     * @method isMicrosoftBrowser
     * @param {String} userAgent
     * @returns {Boolean}
     */
    function isMicrosoftBrowser(userAgent) {
      var userAgentPatterns = ['MSIE ', 'Trident/', 'Edge/'];

      return new RegExp(userAgentPatterns.join('|')).test(userAgent);
    }

    /*
     * IE has rounding bug rounding down clientHeight and clientWidth and
     * rounding up scrollHeight and scrollWidth causing false positives
     * on hasScrollableSpace
     */
    var ROUNDING_TOLERANCE = isMicrosoftBrowser(w.navigator.userAgent) ? 1 : 0;

    /**
     * changes scroll position inside an element
     * @method scrollElement
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function scrollElement(x, y) {
      this.scrollLeft = x;
      this.scrollTop = y;
    }

    /**
     * returns result of applying ease math function to a number
     * @method ease
     * @param {Number} k
     * @returns {Number}
     */
    function ease(k) {
      return 0.5 * (1 - Math.cos(Math.PI * k));
    }

    /**
     * indicates if a smooth behavior should be applied
     * @method shouldBailOut
     * @param {Number|Object} firstArg
     * @returns {Boolean}
     */
    function shouldBailOut(firstArg) {
      if (
        firstArg === null ||
        typeof firstArg !== 'object' ||
        firstArg.behavior === undefined ||
        firstArg.behavior === 'auto' ||
        firstArg.behavior === 'instant'
      ) {
        // first argument is not an object/null
        // or behavior is auto, instant or undefined
        return true;
      }

      if (typeof firstArg === 'object' && firstArg.behavior === 'smooth') {
        // first argument is an object and behavior is smooth
        return false;
      }

      // throw error when behavior is not supported
      throw new TypeError(
        'behavior member of ScrollOptions ' +
          firstArg.behavior +
          ' is not a valid value for enumeration ScrollBehavior.'
      );
    }

    /**
     * indicates if an element has scrollable space in the provided axis
     * @method hasScrollableSpace
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function hasScrollableSpace(el, axis) {
      if (axis === 'Y') {
        return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;
      }

      if (axis === 'X') {
        return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;
      }
    }

    /**
     * indicates if an element has a scrollable overflow property in the axis
     * @method canOverflow
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function canOverflow(el, axis) {
      var overflowValue = w.getComputedStyle(el, null)['overflow' + axis];

      return overflowValue === 'auto' || overflowValue === 'scroll';
    }

    /**
     * indicates if an element can be scrolled in either axis
     * @method isScrollable
     * @param {Node} el
     * @param {String} axis
     * @returns {Boolean}
     */
    function isScrollable(el) {
      var isScrollableY = hasScrollableSpace(el, 'Y') && canOverflow(el, 'Y');
      var isScrollableX = hasScrollableSpace(el, 'X') && canOverflow(el, 'X');

      return isScrollableY || isScrollableX;
    }

    /**
     * finds scrollable parent of an element
     * @method findScrollableParent
     * @param {Node} el
     * @returns {Node} el
     */
    function findScrollableParent(el) {
      while (el !== d.body && isScrollable(el) === false) {
        el = el.parentNode || el.host;
      }

      return el;
    }

    /**
     * self invoked function that, given a context, steps through scrolling
     * @method step
     * @param {Object} context
     * @returns {undefined}
     */
    function step(context) {
      var time = now();
      var value;
      var currentX;
      var currentY;
      var elapsed = (time - context.startTime) / SCROLL_TIME;

      // avoid elapsed times higher than one
      elapsed = elapsed > 1 ? 1 : elapsed;

      // apply easing to elapsed time
      value = ease(elapsed);

      currentX = context.startX + (context.x - context.startX) * value;
      currentY = context.startY + (context.y - context.startY) * value;

      context.method.call(context.scrollable, currentX, currentY);

      // scroll more if we have not reached our destination
      if (currentX !== context.x || currentY !== context.y) {
        w.requestAnimationFrame(step.bind(w, context));
      }
    }

    /**
     * scrolls window or element with a smooth behavior
     * @method smoothScroll
     * @param {Object|Node} el
     * @param {Number} x
     * @param {Number} y
     * @returns {undefined}
     */
    function smoothScroll(el, x, y) {
      var scrollable;
      var startX;
      var startY;
      var method;
      var startTime = now();

      // define scroll context
      if (el === d.body) {
        scrollable = w;
        startX = w.scrollX || w.pageXOffset;
        startY = w.scrollY || w.pageYOffset;
        method = original.scroll;
      } else {
        scrollable = el;
        startX = el.scrollLeft;
        startY = el.scrollTop;
        method = scrollElement;
      }

      // scroll looping over a frame
      step({
        scrollable: scrollable,
        method: method,
        startTime: startTime,
        startX: startX,
        startY: startY,
        x: x,
        y: y
      });
    }

    // ORIGINAL METHODS OVERRIDES
    // w.scroll and w.scrollTo
    w.scroll = w.scrollTo = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scroll.call(
          w,
          arguments[0].left !== undefined
            ? arguments[0].left
            : typeof arguments[0] !== 'object'
              ? arguments[0]
              : w.scrollX || w.pageXOffset,
          // use top prop, second argument if present or fallback to scrollY
          arguments[0].top !== undefined
            ? arguments[0].top
            : arguments[1] !== undefined
              ? arguments[1]
              : w.scrollY || w.pageYOffset
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        arguments[0].left !== undefined
          ? ~~arguments[0].left
          : w.scrollX || w.pageXOffset,
        arguments[0].top !== undefined
          ? ~~arguments[0].top
          : w.scrollY || w.pageYOffset
      );
    };

    // w.scrollBy
    w.scrollBy = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0])) {
        original.scrollBy.call(
          w,
          arguments[0].left !== undefined
            ? arguments[0].left
            : typeof arguments[0] !== 'object' ? arguments[0] : 0,
          arguments[0].top !== undefined
            ? arguments[0].top
            : arguments[1] !== undefined ? arguments[1] : 0
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        w,
        d.body,
        ~~arguments[0].left + (w.scrollX || w.pageXOffset),
        ~~arguments[0].top + (w.scrollY || w.pageYOffset)
      );
    };

    // Element.prototype.scroll and Element.prototype.scrollTo
    Element.prototype.scroll = Element.prototype.scrollTo = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        // if one number is passed, throw error to match Firefox implementation
        if (typeof arguments[0] === 'number' && arguments[1] === undefined) {
          throw new SyntaxError('Value could not be converted');
        }

        original.elementScroll.call(
          this,
          // use left prop, first number argument or fallback to scrollLeft
          arguments[0].left !== undefined
            ? ~~arguments[0].left
            : typeof arguments[0] !== 'object' ? ~~arguments[0] : this.scrollLeft,
          // use top prop, second argument or fallback to scrollTop
          arguments[0].top !== undefined
            ? ~~arguments[0].top
            : arguments[1] !== undefined ? ~~arguments[1] : this.scrollTop
        );

        return;
      }

      var left = arguments[0].left;
      var top = arguments[0].top;

      // LET THE SMOOTHNESS BEGIN!
      smoothScroll.call(
        this,
        this,
        typeof left === 'undefined' ? this.scrollLeft : ~~left,
        typeof top === 'undefined' ? this.scrollTop : ~~top
      );
    };

    // Element.prototype.scrollBy
    Element.prototype.scrollBy = function() {
      // avoid action when no arguments are passed
      if (arguments[0] === undefined) {
        return;
      }

      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.elementScroll.call(
          this,
          arguments[0].left !== undefined
            ? ~~arguments[0].left + this.scrollLeft
            : ~~arguments[0] + this.scrollLeft,
          arguments[0].top !== undefined
            ? ~~arguments[0].top + this.scrollTop
            : ~~arguments[1] + this.scrollTop
        );

        return;
      }

      this.scroll({
        left: ~~arguments[0].left + this.scrollLeft,
        top: ~~arguments[0].top + this.scrollTop,
        behavior: arguments[0].behavior
      });
    };

    // Element.prototype.scrollIntoView
    Element.prototype.scrollIntoView = function() {
      // avoid smooth behavior if not required
      if (shouldBailOut(arguments[0]) === true) {
        original.scrollIntoView.call(
          this,
          arguments[0] === undefined ? true : arguments[0]
        );

        return;
      }

      // LET THE SMOOTHNESS BEGIN!
      var scrollableParent = findScrollableParent(this);
      var parentRects = scrollableParent.getBoundingClientRect();
      var clientRects = this.getBoundingClientRect();

      if (scrollableParent !== d.body) {
        // reveal element inside parent
        smoothScroll.call(
          this,
          scrollableParent,
          scrollableParent.scrollLeft + clientRects.left - parentRects.left,
          scrollableParent.scrollTop + clientRects.top - parentRects.top
        );

        // reveal parent in viewport unless is fixed
        if (w.getComputedStyle(scrollableParent).position !== 'fixed') {
          w.scrollBy({
            left: parentRects.left,
            top: parentRects.top,
            behavior: 'smooth'
          });
        }
      } else {
        // reveal element in viewport
        w.scrollBy({
          left: clientRects.left,
          top: clientRects.top,
          behavior: 'smooth'
        });
      }
    };
  }

  if (true) {
    // commonjs
    module.exports = { polyfill: polyfill };
  } else {}

}());


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })

/******/ });